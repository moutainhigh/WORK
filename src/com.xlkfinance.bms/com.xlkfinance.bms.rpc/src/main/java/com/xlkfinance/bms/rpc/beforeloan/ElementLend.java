/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ElementLend implements org.apache.thrift.TBase<ElementLend, ElementLend._Fields>, java.io.Serializable, Cloneable, Comparable<ElementLend> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ElementLend");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LEND_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lendUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LEND_FILES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lendFilesId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RETURN_FILES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("returnFilesId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lendTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORIGINAL_RETURN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("originalReturnTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACTUAL_RETURN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualReturnTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SIGN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("signTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SIGN_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("signUser", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LEND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lendState", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LEND_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("lendFiles", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField RETURN_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("returnFiles", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ACTUAL_RETURN_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("actualReturnTimeEnd", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField LEND_TIME_END_FIELD_DESC = new org.apache.thrift.protocol.TField("lendTimeEnd", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField PORPUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("porpuse", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ElementLendStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ElementLendTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int lendUserId; // required
  public int orgId; // required
  public String lendFilesId; // required
  public String returnFilesId; // required
  public String lendTime; // required
  public String originalReturnTime; // required
  public String actualReturnTime; // required
  public String signTime; // required
  public String signUser; // required
  public int lendState; // required
  public String remark; // required
  public String updateTime; // required
  public List<String> lendFiles; // required
  public List<String> returnFiles; // required
  public int productId; // required
  public String projectName; // required
  public String actualReturnTimeEnd; // required
  public String lendTimeEnd; // required
  public String condition; // required
  public List<Integer> userIds; // required
  public String productName; // required
  public String orgName; // required
  public String realName; // required
  public String porpuse; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    LEND_USER_ID((short)3, "lendUserId"),
    ORG_ID((short)4, "orgId"),
    LEND_FILES_ID((short)5, "lendFilesId"),
    RETURN_FILES_ID((short)6, "returnFilesId"),
    LEND_TIME((short)7, "lendTime"),
    ORIGINAL_RETURN_TIME((short)8, "originalReturnTime"),
    ACTUAL_RETURN_TIME((short)9, "actualReturnTime"),
    SIGN_TIME((short)10, "signTime"),
    SIGN_USER((short)11, "signUser"),
    LEND_STATE((short)12, "lendState"),
    REMARK((short)13, "remark"),
    UPDATE_TIME((short)14, "updateTime"),
    LEND_FILES((short)15, "lendFiles"),
    RETURN_FILES((short)16, "returnFiles"),
    PRODUCT_ID((short)17, "productId"),
    PROJECT_NAME((short)18, "projectName"),
    ACTUAL_RETURN_TIME_END((short)19, "actualReturnTimeEnd"),
    LEND_TIME_END((short)20, "lendTimeEnd"),
    CONDITION((short)21, "condition"),
    USER_IDS((short)22, "userIds"),
    PRODUCT_NAME((short)23, "productName"),
    ORG_NAME((short)24, "orgName"),
    REAL_NAME((short)25, "realName"),
    PORPUSE((short)26, "porpuse"),
    PAGE((short)27, "page"),
    ROWS((short)28, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // LEND_USER_ID
          return LEND_USER_ID;
        case 4: // ORG_ID
          return ORG_ID;
        case 5: // LEND_FILES_ID
          return LEND_FILES_ID;
        case 6: // RETURN_FILES_ID
          return RETURN_FILES_ID;
        case 7: // LEND_TIME
          return LEND_TIME;
        case 8: // ORIGINAL_RETURN_TIME
          return ORIGINAL_RETURN_TIME;
        case 9: // ACTUAL_RETURN_TIME
          return ACTUAL_RETURN_TIME;
        case 10: // SIGN_TIME
          return SIGN_TIME;
        case 11: // SIGN_USER
          return SIGN_USER;
        case 12: // LEND_STATE
          return LEND_STATE;
        case 13: // REMARK
          return REMARK;
        case 14: // UPDATE_TIME
          return UPDATE_TIME;
        case 15: // LEND_FILES
          return LEND_FILES;
        case 16: // RETURN_FILES
          return RETURN_FILES;
        case 17: // PRODUCT_ID
          return PRODUCT_ID;
        case 18: // PROJECT_NAME
          return PROJECT_NAME;
        case 19: // ACTUAL_RETURN_TIME_END
          return ACTUAL_RETURN_TIME_END;
        case 20: // LEND_TIME_END
          return LEND_TIME_END;
        case 21: // CONDITION
          return CONDITION;
        case 22: // USER_IDS
          return USER_IDS;
        case 23: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 24: // ORG_NAME
          return ORG_NAME;
        case 25: // REAL_NAME
          return REAL_NAME;
        case 26: // PORPUSE
          return PORPUSE;
        case 27: // PAGE
          return PAGE;
        case 28: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __LENDUSERID_ISSET_ID = 2;
  private static final int __ORGID_ISSET_ID = 3;
  private static final int __LENDSTATE_ISSET_ID = 4;
  private static final int __PRODUCTID_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEND_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("lendUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEND_FILES_ID, new org.apache.thrift.meta_data.FieldMetaData("lendFilesId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_FILES_ID, new org.apache.thrift.meta_data.FieldMetaData("returnFilesId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("lendTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_RETURN_TIME, new org.apache.thrift.meta_data.FieldMetaData("originalReturnTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_RETURN_TIME, new org.apache.thrift.meta_data.FieldMetaData("actualReturnTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN_TIME, new org.apache.thrift.meta_data.FieldMetaData("signTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN_USER, new org.apache.thrift.meta_data.FieldMetaData("signUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEND_STATE, new org.apache.thrift.meta_data.FieldMetaData("lendState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEND_FILES, new org.apache.thrift.meta_data.FieldMetaData("lendFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RETURN_FILES, new org.apache.thrift.meta_data.FieldMetaData("returnFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_RETURN_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("actualReturnTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEND_TIME_END, new org.apache.thrift.meta_data.FieldMetaData("lendTimeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORPUSE, new org.apache.thrift.meta_data.FieldMetaData("porpuse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ElementLend.class, metaDataMap);
  }

  public ElementLend() {
  }

  public ElementLend(
    int pid,
    int projectId,
    int lendUserId,
    int orgId,
    String lendFilesId,
    String returnFilesId,
    String lendTime,
    String originalReturnTime,
    String actualReturnTime,
    String signTime,
    String signUser,
    int lendState,
    String remark,
    String updateTime,
    List<String> lendFiles,
    List<String> returnFiles,
    int productId,
    String projectName,
    String actualReturnTimeEnd,
    String lendTimeEnd,
    String condition,
    List<Integer> userIds,
    String productName,
    String orgName,
    String realName,
    String porpuse,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.lendUserId = lendUserId;
    setLendUserIdIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.lendFilesId = lendFilesId;
    this.returnFilesId = returnFilesId;
    this.lendTime = lendTime;
    this.originalReturnTime = originalReturnTime;
    this.actualReturnTime = actualReturnTime;
    this.signTime = signTime;
    this.signUser = signUser;
    this.lendState = lendState;
    setLendStateIsSet(true);
    this.remark = remark;
    this.updateTime = updateTime;
    this.lendFiles = lendFiles;
    this.returnFiles = returnFiles;
    this.productId = productId;
    setProductIdIsSet(true);
    this.projectName = projectName;
    this.actualReturnTimeEnd = actualReturnTimeEnd;
    this.lendTimeEnd = lendTimeEnd;
    this.condition = condition;
    this.userIds = userIds;
    this.productName = productName;
    this.orgName = orgName;
    this.realName = realName;
    this.porpuse = porpuse;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ElementLend(ElementLend other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.lendUserId = other.lendUserId;
    this.orgId = other.orgId;
    if (other.isSetLendFilesId()) {
      this.lendFilesId = other.lendFilesId;
    }
    if (other.isSetReturnFilesId()) {
      this.returnFilesId = other.returnFilesId;
    }
    if (other.isSetLendTime()) {
      this.lendTime = other.lendTime;
    }
    if (other.isSetOriginalReturnTime()) {
      this.originalReturnTime = other.originalReturnTime;
    }
    if (other.isSetActualReturnTime()) {
      this.actualReturnTime = other.actualReturnTime;
    }
    if (other.isSetSignTime()) {
      this.signTime = other.signTime;
    }
    if (other.isSetSignUser()) {
      this.signUser = other.signUser;
    }
    this.lendState = other.lendState;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetLendFiles()) {
      List<String> __this__lendFiles = new ArrayList<String>(other.lendFiles);
      this.lendFiles = __this__lendFiles;
    }
    if (other.isSetReturnFiles()) {
      List<String> __this__returnFiles = new ArrayList<String>(other.returnFiles);
      this.returnFiles = __this__returnFiles;
    }
    this.productId = other.productId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetActualReturnTimeEnd()) {
      this.actualReturnTimeEnd = other.actualReturnTimeEnd;
    }
    if (other.isSetLendTimeEnd()) {
      this.lendTimeEnd = other.lendTimeEnd;
    }
    if (other.isSetCondition()) {
      this.condition = other.condition;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetPorpuse()) {
      this.porpuse = other.porpuse;
    }
    this.page = other.page;
    this.rows = other.rows;
  }

  public ElementLend deepCopy() {
    return new ElementLend(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setLendUserIdIsSet(false);
    this.lendUserId = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
    this.lendFilesId = null;
    this.returnFilesId = null;
    this.lendTime = null;
    this.originalReturnTime = null;
    this.actualReturnTime = null;
    this.signTime = null;
    this.signUser = null;
    setLendStateIsSet(false);
    this.lendState = 0;
    this.remark = null;
    this.updateTime = null;
    this.lendFiles = null;
    this.returnFiles = null;
    setProductIdIsSet(false);
    this.productId = 0;
    this.projectName = null;
    this.actualReturnTimeEnd = null;
    this.lendTimeEnd = null;
    this.condition = null;
    this.userIds = null;
    this.productName = null;
    this.orgName = null;
    this.realName = null;
    this.porpuse = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ElementLend setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ElementLend setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getLendUserId() {
    return this.lendUserId;
  }

  public ElementLend setLendUserId(int lendUserId) {
    this.lendUserId = lendUserId;
    setLendUserIdIsSet(true);
    return this;
  }

  public void unsetLendUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENDUSERID_ISSET_ID);
  }

  /** Returns true if field lendUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetLendUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __LENDUSERID_ISSET_ID);
  }

  public void setLendUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENDUSERID_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public ElementLend setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public String getLendFilesId() {
    return this.lendFilesId;
  }

  public ElementLend setLendFilesId(String lendFilesId) {
    this.lendFilesId = lendFilesId;
    return this;
  }

  public void unsetLendFilesId() {
    this.lendFilesId = null;
  }

  /** Returns true if field lendFilesId is set (has been assigned a value) and false otherwise */
  public boolean isSetLendFilesId() {
    return this.lendFilesId != null;
  }

  public void setLendFilesIdIsSet(boolean value) {
    if (!value) {
      this.lendFilesId = null;
    }
  }

  public String getReturnFilesId() {
    return this.returnFilesId;
  }

  public ElementLend setReturnFilesId(String returnFilesId) {
    this.returnFilesId = returnFilesId;
    return this;
  }

  public void unsetReturnFilesId() {
    this.returnFilesId = null;
  }

  /** Returns true if field returnFilesId is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFilesId() {
    return this.returnFilesId != null;
  }

  public void setReturnFilesIdIsSet(boolean value) {
    if (!value) {
      this.returnFilesId = null;
    }
  }

  public String getLendTime() {
    return this.lendTime;
  }

  public ElementLend setLendTime(String lendTime) {
    this.lendTime = lendTime;
    return this;
  }

  public void unsetLendTime() {
    this.lendTime = null;
  }

  /** Returns true if field lendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLendTime() {
    return this.lendTime != null;
  }

  public void setLendTimeIsSet(boolean value) {
    if (!value) {
      this.lendTime = null;
    }
  }

  public String getOriginalReturnTime() {
    return this.originalReturnTime;
  }

  public ElementLend setOriginalReturnTime(String originalReturnTime) {
    this.originalReturnTime = originalReturnTime;
    return this;
  }

  public void unsetOriginalReturnTime() {
    this.originalReturnTime = null;
  }

  /** Returns true if field originalReturnTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalReturnTime() {
    return this.originalReturnTime != null;
  }

  public void setOriginalReturnTimeIsSet(boolean value) {
    if (!value) {
      this.originalReturnTime = null;
    }
  }

  public String getActualReturnTime() {
    return this.actualReturnTime;
  }

  public ElementLend setActualReturnTime(String actualReturnTime) {
    this.actualReturnTime = actualReturnTime;
    return this;
  }

  public void unsetActualReturnTime() {
    this.actualReturnTime = null;
  }

  /** Returns true if field actualReturnTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActualReturnTime() {
    return this.actualReturnTime != null;
  }

  public void setActualReturnTimeIsSet(boolean value) {
    if (!value) {
      this.actualReturnTime = null;
    }
  }

  public String getSignTime() {
    return this.signTime;
  }

  public ElementLend setSignTime(String signTime) {
    this.signTime = signTime;
    return this;
  }

  public void unsetSignTime() {
    this.signTime = null;
  }

  /** Returns true if field signTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSignTime() {
    return this.signTime != null;
  }

  public void setSignTimeIsSet(boolean value) {
    if (!value) {
      this.signTime = null;
    }
  }

  public String getSignUser() {
    return this.signUser;
  }

  public ElementLend setSignUser(String signUser) {
    this.signUser = signUser;
    return this;
  }

  public void unsetSignUser() {
    this.signUser = null;
  }

  /** Returns true if field signUser is set (has been assigned a value) and false otherwise */
  public boolean isSetSignUser() {
    return this.signUser != null;
  }

  public void setSignUserIsSet(boolean value) {
    if (!value) {
      this.signUser = null;
    }
  }

  public int getLendState() {
    return this.lendState;
  }

  public ElementLend setLendState(int lendState) {
    this.lendState = lendState;
    setLendStateIsSet(true);
    return this;
  }

  public void unsetLendState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENDSTATE_ISSET_ID);
  }

  /** Returns true if field lendState is set (has been assigned a value) and false otherwise */
  public boolean isSetLendState() {
    return EncodingUtils.testBit(__isset_bitfield, __LENDSTATE_ISSET_ID);
  }

  public void setLendStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENDSTATE_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public ElementLend setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ElementLend setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getLendFilesSize() {
    return (this.lendFiles == null) ? 0 : this.lendFiles.size();
  }

  public java.util.Iterator<String> getLendFilesIterator() {
    return (this.lendFiles == null) ? null : this.lendFiles.iterator();
  }

  public void addToLendFiles(String elem) {
    if (this.lendFiles == null) {
      this.lendFiles = new ArrayList<String>();
    }
    this.lendFiles.add(elem);
  }

  public List<String> getLendFiles() {
    return this.lendFiles;
  }

  public ElementLend setLendFiles(List<String> lendFiles) {
    this.lendFiles = lendFiles;
    return this;
  }

  public void unsetLendFiles() {
    this.lendFiles = null;
  }

  /** Returns true if field lendFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetLendFiles() {
    return this.lendFiles != null;
  }

  public void setLendFilesIsSet(boolean value) {
    if (!value) {
      this.lendFiles = null;
    }
  }

  public int getReturnFilesSize() {
    return (this.returnFiles == null) ? 0 : this.returnFiles.size();
  }

  public java.util.Iterator<String> getReturnFilesIterator() {
    return (this.returnFiles == null) ? null : this.returnFiles.iterator();
  }

  public void addToReturnFiles(String elem) {
    if (this.returnFiles == null) {
      this.returnFiles = new ArrayList<String>();
    }
    this.returnFiles.add(elem);
  }

  public List<String> getReturnFiles() {
    return this.returnFiles;
  }

  public ElementLend setReturnFiles(List<String> returnFiles) {
    this.returnFiles = returnFiles;
    return this;
  }

  public void unsetReturnFiles() {
    this.returnFiles = null;
  }

  /** Returns true if field returnFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFiles() {
    return this.returnFiles != null;
  }

  public void setReturnFilesIsSet(boolean value) {
    if (!value) {
      this.returnFiles = null;
    }
  }

  public int getProductId() {
    return this.productId;
  }

  public ElementLend setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ElementLend setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getActualReturnTimeEnd() {
    return this.actualReturnTimeEnd;
  }

  public ElementLend setActualReturnTimeEnd(String actualReturnTimeEnd) {
    this.actualReturnTimeEnd = actualReturnTimeEnd;
    return this;
  }

  public void unsetActualReturnTimeEnd() {
    this.actualReturnTimeEnd = null;
  }

  /** Returns true if field actualReturnTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetActualReturnTimeEnd() {
    return this.actualReturnTimeEnd != null;
  }

  public void setActualReturnTimeEndIsSet(boolean value) {
    if (!value) {
      this.actualReturnTimeEnd = null;
    }
  }

  public String getLendTimeEnd() {
    return this.lendTimeEnd;
  }

  public ElementLend setLendTimeEnd(String lendTimeEnd) {
    this.lendTimeEnd = lendTimeEnd;
    return this;
  }

  public void unsetLendTimeEnd() {
    this.lendTimeEnd = null;
  }

  /** Returns true if field lendTimeEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetLendTimeEnd() {
    return this.lendTimeEnd != null;
  }

  public void setLendTimeEndIsSet(boolean value) {
    if (!value) {
      this.lendTimeEnd = null;
    }
  }

  public String getCondition() {
    return this.condition;
  }

  public ElementLend setCondition(String condition) {
    this.condition = condition;
    return this;
  }

  public void unsetCondition() {
    this.condition = null;
  }

  /** Returns true if field condition is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition() {
    return this.condition != null;
  }

  public void setConditionIsSet(boolean value) {
    if (!value) {
      this.condition = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ElementLend setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public ElementLend setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getOrgName() {
    return this.orgName;
  }

  public ElementLend setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public ElementLend setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getPorpuse() {
    return this.porpuse;
  }

  public ElementLend setPorpuse(String porpuse) {
    this.porpuse = porpuse;
    return this;
  }

  public void unsetPorpuse() {
    this.porpuse = null;
  }

  /** Returns true if field porpuse is set (has been assigned a value) and false otherwise */
  public boolean isSetPorpuse() {
    return this.porpuse != null;
  }

  public void setPorpuseIsSet(boolean value) {
    if (!value) {
      this.porpuse = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ElementLend setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ElementLend setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LEND_USER_ID:
      if (value == null) {
        unsetLendUserId();
      } else {
        setLendUserId((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case LEND_FILES_ID:
      if (value == null) {
        unsetLendFilesId();
      } else {
        setLendFilesId((String)value);
      }
      break;

    case RETURN_FILES_ID:
      if (value == null) {
        unsetReturnFilesId();
      } else {
        setReturnFilesId((String)value);
      }
      break;

    case LEND_TIME:
      if (value == null) {
        unsetLendTime();
      } else {
        setLendTime((String)value);
      }
      break;

    case ORIGINAL_RETURN_TIME:
      if (value == null) {
        unsetOriginalReturnTime();
      } else {
        setOriginalReturnTime((String)value);
      }
      break;

    case ACTUAL_RETURN_TIME:
      if (value == null) {
        unsetActualReturnTime();
      } else {
        setActualReturnTime((String)value);
      }
      break;

    case SIGN_TIME:
      if (value == null) {
        unsetSignTime();
      } else {
        setSignTime((String)value);
      }
      break;

    case SIGN_USER:
      if (value == null) {
        unsetSignUser();
      } else {
        setSignUser((String)value);
      }
      break;

    case LEND_STATE:
      if (value == null) {
        unsetLendState();
      } else {
        setLendState((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case LEND_FILES:
      if (value == null) {
        unsetLendFiles();
      } else {
        setLendFiles((List<String>)value);
      }
      break;

    case RETURN_FILES:
      if (value == null) {
        unsetReturnFiles();
      } else {
        setReturnFiles((List<String>)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case ACTUAL_RETURN_TIME_END:
      if (value == null) {
        unsetActualReturnTimeEnd();
      } else {
        setActualReturnTimeEnd((String)value);
      }
      break;

    case LEND_TIME_END:
      if (value == null) {
        unsetLendTimeEnd();
      } else {
        setLendTimeEnd((String)value);
      }
      break;

    case CONDITION:
      if (value == null) {
        unsetCondition();
      } else {
        setCondition((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case PORPUSE:
      if (value == null) {
        unsetPorpuse();
      } else {
        setPorpuse((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LEND_USER_ID:
      return Integer.valueOf(getLendUserId());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case LEND_FILES_ID:
      return getLendFilesId();

    case RETURN_FILES_ID:
      return getReturnFilesId();

    case LEND_TIME:
      return getLendTime();

    case ORIGINAL_RETURN_TIME:
      return getOriginalReturnTime();

    case ACTUAL_RETURN_TIME:
      return getActualReturnTime();

    case SIGN_TIME:
      return getSignTime();

    case SIGN_USER:
      return getSignUser();

    case LEND_STATE:
      return Integer.valueOf(getLendState());

    case REMARK:
      return getRemark();

    case UPDATE_TIME:
      return getUpdateTime();

    case LEND_FILES:
      return getLendFiles();

    case RETURN_FILES:
      return getReturnFiles();

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case PROJECT_NAME:
      return getProjectName();

    case ACTUAL_RETURN_TIME_END:
      return getActualReturnTimeEnd();

    case LEND_TIME_END:
      return getLendTimeEnd();

    case CONDITION:
      return getCondition();

    case USER_IDS:
      return getUserIds();

    case PRODUCT_NAME:
      return getProductName();

    case ORG_NAME:
      return getOrgName();

    case REAL_NAME:
      return getRealName();

    case PORPUSE:
      return getPorpuse();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case LEND_USER_ID:
      return isSetLendUserId();
    case ORG_ID:
      return isSetOrgId();
    case LEND_FILES_ID:
      return isSetLendFilesId();
    case RETURN_FILES_ID:
      return isSetReturnFilesId();
    case LEND_TIME:
      return isSetLendTime();
    case ORIGINAL_RETURN_TIME:
      return isSetOriginalReturnTime();
    case ACTUAL_RETURN_TIME:
      return isSetActualReturnTime();
    case SIGN_TIME:
      return isSetSignTime();
    case SIGN_USER:
      return isSetSignUser();
    case LEND_STATE:
      return isSetLendState();
    case REMARK:
      return isSetRemark();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case LEND_FILES:
      return isSetLendFiles();
    case RETURN_FILES:
      return isSetReturnFiles();
    case PRODUCT_ID:
      return isSetProductId();
    case PROJECT_NAME:
      return isSetProjectName();
    case ACTUAL_RETURN_TIME_END:
      return isSetActualReturnTimeEnd();
    case LEND_TIME_END:
      return isSetLendTimeEnd();
    case CONDITION:
      return isSetCondition();
    case USER_IDS:
      return isSetUserIds();
    case PRODUCT_NAME:
      return isSetProductName();
    case ORG_NAME:
      return isSetOrgName();
    case REAL_NAME:
      return isSetRealName();
    case PORPUSE:
      return isSetPorpuse();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ElementLend)
      return this.equals((ElementLend)that);
    return false;
  }

  public boolean equals(ElementLend that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_lendUserId = true;
    boolean that_present_lendUserId = true;
    if (this_present_lendUserId || that_present_lendUserId) {
      if (!(this_present_lendUserId && that_present_lendUserId))
        return false;
      if (this.lendUserId != that.lendUserId)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_lendFilesId = true && this.isSetLendFilesId();
    boolean that_present_lendFilesId = true && that.isSetLendFilesId();
    if (this_present_lendFilesId || that_present_lendFilesId) {
      if (!(this_present_lendFilesId && that_present_lendFilesId))
        return false;
      if (!this.lendFilesId.equals(that.lendFilesId))
        return false;
    }

    boolean this_present_returnFilesId = true && this.isSetReturnFilesId();
    boolean that_present_returnFilesId = true && that.isSetReturnFilesId();
    if (this_present_returnFilesId || that_present_returnFilesId) {
      if (!(this_present_returnFilesId && that_present_returnFilesId))
        return false;
      if (!this.returnFilesId.equals(that.returnFilesId))
        return false;
    }

    boolean this_present_lendTime = true && this.isSetLendTime();
    boolean that_present_lendTime = true && that.isSetLendTime();
    if (this_present_lendTime || that_present_lendTime) {
      if (!(this_present_lendTime && that_present_lendTime))
        return false;
      if (!this.lendTime.equals(that.lendTime))
        return false;
    }

    boolean this_present_originalReturnTime = true && this.isSetOriginalReturnTime();
    boolean that_present_originalReturnTime = true && that.isSetOriginalReturnTime();
    if (this_present_originalReturnTime || that_present_originalReturnTime) {
      if (!(this_present_originalReturnTime && that_present_originalReturnTime))
        return false;
      if (!this.originalReturnTime.equals(that.originalReturnTime))
        return false;
    }

    boolean this_present_actualReturnTime = true && this.isSetActualReturnTime();
    boolean that_present_actualReturnTime = true && that.isSetActualReturnTime();
    if (this_present_actualReturnTime || that_present_actualReturnTime) {
      if (!(this_present_actualReturnTime && that_present_actualReturnTime))
        return false;
      if (!this.actualReturnTime.equals(that.actualReturnTime))
        return false;
    }

    boolean this_present_signTime = true && this.isSetSignTime();
    boolean that_present_signTime = true && that.isSetSignTime();
    if (this_present_signTime || that_present_signTime) {
      if (!(this_present_signTime && that_present_signTime))
        return false;
      if (!this.signTime.equals(that.signTime))
        return false;
    }

    boolean this_present_signUser = true && this.isSetSignUser();
    boolean that_present_signUser = true && that.isSetSignUser();
    if (this_present_signUser || that_present_signUser) {
      if (!(this_present_signUser && that_present_signUser))
        return false;
      if (!this.signUser.equals(that.signUser))
        return false;
    }

    boolean this_present_lendState = true;
    boolean that_present_lendState = true;
    if (this_present_lendState || that_present_lendState) {
      if (!(this_present_lendState && that_present_lendState))
        return false;
      if (this.lendState != that.lendState)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_lendFiles = true && this.isSetLendFiles();
    boolean that_present_lendFiles = true && that.isSetLendFiles();
    if (this_present_lendFiles || that_present_lendFiles) {
      if (!(this_present_lendFiles && that_present_lendFiles))
        return false;
      if (!this.lendFiles.equals(that.lendFiles))
        return false;
    }

    boolean this_present_returnFiles = true && this.isSetReturnFiles();
    boolean that_present_returnFiles = true && that.isSetReturnFiles();
    if (this_present_returnFiles || that_present_returnFiles) {
      if (!(this_present_returnFiles && that_present_returnFiles))
        return false;
      if (!this.returnFiles.equals(that.returnFiles))
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_actualReturnTimeEnd = true && this.isSetActualReturnTimeEnd();
    boolean that_present_actualReturnTimeEnd = true && that.isSetActualReturnTimeEnd();
    if (this_present_actualReturnTimeEnd || that_present_actualReturnTimeEnd) {
      if (!(this_present_actualReturnTimeEnd && that_present_actualReturnTimeEnd))
        return false;
      if (!this.actualReturnTimeEnd.equals(that.actualReturnTimeEnd))
        return false;
    }

    boolean this_present_lendTimeEnd = true && this.isSetLendTimeEnd();
    boolean that_present_lendTimeEnd = true && that.isSetLendTimeEnd();
    if (this_present_lendTimeEnd || that_present_lendTimeEnd) {
      if (!(this_present_lendTimeEnd && that_present_lendTimeEnd))
        return false;
      if (!this.lendTimeEnd.equals(that.lendTimeEnd))
        return false;
    }

    boolean this_present_condition = true && this.isSetCondition();
    boolean that_present_condition = true && that.isSetCondition();
    if (this_present_condition || that_present_condition) {
      if (!(this_present_condition && that_present_condition))
        return false;
      if (!this.condition.equals(that.condition))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_porpuse = true && this.isSetPorpuse();
    boolean that_present_porpuse = true && that.isSetPorpuse();
    if (this_present_porpuse || that_present_porpuse) {
      if (!(this_present_porpuse && that_present_porpuse))
        return false;
      if (!this.porpuse.equals(that.porpuse))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_lendUserId = true;
    list.add(present_lendUserId);
    if (present_lendUserId)
      list.add(lendUserId);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_lendFilesId = true && (isSetLendFilesId());
    list.add(present_lendFilesId);
    if (present_lendFilesId)
      list.add(lendFilesId);

    boolean present_returnFilesId = true && (isSetReturnFilesId());
    list.add(present_returnFilesId);
    if (present_returnFilesId)
      list.add(returnFilesId);

    boolean present_lendTime = true && (isSetLendTime());
    list.add(present_lendTime);
    if (present_lendTime)
      list.add(lendTime);

    boolean present_originalReturnTime = true && (isSetOriginalReturnTime());
    list.add(present_originalReturnTime);
    if (present_originalReturnTime)
      list.add(originalReturnTime);

    boolean present_actualReturnTime = true && (isSetActualReturnTime());
    list.add(present_actualReturnTime);
    if (present_actualReturnTime)
      list.add(actualReturnTime);

    boolean present_signTime = true && (isSetSignTime());
    list.add(present_signTime);
    if (present_signTime)
      list.add(signTime);

    boolean present_signUser = true && (isSetSignUser());
    list.add(present_signUser);
    if (present_signUser)
      list.add(signUser);

    boolean present_lendState = true;
    list.add(present_lendState);
    if (present_lendState)
      list.add(lendState);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_lendFiles = true && (isSetLendFiles());
    list.add(present_lendFiles);
    if (present_lendFiles)
      list.add(lendFiles);

    boolean present_returnFiles = true && (isSetReturnFiles());
    list.add(present_returnFiles);
    if (present_returnFiles)
      list.add(returnFiles);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_actualReturnTimeEnd = true && (isSetActualReturnTimeEnd());
    list.add(present_actualReturnTimeEnd);
    if (present_actualReturnTimeEnd)
      list.add(actualReturnTimeEnd);

    boolean present_lendTimeEnd = true && (isSetLendTimeEnd());
    list.add(present_lendTimeEnd);
    if (present_lendTimeEnd)
      list.add(lendTimeEnd);

    boolean present_condition = true && (isSetCondition());
    list.add(present_condition);
    if (present_condition)
      list.add(condition);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_porpuse = true && (isSetPorpuse());
    list.add(present_porpuse);
    if (present_porpuse)
      list.add(porpuse);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(ElementLend other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendUserId()).compareTo(other.isSetLendUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendUserId, other.lendUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendFilesId()).compareTo(other.isSetLendFilesId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendFilesId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendFilesId, other.lendFilesId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFilesId()).compareTo(other.isSetReturnFilesId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFilesId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnFilesId, other.returnFilesId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendTime()).compareTo(other.isSetLendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendTime, other.lendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalReturnTime()).compareTo(other.isSetOriginalReturnTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalReturnTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalReturnTime, other.originalReturnTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualReturnTime()).compareTo(other.isSetActualReturnTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualReturnTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualReturnTime, other.actualReturnTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignTime()).compareTo(other.isSetSignTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signTime, other.signTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignUser()).compareTo(other.isSetSignUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signUser, other.signUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendState()).compareTo(other.isSetLendState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendState, other.lendState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendFiles()).compareTo(other.isSetLendFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendFiles, other.lendFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFiles()).compareTo(other.isSetReturnFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnFiles, other.returnFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualReturnTimeEnd()).compareTo(other.isSetActualReturnTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualReturnTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualReturnTimeEnd, other.actualReturnTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendTimeEnd()).compareTo(other.isSetLendTimeEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendTimeEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendTimeEnd, other.lendTimeEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPorpuse()).compareTo(other.isSetPorpuse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorpuse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.porpuse, other.porpuse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ElementLend(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendUserId:");
    sb.append(this.lendUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendFilesId:");
    if (this.lendFilesId == null) {
      sb.append("null");
    } else {
      sb.append(this.lendFilesId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnFilesId:");
    if (this.returnFilesId == null) {
      sb.append("null");
    } else {
      sb.append(this.returnFilesId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendTime:");
    if (this.lendTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lendTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalReturnTime:");
    if (this.originalReturnTime == null) {
      sb.append("null");
    } else {
      sb.append(this.originalReturnTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualReturnTime:");
    if (this.actualReturnTime == null) {
      sb.append("null");
    } else {
      sb.append(this.actualReturnTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signTime:");
    if (this.signTime == null) {
      sb.append("null");
    } else {
      sb.append(this.signTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signUser:");
    if (this.signUser == null) {
      sb.append("null");
    } else {
      sb.append(this.signUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendState:");
    sb.append(this.lendState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendFiles:");
    if (this.lendFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.lendFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnFiles:");
    if (this.returnFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.returnFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualReturnTimeEnd:");
    if (this.actualReturnTimeEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.actualReturnTimeEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendTimeEnd:");
    if (this.lendTimeEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.lendTimeEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("condition:");
    if (this.condition == null) {
      sb.append("null");
    } else {
      sb.append(this.condition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("porpuse:");
    if (this.porpuse == null) {
      sb.append("null");
    } else {
      sb.append(this.porpuse);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ElementLendStandardSchemeFactory implements SchemeFactory {
    public ElementLendStandardScheme getScheme() {
      return new ElementLendStandardScheme();
    }
  }

  private static class ElementLendStandardScheme extends StandardScheme<ElementLend> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ElementLend struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEND_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lendUserId = iprot.readI32();
              struct.setLendUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEND_FILES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lendFilesId = iprot.readString();
              struct.setLendFilesIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RETURN_FILES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnFilesId = iprot.readString();
              struct.setReturnFilesIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lendTime = iprot.readString();
              struct.setLendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORIGINAL_RETURN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalReturnTime = iprot.readString();
              struct.setOriginalReturnTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTUAL_RETURN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualReturnTime = iprot.readString();
              struct.setActualReturnTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SIGN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signTime = iprot.readString();
              struct.setSignTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SIGN_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signUser = iprot.readString();
              struct.setSignUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LEND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lendState = iprot.readI32();
              struct.setLendStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LEND_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.lendFiles = new ArrayList<String>(_list56.size);
                String _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = iprot.readString();
                  struct.lendFiles.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setLendFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RETURN_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.returnFiles = new ArrayList<String>(_list59.size);
                String _elem60;
                for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                {
                  _elem60 = iprot.readString();
                  struct.returnFiles.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setReturnFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ACTUAL_RETURN_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualReturnTimeEnd = iprot.readString();
              struct.setActualReturnTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LEND_TIME_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lendTimeEnd = iprot.readString();
              struct.setLendTimeEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.condition = iprot.readString();
              struct.setConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list62.size);
                int _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = iprot.readI32();
                  struct.userIds.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PORPUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.porpuse = iprot.readString();
              struct.setPorpuseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ElementLend struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEND_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.lendUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      if (struct.lendFilesId != null) {
        oprot.writeFieldBegin(LEND_FILES_ID_FIELD_DESC);
        oprot.writeString(struct.lendFilesId);
        oprot.writeFieldEnd();
      }
      if (struct.returnFilesId != null) {
        oprot.writeFieldBegin(RETURN_FILES_ID_FIELD_DESC);
        oprot.writeString(struct.returnFilesId);
        oprot.writeFieldEnd();
      }
      if (struct.lendTime != null) {
        oprot.writeFieldBegin(LEND_TIME_FIELD_DESC);
        oprot.writeString(struct.lendTime);
        oprot.writeFieldEnd();
      }
      if (struct.originalReturnTime != null) {
        oprot.writeFieldBegin(ORIGINAL_RETURN_TIME_FIELD_DESC);
        oprot.writeString(struct.originalReturnTime);
        oprot.writeFieldEnd();
      }
      if (struct.actualReturnTime != null) {
        oprot.writeFieldBegin(ACTUAL_RETURN_TIME_FIELD_DESC);
        oprot.writeString(struct.actualReturnTime);
        oprot.writeFieldEnd();
      }
      if (struct.signTime != null) {
        oprot.writeFieldBegin(SIGN_TIME_FIELD_DESC);
        oprot.writeString(struct.signTime);
        oprot.writeFieldEnd();
      }
      if (struct.signUser != null) {
        oprot.writeFieldBegin(SIGN_USER_FIELD_DESC);
        oprot.writeString(struct.signUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEND_STATE_FIELD_DESC);
      oprot.writeI32(struct.lendState);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.lendFiles != null) {
        oprot.writeFieldBegin(LEND_FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.lendFiles.size()));
          for (String _iter65 : struct.lendFiles)
          {
            oprot.writeString(_iter65);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.returnFiles != null) {
        oprot.writeFieldBegin(RETURN_FILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.returnFiles.size()));
          for (String _iter66 : struct.returnFiles)
          {
            oprot.writeString(_iter66);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.actualReturnTimeEnd != null) {
        oprot.writeFieldBegin(ACTUAL_RETURN_TIME_END_FIELD_DESC);
        oprot.writeString(struct.actualReturnTimeEnd);
        oprot.writeFieldEnd();
      }
      if (struct.lendTimeEnd != null) {
        oprot.writeFieldBegin(LEND_TIME_END_FIELD_DESC);
        oprot.writeString(struct.lendTimeEnd);
        oprot.writeFieldEnd();
      }
      if (struct.condition != null) {
        oprot.writeFieldBegin(CONDITION_FIELD_DESC);
        oprot.writeString(struct.condition);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter67 : struct.userIds)
          {
            oprot.writeI32(_iter67);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.porpuse != null) {
        oprot.writeFieldBegin(PORPUSE_FIELD_DESC);
        oprot.writeString(struct.porpuse);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ElementLendTupleSchemeFactory implements SchemeFactory {
    public ElementLendTupleScheme getScheme() {
      return new ElementLendTupleScheme();
    }
  }

  private static class ElementLendTupleScheme extends TupleScheme<ElementLend> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ElementLend struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetLendUserId()) {
        optionals.set(2);
      }
      if (struct.isSetOrgId()) {
        optionals.set(3);
      }
      if (struct.isSetLendFilesId()) {
        optionals.set(4);
      }
      if (struct.isSetReturnFilesId()) {
        optionals.set(5);
      }
      if (struct.isSetLendTime()) {
        optionals.set(6);
      }
      if (struct.isSetOriginalReturnTime()) {
        optionals.set(7);
      }
      if (struct.isSetActualReturnTime()) {
        optionals.set(8);
      }
      if (struct.isSetSignTime()) {
        optionals.set(9);
      }
      if (struct.isSetSignUser()) {
        optionals.set(10);
      }
      if (struct.isSetLendState()) {
        optionals.set(11);
      }
      if (struct.isSetRemark()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(13);
      }
      if (struct.isSetLendFiles()) {
        optionals.set(14);
      }
      if (struct.isSetReturnFiles()) {
        optionals.set(15);
      }
      if (struct.isSetProductId()) {
        optionals.set(16);
      }
      if (struct.isSetProjectName()) {
        optionals.set(17);
      }
      if (struct.isSetActualReturnTimeEnd()) {
        optionals.set(18);
      }
      if (struct.isSetLendTimeEnd()) {
        optionals.set(19);
      }
      if (struct.isSetCondition()) {
        optionals.set(20);
      }
      if (struct.isSetUserIds()) {
        optionals.set(21);
      }
      if (struct.isSetProductName()) {
        optionals.set(22);
      }
      if (struct.isSetOrgName()) {
        optionals.set(23);
      }
      if (struct.isSetRealName()) {
        optionals.set(24);
      }
      if (struct.isSetPorpuse()) {
        optionals.set(25);
      }
      if (struct.isSetPage()) {
        optionals.set(26);
      }
      if (struct.isSetRows()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLendUserId()) {
        oprot.writeI32(struct.lendUserId);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetLendFilesId()) {
        oprot.writeString(struct.lendFilesId);
      }
      if (struct.isSetReturnFilesId()) {
        oprot.writeString(struct.returnFilesId);
      }
      if (struct.isSetLendTime()) {
        oprot.writeString(struct.lendTime);
      }
      if (struct.isSetOriginalReturnTime()) {
        oprot.writeString(struct.originalReturnTime);
      }
      if (struct.isSetActualReturnTime()) {
        oprot.writeString(struct.actualReturnTime);
      }
      if (struct.isSetSignTime()) {
        oprot.writeString(struct.signTime);
      }
      if (struct.isSetSignUser()) {
        oprot.writeString(struct.signUser);
      }
      if (struct.isSetLendState()) {
        oprot.writeI32(struct.lendState);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetLendFiles()) {
        {
          oprot.writeI32(struct.lendFiles.size());
          for (String _iter68 : struct.lendFiles)
          {
            oprot.writeString(_iter68);
          }
        }
      }
      if (struct.isSetReturnFiles()) {
        {
          oprot.writeI32(struct.returnFiles.size());
          for (String _iter69 : struct.returnFiles)
          {
            oprot.writeString(_iter69);
          }
        }
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetActualReturnTimeEnd()) {
        oprot.writeString(struct.actualReturnTimeEnd);
      }
      if (struct.isSetLendTimeEnd()) {
        oprot.writeString(struct.lendTimeEnd);
      }
      if (struct.isSetCondition()) {
        oprot.writeString(struct.condition);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter70 : struct.userIds)
          {
            oprot.writeI32(_iter70);
          }
        }
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetPorpuse()) {
        oprot.writeString(struct.porpuse);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ElementLend struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lendUserId = iprot.readI32();
        struct.setLendUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lendFilesId = iprot.readString();
        struct.setLendFilesIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.returnFilesId = iprot.readString();
        struct.setReturnFilesIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lendTime = iprot.readString();
        struct.setLendTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.originalReturnTime = iprot.readString();
        struct.setOriginalReturnTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.actualReturnTime = iprot.readString();
        struct.setActualReturnTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.signTime = iprot.readString();
        struct.setSignTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.signUser = iprot.readString();
        struct.setSignUserIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lendState = iprot.readI32();
        struct.setLendStateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.lendFiles = new ArrayList<String>(_list71.size);
          String _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = iprot.readString();
            struct.lendFiles.add(_elem72);
          }
        }
        struct.setLendFilesIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.returnFiles = new ArrayList<String>(_list74.size);
          String _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = iprot.readString();
            struct.returnFiles.add(_elem75);
          }
        }
        struct.setReturnFilesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.actualReturnTimeEnd = iprot.readString();
        struct.setActualReturnTimeEndIsSet(true);
      }
      if (incoming.get(19)) {
        struct.lendTimeEnd = iprot.readString();
        struct.setLendTimeEndIsSet(true);
      }
      if (incoming.get(20)) {
        struct.condition = iprot.readString();
        struct.setConditionIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list77.size);
          int _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readI32();
            struct.userIds.add(_elem78);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(25)) {
        struct.porpuse = iprot.readString();
        struct.setPorpuseIsSet(true);
      }
      if (incoming.get(26)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(27)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


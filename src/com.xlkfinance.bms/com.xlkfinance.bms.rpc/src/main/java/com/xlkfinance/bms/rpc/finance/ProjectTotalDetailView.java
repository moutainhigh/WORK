/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class ProjectTotalDetailView implements org.apache.thrift.TBase<ProjectTotalDetailView, ProjectTotalDetailView._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectTotalDetailView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectTotalDetailView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIVE_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveDt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACTUAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField AVAILABLE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("availableBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField USE_BAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("useBalAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DATA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataVersion", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DELETE_ABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteAble", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectTotalDetailViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectTotalDetailViewTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public String receiveDt; // required
  public double actualAmt; // required
  public double availableBalance; // required
  public double reconciliationAmt; // required
  public double useBalAmt; // required
  public int dataVersion; // required
  public boolean deleteAble; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    RECEIVE_DT((short)3, "receiveDt"),
    ACTUAL_AMT((short)4, "actualAmt"),
    AVAILABLE_BALANCE((short)5, "availableBalance"),
    RECONCILIATION_AMT((short)6, "reconciliationAmt"),
    USE_BAL_AMT((short)7, "useBalAmt"),
    DATA_VERSION((short)8, "dataVersion"),
    DELETE_ABLE((short)9, "deleteAble");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // RECEIVE_DT
          return RECEIVE_DT;
        case 4: // ACTUAL_AMT
          return ACTUAL_AMT;
        case 5: // AVAILABLE_BALANCE
          return AVAILABLE_BALANCE;
        case 6: // RECONCILIATION_AMT
          return RECONCILIATION_AMT;
        case 7: // USE_BAL_AMT
          return USE_BAL_AMT;
        case 8: // DATA_VERSION
          return DATA_VERSION;
        case 9: // DELETE_ABLE
          return DELETE_ABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __ACTUALAMT_ISSET_ID = 2;
  private static final int __AVAILABLEBALANCE_ISSET_ID = 3;
  private static final int __RECONCILIATIONAMT_ISSET_ID = 4;
  private static final int __USEBALAMT_ISSET_ID = 5;
  private static final int __DATAVERSION_ISSET_ID = 6;
  private static final int __DELETEABLE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVE_DT, new org.apache.thrift.meta_data.FieldMetaData("receiveDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("actualAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("availableBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_BAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("useBalAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("dataVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELETE_ABLE, new org.apache.thrift.meta_data.FieldMetaData("deleteAble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectTotalDetailView.class, metaDataMap);
  }

  public ProjectTotalDetailView() {
  }

  public ProjectTotalDetailView(
    int pid,
    int loanId,
    String receiveDt,
    double actualAmt,
    double availableBalance,
    double reconciliationAmt,
    double useBalAmt,
    int dataVersion,
    boolean deleteAble)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.receiveDt = receiveDt;
    this.actualAmt = actualAmt;
    setActualAmtIsSet(true);
    this.availableBalance = availableBalance;
    setAvailableBalanceIsSet(true);
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    this.useBalAmt = useBalAmt;
    setUseBalAmtIsSet(true);
    this.dataVersion = dataVersion;
    setDataVersionIsSet(true);
    this.deleteAble = deleteAble;
    setDeleteAbleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectTotalDetailView(ProjectTotalDetailView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    if (other.isSetReceiveDt()) {
      this.receiveDt = other.receiveDt;
    }
    this.actualAmt = other.actualAmt;
    this.availableBalance = other.availableBalance;
    this.reconciliationAmt = other.reconciliationAmt;
    this.useBalAmt = other.useBalAmt;
    this.dataVersion = other.dataVersion;
    this.deleteAble = other.deleteAble;
  }

  public ProjectTotalDetailView deepCopy() {
    return new ProjectTotalDetailView(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.receiveDt = null;
    setActualAmtIsSet(false);
    this.actualAmt = 0.0;
    setAvailableBalanceIsSet(false);
    this.availableBalance = 0.0;
    setReconciliationAmtIsSet(false);
    this.reconciliationAmt = 0.0;
    setUseBalAmtIsSet(false);
    this.useBalAmt = 0.0;
    setDataVersionIsSet(false);
    this.dataVersion = 0;
    setDeleteAbleIsSet(false);
    this.deleteAble = false;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectTotalDetailView setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public ProjectTotalDetailView setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getReceiveDt() {
    return this.receiveDt;
  }

  public ProjectTotalDetailView setReceiveDt(String receiveDt) {
    this.receiveDt = receiveDt;
    return this;
  }

  public void unsetReceiveDt() {
    this.receiveDt = null;
  }

  /** Returns true if field receiveDt is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveDt() {
    return this.receiveDt != null;
  }

  public void setReceiveDtIsSet(boolean value) {
    if (!value) {
      this.receiveDt = null;
    }
  }

  public double getActualAmt() {
    return this.actualAmt;
  }

  public ProjectTotalDetailView setActualAmt(double actualAmt) {
    this.actualAmt = actualAmt;
    setActualAmtIsSet(true);
    return this;
  }

  public void unsetActualAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALAMT_ISSET_ID);
  }

  /** Returns true if field actualAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALAMT_ISSET_ID);
  }

  public void setActualAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALAMT_ISSET_ID, value);
  }

  public double getAvailableBalance() {
    return this.availableBalance;
  }

  public ProjectTotalDetailView setAvailableBalance(double availableBalance) {
    this.availableBalance = availableBalance;
    setAvailableBalanceIsSet(true);
    return this;
  }

  public void unsetAvailableBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEBALANCE_ISSET_ID);
  }

  /** Returns true if field availableBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEBALANCE_ISSET_ID);
  }

  public void setAvailableBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEBALANCE_ISSET_ID, value);
  }

  public double getReconciliationAmt() {
    return this.reconciliationAmt;
  }

  public ProjectTotalDetailView setReconciliationAmt(double reconciliationAmt) {
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field reconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  public void setReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID, value);
  }

  public double getUseBalAmt() {
    return this.useBalAmt;
  }

  public ProjectTotalDetailView setUseBalAmt(double useBalAmt) {
    this.useBalAmt = useBalAmt;
    setUseBalAmtIsSet(true);
    return this;
  }

  public void unsetUseBalAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEBALAMT_ISSET_ID);
  }

  /** Returns true if field useBalAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetUseBalAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __USEBALAMT_ISSET_ID);
  }

  public void setUseBalAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEBALAMT_ISSET_ID, value);
  }

  public int getDataVersion() {
    return this.dataVersion;
  }

  public ProjectTotalDetailView setDataVersion(int dataVersion) {
    this.dataVersion = dataVersion;
    setDataVersionIsSet(true);
    return this;
  }

  public void unsetDataVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAVERSION_ISSET_ID);
  }

  /** Returns true if field dataVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetDataVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAVERSION_ISSET_ID);
  }

  public void setDataVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAVERSION_ISSET_ID, value);
  }

  public boolean isDeleteAble() {
    return this.deleteAble;
  }

  public ProjectTotalDetailView setDeleteAble(boolean deleteAble) {
    this.deleteAble = deleteAble;
    setDeleteAbleIsSet(true);
    return this;
  }

  public void unsetDeleteAble() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETEABLE_ISSET_ID);
  }

  /** Returns true if field deleteAble is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteAble() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETEABLE_ISSET_ID);
  }

  public void setDeleteAbleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETEABLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case RECEIVE_DT:
      if (value == null) {
        unsetReceiveDt();
      } else {
        setReceiveDt((String)value);
      }
      break;

    case ACTUAL_AMT:
      if (value == null) {
        unsetActualAmt();
      } else {
        setActualAmt((Double)value);
      }
      break;

    case AVAILABLE_BALANCE:
      if (value == null) {
        unsetAvailableBalance();
      } else {
        setAvailableBalance((Double)value);
      }
      break;

    case RECONCILIATION_AMT:
      if (value == null) {
        unsetReconciliationAmt();
      } else {
        setReconciliationAmt((Double)value);
      }
      break;

    case USE_BAL_AMT:
      if (value == null) {
        unsetUseBalAmt();
      } else {
        setUseBalAmt((Double)value);
      }
      break;

    case DATA_VERSION:
      if (value == null) {
        unsetDataVersion();
      } else {
        setDataVersion((Integer)value);
      }
      break;

    case DELETE_ABLE:
      if (value == null) {
        unsetDeleteAble();
      } else {
        setDeleteAble((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case RECEIVE_DT:
      return getReceiveDt();

    case ACTUAL_AMT:
      return Double.valueOf(getActualAmt());

    case AVAILABLE_BALANCE:
      return Double.valueOf(getAvailableBalance());

    case RECONCILIATION_AMT:
      return Double.valueOf(getReconciliationAmt());

    case USE_BAL_AMT:
      return Double.valueOf(getUseBalAmt());

    case DATA_VERSION:
      return Integer.valueOf(getDataVersion());

    case DELETE_ABLE:
      return Boolean.valueOf(isDeleteAble());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case RECEIVE_DT:
      return isSetReceiveDt();
    case ACTUAL_AMT:
      return isSetActualAmt();
    case AVAILABLE_BALANCE:
      return isSetAvailableBalance();
    case RECONCILIATION_AMT:
      return isSetReconciliationAmt();
    case USE_BAL_AMT:
      return isSetUseBalAmt();
    case DATA_VERSION:
      return isSetDataVersion();
    case DELETE_ABLE:
      return isSetDeleteAble();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectTotalDetailView)
      return this.equals((ProjectTotalDetailView)that);
    return false;
  }

  public boolean equals(ProjectTotalDetailView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_receiveDt = true && this.isSetReceiveDt();
    boolean that_present_receiveDt = true && that.isSetReceiveDt();
    if (this_present_receiveDt || that_present_receiveDt) {
      if (!(this_present_receiveDt && that_present_receiveDt))
        return false;
      if (!this.receiveDt.equals(that.receiveDt))
        return false;
    }

    boolean this_present_actualAmt = true;
    boolean that_present_actualAmt = true;
    if (this_present_actualAmt || that_present_actualAmt) {
      if (!(this_present_actualAmt && that_present_actualAmt))
        return false;
      if (this.actualAmt != that.actualAmt)
        return false;
    }

    boolean this_present_availableBalance = true;
    boolean that_present_availableBalance = true;
    if (this_present_availableBalance || that_present_availableBalance) {
      if (!(this_present_availableBalance && that_present_availableBalance))
        return false;
      if (this.availableBalance != that.availableBalance)
        return false;
    }

    boolean this_present_reconciliationAmt = true;
    boolean that_present_reconciliationAmt = true;
    if (this_present_reconciliationAmt || that_present_reconciliationAmt) {
      if (!(this_present_reconciliationAmt && that_present_reconciliationAmt))
        return false;
      if (this.reconciliationAmt != that.reconciliationAmt)
        return false;
    }

    boolean this_present_useBalAmt = true;
    boolean that_present_useBalAmt = true;
    if (this_present_useBalAmt || that_present_useBalAmt) {
      if (!(this_present_useBalAmt && that_present_useBalAmt))
        return false;
      if (this.useBalAmt != that.useBalAmt)
        return false;
    }

    boolean this_present_dataVersion = true;
    boolean that_present_dataVersion = true;
    if (this_present_dataVersion || that_present_dataVersion) {
      if (!(this_present_dataVersion && that_present_dataVersion))
        return false;
      if (this.dataVersion != that.dataVersion)
        return false;
    }

    boolean this_present_deleteAble = true;
    boolean that_present_deleteAble = true;
    if (this_present_deleteAble || that_present_deleteAble) {
      if (!(this_present_deleteAble && that_present_deleteAble))
        return false;
      if (this.deleteAble != that.deleteAble)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_receiveDt = true && (isSetReceiveDt());
    list.add(present_receiveDt);
    if (present_receiveDt)
      list.add(receiveDt);

    boolean present_actualAmt = true;
    list.add(present_actualAmt);
    if (present_actualAmt)
      list.add(actualAmt);

    boolean present_availableBalance = true;
    list.add(present_availableBalance);
    if (present_availableBalance)
      list.add(availableBalance);

    boolean present_reconciliationAmt = true;
    list.add(present_reconciliationAmt);
    if (present_reconciliationAmt)
      list.add(reconciliationAmt);

    boolean present_useBalAmt = true;
    list.add(present_useBalAmt);
    if (present_useBalAmt)
      list.add(useBalAmt);

    boolean present_dataVersion = true;
    list.add(present_dataVersion);
    if (present_dataVersion)
      list.add(dataVersion);

    boolean present_deleteAble = true;
    list.add(present_deleteAble);
    if (present_deleteAble)
      list.add(deleteAble);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectTotalDetailView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveDt()).compareTo(other.isSetReceiveDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveDt, other.receiveDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualAmt()).compareTo(other.isSetActualAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualAmt, other.actualAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableBalance()).compareTo(other.isSetAvailableBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableBalance, other.availableBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationAmt()).compareTo(other.isSetReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationAmt, other.reconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseBalAmt()).compareTo(other.isSetUseBalAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseBalAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useBalAmt, other.useBalAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataVersion()).compareTo(other.isSetDataVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataVersion, other.dataVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleteAble()).compareTo(other.isSetDeleteAble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteAble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteAble, other.deleteAble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectTotalDetailView(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveDt:");
    if (this.receiveDt == null) {
      sb.append("null");
    } else {
      sb.append(this.receiveDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualAmt:");
    sb.append(this.actualAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableBalance:");
    sb.append(this.availableBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationAmt:");
    sb.append(this.reconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useBalAmt:");
    sb.append(this.useBalAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataVersion:");
    sb.append(this.dataVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleteAble:");
    sb.append(this.deleteAble);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectTotalDetailViewStandardSchemeFactory implements SchemeFactory {
    public ProjectTotalDetailViewStandardScheme getScheme() {
      return new ProjectTotalDetailViewStandardScheme();
    }
  }

  private static class ProjectTotalDetailViewStandardScheme extends StandardScheme<ProjectTotalDetailView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectTotalDetailView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIVE_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiveDt = iprot.readString();
              struct.setReceiveDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTUAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualAmt = iprot.readDouble();
              struct.setActualAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVAILABLE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableBalance = iprot.readDouble();
              struct.setAvailableBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconciliationAmt = iprot.readDouble();
              struct.setReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USE_BAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useBalAmt = iprot.readDouble();
              struct.setUseBalAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataVersion = iprot.readI32();
              struct.setDataVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DELETE_ABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleteAble = iprot.readBool();
              struct.setDeleteAbleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectTotalDetailView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.receiveDt != null) {
        oprot.writeFieldBegin(RECEIVE_DT_FIELD_DESC);
        oprot.writeString(struct.receiveDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTUAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.actualAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.availableBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconciliationAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_BAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.useBalAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_VERSION_FIELD_DESC);
      oprot.writeI32(struct.dataVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETE_ABLE_FIELD_DESC);
      oprot.writeBool(struct.deleteAble);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectTotalDetailViewTupleSchemeFactory implements SchemeFactory {
    public ProjectTotalDetailViewTupleScheme getScheme() {
      return new ProjectTotalDetailViewTupleScheme();
    }
  }

  private static class ProjectTotalDetailViewTupleScheme extends TupleScheme<ProjectTotalDetailView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectTotalDetailView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetReceiveDt()) {
        optionals.set(2);
      }
      if (struct.isSetActualAmt()) {
        optionals.set(3);
      }
      if (struct.isSetAvailableBalance()) {
        optionals.set(4);
      }
      if (struct.isSetReconciliationAmt()) {
        optionals.set(5);
      }
      if (struct.isSetUseBalAmt()) {
        optionals.set(6);
      }
      if (struct.isSetDataVersion()) {
        optionals.set(7);
      }
      if (struct.isSetDeleteAble()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetReceiveDt()) {
        oprot.writeString(struct.receiveDt);
      }
      if (struct.isSetActualAmt()) {
        oprot.writeDouble(struct.actualAmt);
      }
      if (struct.isSetAvailableBalance()) {
        oprot.writeDouble(struct.availableBalance);
      }
      if (struct.isSetReconciliationAmt()) {
        oprot.writeDouble(struct.reconciliationAmt);
      }
      if (struct.isSetUseBalAmt()) {
        oprot.writeDouble(struct.useBalAmt);
      }
      if (struct.isSetDataVersion()) {
        oprot.writeI32(struct.dataVersion);
      }
      if (struct.isSetDeleteAble()) {
        oprot.writeBool(struct.deleteAble);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectTotalDetailView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.receiveDt = iprot.readString();
        struct.setReceiveDtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.actualAmt = iprot.readDouble();
        struct.setActualAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.availableBalance = iprot.readDouble();
        struct.setAvailableBalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reconciliationAmt = iprot.readDouble();
        struct.setReconciliationAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.useBalAmt = iprot.readDouble();
        struct.setUseBalAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dataVersion = iprot.readI32();
        struct.setDataVersionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.deleteAble = iprot.readBool();
        struct.setDeleteAbleIsSet(true);
      }
    }
  }

}


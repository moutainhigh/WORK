/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class BizDynamicEvaluateService {

  public interface Iface {

    public int checkIsEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException;

    public BizEvaluateMap queryBizEvaluateMap(int handleDynamicId) throws org.apache.thrift.TException;

    public boolean addEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException;

    public boolean updateEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkIsEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBizEvaluateMap(int handleDynamicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int checkIsEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException
    {
      send_checkIsEvaluate(bizDynamicEvaluateInfo);
      return recv_checkIsEvaluate();
    }

    public void send_checkIsEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException
    {
      checkIsEvaluate_args args = new checkIsEvaluate_args();
      args.setBizDynamicEvaluateInfo(bizDynamicEvaluateInfo);
      sendBase("checkIsEvaluate", args);
    }

    public int recv_checkIsEvaluate() throws org.apache.thrift.TException
    {
      checkIsEvaluate_result result = new checkIsEvaluate_result();
      receiveBase(result, "checkIsEvaluate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkIsEvaluate failed: unknown result");
    }

    public BizEvaluateMap queryBizEvaluateMap(int handleDynamicId) throws org.apache.thrift.TException
    {
      send_queryBizEvaluateMap(handleDynamicId);
      return recv_queryBizEvaluateMap();
    }

    public void send_queryBizEvaluateMap(int handleDynamicId) throws org.apache.thrift.TException
    {
      queryBizEvaluateMap_args args = new queryBizEvaluateMap_args();
      args.setHandleDynamicId(handleDynamicId);
      sendBase("queryBizEvaluateMap", args);
    }

    public BizEvaluateMap recv_queryBizEvaluateMap() throws org.apache.thrift.TException
    {
      queryBizEvaluateMap_result result = new queryBizEvaluateMap_result();
      receiveBase(result, "queryBizEvaluateMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBizEvaluateMap failed: unknown result");
    }

    public boolean addEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException
    {
      send_addEvaluate(bizDynamicEvaluateInfo);
      return recv_addEvaluate();
    }

    public void send_addEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException
    {
      addEvaluate_args args = new addEvaluate_args();
      args.setBizDynamicEvaluateInfo(bizDynamicEvaluateInfo);
      sendBase("addEvaluate", args);
    }

    public boolean recv_addEvaluate() throws org.apache.thrift.TException
    {
      addEvaluate_result result = new addEvaluate_result();
      receiveBase(result, "addEvaluate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addEvaluate failed: unknown result");
    }

    public boolean updateEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException
    {
      send_updateEvaluate(bizDynamicEvaluateInfo);
      return recv_updateEvaluate();
    }

    public void send_updateEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) throws org.apache.thrift.TException
    {
      updateEvaluate_args args = new updateEvaluate_args();
      args.setBizDynamicEvaluateInfo(bizDynamicEvaluateInfo);
      sendBase("updateEvaluate", args);
    }

    public boolean recv_updateEvaluate() throws org.apache.thrift.TException
    {
      updateEvaluate_result result = new updateEvaluate_result();
      receiveBase(result, "updateEvaluate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEvaluate failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkIsEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkIsEvaluate_call method_call = new checkIsEvaluate_call(bizDynamicEvaluateInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkIsEvaluate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamicEvaluateInfo bizDynamicEvaluateInfo;
      public checkIsEvaluate_call(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkIsEvaluate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkIsEvaluate_args args = new checkIsEvaluate_args();
        args.setBizDynamicEvaluateInfo(bizDynamicEvaluateInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkIsEvaluate();
      }
    }

    public void queryBizEvaluateMap(int handleDynamicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBizEvaluateMap_call method_call = new queryBizEvaluateMap_call(handleDynamicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBizEvaluateMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int handleDynamicId;
      public queryBizEvaluateMap_call(int handleDynamicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDynamicId = handleDynamicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBizEvaluateMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBizEvaluateMap_args args = new queryBizEvaluateMap_args();
        args.setHandleDynamicId(handleDynamicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BizEvaluateMap getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBizEvaluateMap();
      }
    }

    public void addEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addEvaluate_call method_call = new addEvaluate_call(bizDynamicEvaluateInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addEvaluate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamicEvaluateInfo bizDynamicEvaluateInfo;
      public addEvaluate_call(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addEvaluate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addEvaluate_args args = new addEvaluate_args();
        args.setBizDynamicEvaluateInfo(bizDynamicEvaluateInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addEvaluate();
      }
    }

    public void updateEvaluate(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEvaluate_call method_call = new updateEvaluate_call(bizDynamicEvaluateInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEvaluate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamicEvaluateInfo bizDynamicEvaluateInfo;
      public updateEvaluate_call(BizDynamicEvaluateInfo bizDynamicEvaluateInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEvaluate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEvaluate_args args = new updateEvaluate_args();
        args.setBizDynamicEvaluateInfo(bizDynamicEvaluateInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateEvaluate();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkIsEvaluate", new checkIsEvaluate());
      processMap.put("queryBizEvaluateMap", new queryBizEvaluateMap());
      processMap.put("addEvaluate", new addEvaluate());
      processMap.put("updateEvaluate", new updateEvaluate());
      return processMap;
    }

    public static class checkIsEvaluate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkIsEvaluate_args> {
      public checkIsEvaluate() {
        super("checkIsEvaluate");
      }

      public checkIsEvaluate_args getEmptyArgsInstance() {
        return new checkIsEvaluate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkIsEvaluate_result getResult(I iface, checkIsEvaluate_args args) throws org.apache.thrift.TException {
        checkIsEvaluate_result result = new checkIsEvaluate_result();
        result.success = iface.checkIsEvaluate(args.bizDynamicEvaluateInfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryBizEvaluateMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBizEvaluateMap_args> {
      public queryBizEvaluateMap() {
        super("queryBizEvaluateMap");
      }

      public queryBizEvaluateMap_args getEmptyArgsInstance() {
        return new queryBizEvaluateMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBizEvaluateMap_result getResult(I iface, queryBizEvaluateMap_args args) throws org.apache.thrift.TException {
        queryBizEvaluateMap_result result = new queryBizEvaluateMap_result();
        result.success = iface.queryBizEvaluateMap(args.handleDynamicId);
        return result;
      }
    }

    public static class addEvaluate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addEvaluate_args> {
      public addEvaluate() {
        super("addEvaluate");
      }

      public addEvaluate_args getEmptyArgsInstance() {
        return new addEvaluate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addEvaluate_result getResult(I iface, addEvaluate_args args) throws org.apache.thrift.TException {
        addEvaluate_result result = new addEvaluate_result();
        result.success = iface.addEvaluate(args.bizDynamicEvaluateInfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateEvaluate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEvaluate_args> {
      public updateEvaluate() {
        super("updateEvaluate");
      }

      public updateEvaluate_args getEmptyArgsInstance() {
        return new updateEvaluate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateEvaluate_result getResult(I iface, updateEvaluate_args args) throws org.apache.thrift.TException {
        updateEvaluate_result result = new updateEvaluate_result();
        result.success = iface.updateEvaluate(args.bizDynamicEvaluateInfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("checkIsEvaluate", new checkIsEvaluate());
      processMap.put("queryBizEvaluateMap", new queryBizEvaluateMap());
      processMap.put("addEvaluate", new addEvaluate());
      processMap.put("updateEvaluate", new updateEvaluate());
      return processMap;
    }

    public static class checkIsEvaluate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkIsEvaluate_args, Integer> {
      public checkIsEvaluate() {
        super("checkIsEvaluate");
      }

      public checkIsEvaluate_args getEmptyArgsInstance() {
        return new checkIsEvaluate_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkIsEvaluate_result result = new checkIsEvaluate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkIsEvaluate_result result = new checkIsEvaluate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkIsEvaluate_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkIsEvaluate(args.bizDynamicEvaluateInfo,resultHandler);
      }
    }

    public static class queryBizEvaluateMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBizEvaluateMap_args, BizEvaluateMap> {
      public queryBizEvaluateMap() {
        super("queryBizEvaluateMap");
      }

      public queryBizEvaluateMap_args getEmptyArgsInstance() {
        return new queryBizEvaluateMap_args();
      }

      public AsyncMethodCallback<BizEvaluateMap> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BizEvaluateMap>() { 
          public void onComplete(BizEvaluateMap o) {
            queryBizEvaluateMap_result result = new queryBizEvaluateMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBizEvaluateMap_result result = new queryBizEvaluateMap_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBizEvaluateMap_args args, org.apache.thrift.async.AsyncMethodCallback<BizEvaluateMap> resultHandler) throws TException {
        iface.queryBizEvaluateMap(args.handleDynamicId,resultHandler);
      }
    }

    public static class addEvaluate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addEvaluate_args, Boolean> {
      public addEvaluate() {
        super("addEvaluate");
      }

      public addEvaluate_args getEmptyArgsInstance() {
        return new addEvaluate_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addEvaluate_result result = new addEvaluate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addEvaluate_result result = new addEvaluate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addEvaluate_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addEvaluate(args.bizDynamicEvaluateInfo,resultHandler);
      }
    }

    public static class updateEvaluate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateEvaluate_args, Boolean> {
      public updateEvaluate() {
        super("updateEvaluate");
      }

      public updateEvaluate_args getEmptyArgsInstance() {
        return new updateEvaluate_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateEvaluate_result result = new updateEvaluate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateEvaluate_result result = new updateEvaluate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateEvaluate_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateEvaluate(args.bizDynamicEvaluateInfo,resultHandler);
      }
    }

  }

  public static class checkIsEvaluate_args implements org.apache.thrift.TBase<checkIsEvaluate_args, checkIsEvaluate_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkIsEvaluate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkIsEvaluate_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_EVALUATE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamicEvaluateInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkIsEvaluate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkIsEvaluate_argsTupleSchemeFactory());
    }

    public BizDynamicEvaluateInfo bizDynamicEvaluateInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC_EVALUATE_INFO((short)1, "bizDynamicEvaluateInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC_EVALUATE_INFO
            return BIZ_DYNAMIC_EVALUATE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC_EVALUATE_INFO, new org.apache.thrift.meta_data.FieldMetaData("bizDynamicEvaluateInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamicEvaluateInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkIsEvaluate_args.class, metaDataMap);
    }

    public checkIsEvaluate_args() {
    }

    public checkIsEvaluate_args(
      BizDynamicEvaluateInfo bizDynamicEvaluateInfo)
    {
      this();
      this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkIsEvaluate_args(checkIsEvaluate_args other) {
      if (other.isSetBizDynamicEvaluateInfo()) {
        this.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo(other.bizDynamicEvaluateInfo);
      }
    }

    public checkIsEvaluate_args deepCopy() {
      return new checkIsEvaluate_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamicEvaluateInfo = null;
    }

    public BizDynamicEvaluateInfo getBizDynamicEvaluateInfo() {
      return this.bizDynamicEvaluateInfo;
    }

    public checkIsEvaluate_args setBizDynamicEvaluateInfo(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) {
      this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
      return this;
    }

    public void unsetBizDynamicEvaluateInfo() {
      this.bizDynamicEvaluateInfo = null;
    }

    /** Returns true if field bizDynamicEvaluateInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamicEvaluateInfo() {
      return this.bizDynamicEvaluateInfo != null;
    }

    public void setBizDynamicEvaluateInfoIsSet(boolean value) {
      if (!value) {
        this.bizDynamicEvaluateInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        if (value == null) {
          unsetBizDynamicEvaluateInfo();
        } else {
          setBizDynamicEvaluateInfo((BizDynamicEvaluateInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        return getBizDynamicEvaluateInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        return isSetBizDynamicEvaluateInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkIsEvaluate_args)
        return this.equals((checkIsEvaluate_args)that);
      return false;
    }

    public boolean equals(checkIsEvaluate_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamicEvaluateInfo = true && this.isSetBizDynamicEvaluateInfo();
      boolean that_present_bizDynamicEvaluateInfo = true && that.isSetBizDynamicEvaluateInfo();
      if (this_present_bizDynamicEvaluateInfo || that_present_bizDynamicEvaluateInfo) {
        if (!(this_present_bizDynamicEvaluateInfo && that_present_bizDynamicEvaluateInfo))
          return false;
        if (!this.bizDynamicEvaluateInfo.equals(that.bizDynamicEvaluateInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamicEvaluateInfo = true && (isSetBizDynamicEvaluateInfo());
      list.add(present_bizDynamicEvaluateInfo);
      if (present_bizDynamicEvaluateInfo)
        list.add(bizDynamicEvaluateInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkIsEvaluate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamicEvaluateInfo()).compareTo(other.isSetBizDynamicEvaluateInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamicEvaluateInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamicEvaluateInfo, other.bizDynamicEvaluateInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkIsEvaluate_args(");
      boolean first = true;

      sb.append("bizDynamicEvaluateInfo:");
      if (this.bizDynamicEvaluateInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamicEvaluateInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamicEvaluateInfo != null) {
        bizDynamicEvaluateInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkIsEvaluate_argsStandardSchemeFactory implements SchemeFactory {
      public checkIsEvaluate_argsStandardScheme getScheme() {
        return new checkIsEvaluate_argsStandardScheme();
      }
    }

    private static class checkIsEvaluate_argsStandardScheme extends StandardScheme<checkIsEvaluate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkIsEvaluate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC_EVALUATE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo();
                struct.bizDynamicEvaluateInfo.read(iprot);
                struct.setBizDynamicEvaluateInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkIsEvaluate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamicEvaluateInfo != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_EVALUATE_INFO_FIELD_DESC);
          struct.bizDynamicEvaluateInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkIsEvaluate_argsTupleSchemeFactory implements SchemeFactory {
      public checkIsEvaluate_argsTupleScheme getScheme() {
        return new checkIsEvaluate_argsTupleScheme();
      }
    }

    private static class checkIsEvaluate_argsTupleScheme extends TupleScheme<checkIsEvaluate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkIsEvaluate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamicEvaluateInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamicEvaluateInfo()) {
          struct.bizDynamicEvaluateInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkIsEvaluate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo();
          struct.bizDynamicEvaluateInfo.read(iprot);
          struct.setBizDynamicEvaluateInfoIsSet(true);
        }
      }
    }

  }

  public static class checkIsEvaluate_result implements org.apache.thrift.TBase<checkIsEvaluate_result, checkIsEvaluate_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkIsEvaluate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkIsEvaluate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkIsEvaluate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkIsEvaluate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkIsEvaluate_result.class, metaDataMap);
    }

    public checkIsEvaluate_result() {
    }

    public checkIsEvaluate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkIsEvaluate_result(checkIsEvaluate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkIsEvaluate_result deepCopy() {
      return new checkIsEvaluate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkIsEvaluate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkIsEvaluate_result)
        return this.equals((checkIsEvaluate_result)that);
      return false;
    }

    public boolean equals(checkIsEvaluate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkIsEvaluate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkIsEvaluate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkIsEvaluate_resultStandardSchemeFactory implements SchemeFactory {
      public checkIsEvaluate_resultStandardScheme getScheme() {
        return new checkIsEvaluate_resultStandardScheme();
      }
    }

    private static class checkIsEvaluate_resultStandardScheme extends StandardScheme<checkIsEvaluate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkIsEvaluate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkIsEvaluate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkIsEvaluate_resultTupleSchemeFactory implements SchemeFactory {
      public checkIsEvaluate_resultTupleScheme getScheme() {
        return new checkIsEvaluate_resultTupleScheme();
      }
    }

    private static class checkIsEvaluate_resultTupleScheme extends TupleScheme<checkIsEvaluate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkIsEvaluate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkIsEvaluate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBizEvaluateMap_args implements org.apache.thrift.TBase<queryBizEvaluateMap_args, queryBizEvaluateMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBizEvaluateMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBizEvaluateMap_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBizEvaluateMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBizEvaluateMap_argsTupleSchemeFactory());
    }

    public int handleDynamicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DYNAMIC_ID((short)1, "handleDynamicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DYNAMIC_ID
            return HANDLE_DYNAMIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HANDLEDYNAMICID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DYNAMIC_ID, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBizEvaluateMap_args.class, metaDataMap);
    }

    public queryBizEvaluateMap_args() {
    }

    public queryBizEvaluateMap_args(
      int handleDynamicId)
    {
      this();
      this.handleDynamicId = handleDynamicId;
      setHandleDynamicIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBizEvaluateMap_args(queryBizEvaluateMap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.handleDynamicId = other.handleDynamicId;
    }

    public queryBizEvaluateMap_args deepCopy() {
      return new queryBizEvaluateMap_args(this);
    }

    @Override
    public void clear() {
      setHandleDynamicIdIsSet(false);
      this.handleDynamicId = 0;
    }

    public int getHandleDynamicId() {
      return this.handleDynamicId;
    }

    public queryBizEvaluateMap_args setHandleDynamicId(int handleDynamicId) {
      this.handleDynamicId = handleDynamicId;
      setHandleDynamicIdIsSet(true);
      return this;
    }

    public void unsetHandleDynamicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEDYNAMICID_ISSET_ID);
    }

    /** Returns true if field handleDynamicId is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDynamicId() {
      return EncodingUtils.testBit(__isset_bitfield, __HANDLEDYNAMICID_ISSET_ID);
    }

    public void setHandleDynamicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEDYNAMICID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DYNAMIC_ID:
        if (value == null) {
          unsetHandleDynamicId();
        } else {
          setHandleDynamicId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DYNAMIC_ID:
        return Integer.valueOf(getHandleDynamicId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DYNAMIC_ID:
        return isSetHandleDynamicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBizEvaluateMap_args)
        return this.equals((queryBizEvaluateMap_args)that);
      return false;
    }

    public boolean equals(queryBizEvaluateMap_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDynamicId = true;
      boolean that_present_handleDynamicId = true;
      if (this_present_handleDynamicId || that_present_handleDynamicId) {
        if (!(this_present_handleDynamicId && that_present_handleDynamicId))
          return false;
        if (this.handleDynamicId != that.handleDynamicId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDynamicId = true;
      list.add(present_handleDynamicId);
      if (present_handleDynamicId)
        list.add(handleDynamicId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBizEvaluateMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDynamicId()).compareTo(other.isSetHandleDynamicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDynamicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicId, other.handleDynamicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBizEvaluateMap_args(");
      boolean first = true;

      sb.append("handleDynamicId:");
      sb.append(this.handleDynamicId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBizEvaluateMap_argsStandardSchemeFactory implements SchemeFactory {
      public queryBizEvaluateMap_argsStandardScheme getScheme() {
        return new queryBizEvaluateMap_argsStandardScheme();
      }
    }

    private static class queryBizEvaluateMap_argsStandardScheme extends StandardScheme<queryBizEvaluateMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBizEvaluateMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DYNAMIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handleDynamicId = iprot.readI32();
                struct.setHandleDynamicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBizEvaluateMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HANDLE_DYNAMIC_ID_FIELD_DESC);
        oprot.writeI32(struct.handleDynamicId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBizEvaluateMap_argsTupleSchemeFactory implements SchemeFactory {
      public queryBizEvaluateMap_argsTupleScheme getScheme() {
        return new queryBizEvaluateMap_argsTupleScheme();
      }
    }

    private static class queryBizEvaluateMap_argsTupleScheme extends TupleScheme<queryBizEvaluateMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBizEvaluateMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDynamicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDynamicId()) {
          oprot.writeI32(struct.handleDynamicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBizEvaluateMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDynamicId = iprot.readI32();
          struct.setHandleDynamicIdIsSet(true);
        }
      }
    }

  }

  public static class queryBizEvaluateMap_result implements org.apache.thrift.TBase<queryBizEvaluateMap_result, queryBizEvaluateMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBizEvaluateMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBizEvaluateMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBizEvaluateMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBizEvaluateMap_resultTupleSchemeFactory());
    }

    public BizEvaluateMap success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizEvaluateMap.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBizEvaluateMap_result.class, metaDataMap);
    }

    public queryBizEvaluateMap_result() {
    }

    public queryBizEvaluateMap_result(
      BizEvaluateMap success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBizEvaluateMap_result(queryBizEvaluateMap_result other) {
      if (other.isSetSuccess()) {
        this.success = new BizEvaluateMap(other.success);
      }
    }

    public queryBizEvaluateMap_result deepCopy() {
      return new queryBizEvaluateMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BizEvaluateMap getSuccess() {
      return this.success;
    }

    public queryBizEvaluateMap_result setSuccess(BizEvaluateMap success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BizEvaluateMap)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBizEvaluateMap_result)
        return this.equals((queryBizEvaluateMap_result)that);
      return false;
    }

    public boolean equals(queryBizEvaluateMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBizEvaluateMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBizEvaluateMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBizEvaluateMap_resultStandardSchemeFactory implements SchemeFactory {
      public queryBizEvaluateMap_resultStandardScheme getScheme() {
        return new queryBizEvaluateMap_resultStandardScheme();
      }
    }

    private static class queryBizEvaluateMap_resultStandardScheme extends StandardScheme<queryBizEvaluateMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBizEvaluateMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BizEvaluateMap();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBizEvaluateMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBizEvaluateMap_resultTupleSchemeFactory implements SchemeFactory {
      public queryBizEvaluateMap_resultTupleScheme getScheme() {
        return new queryBizEvaluateMap_resultTupleScheme();
      }
    }

    private static class queryBizEvaluateMap_resultTupleScheme extends TupleScheme<queryBizEvaluateMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBizEvaluateMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBizEvaluateMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BizEvaluateMap();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addEvaluate_args implements org.apache.thrift.TBase<addEvaluate_args, addEvaluate_args._Fields>, java.io.Serializable, Cloneable, Comparable<addEvaluate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEvaluate_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_EVALUATE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamicEvaluateInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addEvaluate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addEvaluate_argsTupleSchemeFactory());
    }

    public BizDynamicEvaluateInfo bizDynamicEvaluateInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC_EVALUATE_INFO((short)1, "bizDynamicEvaluateInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC_EVALUATE_INFO
            return BIZ_DYNAMIC_EVALUATE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC_EVALUATE_INFO, new org.apache.thrift.meta_data.FieldMetaData("bizDynamicEvaluateInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamicEvaluateInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEvaluate_args.class, metaDataMap);
    }

    public addEvaluate_args() {
    }

    public addEvaluate_args(
      BizDynamicEvaluateInfo bizDynamicEvaluateInfo)
    {
      this();
      this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEvaluate_args(addEvaluate_args other) {
      if (other.isSetBizDynamicEvaluateInfo()) {
        this.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo(other.bizDynamicEvaluateInfo);
      }
    }

    public addEvaluate_args deepCopy() {
      return new addEvaluate_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamicEvaluateInfo = null;
    }

    public BizDynamicEvaluateInfo getBizDynamicEvaluateInfo() {
      return this.bizDynamicEvaluateInfo;
    }

    public addEvaluate_args setBizDynamicEvaluateInfo(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) {
      this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
      return this;
    }

    public void unsetBizDynamicEvaluateInfo() {
      this.bizDynamicEvaluateInfo = null;
    }

    /** Returns true if field bizDynamicEvaluateInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamicEvaluateInfo() {
      return this.bizDynamicEvaluateInfo != null;
    }

    public void setBizDynamicEvaluateInfoIsSet(boolean value) {
      if (!value) {
        this.bizDynamicEvaluateInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        if (value == null) {
          unsetBizDynamicEvaluateInfo();
        } else {
          setBizDynamicEvaluateInfo((BizDynamicEvaluateInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        return getBizDynamicEvaluateInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        return isSetBizDynamicEvaluateInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEvaluate_args)
        return this.equals((addEvaluate_args)that);
      return false;
    }

    public boolean equals(addEvaluate_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamicEvaluateInfo = true && this.isSetBizDynamicEvaluateInfo();
      boolean that_present_bizDynamicEvaluateInfo = true && that.isSetBizDynamicEvaluateInfo();
      if (this_present_bizDynamicEvaluateInfo || that_present_bizDynamicEvaluateInfo) {
        if (!(this_present_bizDynamicEvaluateInfo && that_present_bizDynamicEvaluateInfo))
          return false;
        if (!this.bizDynamicEvaluateInfo.equals(that.bizDynamicEvaluateInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamicEvaluateInfo = true && (isSetBizDynamicEvaluateInfo());
      list.add(present_bizDynamicEvaluateInfo);
      if (present_bizDynamicEvaluateInfo)
        list.add(bizDynamicEvaluateInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addEvaluate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamicEvaluateInfo()).compareTo(other.isSetBizDynamicEvaluateInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamicEvaluateInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamicEvaluateInfo, other.bizDynamicEvaluateInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEvaluate_args(");
      boolean first = true;

      sb.append("bizDynamicEvaluateInfo:");
      if (this.bizDynamicEvaluateInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamicEvaluateInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamicEvaluateInfo != null) {
        bizDynamicEvaluateInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEvaluate_argsStandardSchemeFactory implements SchemeFactory {
      public addEvaluate_argsStandardScheme getScheme() {
        return new addEvaluate_argsStandardScheme();
      }
    }

    private static class addEvaluate_argsStandardScheme extends StandardScheme<addEvaluate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEvaluate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC_EVALUATE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo();
                struct.bizDynamicEvaluateInfo.read(iprot);
                struct.setBizDynamicEvaluateInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEvaluate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamicEvaluateInfo != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_EVALUATE_INFO_FIELD_DESC);
          struct.bizDynamicEvaluateInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEvaluate_argsTupleSchemeFactory implements SchemeFactory {
      public addEvaluate_argsTupleScheme getScheme() {
        return new addEvaluate_argsTupleScheme();
      }
    }

    private static class addEvaluate_argsTupleScheme extends TupleScheme<addEvaluate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEvaluate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamicEvaluateInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamicEvaluateInfo()) {
          struct.bizDynamicEvaluateInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEvaluate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo();
          struct.bizDynamicEvaluateInfo.read(iprot);
          struct.setBizDynamicEvaluateInfoIsSet(true);
        }
      }
    }

  }

  public static class addEvaluate_result implements org.apache.thrift.TBase<addEvaluate_result, addEvaluate_result._Fields>, java.io.Serializable, Cloneable, Comparable<addEvaluate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEvaluate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addEvaluate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addEvaluate_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEvaluate_result.class, metaDataMap);
    }

    public addEvaluate_result() {
    }

    public addEvaluate_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEvaluate_result(addEvaluate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addEvaluate_result deepCopy() {
      return new addEvaluate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addEvaluate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEvaluate_result)
        return this.equals((addEvaluate_result)that);
      return false;
    }

    public boolean equals(addEvaluate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addEvaluate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEvaluate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEvaluate_resultStandardSchemeFactory implements SchemeFactory {
      public addEvaluate_resultStandardScheme getScheme() {
        return new addEvaluate_resultStandardScheme();
      }
    }

    private static class addEvaluate_resultStandardScheme extends StandardScheme<addEvaluate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEvaluate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEvaluate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEvaluate_resultTupleSchemeFactory implements SchemeFactory {
      public addEvaluate_resultTupleScheme getScheme() {
        return new addEvaluate_resultTupleScheme();
      }
    }

    private static class addEvaluate_resultTupleScheme extends TupleScheme<addEvaluate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEvaluate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEvaluate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateEvaluate_args implements org.apache.thrift.TBase<updateEvaluate_args, updateEvaluate_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateEvaluate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEvaluate_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_EVALUATE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamicEvaluateInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEvaluate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEvaluate_argsTupleSchemeFactory());
    }

    public BizDynamicEvaluateInfo bizDynamicEvaluateInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC_EVALUATE_INFO((short)1, "bizDynamicEvaluateInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC_EVALUATE_INFO
            return BIZ_DYNAMIC_EVALUATE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC_EVALUATE_INFO, new org.apache.thrift.meta_data.FieldMetaData("bizDynamicEvaluateInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamicEvaluateInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEvaluate_args.class, metaDataMap);
    }

    public updateEvaluate_args() {
    }

    public updateEvaluate_args(
      BizDynamicEvaluateInfo bizDynamicEvaluateInfo)
    {
      this();
      this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEvaluate_args(updateEvaluate_args other) {
      if (other.isSetBizDynamicEvaluateInfo()) {
        this.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo(other.bizDynamicEvaluateInfo);
      }
    }

    public updateEvaluate_args deepCopy() {
      return new updateEvaluate_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamicEvaluateInfo = null;
    }

    public BizDynamicEvaluateInfo getBizDynamicEvaluateInfo() {
      return this.bizDynamicEvaluateInfo;
    }

    public updateEvaluate_args setBizDynamicEvaluateInfo(BizDynamicEvaluateInfo bizDynamicEvaluateInfo) {
      this.bizDynamicEvaluateInfo = bizDynamicEvaluateInfo;
      return this;
    }

    public void unsetBizDynamicEvaluateInfo() {
      this.bizDynamicEvaluateInfo = null;
    }

    /** Returns true if field bizDynamicEvaluateInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamicEvaluateInfo() {
      return this.bizDynamicEvaluateInfo != null;
    }

    public void setBizDynamicEvaluateInfoIsSet(boolean value) {
      if (!value) {
        this.bizDynamicEvaluateInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        if (value == null) {
          unsetBizDynamicEvaluateInfo();
        } else {
          setBizDynamicEvaluateInfo((BizDynamicEvaluateInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        return getBizDynamicEvaluateInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC_EVALUATE_INFO:
        return isSetBizDynamicEvaluateInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEvaluate_args)
        return this.equals((updateEvaluate_args)that);
      return false;
    }

    public boolean equals(updateEvaluate_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamicEvaluateInfo = true && this.isSetBizDynamicEvaluateInfo();
      boolean that_present_bizDynamicEvaluateInfo = true && that.isSetBizDynamicEvaluateInfo();
      if (this_present_bizDynamicEvaluateInfo || that_present_bizDynamicEvaluateInfo) {
        if (!(this_present_bizDynamicEvaluateInfo && that_present_bizDynamicEvaluateInfo))
          return false;
        if (!this.bizDynamicEvaluateInfo.equals(that.bizDynamicEvaluateInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamicEvaluateInfo = true && (isSetBizDynamicEvaluateInfo());
      list.add(present_bizDynamicEvaluateInfo);
      if (present_bizDynamicEvaluateInfo)
        list.add(bizDynamicEvaluateInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateEvaluate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamicEvaluateInfo()).compareTo(other.isSetBizDynamicEvaluateInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamicEvaluateInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamicEvaluateInfo, other.bizDynamicEvaluateInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEvaluate_args(");
      boolean first = true;

      sb.append("bizDynamicEvaluateInfo:");
      if (this.bizDynamicEvaluateInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamicEvaluateInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamicEvaluateInfo != null) {
        bizDynamicEvaluateInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEvaluate_argsStandardSchemeFactory implements SchemeFactory {
      public updateEvaluate_argsStandardScheme getScheme() {
        return new updateEvaluate_argsStandardScheme();
      }
    }

    private static class updateEvaluate_argsStandardScheme extends StandardScheme<updateEvaluate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEvaluate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC_EVALUATE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo();
                struct.bizDynamicEvaluateInfo.read(iprot);
                struct.setBizDynamicEvaluateInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEvaluate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamicEvaluateInfo != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_EVALUATE_INFO_FIELD_DESC);
          struct.bizDynamicEvaluateInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEvaluate_argsTupleSchemeFactory implements SchemeFactory {
      public updateEvaluate_argsTupleScheme getScheme() {
        return new updateEvaluate_argsTupleScheme();
      }
    }

    private static class updateEvaluate_argsTupleScheme extends TupleScheme<updateEvaluate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEvaluate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamicEvaluateInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamicEvaluateInfo()) {
          struct.bizDynamicEvaluateInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEvaluate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamicEvaluateInfo = new BizDynamicEvaluateInfo();
          struct.bizDynamicEvaluateInfo.read(iprot);
          struct.setBizDynamicEvaluateInfoIsSet(true);
        }
      }
    }

  }

  public static class updateEvaluate_result implements org.apache.thrift.TBase<updateEvaluate_result, updateEvaluate_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateEvaluate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEvaluate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEvaluate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEvaluate_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEvaluate_result.class, metaDataMap);
    }

    public updateEvaluate_result() {
    }

    public updateEvaluate_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEvaluate_result(updateEvaluate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateEvaluate_result deepCopy() {
      return new updateEvaluate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateEvaluate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEvaluate_result)
        return this.equals((updateEvaluate_result)that);
      return false;
    }

    public boolean equals(updateEvaluate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateEvaluate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEvaluate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEvaluate_resultStandardSchemeFactory implements SchemeFactory {
      public updateEvaluate_resultStandardScheme getScheme() {
        return new updateEvaluate_resultStandardScheme();
      }
    }

    private static class updateEvaluate_resultStandardScheme extends StandardScheme<updateEvaluate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEvaluate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEvaluate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEvaluate_resultTupleSchemeFactory implements SchemeFactory {
      public updateEvaluate_resultTupleScheme getScheme() {
        return new updateEvaluate_resultTupleScheme();
      }
    }

    private static class updateEvaluate_resultTupleScheme extends TupleScheme<updateEvaluate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEvaluate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEvaluate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysPermission implements org.apache.thrift.TBase<SysPermission, SysPermission._Fields>, java.io.Serializable, Cloneable, Comparable<SysPermission> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysPermission");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PERMIS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("permisType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PERMIS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("permisName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PERMIS_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("permisDesc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PERMIS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("permisCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MENU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("menuId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysPermissionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysPermissionTupleSchemeFactory());
  }

  public int pid; // required
  public String permisType; // required
  public String permisName; // required
  public String permisDesc; // required
  public String permisCode; // required
  public int menuId; // required
  public int rows; // required
  public int page; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PERMIS_TYPE((short)2, "permisType"),
    PERMIS_NAME((short)3, "permisName"),
    PERMIS_DESC((short)4, "permisDesc"),
    PERMIS_CODE((short)5, "permisCode"),
    MENU_ID((short)6, "menuId"),
    ROWS((short)7, "rows"),
    PAGE((short)8, "page");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PERMIS_TYPE
          return PERMIS_TYPE;
        case 3: // PERMIS_NAME
          return PERMIS_NAME;
        case 4: // PERMIS_DESC
          return PERMIS_DESC;
        case 5: // PERMIS_CODE
          return PERMIS_CODE;
        case 6: // MENU_ID
          return MENU_ID;
        case 7: // ROWS
          return ROWS;
        case 8: // PAGE
          return PAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __MENUID_ISSET_ID = 1;
  private static final int __ROWS_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERMIS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("permisType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMIS_NAME, new org.apache.thrift.meta_data.FieldMetaData("permisName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMIS_DESC, new org.apache.thrift.meta_data.FieldMetaData("permisDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMIS_CODE, new org.apache.thrift.meta_data.FieldMetaData("permisCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_ID, new org.apache.thrift.meta_data.FieldMetaData("menuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysPermission.class, metaDataMap);
  }

  public SysPermission() {
  }

  public SysPermission(
    int pid,
    String permisType,
    String permisName,
    String permisDesc,
    String permisCode,
    int menuId,
    int rows,
    int page)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.permisType = permisType;
    this.permisName = permisName;
    this.permisDesc = permisDesc;
    this.permisCode = permisCode;
    this.menuId = menuId;
    setMenuIdIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysPermission(SysPermission other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetPermisType()) {
      this.permisType = other.permisType;
    }
    if (other.isSetPermisName()) {
      this.permisName = other.permisName;
    }
    if (other.isSetPermisDesc()) {
      this.permisDesc = other.permisDesc;
    }
    if (other.isSetPermisCode()) {
      this.permisCode = other.permisCode;
    }
    this.menuId = other.menuId;
    this.rows = other.rows;
    this.page = other.page;
  }

  public SysPermission deepCopy() {
    return new SysPermission(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.permisType = null;
    this.permisName = null;
    this.permisDesc = null;
    this.permisCode = null;
    setMenuIdIsSet(false);
    this.menuId = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public SysPermission setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getPermisType() {
    return this.permisType;
  }

  public SysPermission setPermisType(String permisType) {
    this.permisType = permisType;
    return this;
  }

  public void unsetPermisType() {
    this.permisType = null;
  }

  /** Returns true if field permisType is set (has been assigned a value) and false otherwise */
  public boolean isSetPermisType() {
    return this.permisType != null;
  }

  public void setPermisTypeIsSet(boolean value) {
    if (!value) {
      this.permisType = null;
    }
  }

  public String getPermisName() {
    return this.permisName;
  }

  public SysPermission setPermisName(String permisName) {
    this.permisName = permisName;
    return this;
  }

  public void unsetPermisName() {
    this.permisName = null;
  }

  /** Returns true if field permisName is set (has been assigned a value) and false otherwise */
  public boolean isSetPermisName() {
    return this.permisName != null;
  }

  public void setPermisNameIsSet(boolean value) {
    if (!value) {
      this.permisName = null;
    }
  }

  public String getPermisDesc() {
    return this.permisDesc;
  }

  public SysPermission setPermisDesc(String permisDesc) {
    this.permisDesc = permisDesc;
    return this;
  }

  public void unsetPermisDesc() {
    this.permisDesc = null;
  }

  /** Returns true if field permisDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetPermisDesc() {
    return this.permisDesc != null;
  }

  public void setPermisDescIsSet(boolean value) {
    if (!value) {
      this.permisDesc = null;
    }
  }

  public String getPermisCode() {
    return this.permisCode;
  }

  public SysPermission setPermisCode(String permisCode) {
    this.permisCode = permisCode;
    return this;
  }

  public void unsetPermisCode() {
    this.permisCode = null;
  }

  /** Returns true if field permisCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPermisCode() {
    return this.permisCode != null;
  }

  public void setPermisCodeIsSet(boolean value) {
    if (!value) {
      this.permisCode = null;
    }
  }

  public int getMenuId() {
    return this.menuId;
  }

  public SysPermission setMenuId(int menuId) {
    this.menuId = menuId;
    setMenuIdIsSet(true);
    return this;
  }

  public void unsetMenuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MENUID_ISSET_ID);
  }

  /** Returns true if field menuId is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuId() {
    return EncodingUtils.testBit(__isset_bitfield, __MENUID_ISSET_ID);
  }

  public void setMenuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MENUID_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public SysPermission setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public SysPermission setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PERMIS_TYPE:
      if (value == null) {
        unsetPermisType();
      } else {
        setPermisType((String)value);
      }
      break;

    case PERMIS_NAME:
      if (value == null) {
        unsetPermisName();
      } else {
        setPermisName((String)value);
      }
      break;

    case PERMIS_DESC:
      if (value == null) {
        unsetPermisDesc();
      } else {
        setPermisDesc((String)value);
      }
      break;

    case PERMIS_CODE:
      if (value == null) {
        unsetPermisCode();
      } else {
        setPermisCode((String)value);
      }
      break;

    case MENU_ID:
      if (value == null) {
        unsetMenuId();
      } else {
        setMenuId((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PERMIS_TYPE:
      return getPermisType();

    case PERMIS_NAME:
      return getPermisName();

    case PERMIS_DESC:
      return getPermisDesc();

    case PERMIS_CODE:
      return getPermisCode();

    case MENU_ID:
      return Integer.valueOf(getMenuId());

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PERMIS_TYPE:
      return isSetPermisType();
    case PERMIS_NAME:
      return isSetPermisName();
    case PERMIS_DESC:
      return isSetPermisDesc();
    case PERMIS_CODE:
      return isSetPermisCode();
    case MENU_ID:
      return isSetMenuId();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysPermission)
      return this.equals((SysPermission)that);
    return false;
  }

  public boolean equals(SysPermission that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_permisType = true && this.isSetPermisType();
    boolean that_present_permisType = true && that.isSetPermisType();
    if (this_present_permisType || that_present_permisType) {
      if (!(this_present_permisType && that_present_permisType))
        return false;
      if (!this.permisType.equals(that.permisType))
        return false;
    }

    boolean this_present_permisName = true && this.isSetPermisName();
    boolean that_present_permisName = true && that.isSetPermisName();
    if (this_present_permisName || that_present_permisName) {
      if (!(this_present_permisName && that_present_permisName))
        return false;
      if (!this.permisName.equals(that.permisName))
        return false;
    }

    boolean this_present_permisDesc = true && this.isSetPermisDesc();
    boolean that_present_permisDesc = true && that.isSetPermisDesc();
    if (this_present_permisDesc || that_present_permisDesc) {
      if (!(this_present_permisDesc && that_present_permisDesc))
        return false;
      if (!this.permisDesc.equals(that.permisDesc))
        return false;
    }

    boolean this_present_permisCode = true && this.isSetPermisCode();
    boolean that_present_permisCode = true && that.isSetPermisCode();
    if (this_present_permisCode || that_present_permisCode) {
      if (!(this_present_permisCode && that_present_permisCode))
        return false;
      if (!this.permisCode.equals(that.permisCode))
        return false;
    }

    boolean this_present_menuId = true;
    boolean that_present_menuId = true;
    if (this_present_menuId || that_present_menuId) {
      if (!(this_present_menuId && that_present_menuId))
        return false;
      if (this.menuId != that.menuId)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_permisType = true && (isSetPermisType());
    list.add(present_permisType);
    if (present_permisType)
      list.add(permisType);

    boolean present_permisName = true && (isSetPermisName());
    list.add(present_permisName);
    if (present_permisName)
      list.add(permisName);

    boolean present_permisDesc = true && (isSetPermisDesc());
    list.add(present_permisDesc);
    if (present_permisDesc)
      list.add(permisDesc);

    boolean present_permisCode = true && (isSetPermisCode());
    list.add(present_permisCode);
    if (present_permisCode)
      list.add(permisCode);

    boolean present_menuId = true;
    list.add(present_menuId);
    if (present_menuId)
      list.add(menuId);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysPermission other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermisType()).compareTo(other.isSetPermisType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermisType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permisType, other.permisType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermisName()).compareTo(other.isSetPermisName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermisName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permisName, other.permisName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermisDesc()).compareTo(other.isSetPermisDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermisDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permisDesc, other.permisDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermisCode()).compareTo(other.isSetPermisCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermisCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permisCode, other.permisCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuId()).compareTo(other.isSetMenuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuId, other.menuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysPermission(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("permisType:");
    if (this.permisType == null) {
      sb.append("null");
    } else {
      sb.append(this.permisType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permisName:");
    if (this.permisName == null) {
      sb.append("null");
    } else {
      sb.append(this.permisName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permisDesc:");
    if (this.permisDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.permisDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permisCode:");
    if (this.permisCode == null) {
      sb.append("null");
    } else {
      sb.append(this.permisCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuId:");
    sb.append(this.menuId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysPermissionStandardSchemeFactory implements SchemeFactory {
    public SysPermissionStandardScheme getScheme() {
      return new SysPermissionStandardScheme();
    }
  }

  private static class SysPermissionStandardScheme extends StandardScheme<SysPermission> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysPermission struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERMIS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permisType = iprot.readString();
              struct.setPermisTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERMIS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permisName = iprot.readString();
              struct.setPermisNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PERMIS_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permisDesc = iprot.readString();
              struct.setPermisDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PERMIS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permisCode = iprot.readString();
              struct.setPermisCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MENU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.menuId = iprot.readI32();
              struct.setMenuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysPermission struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.permisType != null) {
        oprot.writeFieldBegin(PERMIS_TYPE_FIELD_DESC);
        oprot.writeString(struct.permisType);
        oprot.writeFieldEnd();
      }
      if (struct.permisName != null) {
        oprot.writeFieldBegin(PERMIS_NAME_FIELD_DESC);
        oprot.writeString(struct.permisName);
        oprot.writeFieldEnd();
      }
      if (struct.permisDesc != null) {
        oprot.writeFieldBegin(PERMIS_DESC_FIELD_DESC);
        oprot.writeString(struct.permisDesc);
        oprot.writeFieldEnd();
      }
      if (struct.permisCode != null) {
        oprot.writeFieldBegin(PERMIS_CODE_FIELD_DESC);
        oprot.writeString(struct.permisCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MENU_ID_FIELD_DESC);
      oprot.writeI32(struct.menuId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysPermissionTupleSchemeFactory implements SchemeFactory {
    public SysPermissionTupleScheme getScheme() {
      return new SysPermissionTupleScheme();
    }
  }

  private static class SysPermissionTupleScheme extends TupleScheme<SysPermission> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysPermission struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetPermisType()) {
        optionals.set(1);
      }
      if (struct.isSetPermisName()) {
        optionals.set(2);
      }
      if (struct.isSetPermisDesc()) {
        optionals.set(3);
      }
      if (struct.isSetPermisCode()) {
        optionals.set(4);
      }
      if (struct.isSetMenuId()) {
        optionals.set(5);
      }
      if (struct.isSetRows()) {
        optionals.set(6);
      }
      if (struct.isSetPage()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetPermisType()) {
        oprot.writeString(struct.permisType);
      }
      if (struct.isSetPermisName()) {
        oprot.writeString(struct.permisName);
      }
      if (struct.isSetPermisDesc()) {
        oprot.writeString(struct.permisDesc);
      }
      if (struct.isSetPermisCode()) {
        oprot.writeString(struct.permisCode);
      }
      if (struct.isSetMenuId()) {
        oprot.writeI32(struct.menuId);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysPermission struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.permisType = iprot.readString();
        struct.setPermisTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.permisName = iprot.readString();
        struct.setPermisNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.permisDesc = iprot.readString();
        struct.setPermisDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.permisCode = iprot.readString();
        struct.setPermisCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.menuId = iprot.readI32();
        struct.setMenuIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
    }
  }

}


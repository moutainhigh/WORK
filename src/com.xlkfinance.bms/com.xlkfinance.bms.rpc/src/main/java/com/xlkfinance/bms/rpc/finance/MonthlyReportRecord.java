/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class MonthlyReportRecord implements org.apache.thrift.TBase<MonthlyReportRecord, MonthlyReportRecord._Fields>, java.io.Serializable, Cloneable, Comparable<MonthlyReportRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MonthlyReportRecord");

  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("mangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("otherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField THE_REST_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("theRestCost", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCost", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("manager", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("detail", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField PROJECT_MANAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectManage", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("mark", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField IS_LAST_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isLastPlan", org.apache.thrift.protocol.TType.BOOL, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MonthlyReportRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MonthlyReportRecordTupleSchemeFactory());
  }

  public int loanId; // required
  public int projectId; // required
  public String projectName; // required
  public String projectNo; // required
  public String loanDate; // required
  public double interest; // required
  public double mangCost; // required
  public double otherCost; // required
  public double theRestCost; // required
  public double totalCost; // required
  public String startDate; // required
  public String endDate; // required
  public String month; // required
  public int pid; // required
  public String manager; // required
  public int status; // required
  public double loanAmt; // required
  public MonthlyReportRecordCalculateDetail detail; // required
  public String projectManage; // required
  public String mark; // required
  public boolean isLastPlan; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_ID((short)1, "loanId"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NAME((short)3, "projectName"),
    PROJECT_NO((short)4, "projectNo"),
    LOAN_DATE((short)5, "loanDate"),
    INTEREST((short)6, "interest"),
    MANG_COST((short)7, "mangCost"),
    OTHER_COST((short)8, "otherCost"),
    THE_REST_COST((short)9, "theRestCost"),
    TOTAL_COST((short)10, "totalCost"),
    START_DATE((short)11, "startDate"),
    END_DATE((short)12, "endDate"),
    MONTH((short)13, "month"),
    PID((short)14, "pid"),
    MANAGER((short)15, "manager"),
    STATUS((short)16, "status"),
    LOAN_AMT((short)17, "loanAmt"),
    DETAIL((short)18, "detail"),
    PROJECT_MANAGE((short)19, "projectManage"),
    MARK((short)21, "mark"),
    IS_LAST_PLAN((short)20, "isLastPlan");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_ID
          return LOAN_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NAME
          return PROJECT_NAME;
        case 4: // PROJECT_NO
          return PROJECT_NO;
        case 5: // LOAN_DATE
          return LOAN_DATE;
        case 6: // INTEREST
          return INTEREST;
        case 7: // MANG_COST
          return MANG_COST;
        case 8: // OTHER_COST
          return OTHER_COST;
        case 9: // THE_REST_COST
          return THE_REST_COST;
        case 10: // TOTAL_COST
          return TOTAL_COST;
        case 11: // START_DATE
          return START_DATE;
        case 12: // END_DATE
          return END_DATE;
        case 13: // MONTH
          return MONTH;
        case 14: // PID
          return PID;
        case 15: // MANAGER
          return MANAGER;
        case 16: // STATUS
          return STATUS;
        case 17: // LOAN_AMT
          return LOAN_AMT;
        case 18: // DETAIL
          return DETAIL;
        case 19: // PROJECT_MANAGE
          return PROJECT_MANAGE;
        case 21: // MARK
          return MARK;
        case 20: // IS_LAST_PLAN
          return IS_LAST_PLAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __INTEREST_ISSET_ID = 2;
  private static final int __MANGCOST_ISSET_ID = 3;
  private static final int __OTHERCOST_ISSET_ID = 4;
  private static final int __THERESTCOST_ISSET_ID = 5;
  private static final int __TOTALCOST_ISSET_ID = 6;
  private static final int __PID_ISSET_ID = 7;
  private static final int __STATUS_ISSET_ID = 8;
  private static final int __LOANAMT_ISSET_ID = 9;
  private static final int __ISLASTPLAN_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NO, new org.apache.thrift.meta_data.FieldMetaData("projectNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("mangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("otherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.THE_REST_COST, new org.apache.thrift.meta_data.FieldMetaData("theRestCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_COST, new org.apache.thrift.meta_data.FieldMetaData("totalCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANAGER, new org.apache.thrift.meta_data.FieldMetaData("manager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DETAIL, new org.apache.thrift.meta_data.FieldMetaData("detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonthlyReportRecordCalculateDetail.class)));
    tmpMap.put(_Fields.PROJECT_MANAGE, new org.apache.thrift.meta_data.FieldMetaData("projectManage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARK, new org.apache.thrift.meta_data.FieldMetaData("mark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_LAST_PLAN, new org.apache.thrift.meta_data.FieldMetaData("isLastPlan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MonthlyReportRecord.class, metaDataMap);
  }

  public MonthlyReportRecord() {
  }

  public MonthlyReportRecord(
    int loanId,
    int projectId,
    String projectName,
    String projectNo,
    String loanDate,
    double interest,
    double mangCost,
    double otherCost,
    double theRestCost,
    double totalCost,
    String startDate,
    String endDate,
    String month,
    int pid,
    String manager,
    int status,
    double loanAmt,
    MonthlyReportRecordCalculateDetail detail,
    String projectManage,
    String mark,
    boolean isLastPlan)
  {
    this();
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNo = projectNo;
    this.loanDate = loanDate;
    this.interest = interest;
    setInterestIsSet(true);
    this.mangCost = mangCost;
    setMangCostIsSet(true);
    this.otherCost = otherCost;
    setOtherCostIsSet(true);
    this.theRestCost = theRestCost;
    setTheRestCostIsSet(true);
    this.totalCost = totalCost;
    setTotalCostIsSet(true);
    this.startDate = startDate;
    this.endDate = endDate;
    this.month = month;
    this.pid = pid;
    setPidIsSet(true);
    this.manager = manager;
    this.status = status;
    setStatusIsSet(true);
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.detail = detail;
    this.projectManage = projectManage;
    this.mark = mark;
    this.isLastPlan = isLastPlan;
    setIsLastPlanIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MonthlyReportRecord(MonthlyReportRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanId = other.loanId;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNo()) {
      this.projectNo = other.projectNo;
    }
    if (other.isSetLoanDate()) {
      this.loanDate = other.loanDate;
    }
    this.interest = other.interest;
    this.mangCost = other.mangCost;
    this.otherCost = other.otherCost;
    this.theRestCost = other.theRestCost;
    this.totalCost = other.totalCost;
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    if (other.isSetMonth()) {
      this.month = other.month;
    }
    this.pid = other.pid;
    if (other.isSetManager()) {
      this.manager = other.manager;
    }
    this.status = other.status;
    this.loanAmt = other.loanAmt;
    if (other.isSetDetail()) {
      this.detail = new MonthlyReportRecordCalculateDetail(other.detail);
    }
    if (other.isSetProjectManage()) {
      this.projectManage = other.projectManage;
    }
    if (other.isSetMark()) {
      this.mark = other.mark;
    }
    this.isLastPlan = other.isLastPlan;
  }

  public MonthlyReportRecord deepCopy() {
    return new MonthlyReportRecord(this);
  }

  @Override
  public void clear() {
    setLoanIdIsSet(false);
    this.loanId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNo = null;
    this.loanDate = null;
    setInterestIsSet(false);
    this.interest = 0.0;
    setMangCostIsSet(false);
    this.mangCost = 0.0;
    setOtherCostIsSet(false);
    this.otherCost = 0.0;
    setTheRestCostIsSet(false);
    this.theRestCost = 0.0;
    setTotalCostIsSet(false);
    this.totalCost = 0.0;
    this.startDate = null;
    this.endDate = null;
    this.month = null;
    setPidIsSet(false);
    this.pid = 0;
    this.manager = null;
    setStatusIsSet(false);
    this.status = 0;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    this.detail = null;
    this.projectManage = null;
    this.mark = null;
    setIsLastPlanIsSet(false);
    this.isLastPlan = false;
  }

  public int getLoanId() {
    return this.loanId;
  }

  public MonthlyReportRecord setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public MonthlyReportRecord setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public MonthlyReportRecord setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNo() {
    return this.projectNo;
  }

  public MonthlyReportRecord setProjectNo(String projectNo) {
    this.projectNo = projectNo;
    return this;
  }

  public void unsetProjectNo() {
    this.projectNo = null;
  }

  /** Returns true if field projectNo is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNo() {
    return this.projectNo != null;
  }

  public void setProjectNoIsSet(boolean value) {
    if (!value) {
      this.projectNo = null;
    }
  }

  public String getLoanDate() {
    return this.loanDate;
  }

  public MonthlyReportRecord setLoanDate(String loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  public void unsetLoanDate() {
    this.loanDate = null;
  }

  /** Returns true if field loanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDate() {
    return this.loanDate != null;
  }

  public void setLoanDateIsSet(boolean value) {
    if (!value) {
      this.loanDate = null;
    }
  }

  public double getInterest() {
    return this.interest;
  }

  public MonthlyReportRecord setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public double getMangCost() {
    return this.mangCost;
  }

  public MonthlyReportRecord setMangCost(double mangCost) {
    this.mangCost = mangCost;
    setMangCostIsSet(true);
    return this;
  }

  public void unsetMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANGCOST_ISSET_ID);
  }

  /** Returns true if field mangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __MANGCOST_ISSET_ID);
  }

  public void setMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANGCOST_ISSET_ID, value);
  }

  public double getOtherCost() {
    return this.otherCost;
  }

  public MonthlyReportRecord setOtherCost(double otherCost) {
    this.otherCost = otherCost;
    setOtherCostIsSet(true);
    return this;
  }

  public void unsetOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERCOST_ISSET_ID);
  }

  /** Returns true if field otherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHERCOST_ISSET_ID);
  }

  public void setOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERCOST_ISSET_ID, value);
  }

  public double getTheRestCost() {
    return this.theRestCost;
  }

  public MonthlyReportRecord setTheRestCost(double theRestCost) {
    this.theRestCost = theRestCost;
    setTheRestCostIsSet(true);
    return this;
  }

  public void unsetTheRestCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THERESTCOST_ISSET_ID);
  }

  /** Returns true if field theRestCost is set (has been assigned a value) and false otherwise */
  public boolean isSetTheRestCost() {
    return EncodingUtils.testBit(__isset_bitfield, __THERESTCOST_ISSET_ID);
  }

  public void setTheRestCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THERESTCOST_ISSET_ID, value);
  }

  public double getTotalCost() {
    return this.totalCost;
  }

  public MonthlyReportRecord setTotalCost(double totalCost) {
    this.totalCost = totalCost;
    setTotalCostIsSet(true);
    return this;
  }

  public void unsetTotalCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOST_ISSET_ID);
  }

  /** Returns true if field totalCost is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCost() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOST_ISSET_ID);
  }

  public void setTotalCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOST_ISSET_ID, value);
  }

  public String getStartDate() {
    return this.startDate;
  }

  public MonthlyReportRecord setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public MonthlyReportRecord setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public String getMonth() {
    return this.month;
  }

  public MonthlyReportRecord setMonth(String month) {
    this.month = month;
    return this;
  }

  public void unsetMonth() {
    this.month = null;
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return this.month != null;
  }

  public void setMonthIsSet(boolean value) {
    if (!value) {
      this.month = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public MonthlyReportRecord setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getManager() {
    return this.manager;
  }

  public MonthlyReportRecord setManager(String manager) {
    this.manager = manager;
    return this;
  }

  public void unsetManager() {
    this.manager = null;
  }

  /** Returns true if field manager is set (has been assigned a value) and false otherwise */
  public boolean isSetManager() {
    return this.manager != null;
  }

  public void setManagerIsSet(boolean value) {
    if (!value) {
      this.manager = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public MonthlyReportRecord setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public MonthlyReportRecord setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMT_ISSET_ID, value);
  }

  public MonthlyReportRecordCalculateDetail getDetail() {
    return this.detail;
  }

  public MonthlyReportRecord setDetail(MonthlyReportRecordCalculateDetail detail) {
    this.detail = detail;
    return this;
  }

  public void unsetDetail() {
    this.detail = null;
  }

  /** Returns true if field detail is set (has been assigned a value) and false otherwise */
  public boolean isSetDetail() {
    return this.detail != null;
  }

  public void setDetailIsSet(boolean value) {
    if (!value) {
      this.detail = null;
    }
  }

  public String getProjectManage() {
    return this.projectManage;
  }

  public MonthlyReportRecord setProjectManage(String projectManage) {
    this.projectManage = projectManage;
    return this;
  }

  public void unsetProjectManage() {
    this.projectManage = null;
  }

  /** Returns true if field projectManage is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectManage() {
    return this.projectManage != null;
  }

  public void setProjectManageIsSet(boolean value) {
    if (!value) {
      this.projectManage = null;
    }
  }

  public String getMark() {
    return this.mark;
  }

  public MonthlyReportRecord setMark(String mark) {
    this.mark = mark;
    return this;
  }

  public void unsetMark() {
    this.mark = null;
  }

  /** Returns true if field mark is set (has been assigned a value) and false otherwise */
  public boolean isSetMark() {
    return this.mark != null;
  }

  public void setMarkIsSet(boolean value) {
    if (!value) {
      this.mark = null;
    }
  }

  public boolean isIsLastPlan() {
    return this.isLastPlan;
  }

  public MonthlyReportRecord setIsLastPlan(boolean isLastPlan) {
    this.isLastPlan = isLastPlan;
    setIsLastPlanIsSet(true);
    return this;
  }

  public void unsetIsLastPlan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLASTPLAN_ISSET_ID);
  }

  /** Returns true if field isLastPlan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLastPlan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLASTPLAN_ISSET_ID);
  }

  public void setIsLastPlanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLASTPLAN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NO:
      if (value == null) {
        unsetProjectNo();
      } else {
        setProjectNo((String)value);
      }
      break;

    case LOAN_DATE:
      if (value == null) {
        unsetLoanDate();
      } else {
        setLoanDate((String)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case MANG_COST:
      if (value == null) {
        unsetMangCost();
      } else {
        setMangCost((Double)value);
      }
      break;

    case OTHER_COST:
      if (value == null) {
        unsetOtherCost();
      } else {
        setOtherCost((Double)value);
      }
      break;

    case THE_REST_COST:
      if (value == null) {
        unsetTheRestCost();
      } else {
        setTheRestCost((Double)value);
      }
      break;

    case TOTAL_COST:
      if (value == null) {
        unsetTotalCost();
      } else {
        setTotalCost((Double)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((String)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case MANAGER:
      if (value == null) {
        unsetManager();
      } else {
        setManager((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case DETAIL:
      if (value == null) {
        unsetDetail();
      } else {
        setDetail((MonthlyReportRecordCalculateDetail)value);
      }
      break;

    case PROJECT_MANAGE:
      if (value == null) {
        unsetProjectManage();
      } else {
        setProjectManage((String)value);
      }
      break;

    case MARK:
      if (value == null) {
        unsetMark();
      } else {
        setMark((String)value);
      }
      break;

    case IS_LAST_PLAN:
      if (value == null) {
        unsetIsLastPlan();
      } else {
        setIsLastPlan((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NO:
      return getProjectNo();

    case LOAN_DATE:
      return getLoanDate();

    case INTEREST:
      return Double.valueOf(getInterest());

    case MANG_COST:
      return Double.valueOf(getMangCost());

    case OTHER_COST:
      return Double.valueOf(getOtherCost());

    case THE_REST_COST:
      return Double.valueOf(getTheRestCost());

    case TOTAL_COST:
      return Double.valueOf(getTotalCost());

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case MONTH:
      return getMonth();

    case PID:
      return Integer.valueOf(getPid());

    case MANAGER:
      return getManager();

    case STATUS:
      return Integer.valueOf(getStatus());

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case DETAIL:
      return getDetail();

    case PROJECT_MANAGE:
      return getProjectManage();

    case MARK:
      return getMark();

    case IS_LAST_PLAN:
      return Boolean.valueOf(isIsLastPlan());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NO:
      return isSetProjectNo();
    case LOAN_DATE:
      return isSetLoanDate();
    case INTEREST:
      return isSetInterest();
    case MANG_COST:
      return isSetMangCost();
    case OTHER_COST:
      return isSetOtherCost();
    case THE_REST_COST:
      return isSetTheRestCost();
    case TOTAL_COST:
      return isSetTotalCost();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case MONTH:
      return isSetMonth();
    case PID:
      return isSetPid();
    case MANAGER:
      return isSetManager();
    case STATUS:
      return isSetStatus();
    case LOAN_AMT:
      return isSetLoanAmt();
    case DETAIL:
      return isSetDetail();
    case PROJECT_MANAGE:
      return isSetProjectManage();
    case MARK:
      return isSetMark();
    case IS_LAST_PLAN:
      return isSetIsLastPlan();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MonthlyReportRecord)
      return this.equals((MonthlyReportRecord)that);
    return false;
  }

  public boolean equals(MonthlyReportRecord that) {
    if (that == null)
      return false;

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNo = true && this.isSetProjectNo();
    boolean that_present_projectNo = true && that.isSetProjectNo();
    if (this_present_projectNo || that_present_projectNo) {
      if (!(this_present_projectNo && that_present_projectNo))
        return false;
      if (!this.projectNo.equals(that.projectNo))
        return false;
    }

    boolean this_present_loanDate = true && this.isSetLoanDate();
    boolean that_present_loanDate = true && that.isSetLoanDate();
    if (this_present_loanDate || that_present_loanDate) {
      if (!(this_present_loanDate && that_present_loanDate))
        return false;
      if (!this.loanDate.equals(that.loanDate))
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_mangCost = true;
    boolean that_present_mangCost = true;
    if (this_present_mangCost || that_present_mangCost) {
      if (!(this_present_mangCost && that_present_mangCost))
        return false;
      if (this.mangCost != that.mangCost)
        return false;
    }

    boolean this_present_otherCost = true;
    boolean that_present_otherCost = true;
    if (this_present_otherCost || that_present_otherCost) {
      if (!(this_present_otherCost && that_present_otherCost))
        return false;
      if (this.otherCost != that.otherCost)
        return false;
    }

    boolean this_present_theRestCost = true;
    boolean that_present_theRestCost = true;
    if (this_present_theRestCost || that_present_theRestCost) {
      if (!(this_present_theRestCost && that_present_theRestCost))
        return false;
      if (this.theRestCost != that.theRestCost)
        return false;
    }

    boolean this_present_totalCost = true;
    boolean that_present_totalCost = true;
    if (this_present_totalCost || that_present_totalCost) {
      if (!(this_present_totalCost && that_present_totalCost))
        return false;
      if (this.totalCost != that.totalCost)
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_month = true && this.isSetMonth();
    boolean that_present_month = true && that.isSetMonth();
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (!this.month.equals(that.month))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_manager = true && this.isSetManager();
    boolean that_present_manager = true && that.isSetManager();
    if (this_present_manager || that_present_manager) {
      if (!(this_present_manager && that_present_manager))
        return false;
      if (!this.manager.equals(that.manager))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_detail = true && this.isSetDetail();
    boolean that_present_detail = true && that.isSetDetail();
    if (this_present_detail || that_present_detail) {
      if (!(this_present_detail && that_present_detail))
        return false;
      if (!this.detail.equals(that.detail))
        return false;
    }

    boolean this_present_projectManage = true && this.isSetProjectManage();
    boolean that_present_projectManage = true && that.isSetProjectManage();
    if (this_present_projectManage || that_present_projectManage) {
      if (!(this_present_projectManage && that_present_projectManage))
        return false;
      if (!this.projectManage.equals(that.projectManage))
        return false;
    }

    boolean this_present_mark = true && this.isSetMark();
    boolean that_present_mark = true && that.isSetMark();
    if (this_present_mark || that_present_mark) {
      if (!(this_present_mark && that_present_mark))
        return false;
      if (!this.mark.equals(that.mark))
        return false;
    }

    boolean this_present_isLastPlan = true;
    boolean that_present_isLastPlan = true;
    if (this_present_isLastPlan || that_present_isLastPlan) {
      if (!(this_present_isLastPlan && that_present_isLastPlan))
        return false;
      if (this.isLastPlan != that.isLastPlan)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNo = true && (isSetProjectNo());
    list.add(present_projectNo);
    if (present_projectNo)
      list.add(projectNo);

    boolean present_loanDate = true && (isSetLoanDate());
    list.add(present_loanDate);
    if (present_loanDate)
      list.add(loanDate);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_mangCost = true;
    list.add(present_mangCost);
    if (present_mangCost)
      list.add(mangCost);

    boolean present_otherCost = true;
    list.add(present_otherCost);
    if (present_otherCost)
      list.add(otherCost);

    boolean present_theRestCost = true;
    list.add(present_theRestCost);
    if (present_theRestCost)
      list.add(theRestCost);

    boolean present_totalCost = true;
    list.add(present_totalCost);
    if (present_totalCost)
      list.add(totalCost);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_month = true && (isSetMonth());
    list.add(present_month);
    if (present_month)
      list.add(month);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_manager = true && (isSetManager());
    list.add(present_manager);
    if (present_manager)
      list.add(manager);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_detail = true && (isSetDetail());
    list.add(present_detail);
    if (present_detail)
      list.add(detail);

    boolean present_projectManage = true && (isSetProjectManage());
    list.add(present_projectManage);
    if (present_projectManage)
      list.add(projectManage);

    boolean present_mark = true && (isSetMark());
    list.add(present_mark);
    if (present_mark)
      list.add(mark);

    boolean present_isLastPlan = true;
    list.add(present_isLastPlan);
    if (present_isLastPlan)
      list.add(isLastPlan);

    return list.hashCode();
  }

  @Override
  public int compareTo(MonthlyReportRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNo()).compareTo(other.isSetProjectNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNo, other.projectNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDate()).compareTo(other.isSetLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDate, other.loanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMangCost()).compareTo(other.isSetMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mangCost, other.mangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherCost()).compareTo(other.isSetOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherCost, other.otherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTheRestCost()).compareTo(other.isSetTheRestCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheRestCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theRestCost, other.theRestCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCost()).compareTo(other.isSetTotalCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCost, other.totalCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManager()).compareTo(other.isSetManager());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManager()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manager, other.manager);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetail()).compareTo(other.isSetDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detail, other.detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectManage()).compareTo(other.isSetProjectManage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectManage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectManage, other.projectManage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMark()).compareTo(other.isSetMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mark, other.mark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLastPlan()).compareTo(other.isSetIsLastPlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLastPlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLastPlan, other.isLastPlan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MonthlyReportRecord(");
    boolean first = true;

    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNo:");
    if (this.projectNo == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDate:");
    if (this.loanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mangCost:");
    sb.append(this.mangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherCost:");
    sb.append(this.otherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("theRestCost:");
    sb.append(this.theRestCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCost:");
    sb.append(this.totalCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    if (this.month == null) {
      sb.append("null");
    } else {
      sb.append(this.month);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("manager:");
    if (this.manager == null) {
      sb.append("null");
    } else {
      sb.append(this.manager);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detail:");
    if (this.detail == null) {
      sb.append("null");
    } else {
      sb.append(this.detail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectManage:");
    if (this.projectManage == null) {
      sb.append("null");
    } else {
      sb.append(this.projectManage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mark:");
    if (this.mark == null) {
      sb.append("null");
    } else {
      sb.append(this.mark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLastPlan:");
    sb.append(this.isLastPlan);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (detail != null) {
      detail.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MonthlyReportRecordStandardSchemeFactory implements SchemeFactory {
    public MonthlyReportRecordStandardScheme getScheme() {
      return new MonthlyReportRecordStandardScheme();
    }
  }

  private static class MonthlyReportRecordStandardScheme extends StandardScheme<MonthlyReportRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MonthlyReportRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNo = iprot.readString();
              struct.setProjectNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDate = iprot.readString();
              struct.setLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mangCost = iprot.readDouble();
              struct.setMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.otherCost = iprot.readDouble();
              struct.setOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // THE_REST_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.theRestCost = iprot.readDouble();
              struct.setTheRestCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalCost = iprot.readDouble();
              struct.setTotalCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.month = iprot.readString();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MANAGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manager = iprot.readString();
              struct.setManagerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.detail = new MonthlyReportRecordCalculateDetail();
              struct.detail.read(iprot);
              struct.setDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROJECT_MANAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectManage = iprot.readString();
              struct.setProjectManageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mark = iprot.readString();
              struct.setMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_LAST_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLastPlan = iprot.readBool();
              struct.setIsLastPlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MonthlyReportRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNo != null) {
        oprot.writeFieldBegin(PROJECT_NO_FIELD_DESC);
        oprot.writeString(struct.projectNo);
        oprot.writeFieldEnd();
      }
      if (struct.loanDate != null) {
        oprot.writeFieldBegin(LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.loanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.mangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.otherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THE_REST_COST_FIELD_DESC);
      oprot.writeDouble(struct.theRestCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COST_FIELD_DESC);
      oprot.writeDouble(struct.totalCost);
      oprot.writeFieldEnd();
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.month != null) {
        oprot.writeFieldBegin(MONTH_FIELD_DESC);
        oprot.writeString(struct.month);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.manager != null) {
        oprot.writeFieldBegin(MANAGER_FIELD_DESC);
        oprot.writeString(struct.manager);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      if (struct.detail != null) {
        oprot.writeFieldBegin(DETAIL_FIELD_DESC);
        struct.detail.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.projectManage != null) {
        oprot.writeFieldBegin(PROJECT_MANAGE_FIELD_DESC);
        oprot.writeString(struct.projectManage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_LAST_PLAN_FIELD_DESC);
      oprot.writeBool(struct.isLastPlan);
      oprot.writeFieldEnd();
      if (struct.mark != null) {
        oprot.writeFieldBegin(MARK_FIELD_DESC);
        oprot.writeString(struct.mark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MonthlyReportRecordTupleSchemeFactory implements SchemeFactory {
    public MonthlyReportRecordTupleScheme getScheme() {
      return new MonthlyReportRecordTupleScheme();
    }
  }

  private static class MonthlyReportRecordTupleScheme extends TupleScheme<MonthlyReportRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MonthlyReportRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectName()) {
        optionals.set(2);
      }
      if (struct.isSetProjectNo()) {
        optionals.set(3);
      }
      if (struct.isSetLoanDate()) {
        optionals.set(4);
      }
      if (struct.isSetInterest()) {
        optionals.set(5);
      }
      if (struct.isSetMangCost()) {
        optionals.set(6);
      }
      if (struct.isSetOtherCost()) {
        optionals.set(7);
      }
      if (struct.isSetTheRestCost()) {
        optionals.set(8);
      }
      if (struct.isSetTotalCost()) {
        optionals.set(9);
      }
      if (struct.isSetStartDate()) {
        optionals.set(10);
      }
      if (struct.isSetEndDate()) {
        optionals.set(11);
      }
      if (struct.isSetMonth()) {
        optionals.set(12);
      }
      if (struct.isSetPid()) {
        optionals.set(13);
      }
      if (struct.isSetManager()) {
        optionals.set(14);
      }
      if (struct.isSetStatus()) {
        optionals.set(15);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(16);
      }
      if (struct.isSetDetail()) {
        optionals.set(17);
      }
      if (struct.isSetProjectManage()) {
        optionals.set(18);
      }
      if (struct.isSetMark()) {
        optionals.set(19);
      }
      if (struct.isSetIsLastPlan()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNo()) {
        oprot.writeString(struct.projectNo);
      }
      if (struct.isSetLoanDate()) {
        oprot.writeString(struct.loanDate);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetMangCost()) {
        oprot.writeDouble(struct.mangCost);
      }
      if (struct.isSetOtherCost()) {
        oprot.writeDouble(struct.otherCost);
      }
      if (struct.isSetTheRestCost()) {
        oprot.writeDouble(struct.theRestCost);
      }
      if (struct.isSetTotalCost()) {
        oprot.writeDouble(struct.totalCost);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetMonth()) {
        oprot.writeString(struct.month);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetManager()) {
        oprot.writeString(struct.manager);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetDetail()) {
        struct.detail.write(oprot);
      }
      if (struct.isSetProjectManage()) {
        oprot.writeString(struct.projectManage);
      }
      if (struct.isSetMark()) {
        oprot.writeString(struct.mark);
      }
      if (struct.isSetIsLastPlan()) {
        oprot.writeBool(struct.isLastPlan);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MonthlyReportRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectNo = iprot.readString();
        struct.setProjectNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loanDate = iprot.readString();
        struct.setLoanDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mangCost = iprot.readDouble();
        struct.setMangCostIsSet(true);
      }
      if (incoming.get(7)) {
        struct.otherCost = iprot.readDouble();
        struct.setOtherCostIsSet(true);
      }
      if (incoming.get(8)) {
        struct.theRestCost = iprot.readDouble();
        struct.setTheRestCostIsSet(true);
      }
      if (incoming.get(9)) {
        struct.totalCost = iprot.readDouble();
        struct.setTotalCostIsSet(true);
      }
      if (incoming.get(10)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.month = iprot.readString();
        struct.setMonthIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(14)) {
        struct.manager = iprot.readString();
        struct.setManagerIsSet(true);
      }
      if (incoming.get(15)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(17)) {
        struct.detail = new MonthlyReportRecordCalculateDetail();
        struct.detail.read(iprot);
        struct.setDetailIsSet(true);
      }
      if (incoming.get(18)) {
        struct.projectManage = iprot.readString();
        struct.setProjectManageIsSet(true);
      }
      if (incoming.get(19)) {
        struct.mark = iprot.readString();
        struct.setMarkIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isLastPlan = iprot.readBool();
        struct.setIsLastPlanIsSet(true);
      }
    }
  }

}


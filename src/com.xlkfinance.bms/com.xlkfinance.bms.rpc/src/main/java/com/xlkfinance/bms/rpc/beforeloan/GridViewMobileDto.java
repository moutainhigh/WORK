/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 移动端要件申请结果
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class GridViewMobileDto implements org.apache.thrift.TBase<GridViewMobileDto, GridViewMobileDto._Fields>, java.io.Serializable, Cloneable, Comparable<GridViewMobileDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GridViewMobileDto");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lendId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LEND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lendState", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LEND_FILES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("lendFilesCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GridViewMobileDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GridViewMobileDtoTupleSchemeFactory());
  }

  public int pid; // required
  public String projectName; // required
  public String productName; // required
  public double loanMoney; // required
  public String createrDate; // required
  public int applyStatus; // required
  public int page; // required
  public int rows; // required
  public int lendId; // required
  public int lendState; // required
  public int orgId; // required
  public int lendFilesCount; // required
  public String updateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_NAME((short)2, "projectName"),
    PRODUCT_NAME((short)3, "productName"),
    LOAN_MONEY((short)4, "loanMoney"),
    CREATER_DATE((short)5, "createrDate"),
    APPLY_STATUS((short)6, "applyStatus"),
    PAGE((short)7, "page"),
    ROWS((short)8, "rows"),
    LEND_ID((short)9, "lendId"),
    LEND_STATE((short)10, "lendState"),
    ORG_ID((short)11, "orgId"),
    LEND_FILES_COUNT((short)12, "lendFilesCount"),
    UPDATE_TIME((short)13, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 4: // LOAN_MONEY
          return LOAN_MONEY;
        case 5: // CREATER_DATE
          return CREATER_DATE;
        case 6: // APPLY_STATUS
          return APPLY_STATUS;
        case 7: // PAGE
          return PAGE;
        case 8: // ROWS
          return ROWS;
        case 9: // LEND_ID
          return LEND_ID;
        case 10: // LEND_STATE
          return LEND_STATE;
        case 11: // ORG_ID
          return ORG_ID;
        case 12: // LEND_FILES_COUNT
          return LEND_FILES_COUNT;
        case 13: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANMONEY_ISSET_ID = 1;
  private static final int __APPLYSTATUS_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __LENDID_ISSET_ID = 5;
  private static final int __LENDSTATE_ISSET_ID = 6;
  private static final int __ORGID_ISSET_ID = 7;
  private static final int __LENDFILESCOUNT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEND_ID, new org.apache.thrift.meta_data.FieldMetaData("lendId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEND_STATE, new org.apache.thrift.meta_data.FieldMetaData("lendState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEND_FILES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("lendFilesCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GridViewMobileDto.class, metaDataMap);
  }

  public GridViewMobileDto() {
    this.page = 1;

    this.rows = 10;

  }

  public GridViewMobileDto(
    int pid,
    String projectName,
    String productName,
    double loanMoney,
    String createrDate,
    int applyStatus,
    int page,
    int rows,
    int lendId,
    int lendState,
    int orgId,
    int lendFilesCount,
    String updateTime)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectName = projectName;
    this.productName = productName;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.createrDate = createrDate;
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.lendId = lendId;
    setLendIdIsSet(true);
    this.lendState = lendState;
    setLendStateIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.lendFilesCount = lendFilesCount;
    setLendFilesCountIsSet(true);
    this.updateTime = updateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GridViewMobileDto(GridViewMobileDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.loanMoney = other.loanMoney;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.applyStatus = other.applyStatus;
    this.page = other.page;
    this.rows = other.rows;
    this.lendId = other.lendId;
    this.lendState = other.lendState;
    this.orgId = other.orgId;
    this.lendFilesCount = other.lendFilesCount;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public GridViewMobileDto deepCopy() {
    return new GridViewMobileDto(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.projectName = null;
    this.productName = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    this.createrDate = null;
    setApplyStatusIsSet(false);
    this.applyStatus = 0;
    this.page = 1;

    this.rows = 10;

    setLendIdIsSet(false);
    this.lendId = 0;
    setLendStateIsSet(false);
    this.lendState = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setLendFilesCountIsSet(false);
    this.lendFilesCount = 0;
    this.updateTime = null;
  }

  public int getPid() {
    return this.pid;
  }

  public GridViewMobileDto setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public GridViewMobileDto setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public GridViewMobileDto setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public GridViewMobileDto setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public GridViewMobileDto setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getApplyStatus() {
    return this.applyStatus;
  }

  public GridViewMobileDto setApplyStatus(int applyStatus) {
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    return this;
  }

  public void unsetApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field applyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  public void setApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public GridViewMobileDto setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public GridViewMobileDto setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getLendId() {
    return this.lendId;
  }

  public GridViewMobileDto setLendId(int lendId) {
    this.lendId = lendId;
    setLendIdIsSet(true);
    return this;
  }

  public void unsetLendId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENDID_ISSET_ID);
  }

  /** Returns true if field lendId is set (has been assigned a value) and false otherwise */
  public boolean isSetLendId() {
    return EncodingUtils.testBit(__isset_bitfield, __LENDID_ISSET_ID);
  }

  public void setLendIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENDID_ISSET_ID, value);
  }

  public int getLendState() {
    return this.lendState;
  }

  public GridViewMobileDto setLendState(int lendState) {
    this.lendState = lendState;
    setLendStateIsSet(true);
    return this;
  }

  public void unsetLendState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENDSTATE_ISSET_ID);
  }

  /** Returns true if field lendState is set (has been assigned a value) and false otherwise */
  public boolean isSetLendState() {
    return EncodingUtils.testBit(__isset_bitfield, __LENDSTATE_ISSET_ID);
  }

  public void setLendStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENDSTATE_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public GridViewMobileDto setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getLendFilesCount() {
    return this.lendFilesCount;
  }

  public GridViewMobileDto setLendFilesCount(int lendFilesCount) {
    this.lendFilesCount = lendFilesCount;
    setLendFilesCountIsSet(true);
    return this;
  }

  public void unsetLendFilesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENDFILESCOUNT_ISSET_ID);
  }

  /** Returns true if field lendFilesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLendFilesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LENDFILESCOUNT_ISSET_ID);
  }

  public void setLendFilesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENDFILESCOUNT_ISSET_ID, value);
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public GridViewMobileDto setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case APPLY_STATUS:
      if (value == null) {
        unsetApplyStatus();
      } else {
        setApplyStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case LEND_ID:
      if (value == null) {
        unsetLendId();
      } else {
        setLendId((Integer)value);
      }
      break;

    case LEND_STATE:
      if (value == null) {
        unsetLendState();
      } else {
        setLendState((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case LEND_FILES_COUNT:
      if (value == null) {
        unsetLendFilesCount();
      } else {
        setLendFilesCount((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_NAME:
      return getProjectName();

    case PRODUCT_NAME:
      return getProductName();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case CREATER_DATE:
      return getCreaterDate();

    case APPLY_STATUS:
      return Integer.valueOf(getApplyStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case LEND_ID:
      return Integer.valueOf(getLendId());

    case LEND_STATE:
      return Integer.valueOf(getLendState());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case LEND_FILES_COUNT:
      return Integer.valueOf(getLendFilesCount());

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_NAME:
      return isSetProjectName();
    case PRODUCT_NAME:
      return isSetProductName();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case CREATER_DATE:
      return isSetCreaterDate();
    case APPLY_STATUS:
      return isSetApplyStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case LEND_ID:
      return isSetLendId();
    case LEND_STATE:
      return isSetLendState();
    case ORG_ID:
      return isSetOrgId();
    case LEND_FILES_COUNT:
      return isSetLendFilesCount();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GridViewMobileDto)
      return this.equals((GridViewMobileDto)that);
    return false;
  }

  public boolean equals(GridViewMobileDto that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_applyStatus = true;
    boolean that_present_applyStatus = true;
    if (this_present_applyStatus || that_present_applyStatus) {
      if (!(this_present_applyStatus && that_present_applyStatus))
        return false;
      if (this.applyStatus != that.applyStatus)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_lendId = true;
    boolean that_present_lendId = true;
    if (this_present_lendId || that_present_lendId) {
      if (!(this_present_lendId && that_present_lendId))
        return false;
      if (this.lendId != that.lendId)
        return false;
    }

    boolean this_present_lendState = true;
    boolean that_present_lendState = true;
    if (this_present_lendState || that_present_lendState) {
      if (!(this_present_lendState && that_present_lendState))
        return false;
      if (this.lendState != that.lendState)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_lendFilesCount = true;
    boolean that_present_lendFilesCount = true;
    if (this_present_lendFilesCount || that_present_lendFilesCount) {
      if (!(this_present_lendFilesCount && that_present_lendFilesCount))
        return false;
      if (this.lendFilesCount != that.lendFilesCount)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_applyStatus = true;
    list.add(present_applyStatus);
    if (present_applyStatus)
      list.add(applyStatus);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_lendId = true;
    list.add(present_lendId);
    if (present_lendId)
      list.add(lendId);

    boolean present_lendState = true;
    list.add(present_lendState);
    if (present_lendState)
      list.add(lendState);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_lendFilesCount = true;
    list.add(present_lendFilesCount);
    if (present_lendFilesCount)
      list.add(lendFilesCount);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(GridViewMobileDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatus()).compareTo(other.isSetApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatus, other.applyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendId()).compareTo(other.isSetLendId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendId, other.lendId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendState()).compareTo(other.isSetLendState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendState, other.lendState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendFilesCount()).compareTo(other.isSetLendFilesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendFilesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendFilesCount, other.lendFilesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GridViewMobileDto(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatus:");
    sb.append(this.applyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendId:");
    sb.append(this.lendId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendState:");
    sb.append(this.lendState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendFilesCount:");
    sb.append(this.lendFilesCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GridViewMobileDtoStandardSchemeFactory implements SchemeFactory {
    public GridViewMobileDtoStandardScheme getScheme() {
      return new GridViewMobileDtoStandardScheme();
    }
  }

  private static class GridViewMobileDtoStandardScheme extends StandardScheme<GridViewMobileDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GridViewMobileDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyStatus = iprot.readI32();
              struct.setApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lendId = iprot.readI32();
              struct.setLendIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LEND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lendState = iprot.readI32();
              struct.setLendStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LEND_FILES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lendFilesCount = iprot.readI32();
              struct.setLendFilesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GridViewMobileDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEND_ID_FIELD_DESC);
      oprot.writeI32(struct.lendId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEND_STATE_FIELD_DESC);
      oprot.writeI32(struct.lendState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEND_FILES_COUNT_FIELD_DESC);
      oprot.writeI32(struct.lendFilesCount);
      oprot.writeFieldEnd();
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GridViewMobileDtoTupleSchemeFactory implements SchemeFactory {
    public GridViewMobileDtoTupleScheme getScheme() {
      return new GridViewMobileDtoTupleScheme();
    }
  }

  private static class GridViewMobileDtoTupleScheme extends TupleScheme<GridViewMobileDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GridViewMobileDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProductName()) {
        optionals.set(2);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(3);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(4);
      }
      if (struct.isSetApplyStatus()) {
        optionals.set(5);
      }
      if (struct.isSetPage()) {
        optionals.set(6);
      }
      if (struct.isSetRows()) {
        optionals.set(7);
      }
      if (struct.isSetLendId()) {
        optionals.set(8);
      }
      if (struct.isSetLendState()) {
        optionals.set(9);
      }
      if (struct.isSetOrgId()) {
        optionals.set(10);
      }
      if (struct.isSetLendFilesCount()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetApplyStatus()) {
        oprot.writeI32(struct.applyStatus);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetLendId()) {
        oprot.writeI32(struct.lendId);
      }
      if (struct.isSetLendState()) {
        oprot.writeI32(struct.lendState);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetLendFilesCount()) {
        oprot.writeI32(struct.lendFilesCount);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GridViewMobileDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.applyStatus = iprot.readI32();
        struct.setApplyStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lendId = iprot.readI32();
        struct.setLendIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lendState = iprot.readI32();
        struct.setLendStateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lendFilesCount = iprot.readI32();
        struct.setLendFilesCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

}


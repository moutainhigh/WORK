/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class RefundFeeDTO implements org.apache.thrift.TBase<RefundFeeDTO, RefundFeeDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RefundFeeDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundFeeDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeWay", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MORTGAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageNumber", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OLD_HOME_FIELD_DESC = new org.apache.thrift.protocol.TField("oldHome", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField HOME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("homeName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GUARANTEE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField EXTRACT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("extractMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField LEND_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("lendBank", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_FLOOR_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureFloorBank", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BANK_LEND_TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankLendTotalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField DEPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deptId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REC_GUARANTEE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("recGuaranteeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_FLOOR_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureFloorMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField DEFAULT_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField PAY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("payTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField RETURN_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnFee", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccountName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccount", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)29);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deptName", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField REC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recDate", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField REC_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("recMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField CANCEL_GUARANTEE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelGuaranteeDate", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField PAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payDate", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField BANK_LEND_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("bankLendTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)46);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField CONFIRM_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)48);
  private static final org.apache.thrift.protocol.TField IS_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("isConfirm", org.apache.thrift.protocol.TType.I32, (short)49);
  private static final org.apache.thrift.protocol.TField CONFIRM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmDate", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField REAL_USE_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("realUseDays", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)52);
  private static final org.apache.thrift.protocol.TField FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("feeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)53);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDate", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField PROJECT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("projectList", org.apache.thrift.protocol.TType.LIST, (short)55);
  private static final org.apache.thrift.protocol.TField BATCH_REFUND_FEE_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("batchRefundFeeMapList", org.apache.thrift.protocol.TType.LIST, (short)56);
  private static final org.apache.thrift.protocol.TField BATCH_REFUND_FEE_MAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("batchRefundFeeMainId", org.apache.thrift.protocol.TType.I32, (short)57);
  private static final org.apache.thrift.protocol.TField BATCH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("batchName", org.apache.thrift.protocol.TType.STRING, (short)58);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundFeeDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundFeeDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int applyStatus; // required
  public int productId; // required
  public String tradeWay; // required
  public String tradeDate; // required
  public String mortgageNumber; // required
  public int customerId; // required
  public String oldHome; // required
  public int pmUserId; // required
  public String homeName; // required
  public double guaranteeMoney; // required
  public double extractMoney; // required
  public String lendBank; // required
  public String foreclosureFloorBank; // required
  public double bankLendTotalAmount; // required
  public int deptId; // required
  public double recGuaranteeMoney; // required
  public double foreclosureFloorMoney; // required
  public double defaultInterest; // required
  public double payTotal; // required
  public double returnFee; // required
  public String recAccountName; // required
  public String bankName; // required
  public String recAccount; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String createrDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public String projectName; // required
  public String projectNumber; // required
  public String productName; // required
  public String customerName; // required
  public String pmUserName; // required
  public String deptName; // required
  public double interest; // required
  public int foreclosureStatus; // required
  public String recDate; // required
  public double recMoney; // required
  public String cancelGuaranteeDate; // required
  public String payDate; // required
  public double bankLendTotalMoney; // required
  public int type; // required
  public double confirmMoney; // required
  public int isConfirm; // required
  public String confirmDate; // required
  public int realUseDays; // required
  public double repaymentMoney; // required
  public double feeRate; // required
  public String repaymentDate; // required
  public List<Integer> projectList; // required
  public List<RefundFeeMap> batchRefundFeeMapList; // required
  public int batchRefundFeeMainId; // required
  public String batchName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    APPLY_STATUS((short)3, "applyStatus"),
    PRODUCT_ID((short)5, "productId"),
    TRADE_WAY((short)6, "tradeWay"),
    TRADE_DATE((short)7, "tradeDate"),
    MORTGAGE_NUMBER((short)8, "mortgageNumber"),
    CUSTOMER_ID((short)9, "customerId"),
    OLD_HOME((short)10, "oldHome"),
    PM_USER_ID((short)11, "pmUserId"),
    HOME_NAME((short)12, "homeName"),
    GUARANTEE_MONEY((short)13, "guaranteeMoney"),
    EXTRACT_MONEY((short)14, "extractMoney"),
    LEND_BANK((short)15, "lendBank"),
    FORECLOSURE_FLOOR_BANK((short)16, "foreclosureFloorBank"),
    BANK_LEND_TOTAL_AMOUNT((short)17, "bankLendTotalAmount"),
    DEPT_ID((short)18, "deptId"),
    REC_GUARANTEE_MONEY((short)19, "recGuaranteeMoney"),
    FORECLOSURE_FLOOR_MONEY((short)20, "foreclosureFloorMoney"),
    DEFAULT_INTEREST((short)21, "defaultInterest"),
    PAY_TOTAL((short)22, "payTotal"),
    RETURN_FEE((short)23, "returnFee"),
    REC_ACCOUNT_NAME((short)24, "recAccountName"),
    BANK_NAME((short)25, "bankName"),
    REC_ACCOUNT((short)26, "recAccount"),
    PAGE((short)27, "page"),
    ROWS((short)28, "rows"),
    USER_IDS((short)29, "userIds"),
    CREATER_DATE((short)30, "createrDate"),
    CREATER_ID((short)31, "createrId"),
    UPDATE_ID((short)32, "updateId"),
    UPDATE_DATE((short)33, "updateDate"),
    PROJECT_NAME((short)34, "projectName"),
    PROJECT_NUMBER((short)35, "projectNumber"),
    PRODUCT_NAME((short)36, "productName"),
    CUSTOMER_NAME((short)37, "customerName"),
    PM_USER_NAME((short)38, "pmUserName"),
    DEPT_NAME((short)39, "deptName"),
    INTEREST((short)40, "interest"),
    FORECLOSURE_STATUS((short)41, "foreclosureStatus"),
    REC_DATE((short)42, "recDate"),
    REC_MONEY((short)43, "recMoney"),
    CANCEL_GUARANTEE_DATE((short)44, "cancelGuaranteeDate"),
    PAY_DATE((short)45, "payDate"),
    BANK_LEND_TOTAL_MONEY((short)46, "bankLendTotalMoney"),
    TYPE((short)47, "type"),
    CONFIRM_MONEY((short)48, "confirmMoney"),
    IS_CONFIRM((short)49, "isConfirm"),
    CONFIRM_DATE((short)50, "confirmDate"),
    REAL_USE_DAYS((short)51, "realUseDays"),
    REPAYMENT_MONEY((short)52, "repaymentMoney"),
    FEE_RATE((short)53, "feeRate"),
    REPAYMENT_DATE((short)54, "repaymentDate"),
    PROJECT_LIST((short)55, "projectList"),
    BATCH_REFUND_FEE_MAP_LIST((short)56, "batchRefundFeeMapList"),
    BATCH_REFUND_FEE_MAIN_ID((short)57, "batchRefundFeeMainId"),
    BATCH_NAME((short)58, "batchName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // APPLY_STATUS
          return APPLY_STATUS;
        case 5: // PRODUCT_ID
          return PRODUCT_ID;
        case 6: // TRADE_WAY
          return TRADE_WAY;
        case 7: // TRADE_DATE
          return TRADE_DATE;
        case 8: // MORTGAGE_NUMBER
          return MORTGAGE_NUMBER;
        case 9: // CUSTOMER_ID
          return CUSTOMER_ID;
        case 10: // OLD_HOME
          return OLD_HOME;
        case 11: // PM_USER_ID
          return PM_USER_ID;
        case 12: // HOME_NAME
          return HOME_NAME;
        case 13: // GUARANTEE_MONEY
          return GUARANTEE_MONEY;
        case 14: // EXTRACT_MONEY
          return EXTRACT_MONEY;
        case 15: // LEND_BANK
          return LEND_BANK;
        case 16: // FORECLOSURE_FLOOR_BANK
          return FORECLOSURE_FLOOR_BANK;
        case 17: // BANK_LEND_TOTAL_AMOUNT
          return BANK_LEND_TOTAL_AMOUNT;
        case 18: // DEPT_ID
          return DEPT_ID;
        case 19: // REC_GUARANTEE_MONEY
          return REC_GUARANTEE_MONEY;
        case 20: // FORECLOSURE_FLOOR_MONEY
          return FORECLOSURE_FLOOR_MONEY;
        case 21: // DEFAULT_INTEREST
          return DEFAULT_INTEREST;
        case 22: // PAY_TOTAL
          return PAY_TOTAL;
        case 23: // RETURN_FEE
          return RETURN_FEE;
        case 24: // REC_ACCOUNT_NAME
          return REC_ACCOUNT_NAME;
        case 25: // BANK_NAME
          return BANK_NAME;
        case 26: // REC_ACCOUNT
          return REC_ACCOUNT;
        case 27: // PAGE
          return PAGE;
        case 28: // ROWS
          return ROWS;
        case 29: // USER_IDS
          return USER_IDS;
        case 30: // CREATER_DATE
          return CREATER_DATE;
        case 31: // CREATER_ID
          return CREATER_ID;
        case 32: // UPDATE_ID
          return UPDATE_ID;
        case 33: // UPDATE_DATE
          return UPDATE_DATE;
        case 34: // PROJECT_NAME
          return PROJECT_NAME;
        case 35: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 36: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 37: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 38: // PM_USER_NAME
          return PM_USER_NAME;
        case 39: // DEPT_NAME
          return DEPT_NAME;
        case 40: // INTEREST
          return INTEREST;
        case 41: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 42: // REC_DATE
          return REC_DATE;
        case 43: // REC_MONEY
          return REC_MONEY;
        case 44: // CANCEL_GUARANTEE_DATE
          return CANCEL_GUARANTEE_DATE;
        case 45: // PAY_DATE
          return PAY_DATE;
        case 46: // BANK_LEND_TOTAL_MONEY
          return BANK_LEND_TOTAL_MONEY;
        case 47: // TYPE
          return TYPE;
        case 48: // CONFIRM_MONEY
          return CONFIRM_MONEY;
        case 49: // IS_CONFIRM
          return IS_CONFIRM;
        case 50: // CONFIRM_DATE
          return CONFIRM_DATE;
        case 51: // REAL_USE_DAYS
          return REAL_USE_DAYS;
        case 52: // REPAYMENT_MONEY
          return REPAYMENT_MONEY;
        case 53: // FEE_RATE
          return FEE_RATE;
        case 54: // REPAYMENT_DATE
          return REPAYMENT_DATE;
        case 55: // PROJECT_LIST
          return PROJECT_LIST;
        case 56: // BATCH_REFUND_FEE_MAP_LIST
          return BATCH_REFUND_FEE_MAP_LIST;
        case 57: // BATCH_REFUND_FEE_MAIN_ID
          return BATCH_REFUND_FEE_MAIN_ID;
        case 58: // BATCH_NAME
          return BATCH_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __APPLYSTATUS_ISSET_ID = 2;
  private static final int __PRODUCTID_ISSET_ID = 3;
  private static final int __CUSTOMERID_ISSET_ID = 4;
  private static final int __PMUSERID_ISSET_ID = 5;
  private static final int __GUARANTEEMONEY_ISSET_ID = 6;
  private static final int __EXTRACTMONEY_ISSET_ID = 7;
  private static final int __BANKLENDTOTALAMOUNT_ISSET_ID = 8;
  private static final int __DEPTID_ISSET_ID = 9;
  private static final int __RECGUARANTEEMONEY_ISSET_ID = 10;
  private static final int __FORECLOSUREFLOORMONEY_ISSET_ID = 11;
  private static final int __DEFAULTINTEREST_ISSET_ID = 12;
  private static final int __PAYTOTAL_ISSET_ID = 13;
  private static final int __RETURNFEE_ISSET_ID = 14;
  private static final int __PAGE_ISSET_ID = 15;
  private static final int __ROWS_ISSET_ID = 16;
  private static final int __CREATERID_ISSET_ID = 17;
  private static final int __UPDATEID_ISSET_ID = 18;
  private static final int __INTEREST_ISSET_ID = 19;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 20;
  private static final int __RECMONEY_ISSET_ID = 21;
  private static final int __BANKLENDTOTALMONEY_ISSET_ID = 22;
  private static final int __TYPE_ISSET_ID = 23;
  private static final int __CONFIRMMONEY_ISSET_ID = 24;
  private static final int __ISCONFIRM_ISSET_ID = 25;
  private static final int __REALUSEDAYS_ISSET_ID = 26;
  private static final int __REPAYMENTMONEY_ISSET_ID = 27;
  private static final int __FEERATE_ISSET_ID = 28;
  private static final int __BATCHREFUNDFEEMAINID_ISSET_ID = 29;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_WAY, new org.apache.thrift.meta_data.FieldMetaData("tradeWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("tradeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("mortgageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_HOME, new org.apache.thrift.meta_data.FieldMetaData("oldHome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOME_NAME, new org.apache.thrift.meta_data.FieldMetaData("homeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUARANTEE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("guaranteeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTRACT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("extractMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEND_BANK, new org.apache.thrift.meta_data.FieldMetaData("lendBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_FLOOR_BANK, new org.apache.thrift.meta_data.FieldMetaData("foreclosureFloorBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_LEND_TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankLendTotalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPT_ID, new org.apache.thrift.meta_data.FieldMetaData("deptId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_GUARANTEE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("recGuaranteeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORECLOSURE_FLOOR_MONEY, new org.apache.thrift.meta_data.FieldMetaData("foreclosureFloorMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEFAULT_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("defaultInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("payTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RETURN_FEE, new org.apache.thrift.meta_data.FieldMetaData("returnFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("recAccountName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("recAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("deptName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_DATE, new org.apache.thrift.meta_data.FieldMetaData("recDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_MONEY, new org.apache.thrift.meta_data.FieldMetaData("recMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CANCEL_GUARANTEE_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelGuaranteeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("payDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_LEND_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("bankLendTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIRM_MONEY, new org.apache.thrift.meta_data.FieldMetaData("confirmMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("isConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIRM_DATE, new org.apache.thrift.meta_data.FieldMetaData("confirmDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_USE_DAYS, new org.apache.thrift.meta_data.FieldMetaData("realUseDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("repaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("feeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("repaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_LIST, new org.apache.thrift.meta_data.FieldMetaData("projectList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BATCH_REFUND_FEE_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("batchRefundFeeMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeeMap.class))));
    tmpMap.put(_Fields.BATCH_REFUND_FEE_MAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("batchRefundFeeMainId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BATCH_NAME, new org.apache.thrift.meta_data.FieldMetaData("batchName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundFeeDTO.class, metaDataMap);
  }

  public RefundFeeDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public RefundFeeDTO(
    int pid,
    int projectId,
    int applyStatus,
    int productId,
    String tradeWay,
    String tradeDate,
    String mortgageNumber,
    int customerId,
    String oldHome,
    int pmUserId,
    String homeName,
    double guaranteeMoney,
    double extractMoney,
    String lendBank,
    String foreclosureFloorBank,
    double bankLendTotalAmount,
    int deptId,
    double recGuaranteeMoney,
    double foreclosureFloorMoney,
    double defaultInterest,
    double payTotal,
    double returnFee,
    String recAccountName,
    String bankName,
    String recAccount,
    int page,
    int rows,
    List<Integer> userIds,
    String createrDate,
    int createrId,
    int updateId,
    String updateDate,
    String projectName,
    String projectNumber,
    String productName,
    String customerName,
    String pmUserName,
    String deptName,
    double interest,
    int foreclosureStatus,
    String recDate,
    double recMoney,
    String cancelGuaranteeDate,
    String payDate,
    double bankLendTotalMoney,
    int type,
    double confirmMoney,
    int isConfirm,
    String confirmDate,
    int realUseDays,
    double repaymentMoney,
    double feeRate,
    String repaymentDate,
    List<Integer> projectList,
    List<RefundFeeMap> batchRefundFeeMapList,
    int batchRefundFeeMainId,
    String batchName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.tradeWay = tradeWay;
    this.tradeDate = tradeDate;
    this.mortgageNumber = mortgageNumber;
    this.customerId = customerId;
    setCustomerIdIsSet(true);
    this.oldHome = oldHome;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.homeName = homeName;
    this.guaranteeMoney = guaranteeMoney;
    setGuaranteeMoneyIsSet(true);
    this.extractMoney = extractMoney;
    setExtractMoneyIsSet(true);
    this.lendBank = lendBank;
    this.foreclosureFloorBank = foreclosureFloorBank;
    this.bankLendTotalAmount = bankLendTotalAmount;
    setBankLendTotalAmountIsSet(true);
    this.deptId = deptId;
    setDeptIdIsSet(true);
    this.recGuaranteeMoney = recGuaranteeMoney;
    setRecGuaranteeMoneyIsSet(true);
    this.foreclosureFloorMoney = foreclosureFloorMoney;
    setForeclosureFloorMoneyIsSet(true);
    this.defaultInterest = defaultInterest;
    setDefaultInterestIsSet(true);
    this.payTotal = payTotal;
    setPayTotalIsSet(true);
    this.returnFee = returnFee;
    setReturnFeeIsSet(true);
    this.recAccountName = recAccountName;
    this.bankName = bankName;
    this.recAccount = recAccount;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.createrDate = createrDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.productName = productName;
    this.customerName = customerName;
    this.pmUserName = pmUserName;
    this.deptName = deptName;
    this.interest = interest;
    setInterestIsSet(true);
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.recDate = recDate;
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    this.payDate = payDate;
    this.bankLendTotalMoney = bankLendTotalMoney;
    setBankLendTotalMoneyIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.confirmMoney = confirmMoney;
    setConfirmMoneyIsSet(true);
    this.isConfirm = isConfirm;
    setIsConfirmIsSet(true);
    this.confirmDate = confirmDate;
    this.realUseDays = realUseDays;
    setRealUseDaysIsSet(true);
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    this.repaymentDate = repaymentDate;
    this.projectList = projectList;
    this.batchRefundFeeMapList = batchRefundFeeMapList;
    this.batchRefundFeeMainId = batchRefundFeeMainId;
    setBatchRefundFeeMainIdIsSet(true);
    this.batchName = batchName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundFeeDTO(RefundFeeDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.applyStatus = other.applyStatus;
    this.productId = other.productId;
    if (other.isSetTradeWay()) {
      this.tradeWay = other.tradeWay;
    }
    if (other.isSetTradeDate()) {
      this.tradeDate = other.tradeDate;
    }
    if (other.isSetMortgageNumber()) {
      this.mortgageNumber = other.mortgageNumber;
    }
    this.customerId = other.customerId;
    if (other.isSetOldHome()) {
      this.oldHome = other.oldHome;
    }
    this.pmUserId = other.pmUserId;
    if (other.isSetHomeName()) {
      this.homeName = other.homeName;
    }
    this.guaranteeMoney = other.guaranteeMoney;
    this.extractMoney = other.extractMoney;
    if (other.isSetLendBank()) {
      this.lendBank = other.lendBank;
    }
    if (other.isSetForeclosureFloorBank()) {
      this.foreclosureFloorBank = other.foreclosureFloorBank;
    }
    this.bankLendTotalAmount = other.bankLendTotalAmount;
    this.deptId = other.deptId;
    this.recGuaranteeMoney = other.recGuaranteeMoney;
    this.foreclosureFloorMoney = other.foreclosureFloorMoney;
    this.defaultInterest = other.defaultInterest;
    this.payTotal = other.payTotal;
    this.returnFee = other.returnFee;
    if (other.isSetRecAccountName()) {
      this.recAccountName = other.recAccountName;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetRecAccount()) {
      this.recAccount = other.recAccount;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetDeptName()) {
      this.deptName = other.deptName;
    }
    this.interest = other.interest;
    this.foreclosureStatus = other.foreclosureStatus;
    if (other.isSetRecDate()) {
      this.recDate = other.recDate;
    }
    this.recMoney = other.recMoney;
    if (other.isSetCancelGuaranteeDate()) {
      this.cancelGuaranteeDate = other.cancelGuaranteeDate;
    }
    if (other.isSetPayDate()) {
      this.payDate = other.payDate;
    }
    this.bankLendTotalMoney = other.bankLendTotalMoney;
    this.type = other.type;
    this.confirmMoney = other.confirmMoney;
    this.isConfirm = other.isConfirm;
    if (other.isSetConfirmDate()) {
      this.confirmDate = other.confirmDate;
    }
    this.realUseDays = other.realUseDays;
    this.repaymentMoney = other.repaymentMoney;
    this.feeRate = other.feeRate;
    if (other.isSetRepaymentDate()) {
      this.repaymentDate = other.repaymentDate;
    }
    if (other.isSetProjectList()) {
      List<Integer> __this__projectList = new ArrayList<Integer>(other.projectList);
      this.projectList = __this__projectList;
    }
    if (other.isSetBatchRefundFeeMapList()) {
      List<RefundFeeMap> __this__batchRefundFeeMapList = new ArrayList<RefundFeeMap>(other.batchRefundFeeMapList.size());
      for (RefundFeeMap other_element : other.batchRefundFeeMapList) {
        __this__batchRefundFeeMapList.add(new RefundFeeMap(other_element));
      }
      this.batchRefundFeeMapList = __this__batchRefundFeeMapList;
    }
    this.batchRefundFeeMainId = other.batchRefundFeeMainId;
    if (other.isSetBatchName()) {
      this.batchName = other.batchName;
    }
  }

  public RefundFeeDTO deepCopy() {
    return new RefundFeeDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setApplyStatusIsSet(false);
    this.applyStatus = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.tradeWay = null;
    this.tradeDate = null;
    this.mortgageNumber = null;
    setCustomerIdIsSet(false);
    this.customerId = 0;
    this.oldHome = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.homeName = null;
    setGuaranteeMoneyIsSet(false);
    this.guaranteeMoney = 0.0;
    setExtractMoneyIsSet(false);
    this.extractMoney = 0.0;
    this.lendBank = null;
    this.foreclosureFloorBank = null;
    setBankLendTotalAmountIsSet(false);
    this.bankLendTotalAmount = 0.0;
    setDeptIdIsSet(false);
    this.deptId = 0;
    setRecGuaranteeMoneyIsSet(false);
    this.recGuaranteeMoney = 0.0;
    setForeclosureFloorMoneyIsSet(false);
    this.foreclosureFloorMoney = 0.0;
    setDefaultInterestIsSet(false);
    this.defaultInterest = 0.0;
    setPayTotalIsSet(false);
    this.payTotal = 0.0;
    setReturnFeeIsSet(false);
    this.returnFee = 0.0;
    this.recAccountName = null;
    this.bankName = null;
    this.recAccount = null;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.createrDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.projectName = null;
    this.projectNumber = null;
    this.productName = null;
    this.customerName = null;
    this.pmUserName = null;
    this.deptName = null;
    setInterestIsSet(false);
    this.interest = 0.0;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    this.recDate = null;
    setRecMoneyIsSet(false);
    this.recMoney = 0.0;
    this.cancelGuaranteeDate = null;
    this.payDate = null;
    setBankLendTotalMoneyIsSet(false);
    this.bankLendTotalMoney = 0.0;
    setTypeIsSet(false);
    this.type = 0;
    setConfirmMoneyIsSet(false);
    this.confirmMoney = 0.0;
    setIsConfirmIsSet(false);
    this.isConfirm = 0;
    this.confirmDate = null;
    setRealUseDaysIsSet(false);
    this.realUseDays = 0;
    setRepaymentMoneyIsSet(false);
    this.repaymentMoney = 0.0;
    setFeeRateIsSet(false);
    this.feeRate = 0.0;
    this.repaymentDate = null;
    this.projectList = null;
    this.batchRefundFeeMapList = null;
    setBatchRefundFeeMainIdIsSet(false);
    this.batchRefundFeeMainId = 0;
    this.batchName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public RefundFeeDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RefundFeeDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getApplyStatus() {
    return this.applyStatus;
  }

  public RefundFeeDTO setApplyStatus(int applyStatus) {
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    return this;
  }

  public void unsetApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field applyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  public void setApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public RefundFeeDTO setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getTradeWay() {
    return this.tradeWay;
  }

  public RefundFeeDTO setTradeWay(String tradeWay) {
    this.tradeWay = tradeWay;
    return this;
  }

  public void unsetTradeWay() {
    this.tradeWay = null;
  }

  /** Returns true if field tradeWay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeWay() {
    return this.tradeWay != null;
  }

  public void setTradeWayIsSet(boolean value) {
    if (!value) {
      this.tradeWay = null;
    }
  }

  public String getTradeDate() {
    return this.tradeDate;
  }

  public RefundFeeDTO setTradeDate(String tradeDate) {
    this.tradeDate = tradeDate;
    return this;
  }

  public void unsetTradeDate() {
    this.tradeDate = null;
  }

  /** Returns true if field tradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDate() {
    return this.tradeDate != null;
  }

  public void setTradeDateIsSet(boolean value) {
    if (!value) {
      this.tradeDate = null;
    }
  }

  public String getMortgageNumber() {
    return this.mortgageNumber;
  }

  public RefundFeeDTO setMortgageNumber(String mortgageNumber) {
    this.mortgageNumber = mortgageNumber;
    return this;
  }

  public void unsetMortgageNumber() {
    this.mortgageNumber = null;
  }

  /** Returns true if field mortgageNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageNumber() {
    return this.mortgageNumber != null;
  }

  public void setMortgageNumberIsSet(boolean value) {
    if (!value) {
      this.mortgageNumber = null;
    }
  }

  public int getCustomerId() {
    return this.customerId;
  }

  public RefundFeeDTO setCustomerId(int customerId) {
    this.customerId = customerId;
    setCustomerIdIsSet(true);
    return this;
  }

  public void unsetCustomerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTOMERID_ISSET_ID);
  }

  /** Returns true if field customerId is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerId() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTOMERID_ISSET_ID);
  }

  public void setCustomerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTOMERID_ISSET_ID, value);
  }

  public String getOldHome() {
    return this.oldHome;
  }

  public RefundFeeDTO setOldHome(String oldHome) {
    this.oldHome = oldHome;
    return this;
  }

  public void unsetOldHome() {
    this.oldHome = null;
  }

  /** Returns true if field oldHome is set (has been assigned a value) and false otherwise */
  public boolean isSetOldHome() {
    return this.oldHome != null;
  }

  public void setOldHomeIsSet(boolean value) {
    if (!value) {
      this.oldHome = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public RefundFeeDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public String getHomeName() {
    return this.homeName;
  }

  public RefundFeeDTO setHomeName(String homeName) {
    this.homeName = homeName;
    return this;
  }

  public void unsetHomeName() {
    this.homeName = null;
  }

  /** Returns true if field homeName is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeName() {
    return this.homeName != null;
  }

  public void setHomeNameIsSet(boolean value) {
    if (!value) {
      this.homeName = null;
    }
  }

  public double getGuaranteeMoney() {
    return this.guaranteeMoney;
  }

  public RefundFeeDTO setGuaranteeMoney(double guaranteeMoney) {
    this.guaranteeMoney = guaranteeMoney;
    setGuaranteeMoneyIsSet(true);
    return this;
  }

  public void unsetGuaranteeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUARANTEEMONEY_ISSET_ID);
  }

  /** Returns true if field guaranteeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GUARANTEEMONEY_ISSET_ID);
  }

  public void setGuaranteeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUARANTEEMONEY_ISSET_ID, value);
  }

  public double getExtractMoney() {
    return this.extractMoney;
  }

  public RefundFeeDTO setExtractMoney(double extractMoney) {
    this.extractMoney = extractMoney;
    setExtractMoneyIsSet(true);
    return this;
  }

  public void unsetExtractMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTRACTMONEY_ISSET_ID);
  }

  /** Returns true if field extractMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetExtractMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTRACTMONEY_ISSET_ID);
  }

  public void setExtractMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTRACTMONEY_ISSET_ID, value);
  }

  public String getLendBank() {
    return this.lendBank;
  }

  public RefundFeeDTO setLendBank(String lendBank) {
    this.lendBank = lendBank;
    return this;
  }

  public void unsetLendBank() {
    this.lendBank = null;
  }

  /** Returns true if field lendBank is set (has been assigned a value) and false otherwise */
  public boolean isSetLendBank() {
    return this.lendBank != null;
  }

  public void setLendBankIsSet(boolean value) {
    if (!value) {
      this.lendBank = null;
    }
  }

  public String getForeclosureFloorBank() {
    return this.foreclosureFloorBank;
  }

  public RefundFeeDTO setForeclosureFloorBank(String foreclosureFloorBank) {
    this.foreclosureFloorBank = foreclosureFloorBank;
    return this;
  }

  public void unsetForeclosureFloorBank() {
    this.foreclosureFloorBank = null;
  }

  /** Returns true if field foreclosureFloorBank is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureFloorBank() {
    return this.foreclosureFloorBank != null;
  }

  public void setForeclosureFloorBankIsSet(boolean value) {
    if (!value) {
      this.foreclosureFloorBank = null;
    }
  }

  public double getBankLendTotalAmount() {
    return this.bankLendTotalAmount;
  }

  public RefundFeeDTO setBankLendTotalAmount(double bankLendTotalAmount) {
    this.bankLendTotalAmount = bankLendTotalAmount;
    setBankLendTotalAmountIsSet(true);
    return this;
  }

  public void unsetBankLendTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKLENDTOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field bankLendTotalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankLendTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKLENDTOTALAMOUNT_ISSET_ID);
  }

  public void setBankLendTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKLENDTOTALAMOUNT_ISSET_ID, value);
  }

  public int getDeptId() {
    return this.deptId;
  }

  public RefundFeeDTO setDeptId(int deptId) {
    this.deptId = deptId;
    setDeptIdIsSet(true);
    return this;
  }

  public void unsetDeptId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPTID_ISSET_ID);
  }

  /** Returns true if field deptId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPTID_ISSET_ID);
  }

  public void setDeptIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPTID_ISSET_ID, value);
  }

  public double getRecGuaranteeMoney() {
    return this.recGuaranteeMoney;
  }

  public RefundFeeDTO setRecGuaranteeMoney(double recGuaranteeMoney) {
    this.recGuaranteeMoney = recGuaranteeMoney;
    setRecGuaranteeMoneyIsSet(true);
    return this;
  }

  public void unsetRecGuaranteeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECGUARANTEEMONEY_ISSET_ID);
  }

  /** Returns true if field recGuaranteeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRecGuaranteeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECGUARANTEEMONEY_ISSET_ID);
  }

  public void setRecGuaranteeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECGUARANTEEMONEY_ISSET_ID, value);
  }

  public double getForeclosureFloorMoney() {
    return this.foreclosureFloorMoney;
  }

  public RefundFeeDTO setForeclosureFloorMoney(double foreclosureFloorMoney) {
    this.foreclosureFloorMoney = foreclosureFloorMoney;
    setForeclosureFloorMoneyIsSet(true);
    return this;
  }

  public void unsetForeclosureFloorMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSUREFLOORMONEY_ISSET_ID);
  }

  /** Returns true if field foreclosureFloorMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureFloorMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSUREFLOORMONEY_ISSET_ID);
  }

  public void setForeclosureFloorMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSUREFLOORMONEY_ISSET_ID, value);
  }

  public double getDefaultInterest() {
    return this.defaultInterest;
  }

  public RefundFeeDTO setDefaultInterest(double defaultInterest) {
    this.defaultInterest = defaultInterest;
    setDefaultInterestIsSet(true);
    return this;
  }

  public void unsetDefaultInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTINTEREST_ISSET_ID);
  }

  /** Returns true if field defaultInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTINTEREST_ISSET_ID);
  }

  public void setDefaultInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTINTEREST_ISSET_ID, value);
  }

  public double getPayTotal() {
    return this.payTotal;
  }

  public RefundFeeDTO setPayTotal(double payTotal) {
    this.payTotal = payTotal;
    setPayTotalIsSet(true);
    return this;
  }

  public void unsetPayTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYTOTAL_ISSET_ID);
  }

  /** Returns true if field payTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetPayTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYTOTAL_ISSET_ID);
  }

  public void setPayTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYTOTAL_ISSET_ID, value);
  }

  public double getReturnFee() {
    return this.returnFee;
  }

  public RefundFeeDTO setReturnFee(double returnFee) {
    this.returnFee = returnFee;
    setReturnFeeIsSet(true);
    return this;
  }

  public void unsetReturnFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNFEE_ISSET_ID);
  }

  /** Returns true if field returnFee is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFee() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNFEE_ISSET_ID);
  }

  public void setReturnFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNFEE_ISSET_ID, value);
  }

  public String getRecAccountName() {
    return this.recAccountName;
  }

  public RefundFeeDTO setRecAccountName(String recAccountName) {
    this.recAccountName = recAccountName;
    return this;
  }

  public void unsetRecAccountName() {
    this.recAccountName = null;
  }

  /** Returns true if field recAccountName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccountName() {
    return this.recAccountName != null;
  }

  public void setRecAccountNameIsSet(boolean value) {
    if (!value) {
      this.recAccountName = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public RefundFeeDTO setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getRecAccount() {
    return this.recAccount;
  }

  public RefundFeeDTO setRecAccount(String recAccount) {
    this.recAccount = recAccount;
    return this;
  }

  public void unsetRecAccount() {
    this.recAccount = null;
  }

  /** Returns true if field recAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccount() {
    return this.recAccount != null;
  }

  public void setRecAccountIsSet(boolean value) {
    if (!value) {
      this.recAccount = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public RefundFeeDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RefundFeeDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public RefundFeeDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public RefundFeeDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public RefundFeeDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public RefundFeeDTO setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public RefundFeeDTO setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RefundFeeDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public RefundFeeDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public RefundFeeDTO setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public RefundFeeDTO setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public RefundFeeDTO setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getDeptName() {
    return this.deptName;
  }

  public RefundFeeDTO setDeptName(String deptName) {
    this.deptName = deptName;
    return this;
  }

  public void unsetDeptName() {
    this.deptName = null;
  }

  /** Returns true if field deptName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptName() {
    return this.deptName != null;
  }

  public void setDeptNameIsSet(boolean value) {
    if (!value) {
      this.deptName = null;
    }
  }

  public double getInterest() {
    return this.interest;
  }

  public RefundFeeDTO setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public RefundFeeDTO setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID, value);
  }

  public String getRecDate() {
    return this.recDate;
  }

  public RefundFeeDTO setRecDate(String recDate) {
    this.recDate = recDate;
    return this;
  }

  public void unsetRecDate() {
    this.recDate = null;
  }

  /** Returns true if field recDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecDate() {
    return this.recDate != null;
  }

  public void setRecDateIsSet(boolean value) {
    if (!value) {
      this.recDate = null;
    }
  }

  public double getRecMoney() {
    return this.recMoney;
  }

  public RefundFeeDTO setRecMoney(double recMoney) {
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    return this;
  }

  public void unsetRecMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  /** Returns true if field recMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRecMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  public void setRecMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECMONEY_ISSET_ID, value);
  }

  public String getCancelGuaranteeDate() {
    return this.cancelGuaranteeDate;
  }

  public RefundFeeDTO setCancelGuaranteeDate(String cancelGuaranteeDate) {
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    return this;
  }

  public void unsetCancelGuaranteeDate() {
    this.cancelGuaranteeDate = null;
  }

  /** Returns true if field cancelGuaranteeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelGuaranteeDate() {
    return this.cancelGuaranteeDate != null;
  }

  public void setCancelGuaranteeDateIsSet(boolean value) {
    if (!value) {
      this.cancelGuaranteeDate = null;
    }
  }

  public String getPayDate() {
    return this.payDate;
  }

  public RefundFeeDTO setPayDate(String payDate) {
    this.payDate = payDate;
    return this;
  }

  public void unsetPayDate() {
    this.payDate = null;
  }

  /** Returns true if field payDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPayDate() {
    return this.payDate != null;
  }

  public void setPayDateIsSet(boolean value) {
    if (!value) {
      this.payDate = null;
    }
  }

  public double getBankLendTotalMoney() {
    return this.bankLendTotalMoney;
  }

  public RefundFeeDTO setBankLendTotalMoney(double bankLendTotalMoney) {
    this.bankLendTotalMoney = bankLendTotalMoney;
    setBankLendTotalMoneyIsSet(true);
    return this;
  }

  public void unsetBankLendTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKLENDTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field bankLendTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetBankLendTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKLENDTOTALMONEY_ISSET_ID);
  }

  public void setBankLendTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKLENDTOTALMONEY_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public RefundFeeDTO setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public double getConfirmMoney() {
    return this.confirmMoney;
  }

  public RefundFeeDTO setConfirmMoney(double confirmMoney) {
    this.confirmMoney = confirmMoney;
    setConfirmMoneyIsSet(true);
    return this;
  }

  public void unsetConfirmMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID);
  }

  /** Returns true if field confirmMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID);
  }

  public void setConfirmMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID, value);
  }

  public int getIsConfirm() {
    return this.isConfirm;
  }

  public RefundFeeDTO setIsConfirm(int isConfirm) {
    this.isConfirm = isConfirm;
    setIsConfirmIsSet(true);
    return this;
  }

  public void unsetIsConfirm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCONFIRM_ISSET_ID);
  }

  /** Returns true if field isConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetIsConfirm() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCONFIRM_ISSET_ID);
  }

  public void setIsConfirmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCONFIRM_ISSET_ID, value);
  }

  public String getConfirmDate() {
    return this.confirmDate;
  }

  public RefundFeeDTO setConfirmDate(String confirmDate) {
    this.confirmDate = confirmDate;
    return this;
  }

  public void unsetConfirmDate() {
    this.confirmDate = null;
  }

  /** Returns true if field confirmDate is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmDate() {
    return this.confirmDate != null;
  }

  public void setConfirmDateIsSet(boolean value) {
    if (!value) {
      this.confirmDate = null;
    }
  }

  public int getRealUseDays() {
    return this.realUseDays;
  }

  public RefundFeeDTO setRealUseDays(int realUseDays) {
    this.realUseDays = realUseDays;
    setRealUseDaysIsSet(true);
    return this;
  }

  public void unsetRealUseDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALUSEDAYS_ISSET_ID);
  }

  /** Returns true if field realUseDays is set (has been assigned a value) and false otherwise */
  public boolean isSetRealUseDays() {
    return EncodingUtils.testBit(__isset_bitfield, __REALUSEDAYS_ISSET_ID);
  }

  public void setRealUseDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALUSEDAYS_ISSET_ID, value);
  }

  public double getRepaymentMoney() {
    return this.repaymentMoney;
  }

  public RefundFeeDTO setRepaymentMoney(double repaymentMoney) {
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field repaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  public void setRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID, value);
  }

  public double getFeeRate() {
    return this.feeRate;
  }

  public RefundFeeDTO setFeeRate(double feeRate) {
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    return this;
  }

  public void unsetFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  /** Returns true if field feeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  public void setFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEERATE_ISSET_ID, value);
  }

  public String getRepaymentDate() {
    return this.repaymentDate;
  }

  public RefundFeeDTO setRepaymentDate(String repaymentDate) {
    this.repaymentDate = repaymentDate;
    return this;
  }

  public void unsetRepaymentDate() {
    this.repaymentDate = null;
  }

  /** Returns true if field repaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDate() {
    return this.repaymentDate != null;
  }

  public void setRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.repaymentDate = null;
    }
  }

  public int getProjectListSize() {
    return (this.projectList == null) ? 0 : this.projectList.size();
  }

  public java.util.Iterator<Integer> getProjectListIterator() {
    return (this.projectList == null) ? null : this.projectList.iterator();
  }

  public void addToProjectList(int elem) {
    if (this.projectList == null) {
      this.projectList = new ArrayList<Integer>();
    }
    this.projectList.add(elem);
  }

  public List<Integer> getProjectList() {
    return this.projectList;
  }

  public RefundFeeDTO setProjectList(List<Integer> projectList) {
    this.projectList = projectList;
    return this;
  }

  public void unsetProjectList() {
    this.projectList = null;
  }

  /** Returns true if field projectList is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectList() {
    return this.projectList != null;
  }

  public void setProjectListIsSet(boolean value) {
    if (!value) {
      this.projectList = null;
    }
  }

  public int getBatchRefundFeeMapListSize() {
    return (this.batchRefundFeeMapList == null) ? 0 : this.batchRefundFeeMapList.size();
  }

  public java.util.Iterator<RefundFeeMap> getBatchRefundFeeMapListIterator() {
    return (this.batchRefundFeeMapList == null) ? null : this.batchRefundFeeMapList.iterator();
  }

  public void addToBatchRefundFeeMapList(RefundFeeMap elem) {
    if (this.batchRefundFeeMapList == null) {
      this.batchRefundFeeMapList = new ArrayList<RefundFeeMap>();
    }
    this.batchRefundFeeMapList.add(elem);
  }

  public List<RefundFeeMap> getBatchRefundFeeMapList() {
    return this.batchRefundFeeMapList;
  }

  public RefundFeeDTO setBatchRefundFeeMapList(List<RefundFeeMap> batchRefundFeeMapList) {
    this.batchRefundFeeMapList = batchRefundFeeMapList;
    return this;
  }

  public void unsetBatchRefundFeeMapList() {
    this.batchRefundFeeMapList = null;
  }

  /** Returns true if field batchRefundFeeMapList is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchRefundFeeMapList() {
    return this.batchRefundFeeMapList != null;
  }

  public void setBatchRefundFeeMapListIsSet(boolean value) {
    if (!value) {
      this.batchRefundFeeMapList = null;
    }
  }

  public int getBatchRefundFeeMainId() {
    return this.batchRefundFeeMainId;
  }

  public RefundFeeDTO setBatchRefundFeeMainId(int batchRefundFeeMainId) {
    this.batchRefundFeeMainId = batchRefundFeeMainId;
    setBatchRefundFeeMainIdIsSet(true);
    return this;
  }

  public void unsetBatchRefundFeeMainId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHREFUNDFEEMAINID_ISSET_ID);
  }

  /** Returns true if field batchRefundFeeMainId is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchRefundFeeMainId() {
    return EncodingUtils.testBit(__isset_bitfield, __BATCHREFUNDFEEMAINID_ISSET_ID);
  }

  public void setBatchRefundFeeMainIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHREFUNDFEEMAINID_ISSET_ID, value);
  }

  public String getBatchName() {
    return this.batchName;
  }

  public RefundFeeDTO setBatchName(String batchName) {
    this.batchName = batchName;
    return this;
  }

  public void unsetBatchName() {
    this.batchName = null;
  }

  /** Returns true if field batchName is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchName() {
    return this.batchName != null;
  }

  public void setBatchNameIsSet(boolean value) {
    if (!value) {
      this.batchName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case APPLY_STATUS:
      if (value == null) {
        unsetApplyStatus();
      } else {
        setApplyStatus((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case TRADE_WAY:
      if (value == null) {
        unsetTradeWay();
      } else {
        setTradeWay((String)value);
      }
      break;

    case TRADE_DATE:
      if (value == null) {
        unsetTradeDate();
      } else {
        setTradeDate((String)value);
      }
      break;

    case MORTGAGE_NUMBER:
      if (value == null) {
        unsetMortgageNumber();
      } else {
        setMortgageNumber((String)value);
      }
      break;

    case CUSTOMER_ID:
      if (value == null) {
        unsetCustomerId();
      } else {
        setCustomerId((Integer)value);
      }
      break;

    case OLD_HOME:
      if (value == null) {
        unsetOldHome();
      } else {
        setOldHome((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case HOME_NAME:
      if (value == null) {
        unsetHomeName();
      } else {
        setHomeName((String)value);
      }
      break;

    case GUARANTEE_MONEY:
      if (value == null) {
        unsetGuaranteeMoney();
      } else {
        setGuaranteeMoney((Double)value);
      }
      break;

    case EXTRACT_MONEY:
      if (value == null) {
        unsetExtractMoney();
      } else {
        setExtractMoney((Double)value);
      }
      break;

    case LEND_BANK:
      if (value == null) {
        unsetLendBank();
      } else {
        setLendBank((String)value);
      }
      break;

    case FORECLOSURE_FLOOR_BANK:
      if (value == null) {
        unsetForeclosureFloorBank();
      } else {
        setForeclosureFloorBank((String)value);
      }
      break;

    case BANK_LEND_TOTAL_AMOUNT:
      if (value == null) {
        unsetBankLendTotalAmount();
      } else {
        setBankLendTotalAmount((Double)value);
      }
      break;

    case DEPT_ID:
      if (value == null) {
        unsetDeptId();
      } else {
        setDeptId((Integer)value);
      }
      break;

    case REC_GUARANTEE_MONEY:
      if (value == null) {
        unsetRecGuaranteeMoney();
      } else {
        setRecGuaranteeMoney((Double)value);
      }
      break;

    case FORECLOSURE_FLOOR_MONEY:
      if (value == null) {
        unsetForeclosureFloorMoney();
      } else {
        setForeclosureFloorMoney((Double)value);
      }
      break;

    case DEFAULT_INTEREST:
      if (value == null) {
        unsetDefaultInterest();
      } else {
        setDefaultInterest((Double)value);
      }
      break;

    case PAY_TOTAL:
      if (value == null) {
        unsetPayTotal();
      } else {
        setPayTotal((Double)value);
      }
      break;

    case RETURN_FEE:
      if (value == null) {
        unsetReturnFee();
      } else {
        setReturnFee((Double)value);
      }
      break;

    case REC_ACCOUNT_NAME:
      if (value == null) {
        unsetRecAccountName();
      } else {
        setRecAccountName((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case REC_ACCOUNT:
      if (value == null) {
        unsetRecAccount();
      } else {
        setRecAccount((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case DEPT_NAME:
      if (value == null) {
        unsetDeptName();
      } else {
        setDeptName((String)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case REC_DATE:
      if (value == null) {
        unsetRecDate();
      } else {
        setRecDate((String)value);
      }
      break;

    case REC_MONEY:
      if (value == null) {
        unsetRecMoney();
      } else {
        setRecMoney((Double)value);
      }
      break;

    case CANCEL_GUARANTEE_DATE:
      if (value == null) {
        unsetCancelGuaranteeDate();
      } else {
        setCancelGuaranteeDate((String)value);
      }
      break;

    case PAY_DATE:
      if (value == null) {
        unsetPayDate();
      } else {
        setPayDate((String)value);
      }
      break;

    case BANK_LEND_TOTAL_MONEY:
      if (value == null) {
        unsetBankLendTotalMoney();
      } else {
        setBankLendTotalMoney((Double)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case CONFIRM_MONEY:
      if (value == null) {
        unsetConfirmMoney();
      } else {
        setConfirmMoney((Double)value);
      }
      break;

    case IS_CONFIRM:
      if (value == null) {
        unsetIsConfirm();
      } else {
        setIsConfirm((Integer)value);
      }
      break;

    case CONFIRM_DATE:
      if (value == null) {
        unsetConfirmDate();
      } else {
        setConfirmDate((String)value);
      }
      break;

    case REAL_USE_DAYS:
      if (value == null) {
        unsetRealUseDays();
      } else {
        setRealUseDays((Integer)value);
      }
      break;

    case REPAYMENT_MONEY:
      if (value == null) {
        unsetRepaymentMoney();
      } else {
        setRepaymentMoney((Double)value);
      }
      break;

    case FEE_RATE:
      if (value == null) {
        unsetFeeRate();
      } else {
        setFeeRate((Double)value);
      }
      break;

    case REPAYMENT_DATE:
      if (value == null) {
        unsetRepaymentDate();
      } else {
        setRepaymentDate((String)value);
      }
      break;

    case PROJECT_LIST:
      if (value == null) {
        unsetProjectList();
      } else {
        setProjectList((List<Integer>)value);
      }
      break;

    case BATCH_REFUND_FEE_MAP_LIST:
      if (value == null) {
        unsetBatchRefundFeeMapList();
      } else {
        setBatchRefundFeeMapList((List<RefundFeeMap>)value);
      }
      break;

    case BATCH_REFUND_FEE_MAIN_ID:
      if (value == null) {
        unsetBatchRefundFeeMainId();
      } else {
        setBatchRefundFeeMainId((Integer)value);
      }
      break;

    case BATCH_NAME:
      if (value == null) {
        unsetBatchName();
      } else {
        setBatchName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case APPLY_STATUS:
      return Integer.valueOf(getApplyStatus());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case TRADE_WAY:
      return getTradeWay();

    case TRADE_DATE:
      return getTradeDate();

    case MORTGAGE_NUMBER:
      return getMortgageNumber();

    case CUSTOMER_ID:
      return Integer.valueOf(getCustomerId());

    case OLD_HOME:
      return getOldHome();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case HOME_NAME:
      return getHomeName();

    case GUARANTEE_MONEY:
      return Double.valueOf(getGuaranteeMoney());

    case EXTRACT_MONEY:
      return Double.valueOf(getExtractMoney());

    case LEND_BANK:
      return getLendBank();

    case FORECLOSURE_FLOOR_BANK:
      return getForeclosureFloorBank();

    case BANK_LEND_TOTAL_AMOUNT:
      return Double.valueOf(getBankLendTotalAmount());

    case DEPT_ID:
      return Integer.valueOf(getDeptId());

    case REC_GUARANTEE_MONEY:
      return Double.valueOf(getRecGuaranteeMoney());

    case FORECLOSURE_FLOOR_MONEY:
      return Double.valueOf(getForeclosureFloorMoney());

    case DEFAULT_INTEREST:
      return Double.valueOf(getDefaultInterest());

    case PAY_TOTAL:
      return Double.valueOf(getPayTotal());

    case RETURN_FEE:
      return Double.valueOf(getReturnFee());

    case REC_ACCOUNT_NAME:
      return getRecAccountName();

    case BANK_NAME:
      return getBankName();

    case REC_ACCOUNT:
      return getRecAccount();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case CREATER_DATE:
      return getCreaterDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PRODUCT_NAME:
      return getProductName();

    case CUSTOMER_NAME:
      return getCustomerName();

    case PM_USER_NAME:
      return getPmUserName();

    case DEPT_NAME:
      return getDeptName();

    case INTEREST:
      return Double.valueOf(getInterest());

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case REC_DATE:
      return getRecDate();

    case REC_MONEY:
      return Double.valueOf(getRecMoney());

    case CANCEL_GUARANTEE_DATE:
      return getCancelGuaranteeDate();

    case PAY_DATE:
      return getPayDate();

    case BANK_LEND_TOTAL_MONEY:
      return Double.valueOf(getBankLendTotalMoney());

    case TYPE:
      return Integer.valueOf(getType());

    case CONFIRM_MONEY:
      return Double.valueOf(getConfirmMoney());

    case IS_CONFIRM:
      return Integer.valueOf(getIsConfirm());

    case CONFIRM_DATE:
      return getConfirmDate();

    case REAL_USE_DAYS:
      return Integer.valueOf(getRealUseDays());

    case REPAYMENT_MONEY:
      return Double.valueOf(getRepaymentMoney());

    case FEE_RATE:
      return Double.valueOf(getFeeRate());

    case REPAYMENT_DATE:
      return getRepaymentDate();

    case PROJECT_LIST:
      return getProjectList();

    case BATCH_REFUND_FEE_MAP_LIST:
      return getBatchRefundFeeMapList();

    case BATCH_REFUND_FEE_MAIN_ID:
      return Integer.valueOf(getBatchRefundFeeMainId());

    case BATCH_NAME:
      return getBatchName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case APPLY_STATUS:
      return isSetApplyStatus();
    case PRODUCT_ID:
      return isSetProductId();
    case TRADE_WAY:
      return isSetTradeWay();
    case TRADE_DATE:
      return isSetTradeDate();
    case MORTGAGE_NUMBER:
      return isSetMortgageNumber();
    case CUSTOMER_ID:
      return isSetCustomerId();
    case OLD_HOME:
      return isSetOldHome();
    case PM_USER_ID:
      return isSetPmUserId();
    case HOME_NAME:
      return isSetHomeName();
    case GUARANTEE_MONEY:
      return isSetGuaranteeMoney();
    case EXTRACT_MONEY:
      return isSetExtractMoney();
    case LEND_BANK:
      return isSetLendBank();
    case FORECLOSURE_FLOOR_BANK:
      return isSetForeclosureFloorBank();
    case BANK_LEND_TOTAL_AMOUNT:
      return isSetBankLendTotalAmount();
    case DEPT_ID:
      return isSetDeptId();
    case REC_GUARANTEE_MONEY:
      return isSetRecGuaranteeMoney();
    case FORECLOSURE_FLOOR_MONEY:
      return isSetForeclosureFloorMoney();
    case DEFAULT_INTEREST:
      return isSetDefaultInterest();
    case PAY_TOTAL:
      return isSetPayTotal();
    case RETURN_FEE:
      return isSetReturnFee();
    case REC_ACCOUNT_NAME:
      return isSetRecAccountName();
    case BANK_NAME:
      return isSetBankName();
    case REC_ACCOUNT:
      return isSetRecAccount();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case CREATER_DATE:
      return isSetCreaterDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PRODUCT_NAME:
      return isSetProductName();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case PM_USER_NAME:
      return isSetPmUserName();
    case DEPT_NAME:
      return isSetDeptName();
    case INTEREST:
      return isSetInterest();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case REC_DATE:
      return isSetRecDate();
    case REC_MONEY:
      return isSetRecMoney();
    case CANCEL_GUARANTEE_DATE:
      return isSetCancelGuaranteeDate();
    case PAY_DATE:
      return isSetPayDate();
    case BANK_LEND_TOTAL_MONEY:
      return isSetBankLendTotalMoney();
    case TYPE:
      return isSetType();
    case CONFIRM_MONEY:
      return isSetConfirmMoney();
    case IS_CONFIRM:
      return isSetIsConfirm();
    case CONFIRM_DATE:
      return isSetConfirmDate();
    case REAL_USE_DAYS:
      return isSetRealUseDays();
    case REPAYMENT_MONEY:
      return isSetRepaymentMoney();
    case FEE_RATE:
      return isSetFeeRate();
    case REPAYMENT_DATE:
      return isSetRepaymentDate();
    case PROJECT_LIST:
      return isSetProjectList();
    case BATCH_REFUND_FEE_MAP_LIST:
      return isSetBatchRefundFeeMapList();
    case BATCH_REFUND_FEE_MAIN_ID:
      return isSetBatchRefundFeeMainId();
    case BATCH_NAME:
      return isSetBatchName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundFeeDTO)
      return this.equals((RefundFeeDTO)that);
    return false;
  }

  public boolean equals(RefundFeeDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_applyStatus = true;
    boolean that_present_applyStatus = true;
    if (this_present_applyStatus || that_present_applyStatus) {
      if (!(this_present_applyStatus && that_present_applyStatus))
        return false;
      if (this.applyStatus != that.applyStatus)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_tradeWay = true && this.isSetTradeWay();
    boolean that_present_tradeWay = true && that.isSetTradeWay();
    if (this_present_tradeWay || that_present_tradeWay) {
      if (!(this_present_tradeWay && that_present_tradeWay))
        return false;
      if (!this.tradeWay.equals(that.tradeWay))
        return false;
    }

    boolean this_present_tradeDate = true && this.isSetTradeDate();
    boolean that_present_tradeDate = true && that.isSetTradeDate();
    if (this_present_tradeDate || that_present_tradeDate) {
      if (!(this_present_tradeDate && that_present_tradeDate))
        return false;
      if (!this.tradeDate.equals(that.tradeDate))
        return false;
    }

    boolean this_present_mortgageNumber = true && this.isSetMortgageNumber();
    boolean that_present_mortgageNumber = true && that.isSetMortgageNumber();
    if (this_present_mortgageNumber || that_present_mortgageNumber) {
      if (!(this_present_mortgageNumber && that_present_mortgageNumber))
        return false;
      if (!this.mortgageNumber.equals(that.mortgageNumber))
        return false;
    }

    boolean this_present_customerId = true;
    boolean that_present_customerId = true;
    if (this_present_customerId || that_present_customerId) {
      if (!(this_present_customerId && that_present_customerId))
        return false;
      if (this.customerId != that.customerId)
        return false;
    }

    boolean this_present_oldHome = true && this.isSetOldHome();
    boolean that_present_oldHome = true && that.isSetOldHome();
    if (this_present_oldHome || that_present_oldHome) {
      if (!(this_present_oldHome && that_present_oldHome))
        return false;
      if (!this.oldHome.equals(that.oldHome))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_homeName = true && this.isSetHomeName();
    boolean that_present_homeName = true && that.isSetHomeName();
    if (this_present_homeName || that_present_homeName) {
      if (!(this_present_homeName && that_present_homeName))
        return false;
      if (!this.homeName.equals(that.homeName))
        return false;
    }

    boolean this_present_guaranteeMoney = true;
    boolean that_present_guaranteeMoney = true;
    if (this_present_guaranteeMoney || that_present_guaranteeMoney) {
      if (!(this_present_guaranteeMoney && that_present_guaranteeMoney))
        return false;
      if (this.guaranteeMoney != that.guaranteeMoney)
        return false;
    }

    boolean this_present_extractMoney = true;
    boolean that_present_extractMoney = true;
    if (this_present_extractMoney || that_present_extractMoney) {
      if (!(this_present_extractMoney && that_present_extractMoney))
        return false;
      if (this.extractMoney != that.extractMoney)
        return false;
    }

    boolean this_present_lendBank = true && this.isSetLendBank();
    boolean that_present_lendBank = true && that.isSetLendBank();
    if (this_present_lendBank || that_present_lendBank) {
      if (!(this_present_lendBank && that_present_lendBank))
        return false;
      if (!this.lendBank.equals(that.lendBank))
        return false;
    }

    boolean this_present_foreclosureFloorBank = true && this.isSetForeclosureFloorBank();
    boolean that_present_foreclosureFloorBank = true && that.isSetForeclosureFloorBank();
    if (this_present_foreclosureFloorBank || that_present_foreclosureFloorBank) {
      if (!(this_present_foreclosureFloorBank && that_present_foreclosureFloorBank))
        return false;
      if (!this.foreclosureFloorBank.equals(that.foreclosureFloorBank))
        return false;
    }

    boolean this_present_bankLendTotalAmount = true;
    boolean that_present_bankLendTotalAmount = true;
    if (this_present_bankLendTotalAmount || that_present_bankLendTotalAmount) {
      if (!(this_present_bankLendTotalAmount && that_present_bankLendTotalAmount))
        return false;
      if (this.bankLendTotalAmount != that.bankLendTotalAmount)
        return false;
    }

    boolean this_present_deptId = true;
    boolean that_present_deptId = true;
    if (this_present_deptId || that_present_deptId) {
      if (!(this_present_deptId && that_present_deptId))
        return false;
      if (this.deptId != that.deptId)
        return false;
    }

    boolean this_present_recGuaranteeMoney = true;
    boolean that_present_recGuaranteeMoney = true;
    if (this_present_recGuaranteeMoney || that_present_recGuaranteeMoney) {
      if (!(this_present_recGuaranteeMoney && that_present_recGuaranteeMoney))
        return false;
      if (this.recGuaranteeMoney != that.recGuaranteeMoney)
        return false;
    }

    boolean this_present_foreclosureFloorMoney = true;
    boolean that_present_foreclosureFloorMoney = true;
    if (this_present_foreclosureFloorMoney || that_present_foreclosureFloorMoney) {
      if (!(this_present_foreclosureFloorMoney && that_present_foreclosureFloorMoney))
        return false;
      if (this.foreclosureFloorMoney != that.foreclosureFloorMoney)
        return false;
    }

    boolean this_present_defaultInterest = true;
    boolean that_present_defaultInterest = true;
    if (this_present_defaultInterest || that_present_defaultInterest) {
      if (!(this_present_defaultInterest && that_present_defaultInterest))
        return false;
      if (this.defaultInterest != that.defaultInterest)
        return false;
    }

    boolean this_present_payTotal = true;
    boolean that_present_payTotal = true;
    if (this_present_payTotal || that_present_payTotal) {
      if (!(this_present_payTotal && that_present_payTotal))
        return false;
      if (this.payTotal != that.payTotal)
        return false;
    }

    boolean this_present_returnFee = true;
    boolean that_present_returnFee = true;
    if (this_present_returnFee || that_present_returnFee) {
      if (!(this_present_returnFee && that_present_returnFee))
        return false;
      if (this.returnFee != that.returnFee)
        return false;
    }

    boolean this_present_recAccountName = true && this.isSetRecAccountName();
    boolean that_present_recAccountName = true && that.isSetRecAccountName();
    if (this_present_recAccountName || that_present_recAccountName) {
      if (!(this_present_recAccountName && that_present_recAccountName))
        return false;
      if (!this.recAccountName.equals(that.recAccountName))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_recAccount = true && this.isSetRecAccount();
    boolean that_present_recAccount = true && that.isSetRecAccount();
    if (this_present_recAccount || that_present_recAccount) {
      if (!(this_present_recAccount && that_present_recAccount))
        return false;
      if (!this.recAccount.equals(that.recAccount))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_deptName = true && this.isSetDeptName();
    boolean that_present_deptName = true && that.isSetDeptName();
    if (this_present_deptName || that_present_deptName) {
      if (!(this_present_deptName && that_present_deptName))
        return false;
      if (!this.deptName.equals(that.deptName))
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_recDate = true && this.isSetRecDate();
    boolean that_present_recDate = true && that.isSetRecDate();
    if (this_present_recDate || that_present_recDate) {
      if (!(this_present_recDate && that_present_recDate))
        return false;
      if (!this.recDate.equals(that.recDate))
        return false;
    }

    boolean this_present_recMoney = true;
    boolean that_present_recMoney = true;
    if (this_present_recMoney || that_present_recMoney) {
      if (!(this_present_recMoney && that_present_recMoney))
        return false;
      if (this.recMoney != that.recMoney)
        return false;
    }

    boolean this_present_cancelGuaranteeDate = true && this.isSetCancelGuaranteeDate();
    boolean that_present_cancelGuaranteeDate = true && that.isSetCancelGuaranteeDate();
    if (this_present_cancelGuaranteeDate || that_present_cancelGuaranteeDate) {
      if (!(this_present_cancelGuaranteeDate && that_present_cancelGuaranteeDate))
        return false;
      if (!this.cancelGuaranteeDate.equals(that.cancelGuaranteeDate))
        return false;
    }

    boolean this_present_payDate = true && this.isSetPayDate();
    boolean that_present_payDate = true && that.isSetPayDate();
    if (this_present_payDate || that_present_payDate) {
      if (!(this_present_payDate && that_present_payDate))
        return false;
      if (!this.payDate.equals(that.payDate))
        return false;
    }

    boolean this_present_bankLendTotalMoney = true;
    boolean that_present_bankLendTotalMoney = true;
    if (this_present_bankLendTotalMoney || that_present_bankLendTotalMoney) {
      if (!(this_present_bankLendTotalMoney && that_present_bankLendTotalMoney))
        return false;
      if (this.bankLendTotalMoney != that.bankLendTotalMoney)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_confirmMoney = true;
    boolean that_present_confirmMoney = true;
    if (this_present_confirmMoney || that_present_confirmMoney) {
      if (!(this_present_confirmMoney && that_present_confirmMoney))
        return false;
      if (this.confirmMoney != that.confirmMoney)
        return false;
    }

    boolean this_present_isConfirm = true;
    boolean that_present_isConfirm = true;
    if (this_present_isConfirm || that_present_isConfirm) {
      if (!(this_present_isConfirm && that_present_isConfirm))
        return false;
      if (this.isConfirm != that.isConfirm)
        return false;
    }

    boolean this_present_confirmDate = true && this.isSetConfirmDate();
    boolean that_present_confirmDate = true && that.isSetConfirmDate();
    if (this_present_confirmDate || that_present_confirmDate) {
      if (!(this_present_confirmDate && that_present_confirmDate))
        return false;
      if (!this.confirmDate.equals(that.confirmDate))
        return false;
    }

    boolean this_present_realUseDays = true;
    boolean that_present_realUseDays = true;
    if (this_present_realUseDays || that_present_realUseDays) {
      if (!(this_present_realUseDays && that_present_realUseDays))
        return false;
      if (this.realUseDays != that.realUseDays)
        return false;
    }

    boolean this_present_repaymentMoney = true;
    boolean that_present_repaymentMoney = true;
    if (this_present_repaymentMoney || that_present_repaymentMoney) {
      if (!(this_present_repaymentMoney && that_present_repaymentMoney))
        return false;
      if (this.repaymentMoney != that.repaymentMoney)
        return false;
    }

    boolean this_present_feeRate = true;
    boolean that_present_feeRate = true;
    if (this_present_feeRate || that_present_feeRate) {
      if (!(this_present_feeRate && that_present_feeRate))
        return false;
      if (this.feeRate != that.feeRate)
        return false;
    }

    boolean this_present_repaymentDate = true && this.isSetRepaymentDate();
    boolean that_present_repaymentDate = true && that.isSetRepaymentDate();
    if (this_present_repaymentDate || that_present_repaymentDate) {
      if (!(this_present_repaymentDate && that_present_repaymentDate))
        return false;
      if (!this.repaymentDate.equals(that.repaymentDate))
        return false;
    }

    boolean this_present_projectList = true && this.isSetProjectList();
    boolean that_present_projectList = true && that.isSetProjectList();
    if (this_present_projectList || that_present_projectList) {
      if (!(this_present_projectList && that_present_projectList))
        return false;
      if (!this.projectList.equals(that.projectList))
        return false;
    }

    boolean this_present_batchRefundFeeMapList = true && this.isSetBatchRefundFeeMapList();
    boolean that_present_batchRefundFeeMapList = true && that.isSetBatchRefundFeeMapList();
    if (this_present_batchRefundFeeMapList || that_present_batchRefundFeeMapList) {
      if (!(this_present_batchRefundFeeMapList && that_present_batchRefundFeeMapList))
        return false;
      if (!this.batchRefundFeeMapList.equals(that.batchRefundFeeMapList))
        return false;
    }

    boolean this_present_batchRefundFeeMainId = true;
    boolean that_present_batchRefundFeeMainId = true;
    if (this_present_batchRefundFeeMainId || that_present_batchRefundFeeMainId) {
      if (!(this_present_batchRefundFeeMainId && that_present_batchRefundFeeMainId))
        return false;
      if (this.batchRefundFeeMainId != that.batchRefundFeeMainId)
        return false;
    }

    boolean this_present_batchName = true && this.isSetBatchName();
    boolean that_present_batchName = true && that.isSetBatchName();
    if (this_present_batchName || that_present_batchName) {
      if (!(this_present_batchName && that_present_batchName))
        return false;
      if (!this.batchName.equals(that.batchName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_applyStatus = true;
    list.add(present_applyStatus);
    if (present_applyStatus)
      list.add(applyStatus);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_tradeWay = true && (isSetTradeWay());
    list.add(present_tradeWay);
    if (present_tradeWay)
      list.add(tradeWay);

    boolean present_tradeDate = true && (isSetTradeDate());
    list.add(present_tradeDate);
    if (present_tradeDate)
      list.add(tradeDate);

    boolean present_mortgageNumber = true && (isSetMortgageNumber());
    list.add(present_mortgageNumber);
    if (present_mortgageNumber)
      list.add(mortgageNumber);

    boolean present_customerId = true;
    list.add(present_customerId);
    if (present_customerId)
      list.add(customerId);

    boolean present_oldHome = true && (isSetOldHome());
    list.add(present_oldHome);
    if (present_oldHome)
      list.add(oldHome);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_homeName = true && (isSetHomeName());
    list.add(present_homeName);
    if (present_homeName)
      list.add(homeName);

    boolean present_guaranteeMoney = true;
    list.add(present_guaranteeMoney);
    if (present_guaranteeMoney)
      list.add(guaranteeMoney);

    boolean present_extractMoney = true;
    list.add(present_extractMoney);
    if (present_extractMoney)
      list.add(extractMoney);

    boolean present_lendBank = true && (isSetLendBank());
    list.add(present_lendBank);
    if (present_lendBank)
      list.add(lendBank);

    boolean present_foreclosureFloorBank = true && (isSetForeclosureFloorBank());
    list.add(present_foreclosureFloorBank);
    if (present_foreclosureFloorBank)
      list.add(foreclosureFloorBank);

    boolean present_bankLendTotalAmount = true;
    list.add(present_bankLendTotalAmount);
    if (present_bankLendTotalAmount)
      list.add(bankLendTotalAmount);

    boolean present_deptId = true;
    list.add(present_deptId);
    if (present_deptId)
      list.add(deptId);

    boolean present_recGuaranteeMoney = true;
    list.add(present_recGuaranteeMoney);
    if (present_recGuaranteeMoney)
      list.add(recGuaranteeMoney);

    boolean present_foreclosureFloorMoney = true;
    list.add(present_foreclosureFloorMoney);
    if (present_foreclosureFloorMoney)
      list.add(foreclosureFloorMoney);

    boolean present_defaultInterest = true;
    list.add(present_defaultInterest);
    if (present_defaultInterest)
      list.add(defaultInterest);

    boolean present_payTotal = true;
    list.add(present_payTotal);
    if (present_payTotal)
      list.add(payTotal);

    boolean present_returnFee = true;
    list.add(present_returnFee);
    if (present_returnFee)
      list.add(returnFee);

    boolean present_recAccountName = true && (isSetRecAccountName());
    list.add(present_recAccountName);
    if (present_recAccountName)
      list.add(recAccountName);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_recAccount = true && (isSetRecAccount());
    list.add(present_recAccount);
    if (present_recAccount)
      list.add(recAccount);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_customerName = true && (isSetCustomerName());
    list.add(present_customerName);
    if (present_customerName)
      list.add(customerName);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_deptName = true && (isSetDeptName());
    list.add(present_deptName);
    if (present_deptName)
      list.add(deptName);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_recDate = true && (isSetRecDate());
    list.add(present_recDate);
    if (present_recDate)
      list.add(recDate);

    boolean present_recMoney = true;
    list.add(present_recMoney);
    if (present_recMoney)
      list.add(recMoney);

    boolean present_cancelGuaranteeDate = true && (isSetCancelGuaranteeDate());
    list.add(present_cancelGuaranteeDate);
    if (present_cancelGuaranteeDate)
      list.add(cancelGuaranteeDate);

    boolean present_payDate = true && (isSetPayDate());
    list.add(present_payDate);
    if (present_payDate)
      list.add(payDate);

    boolean present_bankLendTotalMoney = true;
    list.add(present_bankLendTotalMoney);
    if (present_bankLendTotalMoney)
      list.add(bankLendTotalMoney);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_confirmMoney = true;
    list.add(present_confirmMoney);
    if (present_confirmMoney)
      list.add(confirmMoney);

    boolean present_isConfirm = true;
    list.add(present_isConfirm);
    if (present_isConfirm)
      list.add(isConfirm);

    boolean present_confirmDate = true && (isSetConfirmDate());
    list.add(present_confirmDate);
    if (present_confirmDate)
      list.add(confirmDate);

    boolean present_realUseDays = true;
    list.add(present_realUseDays);
    if (present_realUseDays)
      list.add(realUseDays);

    boolean present_repaymentMoney = true;
    list.add(present_repaymentMoney);
    if (present_repaymentMoney)
      list.add(repaymentMoney);

    boolean present_feeRate = true;
    list.add(present_feeRate);
    if (present_feeRate)
      list.add(feeRate);

    boolean present_repaymentDate = true && (isSetRepaymentDate());
    list.add(present_repaymentDate);
    if (present_repaymentDate)
      list.add(repaymentDate);

    boolean present_projectList = true && (isSetProjectList());
    list.add(present_projectList);
    if (present_projectList)
      list.add(projectList);

    boolean present_batchRefundFeeMapList = true && (isSetBatchRefundFeeMapList());
    list.add(present_batchRefundFeeMapList);
    if (present_batchRefundFeeMapList)
      list.add(batchRefundFeeMapList);

    boolean present_batchRefundFeeMainId = true;
    list.add(present_batchRefundFeeMainId);
    if (present_batchRefundFeeMainId)
      list.add(batchRefundFeeMainId);

    boolean present_batchName = true && (isSetBatchName());
    list.add(present_batchName);
    if (present_batchName)
      list.add(batchName);

    return list.hashCode();
  }

  @Override
  public int compareTo(RefundFeeDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatus()).compareTo(other.isSetApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatus, other.applyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeWay()).compareTo(other.isSetTradeWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeWay, other.tradeWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDate()).compareTo(other.isSetTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDate, other.tradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageNumber()).compareTo(other.isSetMortgageNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageNumber, other.mortgageNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldHome()).compareTo(other.isSetOldHome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldHome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldHome, other.oldHome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeName()).compareTo(other.isSetHomeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeName, other.homeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteeMoney()).compareTo(other.isSetGuaranteeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteeMoney, other.guaranteeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtractMoney()).compareTo(other.isSetExtractMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtractMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extractMoney, other.extractMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLendBank()).compareTo(other.isSetLendBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLendBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lendBank, other.lendBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureFloorBank()).compareTo(other.isSetForeclosureFloorBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureFloorBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureFloorBank, other.foreclosureFloorBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankLendTotalAmount()).compareTo(other.isSetBankLendTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankLendTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankLendTotalAmount, other.bankLendTotalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptId()).compareTo(other.isSetDeptId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptId, other.deptId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecGuaranteeMoney()).compareTo(other.isSetRecGuaranteeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecGuaranteeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recGuaranteeMoney, other.recGuaranteeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureFloorMoney()).compareTo(other.isSetForeclosureFloorMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureFloorMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureFloorMoney, other.foreclosureFloorMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultInterest()).compareTo(other.isSetDefaultInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultInterest, other.defaultInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayTotal()).compareTo(other.isSetPayTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTotal, other.payTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFee()).compareTo(other.isSetReturnFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnFee, other.returnFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccountName()).compareTo(other.isSetRecAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccountName, other.recAccountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccount()).compareTo(other.isSetRecAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccount, other.recAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptName()).compareTo(other.isSetDeptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptName, other.deptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecDate()).compareTo(other.isSetRecDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recDate, other.recDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecMoney()).compareTo(other.isSetRecMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recMoney, other.recMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelGuaranteeDate()).compareTo(other.isSetCancelGuaranteeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelGuaranteeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelGuaranteeDate, other.cancelGuaranteeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayDate()).compareTo(other.isSetPayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payDate, other.payDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankLendTotalMoney()).compareTo(other.isSetBankLendTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankLendTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankLendTotalMoney, other.bankLendTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmMoney()).compareTo(other.isSetConfirmMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmMoney, other.confirmMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsConfirm()).compareTo(other.isSetIsConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isConfirm, other.isConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmDate()).compareTo(other.isSetConfirmDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmDate, other.confirmDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealUseDays()).compareTo(other.isSetRealUseDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealUseDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realUseDays, other.realUseDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentMoney()).compareTo(other.isSetRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentMoney, other.repaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeRate()).compareTo(other.isSetFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeRate, other.feeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDate()).compareTo(other.isSetRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDate, other.repaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectList()).compareTo(other.isSetProjectList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectList, other.projectList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchRefundFeeMapList()).compareTo(other.isSetBatchRefundFeeMapList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchRefundFeeMapList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchRefundFeeMapList, other.batchRefundFeeMapList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchRefundFeeMainId()).compareTo(other.isSetBatchRefundFeeMainId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchRefundFeeMainId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchRefundFeeMainId, other.batchRefundFeeMainId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchName()).compareTo(other.isSetBatchName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchName, other.batchName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundFeeDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatus:");
    sb.append(this.applyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeWay:");
    if (this.tradeWay == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tradeDate:");
    if (this.tradeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.tradeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageNumber:");
    if (this.mortgageNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerId:");
    sb.append(this.customerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldHome:");
    if (this.oldHome == null) {
      sb.append("null");
    } else {
      sb.append(this.oldHome);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeName:");
    if (this.homeName == null) {
      sb.append("null");
    } else {
      sb.append(this.homeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteeMoney:");
    sb.append(this.guaranteeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extractMoney:");
    sb.append(this.extractMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lendBank:");
    if (this.lendBank == null) {
      sb.append("null");
    } else {
      sb.append(this.lendBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureFloorBank:");
    if (this.foreclosureFloorBank == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureFloorBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankLendTotalAmount:");
    sb.append(this.bankLendTotalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptId:");
    sb.append(this.deptId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recGuaranteeMoney:");
    sb.append(this.recGuaranteeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureFloorMoney:");
    sb.append(this.foreclosureFloorMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultInterest:");
    sb.append(this.defaultInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payTotal:");
    sb.append(this.payTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnFee:");
    sb.append(this.returnFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccountName:");
    if (this.recAccountName == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccountName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccount:");
    if (this.recAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptName:");
    if (this.deptName == null) {
      sb.append("null");
    } else {
      sb.append(this.deptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recDate:");
    if (this.recDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recMoney:");
    sb.append(this.recMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelGuaranteeDate:");
    if (this.cancelGuaranteeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelGuaranteeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payDate:");
    if (this.payDate == null) {
      sb.append("null");
    } else {
      sb.append(this.payDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankLendTotalMoney:");
    sb.append(this.bankLendTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmMoney:");
    sb.append(this.confirmMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isConfirm:");
    sb.append(this.isConfirm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmDate:");
    if (this.confirmDate == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realUseDays:");
    sb.append(this.realUseDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentMoney:");
    sb.append(this.repaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeRate:");
    sb.append(this.feeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDate:");
    if (this.repaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectList:");
    if (this.projectList == null) {
      sb.append("null");
    } else {
      sb.append(this.projectList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchRefundFeeMapList:");
    if (this.batchRefundFeeMapList == null) {
      sb.append("null");
    } else {
      sb.append(this.batchRefundFeeMapList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchRefundFeeMainId:");
    sb.append(this.batchRefundFeeMainId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchName:");
    if (this.batchName == null) {
      sb.append("null");
    } else {
      sb.append(this.batchName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundFeeDTOStandardSchemeFactory implements SchemeFactory {
    public RefundFeeDTOStandardScheme getScheme() {
      return new RefundFeeDTOStandardScheme();
    }
  }

  private static class RefundFeeDTOStandardScheme extends StandardScheme<RefundFeeDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundFeeDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyStatus = iprot.readI32();
              struct.setApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeWay = iprot.readString();
              struct.setTradeWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDate = iprot.readString();
              struct.setTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MORTGAGE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageNumber = iprot.readString();
              struct.setMortgageNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUSTOMER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.customerId = iprot.readI32();
              struct.setCustomerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OLD_HOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldHome = iprot.readString();
              struct.setOldHomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HOME_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeName = iprot.readString();
              struct.setHomeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GUARANTEE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.guaranteeMoney = iprot.readDouble();
              struct.setGuaranteeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXTRACT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extractMoney = iprot.readDouble();
              struct.setExtractMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LEND_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lendBank = iprot.readString();
              struct.setLendBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FORECLOSURE_FLOOR_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureFloorBank = iprot.readString();
              struct.setForeclosureFloorBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BANK_LEND_TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankLendTotalAmount = iprot.readDouble();
              struct.setBankLendTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DEPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deptId = iprot.readI32();
              struct.setDeptIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REC_GUARANTEE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recGuaranteeMoney = iprot.readDouble();
              struct.setRecGuaranteeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FORECLOSURE_FLOOR_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.foreclosureFloorMoney = iprot.readDouble();
              struct.setForeclosureFloorMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DEFAULT_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultInterest = iprot.readDouble();
              struct.setDefaultInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PAY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payTotal = iprot.readDouble();
              struct.setPayTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // RETURN_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.returnFee = iprot.readDouble();
              struct.setReturnFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // REC_ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccountName = iprot.readString();
              struct.setRecAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REC_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccount = iprot.readString();
              struct.setRecAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list144.size);
                int _elem145;
                for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                {
                  _elem145 = iprot.readI32();
                  struct.userIds.add(_elem145);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deptName = iprot.readString();
              struct.setDeptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // REC_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recDate = iprot.readString();
              struct.setRecDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // REC_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recMoney = iprot.readDouble();
              struct.setRecMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // CANCEL_GUARANTEE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelGuaranteeDate = iprot.readString();
              struct.setCancelGuaranteeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // PAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payDate = iprot.readString();
              struct.setPayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // BANK_LEND_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankLendTotalMoney = iprot.readDouble();
              struct.setBankLendTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // CONFIRM_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confirmMoney = iprot.readDouble();
              struct.setConfirmMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // IS_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isConfirm = iprot.readI32();
              struct.setIsConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // CONFIRM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirmDate = iprot.readString();
              struct.setConfirmDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // REAL_USE_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.realUseDays = iprot.readI32();
              struct.setRealUseDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repaymentMoney = iprot.readDouble();
              struct.setRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feeRate = iprot.readDouble();
              struct.setFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentDate = iprot.readString();
              struct.setRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // PROJECT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                struct.projectList = new ArrayList<Integer>(_list147.size);
                int _elem148;
                for (int _i149 = 0; _i149 < _list147.size; ++_i149)
                {
                  _elem148 = iprot.readI32();
                  struct.projectList.add(_elem148);
                }
                iprot.readListEnd();
              }
              struct.setProjectListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // BATCH_REFUND_FEE_MAP_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.batchRefundFeeMapList = new ArrayList<RefundFeeMap>(_list150.size);
                RefundFeeMap _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                {
                  _elem151 = new RefundFeeMap();
                  _elem151.read(iprot);
                  struct.batchRefundFeeMapList.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setBatchRefundFeeMapListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // BATCH_REFUND_FEE_MAIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batchRefundFeeMainId = iprot.readI32();
              struct.setBatchRefundFeeMainIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // BATCH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batchName = iprot.readString();
              struct.setBatchNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundFeeDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.tradeWay != null) {
        oprot.writeFieldBegin(TRADE_WAY_FIELD_DESC);
        oprot.writeString(struct.tradeWay);
        oprot.writeFieldEnd();
      }
      if (struct.tradeDate != null) {
        oprot.writeFieldBegin(TRADE_DATE_FIELD_DESC);
        oprot.writeString(struct.tradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageNumber != null) {
        oprot.writeFieldBegin(MORTGAGE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.mortgageNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
      oprot.writeI32(struct.customerId);
      oprot.writeFieldEnd();
      if (struct.oldHome != null) {
        oprot.writeFieldBegin(OLD_HOME_FIELD_DESC);
        oprot.writeString(struct.oldHome);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.homeName != null) {
        oprot.writeFieldBegin(HOME_NAME_FIELD_DESC);
        oprot.writeString(struct.homeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GUARANTEE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.guaranteeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTRACT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.extractMoney);
      oprot.writeFieldEnd();
      if (struct.lendBank != null) {
        oprot.writeFieldBegin(LEND_BANK_FIELD_DESC);
        oprot.writeString(struct.lendBank);
        oprot.writeFieldEnd();
      }
      if (struct.foreclosureFloorBank != null) {
        oprot.writeFieldBegin(FORECLOSURE_FLOOR_BANK_FIELD_DESC);
        oprot.writeString(struct.foreclosureFloorBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_LEND_TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.bankLendTotalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEPT_ID_FIELD_DESC);
      oprot.writeI32(struct.deptId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_GUARANTEE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.recGuaranteeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORECLOSURE_FLOOR_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.foreclosureFloorMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFAULT_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.defaultInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.payTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETURN_FEE_FIELD_DESC);
      oprot.writeDouble(struct.returnFee);
      oprot.writeFieldEnd();
      if (struct.recAccountName != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_NAME_FIELD_DESC);
        oprot.writeString(struct.recAccountName);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.recAccount != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.recAccount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter153 : struct.userIds)
          {
            oprot.writeI32(_iter153);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.deptName != null) {
        oprot.writeFieldBegin(DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.deptName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      if (struct.recDate != null) {
        oprot.writeFieldBegin(REC_DATE_FIELD_DESC);
        oprot.writeString(struct.recDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REC_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.recMoney);
      oprot.writeFieldEnd();
      if (struct.cancelGuaranteeDate != null) {
        oprot.writeFieldBegin(CANCEL_GUARANTEE_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelGuaranteeDate);
        oprot.writeFieldEnd();
      }
      if (struct.payDate != null) {
        oprot.writeFieldBegin(PAY_DATE_FIELD_DESC);
        oprot.writeString(struct.payDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_LEND_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.bankLendTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.confirmMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CONFIRM_FIELD_DESC);
      oprot.writeI32(struct.isConfirm);
      oprot.writeFieldEnd();
      if (struct.confirmDate != null) {
        oprot.writeFieldBegin(CONFIRM_DATE_FIELD_DESC);
        oprot.writeString(struct.confirmDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_USE_DAYS_FIELD_DESC);
      oprot.writeI32(struct.realUseDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.repaymentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.feeRate);
      oprot.writeFieldEnd();
      if (struct.repaymentDate != null) {
        oprot.writeFieldBegin(REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.repaymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.projectList != null) {
        oprot.writeFieldBegin(PROJECT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.projectList.size()));
          for (int _iter154 : struct.projectList)
          {
            oprot.writeI32(_iter154);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.batchRefundFeeMapList != null) {
        oprot.writeFieldBegin(BATCH_REFUND_FEE_MAP_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.batchRefundFeeMapList.size()));
          for (RefundFeeMap _iter155 : struct.batchRefundFeeMapList)
          {
            _iter155.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BATCH_REFUND_FEE_MAIN_ID_FIELD_DESC);
      oprot.writeI32(struct.batchRefundFeeMainId);
      oprot.writeFieldEnd();
      if (struct.batchName != null) {
        oprot.writeFieldBegin(BATCH_NAME_FIELD_DESC);
        oprot.writeString(struct.batchName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundFeeDTOTupleSchemeFactory implements SchemeFactory {
    public RefundFeeDTOTupleScheme getScheme() {
      return new RefundFeeDTOTupleScheme();
    }
  }

  private static class RefundFeeDTOTupleScheme extends TupleScheme<RefundFeeDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundFeeDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetApplyStatus()) {
        optionals.set(2);
      }
      if (struct.isSetProductId()) {
        optionals.set(3);
      }
      if (struct.isSetTradeWay()) {
        optionals.set(4);
      }
      if (struct.isSetTradeDate()) {
        optionals.set(5);
      }
      if (struct.isSetMortgageNumber()) {
        optionals.set(6);
      }
      if (struct.isSetCustomerId()) {
        optionals.set(7);
      }
      if (struct.isSetOldHome()) {
        optionals.set(8);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(9);
      }
      if (struct.isSetHomeName()) {
        optionals.set(10);
      }
      if (struct.isSetGuaranteeMoney()) {
        optionals.set(11);
      }
      if (struct.isSetExtractMoney()) {
        optionals.set(12);
      }
      if (struct.isSetLendBank()) {
        optionals.set(13);
      }
      if (struct.isSetForeclosureFloorBank()) {
        optionals.set(14);
      }
      if (struct.isSetBankLendTotalAmount()) {
        optionals.set(15);
      }
      if (struct.isSetDeptId()) {
        optionals.set(16);
      }
      if (struct.isSetRecGuaranteeMoney()) {
        optionals.set(17);
      }
      if (struct.isSetForeclosureFloorMoney()) {
        optionals.set(18);
      }
      if (struct.isSetDefaultInterest()) {
        optionals.set(19);
      }
      if (struct.isSetPayTotal()) {
        optionals.set(20);
      }
      if (struct.isSetReturnFee()) {
        optionals.set(21);
      }
      if (struct.isSetRecAccountName()) {
        optionals.set(22);
      }
      if (struct.isSetBankName()) {
        optionals.set(23);
      }
      if (struct.isSetRecAccount()) {
        optionals.set(24);
      }
      if (struct.isSetPage()) {
        optionals.set(25);
      }
      if (struct.isSetRows()) {
        optionals.set(26);
      }
      if (struct.isSetUserIds()) {
        optionals.set(27);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(28);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(29);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(30);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(31);
      }
      if (struct.isSetProjectName()) {
        optionals.set(32);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(33);
      }
      if (struct.isSetProductName()) {
        optionals.set(34);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(35);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(36);
      }
      if (struct.isSetDeptName()) {
        optionals.set(37);
      }
      if (struct.isSetInterest()) {
        optionals.set(38);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(39);
      }
      if (struct.isSetRecDate()) {
        optionals.set(40);
      }
      if (struct.isSetRecMoney()) {
        optionals.set(41);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        optionals.set(42);
      }
      if (struct.isSetPayDate()) {
        optionals.set(43);
      }
      if (struct.isSetBankLendTotalMoney()) {
        optionals.set(44);
      }
      if (struct.isSetType()) {
        optionals.set(45);
      }
      if (struct.isSetConfirmMoney()) {
        optionals.set(46);
      }
      if (struct.isSetIsConfirm()) {
        optionals.set(47);
      }
      if (struct.isSetConfirmDate()) {
        optionals.set(48);
      }
      if (struct.isSetRealUseDays()) {
        optionals.set(49);
      }
      if (struct.isSetRepaymentMoney()) {
        optionals.set(50);
      }
      if (struct.isSetFeeRate()) {
        optionals.set(51);
      }
      if (struct.isSetRepaymentDate()) {
        optionals.set(52);
      }
      if (struct.isSetProjectList()) {
        optionals.set(53);
      }
      if (struct.isSetBatchRefundFeeMapList()) {
        optionals.set(54);
      }
      if (struct.isSetBatchRefundFeeMainId()) {
        optionals.set(55);
      }
      if (struct.isSetBatchName()) {
        optionals.set(56);
      }
      oprot.writeBitSet(optionals, 57);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetApplyStatus()) {
        oprot.writeI32(struct.applyStatus);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetTradeWay()) {
        oprot.writeString(struct.tradeWay);
      }
      if (struct.isSetTradeDate()) {
        oprot.writeString(struct.tradeDate);
      }
      if (struct.isSetMortgageNumber()) {
        oprot.writeString(struct.mortgageNumber);
      }
      if (struct.isSetCustomerId()) {
        oprot.writeI32(struct.customerId);
      }
      if (struct.isSetOldHome()) {
        oprot.writeString(struct.oldHome);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetHomeName()) {
        oprot.writeString(struct.homeName);
      }
      if (struct.isSetGuaranteeMoney()) {
        oprot.writeDouble(struct.guaranteeMoney);
      }
      if (struct.isSetExtractMoney()) {
        oprot.writeDouble(struct.extractMoney);
      }
      if (struct.isSetLendBank()) {
        oprot.writeString(struct.lendBank);
      }
      if (struct.isSetForeclosureFloorBank()) {
        oprot.writeString(struct.foreclosureFloorBank);
      }
      if (struct.isSetBankLendTotalAmount()) {
        oprot.writeDouble(struct.bankLendTotalAmount);
      }
      if (struct.isSetDeptId()) {
        oprot.writeI32(struct.deptId);
      }
      if (struct.isSetRecGuaranteeMoney()) {
        oprot.writeDouble(struct.recGuaranteeMoney);
      }
      if (struct.isSetForeclosureFloorMoney()) {
        oprot.writeDouble(struct.foreclosureFloorMoney);
      }
      if (struct.isSetDefaultInterest()) {
        oprot.writeDouble(struct.defaultInterest);
      }
      if (struct.isSetPayTotal()) {
        oprot.writeDouble(struct.payTotal);
      }
      if (struct.isSetReturnFee()) {
        oprot.writeDouble(struct.returnFee);
      }
      if (struct.isSetRecAccountName()) {
        oprot.writeString(struct.recAccountName);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetRecAccount()) {
        oprot.writeString(struct.recAccount);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter156 : struct.userIds)
          {
            oprot.writeI32(_iter156);
          }
        }
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetDeptName()) {
        oprot.writeString(struct.deptName);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetRecDate()) {
        oprot.writeString(struct.recDate);
      }
      if (struct.isSetRecMoney()) {
        oprot.writeDouble(struct.recMoney);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        oprot.writeString(struct.cancelGuaranteeDate);
      }
      if (struct.isSetPayDate()) {
        oprot.writeString(struct.payDate);
      }
      if (struct.isSetBankLendTotalMoney()) {
        oprot.writeDouble(struct.bankLendTotalMoney);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetConfirmMoney()) {
        oprot.writeDouble(struct.confirmMoney);
      }
      if (struct.isSetIsConfirm()) {
        oprot.writeI32(struct.isConfirm);
      }
      if (struct.isSetConfirmDate()) {
        oprot.writeString(struct.confirmDate);
      }
      if (struct.isSetRealUseDays()) {
        oprot.writeI32(struct.realUseDays);
      }
      if (struct.isSetRepaymentMoney()) {
        oprot.writeDouble(struct.repaymentMoney);
      }
      if (struct.isSetFeeRate()) {
        oprot.writeDouble(struct.feeRate);
      }
      if (struct.isSetRepaymentDate()) {
        oprot.writeString(struct.repaymentDate);
      }
      if (struct.isSetProjectList()) {
        {
          oprot.writeI32(struct.projectList.size());
          for (int _iter157 : struct.projectList)
          {
            oprot.writeI32(_iter157);
          }
        }
      }
      if (struct.isSetBatchRefundFeeMapList()) {
        {
          oprot.writeI32(struct.batchRefundFeeMapList.size());
          for (RefundFeeMap _iter158 : struct.batchRefundFeeMapList)
          {
            _iter158.write(oprot);
          }
        }
      }
      if (struct.isSetBatchRefundFeeMainId()) {
        oprot.writeI32(struct.batchRefundFeeMainId);
      }
      if (struct.isSetBatchName()) {
        oprot.writeString(struct.batchName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundFeeDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(57);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.applyStatus = iprot.readI32();
        struct.setApplyStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeWay = iprot.readString();
        struct.setTradeWayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeDate = iprot.readString();
        struct.setTradeDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mortgageNumber = iprot.readString();
        struct.setMortgageNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.customerId = iprot.readI32();
        struct.setCustomerIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.oldHome = iprot.readString();
        struct.setOldHomeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.homeName = iprot.readString();
        struct.setHomeNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.guaranteeMoney = iprot.readDouble();
        struct.setGuaranteeMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.extractMoney = iprot.readDouble();
        struct.setExtractMoneyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lendBank = iprot.readString();
        struct.setLendBankIsSet(true);
      }
      if (incoming.get(14)) {
        struct.foreclosureFloorBank = iprot.readString();
        struct.setForeclosureFloorBankIsSet(true);
      }
      if (incoming.get(15)) {
        struct.bankLendTotalAmount = iprot.readDouble();
        struct.setBankLendTotalAmountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.deptId = iprot.readI32();
        struct.setDeptIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.recGuaranteeMoney = iprot.readDouble();
        struct.setRecGuaranteeMoneyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.foreclosureFloorMoney = iprot.readDouble();
        struct.setForeclosureFloorMoneyIsSet(true);
      }
      if (incoming.get(19)) {
        struct.defaultInterest = iprot.readDouble();
        struct.setDefaultInterestIsSet(true);
      }
      if (incoming.get(20)) {
        struct.payTotal = iprot.readDouble();
        struct.setPayTotalIsSet(true);
      }
      if (incoming.get(21)) {
        struct.returnFee = iprot.readDouble();
        struct.setReturnFeeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.recAccountName = iprot.readString();
        struct.setRecAccountNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.recAccount = iprot.readString();
        struct.setRecAccountIsSet(true);
      }
      if (incoming.get(25)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(26)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list159.size);
          int _elem160;
          for (int _i161 = 0; _i161 < _list159.size; ++_i161)
          {
            _elem160 = iprot.readI32();
            struct.userIds.add(_elem160);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(28)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(29)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(30)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(31)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(32)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(33)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(34)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(35)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(36)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(37)) {
        struct.deptName = iprot.readString();
        struct.setDeptNameIsSet(true);
      }
      if (incoming.get(38)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(39)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(40)) {
        struct.recDate = iprot.readString();
        struct.setRecDateIsSet(true);
      }
      if (incoming.get(41)) {
        struct.recMoney = iprot.readDouble();
        struct.setRecMoneyIsSet(true);
      }
      if (incoming.get(42)) {
        struct.cancelGuaranteeDate = iprot.readString();
        struct.setCancelGuaranteeDateIsSet(true);
      }
      if (incoming.get(43)) {
        struct.payDate = iprot.readString();
        struct.setPayDateIsSet(true);
      }
      if (incoming.get(44)) {
        struct.bankLendTotalMoney = iprot.readDouble();
        struct.setBankLendTotalMoneyIsSet(true);
      }
      if (incoming.get(45)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(46)) {
        struct.confirmMoney = iprot.readDouble();
        struct.setConfirmMoneyIsSet(true);
      }
      if (incoming.get(47)) {
        struct.isConfirm = iprot.readI32();
        struct.setIsConfirmIsSet(true);
      }
      if (incoming.get(48)) {
        struct.confirmDate = iprot.readString();
        struct.setConfirmDateIsSet(true);
      }
      if (incoming.get(49)) {
        struct.realUseDays = iprot.readI32();
        struct.setRealUseDaysIsSet(true);
      }
      if (incoming.get(50)) {
        struct.repaymentMoney = iprot.readDouble();
        struct.setRepaymentMoneyIsSet(true);
      }
      if (incoming.get(51)) {
        struct.feeRate = iprot.readDouble();
        struct.setFeeRateIsSet(true);
      }
      if (incoming.get(52)) {
        struct.repaymentDate = iprot.readString();
        struct.setRepaymentDateIsSet(true);
      }
      if (incoming.get(53)) {
        {
          org.apache.thrift.protocol.TList _list162 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.projectList = new ArrayList<Integer>(_list162.size);
          int _elem163;
          for (int _i164 = 0; _i164 < _list162.size; ++_i164)
          {
            _elem163 = iprot.readI32();
            struct.projectList.add(_elem163);
          }
        }
        struct.setProjectListIsSet(true);
      }
      if (incoming.get(54)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.batchRefundFeeMapList = new ArrayList<RefundFeeMap>(_list165.size);
          RefundFeeMap _elem166;
          for (int _i167 = 0; _i167 < _list165.size; ++_i167)
          {
            _elem166 = new RefundFeeMap();
            _elem166.read(iprot);
            struct.batchRefundFeeMapList.add(_elem166);
          }
        }
        struct.setBatchRefundFeeMapListIsSet(true);
      }
      if (incoming.get(55)) {
        struct.batchRefundFeeMainId = iprot.readI32();
        struct.setBatchRefundFeeMainIdIsSet(true);
      }
      if (incoming.get(56)) {
        struct.batchName = iprot.readString();
        struct.setBatchNameIsSet(true);
      }
    }
  }

}


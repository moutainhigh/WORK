/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class OverInterest implements org.apache.thrift.TBase<OverInterest, OverInterest._Fields>, java.io.Serializable, Cloneable, Comparable<OverInterest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OverInterest");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OVERDUE_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFineInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OverInterestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OverInterestTupleSchemeFactory());
  }

  public String pId; // required
  public double overdueLoanInterest; // required
  public double overdueFineInterest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    OVERDUE_LOAN_INTEREST((short)2, "overdueLoanInterest"),
    OVERDUE_FINE_INTEREST((short)3, "overdueFineInterest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // OVERDUE_LOAN_INTEREST
          return OVERDUE_LOAN_INTEREST;
        case 3: // OVERDUE_FINE_INTEREST
          return OVERDUE_FINE_INTEREST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OVERDUELOANINTEREST_ISSET_ID = 0;
  private static final int __OVERDUEFINEINTEREST_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FINE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueFineInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OverInterest.class, metaDataMap);
  }

  public OverInterest() {
  }

  public OverInterest(
    String pId,
    double overdueLoanInterest,
    double overdueFineInterest)
  {
    this();
    this.pId = pId;
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OverInterest(OverInterest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    this.overdueLoanInterest = other.overdueLoanInterest;
    this.overdueFineInterest = other.overdueFineInterest;
  }

  public OverInterest deepCopy() {
    return new OverInterest(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    setOverdueLoanInterestIsSet(false);
    this.overdueLoanInterest = 0.0;
    setOverdueFineInterestIsSet(false);
    this.overdueFineInterest = 0.0;
  }

  public String getPId() {
    return this.pId;
  }

  public OverInterest setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public double getOverdueLoanInterest() {
    return this.overdueLoanInterest;
  }

  public OverInterest setOverdueLoanInterest(double overdueLoanInterest) {
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    return this;
  }

  public void unsetOverdueLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID);
  }

  public void setOverdueLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID, value);
  }

  public double getOverdueFineInterest() {
    return this.overdueFineInterest;
  }

  public OverInterest setOverdueFineInterest(double overdueFineInterest) {
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    return this;
  }

  public void unsetOverdueFineInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueFineInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFineInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID);
  }

  public void setOverdueFineInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case OVERDUE_LOAN_INTEREST:
      if (value == null) {
        unsetOverdueLoanInterest();
      } else {
        setOverdueLoanInterest((Double)value);
      }
      break;

    case OVERDUE_FINE_INTEREST:
      if (value == null) {
        unsetOverdueFineInterest();
      } else {
        setOverdueFineInterest((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case OVERDUE_LOAN_INTEREST:
      return Double.valueOf(getOverdueLoanInterest());

    case OVERDUE_FINE_INTEREST:
      return Double.valueOf(getOverdueFineInterest());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case OVERDUE_LOAN_INTEREST:
      return isSetOverdueLoanInterest();
    case OVERDUE_FINE_INTEREST:
      return isSetOverdueFineInterest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OverInterest)
      return this.equals((OverInterest)that);
    return false;
  }

  public boolean equals(OverInterest that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_overdueLoanInterest = true;
    boolean that_present_overdueLoanInterest = true;
    if (this_present_overdueLoanInterest || that_present_overdueLoanInterest) {
      if (!(this_present_overdueLoanInterest && that_present_overdueLoanInterest))
        return false;
      if (this.overdueLoanInterest != that.overdueLoanInterest)
        return false;
    }

    boolean this_present_overdueFineInterest = true;
    boolean that_present_overdueFineInterest = true;
    if (this_present_overdueFineInterest || that_present_overdueFineInterest) {
      if (!(this_present_overdueFineInterest && that_present_overdueFineInterest))
        return false;
      if (this.overdueFineInterest != that.overdueFineInterest)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_overdueLoanInterest = true;
    list.add(present_overdueLoanInterest);
    if (present_overdueLoanInterest)
      list.add(overdueLoanInterest);

    boolean present_overdueFineInterest = true;
    list.add(present_overdueFineInterest);
    if (present_overdueFineInterest)
      list.add(overdueFineInterest);

    return list.hashCode();
  }

  @Override
  public int compareTo(OverInterest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueLoanInterest()).compareTo(other.isSetOverdueLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueLoanInterest, other.overdueLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFineInterest()).compareTo(other.isSetOverdueFineInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFineInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFineInterest, other.overdueFineInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OverInterest(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueLoanInterest:");
    sb.append(this.overdueLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFineInterest:");
    sb.append(this.overdueFineInterest);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OverInterestStandardSchemeFactory implements SchemeFactory {
    public OverInterestStandardScheme getScheme() {
      return new OverInterestStandardScheme();
    }
  }

  private static class OverInterestStandardScheme extends StandardScheme<OverInterest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OverInterest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OVERDUE_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueLoanInterest = iprot.readDouble();
              struct.setOverdueLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OVERDUE_FINE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFineInterest = iprot.readDouble();
              struct.setOverdueFineInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OverInterest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueFineInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OverInterestTupleSchemeFactory implements SchemeFactory {
    public OverInterestTupleScheme getScheme() {
      return new OverInterestTupleScheme();
    }
  }

  private static class OverInterestTupleScheme extends TupleScheme<OverInterest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OverInterest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetOverdueLoanInterest()) {
        optionals.set(1);
      }
      if (struct.isSetOverdueFineInterest()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetOverdueLoanInterest()) {
        oprot.writeDouble(struct.overdueLoanInterest);
      }
      if (struct.isSetOverdueFineInterest()) {
        oprot.writeDouble(struct.overdueFineInterest);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OverInterest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.overdueLoanInterest = iprot.readDouble();
        struct.setOverdueLoanInterestIsSet(true);
      }
      if (incoming.get(2)) {
        struct.overdueFineInterest = iprot.readDouble();
        struct.setOverdueFineInterestIsSet(true);
      }
    }
  }

}


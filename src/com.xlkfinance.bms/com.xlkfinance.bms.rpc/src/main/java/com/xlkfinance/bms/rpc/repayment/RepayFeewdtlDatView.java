/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepayFeewdtlDatView implements org.apache.thrift.TBase<RepayFeewdtlDatView, RepayFeewdtlDatView._Fields>, java.io.Serializable, Cloneable, Comparable<RepayFeewdtlDatView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepayFeewdtlDatView");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNum", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SHOULD_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField SHOULD_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField SHOULD_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField OVERDUE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFine", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleNum", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField REPAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentId", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayDt", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepayFeewdtlDatViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepayFeewdtlDatViewTupleSchemeFactory());
  }

  public int pId; // required
  public int loanId; // required
  public int repayId; // required
  public int projectId; // required
  public String projectName; // required
  public String projectNum; // required
  public double shouldPrincipal; // required
  public double shouldInterest; // required
  public double shouldMangCost; // required
  public double shouldOtherCost; // required
  public double overdueInterest; // required
  public double overdueFine; // required
  public double total; // required
  public String reason; // required
  public int status; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String completeDttm; // required
  public String typeName; // required
  public int planCycleNum; // required
  public int repaymentId; // required
  public String planRepayDt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    LOAN_ID((short)2, "loanId"),
    REPAY_ID((short)3, "repayId"),
    PROJECT_ID((short)4, "projectId"),
    PROJECT_NAME((short)5, "projectName"),
    PROJECT_NUM((short)6, "projectNum"),
    SHOULD_PRINCIPAL((short)7, "shouldPrincipal"),
    SHOULD_INTEREST((short)8, "shouldInterest"),
    SHOULD_MANG_COST((short)9, "shouldMangCost"),
    SHOULD_OTHER_COST((short)10, "shouldOtherCost"),
    OVERDUE_INTEREST((short)11, "overdueInterest"),
    OVERDUE_FINE((short)12, "overdueFine"),
    TOTAL((short)13, "total"),
    REASON((short)14, "reason"),
    STATUS((short)15, "status"),
    REQUEST_STATUS((short)16, "requestStatus"),
    REQUEST_DTTM((short)17, "requestDttm"),
    COMPLETE_DTTM((short)18, "completeDttm"),
    TYPE_NAME((short)19, "typeName"),
    PLAN_CYCLE_NUM((short)20, "planCycleNum"),
    REPAYMENT_ID((short)21, "repaymentId"),
    PLAN_REPAY_DT((short)22, "planRepayDt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // REPAY_ID
          return REPAY_ID;
        case 4: // PROJECT_ID
          return PROJECT_ID;
        case 5: // PROJECT_NAME
          return PROJECT_NAME;
        case 6: // PROJECT_NUM
          return PROJECT_NUM;
        case 7: // SHOULD_PRINCIPAL
          return SHOULD_PRINCIPAL;
        case 8: // SHOULD_INTEREST
          return SHOULD_INTEREST;
        case 9: // SHOULD_MANG_COST
          return SHOULD_MANG_COST;
        case 10: // SHOULD_OTHER_COST
          return SHOULD_OTHER_COST;
        case 11: // OVERDUE_INTEREST
          return OVERDUE_INTEREST;
        case 12: // OVERDUE_FINE
          return OVERDUE_FINE;
        case 13: // TOTAL
          return TOTAL;
        case 14: // REASON
          return REASON;
        case 15: // STATUS
          return STATUS;
        case 16: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 17: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 18: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 19: // TYPE_NAME
          return TYPE_NAME;
        case 20: // PLAN_CYCLE_NUM
          return PLAN_CYCLE_NUM;
        case 21: // REPAYMENT_ID
          return REPAYMENT_ID;
        case 22: // PLAN_REPAY_DT
          return PLAN_REPAY_DT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __REPAYID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private static final int __SHOULDPRINCIPAL_ISSET_ID = 4;
  private static final int __SHOULDINTEREST_ISSET_ID = 5;
  private static final int __SHOULDMANGCOST_ISSET_ID = 6;
  private static final int __SHOULDOTHERCOST_ISSET_ID = 7;
  private static final int __OVERDUEINTEREST_ISSET_ID = 8;
  private static final int __OVERDUEFINE_ISSET_ID = 9;
  private static final int __TOTAL_ISSET_ID = 10;
  private static final int __STATUS_ISSET_ID = 11;
  private static final int __REQUESTSTATUS_ISSET_ID = 12;
  private static final int __PLANCYCLENUM_ISSET_ID = 13;
  private static final int __REPAYMENTID_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("projectNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("shouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("shouldInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FINE, new org.apache.thrift.meta_data.FieldMetaData("overdueFine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("planCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("repaymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepayFeewdtlDatView.class, metaDataMap);
  }

  public RepayFeewdtlDatView() {
  }

  public RepayFeewdtlDatView(
    int pId,
    int loanId,
    int repayId,
    int projectId,
    String projectName,
    String projectNum,
    double shouldPrincipal,
    double shouldInterest,
    double shouldMangCost,
    double shouldOtherCost,
    double overdueInterest,
    double overdueFine,
    double total,
    String reason,
    int status,
    int requestStatus,
    String requestDttm,
    String completeDttm,
    String typeName,
    int planCycleNum,
    int repaymentId,
    String planRepayDt)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.repayId = repayId;
    setRepayIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNum = projectNum;
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    this.overdueInterest = overdueInterest;
    setOverdueInterestIsSet(true);
    this.overdueFine = overdueFine;
    setOverdueFineIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.reason = reason;
    this.status = status;
    setStatusIsSet(true);
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.completeDttm = completeDttm;
    this.typeName = typeName;
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    this.planRepayDt = planRepayDt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepayFeewdtlDatView(RepayFeewdtlDatView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    this.loanId = other.loanId;
    this.repayId = other.repayId;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNum()) {
      this.projectNum = other.projectNum;
    }
    this.shouldPrincipal = other.shouldPrincipal;
    this.shouldInterest = other.shouldInterest;
    this.shouldMangCost = other.shouldMangCost;
    this.shouldOtherCost = other.shouldOtherCost;
    this.overdueInterest = other.overdueInterest;
    this.overdueFine = other.overdueFine;
    this.total = other.total;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.status = other.status;
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    if (other.isSetTypeName()) {
      this.typeName = other.typeName;
    }
    this.planCycleNum = other.planCycleNum;
    this.repaymentId = other.repaymentId;
    if (other.isSetPlanRepayDt()) {
      this.planRepayDt = other.planRepayDt;
    }
  }

  public RepayFeewdtlDatView deepCopy() {
    return new RepayFeewdtlDatView(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setRepayIdIsSet(false);
    this.repayId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNum = null;
    setShouldPrincipalIsSet(false);
    this.shouldPrincipal = 0.0;
    setShouldInterestIsSet(false);
    this.shouldInterest = 0.0;
    setShouldMangCostIsSet(false);
    this.shouldMangCost = 0.0;
    setShouldOtherCostIsSet(false);
    this.shouldOtherCost = 0.0;
    setOverdueInterestIsSet(false);
    this.overdueInterest = 0.0;
    setOverdueFineIsSet(false);
    this.overdueFine = 0.0;
    setTotalIsSet(false);
    this.total = 0.0;
    this.reason = null;
    setStatusIsSet(false);
    this.status = 0;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.completeDttm = null;
    this.typeName = null;
    setPlanCycleNumIsSet(false);
    this.planCycleNum = 0;
    setRepaymentIdIsSet(false);
    this.repaymentId = 0;
    this.planRepayDt = null;
  }

  public int getPId() {
    return this.pId;
  }

  public RepayFeewdtlDatView setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public RepayFeewdtlDatView setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getRepayId() {
    return this.repayId;
  }

  public RepayFeewdtlDatView setRepayId(int repayId) {
    this.repayId = repayId;
    setRepayIdIsSet(true);
    return this;
  }

  public void unsetRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
  }

  /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
  }

  public void setRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepayFeewdtlDatView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RepayFeewdtlDatView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNum() {
    return this.projectNum;
  }

  public RepayFeewdtlDatView setProjectNum(String projectNum) {
    this.projectNum = projectNum;
    return this;
  }

  public void unsetProjectNum() {
    this.projectNum = null;
  }

  /** Returns true if field projectNum is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNum() {
    return this.projectNum != null;
  }

  public void setProjectNumIsSet(boolean value) {
    if (!value) {
      this.projectNum = null;
    }
  }

  public double getShouldPrincipal() {
    return this.shouldPrincipal;
  }

  public RepayFeewdtlDatView setShouldPrincipal(double shouldPrincipal) {
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    return this;
  }

  public void unsetShouldPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field shouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  public void setShouldPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID, value);
  }

  public double getShouldInterest() {
    return this.shouldInterest;
  }

  public RepayFeewdtlDatView setShouldInterest(double shouldInterest) {
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    return this;
  }

  public void unsetShouldInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  /** Returns true if field shouldInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  public void setShouldInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID, value);
  }

  public double getShouldMangCost() {
    return this.shouldMangCost;
  }

  public RepayFeewdtlDatView setShouldMangCost(double shouldMangCost) {
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    return this;
  }

  public void unsetShouldMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  /** Returns true if field shouldMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  public void setShouldMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID, value);
  }

  public double getShouldOtherCost() {
    return this.shouldOtherCost;
  }

  public RepayFeewdtlDatView setShouldOtherCost(double shouldOtherCost) {
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    return this;
  }

  public void unsetShouldOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field shouldOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  public void setShouldOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID, value);
  }

  public double getOverdueInterest() {
    return this.overdueInterest;
  }

  public RepayFeewdtlDatView setOverdueInterest(double overdueInterest) {
    this.overdueInterest = overdueInterest;
    setOverdueInterestIsSet(true);
    return this;
  }

  public void unsetOverdueInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEINTEREST_ISSET_ID);
  }

  public void setOverdueInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEINTEREST_ISSET_ID, value);
  }

  public double getOverdueFine() {
    return this.overdueFine;
  }

  public RepayFeewdtlDatView setOverdueFine(double overdueFine) {
    this.overdueFine = overdueFine;
    setOverdueFineIsSet(true);
    return this;
  }

  public void unsetOverdueFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFINE_ISSET_ID);
  }

  /** Returns true if field overdueFine is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFine() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFINE_ISSET_ID);
  }

  public void setOverdueFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFINE_ISSET_ID, value);
  }

  public double getTotal() {
    return this.total;
  }

  public RepayFeewdtlDatView setTotal(double total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public RepayFeewdtlDatView setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public RepayFeewdtlDatView setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public RepayFeewdtlDatView setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public RepayFeewdtlDatView setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public RepayFeewdtlDatView setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public String getTypeName() {
    return this.typeName;
  }

  public RepayFeewdtlDatView setTypeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  public void unsetTypeName() {
    this.typeName = null;
  }

  /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeName() {
    return this.typeName != null;
  }

  public void setTypeNameIsSet(boolean value) {
    if (!value) {
      this.typeName = null;
    }
  }

  public int getPlanCycleNum() {
    return this.planCycleNum;
  }

  public RepayFeewdtlDatView setPlanCycleNum(int planCycleNum) {
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    return this;
  }

  public void unsetPlanCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  /** Returns true if field planCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  public void setPlanCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID, value);
  }

  public int getRepaymentId() {
    return this.repaymentId;
  }

  public RepayFeewdtlDatView setRepaymentId(int repaymentId) {
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    return this;
  }

  public void unsetRepaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  /** Returns true if field repaymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  public void setRepaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTID_ISSET_ID, value);
  }

  public String getPlanRepayDt() {
    return this.planRepayDt;
  }

  public RepayFeewdtlDatView setPlanRepayDt(String planRepayDt) {
    this.planRepayDt = planRepayDt;
    return this;
  }

  public void unsetPlanRepayDt() {
    this.planRepayDt = null;
  }

  /** Returns true if field planRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayDt() {
    return this.planRepayDt != null;
  }

  public void setPlanRepayDtIsSet(boolean value) {
    if (!value) {
      this.planRepayDt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case REPAY_ID:
      if (value == null) {
        unsetRepayId();
      } else {
        setRepayId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUM:
      if (value == null) {
        unsetProjectNum();
      } else {
        setProjectNum((String)value);
      }
      break;

    case SHOULD_PRINCIPAL:
      if (value == null) {
        unsetShouldPrincipal();
      } else {
        setShouldPrincipal((Double)value);
      }
      break;

    case SHOULD_INTEREST:
      if (value == null) {
        unsetShouldInterest();
      } else {
        setShouldInterest((Double)value);
      }
      break;

    case SHOULD_MANG_COST:
      if (value == null) {
        unsetShouldMangCost();
      } else {
        setShouldMangCost((Double)value);
      }
      break;

    case SHOULD_OTHER_COST:
      if (value == null) {
        unsetShouldOtherCost();
      } else {
        setShouldOtherCost((Double)value);
      }
      break;

    case OVERDUE_INTEREST:
      if (value == null) {
        unsetOverdueInterest();
      } else {
        setOverdueInterest((Double)value);
      }
      break;

    case OVERDUE_FINE:
      if (value == null) {
        unsetOverdueFine();
      } else {
        setOverdueFine((Double)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Double)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case TYPE_NAME:
      if (value == null) {
        unsetTypeName();
      } else {
        setTypeName((String)value);
      }
      break;

    case PLAN_CYCLE_NUM:
      if (value == null) {
        unsetPlanCycleNum();
      } else {
        setPlanCycleNum((Integer)value);
      }
      break;

    case REPAYMENT_ID:
      if (value == null) {
        unsetRepaymentId();
      } else {
        setRepaymentId((Integer)value);
      }
      break;

    case PLAN_REPAY_DT:
      if (value == null) {
        unsetPlanRepayDt();
      } else {
        setPlanRepayDt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case REPAY_ID:
      return Integer.valueOf(getRepayId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUM:
      return getProjectNum();

    case SHOULD_PRINCIPAL:
      return Double.valueOf(getShouldPrincipal());

    case SHOULD_INTEREST:
      return Double.valueOf(getShouldInterest());

    case SHOULD_MANG_COST:
      return Double.valueOf(getShouldMangCost());

    case SHOULD_OTHER_COST:
      return Double.valueOf(getShouldOtherCost());

    case OVERDUE_INTEREST:
      return Double.valueOf(getOverdueInterest());

    case OVERDUE_FINE:
      return Double.valueOf(getOverdueFine());

    case TOTAL:
      return Double.valueOf(getTotal());

    case REASON:
      return getReason();

    case STATUS:
      return Integer.valueOf(getStatus());

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case TYPE_NAME:
      return getTypeName();

    case PLAN_CYCLE_NUM:
      return Integer.valueOf(getPlanCycleNum());

    case REPAYMENT_ID:
      return Integer.valueOf(getRepaymentId());

    case PLAN_REPAY_DT:
      return getPlanRepayDt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case LOAN_ID:
      return isSetLoanId();
    case REPAY_ID:
      return isSetRepayId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUM:
      return isSetProjectNum();
    case SHOULD_PRINCIPAL:
      return isSetShouldPrincipal();
    case SHOULD_INTEREST:
      return isSetShouldInterest();
    case SHOULD_MANG_COST:
      return isSetShouldMangCost();
    case SHOULD_OTHER_COST:
      return isSetShouldOtherCost();
    case OVERDUE_INTEREST:
      return isSetOverdueInterest();
    case OVERDUE_FINE:
      return isSetOverdueFine();
    case TOTAL:
      return isSetTotal();
    case REASON:
      return isSetReason();
    case STATUS:
      return isSetStatus();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case TYPE_NAME:
      return isSetTypeName();
    case PLAN_CYCLE_NUM:
      return isSetPlanCycleNum();
    case REPAYMENT_ID:
      return isSetRepaymentId();
    case PLAN_REPAY_DT:
      return isSetPlanRepayDt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepayFeewdtlDatView)
      return this.equals((RepayFeewdtlDatView)that);
    return false;
  }

  public boolean equals(RepayFeewdtlDatView that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_repayId = true;
    boolean that_present_repayId = true;
    if (this_present_repayId || that_present_repayId) {
      if (!(this_present_repayId && that_present_repayId))
        return false;
      if (this.repayId != that.repayId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNum = true && this.isSetProjectNum();
    boolean that_present_projectNum = true && that.isSetProjectNum();
    if (this_present_projectNum || that_present_projectNum) {
      if (!(this_present_projectNum && that_present_projectNum))
        return false;
      if (!this.projectNum.equals(that.projectNum))
        return false;
    }

    boolean this_present_shouldPrincipal = true;
    boolean that_present_shouldPrincipal = true;
    if (this_present_shouldPrincipal || that_present_shouldPrincipal) {
      if (!(this_present_shouldPrincipal && that_present_shouldPrincipal))
        return false;
      if (this.shouldPrincipal != that.shouldPrincipal)
        return false;
    }

    boolean this_present_shouldInterest = true;
    boolean that_present_shouldInterest = true;
    if (this_present_shouldInterest || that_present_shouldInterest) {
      if (!(this_present_shouldInterest && that_present_shouldInterest))
        return false;
      if (this.shouldInterest != that.shouldInterest)
        return false;
    }

    boolean this_present_shouldMangCost = true;
    boolean that_present_shouldMangCost = true;
    if (this_present_shouldMangCost || that_present_shouldMangCost) {
      if (!(this_present_shouldMangCost && that_present_shouldMangCost))
        return false;
      if (this.shouldMangCost != that.shouldMangCost)
        return false;
    }

    boolean this_present_shouldOtherCost = true;
    boolean that_present_shouldOtherCost = true;
    if (this_present_shouldOtherCost || that_present_shouldOtherCost) {
      if (!(this_present_shouldOtherCost && that_present_shouldOtherCost))
        return false;
      if (this.shouldOtherCost != that.shouldOtherCost)
        return false;
    }

    boolean this_present_overdueInterest = true;
    boolean that_present_overdueInterest = true;
    if (this_present_overdueInterest || that_present_overdueInterest) {
      if (!(this_present_overdueInterest && that_present_overdueInterest))
        return false;
      if (this.overdueInterest != that.overdueInterest)
        return false;
    }

    boolean this_present_overdueFine = true;
    boolean that_present_overdueFine = true;
    if (this_present_overdueFine || that_present_overdueFine) {
      if (!(this_present_overdueFine && that_present_overdueFine))
        return false;
      if (this.overdueFine != that.overdueFine)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_typeName = true && this.isSetTypeName();
    boolean that_present_typeName = true && that.isSetTypeName();
    if (this_present_typeName || that_present_typeName) {
      if (!(this_present_typeName && that_present_typeName))
        return false;
      if (!this.typeName.equals(that.typeName))
        return false;
    }

    boolean this_present_planCycleNum = true;
    boolean that_present_planCycleNum = true;
    if (this_present_planCycleNum || that_present_planCycleNum) {
      if (!(this_present_planCycleNum && that_present_planCycleNum))
        return false;
      if (this.planCycleNum != that.planCycleNum)
        return false;
    }

    boolean this_present_repaymentId = true;
    boolean that_present_repaymentId = true;
    if (this_present_repaymentId || that_present_repaymentId) {
      if (!(this_present_repaymentId && that_present_repaymentId))
        return false;
      if (this.repaymentId != that.repaymentId)
        return false;
    }

    boolean this_present_planRepayDt = true && this.isSetPlanRepayDt();
    boolean that_present_planRepayDt = true && that.isSetPlanRepayDt();
    if (this_present_planRepayDt || that_present_planRepayDt) {
      if (!(this_present_planRepayDt && that_present_planRepayDt))
        return false;
      if (!this.planRepayDt.equals(that.planRepayDt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_repayId = true;
    list.add(present_repayId);
    if (present_repayId)
      list.add(repayId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNum = true && (isSetProjectNum());
    list.add(present_projectNum);
    if (present_projectNum)
      list.add(projectNum);

    boolean present_shouldPrincipal = true;
    list.add(present_shouldPrincipal);
    if (present_shouldPrincipal)
      list.add(shouldPrincipal);

    boolean present_shouldInterest = true;
    list.add(present_shouldInterest);
    if (present_shouldInterest)
      list.add(shouldInterest);

    boolean present_shouldMangCost = true;
    list.add(present_shouldMangCost);
    if (present_shouldMangCost)
      list.add(shouldMangCost);

    boolean present_shouldOtherCost = true;
    list.add(present_shouldOtherCost);
    if (present_shouldOtherCost)
      list.add(shouldOtherCost);

    boolean present_overdueInterest = true;
    list.add(present_overdueInterest);
    if (present_overdueInterest)
      list.add(overdueInterest);

    boolean present_overdueFine = true;
    list.add(present_overdueFine);
    if (present_overdueFine)
      list.add(overdueFine);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_reason = true && (isSetReason());
    list.add(present_reason);
    if (present_reason)
      list.add(reason);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_typeName = true && (isSetTypeName());
    list.add(present_typeName);
    if (present_typeName)
      list.add(typeName);

    boolean present_planCycleNum = true;
    list.add(present_planCycleNum);
    if (present_planCycleNum)
      list.add(planCycleNum);

    boolean present_repaymentId = true;
    list.add(present_repaymentId);
    if (present_repaymentId)
      list.add(repaymentId);

    boolean present_planRepayDt = true && (isSetPlanRepayDt());
    list.add(present_planRepayDt);
    if (present_planRepayDt)
      list.add(planRepayDt);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepayFeewdtlDatView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNum()).compareTo(other.isSetProjectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNum, other.projectNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrincipal()).compareTo(other.isSetShouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrincipal, other.shouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldInterest()).compareTo(other.isSetShouldInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldInterest, other.shouldInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldMangCost()).compareTo(other.isSetShouldMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldMangCost, other.shouldMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOtherCost()).compareTo(other.isSetShouldOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOtherCost, other.shouldOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueInterest()).compareTo(other.isSetOverdueInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueInterest, other.overdueInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFine()).compareTo(other.isSetOverdueFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFine, other.overdueFine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleNum()).compareTo(other.isSetPlanCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleNum, other.planCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentId()).compareTo(other.isSetRepaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentId, other.repaymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayDt()).compareTo(other.isSetPlanRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayDt, other.planRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepayFeewdtlDatView(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayId:");
    sb.append(this.repayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNum:");
    if (this.projectNum == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrincipal:");
    sb.append(this.shouldPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldInterest:");
    sb.append(this.shouldInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldMangCost:");
    sb.append(this.shouldMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOtherCost:");
    sb.append(this.shouldOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueInterest:");
    sb.append(this.overdueInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFine:");
    sb.append(this.overdueFine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeName:");
    if (this.typeName == null) {
      sb.append("null");
    } else {
      sb.append(this.typeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleNum:");
    sb.append(this.planCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentId:");
    sb.append(this.repaymentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayDt:");
    if (this.planRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayDt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepayFeewdtlDatViewStandardSchemeFactory implements SchemeFactory {
    public RepayFeewdtlDatViewStandardScheme getScheme() {
      return new RepayFeewdtlDatViewStandardScheme();
    }
  }

  private static class RepayFeewdtlDatViewStandardScheme extends StandardScheme<RepayFeewdtlDatView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepayFeewdtlDatView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayId = iprot.readI32();
              struct.setRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNum = iprot.readString();
              struct.setProjectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPrincipal = iprot.readDouble();
              struct.setShouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHOULD_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldInterest = iprot.readDouble();
              struct.setShouldInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHOULD_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldMangCost = iprot.readDouble();
              struct.setShouldMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHOULD_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldOtherCost = iprot.readDouble();
              struct.setShouldOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OVERDUE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueInterest = iprot.readDouble();
              struct.setOverdueInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OVERDUE_FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFine = iprot.readDouble();
              struct.setOverdueFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total = iprot.readDouble();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.typeName = iprot.readString();
              struct.setTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PLAN_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planCycleNum = iprot.readI32();
              struct.setPlanCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REPAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentId = iprot.readI32();
              struct.setRepaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PLAN_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayDt = iprot.readString();
              struct.setPlanRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepayFeewdtlDatView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.repayId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNum != null) {
        oprot.writeFieldBegin(PROJECT_NUM_FIELD_DESC);
        oprot.writeString(struct.projectNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOULD_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.shouldPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.shouldInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldOtherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_FIELD_DESC);
      oprot.writeDouble(struct.overdueFine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.total);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      if (struct.typeName != null) {
        oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.typeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.planCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.repaymentId);
      oprot.writeFieldEnd();
      if (struct.planRepayDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepayFeewdtlDatViewTupleSchemeFactory implements SchemeFactory {
    public RepayFeewdtlDatViewTupleScheme getScheme() {
      return new RepayFeewdtlDatViewTupleScheme();
    }
  }

  private static class RepayFeewdtlDatViewTupleScheme extends TupleScheme<RepayFeewdtlDatView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepayFeewdtlDatView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetRepayId()) {
        optionals.set(2);
      }
      if (struct.isSetProjectId()) {
        optionals.set(3);
      }
      if (struct.isSetProjectName()) {
        optionals.set(4);
      }
      if (struct.isSetProjectNum()) {
        optionals.set(5);
      }
      if (struct.isSetShouldPrincipal()) {
        optionals.set(6);
      }
      if (struct.isSetShouldInterest()) {
        optionals.set(7);
      }
      if (struct.isSetShouldMangCost()) {
        optionals.set(8);
      }
      if (struct.isSetShouldOtherCost()) {
        optionals.set(9);
      }
      if (struct.isSetOverdueInterest()) {
        optionals.set(10);
      }
      if (struct.isSetOverdueFine()) {
        optionals.set(11);
      }
      if (struct.isSetTotal()) {
        optionals.set(12);
      }
      if (struct.isSetReason()) {
        optionals.set(13);
      }
      if (struct.isSetStatus()) {
        optionals.set(14);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(15);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(16);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(17);
      }
      if (struct.isSetTypeName()) {
        optionals.set(18);
      }
      if (struct.isSetPlanCycleNum()) {
        optionals.set(19);
      }
      if (struct.isSetRepaymentId()) {
        optionals.set(20);
      }
      if (struct.isSetPlanRepayDt()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetRepayId()) {
        oprot.writeI32(struct.repayId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNum()) {
        oprot.writeString(struct.projectNum);
      }
      if (struct.isSetShouldPrincipal()) {
        oprot.writeDouble(struct.shouldPrincipal);
      }
      if (struct.isSetShouldInterest()) {
        oprot.writeDouble(struct.shouldInterest);
      }
      if (struct.isSetShouldMangCost()) {
        oprot.writeDouble(struct.shouldMangCost);
      }
      if (struct.isSetShouldOtherCost()) {
        oprot.writeDouble(struct.shouldOtherCost);
      }
      if (struct.isSetOverdueInterest()) {
        oprot.writeDouble(struct.overdueInterest);
      }
      if (struct.isSetOverdueFine()) {
        oprot.writeDouble(struct.overdueFine);
      }
      if (struct.isSetTotal()) {
        oprot.writeDouble(struct.total);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetTypeName()) {
        oprot.writeString(struct.typeName);
      }
      if (struct.isSetPlanCycleNum()) {
        oprot.writeI32(struct.planCycleNum);
      }
      if (struct.isSetRepaymentId()) {
        oprot.writeI32(struct.repaymentId);
      }
      if (struct.isSetPlanRepayDt()) {
        oprot.writeString(struct.planRepayDt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepayFeewdtlDatView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.repayId = iprot.readI32();
        struct.setRepayIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.projectNum = iprot.readString();
        struct.setProjectNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shouldPrincipal = iprot.readDouble();
        struct.setShouldPrincipalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.shouldInterest = iprot.readDouble();
        struct.setShouldInterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shouldMangCost = iprot.readDouble();
        struct.setShouldMangCostIsSet(true);
      }
      if (incoming.get(9)) {
        struct.shouldOtherCost = iprot.readDouble();
        struct.setShouldOtherCostIsSet(true);
      }
      if (incoming.get(10)) {
        struct.overdueInterest = iprot.readDouble();
        struct.setOverdueInterestIsSet(true);
      }
      if (incoming.get(11)) {
        struct.overdueFine = iprot.readDouble();
        struct.setOverdueFineIsSet(true);
      }
      if (incoming.get(12)) {
        struct.total = iprot.readDouble();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(13)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(14)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(17)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(18)) {
        struct.typeName = iprot.readString();
        struct.setTypeNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.planCycleNum = iprot.readI32();
        struct.setPlanCycleNumIsSet(true);
      }
      if (incoming.get(20)) {
        struct.repaymentId = iprot.readI32();
        struct.setRepaymentIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.planRepayDt = iprot.readString();
        struct.setPlanRepayDtIsSet(true);
      }
    }
  }

}


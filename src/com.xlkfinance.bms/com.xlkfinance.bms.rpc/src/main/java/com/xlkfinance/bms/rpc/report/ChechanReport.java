/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-28")
public class ChechanReport implements org.apache.thrift.TBase<ChechanReport, ChechanReport._Fields>, java.io.Serializable, Cloneable, Comparable<ChechanReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChechanReport");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deptName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deptId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField REC_INTEREST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recInterestDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PLAN_REC_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRecLoanDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REC_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("recMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField REC_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recLoanDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField REMAINING_REC_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("remainingRecMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFee", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDay", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField EXTENSION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionDate", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField FEE_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("feeTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanBank", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("innerOrOut", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField REC_FEE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("recFeeStatus", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField BIZ_HANDLE_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizHandleDynamic", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField REAL_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("realLoan", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmtMax", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField HANDLE_FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowId", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField HANDLE_FLOW_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowStartDate", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField HANDLE_FLOW_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowEndDate", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_FLOOR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureFloorDate", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField GET_OLD_LICENSE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("getOldLicenseDate", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField CANCEL_MORTGAGE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelMortgageDate", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField TRANSFER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("transferDate", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField GET_NEW_LICENSE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("getNewLicenseDate", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField MORTGAGE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageDate", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("innerOrOutName", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatusName", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceName", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField LOAN_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanEndDate", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField CHECHAN_CAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanCause", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField CHECHAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanDate", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField CHECHAN_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanUserId", org.apache.thrift.protocol.TType.I32, (short)54);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanBank", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanBankBranch", org.apache.thrift.protocol.TType.STRING, (short)56);
  private static final org.apache.thrift.protocol.TField APPLY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applyName", org.apache.thrift.protocol.TType.STRING, (short)57);
  private static final org.apache.thrift.protocol.TField PAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentType", org.apache.thrift.protocol.TType.STRING, (short)58);
  private static final org.apache.thrift.protocol.TField CHECHAN_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanUser", org.apache.thrift.protocol.TType.STRING, (short)59);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChechanReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChechanReportTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String projectNumber; // required
  public int businessSource; // required
  public String deptName; // required
  public int deptId; // required
  public String pmUserName; // required
  public int pmUserId; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String housePropertyCard; // required
  public String sellerName; // required
  public String buyerName; // required
  public double loanAmt; // required
  public double interest; // required
  public String recInterestDate; // required
  public String loanDate; // required
  public String planRecLoanDate; // required
  public double recMoney; // required
  public String recLoanDate; // required
  public double remainingRecMoney; // required
  public double overdueFee; // required
  public int overdueDay; // required
  public double extensionFee; // required
  public String extensionDate; // required
  public double feeTotal; // required
  public String oldLoanBank; // required
  public String productName; // required
  public int innerOrOut; // required
  public int foreclosureStatus; // required
  public int recFeeStatus; // required
  public String bizHandleDynamic; // required
  public double realLoan; // required
  public double poundage; // required
  public double loanAmtMax; // required
  public int handleFlowId; // required
  public String handleFlowStartDate; // required
  public String handleFlowEndDate; // required
  public String foreclosureFloorDate; // required
  public String getOldLicenseDate; // required
  public String cancelMortgageDate; // required
  public String transferDate; // required
  public String getNewLicenseDate; // required
  public String mortgageDate; // required
  public String innerOrOutName; // required
  public String foreclosureStatusName; // required
  public String businessSourceName; // required
  public String loanEndDate; // required
  public String businessSourceStr; // required
  public int isChechan; // required
  public String chechanCause; // required
  public String chechanDate; // required
  public int chechanUserId; // required
  public String newLoanBank; // required
  public String newLoanBankBranch; // required
  public String applyName; // required
  public String paymentType; // required
  public String chechanUser; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    BUSINESS_SOURCE((short)4, "businessSource"),
    DEPT_NAME((short)5, "deptName"),
    DEPT_ID((short)6, "deptId"),
    PM_USER_NAME((short)7, "pmUserName"),
    PM_USER_ID((short)8, "pmUserId"),
    PAGE((short)9, "page"),
    ROWS((short)10, "rows"),
    USER_IDS((short)11, "userIds"),
    HOUSE_PROPERTY_CARD((short)12, "housePropertyCard"),
    SELLER_NAME((short)13, "sellerName"),
    BUYER_NAME((short)14, "buyerName"),
    LOAN_AMT((short)15, "loanAmt"),
    INTEREST((short)16, "interest"),
    REC_INTEREST_DATE((short)17, "recInterestDate"),
    LOAN_DATE((short)18, "loanDate"),
    PLAN_REC_LOAN_DATE((short)19, "planRecLoanDate"),
    REC_MONEY((short)20, "recMoney"),
    REC_LOAN_DATE((short)21, "recLoanDate"),
    REMAINING_REC_MONEY((short)22, "remainingRecMoney"),
    OVERDUE_FEE((short)23, "overdueFee"),
    OVERDUE_DAY((short)24, "overdueDay"),
    EXTENSION_FEE((short)25, "extensionFee"),
    EXTENSION_DATE((short)26, "extensionDate"),
    FEE_TOTAL((short)27, "feeTotal"),
    OLD_LOAN_BANK((short)28, "oldLoanBank"),
    PRODUCT_NAME((short)29, "productName"),
    INNER_OR_OUT((short)30, "innerOrOut"),
    FORECLOSURE_STATUS((short)31, "foreclosureStatus"),
    REC_FEE_STATUS((short)32, "recFeeStatus"),
    BIZ_HANDLE_DYNAMIC((short)33, "bizHandleDynamic"),
    REAL_LOAN((short)34, "realLoan"),
    POUNDAGE((short)35, "poundage"),
    LOAN_AMT_MAX((short)36, "loanAmtMax"),
    HANDLE_FLOW_ID((short)37, "handleFlowId"),
    HANDLE_FLOW_START_DATE((short)38, "handleFlowStartDate"),
    HANDLE_FLOW_END_DATE((short)39, "handleFlowEndDate"),
    FORECLOSURE_FLOOR_DATE((short)40, "foreclosureFloorDate"),
    GET_OLD_LICENSE_DATE((short)41, "getOldLicenseDate"),
    CANCEL_MORTGAGE_DATE((short)42, "cancelMortgageDate"),
    TRANSFER_DATE((short)43, "transferDate"),
    GET_NEW_LICENSE_DATE((short)44, "getNewLicenseDate"),
    MORTGAGE_DATE((short)45, "mortgageDate"),
    INNER_OR_OUT_NAME((short)46, "innerOrOutName"),
    FORECLOSURE_STATUS_NAME((short)47, "foreclosureStatusName"),
    BUSINESS_SOURCE_NAME((short)48, "businessSourceName"),
    LOAN_END_DATE((short)49, "loanEndDate"),
    BUSINESS_SOURCE_STR((short)50, "businessSourceStr"),
    IS_CHECHAN((short)51, "isChechan"),
    CHECHAN_CAUSE((short)52, "chechanCause"),
    CHECHAN_DATE((short)53, "chechanDate"),
    CHECHAN_USER_ID((short)54, "chechanUserId"),
    NEW_LOAN_BANK((short)55, "newLoanBank"),
    NEW_LOAN_BANK_BRANCH((short)56, "newLoanBankBranch"),
    APPLY_NAME((short)57, "applyName"),
    PAYMENT_TYPE((short)58, "paymentType"),
    CHECHAN_USER((short)59, "chechanUser");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 5: // DEPT_NAME
          return DEPT_NAME;
        case 6: // DEPT_ID
          return DEPT_ID;
        case 7: // PM_USER_NAME
          return PM_USER_NAME;
        case 8: // PM_USER_ID
          return PM_USER_ID;
        case 9: // PAGE
          return PAGE;
        case 10: // ROWS
          return ROWS;
        case 11: // USER_IDS
          return USER_IDS;
        case 12: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 13: // SELLER_NAME
          return SELLER_NAME;
        case 14: // BUYER_NAME
          return BUYER_NAME;
        case 15: // LOAN_AMT
          return LOAN_AMT;
        case 16: // INTEREST
          return INTEREST;
        case 17: // REC_INTEREST_DATE
          return REC_INTEREST_DATE;
        case 18: // LOAN_DATE
          return LOAN_DATE;
        case 19: // PLAN_REC_LOAN_DATE
          return PLAN_REC_LOAN_DATE;
        case 20: // REC_MONEY
          return REC_MONEY;
        case 21: // REC_LOAN_DATE
          return REC_LOAN_DATE;
        case 22: // REMAINING_REC_MONEY
          return REMAINING_REC_MONEY;
        case 23: // OVERDUE_FEE
          return OVERDUE_FEE;
        case 24: // OVERDUE_DAY
          return OVERDUE_DAY;
        case 25: // EXTENSION_FEE
          return EXTENSION_FEE;
        case 26: // EXTENSION_DATE
          return EXTENSION_DATE;
        case 27: // FEE_TOTAL
          return FEE_TOTAL;
        case 28: // OLD_LOAN_BANK
          return OLD_LOAN_BANK;
        case 29: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 30: // INNER_OR_OUT
          return INNER_OR_OUT;
        case 31: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 32: // REC_FEE_STATUS
          return REC_FEE_STATUS;
        case 33: // BIZ_HANDLE_DYNAMIC
          return BIZ_HANDLE_DYNAMIC;
        case 34: // REAL_LOAN
          return REAL_LOAN;
        case 35: // POUNDAGE
          return POUNDAGE;
        case 36: // LOAN_AMT_MAX
          return LOAN_AMT_MAX;
        case 37: // HANDLE_FLOW_ID
          return HANDLE_FLOW_ID;
        case 38: // HANDLE_FLOW_START_DATE
          return HANDLE_FLOW_START_DATE;
        case 39: // HANDLE_FLOW_END_DATE
          return HANDLE_FLOW_END_DATE;
        case 40: // FORECLOSURE_FLOOR_DATE
          return FORECLOSURE_FLOOR_DATE;
        case 41: // GET_OLD_LICENSE_DATE
          return GET_OLD_LICENSE_DATE;
        case 42: // CANCEL_MORTGAGE_DATE
          return CANCEL_MORTGAGE_DATE;
        case 43: // TRANSFER_DATE
          return TRANSFER_DATE;
        case 44: // GET_NEW_LICENSE_DATE
          return GET_NEW_LICENSE_DATE;
        case 45: // MORTGAGE_DATE
          return MORTGAGE_DATE;
        case 46: // INNER_OR_OUT_NAME
          return INNER_OR_OUT_NAME;
        case 47: // FORECLOSURE_STATUS_NAME
          return FORECLOSURE_STATUS_NAME;
        case 48: // BUSINESS_SOURCE_NAME
          return BUSINESS_SOURCE_NAME;
        case 49: // LOAN_END_DATE
          return LOAN_END_DATE;
        case 50: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 51: // IS_CHECHAN
          return IS_CHECHAN;
        case 52: // CHECHAN_CAUSE
          return CHECHAN_CAUSE;
        case 53: // CHECHAN_DATE
          return CHECHAN_DATE;
        case 54: // CHECHAN_USER_ID
          return CHECHAN_USER_ID;
        case 55: // NEW_LOAN_BANK
          return NEW_LOAN_BANK;
        case 56: // NEW_LOAN_BANK_BRANCH
          return NEW_LOAN_BANK_BRANCH;
        case 57: // APPLY_NAME
          return APPLY_NAME;
        case 58: // PAYMENT_TYPE
          return PAYMENT_TYPE;
        case 59: // CHECHAN_USER
          return CHECHAN_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __BUSINESSSOURCE_ISSET_ID = 1;
  private static final int __DEPTID_ISSET_ID = 2;
  private static final int __PMUSERID_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private static final int __LOANAMT_ISSET_ID = 6;
  private static final int __INTEREST_ISSET_ID = 7;
  private static final int __RECMONEY_ISSET_ID = 8;
  private static final int __REMAININGRECMONEY_ISSET_ID = 9;
  private static final int __OVERDUEFEE_ISSET_ID = 10;
  private static final int __OVERDUEDAY_ISSET_ID = 11;
  private static final int __EXTENSIONFEE_ISSET_ID = 12;
  private static final int __FEETOTAL_ISSET_ID = 13;
  private static final int __INNEROROUT_ISSET_ID = 14;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 15;
  private static final int __RECFEESTATUS_ISSET_ID = 16;
  private static final int __REALLOAN_ISSET_ID = 17;
  private static final int __POUNDAGE_ISSET_ID = 18;
  private static final int __LOANAMTMAX_ISSET_ID = 19;
  private static final int __HANDLEFLOWID_ISSET_ID = 20;
  private static final int __ISCHECHAN_ISSET_ID = 21;
  private static final int __CHECHANUSERID_ISSET_ID = 22;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("deptName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPT_ID, new org.apache.thrift.meta_data.FieldMetaData("deptId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_INTEREST_DATE, new org.apache.thrift.meta_data.FieldMetaData("recInterestDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REC_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("planRecLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_MONEY, new org.apache.thrift.meta_data.FieldMetaData("recMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("recLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMAINING_REC_MONEY, new org.apache.thrift.meta_data.FieldMetaData("remainingRecMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FEE, new org.apache.thrift.meta_data.FieldMetaData("overdueFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_DATE, new org.apache.thrift.meta_data.FieldMetaData("extensionDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("feeTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("oldLoanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER_OR_OUT, new org.apache.thrift.meta_data.FieldMetaData("innerOrOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_FEE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("recFeeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIZ_HANDLE_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizHandleDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_LOAN, new org.apache.thrift.meta_data.FieldMetaData("realLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_AMT_MAX, new org.apache.thrift.meta_data.FieldMetaData("loanAmtMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HANDLE_FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("handleFlowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_FLOW_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("handleFlowStartDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_FLOW_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("handleFlowEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_FLOOR_DATE, new org.apache.thrift.meta_data.FieldMetaData("foreclosureFloorDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GET_OLD_LICENSE_DATE, new org.apache.thrift.meta_data.FieldMetaData("getOldLicenseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_MORTGAGE_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelMortgageDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_DATE, new org.apache.thrift.meta_data.FieldMetaData("transferDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GET_NEW_LICENSE_DATE, new org.apache.thrift.meta_data.FieldMetaData("getNewLicenseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_DATE, new org.apache.thrift.meta_data.FieldMetaData("mortgageDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER_OR_OUT_NAME, new org.apache.thrift.meta_data.FieldMetaData("innerOrOutName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_STATUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessSourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECHAN_CAUSE, new org.apache.thrift.meta_data.FieldMetaData("chechanCause", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECHAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("chechanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECHAN_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("chechanUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("newLoanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_LOAN_BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("newLoanBankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_NAME, new org.apache.thrift.meta_data.FieldMetaData("applyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECHAN_USER, new org.apache.thrift.meta_data.FieldMetaData("chechanUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChechanReport.class, metaDataMap);
  }

  public ChechanReport() {
    this.page = 1;

    this.rows = 10;

  }

  public ChechanReport(
    int projectId,
    String projectName,
    String projectNumber,
    int businessSource,
    String deptName,
    int deptId,
    String pmUserName,
    int pmUserId,
    int page,
    int rows,
    List<Integer> userIds,
    String housePropertyCard,
    String sellerName,
    String buyerName,
    double loanAmt,
    double interest,
    String recInterestDate,
    String loanDate,
    String planRecLoanDate,
    double recMoney,
    String recLoanDate,
    double remainingRecMoney,
    double overdueFee,
    int overdueDay,
    double extensionFee,
    String extensionDate,
    double feeTotal,
    String oldLoanBank,
    String productName,
    int innerOrOut,
    int foreclosureStatus,
    int recFeeStatus,
    String bizHandleDynamic,
    double realLoan,
    double poundage,
    double loanAmtMax,
    int handleFlowId,
    String handleFlowStartDate,
    String handleFlowEndDate,
    String foreclosureFloorDate,
    String getOldLicenseDate,
    String cancelMortgageDate,
    String transferDate,
    String getNewLicenseDate,
    String mortgageDate,
    String innerOrOutName,
    String foreclosureStatusName,
    String businessSourceName,
    String loanEndDate,
    String businessSourceStr,
    int isChechan,
    String chechanCause,
    String chechanDate,
    int chechanUserId,
    String newLoanBank,
    String newLoanBankBranch,
    String applyName,
    String paymentType,
    String chechanUser)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.deptName = deptName;
    this.deptId = deptId;
    setDeptIdIsSet(true);
    this.pmUserName = pmUserName;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.housePropertyCard = housePropertyCard;
    this.sellerName = sellerName;
    this.buyerName = buyerName;
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
    this.recInterestDate = recInterestDate;
    this.loanDate = loanDate;
    this.planRecLoanDate = planRecLoanDate;
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    this.recLoanDate = recLoanDate;
    this.remainingRecMoney = remainingRecMoney;
    setRemainingRecMoneyIsSet(true);
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    this.extensionDate = extensionDate;
    this.feeTotal = feeTotal;
    setFeeTotalIsSet(true);
    this.oldLoanBank = oldLoanBank;
    this.productName = productName;
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.recFeeStatus = recFeeStatus;
    setRecFeeStatusIsSet(true);
    this.bizHandleDynamic = bizHandleDynamic;
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.loanAmtMax = loanAmtMax;
    setLoanAmtMaxIsSet(true);
    this.handleFlowId = handleFlowId;
    setHandleFlowIdIsSet(true);
    this.handleFlowStartDate = handleFlowStartDate;
    this.handleFlowEndDate = handleFlowEndDate;
    this.foreclosureFloorDate = foreclosureFloorDate;
    this.getOldLicenseDate = getOldLicenseDate;
    this.cancelMortgageDate = cancelMortgageDate;
    this.transferDate = transferDate;
    this.getNewLicenseDate = getNewLicenseDate;
    this.mortgageDate = mortgageDate;
    this.innerOrOutName = innerOrOutName;
    this.foreclosureStatusName = foreclosureStatusName;
    this.businessSourceName = businessSourceName;
    this.loanEndDate = loanEndDate;
    this.businessSourceStr = businessSourceStr;
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.chechanCause = chechanCause;
    this.chechanDate = chechanDate;
    this.chechanUserId = chechanUserId;
    setChechanUserIdIsSet(true);
    this.newLoanBank = newLoanBank;
    this.newLoanBankBranch = newLoanBankBranch;
    this.applyName = applyName;
    this.paymentType = paymentType;
    this.chechanUser = chechanUser;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChechanReport(ChechanReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.businessSource = other.businessSource;
    if (other.isSetDeptName()) {
      this.deptName = other.deptName;
    }
    this.deptId = other.deptId;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    this.pmUserId = other.pmUserId;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    this.loanAmt = other.loanAmt;
    this.interest = other.interest;
    if (other.isSetRecInterestDate()) {
      this.recInterestDate = other.recInterestDate;
    }
    if (other.isSetLoanDate()) {
      this.loanDate = other.loanDate;
    }
    if (other.isSetPlanRecLoanDate()) {
      this.planRecLoanDate = other.planRecLoanDate;
    }
    this.recMoney = other.recMoney;
    if (other.isSetRecLoanDate()) {
      this.recLoanDate = other.recLoanDate;
    }
    this.remainingRecMoney = other.remainingRecMoney;
    this.overdueFee = other.overdueFee;
    this.overdueDay = other.overdueDay;
    this.extensionFee = other.extensionFee;
    if (other.isSetExtensionDate()) {
      this.extensionDate = other.extensionDate;
    }
    this.feeTotal = other.feeTotal;
    if (other.isSetOldLoanBank()) {
      this.oldLoanBank = other.oldLoanBank;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.innerOrOut = other.innerOrOut;
    this.foreclosureStatus = other.foreclosureStatus;
    this.recFeeStatus = other.recFeeStatus;
    if (other.isSetBizHandleDynamic()) {
      this.bizHandleDynamic = other.bizHandleDynamic;
    }
    this.realLoan = other.realLoan;
    this.poundage = other.poundage;
    this.loanAmtMax = other.loanAmtMax;
    this.handleFlowId = other.handleFlowId;
    if (other.isSetHandleFlowStartDate()) {
      this.handleFlowStartDate = other.handleFlowStartDate;
    }
    if (other.isSetHandleFlowEndDate()) {
      this.handleFlowEndDate = other.handleFlowEndDate;
    }
    if (other.isSetForeclosureFloorDate()) {
      this.foreclosureFloorDate = other.foreclosureFloorDate;
    }
    if (other.isSetGetOldLicenseDate()) {
      this.getOldLicenseDate = other.getOldLicenseDate;
    }
    if (other.isSetCancelMortgageDate()) {
      this.cancelMortgageDate = other.cancelMortgageDate;
    }
    if (other.isSetTransferDate()) {
      this.transferDate = other.transferDate;
    }
    if (other.isSetGetNewLicenseDate()) {
      this.getNewLicenseDate = other.getNewLicenseDate;
    }
    if (other.isSetMortgageDate()) {
      this.mortgageDate = other.mortgageDate;
    }
    if (other.isSetInnerOrOutName()) {
      this.innerOrOutName = other.innerOrOutName;
    }
    if (other.isSetForeclosureStatusName()) {
      this.foreclosureStatusName = other.foreclosureStatusName;
    }
    if (other.isSetBusinessSourceName()) {
      this.businessSourceName = other.businessSourceName;
    }
    if (other.isSetLoanEndDate()) {
      this.loanEndDate = other.loanEndDate;
    }
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    this.isChechan = other.isChechan;
    if (other.isSetChechanCause()) {
      this.chechanCause = other.chechanCause;
    }
    if (other.isSetChechanDate()) {
      this.chechanDate = other.chechanDate;
    }
    this.chechanUserId = other.chechanUserId;
    if (other.isSetNewLoanBank()) {
      this.newLoanBank = other.newLoanBank;
    }
    if (other.isSetNewLoanBankBranch()) {
      this.newLoanBankBranch = other.newLoanBankBranch;
    }
    if (other.isSetApplyName()) {
      this.applyName = other.applyName;
    }
    if (other.isSetPaymentType()) {
      this.paymentType = other.paymentType;
    }
    if (other.isSetChechanUser()) {
      this.chechanUser = other.chechanUser;
    }
  }

  public ChechanReport deepCopy() {
    return new ChechanReport(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNumber = null;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    this.deptName = null;
    setDeptIdIsSet(false);
    this.deptId = 0;
    this.pmUserName = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.housePropertyCard = null;
    this.sellerName = null;
    this.buyerName = null;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    this.recInterestDate = null;
    this.loanDate = null;
    this.planRecLoanDate = null;
    setRecMoneyIsSet(false);
    this.recMoney = 0.0;
    this.recLoanDate = null;
    setRemainingRecMoneyIsSet(false);
    this.remainingRecMoney = 0.0;
    setOverdueFeeIsSet(false);
    this.overdueFee = 0.0;
    setOverdueDayIsSet(false);
    this.overdueDay = 0;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
    this.extensionDate = null;
    setFeeTotalIsSet(false);
    this.feeTotal = 0.0;
    this.oldLoanBank = null;
    this.productName = null;
    setInnerOrOutIsSet(false);
    this.innerOrOut = 0;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    setRecFeeStatusIsSet(false);
    this.recFeeStatus = 0;
    this.bizHandleDynamic = null;
    setRealLoanIsSet(false);
    this.realLoan = 0.0;
    setPoundageIsSet(false);
    this.poundage = 0.0;
    setLoanAmtMaxIsSet(false);
    this.loanAmtMax = 0.0;
    setHandleFlowIdIsSet(false);
    this.handleFlowId = 0;
    this.handleFlowStartDate = null;
    this.handleFlowEndDate = null;
    this.foreclosureFloorDate = null;
    this.getOldLicenseDate = null;
    this.cancelMortgageDate = null;
    this.transferDate = null;
    this.getNewLicenseDate = null;
    this.mortgageDate = null;
    this.innerOrOutName = null;
    this.foreclosureStatusName = null;
    this.businessSourceName = null;
    this.loanEndDate = null;
    this.businessSourceStr = null;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    this.chechanCause = null;
    this.chechanDate = null;
    setChechanUserIdIsSet(false);
    this.chechanUserId = 0;
    this.newLoanBank = null;
    this.newLoanBankBranch = null;
    this.applyName = null;
    this.paymentType = null;
    this.chechanUser = null;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ChechanReport setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ChechanReport setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ChechanReport setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public ChechanReport setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID, value);
  }

  public String getDeptName() {
    return this.deptName;
  }

  public ChechanReport setDeptName(String deptName) {
    this.deptName = deptName;
    return this;
  }

  public void unsetDeptName() {
    this.deptName = null;
  }

  /** Returns true if field deptName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptName() {
    return this.deptName != null;
  }

  public void setDeptNameIsSet(boolean value) {
    if (!value) {
      this.deptName = null;
    }
  }

  public int getDeptId() {
    return this.deptId;
  }

  public ChechanReport setDeptId(int deptId) {
    this.deptId = deptId;
    setDeptIdIsSet(true);
    return this;
  }

  public void unsetDeptId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPTID_ISSET_ID);
  }

  /** Returns true if field deptId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPTID_ISSET_ID);
  }

  public void setDeptIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPTID_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public ChechanReport setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public ChechanReport setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public ChechanReport setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ChechanReport setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ChechanReport setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public ChechanReport setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public ChechanReport setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public ChechanReport setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public ChechanReport setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMT_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public ChechanReport setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public String getRecInterestDate() {
    return this.recInterestDate;
  }

  public ChechanReport setRecInterestDate(String recInterestDate) {
    this.recInterestDate = recInterestDate;
    return this;
  }

  public void unsetRecInterestDate() {
    this.recInterestDate = null;
  }

  /** Returns true if field recInterestDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecInterestDate() {
    return this.recInterestDate != null;
  }

  public void setRecInterestDateIsSet(boolean value) {
    if (!value) {
      this.recInterestDate = null;
    }
  }

  public String getLoanDate() {
    return this.loanDate;
  }

  public ChechanReport setLoanDate(String loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  public void unsetLoanDate() {
    this.loanDate = null;
  }

  /** Returns true if field loanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDate() {
    return this.loanDate != null;
  }

  public void setLoanDateIsSet(boolean value) {
    if (!value) {
      this.loanDate = null;
    }
  }

  public String getPlanRecLoanDate() {
    return this.planRecLoanDate;
  }

  public ChechanReport setPlanRecLoanDate(String planRecLoanDate) {
    this.planRecLoanDate = planRecLoanDate;
    return this;
  }

  public void unsetPlanRecLoanDate() {
    this.planRecLoanDate = null;
  }

  /** Returns true if field planRecLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRecLoanDate() {
    return this.planRecLoanDate != null;
  }

  public void setPlanRecLoanDateIsSet(boolean value) {
    if (!value) {
      this.planRecLoanDate = null;
    }
  }

  public double getRecMoney() {
    return this.recMoney;
  }

  public ChechanReport setRecMoney(double recMoney) {
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    return this;
  }

  public void unsetRecMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  /** Returns true if field recMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRecMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  public void setRecMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECMONEY_ISSET_ID, value);
  }

  public String getRecLoanDate() {
    return this.recLoanDate;
  }

  public ChechanReport setRecLoanDate(String recLoanDate) {
    this.recLoanDate = recLoanDate;
    return this;
  }

  public void unsetRecLoanDate() {
    this.recLoanDate = null;
  }

  /** Returns true if field recLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecLoanDate() {
    return this.recLoanDate != null;
  }

  public void setRecLoanDateIsSet(boolean value) {
    if (!value) {
      this.recLoanDate = null;
    }
  }

  public double getRemainingRecMoney() {
    return this.remainingRecMoney;
  }

  public ChechanReport setRemainingRecMoney(double remainingRecMoney) {
    this.remainingRecMoney = remainingRecMoney;
    setRemainingRecMoneyIsSet(true);
    return this;
  }

  public void unsetRemainingRecMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAININGRECMONEY_ISSET_ID);
  }

  /** Returns true if field remainingRecMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainingRecMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAININGRECMONEY_ISSET_ID);
  }

  public void setRemainingRecMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAININGRECMONEY_ISSET_ID, value);
  }

  public double getOverdueFee() {
    return this.overdueFee;
  }

  public ChechanReport setOverdueFee(double overdueFee) {
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    return this;
  }

  public void unsetOverdueFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  /** Returns true if field overdueFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  public void setOverdueFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID, value);
  }

  public int getOverdueDay() {
    return this.overdueDay;
  }

  public ChechanReport setOverdueDay(int overdueDay) {
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    return this;
  }

  public void unsetOverdueDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  /** Returns true if field overdueDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  public void setOverdueDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID, value);
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public ChechanReport setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID, value);
  }

  public String getExtensionDate() {
    return this.extensionDate;
  }

  public ChechanReport setExtensionDate(String extensionDate) {
    this.extensionDate = extensionDate;
    return this;
  }

  public void unsetExtensionDate() {
    this.extensionDate = null;
  }

  /** Returns true if field extensionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionDate() {
    return this.extensionDate != null;
  }

  public void setExtensionDateIsSet(boolean value) {
    if (!value) {
      this.extensionDate = null;
    }
  }

  public double getFeeTotal() {
    return this.feeTotal;
  }

  public ChechanReport setFeeTotal(double feeTotal) {
    this.feeTotal = feeTotal;
    setFeeTotalIsSet(true);
    return this;
  }

  public void unsetFeeTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEETOTAL_ISSET_ID);
  }

  /** Returns true if field feeTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __FEETOTAL_ISSET_ID);
  }

  public void setFeeTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEETOTAL_ISSET_ID, value);
  }

  public String getOldLoanBank() {
    return this.oldLoanBank;
  }

  public ChechanReport setOldLoanBank(String oldLoanBank) {
    this.oldLoanBank = oldLoanBank;
    return this;
  }

  public void unsetOldLoanBank() {
    this.oldLoanBank = null;
  }

  /** Returns true if field oldLoanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanBank() {
    return this.oldLoanBank != null;
  }

  public void setOldLoanBankIsSet(boolean value) {
    if (!value) {
      this.oldLoanBank = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public ChechanReport setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public int getInnerOrOut() {
    return this.innerOrOut;
  }

  public ChechanReport setInnerOrOut(int innerOrOut) {
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    return this;
  }

  public void unsetInnerOrOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  /** Returns true if field innerOrOut is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOut() {
    return EncodingUtils.testBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  public void setInnerOrOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INNEROROUT_ISSET_ID, value);
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public ChechanReport setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID, value);
  }

  public int getRecFeeStatus() {
    return this.recFeeStatus;
  }

  public ChechanReport setRecFeeStatus(int recFeeStatus) {
    this.recFeeStatus = recFeeStatus;
    setRecFeeStatusIsSet(true);
    return this;
  }

  public void unsetRecFeeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID);
  }

  /** Returns true if field recFeeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRecFeeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID);
  }

  public void setRecFeeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID, value);
  }

  public String getBizHandleDynamic() {
    return this.bizHandleDynamic;
  }

  public ChechanReport setBizHandleDynamic(String bizHandleDynamic) {
    this.bizHandleDynamic = bizHandleDynamic;
    return this;
  }

  public void unsetBizHandleDynamic() {
    this.bizHandleDynamic = null;
  }

  /** Returns true if field bizHandleDynamic is set (has been assigned a value) and false otherwise */
  public boolean isSetBizHandleDynamic() {
    return this.bizHandleDynamic != null;
  }

  public void setBizHandleDynamicIsSet(boolean value) {
    if (!value) {
      this.bizHandleDynamic = null;
    }
  }

  public double getRealLoan() {
    return this.realLoan;
  }

  public ChechanReport setRealLoan(double realLoan) {
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    return this;
  }

  public void unsetRealLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  /** Returns true if field realLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetRealLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  public void setRealLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALLOAN_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public ChechanReport setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public double getLoanAmtMax() {
    return this.loanAmtMax;
  }

  public ChechanReport setLoanAmtMax(double loanAmtMax) {
    this.loanAmtMax = loanAmtMax;
    setLoanAmtMaxIsSet(true);
    return this;
  }

  public void unsetLoanAmtMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMTMAX_ISSET_ID);
  }

  /** Returns true if field loanAmtMax is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmtMax() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMTMAX_ISSET_ID);
  }

  public void setLoanAmtMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMTMAX_ISSET_ID, value);
  }

  public int getHandleFlowId() {
    return this.handleFlowId;
  }

  public ChechanReport setHandleFlowId(int handleFlowId) {
    this.handleFlowId = handleFlowId;
    setHandleFlowIdIsSet(true);
    return this;
  }

  public void unsetHandleFlowId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID);
  }

  /** Returns true if field handleFlowId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleFlowId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID);
  }

  public void setHandleFlowIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID, value);
  }

  public String getHandleFlowStartDate() {
    return this.handleFlowStartDate;
  }

  public ChechanReport setHandleFlowStartDate(String handleFlowStartDate) {
    this.handleFlowStartDate = handleFlowStartDate;
    return this;
  }

  public void unsetHandleFlowStartDate() {
    this.handleFlowStartDate = null;
  }

  /** Returns true if field handleFlowStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleFlowStartDate() {
    return this.handleFlowStartDate != null;
  }

  public void setHandleFlowStartDateIsSet(boolean value) {
    if (!value) {
      this.handleFlowStartDate = null;
    }
  }

  public String getHandleFlowEndDate() {
    return this.handleFlowEndDate;
  }

  public ChechanReport setHandleFlowEndDate(String handleFlowEndDate) {
    this.handleFlowEndDate = handleFlowEndDate;
    return this;
  }

  public void unsetHandleFlowEndDate() {
    this.handleFlowEndDate = null;
  }

  /** Returns true if field handleFlowEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleFlowEndDate() {
    return this.handleFlowEndDate != null;
  }

  public void setHandleFlowEndDateIsSet(boolean value) {
    if (!value) {
      this.handleFlowEndDate = null;
    }
  }

  public String getForeclosureFloorDate() {
    return this.foreclosureFloorDate;
  }

  public ChechanReport setForeclosureFloorDate(String foreclosureFloorDate) {
    this.foreclosureFloorDate = foreclosureFloorDate;
    return this;
  }

  public void unsetForeclosureFloorDate() {
    this.foreclosureFloorDate = null;
  }

  /** Returns true if field foreclosureFloorDate is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureFloorDate() {
    return this.foreclosureFloorDate != null;
  }

  public void setForeclosureFloorDateIsSet(boolean value) {
    if (!value) {
      this.foreclosureFloorDate = null;
    }
  }

  public String getGetOldLicenseDate() {
    return this.getOldLicenseDate;
  }

  public ChechanReport setGetOldLicenseDate(String getOldLicenseDate) {
    this.getOldLicenseDate = getOldLicenseDate;
    return this;
  }

  public void unsetGetOldLicenseDate() {
    this.getOldLicenseDate = null;
  }

  /** Returns true if field getOldLicenseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGetOldLicenseDate() {
    return this.getOldLicenseDate != null;
  }

  public void setGetOldLicenseDateIsSet(boolean value) {
    if (!value) {
      this.getOldLicenseDate = null;
    }
  }

  public String getCancelMortgageDate() {
    return this.cancelMortgageDate;
  }

  public ChechanReport setCancelMortgageDate(String cancelMortgageDate) {
    this.cancelMortgageDate = cancelMortgageDate;
    return this;
  }

  public void unsetCancelMortgageDate() {
    this.cancelMortgageDate = null;
  }

  /** Returns true if field cancelMortgageDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelMortgageDate() {
    return this.cancelMortgageDate != null;
  }

  public void setCancelMortgageDateIsSet(boolean value) {
    if (!value) {
      this.cancelMortgageDate = null;
    }
  }

  public String getTransferDate() {
    return this.transferDate;
  }

  public ChechanReport setTransferDate(String transferDate) {
    this.transferDate = transferDate;
    return this;
  }

  public void unsetTransferDate() {
    this.transferDate = null;
  }

  /** Returns true if field transferDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferDate() {
    return this.transferDate != null;
  }

  public void setTransferDateIsSet(boolean value) {
    if (!value) {
      this.transferDate = null;
    }
  }

  public String getGetNewLicenseDate() {
    return this.getNewLicenseDate;
  }

  public ChechanReport setGetNewLicenseDate(String getNewLicenseDate) {
    this.getNewLicenseDate = getNewLicenseDate;
    return this;
  }

  public void unsetGetNewLicenseDate() {
    this.getNewLicenseDate = null;
  }

  /** Returns true if field getNewLicenseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGetNewLicenseDate() {
    return this.getNewLicenseDate != null;
  }

  public void setGetNewLicenseDateIsSet(boolean value) {
    if (!value) {
      this.getNewLicenseDate = null;
    }
  }

  public String getMortgageDate() {
    return this.mortgageDate;
  }

  public ChechanReport setMortgageDate(String mortgageDate) {
    this.mortgageDate = mortgageDate;
    return this;
  }

  public void unsetMortgageDate() {
    this.mortgageDate = null;
  }

  /** Returns true if field mortgageDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageDate() {
    return this.mortgageDate != null;
  }

  public void setMortgageDateIsSet(boolean value) {
    if (!value) {
      this.mortgageDate = null;
    }
  }

  public String getInnerOrOutName() {
    return this.innerOrOutName;
  }

  public ChechanReport setInnerOrOutName(String innerOrOutName) {
    this.innerOrOutName = innerOrOutName;
    return this;
  }

  public void unsetInnerOrOutName() {
    this.innerOrOutName = null;
  }

  /** Returns true if field innerOrOutName is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOutName() {
    return this.innerOrOutName != null;
  }

  public void setInnerOrOutNameIsSet(boolean value) {
    if (!value) {
      this.innerOrOutName = null;
    }
  }

  public String getForeclosureStatusName() {
    return this.foreclosureStatusName;
  }

  public ChechanReport setForeclosureStatusName(String foreclosureStatusName) {
    this.foreclosureStatusName = foreclosureStatusName;
    return this;
  }

  public void unsetForeclosureStatusName() {
    this.foreclosureStatusName = null;
  }

  /** Returns true if field foreclosureStatusName is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatusName() {
    return this.foreclosureStatusName != null;
  }

  public void setForeclosureStatusNameIsSet(boolean value) {
    if (!value) {
      this.foreclosureStatusName = null;
    }
  }

  public String getBusinessSourceName() {
    return this.businessSourceName;
  }

  public ChechanReport setBusinessSourceName(String businessSourceName) {
    this.businessSourceName = businessSourceName;
    return this;
  }

  public void unsetBusinessSourceName() {
    this.businessSourceName = null;
  }

  /** Returns true if field businessSourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceName() {
    return this.businessSourceName != null;
  }

  public void setBusinessSourceNameIsSet(boolean value) {
    if (!value) {
      this.businessSourceName = null;
    }
  }

  public String getLoanEndDate() {
    return this.loanEndDate;
  }

  public ChechanReport setLoanEndDate(String loanEndDate) {
    this.loanEndDate = loanEndDate;
    return this;
  }

  public void unsetLoanEndDate() {
    this.loanEndDate = null;
  }

  /** Returns true if field loanEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanEndDate() {
    return this.loanEndDate != null;
  }

  public void setLoanEndDateIsSet(boolean value) {
    if (!value) {
      this.loanEndDate = null;
    }
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public ChechanReport setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public ChechanReport setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public String getChechanCause() {
    return this.chechanCause;
  }

  public ChechanReport setChechanCause(String chechanCause) {
    this.chechanCause = chechanCause;
    return this;
  }

  public void unsetChechanCause() {
    this.chechanCause = null;
  }

  /** Returns true if field chechanCause is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanCause() {
    return this.chechanCause != null;
  }

  public void setChechanCauseIsSet(boolean value) {
    if (!value) {
      this.chechanCause = null;
    }
  }

  public String getChechanDate() {
    return this.chechanDate;
  }

  public ChechanReport setChechanDate(String chechanDate) {
    this.chechanDate = chechanDate;
    return this;
  }

  public void unsetChechanDate() {
    this.chechanDate = null;
  }

  /** Returns true if field chechanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanDate() {
    return this.chechanDate != null;
  }

  public void setChechanDateIsSet(boolean value) {
    if (!value) {
      this.chechanDate = null;
    }
  }

  public int getChechanUserId() {
    return this.chechanUserId;
  }

  public ChechanReport setChechanUserId(int chechanUserId) {
    this.chechanUserId = chechanUserId;
    setChechanUserIdIsSet(true);
    return this;
  }

  public void unsetChechanUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECHANUSERID_ISSET_ID);
  }

  /** Returns true if field chechanUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECHANUSERID_ISSET_ID);
  }

  public void setChechanUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECHANUSERID_ISSET_ID, value);
  }

  public String getNewLoanBank() {
    return this.newLoanBank;
  }

  public ChechanReport setNewLoanBank(String newLoanBank) {
    this.newLoanBank = newLoanBank;
    return this;
  }

  public void unsetNewLoanBank() {
    this.newLoanBank = null;
  }

  /** Returns true if field newLoanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanBank() {
    return this.newLoanBank != null;
  }

  public void setNewLoanBankIsSet(boolean value) {
    if (!value) {
      this.newLoanBank = null;
    }
  }

  public String getNewLoanBankBranch() {
    return this.newLoanBankBranch;
  }

  public ChechanReport setNewLoanBankBranch(String newLoanBankBranch) {
    this.newLoanBankBranch = newLoanBankBranch;
    return this;
  }

  public void unsetNewLoanBankBranch() {
    this.newLoanBankBranch = null;
  }

  /** Returns true if field newLoanBankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanBankBranch() {
    return this.newLoanBankBranch != null;
  }

  public void setNewLoanBankBranchIsSet(boolean value) {
    if (!value) {
      this.newLoanBankBranch = null;
    }
  }

  public String getApplyName() {
    return this.applyName;
  }

  public ChechanReport setApplyName(String applyName) {
    this.applyName = applyName;
    return this;
  }

  public void unsetApplyName() {
    this.applyName = null;
  }

  /** Returns true if field applyName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyName() {
    return this.applyName != null;
  }

  public void setApplyNameIsSet(boolean value) {
    if (!value) {
      this.applyName = null;
    }
  }

  public String getPaymentType() {
    return this.paymentType;
  }

  public ChechanReport setPaymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  public void unsetPaymentType() {
    this.paymentType = null;
  }

  /** Returns true if field paymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentType() {
    return this.paymentType != null;
  }

  public void setPaymentTypeIsSet(boolean value) {
    if (!value) {
      this.paymentType = null;
    }
  }

  public String getChechanUser() {
    return this.chechanUser;
  }

  public ChechanReport setChechanUser(String chechanUser) {
    this.chechanUser = chechanUser;
    return this;
  }

  public void unsetChechanUser() {
    this.chechanUser = null;
  }

  /** Returns true if field chechanUser is set (has been assigned a value) and false otherwise */
  public boolean isSetChechanUser() {
    return this.chechanUser != null;
  }

  public void setChechanUserIsSet(boolean value) {
    if (!value) {
      this.chechanUser = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case DEPT_NAME:
      if (value == null) {
        unsetDeptName();
      } else {
        setDeptName((String)value);
      }
      break;

    case DEPT_ID:
      if (value == null) {
        unsetDeptId();
      } else {
        setDeptId((Integer)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case REC_INTEREST_DATE:
      if (value == null) {
        unsetRecInterestDate();
      } else {
        setRecInterestDate((String)value);
      }
      break;

    case LOAN_DATE:
      if (value == null) {
        unsetLoanDate();
      } else {
        setLoanDate((String)value);
      }
      break;

    case PLAN_REC_LOAN_DATE:
      if (value == null) {
        unsetPlanRecLoanDate();
      } else {
        setPlanRecLoanDate((String)value);
      }
      break;

    case REC_MONEY:
      if (value == null) {
        unsetRecMoney();
      } else {
        setRecMoney((Double)value);
      }
      break;

    case REC_LOAN_DATE:
      if (value == null) {
        unsetRecLoanDate();
      } else {
        setRecLoanDate((String)value);
      }
      break;

    case REMAINING_REC_MONEY:
      if (value == null) {
        unsetRemainingRecMoney();
      } else {
        setRemainingRecMoney((Double)value);
      }
      break;

    case OVERDUE_FEE:
      if (value == null) {
        unsetOverdueFee();
      } else {
        setOverdueFee((Double)value);
      }
      break;

    case OVERDUE_DAY:
      if (value == null) {
        unsetOverdueDay();
      } else {
        setOverdueDay((Integer)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    case EXTENSION_DATE:
      if (value == null) {
        unsetExtensionDate();
      } else {
        setExtensionDate((String)value);
      }
      break;

    case FEE_TOTAL:
      if (value == null) {
        unsetFeeTotal();
      } else {
        setFeeTotal((Double)value);
      }
      break;

    case OLD_LOAN_BANK:
      if (value == null) {
        unsetOldLoanBank();
      } else {
        setOldLoanBank((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case INNER_OR_OUT:
      if (value == null) {
        unsetInnerOrOut();
      } else {
        setInnerOrOut((Integer)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case REC_FEE_STATUS:
      if (value == null) {
        unsetRecFeeStatus();
      } else {
        setRecFeeStatus((Integer)value);
      }
      break;

    case BIZ_HANDLE_DYNAMIC:
      if (value == null) {
        unsetBizHandleDynamic();
      } else {
        setBizHandleDynamic((String)value);
      }
      break;

    case REAL_LOAN:
      if (value == null) {
        unsetRealLoan();
      } else {
        setRealLoan((Double)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case LOAN_AMT_MAX:
      if (value == null) {
        unsetLoanAmtMax();
      } else {
        setLoanAmtMax((Double)value);
      }
      break;

    case HANDLE_FLOW_ID:
      if (value == null) {
        unsetHandleFlowId();
      } else {
        setHandleFlowId((Integer)value);
      }
      break;

    case HANDLE_FLOW_START_DATE:
      if (value == null) {
        unsetHandleFlowStartDate();
      } else {
        setHandleFlowStartDate((String)value);
      }
      break;

    case HANDLE_FLOW_END_DATE:
      if (value == null) {
        unsetHandleFlowEndDate();
      } else {
        setHandleFlowEndDate((String)value);
      }
      break;

    case FORECLOSURE_FLOOR_DATE:
      if (value == null) {
        unsetForeclosureFloorDate();
      } else {
        setForeclosureFloorDate((String)value);
      }
      break;

    case GET_OLD_LICENSE_DATE:
      if (value == null) {
        unsetGetOldLicenseDate();
      } else {
        setGetOldLicenseDate((String)value);
      }
      break;

    case CANCEL_MORTGAGE_DATE:
      if (value == null) {
        unsetCancelMortgageDate();
      } else {
        setCancelMortgageDate((String)value);
      }
      break;

    case TRANSFER_DATE:
      if (value == null) {
        unsetTransferDate();
      } else {
        setTransferDate((String)value);
      }
      break;

    case GET_NEW_LICENSE_DATE:
      if (value == null) {
        unsetGetNewLicenseDate();
      } else {
        setGetNewLicenseDate((String)value);
      }
      break;

    case MORTGAGE_DATE:
      if (value == null) {
        unsetMortgageDate();
      } else {
        setMortgageDate((String)value);
      }
      break;

    case INNER_OR_OUT_NAME:
      if (value == null) {
        unsetInnerOrOutName();
      } else {
        setInnerOrOutName((String)value);
      }
      break;

    case FORECLOSURE_STATUS_NAME:
      if (value == null) {
        unsetForeclosureStatusName();
      } else {
        setForeclosureStatusName((String)value);
      }
      break;

    case BUSINESS_SOURCE_NAME:
      if (value == null) {
        unsetBusinessSourceName();
      } else {
        setBusinessSourceName((String)value);
      }
      break;

    case LOAN_END_DATE:
      if (value == null) {
        unsetLoanEndDate();
      } else {
        setLoanEndDate((String)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case CHECHAN_CAUSE:
      if (value == null) {
        unsetChechanCause();
      } else {
        setChechanCause((String)value);
      }
      break;

    case CHECHAN_DATE:
      if (value == null) {
        unsetChechanDate();
      } else {
        setChechanDate((String)value);
      }
      break;

    case CHECHAN_USER_ID:
      if (value == null) {
        unsetChechanUserId();
      } else {
        setChechanUserId((Integer)value);
      }
      break;

    case NEW_LOAN_BANK:
      if (value == null) {
        unsetNewLoanBank();
      } else {
        setNewLoanBank((String)value);
      }
      break;

    case NEW_LOAN_BANK_BRANCH:
      if (value == null) {
        unsetNewLoanBankBranch();
      } else {
        setNewLoanBankBranch((String)value);
      }
      break;

    case APPLY_NAME:
      if (value == null) {
        unsetApplyName();
      } else {
        setApplyName((String)value);
      }
      break;

    case PAYMENT_TYPE:
      if (value == null) {
        unsetPaymentType();
      } else {
        setPaymentType((String)value);
      }
      break;

    case CHECHAN_USER:
      if (value == null) {
        unsetChechanUser();
      } else {
        setChechanUser((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case DEPT_NAME:
      return getDeptName();

    case DEPT_ID:
      return Integer.valueOf(getDeptId());

    case PM_USER_NAME:
      return getPmUserName();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case SELLER_NAME:
      return getSellerName();

    case BUYER_NAME:
      return getBuyerName();

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case INTEREST:
      return Double.valueOf(getInterest());

    case REC_INTEREST_DATE:
      return getRecInterestDate();

    case LOAN_DATE:
      return getLoanDate();

    case PLAN_REC_LOAN_DATE:
      return getPlanRecLoanDate();

    case REC_MONEY:
      return Double.valueOf(getRecMoney());

    case REC_LOAN_DATE:
      return getRecLoanDate();

    case REMAINING_REC_MONEY:
      return Double.valueOf(getRemainingRecMoney());

    case OVERDUE_FEE:
      return Double.valueOf(getOverdueFee());

    case OVERDUE_DAY:
      return Integer.valueOf(getOverdueDay());

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    case EXTENSION_DATE:
      return getExtensionDate();

    case FEE_TOTAL:
      return Double.valueOf(getFeeTotal());

    case OLD_LOAN_BANK:
      return getOldLoanBank();

    case PRODUCT_NAME:
      return getProductName();

    case INNER_OR_OUT:
      return Integer.valueOf(getInnerOrOut());

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case REC_FEE_STATUS:
      return Integer.valueOf(getRecFeeStatus());

    case BIZ_HANDLE_DYNAMIC:
      return getBizHandleDynamic();

    case REAL_LOAN:
      return Double.valueOf(getRealLoan());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case LOAN_AMT_MAX:
      return Double.valueOf(getLoanAmtMax());

    case HANDLE_FLOW_ID:
      return Integer.valueOf(getHandleFlowId());

    case HANDLE_FLOW_START_DATE:
      return getHandleFlowStartDate();

    case HANDLE_FLOW_END_DATE:
      return getHandleFlowEndDate();

    case FORECLOSURE_FLOOR_DATE:
      return getForeclosureFloorDate();

    case GET_OLD_LICENSE_DATE:
      return getGetOldLicenseDate();

    case CANCEL_MORTGAGE_DATE:
      return getCancelMortgageDate();

    case TRANSFER_DATE:
      return getTransferDate();

    case GET_NEW_LICENSE_DATE:
      return getGetNewLicenseDate();

    case MORTGAGE_DATE:
      return getMortgageDate();

    case INNER_OR_OUT_NAME:
      return getInnerOrOutName();

    case FORECLOSURE_STATUS_NAME:
      return getForeclosureStatusName();

    case BUSINESS_SOURCE_NAME:
      return getBusinessSourceName();

    case LOAN_END_DATE:
      return getLoanEndDate();

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case CHECHAN_CAUSE:
      return getChechanCause();

    case CHECHAN_DATE:
      return getChechanDate();

    case CHECHAN_USER_ID:
      return Integer.valueOf(getChechanUserId());

    case NEW_LOAN_BANK:
      return getNewLoanBank();

    case NEW_LOAN_BANK_BRANCH:
      return getNewLoanBankBranch();

    case APPLY_NAME:
      return getApplyName();

    case PAYMENT_TYPE:
      return getPaymentType();

    case CHECHAN_USER:
      return getChechanUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case DEPT_NAME:
      return isSetDeptName();
    case DEPT_ID:
      return isSetDeptId();
    case PM_USER_NAME:
      return isSetPmUserName();
    case PM_USER_ID:
      return isSetPmUserId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case SELLER_NAME:
      return isSetSellerName();
    case BUYER_NAME:
      return isSetBuyerName();
    case LOAN_AMT:
      return isSetLoanAmt();
    case INTEREST:
      return isSetInterest();
    case REC_INTEREST_DATE:
      return isSetRecInterestDate();
    case LOAN_DATE:
      return isSetLoanDate();
    case PLAN_REC_LOAN_DATE:
      return isSetPlanRecLoanDate();
    case REC_MONEY:
      return isSetRecMoney();
    case REC_LOAN_DATE:
      return isSetRecLoanDate();
    case REMAINING_REC_MONEY:
      return isSetRemainingRecMoney();
    case OVERDUE_FEE:
      return isSetOverdueFee();
    case OVERDUE_DAY:
      return isSetOverdueDay();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    case EXTENSION_DATE:
      return isSetExtensionDate();
    case FEE_TOTAL:
      return isSetFeeTotal();
    case OLD_LOAN_BANK:
      return isSetOldLoanBank();
    case PRODUCT_NAME:
      return isSetProductName();
    case INNER_OR_OUT:
      return isSetInnerOrOut();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case REC_FEE_STATUS:
      return isSetRecFeeStatus();
    case BIZ_HANDLE_DYNAMIC:
      return isSetBizHandleDynamic();
    case REAL_LOAN:
      return isSetRealLoan();
    case POUNDAGE:
      return isSetPoundage();
    case LOAN_AMT_MAX:
      return isSetLoanAmtMax();
    case HANDLE_FLOW_ID:
      return isSetHandleFlowId();
    case HANDLE_FLOW_START_DATE:
      return isSetHandleFlowStartDate();
    case HANDLE_FLOW_END_DATE:
      return isSetHandleFlowEndDate();
    case FORECLOSURE_FLOOR_DATE:
      return isSetForeclosureFloorDate();
    case GET_OLD_LICENSE_DATE:
      return isSetGetOldLicenseDate();
    case CANCEL_MORTGAGE_DATE:
      return isSetCancelMortgageDate();
    case TRANSFER_DATE:
      return isSetTransferDate();
    case GET_NEW_LICENSE_DATE:
      return isSetGetNewLicenseDate();
    case MORTGAGE_DATE:
      return isSetMortgageDate();
    case INNER_OR_OUT_NAME:
      return isSetInnerOrOutName();
    case FORECLOSURE_STATUS_NAME:
      return isSetForeclosureStatusName();
    case BUSINESS_SOURCE_NAME:
      return isSetBusinessSourceName();
    case LOAN_END_DATE:
      return isSetLoanEndDate();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case IS_CHECHAN:
      return isSetIsChechan();
    case CHECHAN_CAUSE:
      return isSetChechanCause();
    case CHECHAN_DATE:
      return isSetChechanDate();
    case CHECHAN_USER_ID:
      return isSetChechanUserId();
    case NEW_LOAN_BANK:
      return isSetNewLoanBank();
    case NEW_LOAN_BANK_BRANCH:
      return isSetNewLoanBankBranch();
    case APPLY_NAME:
      return isSetApplyName();
    case PAYMENT_TYPE:
      return isSetPaymentType();
    case CHECHAN_USER:
      return isSetChechanUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChechanReport)
      return this.equals((ChechanReport)that);
    return false;
  }

  public boolean equals(ChechanReport that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_deptName = true && this.isSetDeptName();
    boolean that_present_deptName = true && that.isSetDeptName();
    if (this_present_deptName || that_present_deptName) {
      if (!(this_present_deptName && that_present_deptName))
        return false;
      if (!this.deptName.equals(that.deptName))
        return false;
    }

    boolean this_present_deptId = true;
    boolean that_present_deptId = true;
    if (this_present_deptId || that_present_deptId) {
      if (!(this_present_deptId && that_present_deptId))
        return false;
      if (this.deptId != that.deptId)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_recInterestDate = true && this.isSetRecInterestDate();
    boolean that_present_recInterestDate = true && that.isSetRecInterestDate();
    if (this_present_recInterestDate || that_present_recInterestDate) {
      if (!(this_present_recInterestDate && that_present_recInterestDate))
        return false;
      if (!this.recInterestDate.equals(that.recInterestDate))
        return false;
    }

    boolean this_present_loanDate = true && this.isSetLoanDate();
    boolean that_present_loanDate = true && that.isSetLoanDate();
    if (this_present_loanDate || that_present_loanDate) {
      if (!(this_present_loanDate && that_present_loanDate))
        return false;
      if (!this.loanDate.equals(that.loanDate))
        return false;
    }

    boolean this_present_planRecLoanDate = true && this.isSetPlanRecLoanDate();
    boolean that_present_planRecLoanDate = true && that.isSetPlanRecLoanDate();
    if (this_present_planRecLoanDate || that_present_planRecLoanDate) {
      if (!(this_present_planRecLoanDate && that_present_planRecLoanDate))
        return false;
      if (!this.planRecLoanDate.equals(that.planRecLoanDate))
        return false;
    }

    boolean this_present_recMoney = true;
    boolean that_present_recMoney = true;
    if (this_present_recMoney || that_present_recMoney) {
      if (!(this_present_recMoney && that_present_recMoney))
        return false;
      if (this.recMoney != that.recMoney)
        return false;
    }

    boolean this_present_recLoanDate = true && this.isSetRecLoanDate();
    boolean that_present_recLoanDate = true && that.isSetRecLoanDate();
    if (this_present_recLoanDate || that_present_recLoanDate) {
      if (!(this_present_recLoanDate && that_present_recLoanDate))
        return false;
      if (!this.recLoanDate.equals(that.recLoanDate))
        return false;
    }

    boolean this_present_remainingRecMoney = true;
    boolean that_present_remainingRecMoney = true;
    if (this_present_remainingRecMoney || that_present_remainingRecMoney) {
      if (!(this_present_remainingRecMoney && that_present_remainingRecMoney))
        return false;
      if (this.remainingRecMoney != that.remainingRecMoney)
        return false;
    }

    boolean this_present_overdueFee = true;
    boolean that_present_overdueFee = true;
    if (this_present_overdueFee || that_present_overdueFee) {
      if (!(this_present_overdueFee && that_present_overdueFee))
        return false;
      if (this.overdueFee != that.overdueFee)
        return false;
    }

    boolean this_present_overdueDay = true;
    boolean that_present_overdueDay = true;
    if (this_present_overdueDay || that_present_overdueDay) {
      if (!(this_present_overdueDay && that_present_overdueDay))
        return false;
      if (this.overdueDay != that.overdueDay)
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    boolean this_present_extensionDate = true && this.isSetExtensionDate();
    boolean that_present_extensionDate = true && that.isSetExtensionDate();
    if (this_present_extensionDate || that_present_extensionDate) {
      if (!(this_present_extensionDate && that_present_extensionDate))
        return false;
      if (!this.extensionDate.equals(that.extensionDate))
        return false;
    }

    boolean this_present_feeTotal = true;
    boolean that_present_feeTotal = true;
    if (this_present_feeTotal || that_present_feeTotal) {
      if (!(this_present_feeTotal && that_present_feeTotal))
        return false;
      if (this.feeTotal != that.feeTotal)
        return false;
    }

    boolean this_present_oldLoanBank = true && this.isSetOldLoanBank();
    boolean that_present_oldLoanBank = true && that.isSetOldLoanBank();
    if (this_present_oldLoanBank || that_present_oldLoanBank) {
      if (!(this_present_oldLoanBank && that_present_oldLoanBank))
        return false;
      if (!this.oldLoanBank.equals(that.oldLoanBank))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_innerOrOut = true;
    boolean that_present_innerOrOut = true;
    if (this_present_innerOrOut || that_present_innerOrOut) {
      if (!(this_present_innerOrOut && that_present_innerOrOut))
        return false;
      if (this.innerOrOut != that.innerOrOut)
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_recFeeStatus = true;
    boolean that_present_recFeeStatus = true;
    if (this_present_recFeeStatus || that_present_recFeeStatus) {
      if (!(this_present_recFeeStatus && that_present_recFeeStatus))
        return false;
      if (this.recFeeStatus != that.recFeeStatus)
        return false;
    }

    boolean this_present_bizHandleDynamic = true && this.isSetBizHandleDynamic();
    boolean that_present_bizHandleDynamic = true && that.isSetBizHandleDynamic();
    if (this_present_bizHandleDynamic || that_present_bizHandleDynamic) {
      if (!(this_present_bizHandleDynamic && that_present_bizHandleDynamic))
        return false;
      if (!this.bizHandleDynamic.equals(that.bizHandleDynamic))
        return false;
    }

    boolean this_present_realLoan = true;
    boolean that_present_realLoan = true;
    if (this_present_realLoan || that_present_realLoan) {
      if (!(this_present_realLoan && that_present_realLoan))
        return false;
      if (this.realLoan != that.realLoan)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_loanAmtMax = true;
    boolean that_present_loanAmtMax = true;
    if (this_present_loanAmtMax || that_present_loanAmtMax) {
      if (!(this_present_loanAmtMax && that_present_loanAmtMax))
        return false;
      if (this.loanAmtMax != that.loanAmtMax)
        return false;
    }

    boolean this_present_handleFlowId = true;
    boolean that_present_handleFlowId = true;
    if (this_present_handleFlowId || that_present_handleFlowId) {
      if (!(this_present_handleFlowId && that_present_handleFlowId))
        return false;
      if (this.handleFlowId != that.handleFlowId)
        return false;
    }

    boolean this_present_handleFlowStartDate = true && this.isSetHandleFlowStartDate();
    boolean that_present_handleFlowStartDate = true && that.isSetHandleFlowStartDate();
    if (this_present_handleFlowStartDate || that_present_handleFlowStartDate) {
      if (!(this_present_handleFlowStartDate && that_present_handleFlowStartDate))
        return false;
      if (!this.handleFlowStartDate.equals(that.handleFlowStartDate))
        return false;
    }

    boolean this_present_handleFlowEndDate = true && this.isSetHandleFlowEndDate();
    boolean that_present_handleFlowEndDate = true && that.isSetHandleFlowEndDate();
    if (this_present_handleFlowEndDate || that_present_handleFlowEndDate) {
      if (!(this_present_handleFlowEndDate && that_present_handleFlowEndDate))
        return false;
      if (!this.handleFlowEndDate.equals(that.handleFlowEndDate))
        return false;
    }

    boolean this_present_foreclosureFloorDate = true && this.isSetForeclosureFloorDate();
    boolean that_present_foreclosureFloorDate = true && that.isSetForeclosureFloorDate();
    if (this_present_foreclosureFloorDate || that_present_foreclosureFloorDate) {
      if (!(this_present_foreclosureFloorDate && that_present_foreclosureFloorDate))
        return false;
      if (!this.foreclosureFloorDate.equals(that.foreclosureFloorDate))
        return false;
    }

    boolean this_present_getOldLicenseDate = true && this.isSetGetOldLicenseDate();
    boolean that_present_getOldLicenseDate = true && that.isSetGetOldLicenseDate();
    if (this_present_getOldLicenseDate || that_present_getOldLicenseDate) {
      if (!(this_present_getOldLicenseDate && that_present_getOldLicenseDate))
        return false;
      if (!this.getOldLicenseDate.equals(that.getOldLicenseDate))
        return false;
    }

    boolean this_present_cancelMortgageDate = true && this.isSetCancelMortgageDate();
    boolean that_present_cancelMortgageDate = true && that.isSetCancelMortgageDate();
    if (this_present_cancelMortgageDate || that_present_cancelMortgageDate) {
      if (!(this_present_cancelMortgageDate && that_present_cancelMortgageDate))
        return false;
      if (!this.cancelMortgageDate.equals(that.cancelMortgageDate))
        return false;
    }

    boolean this_present_transferDate = true && this.isSetTransferDate();
    boolean that_present_transferDate = true && that.isSetTransferDate();
    if (this_present_transferDate || that_present_transferDate) {
      if (!(this_present_transferDate && that_present_transferDate))
        return false;
      if (!this.transferDate.equals(that.transferDate))
        return false;
    }

    boolean this_present_getNewLicenseDate = true && this.isSetGetNewLicenseDate();
    boolean that_present_getNewLicenseDate = true && that.isSetGetNewLicenseDate();
    if (this_present_getNewLicenseDate || that_present_getNewLicenseDate) {
      if (!(this_present_getNewLicenseDate && that_present_getNewLicenseDate))
        return false;
      if (!this.getNewLicenseDate.equals(that.getNewLicenseDate))
        return false;
    }

    boolean this_present_mortgageDate = true && this.isSetMortgageDate();
    boolean that_present_mortgageDate = true && that.isSetMortgageDate();
    if (this_present_mortgageDate || that_present_mortgageDate) {
      if (!(this_present_mortgageDate && that_present_mortgageDate))
        return false;
      if (!this.mortgageDate.equals(that.mortgageDate))
        return false;
    }

    boolean this_present_innerOrOutName = true && this.isSetInnerOrOutName();
    boolean that_present_innerOrOutName = true && that.isSetInnerOrOutName();
    if (this_present_innerOrOutName || that_present_innerOrOutName) {
      if (!(this_present_innerOrOutName && that_present_innerOrOutName))
        return false;
      if (!this.innerOrOutName.equals(that.innerOrOutName))
        return false;
    }

    boolean this_present_foreclosureStatusName = true && this.isSetForeclosureStatusName();
    boolean that_present_foreclosureStatusName = true && that.isSetForeclosureStatusName();
    if (this_present_foreclosureStatusName || that_present_foreclosureStatusName) {
      if (!(this_present_foreclosureStatusName && that_present_foreclosureStatusName))
        return false;
      if (!this.foreclosureStatusName.equals(that.foreclosureStatusName))
        return false;
    }

    boolean this_present_businessSourceName = true && this.isSetBusinessSourceName();
    boolean that_present_businessSourceName = true && that.isSetBusinessSourceName();
    if (this_present_businessSourceName || that_present_businessSourceName) {
      if (!(this_present_businessSourceName && that_present_businessSourceName))
        return false;
      if (!this.businessSourceName.equals(that.businessSourceName))
        return false;
    }

    boolean this_present_loanEndDate = true && this.isSetLoanEndDate();
    boolean that_present_loanEndDate = true && that.isSetLoanEndDate();
    if (this_present_loanEndDate || that_present_loanEndDate) {
      if (!(this_present_loanEndDate && that_present_loanEndDate))
        return false;
      if (!this.loanEndDate.equals(that.loanEndDate))
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_chechanCause = true && this.isSetChechanCause();
    boolean that_present_chechanCause = true && that.isSetChechanCause();
    if (this_present_chechanCause || that_present_chechanCause) {
      if (!(this_present_chechanCause && that_present_chechanCause))
        return false;
      if (!this.chechanCause.equals(that.chechanCause))
        return false;
    }

    boolean this_present_chechanDate = true && this.isSetChechanDate();
    boolean that_present_chechanDate = true && that.isSetChechanDate();
    if (this_present_chechanDate || that_present_chechanDate) {
      if (!(this_present_chechanDate && that_present_chechanDate))
        return false;
      if (!this.chechanDate.equals(that.chechanDate))
        return false;
    }

    boolean this_present_chechanUserId = true;
    boolean that_present_chechanUserId = true;
    if (this_present_chechanUserId || that_present_chechanUserId) {
      if (!(this_present_chechanUserId && that_present_chechanUserId))
        return false;
      if (this.chechanUserId != that.chechanUserId)
        return false;
    }

    boolean this_present_newLoanBank = true && this.isSetNewLoanBank();
    boolean that_present_newLoanBank = true && that.isSetNewLoanBank();
    if (this_present_newLoanBank || that_present_newLoanBank) {
      if (!(this_present_newLoanBank && that_present_newLoanBank))
        return false;
      if (!this.newLoanBank.equals(that.newLoanBank))
        return false;
    }

    boolean this_present_newLoanBankBranch = true && this.isSetNewLoanBankBranch();
    boolean that_present_newLoanBankBranch = true && that.isSetNewLoanBankBranch();
    if (this_present_newLoanBankBranch || that_present_newLoanBankBranch) {
      if (!(this_present_newLoanBankBranch && that_present_newLoanBankBranch))
        return false;
      if (!this.newLoanBankBranch.equals(that.newLoanBankBranch))
        return false;
    }

    boolean this_present_applyName = true && this.isSetApplyName();
    boolean that_present_applyName = true && that.isSetApplyName();
    if (this_present_applyName || that_present_applyName) {
      if (!(this_present_applyName && that_present_applyName))
        return false;
      if (!this.applyName.equals(that.applyName))
        return false;
    }

    boolean this_present_paymentType = true && this.isSetPaymentType();
    boolean that_present_paymentType = true && that.isSetPaymentType();
    if (this_present_paymentType || that_present_paymentType) {
      if (!(this_present_paymentType && that_present_paymentType))
        return false;
      if (!this.paymentType.equals(that.paymentType))
        return false;
    }

    boolean this_present_chechanUser = true && this.isSetChechanUser();
    boolean that_present_chechanUser = true && that.isSetChechanUser();
    if (this_present_chechanUser || that_present_chechanUser) {
      if (!(this_present_chechanUser && that_present_chechanUser))
        return false;
      if (!this.chechanUser.equals(that.chechanUser))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_deptName = true && (isSetDeptName());
    list.add(present_deptName);
    if (present_deptName)
      list.add(deptName);

    boolean present_deptId = true;
    list.add(present_deptId);
    if (present_deptId)
      list.add(deptId);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_recInterestDate = true && (isSetRecInterestDate());
    list.add(present_recInterestDate);
    if (present_recInterestDate)
      list.add(recInterestDate);

    boolean present_loanDate = true && (isSetLoanDate());
    list.add(present_loanDate);
    if (present_loanDate)
      list.add(loanDate);

    boolean present_planRecLoanDate = true && (isSetPlanRecLoanDate());
    list.add(present_planRecLoanDate);
    if (present_planRecLoanDate)
      list.add(planRecLoanDate);

    boolean present_recMoney = true;
    list.add(present_recMoney);
    if (present_recMoney)
      list.add(recMoney);

    boolean present_recLoanDate = true && (isSetRecLoanDate());
    list.add(present_recLoanDate);
    if (present_recLoanDate)
      list.add(recLoanDate);

    boolean present_remainingRecMoney = true;
    list.add(present_remainingRecMoney);
    if (present_remainingRecMoney)
      list.add(remainingRecMoney);

    boolean present_overdueFee = true;
    list.add(present_overdueFee);
    if (present_overdueFee)
      list.add(overdueFee);

    boolean present_overdueDay = true;
    list.add(present_overdueDay);
    if (present_overdueDay)
      list.add(overdueDay);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    boolean present_extensionDate = true && (isSetExtensionDate());
    list.add(present_extensionDate);
    if (present_extensionDate)
      list.add(extensionDate);

    boolean present_feeTotal = true;
    list.add(present_feeTotal);
    if (present_feeTotal)
      list.add(feeTotal);

    boolean present_oldLoanBank = true && (isSetOldLoanBank());
    list.add(present_oldLoanBank);
    if (present_oldLoanBank)
      list.add(oldLoanBank);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_innerOrOut = true;
    list.add(present_innerOrOut);
    if (present_innerOrOut)
      list.add(innerOrOut);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_recFeeStatus = true;
    list.add(present_recFeeStatus);
    if (present_recFeeStatus)
      list.add(recFeeStatus);

    boolean present_bizHandleDynamic = true && (isSetBizHandleDynamic());
    list.add(present_bizHandleDynamic);
    if (present_bizHandleDynamic)
      list.add(bizHandleDynamic);

    boolean present_realLoan = true;
    list.add(present_realLoan);
    if (present_realLoan)
      list.add(realLoan);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_loanAmtMax = true;
    list.add(present_loanAmtMax);
    if (present_loanAmtMax)
      list.add(loanAmtMax);

    boolean present_handleFlowId = true;
    list.add(present_handleFlowId);
    if (present_handleFlowId)
      list.add(handleFlowId);

    boolean present_handleFlowStartDate = true && (isSetHandleFlowStartDate());
    list.add(present_handleFlowStartDate);
    if (present_handleFlowStartDate)
      list.add(handleFlowStartDate);

    boolean present_handleFlowEndDate = true && (isSetHandleFlowEndDate());
    list.add(present_handleFlowEndDate);
    if (present_handleFlowEndDate)
      list.add(handleFlowEndDate);

    boolean present_foreclosureFloorDate = true && (isSetForeclosureFloorDate());
    list.add(present_foreclosureFloorDate);
    if (present_foreclosureFloorDate)
      list.add(foreclosureFloorDate);

    boolean present_getOldLicenseDate = true && (isSetGetOldLicenseDate());
    list.add(present_getOldLicenseDate);
    if (present_getOldLicenseDate)
      list.add(getOldLicenseDate);

    boolean present_cancelMortgageDate = true && (isSetCancelMortgageDate());
    list.add(present_cancelMortgageDate);
    if (present_cancelMortgageDate)
      list.add(cancelMortgageDate);

    boolean present_transferDate = true && (isSetTransferDate());
    list.add(present_transferDate);
    if (present_transferDate)
      list.add(transferDate);

    boolean present_getNewLicenseDate = true && (isSetGetNewLicenseDate());
    list.add(present_getNewLicenseDate);
    if (present_getNewLicenseDate)
      list.add(getNewLicenseDate);

    boolean present_mortgageDate = true && (isSetMortgageDate());
    list.add(present_mortgageDate);
    if (present_mortgageDate)
      list.add(mortgageDate);

    boolean present_innerOrOutName = true && (isSetInnerOrOutName());
    list.add(present_innerOrOutName);
    if (present_innerOrOutName)
      list.add(innerOrOutName);

    boolean present_foreclosureStatusName = true && (isSetForeclosureStatusName());
    list.add(present_foreclosureStatusName);
    if (present_foreclosureStatusName)
      list.add(foreclosureStatusName);

    boolean present_businessSourceName = true && (isSetBusinessSourceName());
    list.add(present_businessSourceName);
    if (present_businessSourceName)
      list.add(businessSourceName);

    boolean present_loanEndDate = true && (isSetLoanEndDate());
    list.add(present_loanEndDate);
    if (present_loanEndDate)
      list.add(loanEndDate);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_chechanCause = true && (isSetChechanCause());
    list.add(present_chechanCause);
    if (present_chechanCause)
      list.add(chechanCause);

    boolean present_chechanDate = true && (isSetChechanDate());
    list.add(present_chechanDate);
    if (present_chechanDate)
      list.add(chechanDate);

    boolean present_chechanUserId = true;
    list.add(present_chechanUserId);
    if (present_chechanUserId)
      list.add(chechanUserId);

    boolean present_newLoanBank = true && (isSetNewLoanBank());
    list.add(present_newLoanBank);
    if (present_newLoanBank)
      list.add(newLoanBank);

    boolean present_newLoanBankBranch = true && (isSetNewLoanBankBranch());
    list.add(present_newLoanBankBranch);
    if (present_newLoanBankBranch)
      list.add(newLoanBankBranch);

    boolean present_applyName = true && (isSetApplyName());
    list.add(present_applyName);
    if (present_applyName)
      list.add(applyName);

    boolean present_paymentType = true && (isSetPaymentType());
    list.add(present_paymentType);
    if (present_paymentType)
      list.add(paymentType);

    boolean present_chechanUser = true && (isSetChechanUser());
    list.add(present_chechanUser);
    if (present_chechanUser)
      list.add(chechanUser);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChechanReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptName()).compareTo(other.isSetDeptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptName, other.deptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptId()).compareTo(other.isSetDeptId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptId, other.deptId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecInterestDate()).compareTo(other.isSetRecInterestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecInterestDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recInterestDate, other.recInterestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDate()).compareTo(other.isSetLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDate, other.loanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRecLoanDate()).compareTo(other.isSetPlanRecLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRecLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRecLoanDate, other.planRecLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecMoney()).compareTo(other.isSetRecMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recMoney, other.recMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecLoanDate()).compareTo(other.isSetRecLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recLoanDate, other.recLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainingRecMoney()).compareTo(other.isSetRemainingRecMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainingRecMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainingRecMoney, other.remainingRecMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFee()).compareTo(other.isSetOverdueFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFee, other.overdueFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDay()).compareTo(other.isSetOverdueDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDay, other.overdueDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionDate()).compareTo(other.isSetExtensionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionDate, other.extensionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeTotal()).compareTo(other.isSetFeeTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeTotal, other.feeTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanBank()).compareTo(other.isSetOldLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanBank, other.oldLoanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOut()).compareTo(other.isSetInnerOrOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerOrOut, other.innerOrOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecFeeStatus()).compareTo(other.isSetRecFeeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecFeeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recFeeStatus, other.recFeeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizHandleDynamic()).compareTo(other.isSetBizHandleDynamic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizHandleDynamic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizHandleDynamic, other.bizHandleDynamic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealLoan()).compareTo(other.isSetRealLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realLoan, other.realLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmtMax()).compareTo(other.isSetLoanAmtMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmtMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmtMax, other.loanAmtMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleFlowId()).compareTo(other.isSetHandleFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowId, other.handleFlowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleFlowStartDate()).compareTo(other.isSetHandleFlowStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleFlowStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowStartDate, other.handleFlowStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleFlowEndDate()).compareTo(other.isSetHandleFlowEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleFlowEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowEndDate, other.handleFlowEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureFloorDate()).compareTo(other.isSetForeclosureFloorDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureFloorDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureFloorDate, other.foreclosureFloorDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetOldLicenseDate()).compareTo(other.isSetGetOldLicenseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetOldLicenseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getOldLicenseDate, other.getOldLicenseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelMortgageDate()).compareTo(other.isSetCancelMortgageDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelMortgageDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelMortgageDate, other.cancelMortgageDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferDate()).compareTo(other.isSetTransferDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferDate, other.transferDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetNewLicenseDate()).compareTo(other.isSetGetNewLicenseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetNewLicenseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getNewLicenseDate, other.getNewLicenseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageDate()).compareTo(other.isSetMortgageDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageDate, other.mortgageDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOutName()).compareTo(other.isSetInnerOrOutName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOutName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerOrOutName, other.innerOrOutName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatusName()).compareTo(other.isSetForeclosureStatusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatusName, other.foreclosureStatusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceName()).compareTo(other.isSetBusinessSourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceName, other.businessSourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanEndDate()).compareTo(other.isSetLoanEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanEndDate, other.loanEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanCause()).compareTo(other.isSetChechanCause());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanCause()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanCause, other.chechanCause);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanDate()).compareTo(other.isSetChechanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanDate, other.chechanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanUserId()).compareTo(other.isSetChechanUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanUserId, other.chechanUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanBank()).compareTo(other.isSetNewLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanBank, other.newLoanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanBankBranch()).compareTo(other.isSetNewLoanBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanBankBranch, other.newLoanBankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyName()).compareTo(other.isSetApplyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyName, other.applyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentType()).compareTo(other.isSetPaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentType, other.paymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChechanUser()).compareTo(other.isSetChechanUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChechanUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanUser, other.chechanUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChechanReport(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptName:");
    if (this.deptName == null) {
      sb.append("null");
    } else {
      sb.append(this.deptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptId:");
    sb.append(this.deptId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recInterestDate:");
    if (this.recInterestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recInterestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDate:");
    if (this.loanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRecLoanDate:");
    if (this.planRecLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planRecLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recMoney:");
    sb.append(this.recMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recLoanDate:");
    if (this.recLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainingRecMoney:");
    sb.append(this.remainingRecMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFee:");
    sb.append(this.overdueFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDay:");
    sb.append(this.overdueDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionDate:");
    if (this.extensionDate == null) {
      sb.append("null");
    } else {
      sb.append(this.extensionDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeTotal:");
    sb.append(this.feeTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanBank:");
    if (this.oldLoanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerOrOut:");
    sb.append(this.innerOrOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recFeeStatus:");
    sb.append(this.recFeeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizHandleDynamic:");
    if (this.bizHandleDynamic == null) {
      sb.append("null");
    } else {
      sb.append(this.bizHandleDynamic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realLoan:");
    sb.append(this.realLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmtMax:");
    sb.append(this.loanAmtMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleFlowId:");
    sb.append(this.handleFlowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleFlowStartDate:");
    if (this.handleFlowStartDate == null) {
      sb.append("null");
    } else {
      sb.append(this.handleFlowStartDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleFlowEndDate:");
    if (this.handleFlowEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.handleFlowEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureFloorDate:");
    if (this.foreclosureFloorDate == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureFloorDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("getOldLicenseDate:");
    if (this.getOldLicenseDate == null) {
      sb.append("null");
    } else {
      sb.append(this.getOldLicenseDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelMortgageDate:");
    if (this.cancelMortgageDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelMortgageDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferDate:");
    if (this.transferDate == null) {
      sb.append("null");
    } else {
      sb.append(this.transferDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("getNewLicenseDate:");
    if (this.getNewLicenseDate == null) {
      sb.append("null");
    } else {
      sb.append(this.getNewLicenseDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageDate:");
    if (this.mortgageDate == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerOrOutName:");
    if (this.innerOrOutName == null) {
      sb.append("null");
    } else {
      sb.append(this.innerOrOutName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatusName:");
    if (this.foreclosureStatusName == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureStatusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceName:");
    if (this.businessSourceName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanEndDate:");
    if (this.loanEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanCause:");
    if (this.chechanCause == null) {
      sb.append("null");
    } else {
      sb.append(this.chechanCause);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanDate:");
    if (this.chechanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.chechanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanUserId:");
    sb.append(this.chechanUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanBank:");
    if (this.newLoanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanBankBranch:");
    if (this.newLoanBankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanBankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyName:");
    if (this.applyName == null) {
      sb.append("null");
    } else {
      sb.append(this.applyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentType:");
    if (this.paymentType == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chechanUser:");
    if (this.chechanUser == null) {
      sb.append("null");
    } else {
      sb.append(this.chechanUser);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChechanReportStandardSchemeFactory implements SchemeFactory {
    public ChechanReportStandardScheme getScheme() {
      return new ChechanReportStandardScheme();
    }
  }

  private static class ChechanReportStandardScheme extends StandardScheme<ChechanReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChechanReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deptName = iprot.readString();
              struct.setDeptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deptId = iprot.readI32();
              struct.setDeptIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct.userIds.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REC_INTEREST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recInterestDate = iprot.readString();
              struct.setRecInterestDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDate = iprot.readString();
              struct.setLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PLAN_REC_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRecLoanDate = iprot.readString();
              struct.setPlanRecLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REC_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recMoney = iprot.readDouble();
              struct.setRecMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REC_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recLoanDate = iprot.readString();
              struct.setRecLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REMAINING_REC_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.remainingRecMoney = iprot.readDouble();
              struct.setRemainingRecMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OVERDUE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFee = iprot.readDouble();
              struct.setOverdueFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // OVERDUE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDay = iprot.readI32();
              struct.setOverdueDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // EXTENSION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extensionDate = iprot.readString();
              struct.setExtensionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // FEE_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feeTotal = iprot.readDouble();
              struct.setFeeTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // OLD_LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanBank = iprot.readString();
              struct.setOldLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // INNER_OR_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.innerOrOut = iprot.readI32();
              struct.setInnerOrOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // REC_FEE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recFeeStatus = iprot.readI32();
              struct.setRecFeeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // BIZ_HANDLE_DYNAMIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bizHandleDynamic = iprot.readString();
              struct.setBizHandleDynamicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // REAL_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realLoan = iprot.readDouble();
              struct.setRealLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // LOAN_AMT_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmtMax = iprot.readDouble();
              struct.setLoanAmtMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // HANDLE_FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleFlowId = iprot.readI32();
              struct.setHandleFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // HANDLE_FLOW_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleFlowStartDate = iprot.readString();
              struct.setHandleFlowStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // HANDLE_FLOW_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleFlowEndDate = iprot.readString();
              struct.setHandleFlowEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // FORECLOSURE_FLOOR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureFloorDate = iprot.readString();
              struct.setForeclosureFloorDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // GET_OLD_LICENSE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.getOldLicenseDate = iprot.readString();
              struct.setGetOldLicenseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // CANCEL_MORTGAGE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelMortgageDate = iprot.readString();
              struct.setCancelMortgageDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // TRANSFER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferDate = iprot.readString();
              struct.setTransferDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // GET_NEW_LICENSE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.getNewLicenseDate = iprot.readString();
              struct.setGetNewLicenseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // MORTGAGE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageDate = iprot.readString();
              struct.setMortgageDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // INNER_OR_OUT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.innerOrOutName = iprot.readString();
              struct.setInnerOrOutNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // FORECLOSURE_STATUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureStatusName = iprot.readString();
              struct.setForeclosureStatusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // BUSINESS_SOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceName = iprot.readString();
              struct.setBusinessSourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // LOAN_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanEndDate = iprot.readString();
              struct.setLoanEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // CHECHAN_CAUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chechanCause = iprot.readString();
              struct.setChechanCauseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // CHECHAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chechanDate = iprot.readString();
              struct.setChechanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // CHECHAN_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chechanUserId = iprot.readI32();
              struct.setChechanUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // NEW_LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanBank = iprot.readString();
              struct.setNewLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // NEW_LOAN_BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanBankBranch = iprot.readString();
              struct.setNewLoanBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // APPLY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyName = iprot.readString();
              struct.setApplyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // PAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentType = iprot.readString();
              struct.setPaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // CHECHAN_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chechanUser = iprot.readString();
              struct.setChechanUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChechanReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      if (struct.deptName != null) {
        oprot.writeFieldBegin(DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.deptName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEPT_ID_FIELD_DESC);
      oprot.writeI32(struct.deptId);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter19 : struct.userIds)
          {
            oprot.writeI32(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      if (struct.recInterestDate != null) {
        oprot.writeFieldBegin(REC_INTEREST_DATE_FIELD_DESC);
        oprot.writeString(struct.recInterestDate);
        oprot.writeFieldEnd();
      }
      if (struct.loanDate != null) {
        oprot.writeFieldBegin(LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.loanDate);
        oprot.writeFieldEnd();
      }
      if (struct.planRecLoanDate != null) {
        oprot.writeFieldBegin(PLAN_REC_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.planRecLoanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REC_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.recMoney);
      oprot.writeFieldEnd();
      if (struct.recLoanDate != null) {
        oprot.writeFieldBegin(REC_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.recLoanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REMAINING_REC_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.remainingRecMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.overdueFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      if (struct.extensionDate != null) {
        oprot.writeFieldBegin(EXTENSION_DATE_FIELD_DESC);
        oprot.writeString(struct.extensionDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FEE_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.feeTotal);
      oprot.writeFieldEnd();
      if (struct.oldLoanBank != null) {
        oprot.writeFieldBegin(OLD_LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.oldLoanBank);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INNER_OR_OUT_FIELD_DESC);
      oprot.writeI32(struct.innerOrOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_FEE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.recFeeStatus);
      oprot.writeFieldEnd();
      if (struct.bizHandleDynamic != null) {
        oprot.writeFieldBegin(BIZ_HANDLE_DYNAMIC_FIELD_DESC);
        oprot.writeString(struct.bizHandleDynamic);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_LOAN_FIELD_DESC);
      oprot.writeDouble(struct.realLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_AMT_MAX_FIELD_DESC);
      oprot.writeDouble(struct.loanAmtMax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_FLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.handleFlowId);
      oprot.writeFieldEnd();
      if (struct.handleFlowStartDate != null) {
        oprot.writeFieldBegin(HANDLE_FLOW_START_DATE_FIELD_DESC);
        oprot.writeString(struct.handleFlowStartDate);
        oprot.writeFieldEnd();
      }
      if (struct.handleFlowEndDate != null) {
        oprot.writeFieldBegin(HANDLE_FLOW_END_DATE_FIELD_DESC);
        oprot.writeString(struct.handleFlowEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.foreclosureFloorDate != null) {
        oprot.writeFieldBegin(FORECLOSURE_FLOOR_DATE_FIELD_DESC);
        oprot.writeString(struct.foreclosureFloorDate);
        oprot.writeFieldEnd();
      }
      if (struct.getOldLicenseDate != null) {
        oprot.writeFieldBegin(GET_OLD_LICENSE_DATE_FIELD_DESC);
        oprot.writeString(struct.getOldLicenseDate);
        oprot.writeFieldEnd();
      }
      if (struct.cancelMortgageDate != null) {
        oprot.writeFieldBegin(CANCEL_MORTGAGE_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelMortgageDate);
        oprot.writeFieldEnd();
      }
      if (struct.transferDate != null) {
        oprot.writeFieldBegin(TRANSFER_DATE_FIELD_DESC);
        oprot.writeString(struct.transferDate);
        oprot.writeFieldEnd();
      }
      if (struct.getNewLicenseDate != null) {
        oprot.writeFieldBegin(GET_NEW_LICENSE_DATE_FIELD_DESC);
        oprot.writeString(struct.getNewLicenseDate);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageDate != null) {
        oprot.writeFieldBegin(MORTGAGE_DATE_FIELD_DESC);
        oprot.writeString(struct.mortgageDate);
        oprot.writeFieldEnd();
      }
      if (struct.innerOrOutName != null) {
        oprot.writeFieldBegin(INNER_OR_OUT_NAME_FIELD_DESC);
        oprot.writeString(struct.innerOrOutName);
        oprot.writeFieldEnd();
      }
      if (struct.foreclosureStatusName != null) {
        oprot.writeFieldBegin(FORECLOSURE_STATUS_NAME_FIELD_DESC);
        oprot.writeString(struct.foreclosureStatusName);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceName != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_NAME_FIELD_DESC);
        oprot.writeString(struct.businessSourceName);
        oprot.writeFieldEnd();
      }
      if (struct.loanEndDate != null) {
        oprot.writeFieldBegin(LOAN_END_DATE_FIELD_DESC);
        oprot.writeString(struct.loanEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      if (struct.chechanCause != null) {
        oprot.writeFieldBegin(CHECHAN_CAUSE_FIELD_DESC);
        oprot.writeString(struct.chechanCause);
        oprot.writeFieldEnd();
      }
      if (struct.chechanDate != null) {
        oprot.writeFieldBegin(CHECHAN_DATE_FIELD_DESC);
        oprot.writeString(struct.chechanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECHAN_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.chechanUserId);
      oprot.writeFieldEnd();
      if (struct.newLoanBank != null) {
        oprot.writeFieldBegin(NEW_LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.newLoanBank);
        oprot.writeFieldEnd();
      }
      if (struct.newLoanBankBranch != null) {
        oprot.writeFieldBegin(NEW_LOAN_BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.newLoanBankBranch);
        oprot.writeFieldEnd();
      }
      if (struct.applyName != null) {
        oprot.writeFieldBegin(APPLY_NAME_FIELD_DESC);
        oprot.writeString(struct.applyName);
        oprot.writeFieldEnd();
      }
      if (struct.paymentType != null) {
        oprot.writeFieldBegin(PAYMENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.paymentType);
        oprot.writeFieldEnd();
      }
      if (struct.chechanUser != null) {
        oprot.writeFieldBegin(CHECHAN_USER_FIELD_DESC);
        oprot.writeString(struct.chechanUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChechanReportTupleSchemeFactory implements SchemeFactory {
    public ChechanReportTupleScheme getScheme() {
      return new ChechanReportTupleScheme();
    }
  }

  private static class ChechanReportTupleScheme extends TupleScheme<ChechanReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChechanReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(3);
      }
      if (struct.isSetDeptName()) {
        optionals.set(4);
      }
      if (struct.isSetDeptId()) {
        optionals.set(5);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(6);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(7);
      }
      if (struct.isSetPage()) {
        optionals.set(8);
      }
      if (struct.isSetRows()) {
        optionals.set(9);
      }
      if (struct.isSetUserIds()) {
        optionals.set(10);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(11);
      }
      if (struct.isSetSellerName()) {
        optionals.set(12);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(13);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(14);
      }
      if (struct.isSetInterest()) {
        optionals.set(15);
      }
      if (struct.isSetRecInterestDate()) {
        optionals.set(16);
      }
      if (struct.isSetLoanDate()) {
        optionals.set(17);
      }
      if (struct.isSetPlanRecLoanDate()) {
        optionals.set(18);
      }
      if (struct.isSetRecMoney()) {
        optionals.set(19);
      }
      if (struct.isSetRecLoanDate()) {
        optionals.set(20);
      }
      if (struct.isSetRemainingRecMoney()) {
        optionals.set(21);
      }
      if (struct.isSetOverdueFee()) {
        optionals.set(22);
      }
      if (struct.isSetOverdueDay()) {
        optionals.set(23);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(24);
      }
      if (struct.isSetExtensionDate()) {
        optionals.set(25);
      }
      if (struct.isSetFeeTotal()) {
        optionals.set(26);
      }
      if (struct.isSetOldLoanBank()) {
        optionals.set(27);
      }
      if (struct.isSetProductName()) {
        optionals.set(28);
      }
      if (struct.isSetInnerOrOut()) {
        optionals.set(29);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(30);
      }
      if (struct.isSetRecFeeStatus()) {
        optionals.set(31);
      }
      if (struct.isSetBizHandleDynamic()) {
        optionals.set(32);
      }
      if (struct.isSetRealLoan()) {
        optionals.set(33);
      }
      if (struct.isSetPoundage()) {
        optionals.set(34);
      }
      if (struct.isSetLoanAmtMax()) {
        optionals.set(35);
      }
      if (struct.isSetHandleFlowId()) {
        optionals.set(36);
      }
      if (struct.isSetHandleFlowStartDate()) {
        optionals.set(37);
      }
      if (struct.isSetHandleFlowEndDate()) {
        optionals.set(38);
      }
      if (struct.isSetForeclosureFloorDate()) {
        optionals.set(39);
      }
      if (struct.isSetGetOldLicenseDate()) {
        optionals.set(40);
      }
      if (struct.isSetCancelMortgageDate()) {
        optionals.set(41);
      }
      if (struct.isSetTransferDate()) {
        optionals.set(42);
      }
      if (struct.isSetGetNewLicenseDate()) {
        optionals.set(43);
      }
      if (struct.isSetMortgageDate()) {
        optionals.set(44);
      }
      if (struct.isSetInnerOrOutName()) {
        optionals.set(45);
      }
      if (struct.isSetForeclosureStatusName()) {
        optionals.set(46);
      }
      if (struct.isSetBusinessSourceName()) {
        optionals.set(47);
      }
      if (struct.isSetLoanEndDate()) {
        optionals.set(48);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(49);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(50);
      }
      if (struct.isSetChechanCause()) {
        optionals.set(51);
      }
      if (struct.isSetChechanDate()) {
        optionals.set(52);
      }
      if (struct.isSetChechanUserId()) {
        optionals.set(53);
      }
      if (struct.isSetNewLoanBank()) {
        optionals.set(54);
      }
      if (struct.isSetNewLoanBankBranch()) {
        optionals.set(55);
      }
      if (struct.isSetApplyName()) {
        optionals.set(56);
      }
      if (struct.isSetPaymentType()) {
        optionals.set(57);
      }
      if (struct.isSetChechanUser()) {
        optionals.set(58);
      }
      oprot.writeBitSet(optionals, 59);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetDeptName()) {
        oprot.writeString(struct.deptName);
      }
      if (struct.isSetDeptId()) {
        oprot.writeI32(struct.deptId);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter20 : struct.userIds)
          {
            oprot.writeI32(_iter20);
          }
        }
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetRecInterestDate()) {
        oprot.writeString(struct.recInterestDate);
      }
      if (struct.isSetLoanDate()) {
        oprot.writeString(struct.loanDate);
      }
      if (struct.isSetPlanRecLoanDate()) {
        oprot.writeString(struct.planRecLoanDate);
      }
      if (struct.isSetRecMoney()) {
        oprot.writeDouble(struct.recMoney);
      }
      if (struct.isSetRecLoanDate()) {
        oprot.writeString(struct.recLoanDate);
      }
      if (struct.isSetRemainingRecMoney()) {
        oprot.writeDouble(struct.remainingRecMoney);
      }
      if (struct.isSetOverdueFee()) {
        oprot.writeDouble(struct.overdueFee);
      }
      if (struct.isSetOverdueDay()) {
        oprot.writeI32(struct.overdueDay);
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
      if (struct.isSetExtensionDate()) {
        oprot.writeString(struct.extensionDate);
      }
      if (struct.isSetFeeTotal()) {
        oprot.writeDouble(struct.feeTotal);
      }
      if (struct.isSetOldLoanBank()) {
        oprot.writeString(struct.oldLoanBank);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetInnerOrOut()) {
        oprot.writeI32(struct.innerOrOut);
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetRecFeeStatus()) {
        oprot.writeI32(struct.recFeeStatus);
      }
      if (struct.isSetBizHandleDynamic()) {
        oprot.writeString(struct.bizHandleDynamic);
      }
      if (struct.isSetRealLoan()) {
        oprot.writeDouble(struct.realLoan);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetLoanAmtMax()) {
        oprot.writeDouble(struct.loanAmtMax);
      }
      if (struct.isSetHandleFlowId()) {
        oprot.writeI32(struct.handleFlowId);
      }
      if (struct.isSetHandleFlowStartDate()) {
        oprot.writeString(struct.handleFlowStartDate);
      }
      if (struct.isSetHandleFlowEndDate()) {
        oprot.writeString(struct.handleFlowEndDate);
      }
      if (struct.isSetForeclosureFloorDate()) {
        oprot.writeString(struct.foreclosureFloorDate);
      }
      if (struct.isSetGetOldLicenseDate()) {
        oprot.writeString(struct.getOldLicenseDate);
      }
      if (struct.isSetCancelMortgageDate()) {
        oprot.writeString(struct.cancelMortgageDate);
      }
      if (struct.isSetTransferDate()) {
        oprot.writeString(struct.transferDate);
      }
      if (struct.isSetGetNewLicenseDate()) {
        oprot.writeString(struct.getNewLicenseDate);
      }
      if (struct.isSetMortgageDate()) {
        oprot.writeString(struct.mortgageDate);
      }
      if (struct.isSetInnerOrOutName()) {
        oprot.writeString(struct.innerOrOutName);
      }
      if (struct.isSetForeclosureStatusName()) {
        oprot.writeString(struct.foreclosureStatusName);
      }
      if (struct.isSetBusinessSourceName()) {
        oprot.writeString(struct.businessSourceName);
      }
      if (struct.isSetLoanEndDate()) {
        oprot.writeString(struct.loanEndDate);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetChechanCause()) {
        oprot.writeString(struct.chechanCause);
      }
      if (struct.isSetChechanDate()) {
        oprot.writeString(struct.chechanDate);
      }
      if (struct.isSetChechanUserId()) {
        oprot.writeI32(struct.chechanUserId);
      }
      if (struct.isSetNewLoanBank()) {
        oprot.writeString(struct.newLoanBank);
      }
      if (struct.isSetNewLoanBankBranch()) {
        oprot.writeString(struct.newLoanBankBranch);
      }
      if (struct.isSetApplyName()) {
        oprot.writeString(struct.applyName);
      }
      if (struct.isSetPaymentType()) {
        oprot.writeString(struct.paymentType);
      }
      if (struct.isSetChechanUser()) {
        oprot.writeString(struct.chechanUser);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChechanReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(59);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.deptName = iprot.readString();
        struct.setDeptNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.deptId = iprot.readI32();
        struct.setDeptIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list21.size);
          int _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI32();
            struct.userIds.add(_elem22);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(16)) {
        struct.recInterestDate = iprot.readString();
        struct.setRecInterestDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.loanDate = iprot.readString();
        struct.setLoanDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.planRecLoanDate = iprot.readString();
        struct.setPlanRecLoanDateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.recMoney = iprot.readDouble();
        struct.setRecMoneyIsSet(true);
      }
      if (incoming.get(20)) {
        struct.recLoanDate = iprot.readString();
        struct.setRecLoanDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.remainingRecMoney = iprot.readDouble();
        struct.setRemainingRecMoneyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.overdueFee = iprot.readDouble();
        struct.setOverdueFeeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.overdueDay = iprot.readI32();
        struct.setOverdueDayIsSet(true);
      }
      if (incoming.get(24)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.extensionDate = iprot.readString();
        struct.setExtensionDateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.feeTotal = iprot.readDouble();
        struct.setFeeTotalIsSet(true);
      }
      if (incoming.get(27)) {
        struct.oldLoanBank = iprot.readString();
        struct.setOldLoanBankIsSet(true);
      }
      if (incoming.get(28)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(29)) {
        struct.innerOrOut = iprot.readI32();
        struct.setInnerOrOutIsSet(true);
      }
      if (incoming.get(30)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(31)) {
        struct.recFeeStatus = iprot.readI32();
        struct.setRecFeeStatusIsSet(true);
      }
      if (incoming.get(32)) {
        struct.bizHandleDynamic = iprot.readString();
        struct.setBizHandleDynamicIsSet(true);
      }
      if (incoming.get(33)) {
        struct.realLoan = iprot.readDouble();
        struct.setRealLoanIsSet(true);
      }
      if (incoming.get(34)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(35)) {
        struct.loanAmtMax = iprot.readDouble();
        struct.setLoanAmtMaxIsSet(true);
      }
      if (incoming.get(36)) {
        struct.handleFlowId = iprot.readI32();
        struct.setHandleFlowIdIsSet(true);
      }
      if (incoming.get(37)) {
        struct.handleFlowStartDate = iprot.readString();
        struct.setHandleFlowStartDateIsSet(true);
      }
      if (incoming.get(38)) {
        struct.handleFlowEndDate = iprot.readString();
        struct.setHandleFlowEndDateIsSet(true);
      }
      if (incoming.get(39)) {
        struct.foreclosureFloorDate = iprot.readString();
        struct.setForeclosureFloorDateIsSet(true);
      }
      if (incoming.get(40)) {
        struct.getOldLicenseDate = iprot.readString();
        struct.setGetOldLicenseDateIsSet(true);
      }
      if (incoming.get(41)) {
        struct.cancelMortgageDate = iprot.readString();
        struct.setCancelMortgageDateIsSet(true);
      }
      if (incoming.get(42)) {
        struct.transferDate = iprot.readString();
        struct.setTransferDateIsSet(true);
      }
      if (incoming.get(43)) {
        struct.getNewLicenseDate = iprot.readString();
        struct.setGetNewLicenseDateIsSet(true);
      }
      if (incoming.get(44)) {
        struct.mortgageDate = iprot.readString();
        struct.setMortgageDateIsSet(true);
      }
      if (incoming.get(45)) {
        struct.innerOrOutName = iprot.readString();
        struct.setInnerOrOutNameIsSet(true);
      }
      if (incoming.get(46)) {
        struct.foreclosureStatusName = iprot.readString();
        struct.setForeclosureStatusNameIsSet(true);
      }
      if (incoming.get(47)) {
        struct.businessSourceName = iprot.readString();
        struct.setBusinessSourceNameIsSet(true);
      }
      if (incoming.get(48)) {
        struct.loanEndDate = iprot.readString();
        struct.setLoanEndDateIsSet(true);
      }
      if (incoming.get(49)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(50)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(51)) {
        struct.chechanCause = iprot.readString();
        struct.setChechanCauseIsSet(true);
      }
      if (incoming.get(52)) {
        struct.chechanDate = iprot.readString();
        struct.setChechanDateIsSet(true);
      }
      if (incoming.get(53)) {
        struct.chechanUserId = iprot.readI32();
        struct.setChechanUserIdIsSet(true);
      }
      if (incoming.get(54)) {
        struct.newLoanBank = iprot.readString();
        struct.setNewLoanBankIsSet(true);
      }
      if (incoming.get(55)) {
        struct.newLoanBankBranch = iprot.readString();
        struct.setNewLoanBankBranchIsSet(true);
      }
      if (incoming.get(56)) {
        struct.applyName = iprot.readString();
        struct.setApplyNameIsSet(true);
      }
      if (incoming.get(57)) {
        struct.paymentType = iprot.readString();
        struct.setPaymentTypeIsSet(true);
      }
      if (incoming.get(58)) {
        struct.chechanUser = iprot.readString();
        struct.setChechanUserIsSet(true);
      }
    }
  }

}


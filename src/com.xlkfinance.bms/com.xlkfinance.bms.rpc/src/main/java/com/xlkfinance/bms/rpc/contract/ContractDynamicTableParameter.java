/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class ContractDynamicTableParameter implements org.apache.thrift.TBase<ContractDynamicTableParameter, ContractDynamicTableParameter._Fields>, java.io.Serializable, Cloneable, Comparable<ContractDynamicTableParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractDynamicTableParameter");

  private static final org.apache.thrift.protocol.TField GOODS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GOODS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GOODS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsCount", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GOODS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsUnit", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GOODS_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsAddress", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GOODS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsValue", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GOODS_EFFECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsEffective", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_GOODS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("isGoodsName", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_GOODS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("isGoodsNumber", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IS_GOODS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("isGoodsCount", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField IS_GOODS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("isGoodsUnit", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IS_GOODS_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("isGoodsAddress", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField IS_GOODS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("isGoodsValue", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField IS_GOODS_EFFECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isGoodsEffective", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNumber", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField COL0_FIELD_DESC = new org.apache.thrift.protocol.TField("col0", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField COL1_FIELD_DESC = new org.apache.thrift.protocol.TField("col1", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COL2_FIELD_DESC = new org.apache.thrift.protocol.TField("col2", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField COL3_FIELD_DESC = new org.apache.thrift.protocol.TField("col3", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField COL4_FIELD_DESC = new org.apache.thrift.protocol.TField("col4", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField COL5_FIELD_DESC = new org.apache.thrift.protocol.TField("col5", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField COL6_FIELD_DESC = new org.apache.thrift.protocol.TField("col6", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractDynamicTableParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractDynamicTableParameterTupleSchemeFactory());
  }

  public String goodsName; // required
  public String goodsNumber; // required
  public String goodsCount; // required
  public String goodsUnit; // required
  public String goodsAddress; // required
  public String goodsValue; // required
  public String goodsEffective; // required
  public boolean isGoodsName; // required
  public boolean isGoodsNumber; // required
  public boolean isGoodsCount; // required
  public boolean isGoodsUnit; // required
  public boolean isGoodsAddress; // required
  public boolean isGoodsValue; // required
  public boolean isGoodsEffective; // required
  public int pid; // required
  public int lineNumber; // required
  public int contractId; // required
  public int status; // required
  public String col0; // required
  public String col1; // required
  public String col2; // required
  public String col3; // required
  public String col4; // required
  public String col5; // required
  public String col6; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GOODS_NAME((short)1, "goodsName"),
    GOODS_NUMBER((short)2, "goodsNumber"),
    GOODS_COUNT((short)3, "goodsCount"),
    GOODS_UNIT((short)4, "goodsUnit"),
    GOODS_ADDRESS((short)5, "goodsAddress"),
    GOODS_VALUE((short)6, "goodsValue"),
    GOODS_EFFECTIVE((short)7, "goodsEffective"),
    IS_GOODS_NAME((short)8, "isGoodsName"),
    IS_GOODS_NUMBER((short)9, "isGoodsNumber"),
    IS_GOODS_COUNT((short)10, "isGoodsCount"),
    IS_GOODS_UNIT((short)11, "isGoodsUnit"),
    IS_GOODS_ADDRESS((short)12, "isGoodsAddress"),
    IS_GOODS_VALUE((short)13, "isGoodsValue"),
    IS_GOODS_EFFECTIVE((short)14, "isGoodsEffective"),
    PID((short)15, "pid"),
    LINE_NUMBER((short)16, "lineNumber"),
    CONTRACT_ID((short)17, "contractId"),
    STATUS((short)18, "status"),
    COL0((short)19, "col0"),
    COL1((short)20, "col1"),
    COL2((short)21, "col2"),
    COL3((short)22, "col3"),
    COL4((short)23, "col4"),
    COL5((short)24, "col5"),
    COL6((short)25, "col6");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GOODS_NAME
          return GOODS_NAME;
        case 2: // GOODS_NUMBER
          return GOODS_NUMBER;
        case 3: // GOODS_COUNT
          return GOODS_COUNT;
        case 4: // GOODS_UNIT
          return GOODS_UNIT;
        case 5: // GOODS_ADDRESS
          return GOODS_ADDRESS;
        case 6: // GOODS_VALUE
          return GOODS_VALUE;
        case 7: // GOODS_EFFECTIVE
          return GOODS_EFFECTIVE;
        case 8: // IS_GOODS_NAME
          return IS_GOODS_NAME;
        case 9: // IS_GOODS_NUMBER
          return IS_GOODS_NUMBER;
        case 10: // IS_GOODS_COUNT
          return IS_GOODS_COUNT;
        case 11: // IS_GOODS_UNIT
          return IS_GOODS_UNIT;
        case 12: // IS_GOODS_ADDRESS
          return IS_GOODS_ADDRESS;
        case 13: // IS_GOODS_VALUE
          return IS_GOODS_VALUE;
        case 14: // IS_GOODS_EFFECTIVE
          return IS_GOODS_EFFECTIVE;
        case 15: // PID
          return PID;
        case 16: // LINE_NUMBER
          return LINE_NUMBER;
        case 17: // CONTRACT_ID
          return CONTRACT_ID;
        case 18: // STATUS
          return STATUS;
        case 19: // COL0
          return COL0;
        case 20: // COL1
          return COL1;
        case 21: // COL2
          return COL2;
        case 22: // COL3
          return COL3;
        case 23: // COL4
          return COL4;
        case 24: // COL5
          return COL5;
        case 25: // COL6
          return COL6;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISGOODSNAME_ISSET_ID = 0;
  private static final int __ISGOODSNUMBER_ISSET_ID = 1;
  private static final int __ISGOODSCOUNT_ISSET_ID = 2;
  private static final int __ISGOODSUNIT_ISSET_ID = 3;
  private static final int __ISGOODSADDRESS_ISSET_ID = 4;
  private static final int __ISGOODSVALUE_ISSET_ID = 5;
  private static final int __ISGOODSEFFECTIVE_ISSET_ID = 6;
  private static final int __PID_ISSET_ID = 7;
  private static final int __LINENUMBER_ISSET_ID = 8;
  private static final int __CONTRACTID_ISSET_ID = 9;
  private static final int __STATUS_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GOODS_NAME, new org.apache.thrift.meta_data.FieldMetaData("goodsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("goodsNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("goodsCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("goodsUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("goodsAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("goodsValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_EFFECTIVE, new org.apache.thrift.meta_data.FieldMetaData("goodsEffective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_GOODS_NAME, new org.apache.thrift.meta_data.FieldMetaData("isGoodsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_GOODS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("isGoodsNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_GOODS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("isGoodsCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_GOODS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("isGoodsUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_GOODS_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("isGoodsAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_GOODS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("isGoodsValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_GOODS_EFFECTIVE, new org.apache.thrift.meta_data.FieldMetaData("isGoodsEffective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lineNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COL0, new org.apache.thrift.meta_data.FieldMetaData("col0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL1, new org.apache.thrift.meta_data.FieldMetaData("col1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL2, new org.apache.thrift.meta_data.FieldMetaData("col2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL3, new org.apache.thrift.meta_data.FieldMetaData("col3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL4, new org.apache.thrift.meta_data.FieldMetaData("col4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL5, new org.apache.thrift.meta_data.FieldMetaData("col5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL6, new org.apache.thrift.meta_data.FieldMetaData("col6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractDynamicTableParameter.class, metaDataMap);
  }

  public ContractDynamicTableParameter() {
  }

  public ContractDynamicTableParameter(
    String goodsName,
    String goodsNumber,
    String goodsCount,
    String goodsUnit,
    String goodsAddress,
    String goodsValue,
    String goodsEffective,
    boolean isGoodsName,
    boolean isGoodsNumber,
    boolean isGoodsCount,
    boolean isGoodsUnit,
    boolean isGoodsAddress,
    boolean isGoodsValue,
    boolean isGoodsEffective,
    int pid,
    int lineNumber,
    int contractId,
    int status,
    String col0,
    String col1,
    String col2,
    String col3,
    String col4,
    String col5,
    String col6)
  {
    this();
    this.goodsName = goodsName;
    this.goodsNumber = goodsNumber;
    this.goodsCount = goodsCount;
    this.goodsUnit = goodsUnit;
    this.goodsAddress = goodsAddress;
    this.goodsValue = goodsValue;
    this.goodsEffective = goodsEffective;
    this.isGoodsName = isGoodsName;
    setIsGoodsNameIsSet(true);
    this.isGoodsNumber = isGoodsNumber;
    setIsGoodsNumberIsSet(true);
    this.isGoodsCount = isGoodsCount;
    setIsGoodsCountIsSet(true);
    this.isGoodsUnit = isGoodsUnit;
    setIsGoodsUnitIsSet(true);
    this.isGoodsAddress = isGoodsAddress;
    setIsGoodsAddressIsSet(true);
    this.isGoodsValue = isGoodsValue;
    setIsGoodsValueIsSet(true);
    this.isGoodsEffective = isGoodsEffective;
    setIsGoodsEffectiveIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.lineNumber = lineNumber;
    setLineNumberIsSet(true);
    this.contractId = contractId;
    setContractIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.col0 = col0;
    this.col1 = col1;
    this.col2 = col2;
    this.col3 = col3;
    this.col4 = col4;
    this.col5 = col5;
    this.col6 = col6;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractDynamicTableParameter(ContractDynamicTableParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGoodsName()) {
      this.goodsName = other.goodsName;
    }
    if (other.isSetGoodsNumber()) {
      this.goodsNumber = other.goodsNumber;
    }
    if (other.isSetGoodsCount()) {
      this.goodsCount = other.goodsCount;
    }
    if (other.isSetGoodsUnit()) {
      this.goodsUnit = other.goodsUnit;
    }
    if (other.isSetGoodsAddress()) {
      this.goodsAddress = other.goodsAddress;
    }
    if (other.isSetGoodsValue()) {
      this.goodsValue = other.goodsValue;
    }
    if (other.isSetGoodsEffective()) {
      this.goodsEffective = other.goodsEffective;
    }
    this.isGoodsName = other.isGoodsName;
    this.isGoodsNumber = other.isGoodsNumber;
    this.isGoodsCount = other.isGoodsCount;
    this.isGoodsUnit = other.isGoodsUnit;
    this.isGoodsAddress = other.isGoodsAddress;
    this.isGoodsValue = other.isGoodsValue;
    this.isGoodsEffective = other.isGoodsEffective;
    this.pid = other.pid;
    this.lineNumber = other.lineNumber;
    this.contractId = other.contractId;
    this.status = other.status;
    if (other.isSetCol0()) {
      this.col0 = other.col0;
    }
    if (other.isSetCol1()) {
      this.col1 = other.col1;
    }
    if (other.isSetCol2()) {
      this.col2 = other.col2;
    }
    if (other.isSetCol3()) {
      this.col3 = other.col3;
    }
    if (other.isSetCol4()) {
      this.col4 = other.col4;
    }
    if (other.isSetCol5()) {
      this.col5 = other.col5;
    }
    if (other.isSetCol6()) {
      this.col6 = other.col6;
    }
  }

  public ContractDynamicTableParameter deepCopy() {
    return new ContractDynamicTableParameter(this);
  }

  @Override
  public void clear() {
    this.goodsName = null;
    this.goodsNumber = null;
    this.goodsCount = null;
    this.goodsUnit = null;
    this.goodsAddress = null;
    this.goodsValue = null;
    this.goodsEffective = null;
    setIsGoodsNameIsSet(false);
    this.isGoodsName = false;
    setIsGoodsNumberIsSet(false);
    this.isGoodsNumber = false;
    setIsGoodsCountIsSet(false);
    this.isGoodsCount = false;
    setIsGoodsUnitIsSet(false);
    this.isGoodsUnit = false;
    setIsGoodsAddressIsSet(false);
    this.isGoodsAddress = false;
    setIsGoodsValueIsSet(false);
    this.isGoodsValue = false;
    setIsGoodsEffectiveIsSet(false);
    this.isGoodsEffective = false;
    setPidIsSet(false);
    this.pid = 0;
    setLineNumberIsSet(false);
    this.lineNumber = 0;
    setContractIdIsSet(false);
    this.contractId = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.col0 = null;
    this.col1 = null;
    this.col2 = null;
    this.col3 = null;
    this.col4 = null;
    this.col5 = null;
    this.col6 = null;
  }

  public String getGoodsName() {
    return this.goodsName;
  }

  public ContractDynamicTableParameter setGoodsName(String goodsName) {
    this.goodsName = goodsName;
    return this;
  }

  public void unsetGoodsName() {
    this.goodsName = null;
  }

  /** Returns true if field goodsName is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsName() {
    return this.goodsName != null;
  }

  public void setGoodsNameIsSet(boolean value) {
    if (!value) {
      this.goodsName = null;
    }
  }

  public String getGoodsNumber() {
    return this.goodsNumber;
  }

  public ContractDynamicTableParameter setGoodsNumber(String goodsNumber) {
    this.goodsNumber = goodsNumber;
    return this;
  }

  public void unsetGoodsNumber() {
    this.goodsNumber = null;
  }

  /** Returns true if field goodsNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsNumber() {
    return this.goodsNumber != null;
  }

  public void setGoodsNumberIsSet(boolean value) {
    if (!value) {
      this.goodsNumber = null;
    }
  }

  public String getGoodsCount() {
    return this.goodsCount;
  }

  public ContractDynamicTableParameter setGoodsCount(String goodsCount) {
    this.goodsCount = goodsCount;
    return this;
  }

  public void unsetGoodsCount() {
    this.goodsCount = null;
  }

  /** Returns true if field goodsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsCount() {
    return this.goodsCount != null;
  }

  public void setGoodsCountIsSet(boolean value) {
    if (!value) {
      this.goodsCount = null;
    }
  }

  public String getGoodsUnit() {
    return this.goodsUnit;
  }

  public ContractDynamicTableParameter setGoodsUnit(String goodsUnit) {
    this.goodsUnit = goodsUnit;
    return this;
  }

  public void unsetGoodsUnit() {
    this.goodsUnit = null;
  }

  /** Returns true if field goodsUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsUnit() {
    return this.goodsUnit != null;
  }

  public void setGoodsUnitIsSet(boolean value) {
    if (!value) {
      this.goodsUnit = null;
    }
  }

  public String getGoodsAddress() {
    return this.goodsAddress;
  }

  public ContractDynamicTableParameter setGoodsAddress(String goodsAddress) {
    this.goodsAddress = goodsAddress;
    return this;
  }

  public void unsetGoodsAddress() {
    this.goodsAddress = null;
  }

  /** Returns true if field goodsAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsAddress() {
    return this.goodsAddress != null;
  }

  public void setGoodsAddressIsSet(boolean value) {
    if (!value) {
      this.goodsAddress = null;
    }
  }

  public String getGoodsValue() {
    return this.goodsValue;
  }

  public ContractDynamicTableParameter setGoodsValue(String goodsValue) {
    this.goodsValue = goodsValue;
    return this;
  }

  public void unsetGoodsValue() {
    this.goodsValue = null;
  }

  /** Returns true if field goodsValue is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsValue() {
    return this.goodsValue != null;
  }

  public void setGoodsValueIsSet(boolean value) {
    if (!value) {
      this.goodsValue = null;
    }
  }

  public String getGoodsEffective() {
    return this.goodsEffective;
  }

  public ContractDynamicTableParameter setGoodsEffective(String goodsEffective) {
    this.goodsEffective = goodsEffective;
    return this;
  }

  public void unsetGoodsEffective() {
    this.goodsEffective = null;
  }

  /** Returns true if field goodsEffective is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsEffective() {
    return this.goodsEffective != null;
  }

  public void setGoodsEffectiveIsSet(boolean value) {
    if (!value) {
      this.goodsEffective = null;
    }
  }

  public boolean isIsGoodsName() {
    return this.isGoodsName;
  }

  public ContractDynamicTableParameter setIsGoodsName(boolean isGoodsName) {
    this.isGoodsName = isGoodsName;
    setIsGoodsNameIsSet(true);
    return this;
  }

  public void unsetIsGoodsName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGOODSNAME_ISSET_ID);
  }

  /** Returns true if field isGoodsName is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGoodsName() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGOODSNAME_ISSET_ID);
  }

  public void setIsGoodsNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGOODSNAME_ISSET_ID, value);
  }

  public boolean isIsGoodsNumber() {
    return this.isGoodsNumber;
  }

  public ContractDynamicTableParameter setIsGoodsNumber(boolean isGoodsNumber) {
    this.isGoodsNumber = isGoodsNumber;
    setIsGoodsNumberIsSet(true);
    return this;
  }

  public void unsetIsGoodsNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGOODSNUMBER_ISSET_ID);
  }

  /** Returns true if field isGoodsNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGoodsNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGOODSNUMBER_ISSET_ID);
  }

  public void setIsGoodsNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGOODSNUMBER_ISSET_ID, value);
  }

  public boolean isIsGoodsCount() {
    return this.isGoodsCount;
  }

  public ContractDynamicTableParameter setIsGoodsCount(boolean isGoodsCount) {
    this.isGoodsCount = isGoodsCount;
    setIsGoodsCountIsSet(true);
    return this;
  }

  public void unsetIsGoodsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGOODSCOUNT_ISSET_ID);
  }

  /** Returns true if field isGoodsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGoodsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGOODSCOUNT_ISSET_ID);
  }

  public void setIsGoodsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGOODSCOUNT_ISSET_ID, value);
  }

  public boolean isIsGoodsUnit() {
    return this.isGoodsUnit;
  }

  public ContractDynamicTableParameter setIsGoodsUnit(boolean isGoodsUnit) {
    this.isGoodsUnit = isGoodsUnit;
    setIsGoodsUnitIsSet(true);
    return this;
  }

  public void unsetIsGoodsUnit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGOODSUNIT_ISSET_ID);
  }

  /** Returns true if field isGoodsUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGoodsUnit() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGOODSUNIT_ISSET_ID);
  }

  public void setIsGoodsUnitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGOODSUNIT_ISSET_ID, value);
  }

  public boolean isIsGoodsAddress() {
    return this.isGoodsAddress;
  }

  public ContractDynamicTableParameter setIsGoodsAddress(boolean isGoodsAddress) {
    this.isGoodsAddress = isGoodsAddress;
    setIsGoodsAddressIsSet(true);
    return this;
  }

  public void unsetIsGoodsAddress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGOODSADDRESS_ISSET_ID);
  }

  /** Returns true if field isGoodsAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGoodsAddress() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGOODSADDRESS_ISSET_ID);
  }

  public void setIsGoodsAddressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGOODSADDRESS_ISSET_ID, value);
  }

  public boolean isIsGoodsValue() {
    return this.isGoodsValue;
  }

  public ContractDynamicTableParameter setIsGoodsValue(boolean isGoodsValue) {
    this.isGoodsValue = isGoodsValue;
    setIsGoodsValueIsSet(true);
    return this;
  }

  public void unsetIsGoodsValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGOODSVALUE_ISSET_ID);
  }

  /** Returns true if field isGoodsValue is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGoodsValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGOODSVALUE_ISSET_ID);
  }

  public void setIsGoodsValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGOODSVALUE_ISSET_ID, value);
  }

  public boolean isIsGoodsEffective() {
    return this.isGoodsEffective;
  }

  public ContractDynamicTableParameter setIsGoodsEffective(boolean isGoodsEffective) {
    this.isGoodsEffective = isGoodsEffective;
    setIsGoodsEffectiveIsSet(true);
    return this;
  }

  public void unsetIsGoodsEffective() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGOODSEFFECTIVE_ISSET_ID);
  }

  /** Returns true if field isGoodsEffective is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGoodsEffective() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGOODSEFFECTIVE_ISSET_ID);
  }

  public void setIsGoodsEffectiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGOODSEFFECTIVE_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public ContractDynamicTableParameter setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLineNumber() {
    return this.lineNumber;
  }

  public ContractDynamicTableParameter setLineNumber(int lineNumber) {
    this.lineNumber = lineNumber;
    setLineNumberIsSet(true);
    return this;
  }

  public void unsetLineNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
  }

  /** Returns true if field lineNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetLineNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
  }

  public void setLineNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINENUMBER_ISSET_ID, value);
  }

  public int getContractId() {
    return this.contractId;
  }

  public ContractDynamicTableParameter setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public ContractDynamicTableParameter setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getCol0() {
    return this.col0;
  }

  public ContractDynamicTableParameter setCol0(String col0) {
    this.col0 = col0;
    return this;
  }

  public void unsetCol0() {
    this.col0 = null;
  }

  /** Returns true if field col0 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol0() {
    return this.col0 != null;
  }

  public void setCol0IsSet(boolean value) {
    if (!value) {
      this.col0 = null;
    }
  }

  public String getCol1() {
    return this.col1;
  }

  public ContractDynamicTableParameter setCol1(String col1) {
    this.col1 = col1;
    return this;
  }

  public void unsetCol1() {
    this.col1 = null;
  }

  /** Returns true if field col1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol1() {
    return this.col1 != null;
  }

  public void setCol1IsSet(boolean value) {
    if (!value) {
      this.col1 = null;
    }
  }

  public String getCol2() {
    return this.col2;
  }

  public ContractDynamicTableParameter setCol2(String col2) {
    this.col2 = col2;
    return this;
  }

  public void unsetCol2() {
    this.col2 = null;
  }

  /** Returns true if field col2 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol2() {
    return this.col2 != null;
  }

  public void setCol2IsSet(boolean value) {
    if (!value) {
      this.col2 = null;
    }
  }

  public String getCol3() {
    return this.col3;
  }

  public ContractDynamicTableParameter setCol3(String col3) {
    this.col3 = col3;
    return this;
  }

  public void unsetCol3() {
    this.col3 = null;
  }

  /** Returns true if field col3 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol3() {
    return this.col3 != null;
  }

  public void setCol3IsSet(boolean value) {
    if (!value) {
      this.col3 = null;
    }
  }

  public String getCol4() {
    return this.col4;
  }

  public ContractDynamicTableParameter setCol4(String col4) {
    this.col4 = col4;
    return this;
  }

  public void unsetCol4() {
    this.col4 = null;
  }

  /** Returns true if field col4 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol4() {
    return this.col4 != null;
  }

  public void setCol4IsSet(boolean value) {
    if (!value) {
      this.col4 = null;
    }
  }

  public String getCol5() {
    return this.col5;
  }

  public ContractDynamicTableParameter setCol5(String col5) {
    this.col5 = col5;
    return this;
  }

  public void unsetCol5() {
    this.col5 = null;
  }

  /** Returns true if field col5 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol5() {
    return this.col5 != null;
  }

  public void setCol5IsSet(boolean value) {
    if (!value) {
      this.col5 = null;
    }
  }

  public String getCol6() {
    return this.col6;
  }

  public ContractDynamicTableParameter setCol6(String col6) {
    this.col6 = col6;
    return this;
  }

  public void unsetCol6() {
    this.col6 = null;
  }

  /** Returns true if field col6 is set (has been assigned a value) and false otherwise */
  public boolean isSetCol6() {
    return this.col6 != null;
  }

  public void setCol6IsSet(boolean value) {
    if (!value) {
      this.col6 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GOODS_NAME:
      if (value == null) {
        unsetGoodsName();
      } else {
        setGoodsName((String)value);
      }
      break;

    case GOODS_NUMBER:
      if (value == null) {
        unsetGoodsNumber();
      } else {
        setGoodsNumber((String)value);
      }
      break;

    case GOODS_COUNT:
      if (value == null) {
        unsetGoodsCount();
      } else {
        setGoodsCount((String)value);
      }
      break;

    case GOODS_UNIT:
      if (value == null) {
        unsetGoodsUnit();
      } else {
        setGoodsUnit((String)value);
      }
      break;

    case GOODS_ADDRESS:
      if (value == null) {
        unsetGoodsAddress();
      } else {
        setGoodsAddress((String)value);
      }
      break;

    case GOODS_VALUE:
      if (value == null) {
        unsetGoodsValue();
      } else {
        setGoodsValue((String)value);
      }
      break;

    case GOODS_EFFECTIVE:
      if (value == null) {
        unsetGoodsEffective();
      } else {
        setGoodsEffective((String)value);
      }
      break;

    case IS_GOODS_NAME:
      if (value == null) {
        unsetIsGoodsName();
      } else {
        setIsGoodsName((Boolean)value);
      }
      break;

    case IS_GOODS_NUMBER:
      if (value == null) {
        unsetIsGoodsNumber();
      } else {
        setIsGoodsNumber((Boolean)value);
      }
      break;

    case IS_GOODS_COUNT:
      if (value == null) {
        unsetIsGoodsCount();
      } else {
        setIsGoodsCount((Boolean)value);
      }
      break;

    case IS_GOODS_UNIT:
      if (value == null) {
        unsetIsGoodsUnit();
      } else {
        setIsGoodsUnit((Boolean)value);
      }
      break;

    case IS_GOODS_ADDRESS:
      if (value == null) {
        unsetIsGoodsAddress();
      } else {
        setIsGoodsAddress((Boolean)value);
      }
      break;

    case IS_GOODS_VALUE:
      if (value == null) {
        unsetIsGoodsValue();
      } else {
        setIsGoodsValue((Boolean)value);
      }
      break;

    case IS_GOODS_EFFECTIVE:
      if (value == null) {
        unsetIsGoodsEffective();
      } else {
        setIsGoodsEffective((Boolean)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LINE_NUMBER:
      if (value == null) {
        unsetLineNumber();
      } else {
        setLineNumber((Integer)value);
      }
      break;

    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case COL0:
      if (value == null) {
        unsetCol0();
      } else {
        setCol0((String)value);
      }
      break;

    case COL1:
      if (value == null) {
        unsetCol1();
      } else {
        setCol1((String)value);
      }
      break;

    case COL2:
      if (value == null) {
        unsetCol2();
      } else {
        setCol2((String)value);
      }
      break;

    case COL3:
      if (value == null) {
        unsetCol3();
      } else {
        setCol3((String)value);
      }
      break;

    case COL4:
      if (value == null) {
        unsetCol4();
      } else {
        setCol4((String)value);
      }
      break;

    case COL5:
      if (value == null) {
        unsetCol5();
      } else {
        setCol5((String)value);
      }
      break;

    case COL6:
      if (value == null) {
        unsetCol6();
      } else {
        setCol6((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GOODS_NAME:
      return getGoodsName();

    case GOODS_NUMBER:
      return getGoodsNumber();

    case GOODS_COUNT:
      return getGoodsCount();

    case GOODS_UNIT:
      return getGoodsUnit();

    case GOODS_ADDRESS:
      return getGoodsAddress();

    case GOODS_VALUE:
      return getGoodsValue();

    case GOODS_EFFECTIVE:
      return getGoodsEffective();

    case IS_GOODS_NAME:
      return Boolean.valueOf(isIsGoodsName());

    case IS_GOODS_NUMBER:
      return Boolean.valueOf(isIsGoodsNumber());

    case IS_GOODS_COUNT:
      return Boolean.valueOf(isIsGoodsCount());

    case IS_GOODS_UNIT:
      return Boolean.valueOf(isIsGoodsUnit());

    case IS_GOODS_ADDRESS:
      return Boolean.valueOf(isIsGoodsAddress());

    case IS_GOODS_VALUE:
      return Boolean.valueOf(isIsGoodsValue());

    case IS_GOODS_EFFECTIVE:
      return Boolean.valueOf(isIsGoodsEffective());

    case PID:
      return Integer.valueOf(getPid());

    case LINE_NUMBER:
      return Integer.valueOf(getLineNumber());

    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case COL0:
      return getCol0();

    case COL1:
      return getCol1();

    case COL2:
      return getCol2();

    case COL3:
      return getCol3();

    case COL4:
      return getCol4();

    case COL5:
      return getCol5();

    case COL6:
      return getCol6();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GOODS_NAME:
      return isSetGoodsName();
    case GOODS_NUMBER:
      return isSetGoodsNumber();
    case GOODS_COUNT:
      return isSetGoodsCount();
    case GOODS_UNIT:
      return isSetGoodsUnit();
    case GOODS_ADDRESS:
      return isSetGoodsAddress();
    case GOODS_VALUE:
      return isSetGoodsValue();
    case GOODS_EFFECTIVE:
      return isSetGoodsEffective();
    case IS_GOODS_NAME:
      return isSetIsGoodsName();
    case IS_GOODS_NUMBER:
      return isSetIsGoodsNumber();
    case IS_GOODS_COUNT:
      return isSetIsGoodsCount();
    case IS_GOODS_UNIT:
      return isSetIsGoodsUnit();
    case IS_GOODS_ADDRESS:
      return isSetIsGoodsAddress();
    case IS_GOODS_VALUE:
      return isSetIsGoodsValue();
    case IS_GOODS_EFFECTIVE:
      return isSetIsGoodsEffective();
    case PID:
      return isSetPid();
    case LINE_NUMBER:
      return isSetLineNumber();
    case CONTRACT_ID:
      return isSetContractId();
    case STATUS:
      return isSetStatus();
    case COL0:
      return isSetCol0();
    case COL1:
      return isSetCol1();
    case COL2:
      return isSetCol2();
    case COL3:
      return isSetCol3();
    case COL4:
      return isSetCol4();
    case COL5:
      return isSetCol5();
    case COL6:
      return isSetCol6();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractDynamicTableParameter)
      return this.equals((ContractDynamicTableParameter)that);
    return false;
  }

  public boolean equals(ContractDynamicTableParameter that) {
    if (that == null)
      return false;

    boolean this_present_goodsName = true && this.isSetGoodsName();
    boolean that_present_goodsName = true && that.isSetGoodsName();
    if (this_present_goodsName || that_present_goodsName) {
      if (!(this_present_goodsName && that_present_goodsName))
        return false;
      if (!this.goodsName.equals(that.goodsName))
        return false;
    }

    boolean this_present_goodsNumber = true && this.isSetGoodsNumber();
    boolean that_present_goodsNumber = true && that.isSetGoodsNumber();
    if (this_present_goodsNumber || that_present_goodsNumber) {
      if (!(this_present_goodsNumber && that_present_goodsNumber))
        return false;
      if (!this.goodsNumber.equals(that.goodsNumber))
        return false;
    }

    boolean this_present_goodsCount = true && this.isSetGoodsCount();
    boolean that_present_goodsCount = true && that.isSetGoodsCount();
    if (this_present_goodsCount || that_present_goodsCount) {
      if (!(this_present_goodsCount && that_present_goodsCount))
        return false;
      if (!this.goodsCount.equals(that.goodsCount))
        return false;
    }

    boolean this_present_goodsUnit = true && this.isSetGoodsUnit();
    boolean that_present_goodsUnit = true && that.isSetGoodsUnit();
    if (this_present_goodsUnit || that_present_goodsUnit) {
      if (!(this_present_goodsUnit && that_present_goodsUnit))
        return false;
      if (!this.goodsUnit.equals(that.goodsUnit))
        return false;
    }

    boolean this_present_goodsAddress = true && this.isSetGoodsAddress();
    boolean that_present_goodsAddress = true && that.isSetGoodsAddress();
    if (this_present_goodsAddress || that_present_goodsAddress) {
      if (!(this_present_goodsAddress && that_present_goodsAddress))
        return false;
      if (!this.goodsAddress.equals(that.goodsAddress))
        return false;
    }

    boolean this_present_goodsValue = true && this.isSetGoodsValue();
    boolean that_present_goodsValue = true && that.isSetGoodsValue();
    if (this_present_goodsValue || that_present_goodsValue) {
      if (!(this_present_goodsValue && that_present_goodsValue))
        return false;
      if (!this.goodsValue.equals(that.goodsValue))
        return false;
    }

    boolean this_present_goodsEffective = true && this.isSetGoodsEffective();
    boolean that_present_goodsEffective = true && that.isSetGoodsEffective();
    if (this_present_goodsEffective || that_present_goodsEffective) {
      if (!(this_present_goodsEffective && that_present_goodsEffective))
        return false;
      if (!this.goodsEffective.equals(that.goodsEffective))
        return false;
    }

    boolean this_present_isGoodsName = true;
    boolean that_present_isGoodsName = true;
    if (this_present_isGoodsName || that_present_isGoodsName) {
      if (!(this_present_isGoodsName && that_present_isGoodsName))
        return false;
      if (this.isGoodsName != that.isGoodsName)
        return false;
    }

    boolean this_present_isGoodsNumber = true;
    boolean that_present_isGoodsNumber = true;
    if (this_present_isGoodsNumber || that_present_isGoodsNumber) {
      if (!(this_present_isGoodsNumber && that_present_isGoodsNumber))
        return false;
      if (this.isGoodsNumber != that.isGoodsNumber)
        return false;
    }

    boolean this_present_isGoodsCount = true;
    boolean that_present_isGoodsCount = true;
    if (this_present_isGoodsCount || that_present_isGoodsCount) {
      if (!(this_present_isGoodsCount && that_present_isGoodsCount))
        return false;
      if (this.isGoodsCount != that.isGoodsCount)
        return false;
    }

    boolean this_present_isGoodsUnit = true;
    boolean that_present_isGoodsUnit = true;
    if (this_present_isGoodsUnit || that_present_isGoodsUnit) {
      if (!(this_present_isGoodsUnit && that_present_isGoodsUnit))
        return false;
      if (this.isGoodsUnit != that.isGoodsUnit)
        return false;
    }

    boolean this_present_isGoodsAddress = true;
    boolean that_present_isGoodsAddress = true;
    if (this_present_isGoodsAddress || that_present_isGoodsAddress) {
      if (!(this_present_isGoodsAddress && that_present_isGoodsAddress))
        return false;
      if (this.isGoodsAddress != that.isGoodsAddress)
        return false;
    }

    boolean this_present_isGoodsValue = true;
    boolean that_present_isGoodsValue = true;
    if (this_present_isGoodsValue || that_present_isGoodsValue) {
      if (!(this_present_isGoodsValue && that_present_isGoodsValue))
        return false;
      if (this.isGoodsValue != that.isGoodsValue)
        return false;
    }

    boolean this_present_isGoodsEffective = true;
    boolean that_present_isGoodsEffective = true;
    if (this_present_isGoodsEffective || that_present_isGoodsEffective) {
      if (!(this_present_isGoodsEffective && that_present_isGoodsEffective))
        return false;
      if (this.isGoodsEffective != that.isGoodsEffective)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_lineNumber = true;
    boolean that_present_lineNumber = true;
    if (this_present_lineNumber || that_present_lineNumber) {
      if (!(this_present_lineNumber && that_present_lineNumber))
        return false;
      if (this.lineNumber != that.lineNumber)
        return false;
    }

    boolean this_present_contractId = true;
    boolean that_present_contractId = true;
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_col0 = true && this.isSetCol0();
    boolean that_present_col0 = true && that.isSetCol0();
    if (this_present_col0 || that_present_col0) {
      if (!(this_present_col0 && that_present_col0))
        return false;
      if (!this.col0.equals(that.col0))
        return false;
    }

    boolean this_present_col1 = true && this.isSetCol1();
    boolean that_present_col1 = true && that.isSetCol1();
    if (this_present_col1 || that_present_col1) {
      if (!(this_present_col1 && that_present_col1))
        return false;
      if (!this.col1.equals(that.col1))
        return false;
    }

    boolean this_present_col2 = true && this.isSetCol2();
    boolean that_present_col2 = true && that.isSetCol2();
    if (this_present_col2 || that_present_col2) {
      if (!(this_present_col2 && that_present_col2))
        return false;
      if (!this.col2.equals(that.col2))
        return false;
    }

    boolean this_present_col3 = true && this.isSetCol3();
    boolean that_present_col3 = true && that.isSetCol3();
    if (this_present_col3 || that_present_col3) {
      if (!(this_present_col3 && that_present_col3))
        return false;
      if (!this.col3.equals(that.col3))
        return false;
    }

    boolean this_present_col4 = true && this.isSetCol4();
    boolean that_present_col4 = true && that.isSetCol4();
    if (this_present_col4 || that_present_col4) {
      if (!(this_present_col4 && that_present_col4))
        return false;
      if (!this.col4.equals(that.col4))
        return false;
    }

    boolean this_present_col5 = true && this.isSetCol5();
    boolean that_present_col5 = true && that.isSetCol5();
    if (this_present_col5 || that_present_col5) {
      if (!(this_present_col5 && that_present_col5))
        return false;
      if (!this.col5.equals(that.col5))
        return false;
    }

    boolean this_present_col6 = true && this.isSetCol6();
    boolean that_present_col6 = true && that.isSetCol6();
    if (this_present_col6 || that_present_col6) {
      if (!(this_present_col6 && that_present_col6))
        return false;
      if (!this.col6.equals(that.col6))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_goodsName = true && (isSetGoodsName());
    list.add(present_goodsName);
    if (present_goodsName)
      list.add(goodsName);

    boolean present_goodsNumber = true && (isSetGoodsNumber());
    list.add(present_goodsNumber);
    if (present_goodsNumber)
      list.add(goodsNumber);

    boolean present_goodsCount = true && (isSetGoodsCount());
    list.add(present_goodsCount);
    if (present_goodsCount)
      list.add(goodsCount);

    boolean present_goodsUnit = true && (isSetGoodsUnit());
    list.add(present_goodsUnit);
    if (present_goodsUnit)
      list.add(goodsUnit);

    boolean present_goodsAddress = true && (isSetGoodsAddress());
    list.add(present_goodsAddress);
    if (present_goodsAddress)
      list.add(goodsAddress);

    boolean present_goodsValue = true && (isSetGoodsValue());
    list.add(present_goodsValue);
    if (present_goodsValue)
      list.add(goodsValue);

    boolean present_goodsEffective = true && (isSetGoodsEffective());
    list.add(present_goodsEffective);
    if (present_goodsEffective)
      list.add(goodsEffective);

    boolean present_isGoodsName = true;
    list.add(present_isGoodsName);
    if (present_isGoodsName)
      list.add(isGoodsName);

    boolean present_isGoodsNumber = true;
    list.add(present_isGoodsNumber);
    if (present_isGoodsNumber)
      list.add(isGoodsNumber);

    boolean present_isGoodsCount = true;
    list.add(present_isGoodsCount);
    if (present_isGoodsCount)
      list.add(isGoodsCount);

    boolean present_isGoodsUnit = true;
    list.add(present_isGoodsUnit);
    if (present_isGoodsUnit)
      list.add(isGoodsUnit);

    boolean present_isGoodsAddress = true;
    list.add(present_isGoodsAddress);
    if (present_isGoodsAddress)
      list.add(isGoodsAddress);

    boolean present_isGoodsValue = true;
    list.add(present_isGoodsValue);
    if (present_isGoodsValue)
      list.add(isGoodsValue);

    boolean present_isGoodsEffective = true;
    list.add(present_isGoodsEffective);
    if (present_isGoodsEffective)
      list.add(isGoodsEffective);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_lineNumber = true;
    list.add(present_lineNumber);
    if (present_lineNumber)
      list.add(lineNumber);

    boolean present_contractId = true;
    list.add(present_contractId);
    if (present_contractId)
      list.add(contractId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_col0 = true && (isSetCol0());
    list.add(present_col0);
    if (present_col0)
      list.add(col0);

    boolean present_col1 = true && (isSetCol1());
    list.add(present_col1);
    if (present_col1)
      list.add(col1);

    boolean present_col2 = true && (isSetCol2());
    list.add(present_col2);
    if (present_col2)
      list.add(col2);

    boolean present_col3 = true && (isSetCol3());
    list.add(present_col3);
    if (present_col3)
      list.add(col3);

    boolean present_col4 = true && (isSetCol4());
    list.add(present_col4);
    if (present_col4)
      list.add(col4);

    boolean present_col5 = true && (isSetCol5());
    list.add(present_col5);
    if (present_col5)
      list.add(col5);

    boolean present_col6 = true && (isSetCol6());
    list.add(present_col6);
    if (present_col6)
      list.add(col6);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContractDynamicTableParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGoodsName()).compareTo(other.isSetGoodsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsName, other.goodsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsNumber()).compareTo(other.isSetGoodsNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsNumber, other.goodsNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsCount()).compareTo(other.isSetGoodsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsCount, other.goodsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsUnit()).compareTo(other.isSetGoodsUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsUnit, other.goodsUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsAddress()).compareTo(other.isSetGoodsAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsAddress, other.goodsAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsValue()).compareTo(other.isSetGoodsValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsValue, other.goodsValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsEffective()).compareTo(other.isSetGoodsEffective());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsEffective()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsEffective, other.goodsEffective);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGoodsName()).compareTo(other.isSetIsGoodsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGoodsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGoodsName, other.isGoodsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGoodsNumber()).compareTo(other.isSetIsGoodsNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGoodsNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGoodsNumber, other.isGoodsNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGoodsCount()).compareTo(other.isSetIsGoodsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGoodsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGoodsCount, other.isGoodsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGoodsUnit()).compareTo(other.isSetIsGoodsUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGoodsUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGoodsUnit, other.isGoodsUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGoodsAddress()).compareTo(other.isSetIsGoodsAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGoodsAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGoodsAddress, other.isGoodsAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGoodsValue()).compareTo(other.isSetIsGoodsValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGoodsValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGoodsValue, other.isGoodsValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsGoodsEffective()).compareTo(other.isSetIsGoodsEffective());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGoodsEffective()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGoodsEffective, other.isGoodsEffective);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineNumber()).compareTo(other.isSetLineNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNumber, other.lineNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol0()).compareTo(other.isSetCol0());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol0()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col0, other.col0);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol1()).compareTo(other.isSetCol1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col1, other.col1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol2()).compareTo(other.isSetCol2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col2, other.col2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol3()).compareTo(other.isSetCol3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col3, other.col3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol4()).compareTo(other.isSetCol4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col4, other.col4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol5()).compareTo(other.isSetCol5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col5, other.col5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol6()).compareTo(other.isSetCol6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col6, other.col6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractDynamicTableParameter(");
    boolean first = true;

    sb.append("goodsName:");
    if (this.goodsName == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsNumber:");
    if (this.goodsNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsCount:");
    if (this.goodsCount == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsCount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsUnit:");
    if (this.goodsUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsAddress:");
    if (this.goodsAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsValue:");
    if (this.goodsValue == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goodsEffective:");
    if (this.goodsEffective == null) {
      sb.append("null");
    } else {
      sb.append(this.goodsEffective);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGoodsName:");
    sb.append(this.isGoodsName);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGoodsNumber:");
    sb.append(this.isGoodsNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGoodsCount:");
    sb.append(this.isGoodsCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGoodsUnit:");
    sb.append(this.isGoodsUnit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGoodsAddress:");
    sb.append(this.isGoodsAddress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGoodsValue:");
    sb.append(this.isGoodsValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isGoodsEffective:");
    sb.append(this.isGoodsEffective);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineNumber:");
    sb.append(this.lineNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractId:");
    sb.append(this.contractId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("col0:");
    if (this.col0 == null) {
      sb.append("null");
    } else {
      sb.append(this.col0);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col1:");
    if (this.col1 == null) {
      sb.append("null");
    } else {
      sb.append(this.col1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col2:");
    if (this.col2 == null) {
      sb.append("null");
    } else {
      sb.append(this.col2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col3:");
    if (this.col3 == null) {
      sb.append("null");
    } else {
      sb.append(this.col3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col4:");
    if (this.col4 == null) {
      sb.append("null");
    } else {
      sb.append(this.col4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col5:");
    if (this.col5 == null) {
      sb.append("null");
    } else {
      sb.append(this.col5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("col6:");
    if (this.col6 == null) {
      sb.append("null");
    } else {
      sb.append(this.col6);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractDynamicTableParameterStandardSchemeFactory implements SchemeFactory {
    public ContractDynamicTableParameterStandardScheme getScheme() {
      return new ContractDynamicTableParameterStandardScheme();
    }
  }

  private static class ContractDynamicTableParameterStandardScheme extends StandardScheme<ContractDynamicTableParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractDynamicTableParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GOODS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsName = iprot.readString();
              struct.setGoodsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GOODS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsNumber = iprot.readString();
              struct.setGoodsNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GOODS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsCount = iprot.readString();
              struct.setGoodsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GOODS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsUnit = iprot.readString();
              struct.setGoodsUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GOODS_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsAddress = iprot.readString();
              struct.setGoodsAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GOODS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsValue = iprot.readString();
              struct.setGoodsValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GOODS_EFFECTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goodsEffective = iprot.readString();
              struct.setGoodsEffectiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_GOODS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGoodsName = iprot.readBool();
              struct.setIsGoodsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_GOODS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGoodsNumber = iprot.readBool();
              struct.setIsGoodsNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_GOODS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGoodsCount = iprot.readBool();
              struct.setIsGoodsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_GOODS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGoodsUnit = iprot.readBool();
              struct.setIsGoodsUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_GOODS_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGoodsAddress = iprot.readBool();
              struct.setIsGoodsAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_GOODS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGoodsValue = iprot.readBool();
              struct.setIsGoodsValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_GOODS_EFFECTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGoodsEffective = iprot.readBool();
              struct.setIsGoodsEffectiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LINE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lineNumber = iprot.readI32();
              struct.setLineNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COL0
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col0 = iprot.readString();
              struct.setCol0IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COL1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col1 = iprot.readString();
              struct.setCol1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COL2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col2 = iprot.readString();
              struct.setCol2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // COL3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col3 = iprot.readString();
              struct.setCol3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // COL4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col4 = iprot.readString();
              struct.setCol4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // COL5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col5 = iprot.readString();
              struct.setCol5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COL6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col6 = iprot.readString();
              struct.setCol6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractDynamicTableParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.goodsName != null) {
        oprot.writeFieldBegin(GOODS_NAME_FIELD_DESC);
        oprot.writeString(struct.goodsName);
        oprot.writeFieldEnd();
      }
      if (struct.goodsNumber != null) {
        oprot.writeFieldBegin(GOODS_NUMBER_FIELD_DESC);
        oprot.writeString(struct.goodsNumber);
        oprot.writeFieldEnd();
      }
      if (struct.goodsCount != null) {
        oprot.writeFieldBegin(GOODS_COUNT_FIELD_DESC);
        oprot.writeString(struct.goodsCount);
        oprot.writeFieldEnd();
      }
      if (struct.goodsUnit != null) {
        oprot.writeFieldBegin(GOODS_UNIT_FIELD_DESC);
        oprot.writeString(struct.goodsUnit);
        oprot.writeFieldEnd();
      }
      if (struct.goodsAddress != null) {
        oprot.writeFieldBegin(GOODS_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.goodsAddress);
        oprot.writeFieldEnd();
      }
      if (struct.goodsValue != null) {
        oprot.writeFieldBegin(GOODS_VALUE_FIELD_DESC);
        oprot.writeString(struct.goodsValue);
        oprot.writeFieldEnd();
      }
      if (struct.goodsEffective != null) {
        oprot.writeFieldBegin(GOODS_EFFECTIVE_FIELD_DESC);
        oprot.writeString(struct.goodsEffective);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_GOODS_NAME_FIELD_DESC);
      oprot.writeBool(struct.isGoodsName);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_GOODS_NUMBER_FIELD_DESC);
      oprot.writeBool(struct.isGoodsNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_GOODS_COUNT_FIELD_DESC);
      oprot.writeBool(struct.isGoodsCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_GOODS_UNIT_FIELD_DESC);
      oprot.writeBool(struct.isGoodsUnit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_GOODS_ADDRESS_FIELD_DESC);
      oprot.writeBool(struct.isGoodsAddress);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_GOODS_VALUE_FIELD_DESC);
      oprot.writeBool(struct.isGoodsValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_GOODS_EFFECTIVE_FIELD_DESC);
      oprot.writeBool(struct.isGoodsEffective);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.lineNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
      oprot.writeI32(struct.contractId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.col0 != null) {
        oprot.writeFieldBegin(COL0_FIELD_DESC);
        oprot.writeString(struct.col0);
        oprot.writeFieldEnd();
      }
      if (struct.col1 != null) {
        oprot.writeFieldBegin(COL1_FIELD_DESC);
        oprot.writeString(struct.col1);
        oprot.writeFieldEnd();
      }
      if (struct.col2 != null) {
        oprot.writeFieldBegin(COL2_FIELD_DESC);
        oprot.writeString(struct.col2);
        oprot.writeFieldEnd();
      }
      if (struct.col3 != null) {
        oprot.writeFieldBegin(COL3_FIELD_DESC);
        oprot.writeString(struct.col3);
        oprot.writeFieldEnd();
      }
      if (struct.col4 != null) {
        oprot.writeFieldBegin(COL4_FIELD_DESC);
        oprot.writeString(struct.col4);
        oprot.writeFieldEnd();
      }
      if (struct.col5 != null) {
        oprot.writeFieldBegin(COL5_FIELD_DESC);
        oprot.writeString(struct.col5);
        oprot.writeFieldEnd();
      }
      if (struct.col6 != null) {
        oprot.writeFieldBegin(COL6_FIELD_DESC);
        oprot.writeString(struct.col6);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractDynamicTableParameterTupleSchemeFactory implements SchemeFactory {
    public ContractDynamicTableParameterTupleScheme getScheme() {
      return new ContractDynamicTableParameterTupleScheme();
    }
  }

  private static class ContractDynamicTableParameterTupleScheme extends TupleScheme<ContractDynamicTableParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractDynamicTableParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGoodsName()) {
        optionals.set(0);
      }
      if (struct.isSetGoodsNumber()) {
        optionals.set(1);
      }
      if (struct.isSetGoodsCount()) {
        optionals.set(2);
      }
      if (struct.isSetGoodsUnit()) {
        optionals.set(3);
      }
      if (struct.isSetGoodsAddress()) {
        optionals.set(4);
      }
      if (struct.isSetGoodsValue()) {
        optionals.set(5);
      }
      if (struct.isSetGoodsEffective()) {
        optionals.set(6);
      }
      if (struct.isSetIsGoodsName()) {
        optionals.set(7);
      }
      if (struct.isSetIsGoodsNumber()) {
        optionals.set(8);
      }
      if (struct.isSetIsGoodsCount()) {
        optionals.set(9);
      }
      if (struct.isSetIsGoodsUnit()) {
        optionals.set(10);
      }
      if (struct.isSetIsGoodsAddress()) {
        optionals.set(11);
      }
      if (struct.isSetIsGoodsValue()) {
        optionals.set(12);
      }
      if (struct.isSetIsGoodsEffective()) {
        optionals.set(13);
      }
      if (struct.isSetPid()) {
        optionals.set(14);
      }
      if (struct.isSetLineNumber()) {
        optionals.set(15);
      }
      if (struct.isSetContractId()) {
        optionals.set(16);
      }
      if (struct.isSetStatus()) {
        optionals.set(17);
      }
      if (struct.isSetCol0()) {
        optionals.set(18);
      }
      if (struct.isSetCol1()) {
        optionals.set(19);
      }
      if (struct.isSetCol2()) {
        optionals.set(20);
      }
      if (struct.isSetCol3()) {
        optionals.set(21);
      }
      if (struct.isSetCol4()) {
        optionals.set(22);
      }
      if (struct.isSetCol5()) {
        optionals.set(23);
      }
      if (struct.isSetCol6()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetGoodsName()) {
        oprot.writeString(struct.goodsName);
      }
      if (struct.isSetGoodsNumber()) {
        oprot.writeString(struct.goodsNumber);
      }
      if (struct.isSetGoodsCount()) {
        oprot.writeString(struct.goodsCount);
      }
      if (struct.isSetGoodsUnit()) {
        oprot.writeString(struct.goodsUnit);
      }
      if (struct.isSetGoodsAddress()) {
        oprot.writeString(struct.goodsAddress);
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeString(struct.goodsValue);
      }
      if (struct.isSetGoodsEffective()) {
        oprot.writeString(struct.goodsEffective);
      }
      if (struct.isSetIsGoodsName()) {
        oprot.writeBool(struct.isGoodsName);
      }
      if (struct.isSetIsGoodsNumber()) {
        oprot.writeBool(struct.isGoodsNumber);
      }
      if (struct.isSetIsGoodsCount()) {
        oprot.writeBool(struct.isGoodsCount);
      }
      if (struct.isSetIsGoodsUnit()) {
        oprot.writeBool(struct.isGoodsUnit);
      }
      if (struct.isSetIsGoodsAddress()) {
        oprot.writeBool(struct.isGoodsAddress);
      }
      if (struct.isSetIsGoodsValue()) {
        oprot.writeBool(struct.isGoodsValue);
      }
      if (struct.isSetIsGoodsEffective()) {
        oprot.writeBool(struct.isGoodsEffective);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLineNumber()) {
        oprot.writeI32(struct.lineNumber);
      }
      if (struct.isSetContractId()) {
        oprot.writeI32(struct.contractId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCol0()) {
        oprot.writeString(struct.col0);
      }
      if (struct.isSetCol1()) {
        oprot.writeString(struct.col1);
      }
      if (struct.isSetCol2()) {
        oprot.writeString(struct.col2);
      }
      if (struct.isSetCol3()) {
        oprot.writeString(struct.col3);
      }
      if (struct.isSetCol4()) {
        oprot.writeString(struct.col4);
      }
      if (struct.isSetCol5()) {
        oprot.writeString(struct.col5);
      }
      if (struct.isSetCol6()) {
        oprot.writeString(struct.col6);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractDynamicTableParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.goodsName = iprot.readString();
        struct.setGoodsNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.goodsNumber = iprot.readString();
        struct.setGoodsNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.goodsCount = iprot.readString();
        struct.setGoodsCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.goodsUnit = iprot.readString();
        struct.setGoodsUnitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.goodsAddress = iprot.readString();
        struct.setGoodsAddressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.goodsValue = iprot.readString();
        struct.setGoodsValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.goodsEffective = iprot.readString();
        struct.setGoodsEffectiveIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isGoodsName = iprot.readBool();
        struct.setIsGoodsNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isGoodsNumber = iprot.readBool();
        struct.setIsGoodsNumberIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isGoodsCount = iprot.readBool();
        struct.setIsGoodsCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isGoodsUnit = iprot.readBool();
        struct.setIsGoodsUnitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isGoodsAddress = iprot.readBool();
        struct.setIsGoodsAddressIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isGoodsValue = iprot.readBool();
        struct.setIsGoodsValueIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isGoodsEffective = iprot.readBool();
        struct.setIsGoodsEffectiveIsSet(true);
      }
      if (incoming.get(14)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lineNumber = iprot.readI32();
        struct.setLineNumberIsSet(true);
      }
      if (incoming.get(16)) {
        struct.contractId = iprot.readI32();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(18)) {
        struct.col0 = iprot.readString();
        struct.setCol0IsSet(true);
      }
      if (incoming.get(19)) {
        struct.col1 = iprot.readString();
        struct.setCol1IsSet(true);
      }
      if (incoming.get(20)) {
        struct.col2 = iprot.readString();
        struct.setCol2IsSet(true);
      }
      if (incoming.get(21)) {
        struct.col3 = iprot.readString();
        struct.setCol3IsSet(true);
      }
      if (incoming.get(22)) {
        struct.col4 = iprot.readString();
        struct.setCol4IsSet(true);
      }
      if (incoming.get(23)) {
        struct.col5 = iprot.readString();
        struct.setCol5IsSet(true);
      }
      if (incoming.get(24)) {
        struct.col6 = iprot.readString();
        struct.setCol6IsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class PreApplyRepayBaseDTO implements org.apache.thrift.TBase<PreApplyRepayBaseDTO, PreApplyRepayBaseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<PreApplyRepayBaseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PreApplyRepayBaseDTO");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField FINE_RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("fineRates", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("fine", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ARREARS_FIELD_DESC = new org.apache.thrift.protocol.TField("isArrears", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_REBACK_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("isRebackInterest", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_OTHER_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("hasOtherLoan", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SURPLUS_FIELD_DESC = new org.apache.thrift.protocol.TField("surplus", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField COMPELTE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("compelteDttm", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayId", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField LOAN_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanPlanId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SHOULD_PREPAYMENT_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrepaymentFee", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PreApplyRepayBaseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PreApplyRepayBaseDTOTupleSchemeFactory());
  }

  public int pId; // required
  public double preRepayAmt; // required
  public double fineRates; // required
  public double fine; // required
  public int isArrears; // required
  public int isRebackInterest; // required
  public int hasOtherLoan; // required
  public String reason; // required
  public String repayDate; // required
  public double surplus; // required
  public int loanId; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String compelteDttm; // required
  public int preRepayId; // required
  public int status; // required
  public String planRepayLoanDt; // required
  public int projectId; // required
  public int loanPlanId; // required
  public double shouldPrepaymentFee; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    PRE_REPAY_AMT((short)2, "preRepayAmt"),
    FINE_RATES((short)3, "fineRates"),
    FINE((short)4, "fine"),
    IS_ARREARS((short)5, "isArrears"),
    IS_REBACK_INTEREST((short)6, "isRebackInterest"),
    HAS_OTHER_LOAN((short)7, "hasOtherLoan"),
    REASON((short)8, "reason"),
    REPAY_DATE((short)9, "repayDate"),
    SURPLUS((short)10, "surplus"),
    LOAN_ID((short)11, "loanId"),
    REQUEST_STATUS((short)12, "requestStatus"),
    REQUEST_DTTM((short)13, "requestDttm"),
    COMPELTE_DTTM((short)14, "compelteDttm"),
    PRE_REPAY_ID((short)16, "preRepayId"),
    STATUS((short)15, "status"),
    PLAN_REPAY_LOAN_DT((short)17, "planRepayLoanDt"),
    PROJECT_ID((short)18, "projectId"),
    LOAN_PLAN_ID((short)19, "loanPlanId"),
    SHOULD_PREPAYMENT_FEE((short)20, "shouldPrepaymentFee"),
    CREATE_DATE((short)21, "createDate"),
    CREATER_ID((short)22, "createrId"),
    UPDATE_ID((short)23, "updateId"),
    UPDATE_DATE((short)24, "updateDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // PRE_REPAY_AMT
          return PRE_REPAY_AMT;
        case 3: // FINE_RATES
          return FINE_RATES;
        case 4: // FINE
          return FINE;
        case 5: // IS_ARREARS
          return IS_ARREARS;
        case 6: // IS_REBACK_INTEREST
          return IS_REBACK_INTEREST;
        case 7: // HAS_OTHER_LOAN
          return HAS_OTHER_LOAN;
        case 8: // REASON
          return REASON;
        case 9: // REPAY_DATE
          return REPAY_DATE;
        case 10: // SURPLUS
          return SURPLUS;
        case 11: // LOAN_ID
          return LOAN_ID;
        case 12: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 13: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 14: // COMPELTE_DTTM
          return COMPELTE_DTTM;
        case 16: // PRE_REPAY_ID
          return PRE_REPAY_ID;
        case 15: // STATUS
          return STATUS;
        case 17: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 18: // PROJECT_ID
          return PROJECT_ID;
        case 19: // LOAN_PLAN_ID
          return LOAN_PLAN_ID;
        case 20: // SHOULD_PREPAYMENT_FEE
          return SHOULD_PREPAYMENT_FEE;
        case 21: // CREATE_DATE
          return CREATE_DATE;
        case 22: // CREATER_ID
          return CREATER_ID;
        case 23: // UPDATE_ID
          return UPDATE_ID;
        case 24: // UPDATE_DATE
          return UPDATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PREREPAYAMT_ISSET_ID = 1;
  private static final int __FINERATES_ISSET_ID = 2;
  private static final int __FINE_ISSET_ID = 3;
  private static final int __ISARREARS_ISSET_ID = 4;
  private static final int __ISREBACKINTEREST_ISSET_ID = 5;
  private static final int __HASOTHERLOAN_ISSET_ID = 6;
  private static final int __SURPLUS_ISSET_ID = 7;
  private static final int __LOANID_ISSET_ID = 8;
  private static final int __REQUESTSTATUS_ISSET_ID = 9;
  private static final int __PREREPAYID_ISSET_ID = 10;
  private static final int __STATUS_ISSET_ID = 11;
  private static final int __PROJECTID_ISSET_ID = 12;
  private static final int __LOANPLANID_ISSET_ID = 13;
  private static final int __SHOULDPREPAYMENTFEE_ISSET_ID = 14;
  private static final int __CREATERID_ISSET_ID = 15;
  private static final int __UPDATEID_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRE_REPAY_AMT, new org.apache.thrift.meta_data.FieldMetaData("preRepayAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINE_RATES, new org.apache.thrift.meta_data.FieldMetaData("fineRates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINE, new org.apache.thrift.meta_data.FieldMetaData("fine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_ARREARS, new org.apache.thrift.meta_data.FieldMetaData("isArrears", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REBACK_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("isRebackInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_OTHER_LOAN, new org.apache.thrift.meta_data.FieldMetaData("hasOtherLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SURPLUS, new org.apache.thrift.meta_data.FieldMetaData("surplus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPELTE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("compelteDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRE_REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("preRepayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanPlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOULD_PREPAYMENT_FEE, new org.apache.thrift.meta_data.FieldMetaData("shouldPrepaymentFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PreApplyRepayBaseDTO.class, metaDataMap);
  }

  public PreApplyRepayBaseDTO() {
  }

  public PreApplyRepayBaseDTO(
    int pId,
    double preRepayAmt,
    double fineRates,
    double fine,
    int isArrears,
    int isRebackInterest,
    int hasOtherLoan,
    String reason,
    String repayDate,
    double surplus,
    int loanId,
    int requestStatus,
    String requestDttm,
    String compelteDttm,
    int preRepayId,
    int status,
    String planRepayLoanDt,
    int projectId,
    int loanPlanId,
    double shouldPrepaymentFee,
    String createDate,
    int createrId,
    int updateId,
    String updateDate)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.preRepayAmt = preRepayAmt;
    setPreRepayAmtIsSet(true);
    this.fineRates = fineRates;
    setFineRatesIsSet(true);
    this.fine = fine;
    setFineIsSet(true);
    this.isArrears = isArrears;
    setIsArrearsIsSet(true);
    this.isRebackInterest = isRebackInterest;
    setIsRebackInterestIsSet(true);
    this.hasOtherLoan = hasOtherLoan;
    setHasOtherLoanIsSet(true);
    this.reason = reason;
    this.repayDate = repayDate;
    this.surplus = surplus;
    setSurplusIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.compelteDttm = compelteDttm;
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.planRepayLoanDt = planRepayLoanDt;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.loanPlanId = loanPlanId;
    setLoanPlanIdIsSet(true);
    this.shouldPrepaymentFee = shouldPrepaymentFee;
    setShouldPrepaymentFeeIsSet(true);
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PreApplyRepayBaseDTO(PreApplyRepayBaseDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    this.preRepayAmt = other.preRepayAmt;
    this.fineRates = other.fineRates;
    this.fine = other.fine;
    this.isArrears = other.isArrears;
    this.isRebackInterest = other.isRebackInterest;
    this.hasOtherLoan = other.hasOtherLoan;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetRepayDate()) {
      this.repayDate = other.repayDate;
    }
    this.surplus = other.surplus;
    this.loanId = other.loanId;
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompelteDttm()) {
      this.compelteDttm = other.compelteDttm;
    }
    this.preRepayId = other.preRepayId;
    this.status = other.status;
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    this.projectId = other.projectId;
    this.loanPlanId = other.loanPlanId;
    this.shouldPrepaymentFee = other.shouldPrepaymentFee;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
  }

  public PreApplyRepayBaseDTO deepCopy() {
    return new PreApplyRepayBaseDTO(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    setPreRepayAmtIsSet(false);
    this.preRepayAmt = 0.0;
    setFineRatesIsSet(false);
    this.fineRates = 0.0;
    setFineIsSet(false);
    this.fine = 0.0;
    setIsArrearsIsSet(false);
    this.isArrears = 0;
    setIsRebackInterestIsSet(false);
    this.isRebackInterest = 0;
    setHasOtherLoanIsSet(false);
    this.hasOtherLoan = 0;
    this.reason = null;
    this.repayDate = null;
    setSurplusIsSet(false);
    this.surplus = 0.0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.compelteDttm = null;
    setPreRepayIdIsSet(false);
    this.preRepayId = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.planRepayLoanDt = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setLoanPlanIdIsSet(false);
    this.loanPlanId = 0;
    setShouldPrepaymentFeeIsSet(false);
    this.shouldPrepaymentFee = 0.0;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
  }

  public int getPId() {
    return this.pId;
  }

  public PreApplyRepayBaseDTO setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public double getPreRepayAmt() {
    return this.preRepayAmt;
  }

  public PreApplyRepayBaseDTO setPreRepayAmt(double preRepayAmt) {
    this.preRepayAmt = preRepayAmt;
    setPreRepayAmtIsSet(true);
    return this;
  }

  public void unsetPreRepayAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID);
  }

  /** Returns true if field preRepayAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID);
  }

  public void setPreRepayAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID, value);
  }

  public double getFineRates() {
    return this.fineRates;
  }

  public PreApplyRepayBaseDTO setFineRates(double fineRates) {
    this.fineRates = fineRates;
    setFineRatesIsSet(true);
    return this;
  }

  public void unsetFineRates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINERATES_ISSET_ID);
  }

  /** Returns true if field fineRates is set (has been assigned a value) and false otherwise */
  public boolean isSetFineRates() {
    return EncodingUtils.testBit(__isset_bitfield, __FINERATES_ISSET_ID);
  }

  public void setFineRatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINERATES_ISSET_ID, value);
  }

  public double getFine() {
    return this.fine;
  }

  public PreApplyRepayBaseDTO setFine(double fine) {
    this.fine = fine;
    setFineIsSet(true);
    return this;
  }

  public void unsetFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINE_ISSET_ID);
  }

  /** Returns true if field fine is set (has been assigned a value) and false otherwise */
  public boolean isSetFine() {
    return EncodingUtils.testBit(__isset_bitfield, __FINE_ISSET_ID);
  }

  public void setFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINE_ISSET_ID, value);
  }

  public int getIsArrears() {
    return this.isArrears;
  }

  public PreApplyRepayBaseDTO setIsArrears(int isArrears) {
    this.isArrears = isArrears;
    setIsArrearsIsSet(true);
    return this;
  }

  public void unsetIsArrears() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISARREARS_ISSET_ID);
  }

  /** Returns true if field isArrears is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArrears() {
    return EncodingUtils.testBit(__isset_bitfield, __ISARREARS_ISSET_ID);
  }

  public void setIsArrearsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISARREARS_ISSET_ID, value);
  }

  public int getIsRebackInterest() {
    return this.isRebackInterest;
  }

  public PreApplyRepayBaseDTO setIsRebackInterest(int isRebackInterest) {
    this.isRebackInterest = isRebackInterest;
    setIsRebackInterestIsSet(true);
    return this;
  }

  public void unsetIsRebackInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID);
  }

  /** Returns true if field isRebackInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRebackInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID);
  }

  public void setIsRebackInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREBACKINTEREST_ISSET_ID, value);
  }

  public int getHasOtherLoan() {
    return this.hasOtherLoan;
  }

  public PreApplyRepayBaseDTO setHasOtherLoan(int hasOtherLoan) {
    this.hasOtherLoan = hasOtherLoan;
    setHasOtherLoanIsSet(true);
    return this;
  }

  public void unsetHasOtherLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID);
  }

  /** Returns true if field hasOtherLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetHasOtherLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID);
  }

  public void setHasOtherLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASOTHERLOAN_ISSET_ID, value);
  }

  public String getReason() {
    return this.reason;
  }

  public PreApplyRepayBaseDTO setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public String getRepayDate() {
    return this.repayDate;
  }

  public PreApplyRepayBaseDTO setRepayDate(String repayDate) {
    this.repayDate = repayDate;
    return this;
  }

  public void unsetRepayDate() {
    this.repayDate = null;
  }

  /** Returns true if field repayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDate() {
    return this.repayDate != null;
  }

  public void setRepayDateIsSet(boolean value) {
    if (!value) {
      this.repayDate = null;
    }
  }

  public double getSurplus() {
    return this.surplus;
  }

  public PreApplyRepayBaseDTO setSurplus(double surplus) {
    this.surplus = surplus;
    setSurplusIsSet(true);
    return this;
  }

  public void unsetSurplus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURPLUS_ISSET_ID);
  }

  /** Returns true if field surplus is set (has been assigned a value) and false otherwise */
  public boolean isSetSurplus() {
    return EncodingUtils.testBit(__isset_bitfield, __SURPLUS_ISSET_ID);
  }

  public void setSurplusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURPLUS_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public PreApplyRepayBaseDTO setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public PreApplyRepayBaseDTO setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public PreApplyRepayBaseDTO setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompelteDttm() {
    return this.compelteDttm;
  }

  public PreApplyRepayBaseDTO setCompelteDttm(String compelteDttm) {
    this.compelteDttm = compelteDttm;
    return this;
  }

  public void unsetCompelteDttm() {
    this.compelteDttm = null;
  }

  /** Returns true if field compelteDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompelteDttm() {
    return this.compelteDttm != null;
  }

  public void setCompelteDttmIsSet(boolean value) {
    if (!value) {
      this.compelteDttm = null;
    }
  }

  public int getPreRepayId() {
    return this.preRepayId;
  }

  public PreApplyRepayBaseDTO setPreRepayId(int preRepayId) {
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    return this;
  }

  public void unsetPreRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  /** Returns true if field preRepayId is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  public void setPreRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public PreApplyRepayBaseDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public PreApplyRepayBaseDTO setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public PreApplyRepayBaseDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getLoanPlanId() {
    return this.loanPlanId;
  }

  public PreApplyRepayBaseDTO setLoanPlanId(int loanPlanId) {
    this.loanPlanId = loanPlanId;
    setLoanPlanIdIsSet(true);
    return this;
  }

  public void unsetLoanPlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANPLANID_ISSET_ID);
  }

  /** Returns true if field loanPlanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanPlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANPLANID_ISSET_ID);
  }

  public void setLoanPlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANPLANID_ISSET_ID, value);
  }

  public double getShouldPrepaymentFee() {
    return this.shouldPrepaymentFee;
  }

  public PreApplyRepayBaseDTO setShouldPrepaymentFee(double shouldPrepaymentFee) {
    this.shouldPrepaymentFee = shouldPrepaymentFee;
    setShouldPrepaymentFeeIsSet(true);
    return this;
  }

  public void unsetShouldPrepaymentFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPREPAYMENTFEE_ISSET_ID);
  }

  /** Returns true if field shouldPrepaymentFee is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrepaymentFee() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPREPAYMENTFEE_ISSET_ID);
  }

  public void setShouldPrepaymentFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPREPAYMENTFEE_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public PreApplyRepayBaseDTO setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public PreApplyRepayBaseDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public PreApplyRepayBaseDTO setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public PreApplyRepayBaseDTO setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case PRE_REPAY_AMT:
      if (value == null) {
        unsetPreRepayAmt();
      } else {
        setPreRepayAmt((Double)value);
      }
      break;

    case FINE_RATES:
      if (value == null) {
        unsetFineRates();
      } else {
        setFineRates((Double)value);
      }
      break;

    case FINE:
      if (value == null) {
        unsetFine();
      } else {
        setFine((Double)value);
      }
      break;

    case IS_ARREARS:
      if (value == null) {
        unsetIsArrears();
      } else {
        setIsArrears((Integer)value);
      }
      break;

    case IS_REBACK_INTEREST:
      if (value == null) {
        unsetIsRebackInterest();
      } else {
        setIsRebackInterest((Integer)value);
      }
      break;

    case HAS_OTHER_LOAN:
      if (value == null) {
        unsetHasOtherLoan();
      } else {
        setHasOtherLoan((Integer)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case REPAY_DATE:
      if (value == null) {
        unsetRepayDate();
      } else {
        setRepayDate((String)value);
      }
      break;

    case SURPLUS:
      if (value == null) {
        unsetSurplus();
      } else {
        setSurplus((Double)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPELTE_DTTM:
      if (value == null) {
        unsetCompelteDttm();
      } else {
        setCompelteDttm((String)value);
      }
      break;

    case PRE_REPAY_ID:
      if (value == null) {
        unsetPreRepayId();
      } else {
        setPreRepayId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LOAN_PLAN_ID:
      if (value == null) {
        unsetLoanPlanId();
      } else {
        setLoanPlanId((Integer)value);
      }
      break;

    case SHOULD_PREPAYMENT_FEE:
      if (value == null) {
        unsetShouldPrepaymentFee();
      } else {
        setShouldPrepaymentFee((Double)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case PRE_REPAY_AMT:
      return Double.valueOf(getPreRepayAmt());

    case FINE_RATES:
      return Double.valueOf(getFineRates());

    case FINE:
      return Double.valueOf(getFine());

    case IS_ARREARS:
      return Integer.valueOf(getIsArrears());

    case IS_REBACK_INTEREST:
      return Integer.valueOf(getIsRebackInterest());

    case HAS_OTHER_LOAN:
      return Integer.valueOf(getHasOtherLoan());

    case REASON:
      return getReason();

    case REPAY_DATE:
      return getRepayDate();

    case SURPLUS:
      return Double.valueOf(getSurplus());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPELTE_DTTM:
      return getCompelteDttm();

    case PRE_REPAY_ID:
      return Integer.valueOf(getPreRepayId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LOAN_PLAN_ID:
      return Integer.valueOf(getLoanPlanId());

    case SHOULD_PREPAYMENT_FEE:
      return Double.valueOf(getShouldPrepaymentFee());

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case PRE_REPAY_AMT:
      return isSetPreRepayAmt();
    case FINE_RATES:
      return isSetFineRates();
    case FINE:
      return isSetFine();
    case IS_ARREARS:
      return isSetIsArrears();
    case IS_REBACK_INTEREST:
      return isSetIsRebackInterest();
    case HAS_OTHER_LOAN:
      return isSetHasOtherLoan();
    case REASON:
      return isSetReason();
    case REPAY_DATE:
      return isSetRepayDate();
    case SURPLUS:
      return isSetSurplus();
    case LOAN_ID:
      return isSetLoanId();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPELTE_DTTM:
      return isSetCompelteDttm();
    case PRE_REPAY_ID:
      return isSetPreRepayId();
    case STATUS:
      return isSetStatus();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case PROJECT_ID:
      return isSetProjectId();
    case LOAN_PLAN_ID:
      return isSetLoanPlanId();
    case SHOULD_PREPAYMENT_FEE:
      return isSetShouldPrepaymentFee();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PreApplyRepayBaseDTO)
      return this.equals((PreApplyRepayBaseDTO)that);
    return false;
  }

  public boolean equals(PreApplyRepayBaseDTO that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_preRepayAmt = true;
    boolean that_present_preRepayAmt = true;
    if (this_present_preRepayAmt || that_present_preRepayAmt) {
      if (!(this_present_preRepayAmt && that_present_preRepayAmt))
        return false;
      if (this.preRepayAmt != that.preRepayAmt)
        return false;
    }

    boolean this_present_fineRates = true;
    boolean that_present_fineRates = true;
    if (this_present_fineRates || that_present_fineRates) {
      if (!(this_present_fineRates && that_present_fineRates))
        return false;
      if (this.fineRates != that.fineRates)
        return false;
    }

    boolean this_present_fine = true;
    boolean that_present_fine = true;
    if (this_present_fine || that_present_fine) {
      if (!(this_present_fine && that_present_fine))
        return false;
      if (this.fine != that.fine)
        return false;
    }

    boolean this_present_isArrears = true;
    boolean that_present_isArrears = true;
    if (this_present_isArrears || that_present_isArrears) {
      if (!(this_present_isArrears && that_present_isArrears))
        return false;
      if (this.isArrears != that.isArrears)
        return false;
    }

    boolean this_present_isRebackInterest = true;
    boolean that_present_isRebackInterest = true;
    if (this_present_isRebackInterest || that_present_isRebackInterest) {
      if (!(this_present_isRebackInterest && that_present_isRebackInterest))
        return false;
      if (this.isRebackInterest != that.isRebackInterest)
        return false;
    }

    boolean this_present_hasOtherLoan = true;
    boolean that_present_hasOtherLoan = true;
    if (this_present_hasOtherLoan || that_present_hasOtherLoan) {
      if (!(this_present_hasOtherLoan && that_present_hasOtherLoan))
        return false;
      if (this.hasOtherLoan != that.hasOtherLoan)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_repayDate = true && this.isSetRepayDate();
    boolean that_present_repayDate = true && that.isSetRepayDate();
    if (this_present_repayDate || that_present_repayDate) {
      if (!(this_present_repayDate && that_present_repayDate))
        return false;
      if (!this.repayDate.equals(that.repayDate))
        return false;
    }

    boolean this_present_surplus = true;
    boolean that_present_surplus = true;
    if (this_present_surplus || that_present_surplus) {
      if (!(this_present_surplus && that_present_surplus))
        return false;
      if (this.surplus != that.surplus)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_compelteDttm = true && this.isSetCompelteDttm();
    boolean that_present_compelteDttm = true && that.isSetCompelteDttm();
    if (this_present_compelteDttm || that_present_compelteDttm) {
      if (!(this_present_compelteDttm && that_present_compelteDttm))
        return false;
      if (!this.compelteDttm.equals(that.compelteDttm))
        return false;
    }

    boolean this_present_preRepayId = true;
    boolean that_present_preRepayId = true;
    if (this_present_preRepayId || that_present_preRepayId) {
      if (!(this_present_preRepayId && that_present_preRepayId))
        return false;
      if (this.preRepayId != that.preRepayId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_loanPlanId = true;
    boolean that_present_loanPlanId = true;
    if (this_present_loanPlanId || that_present_loanPlanId) {
      if (!(this_present_loanPlanId && that_present_loanPlanId))
        return false;
      if (this.loanPlanId != that.loanPlanId)
        return false;
    }

    boolean this_present_shouldPrepaymentFee = true;
    boolean that_present_shouldPrepaymentFee = true;
    if (this_present_shouldPrepaymentFee || that_present_shouldPrepaymentFee) {
      if (!(this_present_shouldPrepaymentFee && that_present_shouldPrepaymentFee))
        return false;
      if (this.shouldPrepaymentFee != that.shouldPrepaymentFee)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_preRepayAmt = true;
    list.add(present_preRepayAmt);
    if (present_preRepayAmt)
      list.add(preRepayAmt);

    boolean present_fineRates = true;
    list.add(present_fineRates);
    if (present_fineRates)
      list.add(fineRates);

    boolean present_fine = true;
    list.add(present_fine);
    if (present_fine)
      list.add(fine);

    boolean present_isArrears = true;
    list.add(present_isArrears);
    if (present_isArrears)
      list.add(isArrears);

    boolean present_isRebackInterest = true;
    list.add(present_isRebackInterest);
    if (present_isRebackInterest)
      list.add(isRebackInterest);

    boolean present_hasOtherLoan = true;
    list.add(present_hasOtherLoan);
    if (present_hasOtherLoan)
      list.add(hasOtherLoan);

    boolean present_reason = true && (isSetReason());
    list.add(present_reason);
    if (present_reason)
      list.add(reason);

    boolean present_repayDate = true && (isSetRepayDate());
    list.add(present_repayDate);
    if (present_repayDate)
      list.add(repayDate);

    boolean present_surplus = true;
    list.add(present_surplus);
    if (present_surplus)
      list.add(surplus);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_compelteDttm = true && (isSetCompelteDttm());
    list.add(present_compelteDttm);
    if (present_compelteDttm)
      list.add(compelteDttm);

    boolean present_preRepayId = true;
    list.add(present_preRepayId);
    if (present_preRepayId)
      list.add(preRepayId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_loanPlanId = true;
    list.add(present_loanPlanId);
    if (present_loanPlanId)
      list.add(loanPlanId);

    boolean present_shouldPrepaymentFee = true;
    list.add(present_shouldPrepaymentFee);
    if (present_shouldPrepaymentFee)
      list.add(shouldPrepaymentFee);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(PreApplyRepayBaseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayAmt()).compareTo(other.isSetPreRepayAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayAmt, other.preRepayAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFineRates()).compareTo(other.isSetFineRates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFineRates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fineRates, other.fineRates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFine()).compareTo(other.isSetFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fine, other.fine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArrears()).compareTo(other.isSetIsArrears());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArrears()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArrears, other.isArrears);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRebackInterest()).compareTo(other.isSetIsRebackInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRebackInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRebackInterest, other.isRebackInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasOtherLoan()).compareTo(other.isSetHasOtherLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasOtherLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasOtherLoan, other.hasOtherLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDate()).compareTo(other.isSetRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDate, other.repayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurplus()).compareTo(other.isSetSurplus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurplus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surplus, other.surplus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompelteDttm()).compareTo(other.isSetCompelteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompelteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compelteDttm, other.compelteDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayId()).compareTo(other.isSetPreRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayId, other.preRepayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanPlanId()).compareTo(other.isSetLoanPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanPlanId, other.loanPlanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrepaymentFee()).compareTo(other.isSetShouldPrepaymentFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrepaymentFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrepaymentFee, other.shouldPrepaymentFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PreApplyRepayBaseDTO(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayAmt:");
    sb.append(this.preRepayAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fineRates:");
    sb.append(this.fineRates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fine:");
    sb.append(this.fine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArrears:");
    sb.append(this.isArrears);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRebackInterest:");
    sb.append(this.isRebackInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasOtherLoan:");
    sb.append(this.hasOtherLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDate:");
    if (this.repayDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("surplus:");
    sb.append(this.surplus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compelteDttm:");
    if (this.compelteDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.compelteDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayId:");
    sb.append(this.preRepayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanPlanId:");
    sb.append(this.loanPlanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrepaymentFee:");
    sb.append(this.shouldPrepaymentFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PreApplyRepayBaseDTOStandardSchemeFactory implements SchemeFactory {
    public PreApplyRepayBaseDTOStandardScheme getScheme() {
      return new PreApplyRepayBaseDTOStandardScheme();
    }
  }

  private static class PreApplyRepayBaseDTOStandardScheme extends StandardScheme<PreApplyRepayBaseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PreApplyRepayBaseDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRE_REPAY_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preRepayAmt = iprot.readDouble();
              struct.setPreRepayAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FINE_RATES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fineRates = iprot.readDouble();
              struct.setFineRatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fine = iprot.readDouble();
              struct.setFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ARREARS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isArrears = iprot.readI32();
              struct.setIsArrearsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_REBACK_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRebackInterest = iprot.readI32();
              struct.setIsRebackInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_OTHER_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasOtherLoan = iprot.readI32();
              struct.setHasOtherLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDate = iprot.readString();
              struct.setRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SURPLUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.surplus = iprot.readDouble();
              struct.setSurplusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMPELTE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compelteDttm = iprot.readString();
              struct.setCompelteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRE_REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preRepayId = iprot.readI32();
              struct.setPreRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOAN_PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanPlanId = iprot.readI32();
              struct.setLoanPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SHOULD_PREPAYMENT_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPrepaymentFee = iprot.readDouble();
              struct.setShouldPrepaymentFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PreApplyRepayBaseDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_REPAY_AMT_FIELD_DESC);
      oprot.writeDouble(struct.preRepayAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINE_RATES_FIELD_DESC);
      oprot.writeDouble(struct.fineRates);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINE_FIELD_DESC);
      oprot.writeDouble(struct.fine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ARREARS_FIELD_DESC);
      oprot.writeI32(struct.isArrears);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REBACK_INTEREST_FIELD_DESC);
      oprot.writeI32(struct.isRebackInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_OTHER_LOAN_FIELD_DESC);
      oprot.writeI32(struct.hasOtherLoan);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      if (struct.repayDate != null) {
        oprot.writeFieldBegin(REPAY_DATE_FIELD_DESC);
        oprot.writeString(struct.repayDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SURPLUS_FIELD_DESC);
      oprot.writeDouble(struct.surplus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.compelteDttm != null) {
        oprot.writeFieldBegin(COMPELTE_DTTM_FIELD_DESC);
        oprot.writeString(struct.compelteDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.preRepayId);
      oprot.writeFieldEnd();
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanPlanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PREPAYMENT_FEE_FIELD_DESC);
      oprot.writeDouble(struct.shouldPrepaymentFee);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PreApplyRepayBaseDTOTupleSchemeFactory implements SchemeFactory {
    public PreApplyRepayBaseDTOTupleScheme getScheme() {
      return new PreApplyRepayBaseDTOTupleScheme();
    }
  }

  private static class PreApplyRepayBaseDTOTupleScheme extends TupleScheme<PreApplyRepayBaseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PreApplyRepayBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetPreRepayAmt()) {
        optionals.set(1);
      }
      if (struct.isSetFineRates()) {
        optionals.set(2);
      }
      if (struct.isSetFine()) {
        optionals.set(3);
      }
      if (struct.isSetIsArrears()) {
        optionals.set(4);
      }
      if (struct.isSetIsRebackInterest()) {
        optionals.set(5);
      }
      if (struct.isSetHasOtherLoan()) {
        optionals.set(6);
      }
      if (struct.isSetReason()) {
        optionals.set(7);
      }
      if (struct.isSetRepayDate()) {
        optionals.set(8);
      }
      if (struct.isSetSurplus()) {
        optionals.set(9);
      }
      if (struct.isSetLoanId()) {
        optionals.set(10);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(11);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(12);
      }
      if (struct.isSetCompelteDttm()) {
        optionals.set(13);
      }
      if (struct.isSetPreRepayId()) {
        optionals.set(14);
      }
      if (struct.isSetStatus()) {
        optionals.set(15);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(16);
      }
      if (struct.isSetProjectId()) {
        optionals.set(17);
      }
      if (struct.isSetLoanPlanId()) {
        optionals.set(18);
      }
      if (struct.isSetShouldPrepaymentFee()) {
        optionals.set(19);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(20);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(21);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(22);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetPreRepayAmt()) {
        oprot.writeDouble(struct.preRepayAmt);
      }
      if (struct.isSetFineRates()) {
        oprot.writeDouble(struct.fineRates);
      }
      if (struct.isSetFine()) {
        oprot.writeDouble(struct.fine);
      }
      if (struct.isSetIsArrears()) {
        oprot.writeI32(struct.isArrears);
      }
      if (struct.isSetIsRebackInterest()) {
        oprot.writeI32(struct.isRebackInterest);
      }
      if (struct.isSetHasOtherLoan()) {
        oprot.writeI32(struct.hasOtherLoan);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetRepayDate()) {
        oprot.writeString(struct.repayDate);
      }
      if (struct.isSetSurplus()) {
        oprot.writeDouble(struct.surplus);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompelteDttm()) {
        oprot.writeString(struct.compelteDttm);
      }
      if (struct.isSetPreRepayId()) {
        oprot.writeI32(struct.preRepayId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLoanPlanId()) {
        oprot.writeI32(struct.loanPlanId);
      }
      if (struct.isSetShouldPrepaymentFee()) {
        oprot.writeDouble(struct.shouldPrepaymentFee);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PreApplyRepayBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.preRepayAmt = iprot.readDouble();
        struct.setPreRepayAmtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fineRates = iprot.readDouble();
        struct.setFineRatesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fine = iprot.readDouble();
        struct.setFineIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isArrears = iprot.readI32();
        struct.setIsArrearsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isRebackInterest = iprot.readI32();
        struct.setIsRebackInterestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hasOtherLoan = iprot.readI32();
        struct.setHasOtherLoanIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(8)) {
        struct.repayDate = iprot.readString();
        struct.setRepayDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.surplus = iprot.readDouble();
        struct.setSurplusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(13)) {
        struct.compelteDttm = iprot.readString();
        struct.setCompelteDttmIsSet(true);
      }
      if (incoming.get(14)) {
        struct.preRepayId = iprot.readI32();
        struct.setPreRepayIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(17)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.loanPlanId = iprot.readI32();
        struct.setLoanPlanIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.shouldPrepaymentFee = iprot.readDouble();
        struct.setShouldPrepaymentFeeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(23)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
    }
  }

}


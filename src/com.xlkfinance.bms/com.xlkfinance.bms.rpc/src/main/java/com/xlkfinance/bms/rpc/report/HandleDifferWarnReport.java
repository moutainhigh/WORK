/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-28")
public class HandleDifferWarnReport implements org.apache.thrift.TBase<HandleDifferWarnReport, HandleDifferWarnReport._Fields>, java.io.Serializable, Cloneable, Comparable<HandleDifferWarnReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HandleDifferWarnReport");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deptName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField APPLY_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applyUserName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("loanBank", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HOUSE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LOAN_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanWay", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_FLOOR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureFloorDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CANCEL_MORTGAGE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelMortgageDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TRANSFER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("transferDate", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField GET_NEW_LICENSE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("getNewLicenseDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MORTGAGE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CANCEL_GUARANTEE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelGuaranteeDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TRANSFER_OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("transferOperator", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField WARN_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("warnTag", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_FLOOR_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureFloorEndDate", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField CANCEL_MORTGAGE_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelMortgageEndDate", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField TRANSFER_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("transferEndDate", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField GET_NEW_LICENSE_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("getNewLicenseEndDate", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField MORTGAGE_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageEndDate", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField CANCEL_GUARANTEE_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelGuaranteeEndDate", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)32);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceName", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)34);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HandleDifferWarnReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HandleDifferWarnReportTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String projectNumber; // required
  public int businessSource; // required
  public String deptName; // required
  public String pmUserName; // required
  public String applyUserName; // required
  public String loanBank; // required
  public double loanAmt; // required
  public String houseName; // required
  public String houseType; // required
  public String loanWay; // required
  public String foreclosureFloorDate; // required
  public String cancelMortgageDate; // required
  public String transferDate; // required
  public String getNewLicenseDate; // required
  public String mortgageDate; // required
  public String cancelGuaranteeDate; // required
  public String transferOperator; // required
  public String warnTag; // required
  public int page; // required
  public int rows; // required
  public String sellerName; // required
  public String buyerName; // required
  public String productName; // required
  public String foreclosureFloorEndDate; // required
  public String cancelMortgageEndDate; // required
  public String transferEndDate; // required
  public String getNewLicenseEndDate; // required
  public String mortgageEndDate; // required
  public String cancelGuaranteeEndDate; // required
  public List<Integer> userIds; // required
  public String businessSourceName; // required
  public String businessSourceStr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    BUSINESS_SOURCE((short)4, "businessSource"),
    DEPT_NAME((short)5, "deptName"),
    PM_USER_NAME((short)6, "pmUserName"),
    APPLY_USER_NAME((short)7, "applyUserName"),
    LOAN_BANK((short)8, "loanBank"),
    LOAN_AMT((short)9, "loanAmt"),
    HOUSE_NAME((short)10, "houseName"),
    HOUSE_TYPE((short)11, "houseType"),
    LOAN_WAY((short)12, "loanWay"),
    FORECLOSURE_FLOOR_DATE((short)13, "foreclosureFloorDate"),
    CANCEL_MORTGAGE_DATE((short)14, "cancelMortgageDate"),
    TRANSFER_DATE((short)15, "transferDate"),
    GET_NEW_LICENSE_DATE((short)16, "getNewLicenseDate"),
    MORTGAGE_DATE((short)17, "mortgageDate"),
    CANCEL_GUARANTEE_DATE((short)18, "cancelGuaranteeDate"),
    TRANSFER_OPERATOR((short)19, "transferOperator"),
    WARN_TAG((short)20, "warnTag"),
    PAGE((short)21, "page"),
    ROWS((short)22, "rows"),
    SELLER_NAME((short)23, "sellerName"),
    BUYER_NAME((short)24, "buyerName"),
    PRODUCT_NAME((short)25, "productName"),
    FORECLOSURE_FLOOR_END_DATE((short)26, "foreclosureFloorEndDate"),
    CANCEL_MORTGAGE_END_DATE((short)27, "cancelMortgageEndDate"),
    TRANSFER_END_DATE((short)28, "transferEndDate"),
    GET_NEW_LICENSE_END_DATE((short)29, "getNewLicenseEndDate"),
    MORTGAGE_END_DATE((short)30, "mortgageEndDate"),
    CANCEL_GUARANTEE_END_DATE((short)31, "cancelGuaranteeEndDate"),
    USER_IDS((short)32, "userIds"),
    BUSINESS_SOURCE_NAME((short)33, "businessSourceName"),
    BUSINESS_SOURCE_STR((short)34, "businessSourceStr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 5: // DEPT_NAME
          return DEPT_NAME;
        case 6: // PM_USER_NAME
          return PM_USER_NAME;
        case 7: // APPLY_USER_NAME
          return APPLY_USER_NAME;
        case 8: // LOAN_BANK
          return LOAN_BANK;
        case 9: // LOAN_AMT
          return LOAN_AMT;
        case 10: // HOUSE_NAME
          return HOUSE_NAME;
        case 11: // HOUSE_TYPE
          return HOUSE_TYPE;
        case 12: // LOAN_WAY
          return LOAN_WAY;
        case 13: // FORECLOSURE_FLOOR_DATE
          return FORECLOSURE_FLOOR_DATE;
        case 14: // CANCEL_MORTGAGE_DATE
          return CANCEL_MORTGAGE_DATE;
        case 15: // TRANSFER_DATE
          return TRANSFER_DATE;
        case 16: // GET_NEW_LICENSE_DATE
          return GET_NEW_LICENSE_DATE;
        case 17: // MORTGAGE_DATE
          return MORTGAGE_DATE;
        case 18: // CANCEL_GUARANTEE_DATE
          return CANCEL_GUARANTEE_DATE;
        case 19: // TRANSFER_OPERATOR
          return TRANSFER_OPERATOR;
        case 20: // WARN_TAG
          return WARN_TAG;
        case 21: // PAGE
          return PAGE;
        case 22: // ROWS
          return ROWS;
        case 23: // SELLER_NAME
          return SELLER_NAME;
        case 24: // BUYER_NAME
          return BUYER_NAME;
        case 25: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 26: // FORECLOSURE_FLOOR_END_DATE
          return FORECLOSURE_FLOOR_END_DATE;
        case 27: // CANCEL_MORTGAGE_END_DATE
          return CANCEL_MORTGAGE_END_DATE;
        case 28: // TRANSFER_END_DATE
          return TRANSFER_END_DATE;
        case 29: // GET_NEW_LICENSE_END_DATE
          return GET_NEW_LICENSE_END_DATE;
        case 30: // MORTGAGE_END_DATE
          return MORTGAGE_END_DATE;
        case 31: // CANCEL_GUARANTEE_END_DATE
          return CANCEL_GUARANTEE_END_DATE;
        case 32: // USER_IDS
          return USER_IDS;
        case 33: // BUSINESS_SOURCE_NAME
          return BUSINESS_SOURCE_NAME;
        case 34: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __BUSINESSSOURCE_ISSET_ID = 1;
  private static final int __LOANAMT_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("deptName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("applyUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("loanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("houseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_WAY, new org.apache.thrift.meta_data.FieldMetaData("loanWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_FLOOR_DATE, new org.apache.thrift.meta_data.FieldMetaData("foreclosureFloorDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_MORTGAGE_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelMortgageDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_DATE, new org.apache.thrift.meta_data.FieldMetaData("transferDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GET_NEW_LICENSE_DATE, new org.apache.thrift.meta_data.FieldMetaData("getNewLicenseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_DATE, new org.apache.thrift.meta_data.FieldMetaData("mortgageDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_GUARANTEE_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelGuaranteeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("transferOperator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WARN_TAG, new org.apache.thrift.meta_data.FieldMetaData("warnTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_FLOOR_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("foreclosureFloorEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_MORTGAGE_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelMortgageEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("transferEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GET_NEW_LICENSE_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("getNewLicenseEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("mortgageEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_GUARANTEE_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelGuaranteeEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BUSINESS_SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessSourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HandleDifferWarnReport.class, metaDataMap);
  }

  public HandleDifferWarnReport() {
    this.page = 1;

    this.rows = 10;

  }

  public HandleDifferWarnReport(
    int projectId,
    String projectName,
    String projectNumber,
    int businessSource,
    String deptName,
    String pmUserName,
    String applyUserName,
    String loanBank,
    double loanAmt,
    String houseName,
    String houseType,
    String loanWay,
    String foreclosureFloorDate,
    String cancelMortgageDate,
    String transferDate,
    String getNewLicenseDate,
    String mortgageDate,
    String cancelGuaranteeDate,
    String transferOperator,
    String warnTag,
    int page,
    int rows,
    String sellerName,
    String buyerName,
    String productName,
    String foreclosureFloorEndDate,
    String cancelMortgageEndDate,
    String transferEndDate,
    String getNewLicenseEndDate,
    String mortgageEndDate,
    String cancelGuaranteeEndDate,
    List<Integer> userIds,
    String businessSourceName,
    String businessSourceStr)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.deptName = deptName;
    this.pmUserName = pmUserName;
    this.applyUserName = applyUserName;
    this.loanBank = loanBank;
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.houseName = houseName;
    this.houseType = houseType;
    this.loanWay = loanWay;
    this.foreclosureFloorDate = foreclosureFloorDate;
    this.cancelMortgageDate = cancelMortgageDate;
    this.transferDate = transferDate;
    this.getNewLicenseDate = getNewLicenseDate;
    this.mortgageDate = mortgageDate;
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    this.transferOperator = transferOperator;
    this.warnTag = warnTag;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.sellerName = sellerName;
    this.buyerName = buyerName;
    this.productName = productName;
    this.foreclosureFloorEndDate = foreclosureFloorEndDate;
    this.cancelMortgageEndDate = cancelMortgageEndDate;
    this.transferEndDate = transferEndDate;
    this.getNewLicenseEndDate = getNewLicenseEndDate;
    this.mortgageEndDate = mortgageEndDate;
    this.cancelGuaranteeEndDate = cancelGuaranteeEndDate;
    this.userIds = userIds;
    this.businessSourceName = businessSourceName;
    this.businessSourceStr = businessSourceStr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HandleDifferWarnReport(HandleDifferWarnReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.businessSource = other.businessSource;
    if (other.isSetDeptName()) {
      this.deptName = other.deptName;
    }
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetApplyUserName()) {
      this.applyUserName = other.applyUserName;
    }
    if (other.isSetLoanBank()) {
      this.loanBank = other.loanBank;
    }
    this.loanAmt = other.loanAmt;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetHouseType()) {
      this.houseType = other.houseType;
    }
    if (other.isSetLoanWay()) {
      this.loanWay = other.loanWay;
    }
    if (other.isSetForeclosureFloorDate()) {
      this.foreclosureFloorDate = other.foreclosureFloorDate;
    }
    if (other.isSetCancelMortgageDate()) {
      this.cancelMortgageDate = other.cancelMortgageDate;
    }
    if (other.isSetTransferDate()) {
      this.transferDate = other.transferDate;
    }
    if (other.isSetGetNewLicenseDate()) {
      this.getNewLicenseDate = other.getNewLicenseDate;
    }
    if (other.isSetMortgageDate()) {
      this.mortgageDate = other.mortgageDate;
    }
    if (other.isSetCancelGuaranteeDate()) {
      this.cancelGuaranteeDate = other.cancelGuaranteeDate;
    }
    if (other.isSetTransferOperator()) {
      this.transferOperator = other.transferOperator;
    }
    if (other.isSetWarnTag()) {
      this.warnTag = other.warnTag;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetForeclosureFloorEndDate()) {
      this.foreclosureFloorEndDate = other.foreclosureFloorEndDate;
    }
    if (other.isSetCancelMortgageEndDate()) {
      this.cancelMortgageEndDate = other.cancelMortgageEndDate;
    }
    if (other.isSetTransferEndDate()) {
      this.transferEndDate = other.transferEndDate;
    }
    if (other.isSetGetNewLicenseEndDate()) {
      this.getNewLicenseEndDate = other.getNewLicenseEndDate;
    }
    if (other.isSetMortgageEndDate()) {
      this.mortgageEndDate = other.mortgageEndDate;
    }
    if (other.isSetCancelGuaranteeEndDate()) {
      this.cancelGuaranteeEndDate = other.cancelGuaranteeEndDate;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetBusinessSourceName()) {
      this.businessSourceName = other.businessSourceName;
    }
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
  }

  public HandleDifferWarnReport deepCopy() {
    return new HandleDifferWarnReport(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNumber = null;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    this.deptName = null;
    this.pmUserName = null;
    this.applyUserName = null;
    this.loanBank = null;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    this.houseName = null;
    this.houseType = null;
    this.loanWay = null;
    this.foreclosureFloorDate = null;
    this.cancelMortgageDate = null;
    this.transferDate = null;
    this.getNewLicenseDate = null;
    this.mortgageDate = null;
    this.cancelGuaranteeDate = null;
    this.transferOperator = null;
    this.warnTag = null;
    this.page = 1;

    this.rows = 10;

    this.sellerName = null;
    this.buyerName = null;
    this.productName = null;
    this.foreclosureFloorEndDate = null;
    this.cancelMortgageEndDate = null;
    this.transferEndDate = null;
    this.getNewLicenseEndDate = null;
    this.mortgageEndDate = null;
    this.cancelGuaranteeEndDate = null;
    this.userIds = null;
    this.businessSourceName = null;
    this.businessSourceStr = null;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public HandleDifferWarnReport setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public HandleDifferWarnReport setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public HandleDifferWarnReport setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public HandleDifferWarnReport setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID, value);
  }

  public String getDeptName() {
    return this.deptName;
  }

  public HandleDifferWarnReport setDeptName(String deptName) {
    this.deptName = deptName;
    return this;
  }

  public void unsetDeptName() {
    this.deptName = null;
  }

  /** Returns true if field deptName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptName() {
    return this.deptName != null;
  }

  public void setDeptNameIsSet(boolean value) {
    if (!value) {
      this.deptName = null;
    }
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public HandleDifferWarnReport setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getApplyUserName() {
    return this.applyUserName;
  }

  public HandleDifferWarnReport setApplyUserName(String applyUserName) {
    this.applyUserName = applyUserName;
    return this;
  }

  public void unsetApplyUserName() {
    this.applyUserName = null;
  }

  /** Returns true if field applyUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyUserName() {
    return this.applyUserName != null;
  }

  public void setApplyUserNameIsSet(boolean value) {
    if (!value) {
      this.applyUserName = null;
    }
  }

  public String getLoanBank() {
    return this.loanBank;
  }

  public HandleDifferWarnReport setLoanBank(String loanBank) {
    this.loanBank = loanBank;
    return this;
  }

  public void unsetLoanBank() {
    this.loanBank = null;
  }

  /** Returns true if field loanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanBank() {
    return this.loanBank != null;
  }

  public void setLoanBankIsSet(boolean value) {
    if (!value) {
      this.loanBank = null;
    }
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public HandleDifferWarnReport setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMT_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public HandleDifferWarnReport setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getHouseType() {
    return this.houseType;
  }

  public HandleDifferWarnReport setHouseType(String houseType) {
    this.houseType = houseType;
    return this;
  }

  public void unsetHouseType() {
    this.houseType = null;
  }

  /** Returns true if field houseType is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseType() {
    return this.houseType != null;
  }

  public void setHouseTypeIsSet(boolean value) {
    if (!value) {
      this.houseType = null;
    }
  }

  public String getLoanWay() {
    return this.loanWay;
  }

  public HandleDifferWarnReport setLoanWay(String loanWay) {
    this.loanWay = loanWay;
    return this;
  }

  public void unsetLoanWay() {
    this.loanWay = null;
  }

  /** Returns true if field loanWay is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanWay() {
    return this.loanWay != null;
  }

  public void setLoanWayIsSet(boolean value) {
    if (!value) {
      this.loanWay = null;
    }
  }

  public String getForeclosureFloorDate() {
    return this.foreclosureFloorDate;
  }

  public HandleDifferWarnReport setForeclosureFloorDate(String foreclosureFloorDate) {
    this.foreclosureFloorDate = foreclosureFloorDate;
    return this;
  }

  public void unsetForeclosureFloorDate() {
    this.foreclosureFloorDate = null;
  }

  /** Returns true if field foreclosureFloorDate is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureFloorDate() {
    return this.foreclosureFloorDate != null;
  }

  public void setForeclosureFloorDateIsSet(boolean value) {
    if (!value) {
      this.foreclosureFloorDate = null;
    }
  }

  public String getCancelMortgageDate() {
    return this.cancelMortgageDate;
  }

  public HandleDifferWarnReport setCancelMortgageDate(String cancelMortgageDate) {
    this.cancelMortgageDate = cancelMortgageDate;
    return this;
  }

  public void unsetCancelMortgageDate() {
    this.cancelMortgageDate = null;
  }

  /** Returns true if field cancelMortgageDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelMortgageDate() {
    return this.cancelMortgageDate != null;
  }

  public void setCancelMortgageDateIsSet(boolean value) {
    if (!value) {
      this.cancelMortgageDate = null;
    }
  }

  public String getTransferDate() {
    return this.transferDate;
  }

  public HandleDifferWarnReport setTransferDate(String transferDate) {
    this.transferDate = transferDate;
    return this;
  }

  public void unsetTransferDate() {
    this.transferDate = null;
  }

  /** Returns true if field transferDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferDate() {
    return this.transferDate != null;
  }

  public void setTransferDateIsSet(boolean value) {
    if (!value) {
      this.transferDate = null;
    }
  }

  public String getGetNewLicenseDate() {
    return this.getNewLicenseDate;
  }

  public HandleDifferWarnReport setGetNewLicenseDate(String getNewLicenseDate) {
    this.getNewLicenseDate = getNewLicenseDate;
    return this;
  }

  public void unsetGetNewLicenseDate() {
    this.getNewLicenseDate = null;
  }

  /** Returns true if field getNewLicenseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGetNewLicenseDate() {
    return this.getNewLicenseDate != null;
  }

  public void setGetNewLicenseDateIsSet(boolean value) {
    if (!value) {
      this.getNewLicenseDate = null;
    }
  }

  public String getMortgageDate() {
    return this.mortgageDate;
  }

  public HandleDifferWarnReport setMortgageDate(String mortgageDate) {
    this.mortgageDate = mortgageDate;
    return this;
  }

  public void unsetMortgageDate() {
    this.mortgageDate = null;
  }

  /** Returns true if field mortgageDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageDate() {
    return this.mortgageDate != null;
  }

  public void setMortgageDateIsSet(boolean value) {
    if (!value) {
      this.mortgageDate = null;
    }
  }

  public String getCancelGuaranteeDate() {
    return this.cancelGuaranteeDate;
  }

  public HandleDifferWarnReport setCancelGuaranteeDate(String cancelGuaranteeDate) {
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    return this;
  }

  public void unsetCancelGuaranteeDate() {
    this.cancelGuaranteeDate = null;
  }

  /** Returns true if field cancelGuaranteeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelGuaranteeDate() {
    return this.cancelGuaranteeDate != null;
  }

  public void setCancelGuaranteeDateIsSet(boolean value) {
    if (!value) {
      this.cancelGuaranteeDate = null;
    }
  }

  public String getTransferOperator() {
    return this.transferOperator;
  }

  public HandleDifferWarnReport setTransferOperator(String transferOperator) {
    this.transferOperator = transferOperator;
    return this;
  }

  public void unsetTransferOperator() {
    this.transferOperator = null;
  }

  /** Returns true if field transferOperator is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferOperator() {
    return this.transferOperator != null;
  }

  public void setTransferOperatorIsSet(boolean value) {
    if (!value) {
      this.transferOperator = null;
    }
  }

  public String getWarnTag() {
    return this.warnTag;
  }

  public HandleDifferWarnReport setWarnTag(String warnTag) {
    this.warnTag = warnTag;
    return this;
  }

  public void unsetWarnTag() {
    this.warnTag = null;
  }

  /** Returns true if field warnTag is set (has been assigned a value) and false otherwise */
  public boolean isSetWarnTag() {
    return this.warnTag != null;
  }

  public void setWarnTagIsSet(boolean value) {
    if (!value) {
      this.warnTag = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public HandleDifferWarnReport setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public HandleDifferWarnReport setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public HandleDifferWarnReport setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public HandleDifferWarnReport setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public HandleDifferWarnReport setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getForeclosureFloorEndDate() {
    return this.foreclosureFloorEndDate;
  }

  public HandleDifferWarnReport setForeclosureFloorEndDate(String foreclosureFloorEndDate) {
    this.foreclosureFloorEndDate = foreclosureFloorEndDate;
    return this;
  }

  public void unsetForeclosureFloorEndDate() {
    this.foreclosureFloorEndDate = null;
  }

  /** Returns true if field foreclosureFloorEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureFloorEndDate() {
    return this.foreclosureFloorEndDate != null;
  }

  public void setForeclosureFloorEndDateIsSet(boolean value) {
    if (!value) {
      this.foreclosureFloorEndDate = null;
    }
  }

  public String getCancelMortgageEndDate() {
    return this.cancelMortgageEndDate;
  }

  public HandleDifferWarnReport setCancelMortgageEndDate(String cancelMortgageEndDate) {
    this.cancelMortgageEndDate = cancelMortgageEndDate;
    return this;
  }

  public void unsetCancelMortgageEndDate() {
    this.cancelMortgageEndDate = null;
  }

  /** Returns true if field cancelMortgageEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelMortgageEndDate() {
    return this.cancelMortgageEndDate != null;
  }

  public void setCancelMortgageEndDateIsSet(boolean value) {
    if (!value) {
      this.cancelMortgageEndDate = null;
    }
  }

  public String getTransferEndDate() {
    return this.transferEndDate;
  }

  public HandleDifferWarnReport setTransferEndDate(String transferEndDate) {
    this.transferEndDate = transferEndDate;
    return this;
  }

  public void unsetTransferEndDate() {
    this.transferEndDate = null;
  }

  /** Returns true if field transferEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferEndDate() {
    return this.transferEndDate != null;
  }

  public void setTransferEndDateIsSet(boolean value) {
    if (!value) {
      this.transferEndDate = null;
    }
  }

  public String getGetNewLicenseEndDate() {
    return this.getNewLicenseEndDate;
  }

  public HandleDifferWarnReport setGetNewLicenseEndDate(String getNewLicenseEndDate) {
    this.getNewLicenseEndDate = getNewLicenseEndDate;
    return this;
  }

  public void unsetGetNewLicenseEndDate() {
    this.getNewLicenseEndDate = null;
  }

  /** Returns true if field getNewLicenseEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGetNewLicenseEndDate() {
    return this.getNewLicenseEndDate != null;
  }

  public void setGetNewLicenseEndDateIsSet(boolean value) {
    if (!value) {
      this.getNewLicenseEndDate = null;
    }
  }

  public String getMortgageEndDate() {
    return this.mortgageEndDate;
  }

  public HandleDifferWarnReport setMortgageEndDate(String mortgageEndDate) {
    this.mortgageEndDate = mortgageEndDate;
    return this;
  }

  public void unsetMortgageEndDate() {
    this.mortgageEndDate = null;
  }

  /** Returns true if field mortgageEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageEndDate() {
    return this.mortgageEndDate != null;
  }

  public void setMortgageEndDateIsSet(boolean value) {
    if (!value) {
      this.mortgageEndDate = null;
    }
  }

  public String getCancelGuaranteeEndDate() {
    return this.cancelGuaranteeEndDate;
  }

  public HandleDifferWarnReport setCancelGuaranteeEndDate(String cancelGuaranteeEndDate) {
    this.cancelGuaranteeEndDate = cancelGuaranteeEndDate;
    return this;
  }

  public void unsetCancelGuaranteeEndDate() {
    this.cancelGuaranteeEndDate = null;
  }

  /** Returns true if field cancelGuaranteeEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelGuaranteeEndDate() {
    return this.cancelGuaranteeEndDate != null;
  }

  public void setCancelGuaranteeEndDateIsSet(boolean value) {
    if (!value) {
      this.cancelGuaranteeEndDate = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public HandleDifferWarnReport setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getBusinessSourceName() {
    return this.businessSourceName;
  }

  public HandleDifferWarnReport setBusinessSourceName(String businessSourceName) {
    this.businessSourceName = businessSourceName;
    return this;
  }

  public void unsetBusinessSourceName() {
    this.businessSourceName = null;
  }

  /** Returns true if field businessSourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceName() {
    return this.businessSourceName != null;
  }

  public void setBusinessSourceNameIsSet(boolean value) {
    if (!value) {
      this.businessSourceName = null;
    }
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public HandleDifferWarnReport setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case DEPT_NAME:
      if (value == null) {
        unsetDeptName();
      } else {
        setDeptName((String)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case APPLY_USER_NAME:
      if (value == null) {
        unsetApplyUserName();
      } else {
        setApplyUserName((String)value);
      }
      break;

    case LOAN_BANK:
      if (value == null) {
        unsetLoanBank();
      } else {
        setLoanBank((String)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case HOUSE_TYPE:
      if (value == null) {
        unsetHouseType();
      } else {
        setHouseType((String)value);
      }
      break;

    case LOAN_WAY:
      if (value == null) {
        unsetLoanWay();
      } else {
        setLoanWay((String)value);
      }
      break;

    case FORECLOSURE_FLOOR_DATE:
      if (value == null) {
        unsetForeclosureFloorDate();
      } else {
        setForeclosureFloorDate((String)value);
      }
      break;

    case CANCEL_MORTGAGE_DATE:
      if (value == null) {
        unsetCancelMortgageDate();
      } else {
        setCancelMortgageDate((String)value);
      }
      break;

    case TRANSFER_DATE:
      if (value == null) {
        unsetTransferDate();
      } else {
        setTransferDate((String)value);
      }
      break;

    case GET_NEW_LICENSE_DATE:
      if (value == null) {
        unsetGetNewLicenseDate();
      } else {
        setGetNewLicenseDate((String)value);
      }
      break;

    case MORTGAGE_DATE:
      if (value == null) {
        unsetMortgageDate();
      } else {
        setMortgageDate((String)value);
      }
      break;

    case CANCEL_GUARANTEE_DATE:
      if (value == null) {
        unsetCancelGuaranteeDate();
      } else {
        setCancelGuaranteeDate((String)value);
      }
      break;

    case TRANSFER_OPERATOR:
      if (value == null) {
        unsetTransferOperator();
      } else {
        setTransferOperator((String)value);
      }
      break;

    case WARN_TAG:
      if (value == null) {
        unsetWarnTag();
      } else {
        setWarnTag((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case FORECLOSURE_FLOOR_END_DATE:
      if (value == null) {
        unsetForeclosureFloorEndDate();
      } else {
        setForeclosureFloorEndDate((String)value);
      }
      break;

    case CANCEL_MORTGAGE_END_DATE:
      if (value == null) {
        unsetCancelMortgageEndDate();
      } else {
        setCancelMortgageEndDate((String)value);
      }
      break;

    case TRANSFER_END_DATE:
      if (value == null) {
        unsetTransferEndDate();
      } else {
        setTransferEndDate((String)value);
      }
      break;

    case GET_NEW_LICENSE_END_DATE:
      if (value == null) {
        unsetGetNewLicenseEndDate();
      } else {
        setGetNewLicenseEndDate((String)value);
      }
      break;

    case MORTGAGE_END_DATE:
      if (value == null) {
        unsetMortgageEndDate();
      } else {
        setMortgageEndDate((String)value);
      }
      break;

    case CANCEL_GUARANTEE_END_DATE:
      if (value == null) {
        unsetCancelGuaranteeEndDate();
      } else {
        setCancelGuaranteeEndDate((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case BUSINESS_SOURCE_NAME:
      if (value == null) {
        unsetBusinessSourceName();
      } else {
        setBusinessSourceName((String)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case DEPT_NAME:
      return getDeptName();

    case PM_USER_NAME:
      return getPmUserName();

    case APPLY_USER_NAME:
      return getApplyUserName();

    case LOAN_BANK:
      return getLoanBank();

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case HOUSE_NAME:
      return getHouseName();

    case HOUSE_TYPE:
      return getHouseType();

    case LOAN_WAY:
      return getLoanWay();

    case FORECLOSURE_FLOOR_DATE:
      return getForeclosureFloorDate();

    case CANCEL_MORTGAGE_DATE:
      return getCancelMortgageDate();

    case TRANSFER_DATE:
      return getTransferDate();

    case GET_NEW_LICENSE_DATE:
      return getGetNewLicenseDate();

    case MORTGAGE_DATE:
      return getMortgageDate();

    case CANCEL_GUARANTEE_DATE:
      return getCancelGuaranteeDate();

    case TRANSFER_OPERATOR:
      return getTransferOperator();

    case WARN_TAG:
      return getWarnTag();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case SELLER_NAME:
      return getSellerName();

    case BUYER_NAME:
      return getBuyerName();

    case PRODUCT_NAME:
      return getProductName();

    case FORECLOSURE_FLOOR_END_DATE:
      return getForeclosureFloorEndDate();

    case CANCEL_MORTGAGE_END_DATE:
      return getCancelMortgageEndDate();

    case TRANSFER_END_DATE:
      return getTransferEndDate();

    case GET_NEW_LICENSE_END_DATE:
      return getGetNewLicenseEndDate();

    case MORTGAGE_END_DATE:
      return getMortgageEndDate();

    case CANCEL_GUARANTEE_END_DATE:
      return getCancelGuaranteeEndDate();

    case USER_IDS:
      return getUserIds();

    case BUSINESS_SOURCE_NAME:
      return getBusinessSourceName();

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case DEPT_NAME:
      return isSetDeptName();
    case PM_USER_NAME:
      return isSetPmUserName();
    case APPLY_USER_NAME:
      return isSetApplyUserName();
    case LOAN_BANK:
      return isSetLoanBank();
    case LOAN_AMT:
      return isSetLoanAmt();
    case HOUSE_NAME:
      return isSetHouseName();
    case HOUSE_TYPE:
      return isSetHouseType();
    case LOAN_WAY:
      return isSetLoanWay();
    case FORECLOSURE_FLOOR_DATE:
      return isSetForeclosureFloorDate();
    case CANCEL_MORTGAGE_DATE:
      return isSetCancelMortgageDate();
    case TRANSFER_DATE:
      return isSetTransferDate();
    case GET_NEW_LICENSE_DATE:
      return isSetGetNewLicenseDate();
    case MORTGAGE_DATE:
      return isSetMortgageDate();
    case CANCEL_GUARANTEE_DATE:
      return isSetCancelGuaranteeDate();
    case TRANSFER_OPERATOR:
      return isSetTransferOperator();
    case WARN_TAG:
      return isSetWarnTag();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case SELLER_NAME:
      return isSetSellerName();
    case BUYER_NAME:
      return isSetBuyerName();
    case PRODUCT_NAME:
      return isSetProductName();
    case FORECLOSURE_FLOOR_END_DATE:
      return isSetForeclosureFloorEndDate();
    case CANCEL_MORTGAGE_END_DATE:
      return isSetCancelMortgageEndDate();
    case TRANSFER_END_DATE:
      return isSetTransferEndDate();
    case GET_NEW_LICENSE_END_DATE:
      return isSetGetNewLicenseEndDate();
    case MORTGAGE_END_DATE:
      return isSetMortgageEndDate();
    case CANCEL_GUARANTEE_END_DATE:
      return isSetCancelGuaranteeEndDate();
    case USER_IDS:
      return isSetUserIds();
    case BUSINESS_SOURCE_NAME:
      return isSetBusinessSourceName();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HandleDifferWarnReport)
      return this.equals((HandleDifferWarnReport)that);
    return false;
  }

  public boolean equals(HandleDifferWarnReport that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_deptName = true && this.isSetDeptName();
    boolean that_present_deptName = true && that.isSetDeptName();
    if (this_present_deptName || that_present_deptName) {
      if (!(this_present_deptName && that_present_deptName))
        return false;
      if (!this.deptName.equals(that.deptName))
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_applyUserName = true && this.isSetApplyUserName();
    boolean that_present_applyUserName = true && that.isSetApplyUserName();
    if (this_present_applyUserName || that_present_applyUserName) {
      if (!(this_present_applyUserName && that_present_applyUserName))
        return false;
      if (!this.applyUserName.equals(that.applyUserName))
        return false;
    }

    boolean this_present_loanBank = true && this.isSetLoanBank();
    boolean that_present_loanBank = true && that.isSetLoanBank();
    if (this_present_loanBank || that_present_loanBank) {
      if (!(this_present_loanBank && that_present_loanBank))
        return false;
      if (!this.loanBank.equals(that.loanBank))
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_houseType = true && this.isSetHouseType();
    boolean that_present_houseType = true && that.isSetHouseType();
    if (this_present_houseType || that_present_houseType) {
      if (!(this_present_houseType && that_present_houseType))
        return false;
      if (!this.houseType.equals(that.houseType))
        return false;
    }

    boolean this_present_loanWay = true && this.isSetLoanWay();
    boolean that_present_loanWay = true && that.isSetLoanWay();
    if (this_present_loanWay || that_present_loanWay) {
      if (!(this_present_loanWay && that_present_loanWay))
        return false;
      if (!this.loanWay.equals(that.loanWay))
        return false;
    }

    boolean this_present_foreclosureFloorDate = true && this.isSetForeclosureFloorDate();
    boolean that_present_foreclosureFloorDate = true && that.isSetForeclosureFloorDate();
    if (this_present_foreclosureFloorDate || that_present_foreclosureFloorDate) {
      if (!(this_present_foreclosureFloorDate && that_present_foreclosureFloorDate))
        return false;
      if (!this.foreclosureFloorDate.equals(that.foreclosureFloorDate))
        return false;
    }

    boolean this_present_cancelMortgageDate = true && this.isSetCancelMortgageDate();
    boolean that_present_cancelMortgageDate = true && that.isSetCancelMortgageDate();
    if (this_present_cancelMortgageDate || that_present_cancelMortgageDate) {
      if (!(this_present_cancelMortgageDate && that_present_cancelMortgageDate))
        return false;
      if (!this.cancelMortgageDate.equals(that.cancelMortgageDate))
        return false;
    }

    boolean this_present_transferDate = true && this.isSetTransferDate();
    boolean that_present_transferDate = true && that.isSetTransferDate();
    if (this_present_transferDate || that_present_transferDate) {
      if (!(this_present_transferDate && that_present_transferDate))
        return false;
      if (!this.transferDate.equals(that.transferDate))
        return false;
    }

    boolean this_present_getNewLicenseDate = true && this.isSetGetNewLicenseDate();
    boolean that_present_getNewLicenseDate = true && that.isSetGetNewLicenseDate();
    if (this_present_getNewLicenseDate || that_present_getNewLicenseDate) {
      if (!(this_present_getNewLicenseDate && that_present_getNewLicenseDate))
        return false;
      if (!this.getNewLicenseDate.equals(that.getNewLicenseDate))
        return false;
    }

    boolean this_present_mortgageDate = true && this.isSetMortgageDate();
    boolean that_present_mortgageDate = true && that.isSetMortgageDate();
    if (this_present_mortgageDate || that_present_mortgageDate) {
      if (!(this_present_mortgageDate && that_present_mortgageDate))
        return false;
      if (!this.mortgageDate.equals(that.mortgageDate))
        return false;
    }

    boolean this_present_cancelGuaranteeDate = true && this.isSetCancelGuaranteeDate();
    boolean that_present_cancelGuaranteeDate = true && that.isSetCancelGuaranteeDate();
    if (this_present_cancelGuaranteeDate || that_present_cancelGuaranteeDate) {
      if (!(this_present_cancelGuaranteeDate && that_present_cancelGuaranteeDate))
        return false;
      if (!this.cancelGuaranteeDate.equals(that.cancelGuaranteeDate))
        return false;
    }

    boolean this_present_transferOperator = true && this.isSetTransferOperator();
    boolean that_present_transferOperator = true && that.isSetTransferOperator();
    if (this_present_transferOperator || that_present_transferOperator) {
      if (!(this_present_transferOperator && that_present_transferOperator))
        return false;
      if (!this.transferOperator.equals(that.transferOperator))
        return false;
    }

    boolean this_present_warnTag = true && this.isSetWarnTag();
    boolean that_present_warnTag = true && that.isSetWarnTag();
    if (this_present_warnTag || that_present_warnTag) {
      if (!(this_present_warnTag && that_present_warnTag))
        return false;
      if (!this.warnTag.equals(that.warnTag))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_foreclosureFloorEndDate = true && this.isSetForeclosureFloorEndDate();
    boolean that_present_foreclosureFloorEndDate = true && that.isSetForeclosureFloorEndDate();
    if (this_present_foreclosureFloorEndDate || that_present_foreclosureFloorEndDate) {
      if (!(this_present_foreclosureFloorEndDate && that_present_foreclosureFloorEndDate))
        return false;
      if (!this.foreclosureFloorEndDate.equals(that.foreclosureFloorEndDate))
        return false;
    }

    boolean this_present_cancelMortgageEndDate = true && this.isSetCancelMortgageEndDate();
    boolean that_present_cancelMortgageEndDate = true && that.isSetCancelMortgageEndDate();
    if (this_present_cancelMortgageEndDate || that_present_cancelMortgageEndDate) {
      if (!(this_present_cancelMortgageEndDate && that_present_cancelMortgageEndDate))
        return false;
      if (!this.cancelMortgageEndDate.equals(that.cancelMortgageEndDate))
        return false;
    }

    boolean this_present_transferEndDate = true && this.isSetTransferEndDate();
    boolean that_present_transferEndDate = true && that.isSetTransferEndDate();
    if (this_present_transferEndDate || that_present_transferEndDate) {
      if (!(this_present_transferEndDate && that_present_transferEndDate))
        return false;
      if (!this.transferEndDate.equals(that.transferEndDate))
        return false;
    }

    boolean this_present_getNewLicenseEndDate = true && this.isSetGetNewLicenseEndDate();
    boolean that_present_getNewLicenseEndDate = true && that.isSetGetNewLicenseEndDate();
    if (this_present_getNewLicenseEndDate || that_present_getNewLicenseEndDate) {
      if (!(this_present_getNewLicenseEndDate && that_present_getNewLicenseEndDate))
        return false;
      if (!this.getNewLicenseEndDate.equals(that.getNewLicenseEndDate))
        return false;
    }

    boolean this_present_mortgageEndDate = true && this.isSetMortgageEndDate();
    boolean that_present_mortgageEndDate = true && that.isSetMortgageEndDate();
    if (this_present_mortgageEndDate || that_present_mortgageEndDate) {
      if (!(this_present_mortgageEndDate && that_present_mortgageEndDate))
        return false;
      if (!this.mortgageEndDate.equals(that.mortgageEndDate))
        return false;
    }

    boolean this_present_cancelGuaranteeEndDate = true && this.isSetCancelGuaranteeEndDate();
    boolean that_present_cancelGuaranteeEndDate = true && that.isSetCancelGuaranteeEndDate();
    if (this_present_cancelGuaranteeEndDate || that_present_cancelGuaranteeEndDate) {
      if (!(this_present_cancelGuaranteeEndDate && that_present_cancelGuaranteeEndDate))
        return false;
      if (!this.cancelGuaranteeEndDate.equals(that.cancelGuaranteeEndDate))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_businessSourceName = true && this.isSetBusinessSourceName();
    boolean that_present_businessSourceName = true && that.isSetBusinessSourceName();
    if (this_present_businessSourceName || that_present_businessSourceName) {
      if (!(this_present_businessSourceName && that_present_businessSourceName))
        return false;
      if (!this.businessSourceName.equals(that.businessSourceName))
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_deptName = true && (isSetDeptName());
    list.add(present_deptName);
    if (present_deptName)
      list.add(deptName);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_applyUserName = true && (isSetApplyUserName());
    list.add(present_applyUserName);
    if (present_applyUserName)
      list.add(applyUserName);

    boolean present_loanBank = true && (isSetLoanBank());
    list.add(present_loanBank);
    if (present_loanBank)
      list.add(loanBank);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_houseType = true && (isSetHouseType());
    list.add(present_houseType);
    if (present_houseType)
      list.add(houseType);

    boolean present_loanWay = true && (isSetLoanWay());
    list.add(present_loanWay);
    if (present_loanWay)
      list.add(loanWay);

    boolean present_foreclosureFloorDate = true && (isSetForeclosureFloorDate());
    list.add(present_foreclosureFloorDate);
    if (present_foreclosureFloorDate)
      list.add(foreclosureFloorDate);

    boolean present_cancelMortgageDate = true && (isSetCancelMortgageDate());
    list.add(present_cancelMortgageDate);
    if (present_cancelMortgageDate)
      list.add(cancelMortgageDate);

    boolean present_transferDate = true && (isSetTransferDate());
    list.add(present_transferDate);
    if (present_transferDate)
      list.add(transferDate);

    boolean present_getNewLicenseDate = true && (isSetGetNewLicenseDate());
    list.add(present_getNewLicenseDate);
    if (present_getNewLicenseDate)
      list.add(getNewLicenseDate);

    boolean present_mortgageDate = true && (isSetMortgageDate());
    list.add(present_mortgageDate);
    if (present_mortgageDate)
      list.add(mortgageDate);

    boolean present_cancelGuaranteeDate = true && (isSetCancelGuaranteeDate());
    list.add(present_cancelGuaranteeDate);
    if (present_cancelGuaranteeDate)
      list.add(cancelGuaranteeDate);

    boolean present_transferOperator = true && (isSetTransferOperator());
    list.add(present_transferOperator);
    if (present_transferOperator)
      list.add(transferOperator);

    boolean present_warnTag = true && (isSetWarnTag());
    list.add(present_warnTag);
    if (present_warnTag)
      list.add(warnTag);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_foreclosureFloorEndDate = true && (isSetForeclosureFloorEndDate());
    list.add(present_foreclosureFloorEndDate);
    if (present_foreclosureFloorEndDate)
      list.add(foreclosureFloorEndDate);

    boolean present_cancelMortgageEndDate = true && (isSetCancelMortgageEndDate());
    list.add(present_cancelMortgageEndDate);
    if (present_cancelMortgageEndDate)
      list.add(cancelMortgageEndDate);

    boolean present_transferEndDate = true && (isSetTransferEndDate());
    list.add(present_transferEndDate);
    if (present_transferEndDate)
      list.add(transferEndDate);

    boolean present_getNewLicenseEndDate = true && (isSetGetNewLicenseEndDate());
    list.add(present_getNewLicenseEndDate);
    if (present_getNewLicenseEndDate)
      list.add(getNewLicenseEndDate);

    boolean present_mortgageEndDate = true && (isSetMortgageEndDate());
    list.add(present_mortgageEndDate);
    if (present_mortgageEndDate)
      list.add(mortgageEndDate);

    boolean present_cancelGuaranteeEndDate = true && (isSetCancelGuaranteeEndDate());
    list.add(present_cancelGuaranteeEndDate);
    if (present_cancelGuaranteeEndDate)
      list.add(cancelGuaranteeEndDate);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_businessSourceName = true && (isSetBusinessSourceName());
    list.add(present_businessSourceName);
    if (present_businessSourceName)
      list.add(businessSourceName);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    return list.hashCode();
  }

  @Override
  public int compareTo(HandleDifferWarnReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptName()).compareTo(other.isSetDeptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptName, other.deptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyUserName()).compareTo(other.isSetApplyUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyUserName, other.applyUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanBank()).compareTo(other.isSetLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanBank, other.loanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseType()).compareTo(other.isSetHouseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseType, other.houseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanWay()).compareTo(other.isSetLoanWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanWay, other.loanWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureFloorDate()).compareTo(other.isSetForeclosureFloorDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureFloorDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureFloorDate, other.foreclosureFloorDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelMortgageDate()).compareTo(other.isSetCancelMortgageDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelMortgageDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelMortgageDate, other.cancelMortgageDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferDate()).compareTo(other.isSetTransferDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferDate, other.transferDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetNewLicenseDate()).compareTo(other.isSetGetNewLicenseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetNewLicenseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getNewLicenseDate, other.getNewLicenseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageDate()).compareTo(other.isSetMortgageDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageDate, other.mortgageDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelGuaranteeDate()).compareTo(other.isSetCancelGuaranteeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelGuaranteeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelGuaranteeDate, other.cancelGuaranteeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferOperator()).compareTo(other.isSetTransferOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferOperator, other.transferOperator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarnTag()).compareTo(other.isSetWarnTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarnTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warnTag, other.warnTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureFloorEndDate()).compareTo(other.isSetForeclosureFloorEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureFloorEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureFloorEndDate, other.foreclosureFloorEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelMortgageEndDate()).compareTo(other.isSetCancelMortgageEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelMortgageEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelMortgageEndDate, other.cancelMortgageEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferEndDate()).compareTo(other.isSetTransferEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferEndDate, other.transferEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetNewLicenseEndDate()).compareTo(other.isSetGetNewLicenseEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetNewLicenseEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getNewLicenseEndDate, other.getNewLicenseEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageEndDate()).compareTo(other.isSetMortgageEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageEndDate, other.mortgageEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelGuaranteeEndDate()).compareTo(other.isSetCancelGuaranteeEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelGuaranteeEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelGuaranteeEndDate, other.cancelGuaranteeEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceName()).compareTo(other.isSetBusinessSourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceName, other.businessSourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HandleDifferWarnReport(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptName:");
    if (this.deptName == null) {
      sb.append("null");
    } else {
      sb.append(this.deptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyUserName:");
    if (this.applyUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.applyUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanBank:");
    if (this.loanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.loanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseType:");
    if (this.houseType == null) {
      sb.append("null");
    } else {
      sb.append(this.houseType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanWay:");
    if (this.loanWay == null) {
      sb.append("null");
    } else {
      sb.append(this.loanWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureFloorDate:");
    if (this.foreclosureFloorDate == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureFloorDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelMortgageDate:");
    if (this.cancelMortgageDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelMortgageDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferDate:");
    if (this.transferDate == null) {
      sb.append("null");
    } else {
      sb.append(this.transferDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("getNewLicenseDate:");
    if (this.getNewLicenseDate == null) {
      sb.append("null");
    } else {
      sb.append(this.getNewLicenseDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageDate:");
    if (this.mortgageDate == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelGuaranteeDate:");
    if (this.cancelGuaranteeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelGuaranteeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferOperator:");
    if (this.transferOperator == null) {
      sb.append("null");
    } else {
      sb.append(this.transferOperator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("warnTag:");
    if (this.warnTag == null) {
      sb.append("null");
    } else {
      sb.append(this.warnTag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureFloorEndDate:");
    if (this.foreclosureFloorEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureFloorEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelMortgageEndDate:");
    if (this.cancelMortgageEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelMortgageEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferEndDate:");
    if (this.transferEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.transferEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("getNewLicenseEndDate:");
    if (this.getNewLicenseEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.getNewLicenseEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageEndDate:");
    if (this.mortgageEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelGuaranteeEndDate:");
    if (this.cancelGuaranteeEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelGuaranteeEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceName:");
    if (this.businessSourceName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HandleDifferWarnReportStandardSchemeFactory implements SchemeFactory {
    public HandleDifferWarnReportStandardScheme getScheme() {
      return new HandleDifferWarnReportStandardScheme();
    }
  }

  private static class HandleDifferWarnReportStandardScheme extends StandardScheme<HandleDifferWarnReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HandleDifferWarnReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deptName = iprot.readString();
              struct.setDeptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APPLY_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyUserName = iprot.readString();
              struct.setApplyUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanBank = iprot.readString();
              struct.setLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HOUSE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseType = iprot.readString();
              struct.setHouseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAN_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanWay = iprot.readString();
              struct.setLoanWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FORECLOSURE_FLOOR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureFloorDate = iprot.readString();
              struct.setForeclosureFloorDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CANCEL_MORTGAGE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelMortgageDate = iprot.readString();
              struct.setCancelMortgageDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TRANSFER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferDate = iprot.readString();
              struct.setTransferDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GET_NEW_LICENSE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.getNewLicenseDate = iprot.readString();
              struct.setGetNewLicenseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MORTGAGE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageDate = iprot.readString();
              struct.setMortgageDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CANCEL_GUARANTEE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelGuaranteeDate = iprot.readString();
              struct.setCancelGuaranteeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TRANSFER_OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferOperator = iprot.readString();
              struct.setTransferOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // WARN_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warnTag = iprot.readString();
              struct.setWarnTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FORECLOSURE_FLOOR_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureFloorEndDate = iprot.readString();
              struct.setForeclosureFloorEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CANCEL_MORTGAGE_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelMortgageEndDate = iprot.readString();
              struct.setCancelMortgageEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // TRANSFER_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferEndDate = iprot.readString();
              struct.setTransferEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // GET_NEW_LICENSE_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.getNewLicenseEndDate = iprot.readString();
              struct.setGetNewLicenseEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MORTGAGE_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageEndDate = iprot.readString();
              struct.setMortgageEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CANCEL_GUARANTEE_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelGuaranteeEndDate = iprot.readString();
              struct.setCancelGuaranteeEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.userIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // BUSINESS_SOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceName = iprot.readString();
              struct.setBusinessSourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HandleDifferWarnReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      if (struct.deptName != null) {
        oprot.writeFieldBegin(DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.deptName);
        oprot.writeFieldEnd();
      }
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.applyUserName != null) {
        oprot.writeFieldBegin(APPLY_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.applyUserName);
        oprot.writeFieldEnd();
      }
      if (struct.loanBank != null) {
        oprot.writeFieldBegin(LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.loanBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.houseType != null) {
        oprot.writeFieldBegin(HOUSE_TYPE_FIELD_DESC);
        oprot.writeString(struct.houseType);
        oprot.writeFieldEnd();
      }
      if (struct.loanWay != null) {
        oprot.writeFieldBegin(LOAN_WAY_FIELD_DESC);
        oprot.writeString(struct.loanWay);
        oprot.writeFieldEnd();
      }
      if (struct.foreclosureFloorDate != null) {
        oprot.writeFieldBegin(FORECLOSURE_FLOOR_DATE_FIELD_DESC);
        oprot.writeString(struct.foreclosureFloorDate);
        oprot.writeFieldEnd();
      }
      if (struct.cancelMortgageDate != null) {
        oprot.writeFieldBegin(CANCEL_MORTGAGE_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelMortgageDate);
        oprot.writeFieldEnd();
      }
      if (struct.transferDate != null) {
        oprot.writeFieldBegin(TRANSFER_DATE_FIELD_DESC);
        oprot.writeString(struct.transferDate);
        oprot.writeFieldEnd();
      }
      if (struct.getNewLicenseDate != null) {
        oprot.writeFieldBegin(GET_NEW_LICENSE_DATE_FIELD_DESC);
        oprot.writeString(struct.getNewLicenseDate);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageDate != null) {
        oprot.writeFieldBegin(MORTGAGE_DATE_FIELD_DESC);
        oprot.writeString(struct.mortgageDate);
        oprot.writeFieldEnd();
      }
      if (struct.cancelGuaranteeDate != null) {
        oprot.writeFieldBegin(CANCEL_GUARANTEE_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelGuaranteeDate);
        oprot.writeFieldEnd();
      }
      if (struct.transferOperator != null) {
        oprot.writeFieldBegin(TRANSFER_OPERATOR_FIELD_DESC);
        oprot.writeString(struct.transferOperator);
        oprot.writeFieldEnd();
      }
      if (struct.warnTag != null) {
        oprot.writeFieldBegin(WARN_TAG_FIELD_DESC);
        oprot.writeString(struct.warnTag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.foreclosureFloorEndDate != null) {
        oprot.writeFieldBegin(FORECLOSURE_FLOOR_END_DATE_FIELD_DESC);
        oprot.writeString(struct.foreclosureFloorEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.cancelMortgageEndDate != null) {
        oprot.writeFieldBegin(CANCEL_MORTGAGE_END_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelMortgageEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.transferEndDate != null) {
        oprot.writeFieldBegin(TRANSFER_END_DATE_FIELD_DESC);
        oprot.writeString(struct.transferEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.getNewLicenseEndDate != null) {
        oprot.writeFieldBegin(GET_NEW_LICENSE_END_DATE_FIELD_DESC);
        oprot.writeString(struct.getNewLicenseEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageEndDate != null) {
        oprot.writeFieldBegin(MORTGAGE_END_DATE_FIELD_DESC);
        oprot.writeString(struct.mortgageEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.cancelGuaranteeEndDate != null) {
        oprot.writeFieldBegin(CANCEL_GUARANTEE_END_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelGuaranteeEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter3 : struct.userIds)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceName != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_NAME_FIELD_DESC);
        oprot.writeString(struct.businessSourceName);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HandleDifferWarnReportTupleSchemeFactory implements SchemeFactory {
    public HandleDifferWarnReportTupleScheme getScheme() {
      return new HandleDifferWarnReportTupleScheme();
    }
  }

  private static class HandleDifferWarnReportTupleScheme extends TupleScheme<HandleDifferWarnReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HandleDifferWarnReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(3);
      }
      if (struct.isSetDeptName()) {
        optionals.set(4);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(5);
      }
      if (struct.isSetApplyUserName()) {
        optionals.set(6);
      }
      if (struct.isSetLoanBank()) {
        optionals.set(7);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(8);
      }
      if (struct.isSetHouseName()) {
        optionals.set(9);
      }
      if (struct.isSetHouseType()) {
        optionals.set(10);
      }
      if (struct.isSetLoanWay()) {
        optionals.set(11);
      }
      if (struct.isSetForeclosureFloorDate()) {
        optionals.set(12);
      }
      if (struct.isSetCancelMortgageDate()) {
        optionals.set(13);
      }
      if (struct.isSetTransferDate()) {
        optionals.set(14);
      }
      if (struct.isSetGetNewLicenseDate()) {
        optionals.set(15);
      }
      if (struct.isSetMortgageDate()) {
        optionals.set(16);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        optionals.set(17);
      }
      if (struct.isSetTransferOperator()) {
        optionals.set(18);
      }
      if (struct.isSetWarnTag()) {
        optionals.set(19);
      }
      if (struct.isSetPage()) {
        optionals.set(20);
      }
      if (struct.isSetRows()) {
        optionals.set(21);
      }
      if (struct.isSetSellerName()) {
        optionals.set(22);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(23);
      }
      if (struct.isSetProductName()) {
        optionals.set(24);
      }
      if (struct.isSetForeclosureFloorEndDate()) {
        optionals.set(25);
      }
      if (struct.isSetCancelMortgageEndDate()) {
        optionals.set(26);
      }
      if (struct.isSetTransferEndDate()) {
        optionals.set(27);
      }
      if (struct.isSetGetNewLicenseEndDate()) {
        optionals.set(28);
      }
      if (struct.isSetMortgageEndDate()) {
        optionals.set(29);
      }
      if (struct.isSetCancelGuaranteeEndDate()) {
        optionals.set(30);
      }
      if (struct.isSetUserIds()) {
        optionals.set(31);
      }
      if (struct.isSetBusinessSourceName()) {
        optionals.set(32);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(33);
      }
      oprot.writeBitSet(optionals, 34);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetDeptName()) {
        oprot.writeString(struct.deptName);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetApplyUserName()) {
        oprot.writeString(struct.applyUserName);
      }
      if (struct.isSetLoanBank()) {
        oprot.writeString(struct.loanBank);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetHouseType()) {
        oprot.writeString(struct.houseType);
      }
      if (struct.isSetLoanWay()) {
        oprot.writeString(struct.loanWay);
      }
      if (struct.isSetForeclosureFloorDate()) {
        oprot.writeString(struct.foreclosureFloorDate);
      }
      if (struct.isSetCancelMortgageDate()) {
        oprot.writeString(struct.cancelMortgageDate);
      }
      if (struct.isSetTransferDate()) {
        oprot.writeString(struct.transferDate);
      }
      if (struct.isSetGetNewLicenseDate()) {
        oprot.writeString(struct.getNewLicenseDate);
      }
      if (struct.isSetMortgageDate()) {
        oprot.writeString(struct.mortgageDate);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        oprot.writeString(struct.cancelGuaranteeDate);
      }
      if (struct.isSetTransferOperator()) {
        oprot.writeString(struct.transferOperator);
      }
      if (struct.isSetWarnTag()) {
        oprot.writeString(struct.warnTag);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetForeclosureFloorEndDate()) {
        oprot.writeString(struct.foreclosureFloorEndDate);
      }
      if (struct.isSetCancelMortgageEndDate()) {
        oprot.writeString(struct.cancelMortgageEndDate);
      }
      if (struct.isSetTransferEndDate()) {
        oprot.writeString(struct.transferEndDate);
      }
      if (struct.isSetGetNewLicenseEndDate()) {
        oprot.writeString(struct.getNewLicenseEndDate);
      }
      if (struct.isSetMortgageEndDate()) {
        oprot.writeString(struct.mortgageEndDate);
      }
      if (struct.isSetCancelGuaranteeEndDate()) {
        oprot.writeString(struct.cancelGuaranteeEndDate);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter4 : struct.userIds)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
      if (struct.isSetBusinessSourceName()) {
        oprot.writeString(struct.businessSourceName);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HandleDifferWarnReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(34);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.deptName = iprot.readString();
        struct.setDeptNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.applyUserName = iprot.readString();
        struct.setApplyUserNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loanBank = iprot.readString();
        struct.setLoanBankIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.houseType = iprot.readString();
        struct.setHouseTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loanWay = iprot.readString();
        struct.setLoanWayIsSet(true);
      }
      if (incoming.get(12)) {
        struct.foreclosureFloorDate = iprot.readString();
        struct.setForeclosureFloorDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cancelMortgageDate = iprot.readString();
        struct.setCancelMortgageDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.transferDate = iprot.readString();
        struct.setTransferDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.getNewLicenseDate = iprot.readString();
        struct.setGetNewLicenseDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.mortgageDate = iprot.readString();
        struct.setMortgageDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.cancelGuaranteeDate = iprot.readString();
        struct.setCancelGuaranteeDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.transferOperator = iprot.readString();
        struct.setTransferOperatorIsSet(true);
      }
      if (incoming.get(19)) {
        struct.warnTag = iprot.readString();
        struct.setWarnTagIsSet(true);
      }
      if (incoming.get(20)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(21)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(25)) {
        struct.foreclosureFloorEndDate = iprot.readString();
        struct.setForeclosureFloorEndDateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.cancelMortgageEndDate = iprot.readString();
        struct.setCancelMortgageEndDateIsSet(true);
      }
      if (incoming.get(27)) {
        struct.transferEndDate = iprot.readString();
        struct.setTransferEndDateIsSet(true);
      }
      if (incoming.get(28)) {
        struct.getNewLicenseEndDate = iprot.readString();
        struct.setGetNewLicenseEndDateIsSet(true);
      }
      if (incoming.get(29)) {
        struct.mortgageEndDate = iprot.readString();
        struct.setMortgageEndDateIsSet(true);
      }
      if (incoming.get(30)) {
        struct.cancelGuaranteeEndDate = iprot.readString();
        struct.setCancelGuaranteeEndDateIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list5.size);
          int _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI32();
            struct.userIds.add(_elem6);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(32)) {
        struct.businessSourceName = iprot.readString();
        struct.setBusinessSourceNameIsSet(true);
      }
      if (incoming.get(33)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
    }
  }

}


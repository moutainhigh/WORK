/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.fddafterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizProjectMortgage implements org.apache.thrift.TBase<BizProjectMortgage, BizProjectMortgage._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectMortgage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectMortgage");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MORTGAGE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registerTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REGISTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("registerId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ISSUE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("issueTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ISSUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("issueId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ISSUE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("issueUserName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ISSUE_MATERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("issueMaterial", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CANCEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CANCEL_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelUserName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CANCEL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CANCEL_MATERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelMaterial", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField RETURN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("returnId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField RETURN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("returnUserName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField RETURN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("returnTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField RETURN_MATERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("returnMaterial", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField HANDLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleType", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SIGNER_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("signerUserName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField SIGNER_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("signerFile", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SIGNER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("signerDate", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectMortgageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectMortgageTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int mortgageStatus; // required
  public String registerTime; // required
  public int registerId; // required
  public String issueTime; // required
  public int issueId; // required
  public String issueUserName; // required
  public String issueMaterial; // required
  public int cancelId; // required
  public String cancelUserName; // required
  public String cancelTime; // required
  public String cancelMaterial; // required
  public int returnId; // required
  public String returnUserName; // required
  public String returnTime; // required
  public String returnMaterial; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public int handleType; // required
  public String signerUserName; // required
  public String signerFile; // required
  public String signerDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    MORTGAGE_STATUS((short)3, "mortgageStatus"),
    REGISTER_TIME((short)4, "registerTime"),
    REGISTER_ID((short)5, "registerId"),
    ISSUE_TIME((short)6, "issueTime"),
    ISSUE_ID((short)7, "issueId"),
    ISSUE_USER_NAME((short)8, "issueUserName"),
    ISSUE_MATERIAL((short)9, "issueMaterial"),
    CANCEL_ID((short)10, "cancelId"),
    CANCEL_USER_NAME((short)11, "cancelUserName"),
    CANCEL_TIME((short)12, "cancelTime"),
    CANCEL_MATERIAL((short)13, "cancelMaterial"),
    RETURN_ID((short)14, "returnId"),
    RETURN_USER_NAME((short)15, "returnUserName"),
    RETURN_TIME((short)16, "returnTime"),
    RETURN_MATERIAL((short)17, "returnMaterial"),
    CREATE_DATE((short)18, "createDate"),
    CREATER_ID((short)19, "createrId"),
    UPDATE_ID((short)20, "updateId"),
    UPDATE_DATE((short)21, "updateDate"),
    HANDLE_TYPE((short)22, "handleType"),
    SIGNER_USER_NAME((short)23, "signerUserName"),
    SIGNER_FILE((short)24, "signerFile"),
    SIGNER_DATE((short)25, "signerDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // MORTGAGE_STATUS
          return MORTGAGE_STATUS;
        case 4: // REGISTER_TIME
          return REGISTER_TIME;
        case 5: // REGISTER_ID
          return REGISTER_ID;
        case 6: // ISSUE_TIME
          return ISSUE_TIME;
        case 7: // ISSUE_ID
          return ISSUE_ID;
        case 8: // ISSUE_USER_NAME
          return ISSUE_USER_NAME;
        case 9: // ISSUE_MATERIAL
          return ISSUE_MATERIAL;
        case 10: // CANCEL_ID
          return CANCEL_ID;
        case 11: // CANCEL_USER_NAME
          return CANCEL_USER_NAME;
        case 12: // CANCEL_TIME
          return CANCEL_TIME;
        case 13: // CANCEL_MATERIAL
          return CANCEL_MATERIAL;
        case 14: // RETURN_ID
          return RETURN_ID;
        case 15: // RETURN_USER_NAME
          return RETURN_USER_NAME;
        case 16: // RETURN_TIME
          return RETURN_TIME;
        case 17: // RETURN_MATERIAL
          return RETURN_MATERIAL;
        case 18: // CREATE_DATE
          return CREATE_DATE;
        case 19: // CREATER_ID
          return CREATER_ID;
        case 20: // UPDATE_ID
          return UPDATE_ID;
        case 21: // UPDATE_DATE
          return UPDATE_DATE;
        case 22: // HANDLE_TYPE
          return HANDLE_TYPE;
        case 23: // SIGNER_USER_NAME
          return SIGNER_USER_NAME;
        case 24: // SIGNER_FILE
          return SIGNER_FILE;
        case 25: // SIGNER_DATE
          return SIGNER_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __MORTGAGESTATUS_ISSET_ID = 2;
  private static final int __REGISTERID_ISSET_ID = 3;
  private static final int __ISSUEID_ISSET_ID = 4;
  private static final int __CANCELID_ISSET_ID = 5;
  private static final int __RETURNID_ISSET_ID = 6;
  private static final int __CREATERID_ISSET_ID = 7;
  private static final int __UPDATEID_ISSET_ID = 8;
  private static final int __HANDLETYPE_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGAGE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("mortgageStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("registerTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTER_ID, new org.apache.thrift.meta_data.FieldMetaData("registerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISSUE_TIME, new org.apache.thrift.meta_data.FieldMetaData("issueTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_ID, new org.apache.thrift.meta_data.FieldMetaData("issueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISSUE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("issueUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSUE_MATERIAL, new org.apache.thrift.meta_data.FieldMetaData("issueMaterial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_ID, new org.apache.thrift.meta_data.FieldMetaData("cancelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANCEL_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("cancelUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_TIME, new org.apache.thrift.meta_data.FieldMetaData("cancelTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_MATERIAL, new org.apache.thrift.meta_data.FieldMetaData("cancelMaterial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_ID, new org.apache.thrift.meta_data.FieldMetaData("returnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETURN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("returnUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_TIME, new org.apache.thrift.meta_data.FieldMetaData("returnTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_MATERIAL, new org.apache.thrift.meta_data.FieldMetaData("returnMaterial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("handleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNER_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("signerUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNER_FILE, new org.apache.thrift.meta_data.FieldMetaData("signerFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNER_DATE, new org.apache.thrift.meta_data.FieldMetaData("signerDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectMortgage.class, metaDataMap);
  }

  public BizProjectMortgage() {
  }

  public BizProjectMortgage(
    int pid,
    int projectId,
    int mortgageStatus,
    String registerTime,
    int registerId,
    String issueTime,
    int issueId,
    String issueUserName,
    String issueMaterial,
    int cancelId,
    String cancelUserName,
    String cancelTime,
    String cancelMaterial,
    int returnId,
    String returnUserName,
    String returnTime,
    String returnMaterial,
    String createDate,
    int createrId,
    int updateId,
    String updateDate,
    int handleType,
    String signerUserName,
    String signerFile,
    String signerDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.mortgageStatus = mortgageStatus;
    setMortgageStatusIsSet(true);
    this.registerTime = registerTime;
    this.registerId = registerId;
    setRegisterIdIsSet(true);
    this.issueTime = issueTime;
    this.issueId = issueId;
    setIssueIdIsSet(true);
    this.issueUserName = issueUserName;
    this.issueMaterial = issueMaterial;
    this.cancelId = cancelId;
    setCancelIdIsSet(true);
    this.cancelUserName = cancelUserName;
    this.cancelTime = cancelTime;
    this.cancelMaterial = cancelMaterial;
    this.returnId = returnId;
    setReturnIdIsSet(true);
    this.returnUserName = returnUserName;
    this.returnTime = returnTime;
    this.returnMaterial = returnMaterial;
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.handleType = handleType;
    setHandleTypeIsSet(true);
    this.signerUserName = signerUserName;
    this.signerFile = signerFile;
    this.signerDate = signerDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectMortgage(BizProjectMortgage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.mortgageStatus = other.mortgageStatus;
    if (other.isSetRegisterTime()) {
      this.registerTime = other.registerTime;
    }
    this.registerId = other.registerId;
    if (other.isSetIssueTime()) {
      this.issueTime = other.issueTime;
    }
    this.issueId = other.issueId;
    if (other.isSetIssueUserName()) {
      this.issueUserName = other.issueUserName;
    }
    if (other.isSetIssueMaterial()) {
      this.issueMaterial = other.issueMaterial;
    }
    this.cancelId = other.cancelId;
    if (other.isSetCancelUserName()) {
      this.cancelUserName = other.cancelUserName;
    }
    if (other.isSetCancelTime()) {
      this.cancelTime = other.cancelTime;
    }
    if (other.isSetCancelMaterial()) {
      this.cancelMaterial = other.cancelMaterial;
    }
    this.returnId = other.returnId;
    if (other.isSetReturnUserName()) {
      this.returnUserName = other.returnUserName;
    }
    if (other.isSetReturnTime()) {
      this.returnTime = other.returnTime;
    }
    if (other.isSetReturnMaterial()) {
      this.returnMaterial = other.returnMaterial;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.handleType = other.handleType;
    if (other.isSetSignerUserName()) {
      this.signerUserName = other.signerUserName;
    }
    if (other.isSetSignerFile()) {
      this.signerFile = other.signerFile;
    }
    if (other.isSetSignerDate()) {
      this.signerDate = other.signerDate;
    }
  }

  public BizProjectMortgage deepCopy() {
    return new BizProjectMortgage(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setMortgageStatusIsSet(false);
    this.mortgageStatus = 0;
    this.registerTime = null;
    setRegisterIdIsSet(false);
    this.registerId = 0;
    this.issueTime = null;
    setIssueIdIsSet(false);
    this.issueId = 0;
    this.issueUserName = null;
    this.issueMaterial = null;
    setCancelIdIsSet(false);
    this.cancelId = 0;
    this.cancelUserName = null;
    this.cancelTime = null;
    this.cancelMaterial = null;
    setReturnIdIsSet(false);
    this.returnId = 0;
    this.returnUserName = null;
    this.returnTime = null;
    this.returnMaterial = null;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    setHandleTypeIsSet(false);
    this.handleType = 0;
    this.signerUserName = null;
    this.signerFile = null;
    this.signerDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectMortgage setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizProjectMortgage setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getMortgageStatus() {
    return this.mortgageStatus;
  }

  public BizProjectMortgage setMortgageStatus(int mortgageStatus) {
    this.mortgageStatus = mortgageStatus;
    setMortgageStatusIsSet(true);
    return this;
  }

  public void unsetMortgageStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID);
  }

  /** Returns true if field mortgageStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID);
  }

  public void setMortgageStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID, value);
  }

  public String getRegisterTime() {
    return this.registerTime;
  }

  public BizProjectMortgage setRegisterTime(String registerTime) {
    this.registerTime = registerTime;
    return this;
  }

  public void unsetRegisterTime() {
    this.registerTime = null;
  }

  /** Returns true if field registerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterTime() {
    return this.registerTime != null;
  }

  public void setRegisterTimeIsSet(boolean value) {
    if (!value) {
      this.registerTime = null;
    }
  }

  public int getRegisterId() {
    return this.registerId;
  }

  public BizProjectMortgage setRegisterId(int registerId) {
    this.registerId = registerId;
    setRegisterIdIsSet(true);
    return this;
  }

  public void unsetRegisterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTERID_ISSET_ID);
  }

  /** Returns true if field registerId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTERID_ISSET_ID);
  }

  public void setRegisterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTERID_ISSET_ID, value);
  }

  public String getIssueTime() {
    return this.issueTime;
  }

  public BizProjectMortgage setIssueTime(String issueTime) {
    this.issueTime = issueTime;
    return this;
  }

  public void unsetIssueTime() {
    this.issueTime = null;
  }

  /** Returns true if field issueTime is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueTime() {
    return this.issueTime != null;
  }

  public void setIssueTimeIsSet(boolean value) {
    if (!value) {
      this.issueTime = null;
    }
  }

  public int getIssueId() {
    return this.issueId;
  }

  public BizProjectMortgage setIssueId(int issueId) {
    this.issueId = issueId;
    setIssueIdIsSet(true);
    return this;
  }

  public void unsetIssueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUEID_ISSET_ID);
  }

  /** Returns true if field issueId is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueId() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUEID_ISSET_ID);
  }

  public void setIssueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUEID_ISSET_ID, value);
  }

  public String getIssueUserName() {
    return this.issueUserName;
  }

  public BizProjectMortgage setIssueUserName(String issueUserName) {
    this.issueUserName = issueUserName;
    return this;
  }

  public void unsetIssueUserName() {
    this.issueUserName = null;
  }

  /** Returns true if field issueUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueUserName() {
    return this.issueUserName != null;
  }

  public void setIssueUserNameIsSet(boolean value) {
    if (!value) {
      this.issueUserName = null;
    }
  }

  public String getIssueMaterial() {
    return this.issueMaterial;
  }

  public BizProjectMortgage setIssueMaterial(String issueMaterial) {
    this.issueMaterial = issueMaterial;
    return this;
  }

  public void unsetIssueMaterial() {
    this.issueMaterial = null;
  }

  /** Returns true if field issueMaterial is set (has been assigned a value) and false otherwise */
  public boolean isSetIssueMaterial() {
    return this.issueMaterial != null;
  }

  public void setIssueMaterialIsSet(boolean value) {
    if (!value) {
      this.issueMaterial = null;
    }
  }

  public int getCancelId() {
    return this.cancelId;
  }

  public BizProjectMortgage setCancelId(int cancelId) {
    this.cancelId = cancelId;
    setCancelIdIsSet(true);
    return this;
  }

  public void unsetCancelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELID_ISSET_ID);
  }

  /** Returns true if field cancelId is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelId() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELID_ISSET_ID);
  }

  public void setCancelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELID_ISSET_ID, value);
  }

  public String getCancelUserName() {
    return this.cancelUserName;
  }

  public BizProjectMortgage setCancelUserName(String cancelUserName) {
    this.cancelUserName = cancelUserName;
    return this;
  }

  public void unsetCancelUserName() {
    this.cancelUserName = null;
  }

  /** Returns true if field cancelUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelUserName() {
    return this.cancelUserName != null;
  }

  public void setCancelUserNameIsSet(boolean value) {
    if (!value) {
      this.cancelUserName = null;
    }
  }

  public String getCancelTime() {
    return this.cancelTime;
  }

  public BizProjectMortgage setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  public void unsetCancelTime() {
    this.cancelTime = null;
  }

  /** Returns true if field cancelTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelTime() {
    return this.cancelTime != null;
  }

  public void setCancelTimeIsSet(boolean value) {
    if (!value) {
      this.cancelTime = null;
    }
  }

  public String getCancelMaterial() {
    return this.cancelMaterial;
  }

  public BizProjectMortgage setCancelMaterial(String cancelMaterial) {
    this.cancelMaterial = cancelMaterial;
    return this;
  }

  public void unsetCancelMaterial() {
    this.cancelMaterial = null;
  }

  /** Returns true if field cancelMaterial is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelMaterial() {
    return this.cancelMaterial != null;
  }

  public void setCancelMaterialIsSet(boolean value) {
    if (!value) {
      this.cancelMaterial = null;
    }
  }

  public int getReturnId() {
    return this.returnId;
  }

  public BizProjectMortgage setReturnId(int returnId) {
    this.returnId = returnId;
    setReturnIdIsSet(true);
    return this;
  }

  public void unsetReturnId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNID_ISSET_ID);
  }

  /** Returns true if field returnId is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnId() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNID_ISSET_ID);
  }

  public void setReturnIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNID_ISSET_ID, value);
  }

  public String getReturnUserName() {
    return this.returnUserName;
  }

  public BizProjectMortgage setReturnUserName(String returnUserName) {
    this.returnUserName = returnUserName;
    return this;
  }

  public void unsetReturnUserName() {
    this.returnUserName = null;
  }

  /** Returns true if field returnUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnUserName() {
    return this.returnUserName != null;
  }

  public void setReturnUserNameIsSet(boolean value) {
    if (!value) {
      this.returnUserName = null;
    }
  }

  public String getReturnTime() {
    return this.returnTime;
  }

  public BizProjectMortgage setReturnTime(String returnTime) {
    this.returnTime = returnTime;
    return this;
  }

  public void unsetReturnTime() {
    this.returnTime = null;
  }

  /** Returns true if field returnTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnTime() {
    return this.returnTime != null;
  }

  public void setReturnTimeIsSet(boolean value) {
    if (!value) {
      this.returnTime = null;
    }
  }

  public String getReturnMaterial() {
    return this.returnMaterial;
  }

  public BizProjectMortgage setReturnMaterial(String returnMaterial) {
    this.returnMaterial = returnMaterial;
    return this;
  }

  public void unsetReturnMaterial() {
    this.returnMaterial = null;
  }

  /** Returns true if field returnMaterial is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnMaterial() {
    return this.returnMaterial != null;
  }

  public void setReturnMaterialIsSet(boolean value) {
    if (!value) {
      this.returnMaterial = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public BizProjectMortgage setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public BizProjectMortgage setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public BizProjectMortgage setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public BizProjectMortgage setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getHandleType() {
    return this.handleType;
  }

  public BizProjectMortgage setHandleType(int handleType) {
    this.handleType = handleType;
    setHandleTypeIsSet(true);
    return this;
  }

  public void unsetHandleType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLETYPE_ISSET_ID);
  }

  /** Returns true if field handleType is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleType() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLETYPE_ISSET_ID);
  }

  public void setHandleTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLETYPE_ISSET_ID, value);
  }

  public String getSignerUserName() {
    return this.signerUserName;
  }

  public BizProjectMortgage setSignerUserName(String signerUserName) {
    this.signerUserName = signerUserName;
    return this;
  }

  public void unsetSignerUserName() {
    this.signerUserName = null;
  }

  /** Returns true if field signerUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetSignerUserName() {
    return this.signerUserName != null;
  }

  public void setSignerUserNameIsSet(boolean value) {
    if (!value) {
      this.signerUserName = null;
    }
  }

  public String getSignerFile() {
    return this.signerFile;
  }

  public BizProjectMortgage setSignerFile(String signerFile) {
    this.signerFile = signerFile;
    return this;
  }

  public void unsetSignerFile() {
    this.signerFile = null;
  }

  /** Returns true if field signerFile is set (has been assigned a value) and false otherwise */
  public boolean isSetSignerFile() {
    return this.signerFile != null;
  }

  public void setSignerFileIsSet(boolean value) {
    if (!value) {
      this.signerFile = null;
    }
  }

  public String getSignerDate() {
    return this.signerDate;
  }

  public BizProjectMortgage setSignerDate(String signerDate) {
    this.signerDate = signerDate;
    return this;
  }

  public void unsetSignerDate() {
    this.signerDate = null;
  }

  /** Returns true if field signerDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSignerDate() {
    return this.signerDate != null;
  }

  public void setSignerDateIsSet(boolean value) {
    if (!value) {
      this.signerDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case MORTGAGE_STATUS:
      if (value == null) {
        unsetMortgageStatus();
      } else {
        setMortgageStatus((Integer)value);
      }
      break;

    case REGISTER_TIME:
      if (value == null) {
        unsetRegisterTime();
      } else {
        setRegisterTime((String)value);
      }
      break;

    case REGISTER_ID:
      if (value == null) {
        unsetRegisterId();
      } else {
        setRegisterId((Integer)value);
      }
      break;

    case ISSUE_TIME:
      if (value == null) {
        unsetIssueTime();
      } else {
        setIssueTime((String)value);
      }
      break;

    case ISSUE_ID:
      if (value == null) {
        unsetIssueId();
      } else {
        setIssueId((Integer)value);
      }
      break;

    case ISSUE_USER_NAME:
      if (value == null) {
        unsetIssueUserName();
      } else {
        setIssueUserName((String)value);
      }
      break;

    case ISSUE_MATERIAL:
      if (value == null) {
        unsetIssueMaterial();
      } else {
        setIssueMaterial((String)value);
      }
      break;

    case CANCEL_ID:
      if (value == null) {
        unsetCancelId();
      } else {
        setCancelId((Integer)value);
      }
      break;

    case CANCEL_USER_NAME:
      if (value == null) {
        unsetCancelUserName();
      } else {
        setCancelUserName((String)value);
      }
      break;

    case CANCEL_TIME:
      if (value == null) {
        unsetCancelTime();
      } else {
        setCancelTime((String)value);
      }
      break;

    case CANCEL_MATERIAL:
      if (value == null) {
        unsetCancelMaterial();
      } else {
        setCancelMaterial((String)value);
      }
      break;

    case RETURN_ID:
      if (value == null) {
        unsetReturnId();
      } else {
        setReturnId((Integer)value);
      }
      break;

    case RETURN_USER_NAME:
      if (value == null) {
        unsetReturnUserName();
      } else {
        setReturnUserName((String)value);
      }
      break;

    case RETURN_TIME:
      if (value == null) {
        unsetReturnTime();
      } else {
        setReturnTime((String)value);
      }
      break;

    case RETURN_MATERIAL:
      if (value == null) {
        unsetReturnMaterial();
      } else {
        setReturnMaterial((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case HANDLE_TYPE:
      if (value == null) {
        unsetHandleType();
      } else {
        setHandleType((Integer)value);
      }
      break;

    case SIGNER_USER_NAME:
      if (value == null) {
        unsetSignerUserName();
      } else {
        setSignerUserName((String)value);
      }
      break;

    case SIGNER_FILE:
      if (value == null) {
        unsetSignerFile();
      } else {
        setSignerFile((String)value);
      }
      break;

    case SIGNER_DATE:
      if (value == null) {
        unsetSignerDate();
      } else {
        setSignerDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case MORTGAGE_STATUS:
      return Integer.valueOf(getMortgageStatus());

    case REGISTER_TIME:
      return getRegisterTime();

    case REGISTER_ID:
      return Integer.valueOf(getRegisterId());

    case ISSUE_TIME:
      return getIssueTime();

    case ISSUE_ID:
      return Integer.valueOf(getIssueId());

    case ISSUE_USER_NAME:
      return getIssueUserName();

    case ISSUE_MATERIAL:
      return getIssueMaterial();

    case CANCEL_ID:
      return Integer.valueOf(getCancelId());

    case CANCEL_USER_NAME:
      return getCancelUserName();

    case CANCEL_TIME:
      return getCancelTime();

    case CANCEL_MATERIAL:
      return getCancelMaterial();

    case RETURN_ID:
      return Integer.valueOf(getReturnId());

    case RETURN_USER_NAME:
      return getReturnUserName();

    case RETURN_TIME:
      return getReturnTime();

    case RETURN_MATERIAL:
      return getReturnMaterial();

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case HANDLE_TYPE:
      return Integer.valueOf(getHandleType());

    case SIGNER_USER_NAME:
      return getSignerUserName();

    case SIGNER_FILE:
      return getSignerFile();

    case SIGNER_DATE:
      return getSignerDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case MORTGAGE_STATUS:
      return isSetMortgageStatus();
    case REGISTER_TIME:
      return isSetRegisterTime();
    case REGISTER_ID:
      return isSetRegisterId();
    case ISSUE_TIME:
      return isSetIssueTime();
    case ISSUE_ID:
      return isSetIssueId();
    case ISSUE_USER_NAME:
      return isSetIssueUserName();
    case ISSUE_MATERIAL:
      return isSetIssueMaterial();
    case CANCEL_ID:
      return isSetCancelId();
    case CANCEL_USER_NAME:
      return isSetCancelUserName();
    case CANCEL_TIME:
      return isSetCancelTime();
    case CANCEL_MATERIAL:
      return isSetCancelMaterial();
    case RETURN_ID:
      return isSetReturnId();
    case RETURN_USER_NAME:
      return isSetReturnUserName();
    case RETURN_TIME:
      return isSetReturnTime();
    case RETURN_MATERIAL:
      return isSetReturnMaterial();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case HANDLE_TYPE:
      return isSetHandleType();
    case SIGNER_USER_NAME:
      return isSetSignerUserName();
    case SIGNER_FILE:
      return isSetSignerFile();
    case SIGNER_DATE:
      return isSetSignerDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectMortgage)
      return this.equals((BizProjectMortgage)that);
    return false;
  }

  public boolean equals(BizProjectMortgage that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_mortgageStatus = true;
    boolean that_present_mortgageStatus = true;
    if (this_present_mortgageStatus || that_present_mortgageStatus) {
      if (!(this_present_mortgageStatus && that_present_mortgageStatus))
        return false;
      if (this.mortgageStatus != that.mortgageStatus)
        return false;
    }

    boolean this_present_registerTime = true && this.isSetRegisterTime();
    boolean that_present_registerTime = true && that.isSetRegisterTime();
    if (this_present_registerTime || that_present_registerTime) {
      if (!(this_present_registerTime && that_present_registerTime))
        return false;
      if (!this.registerTime.equals(that.registerTime))
        return false;
    }

    boolean this_present_registerId = true;
    boolean that_present_registerId = true;
    if (this_present_registerId || that_present_registerId) {
      if (!(this_present_registerId && that_present_registerId))
        return false;
      if (this.registerId != that.registerId)
        return false;
    }

    boolean this_present_issueTime = true && this.isSetIssueTime();
    boolean that_present_issueTime = true && that.isSetIssueTime();
    if (this_present_issueTime || that_present_issueTime) {
      if (!(this_present_issueTime && that_present_issueTime))
        return false;
      if (!this.issueTime.equals(that.issueTime))
        return false;
    }

    boolean this_present_issueId = true;
    boolean that_present_issueId = true;
    if (this_present_issueId || that_present_issueId) {
      if (!(this_present_issueId && that_present_issueId))
        return false;
      if (this.issueId != that.issueId)
        return false;
    }

    boolean this_present_issueUserName = true && this.isSetIssueUserName();
    boolean that_present_issueUserName = true && that.isSetIssueUserName();
    if (this_present_issueUserName || that_present_issueUserName) {
      if (!(this_present_issueUserName && that_present_issueUserName))
        return false;
      if (!this.issueUserName.equals(that.issueUserName))
        return false;
    }

    boolean this_present_issueMaterial = true && this.isSetIssueMaterial();
    boolean that_present_issueMaterial = true && that.isSetIssueMaterial();
    if (this_present_issueMaterial || that_present_issueMaterial) {
      if (!(this_present_issueMaterial && that_present_issueMaterial))
        return false;
      if (!this.issueMaterial.equals(that.issueMaterial))
        return false;
    }

    boolean this_present_cancelId = true;
    boolean that_present_cancelId = true;
    if (this_present_cancelId || that_present_cancelId) {
      if (!(this_present_cancelId && that_present_cancelId))
        return false;
      if (this.cancelId != that.cancelId)
        return false;
    }

    boolean this_present_cancelUserName = true && this.isSetCancelUserName();
    boolean that_present_cancelUserName = true && that.isSetCancelUserName();
    if (this_present_cancelUserName || that_present_cancelUserName) {
      if (!(this_present_cancelUserName && that_present_cancelUserName))
        return false;
      if (!this.cancelUserName.equals(that.cancelUserName))
        return false;
    }

    boolean this_present_cancelTime = true && this.isSetCancelTime();
    boolean that_present_cancelTime = true && that.isSetCancelTime();
    if (this_present_cancelTime || that_present_cancelTime) {
      if (!(this_present_cancelTime && that_present_cancelTime))
        return false;
      if (!this.cancelTime.equals(that.cancelTime))
        return false;
    }

    boolean this_present_cancelMaterial = true && this.isSetCancelMaterial();
    boolean that_present_cancelMaterial = true && that.isSetCancelMaterial();
    if (this_present_cancelMaterial || that_present_cancelMaterial) {
      if (!(this_present_cancelMaterial && that_present_cancelMaterial))
        return false;
      if (!this.cancelMaterial.equals(that.cancelMaterial))
        return false;
    }

    boolean this_present_returnId = true;
    boolean that_present_returnId = true;
    if (this_present_returnId || that_present_returnId) {
      if (!(this_present_returnId && that_present_returnId))
        return false;
      if (this.returnId != that.returnId)
        return false;
    }

    boolean this_present_returnUserName = true && this.isSetReturnUserName();
    boolean that_present_returnUserName = true && that.isSetReturnUserName();
    if (this_present_returnUserName || that_present_returnUserName) {
      if (!(this_present_returnUserName && that_present_returnUserName))
        return false;
      if (!this.returnUserName.equals(that.returnUserName))
        return false;
    }

    boolean this_present_returnTime = true && this.isSetReturnTime();
    boolean that_present_returnTime = true && that.isSetReturnTime();
    if (this_present_returnTime || that_present_returnTime) {
      if (!(this_present_returnTime && that_present_returnTime))
        return false;
      if (!this.returnTime.equals(that.returnTime))
        return false;
    }

    boolean this_present_returnMaterial = true && this.isSetReturnMaterial();
    boolean that_present_returnMaterial = true && that.isSetReturnMaterial();
    if (this_present_returnMaterial || that_present_returnMaterial) {
      if (!(this_present_returnMaterial && that_present_returnMaterial))
        return false;
      if (!this.returnMaterial.equals(that.returnMaterial))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_handleType = true;
    boolean that_present_handleType = true;
    if (this_present_handleType || that_present_handleType) {
      if (!(this_present_handleType && that_present_handleType))
        return false;
      if (this.handleType != that.handleType)
        return false;
    }

    boolean this_present_signerUserName = true && this.isSetSignerUserName();
    boolean that_present_signerUserName = true && that.isSetSignerUserName();
    if (this_present_signerUserName || that_present_signerUserName) {
      if (!(this_present_signerUserName && that_present_signerUserName))
        return false;
      if (!this.signerUserName.equals(that.signerUserName))
        return false;
    }

    boolean this_present_signerFile = true && this.isSetSignerFile();
    boolean that_present_signerFile = true && that.isSetSignerFile();
    if (this_present_signerFile || that_present_signerFile) {
      if (!(this_present_signerFile && that_present_signerFile))
        return false;
      if (!this.signerFile.equals(that.signerFile))
        return false;
    }

    boolean this_present_signerDate = true && this.isSetSignerDate();
    boolean that_present_signerDate = true && that.isSetSignerDate();
    if (this_present_signerDate || that_present_signerDate) {
      if (!(this_present_signerDate && that_present_signerDate))
        return false;
      if (!this.signerDate.equals(that.signerDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_mortgageStatus = true;
    list.add(present_mortgageStatus);
    if (present_mortgageStatus)
      list.add(mortgageStatus);

    boolean present_registerTime = true && (isSetRegisterTime());
    list.add(present_registerTime);
    if (present_registerTime)
      list.add(registerTime);

    boolean present_registerId = true;
    list.add(present_registerId);
    if (present_registerId)
      list.add(registerId);

    boolean present_issueTime = true && (isSetIssueTime());
    list.add(present_issueTime);
    if (present_issueTime)
      list.add(issueTime);

    boolean present_issueId = true;
    list.add(present_issueId);
    if (present_issueId)
      list.add(issueId);

    boolean present_issueUserName = true && (isSetIssueUserName());
    list.add(present_issueUserName);
    if (present_issueUserName)
      list.add(issueUserName);

    boolean present_issueMaterial = true && (isSetIssueMaterial());
    list.add(present_issueMaterial);
    if (present_issueMaterial)
      list.add(issueMaterial);

    boolean present_cancelId = true;
    list.add(present_cancelId);
    if (present_cancelId)
      list.add(cancelId);

    boolean present_cancelUserName = true && (isSetCancelUserName());
    list.add(present_cancelUserName);
    if (present_cancelUserName)
      list.add(cancelUserName);

    boolean present_cancelTime = true && (isSetCancelTime());
    list.add(present_cancelTime);
    if (present_cancelTime)
      list.add(cancelTime);

    boolean present_cancelMaterial = true && (isSetCancelMaterial());
    list.add(present_cancelMaterial);
    if (present_cancelMaterial)
      list.add(cancelMaterial);

    boolean present_returnId = true;
    list.add(present_returnId);
    if (present_returnId)
      list.add(returnId);

    boolean present_returnUserName = true && (isSetReturnUserName());
    list.add(present_returnUserName);
    if (present_returnUserName)
      list.add(returnUserName);

    boolean present_returnTime = true && (isSetReturnTime());
    list.add(present_returnTime);
    if (present_returnTime)
      list.add(returnTime);

    boolean present_returnMaterial = true && (isSetReturnMaterial());
    list.add(present_returnMaterial);
    if (present_returnMaterial)
      list.add(returnMaterial);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_handleType = true;
    list.add(present_handleType);
    if (present_handleType)
      list.add(handleType);

    boolean present_signerUserName = true && (isSetSignerUserName());
    list.add(present_signerUserName);
    if (present_signerUserName)
      list.add(signerUserName);

    boolean present_signerFile = true && (isSetSignerFile());
    list.add(present_signerFile);
    if (present_signerFile)
      list.add(signerFile);

    boolean present_signerDate = true && (isSetSignerDate());
    list.add(present_signerDate);
    if (present_signerDate)
      list.add(signerDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectMortgage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageStatus()).compareTo(other.isSetMortgageStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageStatus, other.mortgageStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterTime()).compareTo(other.isSetRegisterTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerTime, other.registerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterId()).compareTo(other.isSetRegisterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerId, other.registerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueTime()).compareTo(other.isSetIssueTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueTime, other.issueTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueId()).compareTo(other.isSetIssueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueId, other.issueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueUserName()).compareTo(other.isSetIssueUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueUserName, other.issueUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssueMaterial()).compareTo(other.isSetIssueMaterial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssueMaterial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issueMaterial, other.issueMaterial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelId()).compareTo(other.isSetCancelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelId, other.cancelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelUserName()).compareTo(other.isSetCancelUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelUserName, other.cancelUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTime()).compareTo(other.isSetCancelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelTime, other.cancelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelMaterial()).compareTo(other.isSetCancelMaterial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelMaterial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelMaterial, other.cancelMaterial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnId()).compareTo(other.isSetReturnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnId, other.returnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnUserName()).compareTo(other.isSetReturnUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnUserName, other.returnUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnTime()).compareTo(other.isSetReturnTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnTime, other.returnTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnMaterial()).compareTo(other.isSetReturnMaterial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnMaterial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnMaterial, other.returnMaterial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleType()).compareTo(other.isSetHandleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleType, other.handleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignerUserName()).compareTo(other.isSetSignerUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignerUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signerUserName, other.signerUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignerFile()).compareTo(other.isSetSignerFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignerFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signerFile, other.signerFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignerDate()).compareTo(other.isSetSignerDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignerDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signerDate, other.signerDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectMortgage(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageStatus:");
    sb.append(this.mortgageStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerTime:");
    if (this.registerTime == null) {
      sb.append("null");
    } else {
      sb.append(this.registerTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registerId:");
    sb.append(this.registerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueTime:");
    if (this.issueTime == null) {
      sb.append("null");
    } else {
      sb.append(this.issueTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueId:");
    sb.append(this.issueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueUserName:");
    if (this.issueUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.issueUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("issueMaterial:");
    if (this.issueMaterial == null) {
      sb.append("null");
    } else {
      sb.append(this.issueMaterial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelId:");
    sb.append(this.cancelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelUserName:");
    if (this.cancelUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelTime:");
    if (this.cancelTime == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelMaterial:");
    if (this.cancelMaterial == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelMaterial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnId:");
    sb.append(this.returnId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnUserName:");
    if (this.returnUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.returnUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnTime:");
    if (this.returnTime == null) {
      sb.append("null");
    } else {
      sb.append(this.returnTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnMaterial:");
    if (this.returnMaterial == null) {
      sb.append("null");
    } else {
      sb.append(this.returnMaterial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleType:");
    sb.append(this.handleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signerUserName:");
    if (this.signerUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.signerUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signerFile:");
    if (this.signerFile == null) {
      sb.append("null");
    } else {
      sb.append(this.signerFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signerDate:");
    if (this.signerDate == null) {
      sb.append("null");
    } else {
      sb.append(this.signerDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectMortgageStandardSchemeFactory implements SchemeFactory {
    public BizProjectMortgageStandardScheme getScheme() {
      return new BizProjectMortgageStandardScheme();
    }
  }

  private static class BizProjectMortgageStandardScheme extends StandardScheme<BizProjectMortgage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectMortgage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MORTGAGE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageStatus = iprot.readI32();
              struct.setMortgageStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGISTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registerTime = iprot.readString();
              struct.setRegisterTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGISTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registerId = iprot.readI32();
              struct.setRegisterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ISSUE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueTime = iprot.readString();
              struct.setIssueTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ISSUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.issueId = iprot.readI32();
              struct.setIssueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ISSUE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueUserName = iprot.readString();
              struct.setIssueUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ISSUE_MATERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.issueMaterial = iprot.readString();
              struct.setIssueMaterialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CANCEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cancelId = iprot.readI32();
              struct.setCancelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CANCEL_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelUserName = iprot.readString();
              struct.setCancelUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CANCEL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelTime = iprot.readString();
              struct.setCancelTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CANCEL_MATERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelMaterial = iprot.readString();
              struct.setCancelMaterialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RETURN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.returnId = iprot.readI32();
              struct.setReturnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RETURN_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnUserName = iprot.readString();
              struct.setReturnUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RETURN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnTime = iprot.readString();
              struct.setReturnTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RETURN_MATERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnMaterial = iprot.readString();
              struct.setReturnMaterialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // HANDLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleType = iprot.readI32();
              struct.setHandleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SIGNER_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signerUserName = iprot.readString();
              struct.setSignerUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SIGNER_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signerFile = iprot.readString();
              struct.setSignerFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SIGNER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signerDate = iprot.readString();
              struct.setSignerDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectMortgage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORTGAGE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.mortgageStatus);
      oprot.writeFieldEnd();
      if (struct.registerTime != null) {
        oprot.writeFieldBegin(REGISTER_TIME_FIELD_DESC);
        oprot.writeString(struct.registerTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGISTER_ID_FIELD_DESC);
      oprot.writeI32(struct.registerId);
      oprot.writeFieldEnd();
      if (struct.issueTime != null) {
        oprot.writeFieldBegin(ISSUE_TIME_FIELD_DESC);
        oprot.writeString(struct.issueTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISSUE_ID_FIELD_DESC);
      oprot.writeI32(struct.issueId);
      oprot.writeFieldEnd();
      if (struct.issueUserName != null) {
        oprot.writeFieldBegin(ISSUE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.issueUserName);
        oprot.writeFieldEnd();
      }
      if (struct.issueMaterial != null) {
        oprot.writeFieldBegin(ISSUE_MATERIAL_FIELD_DESC);
        oprot.writeString(struct.issueMaterial);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CANCEL_ID_FIELD_DESC);
      oprot.writeI32(struct.cancelId);
      oprot.writeFieldEnd();
      if (struct.cancelUserName != null) {
        oprot.writeFieldBegin(CANCEL_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.cancelUserName);
        oprot.writeFieldEnd();
      }
      if (struct.cancelTime != null) {
        oprot.writeFieldBegin(CANCEL_TIME_FIELD_DESC);
        oprot.writeString(struct.cancelTime);
        oprot.writeFieldEnd();
      }
      if (struct.cancelMaterial != null) {
        oprot.writeFieldBegin(CANCEL_MATERIAL_FIELD_DESC);
        oprot.writeString(struct.cancelMaterial);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETURN_ID_FIELD_DESC);
      oprot.writeI32(struct.returnId);
      oprot.writeFieldEnd();
      if (struct.returnUserName != null) {
        oprot.writeFieldBegin(RETURN_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.returnUserName);
        oprot.writeFieldEnd();
      }
      if (struct.returnTime != null) {
        oprot.writeFieldBegin(RETURN_TIME_FIELD_DESC);
        oprot.writeString(struct.returnTime);
        oprot.writeFieldEnd();
      }
      if (struct.returnMaterial != null) {
        oprot.writeFieldBegin(RETURN_MATERIAL_FIELD_DESC);
        oprot.writeString(struct.returnMaterial);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HANDLE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.handleType);
      oprot.writeFieldEnd();
      if (struct.signerUserName != null) {
        oprot.writeFieldBegin(SIGNER_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.signerUserName);
        oprot.writeFieldEnd();
      }
      if (struct.signerFile != null) {
        oprot.writeFieldBegin(SIGNER_FILE_FIELD_DESC);
        oprot.writeString(struct.signerFile);
        oprot.writeFieldEnd();
      }
      if (struct.signerDate != null) {
        oprot.writeFieldBegin(SIGNER_DATE_FIELD_DESC);
        oprot.writeString(struct.signerDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectMortgageTupleSchemeFactory implements SchemeFactory {
    public BizProjectMortgageTupleScheme getScheme() {
      return new BizProjectMortgageTupleScheme();
    }
  }

  private static class BizProjectMortgageTupleScheme extends TupleScheme<BizProjectMortgage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectMortgage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetMortgageStatus()) {
        optionals.set(2);
      }
      if (struct.isSetRegisterTime()) {
        optionals.set(3);
      }
      if (struct.isSetRegisterId()) {
        optionals.set(4);
      }
      if (struct.isSetIssueTime()) {
        optionals.set(5);
      }
      if (struct.isSetIssueId()) {
        optionals.set(6);
      }
      if (struct.isSetIssueUserName()) {
        optionals.set(7);
      }
      if (struct.isSetIssueMaterial()) {
        optionals.set(8);
      }
      if (struct.isSetCancelId()) {
        optionals.set(9);
      }
      if (struct.isSetCancelUserName()) {
        optionals.set(10);
      }
      if (struct.isSetCancelTime()) {
        optionals.set(11);
      }
      if (struct.isSetCancelMaterial()) {
        optionals.set(12);
      }
      if (struct.isSetReturnId()) {
        optionals.set(13);
      }
      if (struct.isSetReturnUserName()) {
        optionals.set(14);
      }
      if (struct.isSetReturnTime()) {
        optionals.set(15);
      }
      if (struct.isSetReturnMaterial()) {
        optionals.set(16);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(17);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(18);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(19);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(20);
      }
      if (struct.isSetHandleType()) {
        optionals.set(21);
      }
      if (struct.isSetSignerUserName()) {
        optionals.set(22);
      }
      if (struct.isSetSignerFile()) {
        optionals.set(23);
      }
      if (struct.isSetSignerDate()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetMortgageStatus()) {
        oprot.writeI32(struct.mortgageStatus);
      }
      if (struct.isSetRegisterTime()) {
        oprot.writeString(struct.registerTime);
      }
      if (struct.isSetRegisterId()) {
        oprot.writeI32(struct.registerId);
      }
      if (struct.isSetIssueTime()) {
        oprot.writeString(struct.issueTime);
      }
      if (struct.isSetIssueId()) {
        oprot.writeI32(struct.issueId);
      }
      if (struct.isSetIssueUserName()) {
        oprot.writeString(struct.issueUserName);
      }
      if (struct.isSetIssueMaterial()) {
        oprot.writeString(struct.issueMaterial);
      }
      if (struct.isSetCancelId()) {
        oprot.writeI32(struct.cancelId);
      }
      if (struct.isSetCancelUserName()) {
        oprot.writeString(struct.cancelUserName);
      }
      if (struct.isSetCancelTime()) {
        oprot.writeString(struct.cancelTime);
      }
      if (struct.isSetCancelMaterial()) {
        oprot.writeString(struct.cancelMaterial);
      }
      if (struct.isSetReturnId()) {
        oprot.writeI32(struct.returnId);
      }
      if (struct.isSetReturnUserName()) {
        oprot.writeString(struct.returnUserName);
      }
      if (struct.isSetReturnTime()) {
        oprot.writeString(struct.returnTime);
      }
      if (struct.isSetReturnMaterial()) {
        oprot.writeString(struct.returnMaterial);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetHandleType()) {
        oprot.writeI32(struct.handleType);
      }
      if (struct.isSetSignerUserName()) {
        oprot.writeString(struct.signerUserName);
      }
      if (struct.isSetSignerFile()) {
        oprot.writeString(struct.signerFile);
      }
      if (struct.isSetSignerDate()) {
        oprot.writeString(struct.signerDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectMortgage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mortgageStatus = iprot.readI32();
        struct.setMortgageStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.registerTime = iprot.readString();
        struct.setRegisterTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.registerId = iprot.readI32();
        struct.setRegisterIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.issueTime = iprot.readString();
        struct.setIssueTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.issueId = iprot.readI32();
        struct.setIssueIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.issueUserName = iprot.readString();
        struct.setIssueUserNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.issueMaterial = iprot.readString();
        struct.setIssueMaterialIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cancelId = iprot.readI32();
        struct.setCancelIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cancelUserName = iprot.readString();
        struct.setCancelUserNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cancelTime = iprot.readString();
        struct.setCancelTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cancelMaterial = iprot.readString();
        struct.setCancelMaterialIsSet(true);
      }
      if (incoming.get(13)) {
        struct.returnId = iprot.readI32();
        struct.setReturnIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.returnUserName = iprot.readString();
        struct.setReturnUserNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.returnTime = iprot.readString();
        struct.setReturnTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.returnMaterial = iprot.readString();
        struct.setReturnMaterialIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.handleType = iprot.readI32();
        struct.setHandleTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.signerUserName = iprot.readString();
        struct.setSignerUserNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.signerFile = iprot.readString();
        struct.setSignerFileIsSet(true);
      }
      if (incoming.get(24)) {
        struct.signerDate = iprot.readString();
        struct.setSignerDateIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-28")
public class TrackRecordReport implements org.apache.thrift.TBase<TrackRecordReport, TrackRecordReport._Fields>, java.io.Serializable, Cloneable, Comparable<TrackRecordReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TrackRecordReport");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deptName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deptId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanBank", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanBank", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField LOAN_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField REQUEST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDate", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_FLOOR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureFloorDate", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField GET_OLD_LICENSE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("getOldLicenseDate", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CANCEL_MORTGAGE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelMortgageDate", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField TRANSFER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("transferDate", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField GET_NEW_LICENSE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("getNewLicenseDate", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField MORTGAGE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageDate", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFee", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDay", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField EXTENSION_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionDays", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField REC_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recLoanDate", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField DECLARATION_FIELD_DESC = new org.apache.thrift.protocol.TField("declaration", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField HOUSE_CLERK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseClerkName", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField LOGOUT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("logoutName", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField ASSIGNED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("assignedName", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField NEW_CARD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newCardName", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField MORTGAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageName", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("innerOrOut", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField LOAN_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanEndDate", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField HANDLE_FLOW_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowStartDate", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField HANDLE_FLOW_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowEndDate", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField HANDLE_FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowId", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("innerOrOutName", org.apache.thrift.protocol.TType.STRING, (short)45);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TrackRecordReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TrackRecordReportTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String projectNumber; // required
  public String productName; // required
  public String deptName; // required
  public int deptId; // required
  public String pmUserName; // required
  public int pmUserId; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String housePropertyCard; // required
  public String sellerName; // required
  public String buyerName; // required
  public String newLoanBank; // required
  public String oldLoanBank; // required
  public int productId; // required
  public double loanAmt; // required
  public double interest; // required
  public String requestDate; // required
  public String loanDate; // required
  public String foreclosureFloorDate; // required
  public String getOldLicenseDate; // required
  public String cancelMortgageDate; // required
  public String transferDate; // required
  public String getNewLicenseDate; // required
  public String mortgageDate; // required
  public double overdueFee; // required
  public int overdueDay; // required
  public double extensionFee; // required
  public int extensionDays; // required
  public String recLoanDate; // required
  public String declaration; // required
  public String houseClerkName; // required
  public String logoutName; // required
  public String assignedName; // required
  public String newCardName; // required
  public String mortgageName; // required
  public int innerOrOut; // required
  public String condition; // required
  public String loanEndDate; // required
  public String handleFlowStartDate; // required
  public String handleFlowEndDate; // required
  public int handleFlowId; // required
  public String innerOrOutName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    PRODUCT_NAME((short)4, "productName"),
    DEPT_NAME((short)5, "deptName"),
    DEPT_ID((short)6, "deptId"),
    PM_USER_NAME((short)7, "pmUserName"),
    PM_USER_ID((short)8, "pmUserId"),
    PAGE((short)9, "page"),
    ROWS((short)10, "rows"),
    USER_IDS((short)11, "userIds"),
    HOUSE_PROPERTY_CARD((short)12, "housePropertyCard"),
    SELLER_NAME((short)13, "sellerName"),
    BUYER_NAME((short)14, "buyerName"),
    NEW_LOAN_BANK((short)15, "newLoanBank"),
    OLD_LOAN_BANK((short)16, "oldLoanBank"),
    PRODUCT_ID((short)17, "productId"),
    LOAN_AMT((short)18, "loanAmt"),
    INTEREST((short)19, "interest"),
    REQUEST_DATE((short)20, "requestDate"),
    LOAN_DATE((short)21, "loanDate"),
    FORECLOSURE_FLOOR_DATE((short)22, "foreclosureFloorDate"),
    GET_OLD_LICENSE_DATE((short)23, "getOldLicenseDate"),
    CANCEL_MORTGAGE_DATE((short)24, "cancelMortgageDate"),
    TRANSFER_DATE((short)25, "transferDate"),
    GET_NEW_LICENSE_DATE((short)26, "getNewLicenseDate"),
    MORTGAGE_DATE((short)27, "mortgageDate"),
    OVERDUE_FEE((short)28, "overdueFee"),
    OVERDUE_DAY((short)29, "overdueDay"),
    EXTENSION_FEE((short)30, "extensionFee"),
    EXTENSION_DAYS((short)31, "extensionDays"),
    REC_LOAN_DATE((short)32, "recLoanDate"),
    DECLARATION((short)33, "declaration"),
    HOUSE_CLERK_NAME((short)34, "houseClerkName"),
    LOGOUT_NAME((short)35, "logoutName"),
    ASSIGNED_NAME((short)36, "assignedName"),
    NEW_CARD_NAME((short)37, "newCardName"),
    MORTGAGE_NAME((short)38, "mortgageName"),
    INNER_OR_OUT((short)39, "innerOrOut"),
    CONDITION((short)40, "condition"),
    LOAN_END_DATE((short)41, "loanEndDate"),
    HANDLE_FLOW_START_DATE((short)42, "handleFlowStartDate"),
    HANDLE_FLOW_END_DATE((short)43, "handleFlowEndDate"),
    HANDLE_FLOW_ID((short)44, "handleFlowId"),
    INNER_OR_OUT_NAME((short)45, "innerOrOutName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 5: // DEPT_NAME
          return DEPT_NAME;
        case 6: // DEPT_ID
          return DEPT_ID;
        case 7: // PM_USER_NAME
          return PM_USER_NAME;
        case 8: // PM_USER_ID
          return PM_USER_ID;
        case 9: // PAGE
          return PAGE;
        case 10: // ROWS
          return ROWS;
        case 11: // USER_IDS
          return USER_IDS;
        case 12: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 13: // SELLER_NAME
          return SELLER_NAME;
        case 14: // BUYER_NAME
          return BUYER_NAME;
        case 15: // NEW_LOAN_BANK
          return NEW_LOAN_BANK;
        case 16: // OLD_LOAN_BANK
          return OLD_LOAN_BANK;
        case 17: // PRODUCT_ID
          return PRODUCT_ID;
        case 18: // LOAN_AMT
          return LOAN_AMT;
        case 19: // INTEREST
          return INTEREST;
        case 20: // REQUEST_DATE
          return REQUEST_DATE;
        case 21: // LOAN_DATE
          return LOAN_DATE;
        case 22: // FORECLOSURE_FLOOR_DATE
          return FORECLOSURE_FLOOR_DATE;
        case 23: // GET_OLD_LICENSE_DATE
          return GET_OLD_LICENSE_DATE;
        case 24: // CANCEL_MORTGAGE_DATE
          return CANCEL_MORTGAGE_DATE;
        case 25: // TRANSFER_DATE
          return TRANSFER_DATE;
        case 26: // GET_NEW_LICENSE_DATE
          return GET_NEW_LICENSE_DATE;
        case 27: // MORTGAGE_DATE
          return MORTGAGE_DATE;
        case 28: // OVERDUE_FEE
          return OVERDUE_FEE;
        case 29: // OVERDUE_DAY
          return OVERDUE_DAY;
        case 30: // EXTENSION_FEE
          return EXTENSION_FEE;
        case 31: // EXTENSION_DAYS
          return EXTENSION_DAYS;
        case 32: // REC_LOAN_DATE
          return REC_LOAN_DATE;
        case 33: // DECLARATION
          return DECLARATION;
        case 34: // HOUSE_CLERK_NAME
          return HOUSE_CLERK_NAME;
        case 35: // LOGOUT_NAME
          return LOGOUT_NAME;
        case 36: // ASSIGNED_NAME
          return ASSIGNED_NAME;
        case 37: // NEW_CARD_NAME
          return NEW_CARD_NAME;
        case 38: // MORTGAGE_NAME
          return MORTGAGE_NAME;
        case 39: // INNER_OR_OUT
          return INNER_OR_OUT;
        case 40: // CONDITION
          return CONDITION;
        case 41: // LOAN_END_DATE
          return LOAN_END_DATE;
        case 42: // HANDLE_FLOW_START_DATE
          return HANDLE_FLOW_START_DATE;
        case 43: // HANDLE_FLOW_END_DATE
          return HANDLE_FLOW_END_DATE;
        case 44: // HANDLE_FLOW_ID
          return HANDLE_FLOW_ID;
        case 45: // INNER_OR_OUT_NAME
          return INNER_OR_OUT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __DEPTID_ISSET_ID = 1;
  private static final int __PMUSERID_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __PRODUCTID_ISSET_ID = 5;
  private static final int __LOANAMT_ISSET_ID = 6;
  private static final int __INTEREST_ISSET_ID = 7;
  private static final int __OVERDUEFEE_ISSET_ID = 8;
  private static final int __OVERDUEDAY_ISSET_ID = 9;
  private static final int __EXTENSIONFEE_ISSET_ID = 10;
  private static final int __EXTENSIONDAYS_ISSET_ID = 11;
  private static final int __INNEROROUT_ISSET_ID = 12;
  private static final int __HANDLEFLOWID_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("deptName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPT_ID, new org.apache.thrift.meta_data.FieldMetaData("deptId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("newLoanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("oldLoanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_AMT, new org.apache.thrift.meta_data.FieldMetaData("loanAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_DATE, new org.apache.thrift.meta_data.FieldMetaData("requestDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_FLOOR_DATE, new org.apache.thrift.meta_data.FieldMetaData("foreclosureFloorDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GET_OLD_LICENSE_DATE, new org.apache.thrift.meta_data.FieldMetaData("getOldLicenseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_MORTGAGE_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelMortgageDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSFER_DATE, new org.apache.thrift.meta_data.FieldMetaData("transferDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GET_NEW_LICENSE_DATE, new org.apache.thrift.meta_data.FieldMetaData("getNewLicenseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_DATE, new org.apache.thrift.meta_data.FieldMetaData("mortgageDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_FEE, new org.apache.thrift.meta_data.FieldMetaData("overdueFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_DAYS, new org.apache.thrift.meta_data.FieldMetaData("extensionDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("recLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DECLARATION, new org.apache.thrift.meta_data.FieldMetaData("declaration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_CLERK_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseClerkName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGOUT_NAME, new org.apache.thrift.meta_data.FieldMetaData("logoutName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSIGNED_NAME, new org.apache.thrift.meta_data.FieldMetaData("assignedName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_CARD_NAME, new org.apache.thrift.meta_data.FieldMetaData("newCardName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("mortgageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER_OR_OUT, new org.apache.thrift.meta_data.FieldMetaData("innerOrOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_FLOW_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("handleFlowStartDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_FLOW_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("handleFlowEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("handleFlowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INNER_OR_OUT_NAME, new org.apache.thrift.meta_data.FieldMetaData("innerOrOutName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TrackRecordReport.class, metaDataMap);
  }

  public TrackRecordReport() {
    this.page = 1;

    this.rows = 10;

  }

  public TrackRecordReport(
    int projectId,
    String projectName,
    String projectNumber,
    String productName,
    String deptName,
    int deptId,
    String pmUserName,
    int pmUserId,
    int page,
    int rows,
    List<Integer> userIds,
    String housePropertyCard,
    String sellerName,
    String buyerName,
    String newLoanBank,
    String oldLoanBank,
    int productId,
    double loanAmt,
    double interest,
    String requestDate,
    String loanDate,
    String foreclosureFloorDate,
    String getOldLicenseDate,
    String cancelMortgageDate,
    String transferDate,
    String getNewLicenseDate,
    String mortgageDate,
    double overdueFee,
    int overdueDay,
    double extensionFee,
    int extensionDays,
    String recLoanDate,
    String declaration,
    String houseClerkName,
    String logoutName,
    String assignedName,
    String newCardName,
    String mortgageName,
    int innerOrOut,
    String condition,
    String loanEndDate,
    String handleFlowStartDate,
    String handleFlowEndDate,
    int handleFlowId,
    String innerOrOutName)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.productName = productName;
    this.deptName = deptName;
    this.deptId = deptId;
    setDeptIdIsSet(true);
    this.pmUserName = pmUserName;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.housePropertyCard = housePropertyCard;
    this.sellerName = sellerName;
    this.buyerName = buyerName;
    this.newLoanBank = newLoanBank;
    this.oldLoanBank = oldLoanBank;
    this.productId = productId;
    setProductIdIsSet(true);
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
    this.requestDate = requestDate;
    this.loanDate = loanDate;
    this.foreclosureFloorDate = foreclosureFloorDate;
    this.getOldLicenseDate = getOldLicenseDate;
    this.cancelMortgageDate = cancelMortgageDate;
    this.transferDate = transferDate;
    this.getNewLicenseDate = getNewLicenseDate;
    this.mortgageDate = mortgageDate;
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    this.recLoanDate = recLoanDate;
    this.declaration = declaration;
    this.houseClerkName = houseClerkName;
    this.logoutName = logoutName;
    this.assignedName = assignedName;
    this.newCardName = newCardName;
    this.mortgageName = mortgageName;
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    this.condition = condition;
    this.loanEndDate = loanEndDate;
    this.handleFlowStartDate = handleFlowStartDate;
    this.handleFlowEndDate = handleFlowEndDate;
    this.handleFlowId = handleFlowId;
    setHandleFlowIdIsSet(true);
    this.innerOrOutName = innerOrOutName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TrackRecordReport(TrackRecordReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetDeptName()) {
      this.deptName = other.deptName;
    }
    this.deptId = other.deptId;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    this.pmUserId = other.pmUserId;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetNewLoanBank()) {
      this.newLoanBank = other.newLoanBank;
    }
    if (other.isSetOldLoanBank()) {
      this.oldLoanBank = other.oldLoanBank;
    }
    this.productId = other.productId;
    this.loanAmt = other.loanAmt;
    this.interest = other.interest;
    if (other.isSetRequestDate()) {
      this.requestDate = other.requestDate;
    }
    if (other.isSetLoanDate()) {
      this.loanDate = other.loanDate;
    }
    if (other.isSetForeclosureFloorDate()) {
      this.foreclosureFloorDate = other.foreclosureFloorDate;
    }
    if (other.isSetGetOldLicenseDate()) {
      this.getOldLicenseDate = other.getOldLicenseDate;
    }
    if (other.isSetCancelMortgageDate()) {
      this.cancelMortgageDate = other.cancelMortgageDate;
    }
    if (other.isSetTransferDate()) {
      this.transferDate = other.transferDate;
    }
    if (other.isSetGetNewLicenseDate()) {
      this.getNewLicenseDate = other.getNewLicenseDate;
    }
    if (other.isSetMortgageDate()) {
      this.mortgageDate = other.mortgageDate;
    }
    this.overdueFee = other.overdueFee;
    this.overdueDay = other.overdueDay;
    this.extensionFee = other.extensionFee;
    this.extensionDays = other.extensionDays;
    if (other.isSetRecLoanDate()) {
      this.recLoanDate = other.recLoanDate;
    }
    if (other.isSetDeclaration()) {
      this.declaration = other.declaration;
    }
    if (other.isSetHouseClerkName()) {
      this.houseClerkName = other.houseClerkName;
    }
    if (other.isSetLogoutName()) {
      this.logoutName = other.logoutName;
    }
    if (other.isSetAssignedName()) {
      this.assignedName = other.assignedName;
    }
    if (other.isSetNewCardName()) {
      this.newCardName = other.newCardName;
    }
    if (other.isSetMortgageName()) {
      this.mortgageName = other.mortgageName;
    }
    this.innerOrOut = other.innerOrOut;
    if (other.isSetCondition()) {
      this.condition = other.condition;
    }
    if (other.isSetLoanEndDate()) {
      this.loanEndDate = other.loanEndDate;
    }
    if (other.isSetHandleFlowStartDate()) {
      this.handleFlowStartDate = other.handleFlowStartDate;
    }
    if (other.isSetHandleFlowEndDate()) {
      this.handleFlowEndDate = other.handleFlowEndDate;
    }
    this.handleFlowId = other.handleFlowId;
    if (other.isSetInnerOrOutName()) {
      this.innerOrOutName = other.innerOrOutName;
    }
  }

  public TrackRecordReport deepCopy() {
    return new TrackRecordReport(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.productName = null;
    this.deptName = null;
    setDeptIdIsSet(false);
    this.deptId = 0;
    this.pmUserName = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.housePropertyCard = null;
    this.sellerName = null;
    this.buyerName = null;
    this.newLoanBank = null;
    this.oldLoanBank = null;
    setProductIdIsSet(false);
    this.productId = 0;
    setLoanAmtIsSet(false);
    this.loanAmt = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    this.requestDate = null;
    this.loanDate = null;
    this.foreclosureFloorDate = null;
    this.getOldLicenseDate = null;
    this.cancelMortgageDate = null;
    this.transferDate = null;
    this.getNewLicenseDate = null;
    this.mortgageDate = null;
    setOverdueFeeIsSet(false);
    this.overdueFee = 0.0;
    setOverdueDayIsSet(false);
    this.overdueDay = 0;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
    setExtensionDaysIsSet(false);
    this.extensionDays = 0;
    this.recLoanDate = null;
    this.declaration = null;
    this.houseClerkName = null;
    this.logoutName = null;
    this.assignedName = null;
    this.newCardName = null;
    this.mortgageName = null;
    setInnerOrOutIsSet(false);
    this.innerOrOut = 0;
    this.condition = null;
    this.loanEndDate = null;
    this.handleFlowStartDate = null;
    this.handleFlowEndDate = null;
    setHandleFlowIdIsSet(false);
    this.handleFlowId = 0;
    this.innerOrOutName = null;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public TrackRecordReport setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public TrackRecordReport setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public TrackRecordReport setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public TrackRecordReport setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getDeptName() {
    return this.deptName;
  }

  public TrackRecordReport setDeptName(String deptName) {
    this.deptName = deptName;
    return this;
  }

  public void unsetDeptName() {
    this.deptName = null;
  }

  /** Returns true if field deptName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptName() {
    return this.deptName != null;
  }

  public void setDeptNameIsSet(boolean value) {
    if (!value) {
      this.deptName = null;
    }
  }

  public int getDeptId() {
    return this.deptId;
  }

  public TrackRecordReport setDeptId(int deptId) {
    this.deptId = deptId;
    setDeptIdIsSet(true);
    return this;
  }

  public void unsetDeptId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPTID_ISSET_ID);
  }

  /** Returns true if field deptId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPTID_ISSET_ID);
  }

  public void setDeptIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPTID_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public TrackRecordReport setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public TrackRecordReport setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public TrackRecordReport setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public TrackRecordReport setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public TrackRecordReport setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public TrackRecordReport setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public TrackRecordReport setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public TrackRecordReport setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getNewLoanBank() {
    return this.newLoanBank;
  }

  public TrackRecordReport setNewLoanBank(String newLoanBank) {
    this.newLoanBank = newLoanBank;
    return this;
  }

  public void unsetNewLoanBank() {
    this.newLoanBank = null;
  }

  /** Returns true if field newLoanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanBank() {
    return this.newLoanBank != null;
  }

  public void setNewLoanBankIsSet(boolean value) {
    if (!value) {
      this.newLoanBank = null;
    }
  }

  public String getOldLoanBank() {
    return this.oldLoanBank;
  }

  public TrackRecordReport setOldLoanBank(String oldLoanBank) {
    this.oldLoanBank = oldLoanBank;
    return this;
  }

  public void unsetOldLoanBank() {
    this.oldLoanBank = null;
  }

  /** Returns true if field oldLoanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanBank() {
    return this.oldLoanBank != null;
  }

  public void setOldLoanBankIsSet(boolean value) {
    if (!value) {
      this.oldLoanBank = null;
    }
  }

  public int getProductId() {
    return this.productId;
  }

  public TrackRecordReport setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public double getLoanAmt() {
    return this.loanAmt;
  }

  public TrackRecordReport setLoanAmt(double loanAmt) {
    this.loanAmt = loanAmt;
    setLoanAmtIsSet(true);
    return this;
  }

  public void unsetLoanAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  /** Returns true if field loanAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMT_ISSET_ID);
  }

  public void setLoanAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMT_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public TrackRecordReport setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public String getRequestDate() {
    return this.requestDate;
  }

  public TrackRecordReport setRequestDate(String requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  public void unsetRequestDate() {
    this.requestDate = null;
  }

  /** Returns true if field requestDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDate() {
    return this.requestDate != null;
  }

  public void setRequestDateIsSet(boolean value) {
    if (!value) {
      this.requestDate = null;
    }
  }

  public String getLoanDate() {
    return this.loanDate;
  }

  public TrackRecordReport setLoanDate(String loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  public void unsetLoanDate() {
    this.loanDate = null;
  }

  /** Returns true if field loanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDate() {
    return this.loanDate != null;
  }

  public void setLoanDateIsSet(boolean value) {
    if (!value) {
      this.loanDate = null;
    }
  }

  public String getForeclosureFloorDate() {
    return this.foreclosureFloorDate;
  }

  public TrackRecordReport setForeclosureFloorDate(String foreclosureFloorDate) {
    this.foreclosureFloorDate = foreclosureFloorDate;
    return this;
  }

  public void unsetForeclosureFloorDate() {
    this.foreclosureFloorDate = null;
  }

  /** Returns true if field foreclosureFloorDate is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureFloorDate() {
    return this.foreclosureFloorDate != null;
  }

  public void setForeclosureFloorDateIsSet(boolean value) {
    if (!value) {
      this.foreclosureFloorDate = null;
    }
  }

  public String getGetOldLicenseDate() {
    return this.getOldLicenseDate;
  }

  public TrackRecordReport setGetOldLicenseDate(String getOldLicenseDate) {
    this.getOldLicenseDate = getOldLicenseDate;
    return this;
  }

  public void unsetGetOldLicenseDate() {
    this.getOldLicenseDate = null;
  }

  /** Returns true if field getOldLicenseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGetOldLicenseDate() {
    return this.getOldLicenseDate != null;
  }

  public void setGetOldLicenseDateIsSet(boolean value) {
    if (!value) {
      this.getOldLicenseDate = null;
    }
  }

  public String getCancelMortgageDate() {
    return this.cancelMortgageDate;
  }

  public TrackRecordReport setCancelMortgageDate(String cancelMortgageDate) {
    this.cancelMortgageDate = cancelMortgageDate;
    return this;
  }

  public void unsetCancelMortgageDate() {
    this.cancelMortgageDate = null;
  }

  /** Returns true if field cancelMortgageDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelMortgageDate() {
    return this.cancelMortgageDate != null;
  }

  public void setCancelMortgageDateIsSet(boolean value) {
    if (!value) {
      this.cancelMortgageDate = null;
    }
  }

  public String getTransferDate() {
    return this.transferDate;
  }

  public TrackRecordReport setTransferDate(String transferDate) {
    this.transferDate = transferDate;
    return this;
  }

  public void unsetTransferDate() {
    this.transferDate = null;
  }

  /** Returns true if field transferDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferDate() {
    return this.transferDate != null;
  }

  public void setTransferDateIsSet(boolean value) {
    if (!value) {
      this.transferDate = null;
    }
  }

  public String getGetNewLicenseDate() {
    return this.getNewLicenseDate;
  }

  public TrackRecordReport setGetNewLicenseDate(String getNewLicenseDate) {
    this.getNewLicenseDate = getNewLicenseDate;
    return this;
  }

  public void unsetGetNewLicenseDate() {
    this.getNewLicenseDate = null;
  }

  /** Returns true if field getNewLicenseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGetNewLicenseDate() {
    return this.getNewLicenseDate != null;
  }

  public void setGetNewLicenseDateIsSet(boolean value) {
    if (!value) {
      this.getNewLicenseDate = null;
    }
  }

  public String getMortgageDate() {
    return this.mortgageDate;
  }

  public TrackRecordReport setMortgageDate(String mortgageDate) {
    this.mortgageDate = mortgageDate;
    return this;
  }

  public void unsetMortgageDate() {
    this.mortgageDate = null;
  }

  /** Returns true if field mortgageDate is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageDate() {
    return this.mortgageDate != null;
  }

  public void setMortgageDateIsSet(boolean value) {
    if (!value) {
      this.mortgageDate = null;
    }
  }

  public double getOverdueFee() {
    return this.overdueFee;
  }

  public TrackRecordReport setOverdueFee(double overdueFee) {
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    return this;
  }

  public void unsetOverdueFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  /** Returns true if field overdueFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  public void setOverdueFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID, value);
  }

  public int getOverdueDay() {
    return this.overdueDay;
  }

  public TrackRecordReport setOverdueDay(int overdueDay) {
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    return this;
  }

  public void unsetOverdueDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  /** Returns true if field overdueDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  public void setOverdueDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID, value);
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public TrackRecordReport setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID, value);
  }

  public int getExtensionDays() {
    return this.extensionDays;
  }

  public TrackRecordReport setExtensionDays(int extensionDays) {
    this.extensionDays = extensionDays;
    setExtensionDaysIsSet(true);
    return this;
  }

  public void unsetExtensionDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID);
  }

  /** Returns true if field extensionDays is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionDays() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID);
  }

  public void setExtensionDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONDAYS_ISSET_ID, value);
  }

  public String getRecLoanDate() {
    return this.recLoanDate;
  }

  public TrackRecordReport setRecLoanDate(String recLoanDate) {
    this.recLoanDate = recLoanDate;
    return this;
  }

  public void unsetRecLoanDate() {
    this.recLoanDate = null;
  }

  /** Returns true if field recLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecLoanDate() {
    return this.recLoanDate != null;
  }

  public void setRecLoanDateIsSet(boolean value) {
    if (!value) {
      this.recLoanDate = null;
    }
  }

  public String getDeclaration() {
    return this.declaration;
  }

  public TrackRecordReport setDeclaration(String declaration) {
    this.declaration = declaration;
    return this;
  }

  public void unsetDeclaration() {
    this.declaration = null;
  }

  /** Returns true if field declaration is set (has been assigned a value) and false otherwise */
  public boolean isSetDeclaration() {
    return this.declaration != null;
  }

  public void setDeclarationIsSet(boolean value) {
    if (!value) {
      this.declaration = null;
    }
  }

  public String getHouseClerkName() {
    return this.houseClerkName;
  }

  public TrackRecordReport setHouseClerkName(String houseClerkName) {
    this.houseClerkName = houseClerkName;
    return this;
  }

  public void unsetHouseClerkName() {
    this.houseClerkName = null;
  }

  /** Returns true if field houseClerkName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseClerkName() {
    return this.houseClerkName != null;
  }

  public void setHouseClerkNameIsSet(boolean value) {
    if (!value) {
      this.houseClerkName = null;
    }
  }

  public String getLogoutName() {
    return this.logoutName;
  }

  public TrackRecordReport setLogoutName(String logoutName) {
    this.logoutName = logoutName;
    return this;
  }

  public void unsetLogoutName() {
    this.logoutName = null;
  }

  /** Returns true if field logoutName is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoutName() {
    return this.logoutName != null;
  }

  public void setLogoutNameIsSet(boolean value) {
    if (!value) {
      this.logoutName = null;
    }
  }

  public String getAssignedName() {
    return this.assignedName;
  }

  public TrackRecordReport setAssignedName(String assignedName) {
    this.assignedName = assignedName;
    return this;
  }

  public void unsetAssignedName() {
    this.assignedName = null;
  }

  /** Returns true if field assignedName is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignedName() {
    return this.assignedName != null;
  }

  public void setAssignedNameIsSet(boolean value) {
    if (!value) {
      this.assignedName = null;
    }
  }

  public String getNewCardName() {
    return this.newCardName;
  }

  public TrackRecordReport setNewCardName(String newCardName) {
    this.newCardName = newCardName;
    return this;
  }

  public void unsetNewCardName() {
    this.newCardName = null;
  }

  /** Returns true if field newCardName is set (has been assigned a value) and false otherwise */
  public boolean isSetNewCardName() {
    return this.newCardName != null;
  }

  public void setNewCardNameIsSet(boolean value) {
    if (!value) {
      this.newCardName = null;
    }
  }

  public String getMortgageName() {
    return this.mortgageName;
  }

  public TrackRecordReport setMortgageName(String mortgageName) {
    this.mortgageName = mortgageName;
    return this;
  }

  public void unsetMortgageName() {
    this.mortgageName = null;
  }

  /** Returns true if field mortgageName is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageName() {
    return this.mortgageName != null;
  }

  public void setMortgageNameIsSet(boolean value) {
    if (!value) {
      this.mortgageName = null;
    }
  }

  public int getInnerOrOut() {
    return this.innerOrOut;
  }

  public TrackRecordReport setInnerOrOut(int innerOrOut) {
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    return this;
  }

  public void unsetInnerOrOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  /** Returns true if field innerOrOut is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOut() {
    return EncodingUtils.testBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  public void setInnerOrOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INNEROROUT_ISSET_ID, value);
  }

  public String getCondition() {
    return this.condition;
  }

  public TrackRecordReport setCondition(String condition) {
    this.condition = condition;
    return this;
  }

  public void unsetCondition() {
    this.condition = null;
  }

  /** Returns true if field condition is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition() {
    return this.condition != null;
  }

  public void setConditionIsSet(boolean value) {
    if (!value) {
      this.condition = null;
    }
  }

  public String getLoanEndDate() {
    return this.loanEndDate;
  }

  public TrackRecordReport setLoanEndDate(String loanEndDate) {
    this.loanEndDate = loanEndDate;
    return this;
  }

  public void unsetLoanEndDate() {
    this.loanEndDate = null;
  }

  /** Returns true if field loanEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanEndDate() {
    return this.loanEndDate != null;
  }

  public void setLoanEndDateIsSet(boolean value) {
    if (!value) {
      this.loanEndDate = null;
    }
  }

  public String getHandleFlowStartDate() {
    return this.handleFlowStartDate;
  }

  public TrackRecordReport setHandleFlowStartDate(String handleFlowStartDate) {
    this.handleFlowStartDate = handleFlowStartDate;
    return this;
  }

  public void unsetHandleFlowStartDate() {
    this.handleFlowStartDate = null;
  }

  /** Returns true if field handleFlowStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleFlowStartDate() {
    return this.handleFlowStartDate != null;
  }

  public void setHandleFlowStartDateIsSet(boolean value) {
    if (!value) {
      this.handleFlowStartDate = null;
    }
  }

  public String getHandleFlowEndDate() {
    return this.handleFlowEndDate;
  }

  public TrackRecordReport setHandleFlowEndDate(String handleFlowEndDate) {
    this.handleFlowEndDate = handleFlowEndDate;
    return this;
  }

  public void unsetHandleFlowEndDate() {
    this.handleFlowEndDate = null;
  }

  /** Returns true if field handleFlowEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleFlowEndDate() {
    return this.handleFlowEndDate != null;
  }

  public void setHandleFlowEndDateIsSet(boolean value) {
    if (!value) {
      this.handleFlowEndDate = null;
    }
  }

  public int getHandleFlowId() {
    return this.handleFlowId;
  }

  public TrackRecordReport setHandleFlowId(int handleFlowId) {
    this.handleFlowId = handleFlowId;
    setHandleFlowIdIsSet(true);
    return this;
  }

  public void unsetHandleFlowId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID);
  }

  /** Returns true if field handleFlowId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleFlowId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID);
  }

  public void setHandleFlowIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID, value);
  }

  public String getInnerOrOutName() {
    return this.innerOrOutName;
  }

  public TrackRecordReport setInnerOrOutName(String innerOrOutName) {
    this.innerOrOutName = innerOrOutName;
    return this;
  }

  public void unsetInnerOrOutName() {
    this.innerOrOutName = null;
  }

  /** Returns true if field innerOrOutName is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOutName() {
    return this.innerOrOutName != null;
  }

  public void setInnerOrOutNameIsSet(boolean value) {
    if (!value) {
      this.innerOrOutName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case DEPT_NAME:
      if (value == null) {
        unsetDeptName();
      } else {
        setDeptName((String)value);
      }
      break;

    case DEPT_ID:
      if (value == null) {
        unsetDeptId();
      } else {
        setDeptId((Integer)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case NEW_LOAN_BANK:
      if (value == null) {
        unsetNewLoanBank();
      } else {
        setNewLoanBank((String)value);
      }
      break;

    case OLD_LOAN_BANK:
      if (value == null) {
        unsetOldLoanBank();
      } else {
        setOldLoanBank((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case LOAN_AMT:
      if (value == null) {
        unsetLoanAmt();
      } else {
        setLoanAmt((Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case REQUEST_DATE:
      if (value == null) {
        unsetRequestDate();
      } else {
        setRequestDate((String)value);
      }
      break;

    case LOAN_DATE:
      if (value == null) {
        unsetLoanDate();
      } else {
        setLoanDate((String)value);
      }
      break;

    case FORECLOSURE_FLOOR_DATE:
      if (value == null) {
        unsetForeclosureFloorDate();
      } else {
        setForeclosureFloorDate((String)value);
      }
      break;

    case GET_OLD_LICENSE_DATE:
      if (value == null) {
        unsetGetOldLicenseDate();
      } else {
        setGetOldLicenseDate((String)value);
      }
      break;

    case CANCEL_MORTGAGE_DATE:
      if (value == null) {
        unsetCancelMortgageDate();
      } else {
        setCancelMortgageDate((String)value);
      }
      break;

    case TRANSFER_DATE:
      if (value == null) {
        unsetTransferDate();
      } else {
        setTransferDate((String)value);
      }
      break;

    case GET_NEW_LICENSE_DATE:
      if (value == null) {
        unsetGetNewLicenseDate();
      } else {
        setGetNewLicenseDate((String)value);
      }
      break;

    case MORTGAGE_DATE:
      if (value == null) {
        unsetMortgageDate();
      } else {
        setMortgageDate((String)value);
      }
      break;

    case OVERDUE_FEE:
      if (value == null) {
        unsetOverdueFee();
      } else {
        setOverdueFee((Double)value);
      }
      break;

    case OVERDUE_DAY:
      if (value == null) {
        unsetOverdueDay();
      } else {
        setOverdueDay((Integer)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    case EXTENSION_DAYS:
      if (value == null) {
        unsetExtensionDays();
      } else {
        setExtensionDays((Integer)value);
      }
      break;

    case REC_LOAN_DATE:
      if (value == null) {
        unsetRecLoanDate();
      } else {
        setRecLoanDate((String)value);
      }
      break;

    case DECLARATION:
      if (value == null) {
        unsetDeclaration();
      } else {
        setDeclaration((String)value);
      }
      break;

    case HOUSE_CLERK_NAME:
      if (value == null) {
        unsetHouseClerkName();
      } else {
        setHouseClerkName((String)value);
      }
      break;

    case LOGOUT_NAME:
      if (value == null) {
        unsetLogoutName();
      } else {
        setLogoutName((String)value);
      }
      break;

    case ASSIGNED_NAME:
      if (value == null) {
        unsetAssignedName();
      } else {
        setAssignedName((String)value);
      }
      break;

    case NEW_CARD_NAME:
      if (value == null) {
        unsetNewCardName();
      } else {
        setNewCardName((String)value);
      }
      break;

    case MORTGAGE_NAME:
      if (value == null) {
        unsetMortgageName();
      } else {
        setMortgageName((String)value);
      }
      break;

    case INNER_OR_OUT:
      if (value == null) {
        unsetInnerOrOut();
      } else {
        setInnerOrOut((Integer)value);
      }
      break;

    case CONDITION:
      if (value == null) {
        unsetCondition();
      } else {
        setCondition((String)value);
      }
      break;

    case LOAN_END_DATE:
      if (value == null) {
        unsetLoanEndDate();
      } else {
        setLoanEndDate((String)value);
      }
      break;

    case HANDLE_FLOW_START_DATE:
      if (value == null) {
        unsetHandleFlowStartDate();
      } else {
        setHandleFlowStartDate((String)value);
      }
      break;

    case HANDLE_FLOW_END_DATE:
      if (value == null) {
        unsetHandleFlowEndDate();
      } else {
        setHandleFlowEndDate((String)value);
      }
      break;

    case HANDLE_FLOW_ID:
      if (value == null) {
        unsetHandleFlowId();
      } else {
        setHandleFlowId((Integer)value);
      }
      break;

    case INNER_OR_OUT_NAME:
      if (value == null) {
        unsetInnerOrOutName();
      } else {
        setInnerOrOutName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PRODUCT_NAME:
      return getProductName();

    case DEPT_NAME:
      return getDeptName();

    case DEPT_ID:
      return Integer.valueOf(getDeptId());

    case PM_USER_NAME:
      return getPmUserName();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case SELLER_NAME:
      return getSellerName();

    case BUYER_NAME:
      return getBuyerName();

    case NEW_LOAN_BANK:
      return getNewLoanBank();

    case OLD_LOAN_BANK:
      return getOldLoanBank();

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case LOAN_AMT:
      return Double.valueOf(getLoanAmt());

    case INTEREST:
      return Double.valueOf(getInterest());

    case REQUEST_DATE:
      return getRequestDate();

    case LOAN_DATE:
      return getLoanDate();

    case FORECLOSURE_FLOOR_DATE:
      return getForeclosureFloorDate();

    case GET_OLD_LICENSE_DATE:
      return getGetOldLicenseDate();

    case CANCEL_MORTGAGE_DATE:
      return getCancelMortgageDate();

    case TRANSFER_DATE:
      return getTransferDate();

    case GET_NEW_LICENSE_DATE:
      return getGetNewLicenseDate();

    case MORTGAGE_DATE:
      return getMortgageDate();

    case OVERDUE_FEE:
      return Double.valueOf(getOverdueFee());

    case OVERDUE_DAY:
      return Integer.valueOf(getOverdueDay());

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    case EXTENSION_DAYS:
      return Integer.valueOf(getExtensionDays());

    case REC_LOAN_DATE:
      return getRecLoanDate();

    case DECLARATION:
      return getDeclaration();

    case HOUSE_CLERK_NAME:
      return getHouseClerkName();

    case LOGOUT_NAME:
      return getLogoutName();

    case ASSIGNED_NAME:
      return getAssignedName();

    case NEW_CARD_NAME:
      return getNewCardName();

    case MORTGAGE_NAME:
      return getMortgageName();

    case INNER_OR_OUT:
      return Integer.valueOf(getInnerOrOut());

    case CONDITION:
      return getCondition();

    case LOAN_END_DATE:
      return getLoanEndDate();

    case HANDLE_FLOW_START_DATE:
      return getHandleFlowStartDate();

    case HANDLE_FLOW_END_DATE:
      return getHandleFlowEndDate();

    case HANDLE_FLOW_ID:
      return Integer.valueOf(getHandleFlowId());

    case INNER_OR_OUT_NAME:
      return getInnerOrOutName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PRODUCT_NAME:
      return isSetProductName();
    case DEPT_NAME:
      return isSetDeptName();
    case DEPT_ID:
      return isSetDeptId();
    case PM_USER_NAME:
      return isSetPmUserName();
    case PM_USER_ID:
      return isSetPmUserId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case SELLER_NAME:
      return isSetSellerName();
    case BUYER_NAME:
      return isSetBuyerName();
    case NEW_LOAN_BANK:
      return isSetNewLoanBank();
    case OLD_LOAN_BANK:
      return isSetOldLoanBank();
    case PRODUCT_ID:
      return isSetProductId();
    case LOAN_AMT:
      return isSetLoanAmt();
    case INTEREST:
      return isSetInterest();
    case REQUEST_DATE:
      return isSetRequestDate();
    case LOAN_DATE:
      return isSetLoanDate();
    case FORECLOSURE_FLOOR_DATE:
      return isSetForeclosureFloorDate();
    case GET_OLD_LICENSE_DATE:
      return isSetGetOldLicenseDate();
    case CANCEL_MORTGAGE_DATE:
      return isSetCancelMortgageDate();
    case TRANSFER_DATE:
      return isSetTransferDate();
    case GET_NEW_LICENSE_DATE:
      return isSetGetNewLicenseDate();
    case MORTGAGE_DATE:
      return isSetMortgageDate();
    case OVERDUE_FEE:
      return isSetOverdueFee();
    case OVERDUE_DAY:
      return isSetOverdueDay();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    case EXTENSION_DAYS:
      return isSetExtensionDays();
    case REC_LOAN_DATE:
      return isSetRecLoanDate();
    case DECLARATION:
      return isSetDeclaration();
    case HOUSE_CLERK_NAME:
      return isSetHouseClerkName();
    case LOGOUT_NAME:
      return isSetLogoutName();
    case ASSIGNED_NAME:
      return isSetAssignedName();
    case NEW_CARD_NAME:
      return isSetNewCardName();
    case MORTGAGE_NAME:
      return isSetMortgageName();
    case INNER_OR_OUT:
      return isSetInnerOrOut();
    case CONDITION:
      return isSetCondition();
    case LOAN_END_DATE:
      return isSetLoanEndDate();
    case HANDLE_FLOW_START_DATE:
      return isSetHandleFlowStartDate();
    case HANDLE_FLOW_END_DATE:
      return isSetHandleFlowEndDate();
    case HANDLE_FLOW_ID:
      return isSetHandleFlowId();
    case INNER_OR_OUT_NAME:
      return isSetInnerOrOutName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TrackRecordReport)
      return this.equals((TrackRecordReport)that);
    return false;
  }

  public boolean equals(TrackRecordReport that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_deptName = true && this.isSetDeptName();
    boolean that_present_deptName = true && that.isSetDeptName();
    if (this_present_deptName || that_present_deptName) {
      if (!(this_present_deptName && that_present_deptName))
        return false;
      if (!this.deptName.equals(that.deptName))
        return false;
    }

    boolean this_present_deptId = true;
    boolean that_present_deptId = true;
    if (this_present_deptId || that_present_deptId) {
      if (!(this_present_deptId && that_present_deptId))
        return false;
      if (this.deptId != that.deptId)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_newLoanBank = true && this.isSetNewLoanBank();
    boolean that_present_newLoanBank = true && that.isSetNewLoanBank();
    if (this_present_newLoanBank || that_present_newLoanBank) {
      if (!(this_present_newLoanBank && that_present_newLoanBank))
        return false;
      if (!this.newLoanBank.equals(that.newLoanBank))
        return false;
    }

    boolean this_present_oldLoanBank = true && this.isSetOldLoanBank();
    boolean that_present_oldLoanBank = true && that.isSetOldLoanBank();
    if (this_present_oldLoanBank || that_present_oldLoanBank) {
      if (!(this_present_oldLoanBank && that_present_oldLoanBank))
        return false;
      if (!this.oldLoanBank.equals(that.oldLoanBank))
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_loanAmt = true;
    boolean that_present_loanAmt = true;
    if (this_present_loanAmt || that_present_loanAmt) {
      if (!(this_present_loanAmt && that_present_loanAmt))
        return false;
      if (this.loanAmt != that.loanAmt)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_requestDate = true && this.isSetRequestDate();
    boolean that_present_requestDate = true && that.isSetRequestDate();
    if (this_present_requestDate || that_present_requestDate) {
      if (!(this_present_requestDate && that_present_requestDate))
        return false;
      if (!this.requestDate.equals(that.requestDate))
        return false;
    }

    boolean this_present_loanDate = true && this.isSetLoanDate();
    boolean that_present_loanDate = true && that.isSetLoanDate();
    if (this_present_loanDate || that_present_loanDate) {
      if (!(this_present_loanDate && that_present_loanDate))
        return false;
      if (!this.loanDate.equals(that.loanDate))
        return false;
    }

    boolean this_present_foreclosureFloorDate = true && this.isSetForeclosureFloorDate();
    boolean that_present_foreclosureFloorDate = true && that.isSetForeclosureFloorDate();
    if (this_present_foreclosureFloorDate || that_present_foreclosureFloorDate) {
      if (!(this_present_foreclosureFloorDate && that_present_foreclosureFloorDate))
        return false;
      if (!this.foreclosureFloorDate.equals(that.foreclosureFloorDate))
        return false;
    }

    boolean this_present_getOldLicenseDate = true && this.isSetGetOldLicenseDate();
    boolean that_present_getOldLicenseDate = true && that.isSetGetOldLicenseDate();
    if (this_present_getOldLicenseDate || that_present_getOldLicenseDate) {
      if (!(this_present_getOldLicenseDate && that_present_getOldLicenseDate))
        return false;
      if (!this.getOldLicenseDate.equals(that.getOldLicenseDate))
        return false;
    }

    boolean this_present_cancelMortgageDate = true && this.isSetCancelMortgageDate();
    boolean that_present_cancelMortgageDate = true && that.isSetCancelMortgageDate();
    if (this_present_cancelMortgageDate || that_present_cancelMortgageDate) {
      if (!(this_present_cancelMortgageDate && that_present_cancelMortgageDate))
        return false;
      if (!this.cancelMortgageDate.equals(that.cancelMortgageDate))
        return false;
    }

    boolean this_present_transferDate = true && this.isSetTransferDate();
    boolean that_present_transferDate = true && that.isSetTransferDate();
    if (this_present_transferDate || that_present_transferDate) {
      if (!(this_present_transferDate && that_present_transferDate))
        return false;
      if (!this.transferDate.equals(that.transferDate))
        return false;
    }

    boolean this_present_getNewLicenseDate = true && this.isSetGetNewLicenseDate();
    boolean that_present_getNewLicenseDate = true && that.isSetGetNewLicenseDate();
    if (this_present_getNewLicenseDate || that_present_getNewLicenseDate) {
      if (!(this_present_getNewLicenseDate && that_present_getNewLicenseDate))
        return false;
      if (!this.getNewLicenseDate.equals(that.getNewLicenseDate))
        return false;
    }

    boolean this_present_mortgageDate = true && this.isSetMortgageDate();
    boolean that_present_mortgageDate = true && that.isSetMortgageDate();
    if (this_present_mortgageDate || that_present_mortgageDate) {
      if (!(this_present_mortgageDate && that_present_mortgageDate))
        return false;
      if (!this.mortgageDate.equals(that.mortgageDate))
        return false;
    }

    boolean this_present_overdueFee = true;
    boolean that_present_overdueFee = true;
    if (this_present_overdueFee || that_present_overdueFee) {
      if (!(this_present_overdueFee && that_present_overdueFee))
        return false;
      if (this.overdueFee != that.overdueFee)
        return false;
    }

    boolean this_present_overdueDay = true;
    boolean that_present_overdueDay = true;
    if (this_present_overdueDay || that_present_overdueDay) {
      if (!(this_present_overdueDay && that_present_overdueDay))
        return false;
      if (this.overdueDay != that.overdueDay)
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    boolean this_present_extensionDays = true;
    boolean that_present_extensionDays = true;
    if (this_present_extensionDays || that_present_extensionDays) {
      if (!(this_present_extensionDays && that_present_extensionDays))
        return false;
      if (this.extensionDays != that.extensionDays)
        return false;
    }

    boolean this_present_recLoanDate = true && this.isSetRecLoanDate();
    boolean that_present_recLoanDate = true && that.isSetRecLoanDate();
    if (this_present_recLoanDate || that_present_recLoanDate) {
      if (!(this_present_recLoanDate && that_present_recLoanDate))
        return false;
      if (!this.recLoanDate.equals(that.recLoanDate))
        return false;
    }

    boolean this_present_declaration = true && this.isSetDeclaration();
    boolean that_present_declaration = true && that.isSetDeclaration();
    if (this_present_declaration || that_present_declaration) {
      if (!(this_present_declaration && that_present_declaration))
        return false;
      if (!this.declaration.equals(that.declaration))
        return false;
    }

    boolean this_present_houseClerkName = true && this.isSetHouseClerkName();
    boolean that_present_houseClerkName = true && that.isSetHouseClerkName();
    if (this_present_houseClerkName || that_present_houseClerkName) {
      if (!(this_present_houseClerkName && that_present_houseClerkName))
        return false;
      if (!this.houseClerkName.equals(that.houseClerkName))
        return false;
    }

    boolean this_present_logoutName = true && this.isSetLogoutName();
    boolean that_present_logoutName = true && that.isSetLogoutName();
    if (this_present_logoutName || that_present_logoutName) {
      if (!(this_present_logoutName && that_present_logoutName))
        return false;
      if (!this.logoutName.equals(that.logoutName))
        return false;
    }

    boolean this_present_assignedName = true && this.isSetAssignedName();
    boolean that_present_assignedName = true && that.isSetAssignedName();
    if (this_present_assignedName || that_present_assignedName) {
      if (!(this_present_assignedName && that_present_assignedName))
        return false;
      if (!this.assignedName.equals(that.assignedName))
        return false;
    }

    boolean this_present_newCardName = true && this.isSetNewCardName();
    boolean that_present_newCardName = true && that.isSetNewCardName();
    if (this_present_newCardName || that_present_newCardName) {
      if (!(this_present_newCardName && that_present_newCardName))
        return false;
      if (!this.newCardName.equals(that.newCardName))
        return false;
    }

    boolean this_present_mortgageName = true && this.isSetMortgageName();
    boolean that_present_mortgageName = true && that.isSetMortgageName();
    if (this_present_mortgageName || that_present_mortgageName) {
      if (!(this_present_mortgageName && that_present_mortgageName))
        return false;
      if (!this.mortgageName.equals(that.mortgageName))
        return false;
    }

    boolean this_present_innerOrOut = true;
    boolean that_present_innerOrOut = true;
    if (this_present_innerOrOut || that_present_innerOrOut) {
      if (!(this_present_innerOrOut && that_present_innerOrOut))
        return false;
      if (this.innerOrOut != that.innerOrOut)
        return false;
    }

    boolean this_present_condition = true && this.isSetCondition();
    boolean that_present_condition = true && that.isSetCondition();
    if (this_present_condition || that_present_condition) {
      if (!(this_present_condition && that_present_condition))
        return false;
      if (!this.condition.equals(that.condition))
        return false;
    }

    boolean this_present_loanEndDate = true && this.isSetLoanEndDate();
    boolean that_present_loanEndDate = true && that.isSetLoanEndDate();
    if (this_present_loanEndDate || that_present_loanEndDate) {
      if (!(this_present_loanEndDate && that_present_loanEndDate))
        return false;
      if (!this.loanEndDate.equals(that.loanEndDate))
        return false;
    }

    boolean this_present_handleFlowStartDate = true && this.isSetHandleFlowStartDate();
    boolean that_present_handleFlowStartDate = true && that.isSetHandleFlowStartDate();
    if (this_present_handleFlowStartDate || that_present_handleFlowStartDate) {
      if (!(this_present_handleFlowStartDate && that_present_handleFlowStartDate))
        return false;
      if (!this.handleFlowStartDate.equals(that.handleFlowStartDate))
        return false;
    }

    boolean this_present_handleFlowEndDate = true && this.isSetHandleFlowEndDate();
    boolean that_present_handleFlowEndDate = true && that.isSetHandleFlowEndDate();
    if (this_present_handleFlowEndDate || that_present_handleFlowEndDate) {
      if (!(this_present_handleFlowEndDate && that_present_handleFlowEndDate))
        return false;
      if (!this.handleFlowEndDate.equals(that.handleFlowEndDate))
        return false;
    }

    boolean this_present_handleFlowId = true;
    boolean that_present_handleFlowId = true;
    if (this_present_handleFlowId || that_present_handleFlowId) {
      if (!(this_present_handleFlowId && that_present_handleFlowId))
        return false;
      if (this.handleFlowId != that.handleFlowId)
        return false;
    }

    boolean this_present_innerOrOutName = true && this.isSetInnerOrOutName();
    boolean that_present_innerOrOutName = true && that.isSetInnerOrOutName();
    if (this_present_innerOrOutName || that_present_innerOrOutName) {
      if (!(this_present_innerOrOutName && that_present_innerOrOutName))
        return false;
      if (!this.innerOrOutName.equals(that.innerOrOutName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_deptName = true && (isSetDeptName());
    list.add(present_deptName);
    if (present_deptName)
      list.add(deptName);

    boolean present_deptId = true;
    list.add(present_deptId);
    if (present_deptId)
      list.add(deptId);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_newLoanBank = true && (isSetNewLoanBank());
    list.add(present_newLoanBank);
    if (present_newLoanBank)
      list.add(newLoanBank);

    boolean present_oldLoanBank = true && (isSetOldLoanBank());
    list.add(present_oldLoanBank);
    if (present_oldLoanBank)
      list.add(oldLoanBank);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_loanAmt = true;
    list.add(present_loanAmt);
    if (present_loanAmt)
      list.add(loanAmt);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_requestDate = true && (isSetRequestDate());
    list.add(present_requestDate);
    if (present_requestDate)
      list.add(requestDate);

    boolean present_loanDate = true && (isSetLoanDate());
    list.add(present_loanDate);
    if (present_loanDate)
      list.add(loanDate);

    boolean present_foreclosureFloorDate = true && (isSetForeclosureFloorDate());
    list.add(present_foreclosureFloorDate);
    if (present_foreclosureFloorDate)
      list.add(foreclosureFloorDate);

    boolean present_getOldLicenseDate = true && (isSetGetOldLicenseDate());
    list.add(present_getOldLicenseDate);
    if (present_getOldLicenseDate)
      list.add(getOldLicenseDate);

    boolean present_cancelMortgageDate = true && (isSetCancelMortgageDate());
    list.add(present_cancelMortgageDate);
    if (present_cancelMortgageDate)
      list.add(cancelMortgageDate);

    boolean present_transferDate = true && (isSetTransferDate());
    list.add(present_transferDate);
    if (present_transferDate)
      list.add(transferDate);

    boolean present_getNewLicenseDate = true && (isSetGetNewLicenseDate());
    list.add(present_getNewLicenseDate);
    if (present_getNewLicenseDate)
      list.add(getNewLicenseDate);

    boolean present_mortgageDate = true && (isSetMortgageDate());
    list.add(present_mortgageDate);
    if (present_mortgageDate)
      list.add(mortgageDate);

    boolean present_overdueFee = true;
    list.add(present_overdueFee);
    if (present_overdueFee)
      list.add(overdueFee);

    boolean present_overdueDay = true;
    list.add(present_overdueDay);
    if (present_overdueDay)
      list.add(overdueDay);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    boolean present_extensionDays = true;
    list.add(present_extensionDays);
    if (present_extensionDays)
      list.add(extensionDays);

    boolean present_recLoanDate = true && (isSetRecLoanDate());
    list.add(present_recLoanDate);
    if (present_recLoanDate)
      list.add(recLoanDate);

    boolean present_declaration = true && (isSetDeclaration());
    list.add(present_declaration);
    if (present_declaration)
      list.add(declaration);

    boolean present_houseClerkName = true && (isSetHouseClerkName());
    list.add(present_houseClerkName);
    if (present_houseClerkName)
      list.add(houseClerkName);

    boolean present_logoutName = true && (isSetLogoutName());
    list.add(present_logoutName);
    if (present_logoutName)
      list.add(logoutName);

    boolean present_assignedName = true && (isSetAssignedName());
    list.add(present_assignedName);
    if (present_assignedName)
      list.add(assignedName);

    boolean present_newCardName = true && (isSetNewCardName());
    list.add(present_newCardName);
    if (present_newCardName)
      list.add(newCardName);

    boolean present_mortgageName = true && (isSetMortgageName());
    list.add(present_mortgageName);
    if (present_mortgageName)
      list.add(mortgageName);

    boolean present_innerOrOut = true;
    list.add(present_innerOrOut);
    if (present_innerOrOut)
      list.add(innerOrOut);

    boolean present_condition = true && (isSetCondition());
    list.add(present_condition);
    if (present_condition)
      list.add(condition);

    boolean present_loanEndDate = true && (isSetLoanEndDate());
    list.add(present_loanEndDate);
    if (present_loanEndDate)
      list.add(loanEndDate);

    boolean present_handleFlowStartDate = true && (isSetHandleFlowStartDate());
    list.add(present_handleFlowStartDate);
    if (present_handleFlowStartDate)
      list.add(handleFlowStartDate);

    boolean present_handleFlowEndDate = true && (isSetHandleFlowEndDate());
    list.add(present_handleFlowEndDate);
    if (present_handleFlowEndDate)
      list.add(handleFlowEndDate);

    boolean present_handleFlowId = true;
    list.add(present_handleFlowId);
    if (present_handleFlowId)
      list.add(handleFlowId);

    boolean present_innerOrOutName = true && (isSetInnerOrOutName());
    list.add(present_innerOrOutName);
    if (present_innerOrOutName)
      list.add(innerOrOutName);

    return list.hashCode();
  }

  @Override
  public int compareTo(TrackRecordReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptName()).compareTo(other.isSetDeptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptName, other.deptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptId()).compareTo(other.isSetDeptId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptId, other.deptId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanBank()).compareTo(other.isSetNewLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanBank, other.newLoanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanBank()).compareTo(other.isSetOldLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanBank, other.oldLoanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmt()).compareTo(other.isSetLoanAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmt, other.loanAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDate()).compareTo(other.isSetRequestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDate, other.requestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDate()).compareTo(other.isSetLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDate, other.loanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureFloorDate()).compareTo(other.isSetForeclosureFloorDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureFloorDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureFloorDate, other.foreclosureFloorDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetOldLicenseDate()).compareTo(other.isSetGetOldLicenseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetOldLicenseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getOldLicenseDate, other.getOldLicenseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelMortgageDate()).compareTo(other.isSetCancelMortgageDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelMortgageDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelMortgageDate, other.cancelMortgageDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransferDate()).compareTo(other.isSetTransferDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferDate, other.transferDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetNewLicenseDate()).compareTo(other.isSetGetNewLicenseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetNewLicenseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getNewLicenseDate, other.getNewLicenseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageDate()).compareTo(other.isSetMortgageDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageDate, other.mortgageDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFee()).compareTo(other.isSetOverdueFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFee, other.overdueFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDay()).compareTo(other.isSetOverdueDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDay, other.overdueDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionDays()).compareTo(other.isSetExtensionDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionDays, other.extensionDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecLoanDate()).compareTo(other.isSetRecLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recLoanDate, other.recLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeclaration()).compareTo(other.isSetDeclaration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeclaration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.declaration, other.declaration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseClerkName()).compareTo(other.isSetHouseClerkName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseClerkName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseClerkName, other.houseClerkName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoutName()).compareTo(other.isSetLogoutName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoutName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoutName, other.logoutName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssignedName()).compareTo(other.isSetAssignedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignedName, other.assignedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewCardName()).compareTo(other.isSetNewCardName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewCardName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newCardName, other.newCardName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageName()).compareTo(other.isSetMortgageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageName, other.mortgageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOut()).compareTo(other.isSetInnerOrOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerOrOut, other.innerOrOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanEndDate()).compareTo(other.isSetLoanEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanEndDate, other.loanEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleFlowStartDate()).compareTo(other.isSetHandleFlowStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleFlowStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowStartDate, other.handleFlowStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleFlowEndDate()).compareTo(other.isSetHandleFlowEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleFlowEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowEndDate, other.handleFlowEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleFlowId()).compareTo(other.isSetHandleFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowId, other.handleFlowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOutName()).compareTo(other.isSetInnerOrOutName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOutName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerOrOutName, other.innerOrOutName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TrackRecordReport(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptName:");
    if (this.deptName == null) {
      sb.append("null");
    } else {
      sb.append(this.deptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deptId:");
    sb.append(this.deptId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanBank:");
    if (this.newLoanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanBank:");
    if (this.oldLoanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmt:");
    sb.append(this.loanAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDate:");
    if (this.requestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDate:");
    if (this.loanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureFloorDate:");
    if (this.foreclosureFloorDate == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureFloorDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("getOldLicenseDate:");
    if (this.getOldLicenseDate == null) {
      sb.append("null");
    } else {
      sb.append(this.getOldLicenseDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelMortgageDate:");
    if (this.cancelMortgageDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelMortgageDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferDate:");
    if (this.transferDate == null) {
      sb.append("null");
    } else {
      sb.append(this.transferDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("getNewLicenseDate:");
    if (this.getNewLicenseDate == null) {
      sb.append("null");
    } else {
      sb.append(this.getNewLicenseDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageDate:");
    if (this.mortgageDate == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFee:");
    sb.append(this.overdueFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDay:");
    sb.append(this.overdueDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionDays:");
    sb.append(this.extensionDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recLoanDate:");
    if (this.recLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("declaration:");
    if (this.declaration == null) {
      sb.append("null");
    } else {
      sb.append(this.declaration);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseClerkName:");
    if (this.houseClerkName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseClerkName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logoutName:");
    if (this.logoutName == null) {
      sb.append("null");
    } else {
      sb.append(this.logoutName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assignedName:");
    if (this.assignedName == null) {
      sb.append("null");
    } else {
      sb.append(this.assignedName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newCardName:");
    if (this.newCardName == null) {
      sb.append("null");
    } else {
      sb.append(this.newCardName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageName:");
    if (this.mortgageName == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerOrOut:");
    sb.append(this.innerOrOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("condition:");
    if (this.condition == null) {
      sb.append("null");
    } else {
      sb.append(this.condition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanEndDate:");
    if (this.loanEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleFlowStartDate:");
    if (this.handleFlowStartDate == null) {
      sb.append("null");
    } else {
      sb.append(this.handleFlowStartDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleFlowEndDate:");
    if (this.handleFlowEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.handleFlowEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleFlowId:");
    sb.append(this.handleFlowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerOrOutName:");
    if (this.innerOrOutName == null) {
      sb.append("null");
    } else {
      sb.append(this.innerOrOutName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TrackRecordReportStandardSchemeFactory implements SchemeFactory {
    public TrackRecordReportStandardScheme getScheme() {
      return new TrackRecordReportStandardScheme();
    }
  }

  private static class TrackRecordReportStandardScheme extends StandardScheme<TrackRecordReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TrackRecordReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deptName = iprot.readString();
              struct.setDeptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deptId = iprot.readI32();
              struct.setDeptIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list32.size);
                int _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI32();
                  struct.userIds.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NEW_LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanBank = iprot.readString();
              struct.setNewLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OLD_LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanBank = iprot.readString();
              struct.setOldLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LOAN_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmt = iprot.readDouble();
              struct.setLoanAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REQUEST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDate = iprot.readString();
              struct.setRequestDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDate = iprot.readString();
              struct.setLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FORECLOSURE_FLOOR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureFloorDate = iprot.readString();
              struct.setForeclosureFloorDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // GET_OLD_LICENSE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.getOldLicenseDate = iprot.readString();
              struct.setGetOldLicenseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CANCEL_MORTGAGE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelMortgageDate = iprot.readString();
              struct.setCancelMortgageDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TRANSFER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transferDate = iprot.readString();
              struct.setTransferDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // GET_NEW_LICENSE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.getNewLicenseDate = iprot.readString();
              struct.setGetNewLicenseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MORTGAGE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageDate = iprot.readString();
              struct.setMortgageDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // OVERDUE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFee = iprot.readDouble();
              struct.setOverdueFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // OVERDUE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDay = iprot.readI32();
              struct.setOverdueDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // EXTENSION_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extensionDays = iprot.readI32();
              struct.setExtensionDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // REC_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recLoanDate = iprot.readString();
              struct.setRecLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DECLARATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.declaration = iprot.readString();
              struct.setDeclarationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // HOUSE_CLERK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseClerkName = iprot.readString();
              struct.setHouseClerkNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // LOGOUT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoutName = iprot.readString();
              struct.setLogoutNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ASSIGNED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assignedName = iprot.readString();
              struct.setAssignedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // NEW_CARD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newCardName = iprot.readString();
              struct.setNewCardNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // MORTGAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageName = iprot.readString();
              struct.setMortgageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // INNER_OR_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.innerOrOut = iprot.readI32();
              struct.setInnerOrOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.condition = iprot.readString();
              struct.setConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LOAN_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanEndDate = iprot.readString();
              struct.setLoanEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // HANDLE_FLOW_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleFlowStartDate = iprot.readString();
              struct.setHandleFlowStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // HANDLE_FLOW_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleFlowEndDate = iprot.readString();
              struct.setHandleFlowEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // HANDLE_FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleFlowId = iprot.readI32();
              struct.setHandleFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // INNER_OR_OUT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.innerOrOutName = iprot.readString();
              struct.setInnerOrOutNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TrackRecordReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.deptName != null) {
        oprot.writeFieldBegin(DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.deptName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEPT_ID_FIELD_DESC);
      oprot.writeI32(struct.deptId);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter35 : struct.userIds)
          {
            oprot.writeI32(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.newLoanBank != null) {
        oprot.writeFieldBegin(NEW_LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.newLoanBank);
        oprot.writeFieldEnd();
      }
      if (struct.oldLoanBank != null) {
        oprot.writeFieldBegin(OLD_LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.oldLoanBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_AMT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      if (struct.requestDate != null) {
        oprot.writeFieldBegin(REQUEST_DATE_FIELD_DESC);
        oprot.writeString(struct.requestDate);
        oprot.writeFieldEnd();
      }
      if (struct.loanDate != null) {
        oprot.writeFieldBegin(LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.loanDate);
        oprot.writeFieldEnd();
      }
      if (struct.foreclosureFloorDate != null) {
        oprot.writeFieldBegin(FORECLOSURE_FLOOR_DATE_FIELD_DESC);
        oprot.writeString(struct.foreclosureFloorDate);
        oprot.writeFieldEnd();
      }
      if (struct.getOldLicenseDate != null) {
        oprot.writeFieldBegin(GET_OLD_LICENSE_DATE_FIELD_DESC);
        oprot.writeString(struct.getOldLicenseDate);
        oprot.writeFieldEnd();
      }
      if (struct.cancelMortgageDate != null) {
        oprot.writeFieldBegin(CANCEL_MORTGAGE_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelMortgageDate);
        oprot.writeFieldEnd();
      }
      if (struct.transferDate != null) {
        oprot.writeFieldBegin(TRANSFER_DATE_FIELD_DESC);
        oprot.writeString(struct.transferDate);
        oprot.writeFieldEnd();
      }
      if (struct.getNewLicenseDate != null) {
        oprot.writeFieldBegin(GET_NEW_LICENSE_DATE_FIELD_DESC);
        oprot.writeString(struct.getNewLicenseDate);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageDate != null) {
        oprot.writeFieldBegin(MORTGAGE_DATE_FIELD_DESC);
        oprot.writeString(struct.mortgageDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.overdueFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_DAYS_FIELD_DESC);
      oprot.writeI32(struct.extensionDays);
      oprot.writeFieldEnd();
      if (struct.recLoanDate != null) {
        oprot.writeFieldBegin(REC_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.recLoanDate);
        oprot.writeFieldEnd();
      }
      if (struct.declaration != null) {
        oprot.writeFieldBegin(DECLARATION_FIELD_DESC);
        oprot.writeString(struct.declaration);
        oprot.writeFieldEnd();
      }
      if (struct.houseClerkName != null) {
        oprot.writeFieldBegin(HOUSE_CLERK_NAME_FIELD_DESC);
        oprot.writeString(struct.houseClerkName);
        oprot.writeFieldEnd();
      }
      if (struct.logoutName != null) {
        oprot.writeFieldBegin(LOGOUT_NAME_FIELD_DESC);
        oprot.writeString(struct.logoutName);
        oprot.writeFieldEnd();
      }
      if (struct.assignedName != null) {
        oprot.writeFieldBegin(ASSIGNED_NAME_FIELD_DESC);
        oprot.writeString(struct.assignedName);
        oprot.writeFieldEnd();
      }
      if (struct.newCardName != null) {
        oprot.writeFieldBegin(NEW_CARD_NAME_FIELD_DESC);
        oprot.writeString(struct.newCardName);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageName != null) {
        oprot.writeFieldBegin(MORTGAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.mortgageName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INNER_OR_OUT_FIELD_DESC);
      oprot.writeI32(struct.innerOrOut);
      oprot.writeFieldEnd();
      if (struct.condition != null) {
        oprot.writeFieldBegin(CONDITION_FIELD_DESC);
        oprot.writeString(struct.condition);
        oprot.writeFieldEnd();
      }
      if (struct.loanEndDate != null) {
        oprot.writeFieldBegin(LOAN_END_DATE_FIELD_DESC);
        oprot.writeString(struct.loanEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.handleFlowStartDate != null) {
        oprot.writeFieldBegin(HANDLE_FLOW_START_DATE_FIELD_DESC);
        oprot.writeString(struct.handleFlowStartDate);
        oprot.writeFieldEnd();
      }
      if (struct.handleFlowEndDate != null) {
        oprot.writeFieldBegin(HANDLE_FLOW_END_DATE_FIELD_DESC);
        oprot.writeString(struct.handleFlowEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HANDLE_FLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.handleFlowId);
      oprot.writeFieldEnd();
      if (struct.innerOrOutName != null) {
        oprot.writeFieldBegin(INNER_OR_OUT_NAME_FIELD_DESC);
        oprot.writeString(struct.innerOrOutName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TrackRecordReportTupleSchemeFactory implements SchemeFactory {
    public TrackRecordReportTupleScheme getScheme() {
      return new TrackRecordReportTupleScheme();
    }
  }

  private static class TrackRecordReportTupleScheme extends TupleScheme<TrackRecordReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TrackRecordReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetProductName()) {
        optionals.set(3);
      }
      if (struct.isSetDeptName()) {
        optionals.set(4);
      }
      if (struct.isSetDeptId()) {
        optionals.set(5);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(6);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(7);
      }
      if (struct.isSetPage()) {
        optionals.set(8);
      }
      if (struct.isSetRows()) {
        optionals.set(9);
      }
      if (struct.isSetUserIds()) {
        optionals.set(10);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(11);
      }
      if (struct.isSetSellerName()) {
        optionals.set(12);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(13);
      }
      if (struct.isSetNewLoanBank()) {
        optionals.set(14);
      }
      if (struct.isSetOldLoanBank()) {
        optionals.set(15);
      }
      if (struct.isSetProductId()) {
        optionals.set(16);
      }
      if (struct.isSetLoanAmt()) {
        optionals.set(17);
      }
      if (struct.isSetInterest()) {
        optionals.set(18);
      }
      if (struct.isSetRequestDate()) {
        optionals.set(19);
      }
      if (struct.isSetLoanDate()) {
        optionals.set(20);
      }
      if (struct.isSetForeclosureFloorDate()) {
        optionals.set(21);
      }
      if (struct.isSetGetOldLicenseDate()) {
        optionals.set(22);
      }
      if (struct.isSetCancelMortgageDate()) {
        optionals.set(23);
      }
      if (struct.isSetTransferDate()) {
        optionals.set(24);
      }
      if (struct.isSetGetNewLicenseDate()) {
        optionals.set(25);
      }
      if (struct.isSetMortgageDate()) {
        optionals.set(26);
      }
      if (struct.isSetOverdueFee()) {
        optionals.set(27);
      }
      if (struct.isSetOverdueDay()) {
        optionals.set(28);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(29);
      }
      if (struct.isSetExtensionDays()) {
        optionals.set(30);
      }
      if (struct.isSetRecLoanDate()) {
        optionals.set(31);
      }
      if (struct.isSetDeclaration()) {
        optionals.set(32);
      }
      if (struct.isSetHouseClerkName()) {
        optionals.set(33);
      }
      if (struct.isSetLogoutName()) {
        optionals.set(34);
      }
      if (struct.isSetAssignedName()) {
        optionals.set(35);
      }
      if (struct.isSetNewCardName()) {
        optionals.set(36);
      }
      if (struct.isSetMortgageName()) {
        optionals.set(37);
      }
      if (struct.isSetInnerOrOut()) {
        optionals.set(38);
      }
      if (struct.isSetCondition()) {
        optionals.set(39);
      }
      if (struct.isSetLoanEndDate()) {
        optionals.set(40);
      }
      if (struct.isSetHandleFlowStartDate()) {
        optionals.set(41);
      }
      if (struct.isSetHandleFlowEndDate()) {
        optionals.set(42);
      }
      if (struct.isSetHandleFlowId()) {
        optionals.set(43);
      }
      if (struct.isSetInnerOrOutName()) {
        optionals.set(44);
      }
      oprot.writeBitSet(optionals, 45);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetDeptName()) {
        oprot.writeString(struct.deptName);
      }
      if (struct.isSetDeptId()) {
        oprot.writeI32(struct.deptId);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter36 : struct.userIds)
          {
            oprot.writeI32(_iter36);
          }
        }
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetNewLoanBank()) {
        oprot.writeString(struct.newLoanBank);
      }
      if (struct.isSetOldLoanBank()) {
        oprot.writeString(struct.oldLoanBank);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetLoanAmt()) {
        oprot.writeDouble(struct.loanAmt);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetRequestDate()) {
        oprot.writeString(struct.requestDate);
      }
      if (struct.isSetLoanDate()) {
        oprot.writeString(struct.loanDate);
      }
      if (struct.isSetForeclosureFloorDate()) {
        oprot.writeString(struct.foreclosureFloorDate);
      }
      if (struct.isSetGetOldLicenseDate()) {
        oprot.writeString(struct.getOldLicenseDate);
      }
      if (struct.isSetCancelMortgageDate()) {
        oprot.writeString(struct.cancelMortgageDate);
      }
      if (struct.isSetTransferDate()) {
        oprot.writeString(struct.transferDate);
      }
      if (struct.isSetGetNewLicenseDate()) {
        oprot.writeString(struct.getNewLicenseDate);
      }
      if (struct.isSetMortgageDate()) {
        oprot.writeString(struct.mortgageDate);
      }
      if (struct.isSetOverdueFee()) {
        oprot.writeDouble(struct.overdueFee);
      }
      if (struct.isSetOverdueDay()) {
        oprot.writeI32(struct.overdueDay);
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
      if (struct.isSetExtensionDays()) {
        oprot.writeI32(struct.extensionDays);
      }
      if (struct.isSetRecLoanDate()) {
        oprot.writeString(struct.recLoanDate);
      }
      if (struct.isSetDeclaration()) {
        oprot.writeString(struct.declaration);
      }
      if (struct.isSetHouseClerkName()) {
        oprot.writeString(struct.houseClerkName);
      }
      if (struct.isSetLogoutName()) {
        oprot.writeString(struct.logoutName);
      }
      if (struct.isSetAssignedName()) {
        oprot.writeString(struct.assignedName);
      }
      if (struct.isSetNewCardName()) {
        oprot.writeString(struct.newCardName);
      }
      if (struct.isSetMortgageName()) {
        oprot.writeString(struct.mortgageName);
      }
      if (struct.isSetInnerOrOut()) {
        oprot.writeI32(struct.innerOrOut);
      }
      if (struct.isSetCondition()) {
        oprot.writeString(struct.condition);
      }
      if (struct.isSetLoanEndDate()) {
        oprot.writeString(struct.loanEndDate);
      }
      if (struct.isSetHandleFlowStartDate()) {
        oprot.writeString(struct.handleFlowStartDate);
      }
      if (struct.isSetHandleFlowEndDate()) {
        oprot.writeString(struct.handleFlowEndDate);
      }
      if (struct.isSetHandleFlowId()) {
        oprot.writeI32(struct.handleFlowId);
      }
      if (struct.isSetInnerOrOutName()) {
        oprot.writeString(struct.innerOrOutName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TrackRecordReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(45);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.deptName = iprot.readString();
        struct.setDeptNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.deptId = iprot.readI32();
        struct.setDeptIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list37.size);
          int _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readI32();
            struct.userIds.add(_elem38);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.newLoanBank = iprot.readString();
        struct.setNewLoanBankIsSet(true);
      }
      if (incoming.get(15)) {
        struct.oldLoanBank = iprot.readString();
        struct.setOldLoanBankIsSet(true);
      }
      if (incoming.get(16)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.loanAmt = iprot.readDouble();
        struct.setLoanAmtIsSet(true);
      }
      if (incoming.get(18)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(19)) {
        struct.requestDate = iprot.readString();
        struct.setRequestDateIsSet(true);
      }
      if (incoming.get(20)) {
        struct.loanDate = iprot.readString();
        struct.setLoanDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.foreclosureFloorDate = iprot.readString();
        struct.setForeclosureFloorDateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.getOldLicenseDate = iprot.readString();
        struct.setGetOldLicenseDateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.cancelMortgageDate = iprot.readString();
        struct.setCancelMortgageDateIsSet(true);
      }
      if (incoming.get(24)) {
        struct.transferDate = iprot.readString();
        struct.setTransferDateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.getNewLicenseDate = iprot.readString();
        struct.setGetNewLicenseDateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.mortgageDate = iprot.readString();
        struct.setMortgageDateIsSet(true);
      }
      if (incoming.get(27)) {
        struct.overdueFee = iprot.readDouble();
        struct.setOverdueFeeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.overdueDay = iprot.readI32();
        struct.setOverdueDayIsSet(true);
      }
      if (incoming.get(29)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.extensionDays = iprot.readI32();
        struct.setExtensionDaysIsSet(true);
      }
      if (incoming.get(31)) {
        struct.recLoanDate = iprot.readString();
        struct.setRecLoanDateIsSet(true);
      }
      if (incoming.get(32)) {
        struct.declaration = iprot.readString();
        struct.setDeclarationIsSet(true);
      }
      if (incoming.get(33)) {
        struct.houseClerkName = iprot.readString();
        struct.setHouseClerkNameIsSet(true);
      }
      if (incoming.get(34)) {
        struct.logoutName = iprot.readString();
        struct.setLogoutNameIsSet(true);
      }
      if (incoming.get(35)) {
        struct.assignedName = iprot.readString();
        struct.setAssignedNameIsSet(true);
      }
      if (incoming.get(36)) {
        struct.newCardName = iprot.readString();
        struct.setNewCardNameIsSet(true);
      }
      if (incoming.get(37)) {
        struct.mortgageName = iprot.readString();
        struct.setMortgageNameIsSet(true);
      }
      if (incoming.get(38)) {
        struct.innerOrOut = iprot.readI32();
        struct.setInnerOrOutIsSet(true);
      }
      if (incoming.get(39)) {
        struct.condition = iprot.readString();
        struct.setConditionIsSet(true);
      }
      if (incoming.get(40)) {
        struct.loanEndDate = iprot.readString();
        struct.setLoanEndDateIsSet(true);
      }
      if (incoming.get(41)) {
        struct.handleFlowStartDate = iprot.readString();
        struct.setHandleFlowStartDateIsSet(true);
      }
      if (incoming.get(42)) {
        struct.handleFlowEndDate = iprot.readString();
        struct.setHandleFlowEndDateIsSet(true);
      }
      if (incoming.get(43)) {
        struct.handleFlowId = iprot.readI32();
        struct.setHandleFlowIdIsSet(true);
      }
      if (incoming.get(44)) {
        struct.innerOrOutName = iprot.readString();
        struct.setInnerOrOutNameIsSet(true);
      }
    }
  }

}


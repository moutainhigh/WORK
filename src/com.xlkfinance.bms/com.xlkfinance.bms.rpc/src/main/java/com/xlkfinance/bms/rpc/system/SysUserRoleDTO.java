/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysUserRoleDTO implements org.apache.thrift.TBase<SysUserRoleDTO, SysUserRoleDTO._Fields>, java.io.Serializable, Cloneable, Comparable<SysUserRoleDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysUserRoleDTO");

  private static final org.apache.thrift.protocol.TField SYS_USER_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sysUserRole", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SYS_PERMISSION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sysPermissionList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysUserRoleDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysUserRoleDTOTupleSchemeFactory());
  }

  public SysUserRole sysUserRole; // required
  public List<SysPermission> sysPermissionList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYS_USER_ROLE((short)1, "sysUserRole"),
    SYS_PERMISSION_LIST((short)2, "sysPermissionList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYS_USER_ROLE
          return SYS_USER_ROLE;
        case 2: // SYS_PERMISSION_LIST
          return SYS_PERMISSION_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYS_USER_ROLE, new org.apache.thrift.meta_data.FieldMetaData("sysUserRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysUserRole.class)));
    tmpMap.put(_Fields.SYS_PERMISSION_LIST, new org.apache.thrift.meta_data.FieldMetaData("sysPermissionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysPermission.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysUserRoleDTO.class, metaDataMap);
  }

  public SysUserRoleDTO() {
  }

  public SysUserRoleDTO(
    SysUserRole sysUserRole,
    List<SysPermission> sysPermissionList)
  {
    this();
    this.sysUserRole = sysUserRole;
    this.sysPermissionList = sysPermissionList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysUserRoleDTO(SysUserRoleDTO other) {
    if (other.isSetSysUserRole()) {
      this.sysUserRole = new SysUserRole(other.sysUserRole);
    }
    if (other.isSetSysPermissionList()) {
      List<SysPermission> __this__sysPermissionList = new ArrayList<SysPermission>(other.sysPermissionList.size());
      for (SysPermission other_element : other.sysPermissionList) {
        __this__sysPermissionList.add(new SysPermission(other_element));
      }
      this.sysPermissionList = __this__sysPermissionList;
    }
  }

  public SysUserRoleDTO deepCopy() {
    return new SysUserRoleDTO(this);
  }

  @Override
  public void clear() {
    this.sysUserRole = null;
    this.sysPermissionList = null;
  }

  public SysUserRole getSysUserRole() {
    return this.sysUserRole;
  }

  public SysUserRoleDTO setSysUserRole(SysUserRole sysUserRole) {
    this.sysUserRole = sysUserRole;
    return this;
  }

  public void unsetSysUserRole() {
    this.sysUserRole = null;
  }

  /** Returns true if field sysUserRole is set (has been assigned a value) and false otherwise */
  public boolean isSetSysUserRole() {
    return this.sysUserRole != null;
  }

  public void setSysUserRoleIsSet(boolean value) {
    if (!value) {
      this.sysUserRole = null;
    }
  }

  public int getSysPermissionListSize() {
    return (this.sysPermissionList == null) ? 0 : this.sysPermissionList.size();
  }

  public java.util.Iterator<SysPermission> getSysPermissionListIterator() {
    return (this.sysPermissionList == null) ? null : this.sysPermissionList.iterator();
  }

  public void addToSysPermissionList(SysPermission elem) {
    if (this.sysPermissionList == null) {
      this.sysPermissionList = new ArrayList<SysPermission>();
    }
    this.sysPermissionList.add(elem);
  }

  public List<SysPermission> getSysPermissionList() {
    return this.sysPermissionList;
  }

  public SysUserRoleDTO setSysPermissionList(List<SysPermission> sysPermissionList) {
    this.sysPermissionList = sysPermissionList;
    return this;
  }

  public void unsetSysPermissionList() {
    this.sysPermissionList = null;
  }

  /** Returns true if field sysPermissionList is set (has been assigned a value) and false otherwise */
  public boolean isSetSysPermissionList() {
    return this.sysPermissionList != null;
  }

  public void setSysPermissionListIsSet(boolean value) {
    if (!value) {
      this.sysPermissionList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SYS_USER_ROLE:
      if (value == null) {
        unsetSysUserRole();
      } else {
        setSysUserRole((SysUserRole)value);
      }
      break;

    case SYS_PERMISSION_LIST:
      if (value == null) {
        unsetSysPermissionList();
      } else {
        setSysPermissionList((List<SysPermission>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SYS_USER_ROLE:
      return getSysUserRole();

    case SYS_PERMISSION_LIST:
      return getSysPermissionList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SYS_USER_ROLE:
      return isSetSysUserRole();
    case SYS_PERMISSION_LIST:
      return isSetSysPermissionList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysUserRoleDTO)
      return this.equals((SysUserRoleDTO)that);
    return false;
  }

  public boolean equals(SysUserRoleDTO that) {
    if (that == null)
      return false;

    boolean this_present_sysUserRole = true && this.isSetSysUserRole();
    boolean that_present_sysUserRole = true && that.isSetSysUserRole();
    if (this_present_sysUserRole || that_present_sysUserRole) {
      if (!(this_present_sysUserRole && that_present_sysUserRole))
        return false;
      if (!this.sysUserRole.equals(that.sysUserRole))
        return false;
    }

    boolean this_present_sysPermissionList = true && this.isSetSysPermissionList();
    boolean that_present_sysPermissionList = true && that.isSetSysPermissionList();
    if (this_present_sysPermissionList || that_present_sysPermissionList) {
      if (!(this_present_sysPermissionList && that_present_sysPermissionList))
        return false;
      if (!this.sysPermissionList.equals(that.sysPermissionList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sysUserRole = true && (isSetSysUserRole());
    list.add(present_sysUserRole);
    if (present_sysUserRole)
      list.add(sysUserRole);

    boolean present_sysPermissionList = true && (isSetSysPermissionList());
    list.add(present_sysPermissionList);
    if (present_sysPermissionList)
      list.add(sysPermissionList);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysUserRoleDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSysUserRole()).compareTo(other.isSetSysUserRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysUserRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysUserRole, other.sysUserRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSysPermissionList()).compareTo(other.isSetSysPermissionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysPermissionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysPermissionList, other.sysPermissionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysUserRoleDTO(");
    boolean first = true;

    sb.append("sysUserRole:");
    if (this.sysUserRole == null) {
      sb.append("null");
    } else {
      sb.append(this.sysUserRole);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sysPermissionList:");
    if (this.sysPermissionList == null) {
      sb.append("null");
    } else {
      sb.append(this.sysPermissionList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sysUserRole != null) {
      sysUserRole.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysUserRoleDTOStandardSchemeFactory implements SchemeFactory {
    public SysUserRoleDTOStandardScheme getScheme() {
      return new SysUserRoleDTOStandardScheme();
    }
  }

  private static class SysUserRoleDTOStandardScheme extends StandardScheme<SysUserRoleDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysUserRoleDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYS_USER_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sysUserRole = new SysUserRole();
              struct.sysUserRole.read(iprot);
              struct.setSysUserRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYS_PERMISSION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.sysPermissionList = new ArrayList<SysPermission>(_list16.size);
                SysPermission _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new SysPermission();
                  _elem17.read(iprot);
                  struct.sysPermissionList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setSysPermissionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysUserRoleDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sysUserRole != null) {
        oprot.writeFieldBegin(SYS_USER_ROLE_FIELD_DESC);
        struct.sysUserRole.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sysPermissionList != null) {
        oprot.writeFieldBegin(SYS_PERMISSION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sysPermissionList.size()));
          for (SysPermission _iter19 : struct.sysPermissionList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysUserRoleDTOTupleSchemeFactory implements SchemeFactory {
    public SysUserRoleDTOTupleScheme getScheme() {
      return new SysUserRoleDTOTupleScheme();
    }
  }

  private static class SysUserRoleDTOTupleScheme extends TupleScheme<SysUserRoleDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysUserRoleDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSysUserRole()) {
        optionals.set(0);
      }
      if (struct.isSetSysPermissionList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSysUserRole()) {
        struct.sysUserRole.write(oprot);
      }
      if (struct.isSetSysPermissionList()) {
        {
          oprot.writeI32(struct.sysPermissionList.size());
          for (SysPermission _iter20 : struct.sysPermissionList)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysUserRoleDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.sysUserRole = new SysUserRole();
        struct.sysUserRole.read(iprot);
        struct.setSysUserRoleIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sysPermissionList = new ArrayList<SysPermission>(_list21.size);
          SysPermission _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new SysPermission();
            _elem22.read(iprot);
            struct.sysPermissionList.add(_elem22);
          }
        }
        struct.setSysPermissionListIsSet(true);
      }
    }
  }

}


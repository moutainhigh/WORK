/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class QueryConDTO implements org.apache.thrift.TBase<QueryConDTO, QueryConDTO._Fields>, java.io.Serializable, Cloneable, Comparable<QueryConDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryConDTO");

  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EXPIRE_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("expireStartDt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXPIRE_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("expireEndDt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OVERDUE_START_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueStartDay", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OVERDUE_END_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueEndDay", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REQUEST_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStartDt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REQUEST_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestEndDT", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ACTUAL_REPAYMENT_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualRepaymentStartDt", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ACTUAL_REPAYMENT_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualRepaymentEndDt", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SHOULD_REPAY_START_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldRepayStartAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField SHOULD_REPAY_END_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldRepayEndAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryConDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryConDTOTupleSchemeFactory());
  }

  public String projectName; // required
  public String projectId; // required
  public String acctName; // required
  public int acctType; // required
  public int ecoTrade; // required
  public String expireStartDt; // required
  public String expireEndDt; // required
  public int overdueStartDay; // required
  public int overdueEndDay; // required
  public String requestStartDt; // required
  public String requestEndDT; // required
  public String actualRepaymentStartDt; // required
  public String actualRepaymentEndDt; // required
  public double shouldRepayStartAmt; // required
  public double shouldRepayEndAmt; // required
  public List<FinanceDTO> results; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_NAME((short)1, "projectName"),
    PROJECT_ID((short)2, "projectId"),
    ACCT_NAME((short)3, "acctName"),
    ACCT_TYPE((short)4, "acctType"),
    ECO_TRADE((short)5, "ecoTrade"),
    EXPIRE_START_DT((short)6, "expireStartDt"),
    EXPIRE_END_DT((short)7, "expireEndDt"),
    OVERDUE_START_DAY((short)8, "overdueStartDay"),
    OVERDUE_END_DAY((short)9, "overdueEndDay"),
    REQUEST_START_DT((short)10, "requestStartDt"),
    REQUEST_END_DT((short)11, "requestEndDT"),
    ACTUAL_REPAYMENT_START_DT((short)12, "actualRepaymentStartDt"),
    ACTUAL_REPAYMENT_END_DT((short)13, "actualRepaymentEndDt"),
    SHOULD_REPAY_START_AMT((short)14, "shouldRepayStartAmt"),
    SHOULD_REPAY_END_AMT((short)15, "shouldRepayEndAmt"),
    RESULTS((short)16, "results");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_NAME
          return PROJECT_NAME;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // ACCT_NAME
          return ACCT_NAME;
        case 4: // ACCT_TYPE
          return ACCT_TYPE;
        case 5: // ECO_TRADE
          return ECO_TRADE;
        case 6: // EXPIRE_START_DT
          return EXPIRE_START_DT;
        case 7: // EXPIRE_END_DT
          return EXPIRE_END_DT;
        case 8: // OVERDUE_START_DAY
          return OVERDUE_START_DAY;
        case 9: // OVERDUE_END_DAY
          return OVERDUE_END_DAY;
        case 10: // REQUEST_START_DT
          return REQUEST_START_DT;
        case 11: // REQUEST_END_DT
          return REQUEST_END_DT;
        case 12: // ACTUAL_REPAYMENT_START_DT
          return ACTUAL_REPAYMENT_START_DT;
        case 13: // ACTUAL_REPAYMENT_END_DT
          return ACTUAL_REPAYMENT_END_DT;
        case 14: // SHOULD_REPAY_START_AMT
          return SHOULD_REPAY_START_AMT;
        case 15: // SHOULD_REPAY_END_AMT
          return SHOULD_REPAY_END_AMT;
        case 16: // RESULTS
          return RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCTTYPE_ISSET_ID = 0;
  private static final int __ECOTRADE_ISSET_ID = 1;
  private static final int __OVERDUESTARTDAY_ISSET_ID = 2;
  private static final int __OVERDUEENDDAY_ISSET_ID = 3;
  private static final int __SHOULDREPAYSTARTAMT_ISSET_ID = 4;
  private static final int __SHOULDREPAYENDAMT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPIRE_START_DT, new org.apache.thrift.meta_data.FieldMetaData("expireStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_END_DT, new org.apache.thrift.meta_data.FieldMetaData("expireEndDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_START_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueStartDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_END_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueEndDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_START_DT, new org.apache.thrift.meta_data.FieldMetaData("requestStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_END_DT, new org.apache.thrift.meta_data.FieldMetaData("requestEndDT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_REPAYMENT_START_DT, new org.apache.thrift.meta_data.FieldMetaData("actualRepaymentStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_REPAYMENT_END_DT, new org.apache.thrift.meta_data.FieldMetaData("actualRepaymentEndDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_REPAY_START_AMT, new org.apache.thrift.meta_data.FieldMetaData("shouldRepayStartAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_REPAY_END_AMT, new org.apache.thrift.meta_data.FieldMetaData("shouldRepayEndAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "FinanceDTO"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryConDTO.class, metaDataMap);
  }

  public QueryConDTO() {
  }

  public QueryConDTO(
    String projectName,
    String projectId,
    String acctName,
    int acctType,
    int ecoTrade,
    String expireStartDt,
    String expireEndDt,
    int overdueStartDay,
    int overdueEndDay,
    String requestStartDt,
    String requestEndDT,
    String actualRepaymentStartDt,
    String actualRepaymentEndDt,
    double shouldRepayStartAmt,
    double shouldRepayEndAmt,
    List<FinanceDTO> results)
  {
    this();
    this.projectName = projectName;
    this.projectId = projectId;
    this.acctName = acctName;
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    this.expireStartDt = expireStartDt;
    this.expireEndDt = expireEndDt;
    this.overdueStartDay = overdueStartDay;
    setOverdueStartDayIsSet(true);
    this.overdueEndDay = overdueEndDay;
    setOverdueEndDayIsSet(true);
    this.requestStartDt = requestStartDt;
    this.requestEndDT = requestEndDT;
    this.actualRepaymentStartDt = actualRepaymentStartDt;
    this.actualRepaymentEndDt = actualRepaymentEndDt;
    this.shouldRepayStartAmt = shouldRepayStartAmt;
    setShouldRepayStartAmtIsSet(true);
    this.shouldRepayEndAmt = shouldRepayEndAmt;
    setShouldRepayEndAmtIsSet(true);
    this.results = results;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryConDTO(QueryConDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    this.acctType = other.acctType;
    this.ecoTrade = other.ecoTrade;
    if (other.isSetExpireStartDt()) {
      this.expireStartDt = other.expireStartDt;
    }
    if (other.isSetExpireEndDt()) {
      this.expireEndDt = other.expireEndDt;
    }
    this.overdueStartDay = other.overdueStartDay;
    this.overdueEndDay = other.overdueEndDay;
    if (other.isSetRequestStartDt()) {
      this.requestStartDt = other.requestStartDt;
    }
    if (other.isSetRequestEndDT()) {
      this.requestEndDT = other.requestEndDT;
    }
    if (other.isSetActualRepaymentStartDt()) {
      this.actualRepaymentStartDt = other.actualRepaymentStartDt;
    }
    if (other.isSetActualRepaymentEndDt()) {
      this.actualRepaymentEndDt = other.actualRepaymentEndDt;
    }
    this.shouldRepayStartAmt = other.shouldRepayStartAmt;
    this.shouldRepayEndAmt = other.shouldRepayEndAmt;
    if (other.isSetResults()) {
      List<FinanceDTO> __this__results = new ArrayList<FinanceDTO>(other.results.size());
      for (FinanceDTO other_element : other.results) {
        __this__results.add(other_element);
      }
      this.results = __this__results;
    }
  }

  public QueryConDTO deepCopy() {
    return new QueryConDTO(this);
  }

  @Override
  public void clear() {
    this.projectName = null;
    this.projectId = null;
    this.acctName = null;
    setAcctTypeIsSet(false);
    this.acctType = 0;
    setEcoTradeIsSet(false);
    this.ecoTrade = 0;
    this.expireStartDt = null;
    this.expireEndDt = null;
    setOverdueStartDayIsSet(false);
    this.overdueStartDay = 0;
    setOverdueEndDayIsSet(false);
    this.overdueEndDay = 0;
    this.requestStartDt = null;
    this.requestEndDT = null;
    this.actualRepaymentStartDt = null;
    this.actualRepaymentEndDt = null;
    setShouldRepayStartAmtIsSet(false);
    this.shouldRepayStartAmt = 0.0;
    setShouldRepayEndAmtIsSet(false);
    this.shouldRepayEndAmt = 0.0;
    this.results = null;
  }

  public String getProjectName() {
    return this.projectName;
  }

  public QueryConDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public QueryConDTO setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public QueryConDTO setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public int getAcctType() {
    return this.acctType;
  }

  public QueryConDTO setAcctType(int acctType) {
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    return this;
  }

  public void unsetAcctType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  public void setAcctTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTTYPE_ISSET_ID, value);
  }

  public int getEcoTrade() {
    return this.ecoTrade;
  }

  public QueryConDTO setEcoTrade(int ecoTrade) {
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    return this;
  }

  public void unsetEcoTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  public void setEcoTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECOTRADE_ISSET_ID, value);
  }

  public String getExpireStartDt() {
    return this.expireStartDt;
  }

  public QueryConDTO setExpireStartDt(String expireStartDt) {
    this.expireStartDt = expireStartDt;
    return this;
  }

  public void unsetExpireStartDt() {
    this.expireStartDt = null;
  }

  /** Returns true if field expireStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireStartDt() {
    return this.expireStartDt != null;
  }

  public void setExpireStartDtIsSet(boolean value) {
    if (!value) {
      this.expireStartDt = null;
    }
  }

  public String getExpireEndDt() {
    return this.expireEndDt;
  }

  public QueryConDTO setExpireEndDt(String expireEndDt) {
    this.expireEndDt = expireEndDt;
    return this;
  }

  public void unsetExpireEndDt() {
    this.expireEndDt = null;
  }

  /** Returns true if field expireEndDt is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireEndDt() {
    return this.expireEndDt != null;
  }

  public void setExpireEndDtIsSet(boolean value) {
    if (!value) {
      this.expireEndDt = null;
    }
  }

  public int getOverdueStartDay() {
    return this.overdueStartDay;
  }

  public QueryConDTO setOverdueStartDay(int overdueStartDay) {
    this.overdueStartDay = overdueStartDay;
    setOverdueStartDayIsSet(true);
    return this;
  }

  public void unsetOverdueStartDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUESTARTDAY_ISSET_ID);
  }

  /** Returns true if field overdueStartDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueStartDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUESTARTDAY_ISSET_ID);
  }

  public void setOverdueStartDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUESTARTDAY_ISSET_ID, value);
  }

  public int getOverdueEndDay() {
    return this.overdueEndDay;
  }

  public QueryConDTO setOverdueEndDay(int overdueEndDay) {
    this.overdueEndDay = overdueEndDay;
    setOverdueEndDayIsSet(true);
    return this;
  }

  public void unsetOverdueEndDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEENDDAY_ISSET_ID);
  }

  /** Returns true if field overdueEndDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueEndDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEENDDAY_ISSET_ID);
  }

  public void setOverdueEndDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEENDDAY_ISSET_ID, value);
  }

  public String getRequestStartDt() {
    return this.requestStartDt;
  }

  public QueryConDTO setRequestStartDt(String requestStartDt) {
    this.requestStartDt = requestStartDt;
    return this;
  }

  public void unsetRequestStartDt() {
    this.requestStartDt = null;
  }

  /** Returns true if field requestStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStartDt() {
    return this.requestStartDt != null;
  }

  public void setRequestStartDtIsSet(boolean value) {
    if (!value) {
      this.requestStartDt = null;
    }
  }

  public String getRequestEndDT() {
    return this.requestEndDT;
  }

  public QueryConDTO setRequestEndDT(String requestEndDT) {
    this.requestEndDT = requestEndDT;
    return this;
  }

  public void unsetRequestEndDT() {
    this.requestEndDT = null;
  }

  /** Returns true if field requestEndDT is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestEndDT() {
    return this.requestEndDT != null;
  }

  public void setRequestEndDTIsSet(boolean value) {
    if (!value) {
      this.requestEndDT = null;
    }
  }

  public String getActualRepaymentStartDt() {
    return this.actualRepaymentStartDt;
  }

  public QueryConDTO setActualRepaymentStartDt(String actualRepaymentStartDt) {
    this.actualRepaymentStartDt = actualRepaymentStartDt;
    return this;
  }

  public void unsetActualRepaymentStartDt() {
    this.actualRepaymentStartDt = null;
  }

  /** Returns true if field actualRepaymentStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualRepaymentStartDt() {
    return this.actualRepaymentStartDt != null;
  }

  public void setActualRepaymentStartDtIsSet(boolean value) {
    if (!value) {
      this.actualRepaymentStartDt = null;
    }
  }

  public String getActualRepaymentEndDt() {
    return this.actualRepaymentEndDt;
  }

  public QueryConDTO setActualRepaymentEndDt(String actualRepaymentEndDt) {
    this.actualRepaymentEndDt = actualRepaymentEndDt;
    return this;
  }

  public void unsetActualRepaymentEndDt() {
    this.actualRepaymentEndDt = null;
  }

  /** Returns true if field actualRepaymentEndDt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualRepaymentEndDt() {
    return this.actualRepaymentEndDt != null;
  }

  public void setActualRepaymentEndDtIsSet(boolean value) {
    if (!value) {
      this.actualRepaymentEndDt = null;
    }
  }

  public double getShouldRepayStartAmt() {
    return this.shouldRepayStartAmt;
  }

  public QueryConDTO setShouldRepayStartAmt(double shouldRepayStartAmt) {
    this.shouldRepayStartAmt = shouldRepayStartAmt;
    setShouldRepayStartAmtIsSet(true);
    return this;
  }

  public void unsetShouldRepayStartAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDREPAYSTARTAMT_ISSET_ID);
  }

  /** Returns true if field shouldRepayStartAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldRepayStartAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDREPAYSTARTAMT_ISSET_ID);
  }

  public void setShouldRepayStartAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDREPAYSTARTAMT_ISSET_ID, value);
  }

  public double getShouldRepayEndAmt() {
    return this.shouldRepayEndAmt;
  }

  public QueryConDTO setShouldRepayEndAmt(double shouldRepayEndAmt) {
    this.shouldRepayEndAmt = shouldRepayEndAmt;
    setShouldRepayEndAmtIsSet(true);
    return this;
  }

  public void unsetShouldRepayEndAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDREPAYENDAMT_ISSET_ID);
  }

  /** Returns true if field shouldRepayEndAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldRepayEndAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDREPAYENDAMT_ISSET_ID);
  }

  public void setShouldRepayEndAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDREPAYENDAMT_ISSET_ID, value);
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<FinanceDTO> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(FinanceDTO elem) {
    if (this.results == null) {
      this.results = new ArrayList<FinanceDTO>();
    }
    this.results.add(elem);
  }

  public List<FinanceDTO> getResults() {
    return this.results;
  }

  public QueryConDTO setResults(List<FinanceDTO> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((Integer)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((Integer)value);
      }
      break;

    case EXPIRE_START_DT:
      if (value == null) {
        unsetExpireStartDt();
      } else {
        setExpireStartDt((String)value);
      }
      break;

    case EXPIRE_END_DT:
      if (value == null) {
        unsetExpireEndDt();
      } else {
        setExpireEndDt((String)value);
      }
      break;

    case OVERDUE_START_DAY:
      if (value == null) {
        unsetOverdueStartDay();
      } else {
        setOverdueStartDay((Integer)value);
      }
      break;

    case OVERDUE_END_DAY:
      if (value == null) {
        unsetOverdueEndDay();
      } else {
        setOverdueEndDay((Integer)value);
      }
      break;

    case REQUEST_START_DT:
      if (value == null) {
        unsetRequestStartDt();
      } else {
        setRequestStartDt((String)value);
      }
      break;

    case REQUEST_END_DT:
      if (value == null) {
        unsetRequestEndDT();
      } else {
        setRequestEndDT((String)value);
      }
      break;

    case ACTUAL_REPAYMENT_START_DT:
      if (value == null) {
        unsetActualRepaymentStartDt();
      } else {
        setActualRepaymentStartDt((String)value);
      }
      break;

    case ACTUAL_REPAYMENT_END_DT:
      if (value == null) {
        unsetActualRepaymentEndDt();
      } else {
        setActualRepaymentEndDt((String)value);
      }
      break;

    case SHOULD_REPAY_START_AMT:
      if (value == null) {
        unsetShouldRepayStartAmt();
      } else {
        setShouldRepayStartAmt((Double)value);
      }
      break;

    case SHOULD_REPAY_END_AMT:
      if (value == null) {
        unsetShouldRepayEndAmt();
      } else {
        setShouldRepayEndAmt((Double)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<FinanceDTO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_ID:
      return getProjectId();

    case ACCT_NAME:
      return getAcctName();

    case ACCT_TYPE:
      return Integer.valueOf(getAcctType());

    case ECO_TRADE:
      return Integer.valueOf(getEcoTrade());

    case EXPIRE_START_DT:
      return getExpireStartDt();

    case EXPIRE_END_DT:
      return getExpireEndDt();

    case OVERDUE_START_DAY:
      return Integer.valueOf(getOverdueStartDay());

    case OVERDUE_END_DAY:
      return Integer.valueOf(getOverdueEndDay());

    case REQUEST_START_DT:
      return getRequestStartDt();

    case REQUEST_END_DT:
      return getRequestEndDT();

    case ACTUAL_REPAYMENT_START_DT:
      return getActualRepaymentStartDt();

    case ACTUAL_REPAYMENT_END_DT:
      return getActualRepaymentEndDt();

    case SHOULD_REPAY_START_AMT:
      return Double.valueOf(getShouldRepayStartAmt());

    case SHOULD_REPAY_END_AMT:
      return Double.valueOf(getShouldRepayEndAmt());

    case RESULTS:
      return getResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_NAME:
      return isSetAcctName();
    case ACCT_TYPE:
      return isSetAcctType();
    case ECO_TRADE:
      return isSetEcoTrade();
    case EXPIRE_START_DT:
      return isSetExpireStartDt();
    case EXPIRE_END_DT:
      return isSetExpireEndDt();
    case OVERDUE_START_DAY:
      return isSetOverdueStartDay();
    case OVERDUE_END_DAY:
      return isSetOverdueEndDay();
    case REQUEST_START_DT:
      return isSetRequestStartDt();
    case REQUEST_END_DT:
      return isSetRequestEndDT();
    case ACTUAL_REPAYMENT_START_DT:
      return isSetActualRepaymentStartDt();
    case ACTUAL_REPAYMENT_END_DT:
      return isSetActualRepaymentEndDt();
    case SHOULD_REPAY_START_AMT:
      return isSetShouldRepayStartAmt();
    case SHOULD_REPAY_END_AMT:
      return isSetShouldRepayEndAmt();
    case RESULTS:
      return isSetResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryConDTO)
      return this.equals((QueryConDTO)that);
    return false;
  }

  public boolean equals(QueryConDTO that) {
    if (that == null)
      return false;

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_acctType = true;
    boolean that_present_acctType = true;
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (this.acctType != that.acctType)
        return false;
    }

    boolean this_present_ecoTrade = true;
    boolean that_present_ecoTrade = true;
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (this.ecoTrade != that.ecoTrade)
        return false;
    }

    boolean this_present_expireStartDt = true && this.isSetExpireStartDt();
    boolean that_present_expireStartDt = true && that.isSetExpireStartDt();
    if (this_present_expireStartDt || that_present_expireStartDt) {
      if (!(this_present_expireStartDt && that_present_expireStartDt))
        return false;
      if (!this.expireStartDt.equals(that.expireStartDt))
        return false;
    }

    boolean this_present_expireEndDt = true && this.isSetExpireEndDt();
    boolean that_present_expireEndDt = true && that.isSetExpireEndDt();
    if (this_present_expireEndDt || that_present_expireEndDt) {
      if (!(this_present_expireEndDt && that_present_expireEndDt))
        return false;
      if (!this.expireEndDt.equals(that.expireEndDt))
        return false;
    }

    boolean this_present_overdueStartDay = true;
    boolean that_present_overdueStartDay = true;
    if (this_present_overdueStartDay || that_present_overdueStartDay) {
      if (!(this_present_overdueStartDay && that_present_overdueStartDay))
        return false;
      if (this.overdueStartDay != that.overdueStartDay)
        return false;
    }

    boolean this_present_overdueEndDay = true;
    boolean that_present_overdueEndDay = true;
    if (this_present_overdueEndDay || that_present_overdueEndDay) {
      if (!(this_present_overdueEndDay && that_present_overdueEndDay))
        return false;
      if (this.overdueEndDay != that.overdueEndDay)
        return false;
    }

    boolean this_present_requestStartDt = true && this.isSetRequestStartDt();
    boolean that_present_requestStartDt = true && that.isSetRequestStartDt();
    if (this_present_requestStartDt || that_present_requestStartDt) {
      if (!(this_present_requestStartDt && that_present_requestStartDt))
        return false;
      if (!this.requestStartDt.equals(that.requestStartDt))
        return false;
    }

    boolean this_present_requestEndDT = true && this.isSetRequestEndDT();
    boolean that_present_requestEndDT = true && that.isSetRequestEndDT();
    if (this_present_requestEndDT || that_present_requestEndDT) {
      if (!(this_present_requestEndDT && that_present_requestEndDT))
        return false;
      if (!this.requestEndDT.equals(that.requestEndDT))
        return false;
    }

    boolean this_present_actualRepaymentStartDt = true && this.isSetActualRepaymentStartDt();
    boolean that_present_actualRepaymentStartDt = true && that.isSetActualRepaymentStartDt();
    if (this_present_actualRepaymentStartDt || that_present_actualRepaymentStartDt) {
      if (!(this_present_actualRepaymentStartDt && that_present_actualRepaymentStartDt))
        return false;
      if (!this.actualRepaymentStartDt.equals(that.actualRepaymentStartDt))
        return false;
    }

    boolean this_present_actualRepaymentEndDt = true && this.isSetActualRepaymentEndDt();
    boolean that_present_actualRepaymentEndDt = true && that.isSetActualRepaymentEndDt();
    if (this_present_actualRepaymentEndDt || that_present_actualRepaymentEndDt) {
      if (!(this_present_actualRepaymentEndDt && that_present_actualRepaymentEndDt))
        return false;
      if (!this.actualRepaymentEndDt.equals(that.actualRepaymentEndDt))
        return false;
    }

    boolean this_present_shouldRepayStartAmt = true;
    boolean that_present_shouldRepayStartAmt = true;
    if (this_present_shouldRepayStartAmt || that_present_shouldRepayStartAmt) {
      if (!(this_present_shouldRepayStartAmt && that_present_shouldRepayStartAmt))
        return false;
      if (this.shouldRepayStartAmt != that.shouldRepayStartAmt)
        return false;
    }

    boolean this_present_shouldRepayEndAmt = true;
    boolean that_present_shouldRepayEndAmt = true;
    if (this_present_shouldRepayEndAmt || that_present_shouldRepayEndAmt) {
      if (!(this_present_shouldRepayEndAmt && that_present_shouldRepayEndAmt))
        return false;
      if (this.shouldRepayEndAmt != that.shouldRepayEndAmt)
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_acctType = true;
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_ecoTrade = true;
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_expireStartDt = true && (isSetExpireStartDt());
    list.add(present_expireStartDt);
    if (present_expireStartDt)
      list.add(expireStartDt);

    boolean present_expireEndDt = true && (isSetExpireEndDt());
    list.add(present_expireEndDt);
    if (present_expireEndDt)
      list.add(expireEndDt);

    boolean present_overdueStartDay = true;
    list.add(present_overdueStartDay);
    if (present_overdueStartDay)
      list.add(overdueStartDay);

    boolean present_overdueEndDay = true;
    list.add(present_overdueEndDay);
    if (present_overdueEndDay)
      list.add(overdueEndDay);

    boolean present_requestStartDt = true && (isSetRequestStartDt());
    list.add(present_requestStartDt);
    if (present_requestStartDt)
      list.add(requestStartDt);

    boolean present_requestEndDT = true && (isSetRequestEndDT());
    list.add(present_requestEndDT);
    if (present_requestEndDT)
      list.add(requestEndDT);

    boolean present_actualRepaymentStartDt = true && (isSetActualRepaymentStartDt());
    list.add(present_actualRepaymentStartDt);
    if (present_actualRepaymentStartDt)
      list.add(actualRepaymentStartDt);

    boolean present_actualRepaymentEndDt = true && (isSetActualRepaymentEndDt());
    list.add(present_actualRepaymentEndDt);
    if (present_actualRepaymentEndDt)
      list.add(actualRepaymentEndDt);

    boolean present_shouldRepayStartAmt = true;
    list.add(present_shouldRepayStartAmt);
    if (present_shouldRepayStartAmt)
      list.add(shouldRepayStartAmt);

    boolean present_shouldRepayEndAmt = true;
    list.add(present_shouldRepayEndAmt);
    if (present_shouldRepayEndAmt)
      list.add(shouldRepayEndAmt);

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryConDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireStartDt()).compareTo(other.isSetExpireStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireStartDt, other.expireStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireEndDt()).compareTo(other.isSetExpireEndDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireEndDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireEndDt, other.expireEndDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueStartDay()).compareTo(other.isSetOverdueStartDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueStartDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueStartDay, other.overdueStartDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueEndDay()).compareTo(other.isSetOverdueEndDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueEndDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueEndDay, other.overdueEndDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStartDt()).compareTo(other.isSetRequestStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStartDt, other.requestStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestEndDT()).compareTo(other.isSetRequestEndDT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestEndDT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestEndDT, other.requestEndDT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualRepaymentStartDt()).compareTo(other.isSetActualRepaymentStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualRepaymentStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualRepaymentStartDt, other.actualRepaymentStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualRepaymentEndDt()).compareTo(other.isSetActualRepaymentEndDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualRepaymentEndDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualRepaymentEndDt, other.actualRepaymentEndDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldRepayStartAmt()).compareTo(other.isSetShouldRepayStartAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldRepayStartAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldRepayStartAmt, other.shouldRepayStartAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldRepayEndAmt()).compareTo(other.isSetShouldRepayEndAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldRepayEndAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldRepayEndAmt, other.shouldRepayEndAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryConDTO(");
    boolean first = true;

    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    sb.append(this.acctType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    sb.append(this.ecoTrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireStartDt:");
    if (this.expireStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.expireStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireEndDt:");
    if (this.expireEndDt == null) {
      sb.append("null");
    } else {
      sb.append(this.expireEndDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueStartDay:");
    sb.append(this.overdueStartDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueEndDay:");
    sb.append(this.overdueEndDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStartDt:");
    if (this.requestStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.requestStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestEndDT:");
    if (this.requestEndDT == null) {
      sb.append("null");
    } else {
      sb.append(this.requestEndDT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualRepaymentStartDt:");
    if (this.actualRepaymentStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.actualRepaymentStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualRepaymentEndDt:");
    if (this.actualRepaymentEndDt == null) {
      sb.append("null");
    } else {
      sb.append(this.actualRepaymentEndDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldRepayStartAmt:");
    sb.append(this.shouldRepayStartAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldRepayEndAmt:");
    sb.append(this.shouldRepayEndAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryConDTOStandardSchemeFactory implements SchemeFactory {
    public QueryConDTOStandardScheme getScheme() {
      return new QueryConDTOStandardScheme();
    }
  }

  private static class QueryConDTOStandardScheme extends StandardScheme<QueryConDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryConDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctType = iprot.readI32();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecoTrade = iprot.readI32();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPIRE_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expireStartDt = iprot.readString();
              struct.setExpireStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPIRE_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expireEndDt = iprot.readString();
              struct.setExpireEndDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OVERDUE_START_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueStartDay = iprot.readI32();
              struct.setOverdueStartDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OVERDUE_END_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueEndDay = iprot.readI32();
              struct.setOverdueEndDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUEST_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestStartDt = iprot.readString();
              struct.setRequestStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQUEST_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestEndDT = iprot.readString();
              struct.setRequestEndDTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACTUAL_REPAYMENT_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualRepaymentStartDt = iprot.readString();
              struct.setActualRepaymentStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTUAL_REPAYMENT_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualRepaymentEndDt = iprot.readString();
              struct.setActualRepaymentEndDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHOULD_REPAY_START_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldRepayStartAmt = iprot.readDouble();
              struct.setShouldRepayStartAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SHOULD_REPAY_END_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldRepayEndAmt = iprot.readDouble();
              struct.setShouldRepayEndAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.results = new ArrayList<FinanceDTO>(_list32.size);
                FinanceDTO _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new FinanceDTO();
                  _elem33.read(iprot);
                  struct.results.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryConDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.acctType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
      oprot.writeI32(struct.ecoTrade);
      oprot.writeFieldEnd();
      if (struct.expireStartDt != null) {
        oprot.writeFieldBegin(EXPIRE_START_DT_FIELD_DESC);
        oprot.writeString(struct.expireStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.expireEndDt != null) {
        oprot.writeFieldBegin(EXPIRE_END_DT_FIELD_DESC);
        oprot.writeString(struct.expireEndDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_START_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueStartDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_END_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueEndDay);
      oprot.writeFieldEnd();
      if (struct.requestStartDt != null) {
        oprot.writeFieldBegin(REQUEST_START_DT_FIELD_DESC);
        oprot.writeString(struct.requestStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.requestEndDT != null) {
        oprot.writeFieldBegin(REQUEST_END_DT_FIELD_DESC);
        oprot.writeString(struct.requestEndDT);
        oprot.writeFieldEnd();
      }
      if (struct.actualRepaymentStartDt != null) {
        oprot.writeFieldBegin(ACTUAL_REPAYMENT_START_DT_FIELD_DESC);
        oprot.writeString(struct.actualRepaymentStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.actualRepaymentEndDt != null) {
        oprot.writeFieldBegin(ACTUAL_REPAYMENT_END_DT_FIELD_DESC);
        oprot.writeString(struct.actualRepaymentEndDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOULD_REPAY_START_AMT_FIELD_DESC);
      oprot.writeDouble(struct.shouldRepayStartAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_REPAY_END_AMT_FIELD_DESC);
      oprot.writeDouble(struct.shouldRepayEndAmt);
      oprot.writeFieldEnd();
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (FinanceDTO _iter35 : struct.results)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryConDTOTupleSchemeFactory implements SchemeFactory {
    public QueryConDTOTupleScheme getScheme() {
      return new QueryConDTOTupleScheme();
    }
  }

  private static class QueryConDTOTupleScheme extends TupleScheme<QueryConDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryConDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectName()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetAcctName()) {
        optionals.set(2);
      }
      if (struct.isSetAcctType()) {
        optionals.set(3);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(4);
      }
      if (struct.isSetExpireStartDt()) {
        optionals.set(5);
      }
      if (struct.isSetExpireEndDt()) {
        optionals.set(6);
      }
      if (struct.isSetOverdueStartDay()) {
        optionals.set(7);
      }
      if (struct.isSetOverdueEndDay()) {
        optionals.set(8);
      }
      if (struct.isSetRequestStartDt()) {
        optionals.set(9);
      }
      if (struct.isSetRequestEndDT()) {
        optionals.set(10);
      }
      if (struct.isSetActualRepaymentStartDt()) {
        optionals.set(11);
      }
      if (struct.isSetActualRepaymentEndDt()) {
        optionals.set(12);
      }
      if (struct.isSetShouldRepayStartAmt()) {
        optionals.set(13);
      }
      if (struct.isSetShouldRepayEndAmt()) {
        optionals.set(14);
      }
      if (struct.isSetResults()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetAcctType()) {
        oprot.writeI32(struct.acctType);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeI32(struct.ecoTrade);
      }
      if (struct.isSetExpireStartDt()) {
        oprot.writeString(struct.expireStartDt);
      }
      if (struct.isSetExpireEndDt()) {
        oprot.writeString(struct.expireEndDt);
      }
      if (struct.isSetOverdueStartDay()) {
        oprot.writeI32(struct.overdueStartDay);
      }
      if (struct.isSetOverdueEndDay()) {
        oprot.writeI32(struct.overdueEndDay);
      }
      if (struct.isSetRequestStartDt()) {
        oprot.writeString(struct.requestStartDt);
      }
      if (struct.isSetRequestEndDT()) {
        oprot.writeString(struct.requestEndDT);
      }
      if (struct.isSetActualRepaymentStartDt()) {
        oprot.writeString(struct.actualRepaymentStartDt);
      }
      if (struct.isSetActualRepaymentEndDt()) {
        oprot.writeString(struct.actualRepaymentEndDt);
      }
      if (struct.isSetShouldRepayStartAmt()) {
        oprot.writeDouble(struct.shouldRepayStartAmt);
      }
      if (struct.isSetShouldRepayEndAmt()) {
        oprot.writeDouble(struct.shouldRepayEndAmt);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (FinanceDTO _iter36 : struct.results)
          {
            _iter36.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryConDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.acctType = iprot.readI32();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ecoTrade = iprot.readI32();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expireStartDt = iprot.readString();
        struct.setExpireStartDtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.expireEndDt = iprot.readString();
        struct.setExpireEndDtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.overdueStartDay = iprot.readI32();
        struct.setOverdueStartDayIsSet(true);
      }
      if (incoming.get(8)) {
        struct.overdueEndDay = iprot.readI32();
        struct.setOverdueEndDayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requestStartDt = iprot.readString();
        struct.setRequestStartDtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.requestEndDT = iprot.readString();
        struct.setRequestEndDTIsSet(true);
      }
      if (incoming.get(11)) {
        struct.actualRepaymentStartDt = iprot.readString();
        struct.setActualRepaymentStartDtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.actualRepaymentEndDt = iprot.readString();
        struct.setActualRepaymentEndDtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.shouldRepayStartAmt = iprot.readDouble();
        struct.setShouldRepayStartAmtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.shouldRepayEndAmt = iprot.readDouble();
        struct.setShouldRepayEndAmtIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<FinanceDTO>(_list37.size);
          FinanceDTO _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new FinanceDTO();
            _elem38.read(iprot);
            struct.results.add(_elem38);
          }
        }
        struct.setResultsIsSet(true);
      }
    }
  }

}


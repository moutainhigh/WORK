/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-4")
public class SysAreaInfoService {

  /**
   *   
   * @Title:
   * @Package
   * @Description: 系统地区广告
   * @author chenzhuzhen  
   * @date 2016年6月30日
   */
  public interface Iface {

    public List<SysAreaInfo> getSysAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException;

    public SysAreaInfo getSysAreaInfoByCode(String areaCode) throws org.apache.thrift.TException;

    public SysAreaInfo getSysAreaInfoByUserId(int userId) throws org.apache.thrift.TException;

    public SysAreaInfo getSysAreaInfoByName(String areaName) throws org.apache.thrift.TException;

    public List<SysAreaInfo> queryPagedAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException;

    public int countAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException;

    public int saveAreaInfo(SysAreaInfo sysAreaInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int batchDelete(String areaCode) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSysAreaInfo(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysAreaInfoByCode(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysAreaInfoByUserId(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysAreaInfoByName(String areaName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPagedAreaInfo(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countAreaInfo(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveAreaInfo(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchDelete(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<SysAreaInfo> getSysAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException
    {
      send_getSysAreaInfo(sysAreaInfo);
      return recv_getSysAreaInfo();
    }

    public void send_getSysAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException
    {
      getSysAreaInfo_args args = new getSysAreaInfo_args();
      args.setSysAreaInfo(sysAreaInfo);
      sendBase("getSysAreaInfo", args);
    }

    public List<SysAreaInfo> recv_getSysAreaInfo() throws org.apache.thrift.TException
    {
      getSysAreaInfo_result result = new getSysAreaInfo_result();
      receiveBase(result, "getSysAreaInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysAreaInfo failed: unknown result");
    }

    public SysAreaInfo getSysAreaInfoByCode(String areaCode) throws org.apache.thrift.TException
    {
      send_getSysAreaInfoByCode(areaCode);
      return recv_getSysAreaInfoByCode();
    }

    public void send_getSysAreaInfoByCode(String areaCode) throws org.apache.thrift.TException
    {
      getSysAreaInfoByCode_args args = new getSysAreaInfoByCode_args();
      args.setAreaCode(areaCode);
      sendBase("getSysAreaInfoByCode", args);
    }

    public SysAreaInfo recv_getSysAreaInfoByCode() throws org.apache.thrift.TException
    {
      getSysAreaInfoByCode_result result = new getSysAreaInfoByCode_result();
      receiveBase(result, "getSysAreaInfoByCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysAreaInfoByCode failed: unknown result");
    }

    public SysAreaInfo getSysAreaInfoByUserId(int userId) throws org.apache.thrift.TException
    {
      send_getSysAreaInfoByUserId(userId);
      return recv_getSysAreaInfoByUserId();
    }

    public void send_getSysAreaInfoByUserId(int userId) throws org.apache.thrift.TException
    {
      getSysAreaInfoByUserId_args args = new getSysAreaInfoByUserId_args();
      args.setUserId(userId);
      sendBase("getSysAreaInfoByUserId", args);
    }

    public SysAreaInfo recv_getSysAreaInfoByUserId() throws org.apache.thrift.TException
    {
      getSysAreaInfoByUserId_result result = new getSysAreaInfoByUserId_result();
      receiveBase(result, "getSysAreaInfoByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysAreaInfoByUserId failed: unknown result");
    }

    public SysAreaInfo getSysAreaInfoByName(String areaName) throws org.apache.thrift.TException
    {
      send_getSysAreaInfoByName(areaName);
      return recv_getSysAreaInfoByName();
    }

    public void send_getSysAreaInfoByName(String areaName) throws org.apache.thrift.TException
    {
      getSysAreaInfoByName_args args = new getSysAreaInfoByName_args();
      args.setAreaName(areaName);
      sendBase("getSysAreaInfoByName", args);
    }

    public SysAreaInfo recv_getSysAreaInfoByName() throws org.apache.thrift.TException
    {
      getSysAreaInfoByName_result result = new getSysAreaInfoByName_result();
      receiveBase(result, "getSysAreaInfoByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysAreaInfoByName failed: unknown result");
    }

    public List<SysAreaInfo> queryPagedAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException
    {
      send_queryPagedAreaInfo(sysAreaInfo);
      return recv_queryPagedAreaInfo();
    }

    public void send_queryPagedAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException
    {
      queryPagedAreaInfo_args args = new queryPagedAreaInfo_args();
      args.setSysAreaInfo(sysAreaInfo);
      sendBase("queryPagedAreaInfo", args);
    }

    public List<SysAreaInfo> recv_queryPagedAreaInfo() throws org.apache.thrift.TException
    {
      queryPagedAreaInfo_result result = new queryPagedAreaInfo_result();
      receiveBase(result, "queryPagedAreaInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPagedAreaInfo failed: unknown result");
    }

    public int countAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException
    {
      send_countAreaInfo(sysAreaInfo);
      return recv_countAreaInfo();
    }

    public void send_countAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException
    {
      countAreaInfo_args args = new countAreaInfo_args();
      args.setSysAreaInfo(sysAreaInfo);
      sendBase("countAreaInfo", args);
    }

    public int recv_countAreaInfo() throws org.apache.thrift.TException
    {
      countAreaInfo_result result = new countAreaInfo_result();
      receiveBase(result, "countAreaInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countAreaInfo failed: unknown result");
    }

    public int saveAreaInfo(SysAreaInfo sysAreaInfo) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveAreaInfo(sysAreaInfo);
      return recv_saveAreaInfo();
    }

    public void send_saveAreaInfo(SysAreaInfo sysAreaInfo) throws org.apache.thrift.TException
    {
      saveAreaInfo_args args = new saveAreaInfo_args();
      args.setSysAreaInfo(sysAreaInfo);
      sendBase("saveAreaInfo", args);
    }

    public int recv_saveAreaInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveAreaInfo_result result = new saveAreaInfo_result();
      receiveBase(result, "saveAreaInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveAreaInfo failed: unknown result");
    }

    public int batchDelete(String areaCode) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_batchDelete(areaCode);
      return recv_batchDelete();
    }

    public void send_batchDelete(String areaCode) throws org.apache.thrift.TException
    {
      batchDelete_args args = new batchDelete_args();
      args.setAreaCode(areaCode);
      sendBase("batchDelete", args);
    }

    public int recv_batchDelete() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      batchDelete_result result = new batchDelete_result();
      receiveBase(result, "batchDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchDelete failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSysAreaInfo(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysAreaInfo_call method_call = new getSysAreaInfo_call(sysAreaInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysAreaInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysAreaInfo sysAreaInfo;
      public getSysAreaInfo_call(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysAreaInfo = sysAreaInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysAreaInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysAreaInfo_args args = new getSysAreaInfo_args();
        args.setSysAreaInfo(sysAreaInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysAreaInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysAreaInfo();
      }
    }

    public void getSysAreaInfoByCode(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysAreaInfoByCode_call method_call = new getSysAreaInfoByCode_call(areaCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysAreaInfoByCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String areaCode;
      public getSysAreaInfoByCode_call(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.areaCode = areaCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysAreaInfoByCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysAreaInfoByCode_args args = new getSysAreaInfoByCode_args();
        args.setAreaCode(areaCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysAreaInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysAreaInfoByCode();
      }
    }

    public void getSysAreaInfoByUserId(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysAreaInfoByUserId_call method_call = new getSysAreaInfoByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysAreaInfoByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getSysAreaInfoByUserId_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysAreaInfoByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysAreaInfoByUserId_args args = new getSysAreaInfoByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysAreaInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysAreaInfoByUserId();
      }
    }

    public void getSysAreaInfoByName(String areaName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysAreaInfoByName_call method_call = new getSysAreaInfoByName_call(areaName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysAreaInfoByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String areaName;
      public getSysAreaInfoByName_call(String areaName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.areaName = areaName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysAreaInfoByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysAreaInfoByName_args args = new getSysAreaInfoByName_args();
        args.setAreaName(areaName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysAreaInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysAreaInfoByName();
      }
    }

    public void queryPagedAreaInfo(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPagedAreaInfo_call method_call = new queryPagedAreaInfo_call(sysAreaInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPagedAreaInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysAreaInfo sysAreaInfo;
      public queryPagedAreaInfo_call(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysAreaInfo = sysAreaInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPagedAreaInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPagedAreaInfo_args args = new queryPagedAreaInfo_args();
        args.setSysAreaInfo(sysAreaInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysAreaInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPagedAreaInfo();
      }
    }

    public void countAreaInfo(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countAreaInfo_call method_call = new countAreaInfo_call(sysAreaInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countAreaInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysAreaInfo sysAreaInfo;
      public countAreaInfo_call(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysAreaInfo = sysAreaInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countAreaInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countAreaInfo_args args = new countAreaInfo_args();
        args.setSysAreaInfo(sysAreaInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countAreaInfo();
      }
    }

    public void saveAreaInfo(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAreaInfo_call method_call = new saveAreaInfo_call(sysAreaInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveAreaInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysAreaInfo sysAreaInfo;
      public saveAreaInfo_call(SysAreaInfo sysAreaInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysAreaInfo = sysAreaInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAreaInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAreaInfo_args args = new saveAreaInfo_args();
        args.setSysAreaInfo(sysAreaInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveAreaInfo();
      }
    }

    public void batchDelete(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchDelete_call method_call = new batchDelete_call(areaCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String areaCode;
      public batchDelete_call(String areaCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.areaCode = areaCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchDelete_args args = new batchDelete_args();
        args.setAreaCode(areaCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchDelete();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSysAreaInfo", new getSysAreaInfo());
      processMap.put("getSysAreaInfoByCode", new getSysAreaInfoByCode());
      processMap.put("getSysAreaInfoByUserId", new getSysAreaInfoByUserId());
      processMap.put("getSysAreaInfoByName", new getSysAreaInfoByName());
      processMap.put("queryPagedAreaInfo", new queryPagedAreaInfo());
      processMap.put("countAreaInfo", new countAreaInfo());
      processMap.put("saveAreaInfo", new saveAreaInfo());
      processMap.put("batchDelete", new batchDelete());
      return processMap;
    }

    public static class getSysAreaInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysAreaInfo_args> {
      public getSysAreaInfo() {
        super("getSysAreaInfo");
      }

      public getSysAreaInfo_args getEmptyArgsInstance() {
        return new getSysAreaInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysAreaInfo_result getResult(I iface, getSysAreaInfo_args args) throws org.apache.thrift.TException {
        getSysAreaInfo_result result = new getSysAreaInfo_result();
        result.success = iface.getSysAreaInfo(args.sysAreaInfo);
        return result;
      }
    }

    public static class getSysAreaInfoByCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysAreaInfoByCode_args> {
      public getSysAreaInfoByCode() {
        super("getSysAreaInfoByCode");
      }

      public getSysAreaInfoByCode_args getEmptyArgsInstance() {
        return new getSysAreaInfoByCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysAreaInfoByCode_result getResult(I iface, getSysAreaInfoByCode_args args) throws org.apache.thrift.TException {
        getSysAreaInfoByCode_result result = new getSysAreaInfoByCode_result();
        result.success = iface.getSysAreaInfoByCode(args.areaCode);
        return result;
      }
    }

    public static class getSysAreaInfoByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysAreaInfoByUserId_args> {
      public getSysAreaInfoByUserId() {
        super("getSysAreaInfoByUserId");
      }

      public getSysAreaInfoByUserId_args getEmptyArgsInstance() {
        return new getSysAreaInfoByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysAreaInfoByUserId_result getResult(I iface, getSysAreaInfoByUserId_args args) throws org.apache.thrift.TException {
        getSysAreaInfoByUserId_result result = new getSysAreaInfoByUserId_result();
        result.success = iface.getSysAreaInfoByUserId(args.userId);
        return result;
      }
    }

    public static class getSysAreaInfoByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysAreaInfoByName_args> {
      public getSysAreaInfoByName() {
        super("getSysAreaInfoByName");
      }

      public getSysAreaInfoByName_args getEmptyArgsInstance() {
        return new getSysAreaInfoByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysAreaInfoByName_result getResult(I iface, getSysAreaInfoByName_args args) throws org.apache.thrift.TException {
        getSysAreaInfoByName_result result = new getSysAreaInfoByName_result();
        result.success = iface.getSysAreaInfoByName(args.areaName);
        return result;
      }
    }

    public static class queryPagedAreaInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPagedAreaInfo_args> {
      public queryPagedAreaInfo() {
        super("queryPagedAreaInfo");
      }

      public queryPagedAreaInfo_args getEmptyArgsInstance() {
        return new queryPagedAreaInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPagedAreaInfo_result getResult(I iface, queryPagedAreaInfo_args args) throws org.apache.thrift.TException {
        queryPagedAreaInfo_result result = new queryPagedAreaInfo_result();
        result.success = iface.queryPagedAreaInfo(args.sysAreaInfo);
        return result;
      }
    }

    public static class countAreaInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countAreaInfo_args> {
      public countAreaInfo() {
        super("countAreaInfo");
      }

      public countAreaInfo_args getEmptyArgsInstance() {
        return new countAreaInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countAreaInfo_result getResult(I iface, countAreaInfo_args args) throws org.apache.thrift.TException {
        countAreaInfo_result result = new countAreaInfo_result();
        result.success = iface.countAreaInfo(args.sysAreaInfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveAreaInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveAreaInfo_args> {
      public saveAreaInfo() {
        super("saveAreaInfo");
      }

      public saveAreaInfo_args getEmptyArgsInstance() {
        return new saveAreaInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveAreaInfo_result getResult(I iface, saveAreaInfo_args args) throws org.apache.thrift.TException {
        saveAreaInfo_result result = new saveAreaInfo_result();
        try {
          result.success = iface.saveAreaInfo(args.sysAreaInfo);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class batchDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchDelete_args> {
      public batchDelete() {
        super("batchDelete");
      }

      public batchDelete_args getEmptyArgsInstance() {
        return new batchDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchDelete_result getResult(I iface, batchDelete_args args) throws org.apache.thrift.TException {
        batchDelete_result result = new batchDelete_result();
        try {
          result.success = iface.batchDelete(args.areaCode);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSysAreaInfo", new getSysAreaInfo());
      processMap.put("getSysAreaInfoByCode", new getSysAreaInfoByCode());
      processMap.put("getSysAreaInfoByUserId", new getSysAreaInfoByUserId());
      processMap.put("getSysAreaInfoByName", new getSysAreaInfoByName());
      processMap.put("queryPagedAreaInfo", new queryPagedAreaInfo());
      processMap.put("countAreaInfo", new countAreaInfo());
      processMap.put("saveAreaInfo", new saveAreaInfo());
      processMap.put("batchDelete", new batchDelete());
      return processMap;
    }

    public static class getSysAreaInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysAreaInfo_args, List<SysAreaInfo>> {
      public getSysAreaInfo() {
        super("getSysAreaInfo");
      }

      public getSysAreaInfo_args getEmptyArgsInstance() {
        return new getSysAreaInfo_args();
      }

      public AsyncMethodCallback<List<SysAreaInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysAreaInfo>>() { 
          public void onComplete(List<SysAreaInfo> o) {
            getSysAreaInfo_result result = new getSysAreaInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysAreaInfo_result result = new getSysAreaInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysAreaInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysAreaInfo>> resultHandler) throws TException {
        iface.getSysAreaInfo(args.sysAreaInfo,resultHandler);
      }
    }

    public static class getSysAreaInfoByCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysAreaInfoByCode_args, SysAreaInfo> {
      public getSysAreaInfoByCode() {
        super("getSysAreaInfoByCode");
      }

      public getSysAreaInfoByCode_args getEmptyArgsInstance() {
        return new getSysAreaInfoByCode_args();
      }

      public AsyncMethodCallback<SysAreaInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SysAreaInfo>() { 
          public void onComplete(SysAreaInfo o) {
            getSysAreaInfoByCode_result result = new getSysAreaInfoByCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysAreaInfoByCode_result result = new getSysAreaInfoByCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysAreaInfoByCode_args args, org.apache.thrift.async.AsyncMethodCallback<SysAreaInfo> resultHandler) throws TException {
        iface.getSysAreaInfoByCode(args.areaCode,resultHandler);
      }
    }

    public static class getSysAreaInfoByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysAreaInfoByUserId_args, SysAreaInfo> {
      public getSysAreaInfoByUserId() {
        super("getSysAreaInfoByUserId");
      }

      public getSysAreaInfoByUserId_args getEmptyArgsInstance() {
        return new getSysAreaInfoByUserId_args();
      }

      public AsyncMethodCallback<SysAreaInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SysAreaInfo>() { 
          public void onComplete(SysAreaInfo o) {
            getSysAreaInfoByUserId_result result = new getSysAreaInfoByUserId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysAreaInfoByUserId_result result = new getSysAreaInfoByUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysAreaInfoByUserId_args args, org.apache.thrift.async.AsyncMethodCallback<SysAreaInfo> resultHandler) throws TException {
        iface.getSysAreaInfoByUserId(args.userId,resultHandler);
      }
    }

    public static class getSysAreaInfoByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysAreaInfoByName_args, SysAreaInfo> {
      public getSysAreaInfoByName() {
        super("getSysAreaInfoByName");
      }

      public getSysAreaInfoByName_args getEmptyArgsInstance() {
        return new getSysAreaInfoByName_args();
      }

      public AsyncMethodCallback<SysAreaInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SysAreaInfo>() { 
          public void onComplete(SysAreaInfo o) {
            getSysAreaInfoByName_result result = new getSysAreaInfoByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysAreaInfoByName_result result = new getSysAreaInfoByName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysAreaInfoByName_args args, org.apache.thrift.async.AsyncMethodCallback<SysAreaInfo> resultHandler) throws TException {
        iface.getSysAreaInfoByName(args.areaName,resultHandler);
      }
    }

    public static class queryPagedAreaInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPagedAreaInfo_args, List<SysAreaInfo>> {
      public queryPagedAreaInfo() {
        super("queryPagedAreaInfo");
      }

      public queryPagedAreaInfo_args getEmptyArgsInstance() {
        return new queryPagedAreaInfo_args();
      }

      public AsyncMethodCallback<List<SysAreaInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysAreaInfo>>() { 
          public void onComplete(List<SysAreaInfo> o) {
            queryPagedAreaInfo_result result = new queryPagedAreaInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPagedAreaInfo_result result = new queryPagedAreaInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPagedAreaInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysAreaInfo>> resultHandler) throws TException {
        iface.queryPagedAreaInfo(args.sysAreaInfo,resultHandler);
      }
    }

    public static class countAreaInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countAreaInfo_args, Integer> {
      public countAreaInfo() {
        super("countAreaInfo");
      }

      public countAreaInfo_args getEmptyArgsInstance() {
        return new countAreaInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countAreaInfo_result result = new countAreaInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countAreaInfo_result result = new countAreaInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countAreaInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countAreaInfo(args.sysAreaInfo,resultHandler);
      }
    }

    public static class saveAreaInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveAreaInfo_args, Integer> {
      public saveAreaInfo() {
        super("saveAreaInfo");
      }

      public saveAreaInfo_args getEmptyArgsInstance() {
        return new saveAreaInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveAreaInfo_result result = new saveAreaInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveAreaInfo_result result = new saveAreaInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveAreaInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveAreaInfo(args.sysAreaInfo,resultHandler);
      }
    }

    public static class batchDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchDelete_args, Integer> {
      public batchDelete() {
        super("batchDelete");
      }

      public batchDelete_args getEmptyArgsInstance() {
        return new batchDelete_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchDelete_result result = new batchDelete_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchDelete_result result = new batchDelete_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchDelete(args.areaCode,resultHandler);
      }
    }

  }

  public static class getSysAreaInfo_args implements org.apache.thrift.TBase<getSysAreaInfo_args, getSysAreaInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysAreaInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysAreaInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_AREA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysAreaInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysAreaInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysAreaInfo_argsTupleSchemeFactory());
    }

    public SysAreaInfo sysAreaInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_AREA_INFO((short)1, "sysAreaInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_AREA_INFO
            return SYS_AREA_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_AREA_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysAreaInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysAreaInfo_args.class, metaDataMap);
    }

    public getSysAreaInfo_args() {
    }

    public getSysAreaInfo_args(
      SysAreaInfo sysAreaInfo)
    {
      this();
      this.sysAreaInfo = sysAreaInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysAreaInfo_args(getSysAreaInfo_args other) {
      if (other.isSetSysAreaInfo()) {
        this.sysAreaInfo = new SysAreaInfo(other.sysAreaInfo);
      }
    }

    public getSysAreaInfo_args deepCopy() {
      return new getSysAreaInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysAreaInfo = null;
    }

    public SysAreaInfo getSysAreaInfo() {
      return this.sysAreaInfo;
    }

    public getSysAreaInfo_args setSysAreaInfo(SysAreaInfo sysAreaInfo) {
      this.sysAreaInfo = sysAreaInfo;
      return this;
    }

    public void unsetSysAreaInfo() {
      this.sysAreaInfo = null;
    }

    /** Returns true if field sysAreaInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysAreaInfo() {
      return this.sysAreaInfo != null;
    }

    public void setSysAreaInfoIsSet(boolean value) {
      if (!value) {
        this.sysAreaInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_AREA_INFO:
        if (value == null) {
          unsetSysAreaInfo();
        } else {
          setSysAreaInfo((SysAreaInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_AREA_INFO:
        return getSysAreaInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_AREA_INFO:
        return isSetSysAreaInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysAreaInfo_args)
        return this.equals((getSysAreaInfo_args)that);
      return false;
    }

    public boolean equals(getSysAreaInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysAreaInfo = true && this.isSetSysAreaInfo();
      boolean that_present_sysAreaInfo = true && that.isSetSysAreaInfo();
      if (this_present_sysAreaInfo || that_present_sysAreaInfo) {
        if (!(this_present_sysAreaInfo && that_present_sysAreaInfo))
          return false;
        if (!this.sysAreaInfo.equals(that.sysAreaInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysAreaInfo = true && (isSetSysAreaInfo());
      list.add(present_sysAreaInfo);
      if (present_sysAreaInfo)
        list.add(sysAreaInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysAreaInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysAreaInfo()).compareTo(other.isSetSysAreaInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysAreaInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysAreaInfo, other.sysAreaInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysAreaInfo_args(");
      boolean first = true;

      sb.append("sysAreaInfo:");
      if (this.sysAreaInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysAreaInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysAreaInfo != null) {
        sysAreaInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysAreaInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getSysAreaInfo_argsStandardScheme getScheme() {
        return new getSysAreaInfo_argsStandardScheme();
      }
    }

    private static class getSysAreaInfo_argsStandardScheme extends StandardScheme<getSysAreaInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysAreaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_AREA_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysAreaInfo = new SysAreaInfo();
                struct.sysAreaInfo.read(iprot);
                struct.setSysAreaInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysAreaInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysAreaInfo != null) {
          oprot.writeFieldBegin(SYS_AREA_INFO_FIELD_DESC);
          struct.sysAreaInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysAreaInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getSysAreaInfo_argsTupleScheme getScheme() {
        return new getSysAreaInfo_argsTupleScheme();
      }
    }

    private static class getSysAreaInfo_argsTupleScheme extends TupleScheme<getSysAreaInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysAreaInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysAreaInfo()) {
          struct.sysAreaInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysAreaInfo = new SysAreaInfo();
          struct.sysAreaInfo.read(iprot);
          struct.setSysAreaInfoIsSet(true);
        }
      }
    }

  }

  public static class getSysAreaInfo_result implements org.apache.thrift.TBase<getSysAreaInfo_result, getSysAreaInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysAreaInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysAreaInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysAreaInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysAreaInfo_resultTupleSchemeFactory());
    }

    public List<SysAreaInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysAreaInfo_result.class, metaDataMap);
    }

    public getSysAreaInfo_result() {
    }

    public getSysAreaInfo_result(
      List<SysAreaInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysAreaInfo_result(getSysAreaInfo_result other) {
      if (other.isSetSuccess()) {
        List<SysAreaInfo> __this__success = new ArrayList<SysAreaInfo>(other.success.size());
        for (SysAreaInfo other_element : other.success) {
          __this__success.add(new SysAreaInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSysAreaInfo_result deepCopy() {
      return new getSysAreaInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysAreaInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysAreaInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysAreaInfo>();
      }
      this.success.add(elem);
    }

    public List<SysAreaInfo> getSuccess() {
      return this.success;
    }

    public getSysAreaInfo_result setSuccess(List<SysAreaInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysAreaInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysAreaInfo_result)
        return this.equals((getSysAreaInfo_result)that);
      return false;
    }

    public boolean equals(getSysAreaInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysAreaInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysAreaInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysAreaInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getSysAreaInfo_resultStandardScheme getScheme() {
        return new getSysAreaInfo_resultStandardScheme();
      }
    }

    private static class getSysAreaInfo_resultStandardScheme extends StandardScheme<getSysAreaInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysAreaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list774 = iprot.readListBegin();
                  struct.success = new ArrayList<SysAreaInfo>(_list774.size);
                  SysAreaInfo _elem775;
                  for (int _i776 = 0; _i776 < _list774.size; ++_i776)
                  {
                    _elem775 = new SysAreaInfo();
                    _elem775.read(iprot);
                    struct.success.add(_elem775);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysAreaInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysAreaInfo _iter777 : struct.success)
            {
              _iter777.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysAreaInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getSysAreaInfo_resultTupleScheme getScheme() {
        return new getSysAreaInfo_resultTupleScheme();
      }
    }

    private static class getSysAreaInfo_resultTupleScheme extends TupleScheme<getSysAreaInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysAreaInfo _iter778 : struct.success)
            {
              _iter778.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list779 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysAreaInfo>(_list779.size);
            SysAreaInfo _elem780;
            for (int _i781 = 0; _i781 < _list779.size; ++_i781)
            {
              _elem780 = new SysAreaInfo();
              _elem780.read(iprot);
              struct.success.add(_elem780);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysAreaInfoByCode_args implements org.apache.thrift.TBase<getSysAreaInfoByCode_args, getSysAreaInfoByCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysAreaInfoByCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysAreaInfoByCode_args");

    private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysAreaInfoByCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysAreaInfoByCode_argsTupleSchemeFactory());
    }

    public String areaCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AREA_CODE((short)1, "areaCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AREA_CODE
            return AREA_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysAreaInfoByCode_args.class, metaDataMap);
    }

    public getSysAreaInfoByCode_args() {
    }

    public getSysAreaInfoByCode_args(
      String areaCode)
    {
      this();
      this.areaCode = areaCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysAreaInfoByCode_args(getSysAreaInfoByCode_args other) {
      if (other.isSetAreaCode()) {
        this.areaCode = other.areaCode;
      }
    }

    public getSysAreaInfoByCode_args deepCopy() {
      return new getSysAreaInfoByCode_args(this);
    }

    @Override
    public void clear() {
      this.areaCode = null;
    }

    public String getAreaCode() {
      return this.areaCode;
    }

    public getSysAreaInfoByCode_args setAreaCode(String areaCode) {
      this.areaCode = areaCode;
      return this;
    }

    public void unsetAreaCode() {
      this.areaCode = null;
    }

    /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaCode() {
      return this.areaCode != null;
    }

    public void setAreaCodeIsSet(boolean value) {
      if (!value) {
        this.areaCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AREA_CODE:
        if (value == null) {
          unsetAreaCode();
        } else {
          setAreaCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AREA_CODE:
        return getAreaCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AREA_CODE:
        return isSetAreaCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysAreaInfoByCode_args)
        return this.equals((getSysAreaInfoByCode_args)that);
      return false;
    }

    public boolean equals(getSysAreaInfoByCode_args that) {
      if (that == null)
        return false;

      boolean this_present_areaCode = true && this.isSetAreaCode();
      boolean that_present_areaCode = true && that.isSetAreaCode();
      if (this_present_areaCode || that_present_areaCode) {
        if (!(this_present_areaCode && that_present_areaCode))
          return false;
        if (!this.areaCode.equals(that.areaCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_areaCode = true && (isSetAreaCode());
      list.add(present_areaCode);
      if (present_areaCode)
        list.add(areaCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysAreaInfoByCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysAreaInfoByCode_args(");
      boolean first = true;

      sb.append("areaCode:");
      if (this.areaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.areaCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysAreaInfoByCode_argsStandardSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByCode_argsStandardScheme getScheme() {
        return new getSysAreaInfoByCode_argsStandardScheme();
      }
    }

    private static class getSysAreaInfoByCode_argsStandardScheme extends StandardScheme<getSysAreaInfoByCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysAreaInfoByCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaCode = iprot.readString();
                struct.setAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysAreaInfoByCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.areaCode != null) {
          oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.areaCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysAreaInfoByCode_argsTupleSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByCode_argsTupleScheme getScheme() {
        return new getSysAreaInfoByCode_argsTupleScheme();
      }
    }

    private static class getSysAreaInfoByCode_argsTupleScheme extends TupleScheme<getSysAreaInfoByCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAreaCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAreaCode()) {
          oprot.writeString(struct.areaCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.areaCode = iprot.readString();
          struct.setAreaCodeIsSet(true);
        }
      }
    }

  }

  public static class getSysAreaInfoByCode_result implements org.apache.thrift.TBase<getSysAreaInfoByCode_result, getSysAreaInfoByCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysAreaInfoByCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysAreaInfoByCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysAreaInfoByCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysAreaInfoByCode_resultTupleSchemeFactory());
    }

    public SysAreaInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysAreaInfoByCode_result.class, metaDataMap);
    }

    public getSysAreaInfoByCode_result() {
    }

    public getSysAreaInfoByCode_result(
      SysAreaInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysAreaInfoByCode_result(getSysAreaInfoByCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysAreaInfo(other.success);
      }
    }

    public getSysAreaInfoByCode_result deepCopy() {
      return new getSysAreaInfoByCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SysAreaInfo getSuccess() {
      return this.success;
    }

    public getSysAreaInfoByCode_result setSuccess(SysAreaInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysAreaInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysAreaInfoByCode_result)
        return this.equals((getSysAreaInfoByCode_result)that);
      return false;
    }

    public boolean equals(getSysAreaInfoByCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysAreaInfoByCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysAreaInfoByCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysAreaInfoByCode_resultStandardSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByCode_resultStandardScheme getScheme() {
        return new getSysAreaInfoByCode_resultStandardScheme();
      }
    }

    private static class getSysAreaInfoByCode_resultStandardScheme extends StandardScheme<getSysAreaInfoByCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysAreaInfoByCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysAreaInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysAreaInfoByCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysAreaInfoByCode_resultTupleSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByCode_resultTupleScheme getScheme() {
        return new getSysAreaInfoByCode_resultTupleScheme();
      }
    }

    private static class getSysAreaInfoByCode_resultTupleScheme extends TupleScheme<getSysAreaInfoByCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SysAreaInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysAreaInfoByUserId_args implements org.apache.thrift.TBase<getSysAreaInfoByUserId_args, getSysAreaInfoByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysAreaInfoByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysAreaInfoByUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysAreaInfoByUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysAreaInfoByUserId_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysAreaInfoByUserId_args.class, metaDataMap);
    }

    public getSysAreaInfoByUserId_args() {
    }

    public getSysAreaInfoByUserId_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysAreaInfoByUserId_args(getSysAreaInfoByUserId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getSysAreaInfoByUserId_args deepCopy() {
      return new getSysAreaInfoByUserId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getSysAreaInfoByUserId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Integer.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysAreaInfoByUserId_args)
        return this.equals((getSysAreaInfoByUserId_args)that);
      return false;
    }

    public boolean equals(getSysAreaInfoByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysAreaInfoByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysAreaInfoByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysAreaInfoByUserId_argsStandardSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByUserId_argsStandardScheme getScheme() {
        return new getSysAreaInfoByUserId_argsStandardScheme();
      }
    }

    private static class getSysAreaInfoByUserId_argsStandardScheme extends StandardScheme<getSysAreaInfoByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysAreaInfoByUserId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysAreaInfoByUserId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysAreaInfoByUserId_argsTupleSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByUserId_argsTupleScheme getScheme() {
        return new getSysAreaInfoByUserId_argsTupleScheme();
      }
    }

    private static class getSysAreaInfoByUserId_argsTupleScheme extends TupleScheme<getSysAreaInfoByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByUserId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getSysAreaInfoByUserId_result implements org.apache.thrift.TBase<getSysAreaInfoByUserId_result, getSysAreaInfoByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysAreaInfoByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysAreaInfoByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysAreaInfoByUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysAreaInfoByUserId_resultTupleSchemeFactory());
    }

    public SysAreaInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysAreaInfoByUserId_result.class, metaDataMap);
    }

    public getSysAreaInfoByUserId_result() {
    }

    public getSysAreaInfoByUserId_result(
      SysAreaInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysAreaInfoByUserId_result(getSysAreaInfoByUserId_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysAreaInfo(other.success);
      }
    }

    public getSysAreaInfoByUserId_result deepCopy() {
      return new getSysAreaInfoByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SysAreaInfo getSuccess() {
      return this.success;
    }

    public getSysAreaInfoByUserId_result setSuccess(SysAreaInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysAreaInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysAreaInfoByUserId_result)
        return this.equals((getSysAreaInfoByUserId_result)that);
      return false;
    }

    public boolean equals(getSysAreaInfoByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysAreaInfoByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysAreaInfoByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysAreaInfoByUserId_resultStandardSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByUserId_resultStandardScheme getScheme() {
        return new getSysAreaInfoByUserId_resultStandardScheme();
      }
    }

    private static class getSysAreaInfoByUserId_resultStandardScheme extends StandardScheme<getSysAreaInfoByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysAreaInfoByUserId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysAreaInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysAreaInfoByUserId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysAreaInfoByUserId_resultTupleSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByUserId_resultTupleScheme getScheme() {
        return new getSysAreaInfoByUserId_resultTupleScheme();
      }
    }

    private static class getSysAreaInfoByUserId_resultTupleScheme extends TupleScheme<getSysAreaInfoByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByUserId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SysAreaInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysAreaInfoByName_args implements org.apache.thrift.TBase<getSysAreaInfoByName_args, getSysAreaInfoByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysAreaInfoByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysAreaInfoByName_args");

    private static final org.apache.thrift.protocol.TField AREA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("areaName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysAreaInfoByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysAreaInfoByName_argsTupleSchemeFactory());
    }

    public String areaName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AREA_NAME((short)1, "areaName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AREA_NAME
            return AREA_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AREA_NAME, new org.apache.thrift.meta_data.FieldMetaData("areaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysAreaInfoByName_args.class, metaDataMap);
    }

    public getSysAreaInfoByName_args() {
    }

    public getSysAreaInfoByName_args(
      String areaName)
    {
      this();
      this.areaName = areaName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysAreaInfoByName_args(getSysAreaInfoByName_args other) {
      if (other.isSetAreaName()) {
        this.areaName = other.areaName;
      }
    }

    public getSysAreaInfoByName_args deepCopy() {
      return new getSysAreaInfoByName_args(this);
    }

    @Override
    public void clear() {
      this.areaName = null;
    }

    public String getAreaName() {
      return this.areaName;
    }

    public getSysAreaInfoByName_args setAreaName(String areaName) {
      this.areaName = areaName;
      return this;
    }

    public void unsetAreaName() {
      this.areaName = null;
    }

    /** Returns true if field areaName is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaName() {
      return this.areaName != null;
    }

    public void setAreaNameIsSet(boolean value) {
      if (!value) {
        this.areaName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AREA_NAME:
        if (value == null) {
          unsetAreaName();
        } else {
          setAreaName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AREA_NAME:
        return getAreaName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AREA_NAME:
        return isSetAreaName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysAreaInfoByName_args)
        return this.equals((getSysAreaInfoByName_args)that);
      return false;
    }

    public boolean equals(getSysAreaInfoByName_args that) {
      if (that == null)
        return false;

      boolean this_present_areaName = true && this.isSetAreaName();
      boolean that_present_areaName = true && that.isSetAreaName();
      if (this_present_areaName || that_present_areaName) {
        if (!(this_present_areaName && that_present_areaName))
          return false;
        if (!this.areaName.equals(that.areaName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_areaName = true && (isSetAreaName());
      list.add(present_areaName);
      if (present_areaName)
        list.add(areaName);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysAreaInfoByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAreaName()).compareTo(other.isSetAreaName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaName, other.areaName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysAreaInfoByName_args(");
      boolean first = true;

      sb.append("areaName:");
      if (this.areaName == null) {
        sb.append("null");
      } else {
        sb.append(this.areaName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysAreaInfoByName_argsStandardSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByName_argsStandardScheme getScheme() {
        return new getSysAreaInfoByName_argsStandardScheme();
      }
    }

    private static class getSysAreaInfoByName_argsStandardScheme extends StandardScheme<getSysAreaInfoByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysAreaInfoByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AREA_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaName = iprot.readString();
                struct.setAreaNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysAreaInfoByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.areaName != null) {
          oprot.writeFieldBegin(AREA_NAME_FIELD_DESC);
          oprot.writeString(struct.areaName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysAreaInfoByName_argsTupleSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByName_argsTupleScheme getScheme() {
        return new getSysAreaInfoByName_argsTupleScheme();
      }
    }

    private static class getSysAreaInfoByName_argsTupleScheme extends TupleScheme<getSysAreaInfoByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAreaName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAreaName()) {
          oprot.writeString(struct.areaName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.areaName = iprot.readString();
          struct.setAreaNameIsSet(true);
        }
      }
    }

  }

  public static class getSysAreaInfoByName_result implements org.apache.thrift.TBase<getSysAreaInfoByName_result, getSysAreaInfoByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysAreaInfoByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysAreaInfoByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysAreaInfoByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysAreaInfoByName_resultTupleSchemeFactory());
    }

    public SysAreaInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysAreaInfoByName_result.class, metaDataMap);
    }

    public getSysAreaInfoByName_result() {
    }

    public getSysAreaInfoByName_result(
      SysAreaInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysAreaInfoByName_result(getSysAreaInfoByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysAreaInfo(other.success);
      }
    }

    public getSysAreaInfoByName_result deepCopy() {
      return new getSysAreaInfoByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SysAreaInfo getSuccess() {
      return this.success;
    }

    public getSysAreaInfoByName_result setSuccess(SysAreaInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysAreaInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysAreaInfoByName_result)
        return this.equals((getSysAreaInfoByName_result)that);
      return false;
    }

    public boolean equals(getSysAreaInfoByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysAreaInfoByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysAreaInfoByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysAreaInfoByName_resultStandardSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByName_resultStandardScheme getScheme() {
        return new getSysAreaInfoByName_resultStandardScheme();
      }
    }

    private static class getSysAreaInfoByName_resultStandardScheme extends StandardScheme<getSysAreaInfoByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysAreaInfoByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysAreaInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysAreaInfoByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysAreaInfoByName_resultTupleSchemeFactory implements SchemeFactory {
      public getSysAreaInfoByName_resultTupleScheme getScheme() {
        return new getSysAreaInfoByName_resultTupleScheme();
      }
    }

    private static class getSysAreaInfoByName_resultTupleScheme extends TupleScheme<getSysAreaInfoByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysAreaInfoByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SysAreaInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPagedAreaInfo_args implements org.apache.thrift.TBase<queryPagedAreaInfo_args, queryPagedAreaInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPagedAreaInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPagedAreaInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_AREA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysAreaInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPagedAreaInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPagedAreaInfo_argsTupleSchemeFactory());
    }

    public SysAreaInfo sysAreaInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_AREA_INFO((short)1, "sysAreaInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_AREA_INFO
            return SYS_AREA_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_AREA_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysAreaInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPagedAreaInfo_args.class, metaDataMap);
    }

    public queryPagedAreaInfo_args() {
    }

    public queryPagedAreaInfo_args(
      SysAreaInfo sysAreaInfo)
    {
      this();
      this.sysAreaInfo = sysAreaInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPagedAreaInfo_args(queryPagedAreaInfo_args other) {
      if (other.isSetSysAreaInfo()) {
        this.sysAreaInfo = new SysAreaInfo(other.sysAreaInfo);
      }
    }

    public queryPagedAreaInfo_args deepCopy() {
      return new queryPagedAreaInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysAreaInfo = null;
    }

    public SysAreaInfo getSysAreaInfo() {
      return this.sysAreaInfo;
    }

    public queryPagedAreaInfo_args setSysAreaInfo(SysAreaInfo sysAreaInfo) {
      this.sysAreaInfo = sysAreaInfo;
      return this;
    }

    public void unsetSysAreaInfo() {
      this.sysAreaInfo = null;
    }

    /** Returns true if field sysAreaInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysAreaInfo() {
      return this.sysAreaInfo != null;
    }

    public void setSysAreaInfoIsSet(boolean value) {
      if (!value) {
        this.sysAreaInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_AREA_INFO:
        if (value == null) {
          unsetSysAreaInfo();
        } else {
          setSysAreaInfo((SysAreaInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_AREA_INFO:
        return getSysAreaInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_AREA_INFO:
        return isSetSysAreaInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPagedAreaInfo_args)
        return this.equals((queryPagedAreaInfo_args)that);
      return false;
    }

    public boolean equals(queryPagedAreaInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysAreaInfo = true && this.isSetSysAreaInfo();
      boolean that_present_sysAreaInfo = true && that.isSetSysAreaInfo();
      if (this_present_sysAreaInfo || that_present_sysAreaInfo) {
        if (!(this_present_sysAreaInfo && that_present_sysAreaInfo))
          return false;
        if (!this.sysAreaInfo.equals(that.sysAreaInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysAreaInfo = true && (isSetSysAreaInfo());
      list.add(present_sysAreaInfo);
      if (present_sysAreaInfo)
        list.add(sysAreaInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPagedAreaInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysAreaInfo()).compareTo(other.isSetSysAreaInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysAreaInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysAreaInfo, other.sysAreaInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPagedAreaInfo_args(");
      boolean first = true;

      sb.append("sysAreaInfo:");
      if (this.sysAreaInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysAreaInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysAreaInfo != null) {
        sysAreaInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPagedAreaInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryPagedAreaInfo_argsStandardScheme getScheme() {
        return new queryPagedAreaInfo_argsStandardScheme();
      }
    }

    private static class queryPagedAreaInfo_argsStandardScheme extends StandardScheme<queryPagedAreaInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPagedAreaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_AREA_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysAreaInfo = new SysAreaInfo();
                struct.sysAreaInfo.read(iprot);
                struct.setSysAreaInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPagedAreaInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysAreaInfo != null) {
          oprot.writeFieldBegin(SYS_AREA_INFO_FIELD_DESC);
          struct.sysAreaInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPagedAreaInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryPagedAreaInfo_argsTupleScheme getScheme() {
        return new queryPagedAreaInfo_argsTupleScheme();
      }
    }

    private static class queryPagedAreaInfo_argsTupleScheme extends TupleScheme<queryPagedAreaInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPagedAreaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysAreaInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysAreaInfo()) {
          struct.sysAreaInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPagedAreaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysAreaInfo = new SysAreaInfo();
          struct.sysAreaInfo.read(iprot);
          struct.setSysAreaInfoIsSet(true);
        }
      }
    }

  }

  public static class queryPagedAreaInfo_result implements org.apache.thrift.TBase<queryPagedAreaInfo_result, queryPagedAreaInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPagedAreaInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPagedAreaInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPagedAreaInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPagedAreaInfo_resultTupleSchemeFactory());
    }

    public List<SysAreaInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPagedAreaInfo_result.class, metaDataMap);
    }

    public queryPagedAreaInfo_result() {
    }

    public queryPagedAreaInfo_result(
      List<SysAreaInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPagedAreaInfo_result(queryPagedAreaInfo_result other) {
      if (other.isSetSuccess()) {
        List<SysAreaInfo> __this__success = new ArrayList<SysAreaInfo>(other.success.size());
        for (SysAreaInfo other_element : other.success) {
          __this__success.add(new SysAreaInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryPagedAreaInfo_result deepCopy() {
      return new queryPagedAreaInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysAreaInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysAreaInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysAreaInfo>();
      }
      this.success.add(elem);
    }

    public List<SysAreaInfo> getSuccess() {
      return this.success;
    }

    public queryPagedAreaInfo_result setSuccess(List<SysAreaInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysAreaInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPagedAreaInfo_result)
        return this.equals((queryPagedAreaInfo_result)that);
      return false;
    }

    public boolean equals(queryPagedAreaInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPagedAreaInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPagedAreaInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPagedAreaInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryPagedAreaInfo_resultStandardScheme getScheme() {
        return new queryPagedAreaInfo_resultStandardScheme();
      }
    }

    private static class queryPagedAreaInfo_resultStandardScheme extends StandardScheme<queryPagedAreaInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPagedAreaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list782 = iprot.readListBegin();
                  struct.success = new ArrayList<SysAreaInfo>(_list782.size);
                  SysAreaInfo _elem783;
                  for (int _i784 = 0; _i784 < _list782.size; ++_i784)
                  {
                    _elem783 = new SysAreaInfo();
                    _elem783.read(iprot);
                    struct.success.add(_elem783);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPagedAreaInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysAreaInfo _iter785 : struct.success)
            {
              _iter785.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPagedAreaInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryPagedAreaInfo_resultTupleScheme getScheme() {
        return new queryPagedAreaInfo_resultTupleScheme();
      }
    }

    private static class queryPagedAreaInfo_resultTupleScheme extends TupleScheme<queryPagedAreaInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPagedAreaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysAreaInfo _iter786 : struct.success)
            {
              _iter786.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPagedAreaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list787 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysAreaInfo>(_list787.size);
            SysAreaInfo _elem788;
            for (int _i789 = 0; _i789 < _list787.size; ++_i789)
            {
              _elem788 = new SysAreaInfo();
              _elem788.read(iprot);
              struct.success.add(_elem788);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countAreaInfo_args implements org.apache.thrift.TBase<countAreaInfo_args, countAreaInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<countAreaInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countAreaInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_AREA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysAreaInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countAreaInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countAreaInfo_argsTupleSchemeFactory());
    }

    public SysAreaInfo sysAreaInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_AREA_INFO((short)1, "sysAreaInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_AREA_INFO
            return SYS_AREA_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_AREA_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysAreaInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countAreaInfo_args.class, metaDataMap);
    }

    public countAreaInfo_args() {
    }

    public countAreaInfo_args(
      SysAreaInfo sysAreaInfo)
    {
      this();
      this.sysAreaInfo = sysAreaInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countAreaInfo_args(countAreaInfo_args other) {
      if (other.isSetSysAreaInfo()) {
        this.sysAreaInfo = new SysAreaInfo(other.sysAreaInfo);
      }
    }

    public countAreaInfo_args deepCopy() {
      return new countAreaInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysAreaInfo = null;
    }

    public SysAreaInfo getSysAreaInfo() {
      return this.sysAreaInfo;
    }

    public countAreaInfo_args setSysAreaInfo(SysAreaInfo sysAreaInfo) {
      this.sysAreaInfo = sysAreaInfo;
      return this;
    }

    public void unsetSysAreaInfo() {
      this.sysAreaInfo = null;
    }

    /** Returns true if field sysAreaInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysAreaInfo() {
      return this.sysAreaInfo != null;
    }

    public void setSysAreaInfoIsSet(boolean value) {
      if (!value) {
        this.sysAreaInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_AREA_INFO:
        if (value == null) {
          unsetSysAreaInfo();
        } else {
          setSysAreaInfo((SysAreaInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_AREA_INFO:
        return getSysAreaInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_AREA_INFO:
        return isSetSysAreaInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countAreaInfo_args)
        return this.equals((countAreaInfo_args)that);
      return false;
    }

    public boolean equals(countAreaInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysAreaInfo = true && this.isSetSysAreaInfo();
      boolean that_present_sysAreaInfo = true && that.isSetSysAreaInfo();
      if (this_present_sysAreaInfo || that_present_sysAreaInfo) {
        if (!(this_present_sysAreaInfo && that_present_sysAreaInfo))
          return false;
        if (!this.sysAreaInfo.equals(that.sysAreaInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysAreaInfo = true && (isSetSysAreaInfo());
      list.add(present_sysAreaInfo);
      if (present_sysAreaInfo)
        list.add(sysAreaInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(countAreaInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysAreaInfo()).compareTo(other.isSetSysAreaInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysAreaInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysAreaInfo, other.sysAreaInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countAreaInfo_args(");
      boolean first = true;

      sb.append("sysAreaInfo:");
      if (this.sysAreaInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysAreaInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysAreaInfo != null) {
        sysAreaInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countAreaInfo_argsStandardSchemeFactory implements SchemeFactory {
      public countAreaInfo_argsStandardScheme getScheme() {
        return new countAreaInfo_argsStandardScheme();
      }
    }

    private static class countAreaInfo_argsStandardScheme extends StandardScheme<countAreaInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countAreaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_AREA_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysAreaInfo = new SysAreaInfo();
                struct.sysAreaInfo.read(iprot);
                struct.setSysAreaInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countAreaInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysAreaInfo != null) {
          oprot.writeFieldBegin(SYS_AREA_INFO_FIELD_DESC);
          struct.sysAreaInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countAreaInfo_argsTupleSchemeFactory implements SchemeFactory {
      public countAreaInfo_argsTupleScheme getScheme() {
        return new countAreaInfo_argsTupleScheme();
      }
    }

    private static class countAreaInfo_argsTupleScheme extends TupleScheme<countAreaInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countAreaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysAreaInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysAreaInfo()) {
          struct.sysAreaInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countAreaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysAreaInfo = new SysAreaInfo();
          struct.sysAreaInfo.read(iprot);
          struct.setSysAreaInfoIsSet(true);
        }
      }
    }

  }

  public static class countAreaInfo_result implements org.apache.thrift.TBase<countAreaInfo_result, countAreaInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<countAreaInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countAreaInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countAreaInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countAreaInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countAreaInfo_result.class, metaDataMap);
    }

    public countAreaInfo_result() {
    }

    public countAreaInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countAreaInfo_result(countAreaInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countAreaInfo_result deepCopy() {
      return new countAreaInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countAreaInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countAreaInfo_result)
        return this.equals((countAreaInfo_result)that);
      return false;
    }

    public boolean equals(countAreaInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countAreaInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countAreaInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countAreaInfo_resultStandardSchemeFactory implements SchemeFactory {
      public countAreaInfo_resultStandardScheme getScheme() {
        return new countAreaInfo_resultStandardScheme();
      }
    }

    private static class countAreaInfo_resultStandardScheme extends StandardScheme<countAreaInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countAreaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countAreaInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countAreaInfo_resultTupleSchemeFactory implements SchemeFactory {
      public countAreaInfo_resultTupleScheme getScheme() {
        return new countAreaInfo_resultTupleScheme();
      }
    }

    private static class countAreaInfo_resultTupleScheme extends TupleScheme<countAreaInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countAreaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countAreaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveAreaInfo_args implements org.apache.thrift.TBase<saveAreaInfo_args, saveAreaInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveAreaInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAreaInfo_args");

    private static final org.apache.thrift.protocol.TField SYS_AREA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sysAreaInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveAreaInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveAreaInfo_argsTupleSchemeFactory());
    }

    public SysAreaInfo sysAreaInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_AREA_INFO((short)1, "sysAreaInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_AREA_INFO
            return SYS_AREA_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_AREA_INFO, new org.apache.thrift.meta_data.FieldMetaData("sysAreaInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysAreaInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAreaInfo_args.class, metaDataMap);
    }

    public saveAreaInfo_args() {
    }

    public saveAreaInfo_args(
      SysAreaInfo sysAreaInfo)
    {
      this();
      this.sysAreaInfo = sysAreaInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAreaInfo_args(saveAreaInfo_args other) {
      if (other.isSetSysAreaInfo()) {
        this.sysAreaInfo = new SysAreaInfo(other.sysAreaInfo);
      }
    }

    public saveAreaInfo_args deepCopy() {
      return new saveAreaInfo_args(this);
    }

    @Override
    public void clear() {
      this.sysAreaInfo = null;
    }

    public SysAreaInfo getSysAreaInfo() {
      return this.sysAreaInfo;
    }

    public saveAreaInfo_args setSysAreaInfo(SysAreaInfo sysAreaInfo) {
      this.sysAreaInfo = sysAreaInfo;
      return this;
    }

    public void unsetSysAreaInfo() {
      this.sysAreaInfo = null;
    }

    /** Returns true if field sysAreaInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSysAreaInfo() {
      return this.sysAreaInfo != null;
    }

    public void setSysAreaInfoIsSet(boolean value) {
      if (!value) {
        this.sysAreaInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_AREA_INFO:
        if (value == null) {
          unsetSysAreaInfo();
        } else {
          setSysAreaInfo((SysAreaInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_AREA_INFO:
        return getSysAreaInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_AREA_INFO:
        return isSetSysAreaInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAreaInfo_args)
        return this.equals((saveAreaInfo_args)that);
      return false;
    }

    public boolean equals(saveAreaInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_sysAreaInfo = true && this.isSetSysAreaInfo();
      boolean that_present_sysAreaInfo = true && that.isSetSysAreaInfo();
      if (this_present_sysAreaInfo || that_present_sysAreaInfo) {
        if (!(this_present_sysAreaInfo && that_present_sysAreaInfo))
          return false;
        if (!this.sysAreaInfo.equals(that.sysAreaInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysAreaInfo = true && (isSetSysAreaInfo());
      list.add(present_sysAreaInfo);
      if (present_sysAreaInfo)
        list.add(sysAreaInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveAreaInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysAreaInfo()).compareTo(other.isSetSysAreaInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysAreaInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysAreaInfo, other.sysAreaInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAreaInfo_args(");
      boolean first = true;

      sb.append("sysAreaInfo:");
      if (this.sysAreaInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sysAreaInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysAreaInfo != null) {
        sysAreaInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveAreaInfo_argsStandardSchemeFactory implements SchemeFactory {
      public saveAreaInfo_argsStandardScheme getScheme() {
        return new saveAreaInfo_argsStandardScheme();
      }
    }

    private static class saveAreaInfo_argsStandardScheme extends StandardScheme<saveAreaInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveAreaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_AREA_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysAreaInfo = new SysAreaInfo();
                struct.sysAreaInfo.read(iprot);
                struct.setSysAreaInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveAreaInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysAreaInfo != null) {
          oprot.writeFieldBegin(SYS_AREA_INFO_FIELD_DESC);
          struct.sysAreaInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveAreaInfo_argsTupleSchemeFactory implements SchemeFactory {
      public saveAreaInfo_argsTupleScheme getScheme() {
        return new saveAreaInfo_argsTupleScheme();
      }
    }

    private static class saveAreaInfo_argsTupleScheme extends TupleScheme<saveAreaInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveAreaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysAreaInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysAreaInfo()) {
          struct.sysAreaInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveAreaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysAreaInfo = new SysAreaInfo();
          struct.sysAreaInfo.read(iprot);
          struct.setSysAreaInfoIsSet(true);
        }
      }
    }

  }

  public static class saveAreaInfo_result implements org.apache.thrift.TBase<saveAreaInfo_result, saveAreaInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveAreaInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAreaInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveAreaInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveAreaInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAreaInfo_result.class, metaDataMap);
    }

    public saveAreaInfo_result() {
    }

    public saveAreaInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAreaInfo_result(saveAreaInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveAreaInfo_result deepCopy() {
      return new saveAreaInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveAreaInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveAreaInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAreaInfo_result)
        return this.equals((saveAreaInfo_result)that);
      return false;
    }

    public boolean equals(saveAreaInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveAreaInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAreaInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveAreaInfo_resultStandardSchemeFactory implements SchemeFactory {
      public saveAreaInfo_resultStandardScheme getScheme() {
        return new saveAreaInfo_resultStandardScheme();
      }
    }

    private static class saveAreaInfo_resultStandardScheme extends StandardScheme<saveAreaInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveAreaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveAreaInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveAreaInfo_resultTupleSchemeFactory implements SchemeFactory {
      public saveAreaInfo_resultTupleScheme getScheme() {
        return new saveAreaInfo_resultTupleScheme();
      }
    }

    private static class saveAreaInfo_resultTupleScheme extends TupleScheme<saveAreaInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveAreaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveAreaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class batchDelete_args implements org.apache.thrift.TBase<batchDelete_args, batchDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDelete_args");

    private static final org.apache.thrift.protocol.TField AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("areaCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDelete_argsTupleSchemeFactory());
    }

    public String areaCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AREA_CODE((short)1, "areaCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AREA_CODE
            return AREA_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("areaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDelete_args.class, metaDataMap);
    }

    public batchDelete_args() {
    }

    public batchDelete_args(
      String areaCode)
    {
      this();
      this.areaCode = areaCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDelete_args(batchDelete_args other) {
      if (other.isSetAreaCode()) {
        this.areaCode = other.areaCode;
      }
    }

    public batchDelete_args deepCopy() {
      return new batchDelete_args(this);
    }

    @Override
    public void clear() {
      this.areaCode = null;
    }

    public String getAreaCode() {
      return this.areaCode;
    }

    public batchDelete_args setAreaCode(String areaCode) {
      this.areaCode = areaCode;
      return this;
    }

    public void unsetAreaCode() {
      this.areaCode = null;
    }

    /** Returns true if field areaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaCode() {
      return this.areaCode != null;
    }

    public void setAreaCodeIsSet(boolean value) {
      if (!value) {
        this.areaCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AREA_CODE:
        if (value == null) {
          unsetAreaCode();
        } else {
          setAreaCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AREA_CODE:
        return getAreaCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AREA_CODE:
        return isSetAreaCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDelete_args)
        return this.equals((batchDelete_args)that);
      return false;
    }

    public boolean equals(batchDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_areaCode = true && this.isSetAreaCode();
      boolean that_present_areaCode = true && that.isSetAreaCode();
      if (this_present_areaCode || that_present_areaCode) {
        if (!(this_present_areaCode && that_present_areaCode))
          return false;
        if (!this.areaCode.equals(that.areaCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_areaCode = true && (isSetAreaCode());
      list.add(present_areaCode);
      if (present_areaCode)
        list.add(areaCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAreaCode()).compareTo(other.isSetAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaCode, other.areaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDelete_args(");
      boolean first = true;

      sb.append("areaCode:");
      if (this.areaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.areaCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDelete_argsStandardSchemeFactory implements SchemeFactory {
      public batchDelete_argsStandardScheme getScheme() {
        return new batchDelete_argsStandardScheme();
      }
    }

    private static class batchDelete_argsStandardScheme extends StandardScheme<batchDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaCode = iprot.readString();
                struct.setAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.areaCode != null) {
          oprot.writeFieldBegin(AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.areaCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDelete_argsTupleSchemeFactory implements SchemeFactory {
      public batchDelete_argsTupleScheme getScheme() {
        return new batchDelete_argsTupleScheme();
      }
    }

    private static class batchDelete_argsTupleScheme extends TupleScheme<batchDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAreaCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAreaCode()) {
          oprot.writeString(struct.areaCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.areaCode = iprot.readString();
          struct.setAreaCodeIsSet(true);
        }
      }
    }

  }

  public static class batchDelete_result implements org.apache.thrift.TBase<batchDelete_result, batchDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDelete_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDelete_result.class, metaDataMap);
    }

    public batchDelete_result() {
    }

    public batchDelete_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDelete_result(batchDelete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public batchDelete_result deepCopy() {
      return new batchDelete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchDelete_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public batchDelete_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDelete_result)
        return this.equals((batchDelete_result)that);
      return false;
    }

    public boolean equals(batchDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDelete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDelete_resultStandardSchemeFactory implements SchemeFactory {
      public batchDelete_resultStandardScheme getScheme() {
        return new batchDelete_resultStandardScheme();
      }
    }

    private static class batchDelete_resultStandardScheme extends StandardScheme<batchDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDelete_resultTupleSchemeFactory implements SchemeFactory {
      public batchDelete_resultTupleScheme getScheme() {
        return new batchDelete_resultTupleScheme();
      }
    }

    private static class batchDelete_resultTupleScheme extends TupleScheme<batchDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

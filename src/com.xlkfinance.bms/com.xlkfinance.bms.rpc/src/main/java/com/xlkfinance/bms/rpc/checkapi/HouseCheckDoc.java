/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.checkapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-17")
public class HouseCheckDoc implements org.apache.thrift.TBase<HouseCheckDoc, HouseCheckDoc._Fields>, java.io.Serializable, Cloneable, Comparable<HouseCheckDoc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HouseCheckDoc");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CERT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("certNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PERSON_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("personInfo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IS_DEL_FIELD_DESC = new org.apache.thrift.protocol.TField("isDel", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DETAILS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("detailsList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkStatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CHECK_DOC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocTime", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HouseCheckDocStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HouseCheckDocTupleSchemeFactory());
  }

  public int page; // required
  public int rows; // required
  public int pid; // required
  public int userId; // required
  public int queryType; // required
  public int certType; // required
  public String year; // required
  public String certNo; // required
  public String personInfo; // required
  public String createTime; // required
  public String updateTime; // required
  public int isDel; // required
  public List<HouseCheckDocDetails> detailsList; // required
  public int checkStatus; // required
  public String checkDocTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    ROWS((short)2, "rows"),
    PID((short)3, "pid"),
    USER_ID((short)4, "userId"),
    QUERY_TYPE((short)5, "queryType"),
    CERT_TYPE((short)6, "certType"),
    YEAR((short)7, "year"),
    CERT_NO((short)8, "certNo"),
    PERSON_INFO((short)9, "personInfo"),
    CREATE_TIME((short)10, "createTime"),
    UPDATE_TIME((short)11, "updateTime"),
    IS_DEL((short)12, "isDel"),
    DETAILS_LIST((short)13, "detailsList"),
    CHECK_STATUS((short)14, "checkStatus"),
    CHECK_DOC_TIME((short)15, "checkDocTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // ROWS
          return ROWS;
        case 3: // PID
          return PID;
        case 4: // USER_ID
          return USER_ID;
        case 5: // QUERY_TYPE
          return QUERY_TYPE;
        case 6: // CERT_TYPE
          return CERT_TYPE;
        case 7: // YEAR
          return YEAR;
        case 8: // CERT_NO
          return CERT_NO;
        case 9: // PERSON_INFO
          return PERSON_INFO;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // UPDATE_TIME
          return UPDATE_TIME;
        case 12: // IS_DEL
          return IS_DEL;
        case 13: // DETAILS_LIST
          return DETAILS_LIST;
        case 14: // CHECK_STATUS
          return CHECK_STATUS;
        case 15: // CHECK_DOC_TIME
          return CHECK_DOC_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private static final int __USERID_ISSET_ID = 3;
  private static final int __QUERYTYPE_ISSET_ID = 4;
  private static final int __CERTTYPE_ISSET_ID = 5;
  private static final int __ISDEL_ISSET_ID = 6;
  private static final int __CHECKSTATUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("queryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_NO, new org.apache.thrift.meta_data.FieldMetaData("certNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON_INFO, new org.apache.thrift.meta_data.FieldMetaData("personInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DEL, new org.apache.thrift.meta_data.FieldMetaData("isDel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DETAILS_LIST, new org.apache.thrift.meta_data.FieldMetaData("detailsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "HouseCheckDocDetails"))));
    tmpMap.put(_Fields.CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_DOC_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkDocTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HouseCheckDoc.class, metaDataMap);
  }

  public HouseCheckDoc() {
  }

  public HouseCheckDoc(
    int page,
    int rows,
    int pid,
    int userId,
    int queryType,
    int certType,
    String year,
    String certNo,
    String personInfo,
    String createTime,
    String updateTime,
    int isDel,
    List<HouseCheckDocDetails> detailsList,
    int checkStatus,
    String checkDocTime)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.queryType = queryType;
    setQueryTypeIsSet(true);
    this.certType = certType;
    setCertTypeIsSet(true);
    this.year = year;
    this.certNo = certNo;
    this.personInfo = personInfo;
    this.createTime = createTime;
    this.updateTime = updateTime;
    this.isDel = isDel;
    setIsDelIsSet(true);
    this.detailsList = detailsList;
    this.checkStatus = checkStatus;
    setCheckStatusIsSet(true);
    this.checkDocTime = checkDocTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HouseCheckDoc(HouseCheckDoc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.rows = other.rows;
    this.pid = other.pid;
    this.userId = other.userId;
    this.queryType = other.queryType;
    this.certType = other.certType;
    if (other.isSetYear()) {
      this.year = other.year;
    }
    if (other.isSetCertNo()) {
      this.certNo = other.certNo;
    }
    if (other.isSetPersonInfo()) {
      this.personInfo = other.personInfo;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.isDel = other.isDel;
    if (other.isSetDetailsList()) {
      List<HouseCheckDocDetails> __this__detailsList = new ArrayList<HouseCheckDocDetails>(other.detailsList.size());
      for (HouseCheckDocDetails other_element : other.detailsList) {
        __this__detailsList.add(other_element);
      }
      this.detailsList = __this__detailsList;
    }
    this.checkStatus = other.checkStatus;
    if (other.isSetCheckDocTime()) {
      this.checkDocTime = other.checkDocTime;
    }
  }

  public HouseCheckDoc deepCopy() {
    return new HouseCheckDoc(this);
  }

  @Override
  public void clear() {
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setPidIsSet(false);
    this.pid = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setQueryTypeIsSet(false);
    this.queryType = 0;
    setCertTypeIsSet(false);
    this.certType = 0;
    this.year = null;
    this.certNo = null;
    this.personInfo = null;
    this.createTime = null;
    this.updateTime = null;
    setIsDelIsSet(false);
    this.isDel = 0;
    this.detailsList = null;
    setCheckStatusIsSet(false);
    this.checkStatus = 0;
    this.checkDocTime = null;
  }

  public int getPage() {
    return this.page;
  }

  public HouseCheckDoc setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public HouseCheckDoc setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public HouseCheckDoc setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public HouseCheckDoc setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getQueryType() {
    return this.queryType;
  }

  public HouseCheckDoc setQueryType(int queryType) {
    this.queryType = queryType;
    setQueryTypeIsSet(true);
    return this;
  }

  public void unsetQueryType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYTYPE_ISSET_ID);
  }

  /** Returns true if field queryType is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYTYPE_ISSET_ID);
  }

  public void setQueryTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYTYPE_ISSET_ID, value);
  }

  public int getCertType() {
    return this.certType;
  }

  public HouseCheckDoc setCertType(int certType) {
    this.certType = certType;
    setCertTypeIsSet(true);
    return this;
  }

  public void unsetCertType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CERTTYPE_ISSET_ID);
  }

  /** Returns true if field certType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertType() {
    return EncodingUtils.testBit(__isset_bitfield, __CERTTYPE_ISSET_ID);
  }

  public void setCertTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CERTTYPE_ISSET_ID, value);
  }

  public String getYear() {
    return this.year;
  }

  public HouseCheckDoc setYear(String year) {
    this.year = year;
    return this;
  }

  public void unsetYear() {
    this.year = null;
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return this.year != null;
  }

  public void setYearIsSet(boolean value) {
    if (!value) {
      this.year = null;
    }
  }

  public String getCertNo() {
    return this.certNo;
  }

  public HouseCheckDoc setCertNo(String certNo) {
    this.certNo = certNo;
    return this;
  }

  public void unsetCertNo() {
    this.certNo = null;
  }

  /** Returns true if field certNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNo() {
    return this.certNo != null;
  }

  public void setCertNoIsSet(boolean value) {
    if (!value) {
      this.certNo = null;
    }
  }

  public String getPersonInfo() {
    return this.personInfo;
  }

  public HouseCheckDoc setPersonInfo(String personInfo) {
    this.personInfo = personInfo;
    return this;
  }

  public void unsetPersonInfo() {
    this.personInfo = null;
  }

  /** Returns true if field personInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonInfo() {
    return this.personInfo != null;
  }

  public void setPersonInfoIsSet(boolean value) {
    if (!value) {
      this.personInfo = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public HouseCheckDoc setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public HouseCheckDoc setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getIsDel() {
    return this.isDel;
  }

  public HouseCheckDoc setIsDel(int isDel) {
    this.isDel = isDel;
    setIsDelIsSet(true);
    return this;
  }

  public void unsetIsDel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDEL_ISSET_ID);
  }

  /** Returns true if field isDel is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDel() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDEL_ISSET_ID);
  }

  public void setIsDelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDEL_ISSET_ID, value);
  }

  public int getDetailsListSize() {
    return (this.detailsList == null) ? 0 : this.detailsList.size();
  }

  public java.util.Iterator<HouseCheckDocDetails> getDetailsListIterator() {
    return (this.detailsList == null) ? null : this.detailsList.iterator();
  }

  public void addToDetailsList(HouseCheckDocDetails elem) {
    if (this.detailsList == null) {
      this.detailsList = new ArrayList<HouseCheckDocDetails>();
    }
    this.detailsList.add(elem);
  }

  public List<HouseCheckDocDetails> getDetailsList() {
    return this.detailsList;
  }

  public HouseCheckDoc setDetailsList(List<HouseCheckDocDetails> detailsList) {
    this.detailsList = detailsList;
    return this;
  }

  public void unsetDetailsList() {
    this.detailsList = null;
  }

  /** Returns true if field detailsList is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailsList() {
    return this.detailsList != null;
  }

  public void setDetailsListIsSet(boolean value) {
    if (!value) {
      this.detailsList = null;
    }
  }

  public int getCheckStatus() {
    return this.checkStatus;
  }

  public HouseCheckDoc setCheckStatus(int checkStatus) {
    this.checkStatus = checkStatus;
    setCheckStatusIsSet(true);
    return this;
  }

  public void unsetCheckStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID);
  }

  /** Returns true if field checkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID);
  }

  public void setCheckStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID, value);
  }

  public String getCheckDocTime() {
    return this.checkDocTime;
  }

  public HouseCheckDoc setCheckDocTime(String checkDocTime) {
    this.checkDocTime = checkDocTime;
    return this;
  }

  public void unsetCheckDocTime() {
    this.checkDocTime = null;
  }

  /** Returns true if field checkDocTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckDocTime() {
    return this.checkDocTime != null;
  }

  public void setCheckDocTimeIsSet(boolean value) {
    if (!value) {
      this.checkDocTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((Integer)value);
      }
      break;

    case CERT_TYPE:
      if (value == null) {
        unsetCertType();
      } else {
        setCertType((Integer)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((String)value);
      }
      break;

    case CERT_NO:
      if (value == null) {
        unsetCertNo();
      } else {
        setCertNo((String)value);
      }
      break;

    case PERSON_INFO:
      if (value == null) {
        unsetPersonInfo();
      } else {
        setPersonInfo((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case IS_DEL:
      if (value == null) {
        unsetIsDel();
      } else {
        setIsDel((Integer)value);
      }
      break;

    case DETAILS_LIST:
      if (value == null) {
        unsetDetailsList();
      } else {
        setDetailsList((List<HouseCheckDocDetails>)value);
      }
      break;

    case CHECK_STATUS:
      if (value == null) {
        unsetCheckStatus();
      } else {
        setCheckStatus((Integer)value);
      }
      break;

    case CHECK_DOC_TIME:
      if (value == null) {
        unsetCheckDocTime();
      } else {
        setCheckDocTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PID:
      return Integer.valueOf(getPid());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case QUERY_TYPE:
      return Integer.valueOf(getQueryType());

    case CERT_TYPE:
      return Integer.valueOf(getCertType());

    case YEAR:
      return getYear();

    case CERT_NO:
      return getCertNo();

    case PERSON_INFO:
      return getPersonInfo();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case IS_DEL:
      return Integer.valueOf(getIsDel());

    case DETAILS_LIST:
      return getDetailsList();

    case CHECK_STATUS:
      return Integer.valueOf(getCheckStatus());

    case CHECK_DOC_TIME:
      return getCheckDocTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PID:
      return isSetPid();
    case USER_ID:
      return isSetUserId();
    case QUERY_TYPE:
      return isSetQueryType();
    case CERT_TYPE:
      return isSetCertType();
    case YEAR:
      return isSetYear();
    case CERT_NO:
      return isSetCertNo();
    case PERSON_INFO:
      return isSetPersonInfo();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case IS_DEL:
      return isSetIsDel();
    case DETAILS_LIST:
      return isSetDetailsList();
    case CHECK_STATUS:
      return isSetCheckStatus();
    case CHECK_DOC_TIME:
      return isSetCheckDocTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HouseCheckDoc)
      return this.equals((HouseCheckDoc)that);
    return false;
  }

  public boolean equals(HouseCheckDoc that) {
    if (that == null)
      return false;

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_queryType = true;
    boolean that_present_queryType = true;
    if (this_present_queryType || that_present_queryType) {
      if (!(this_present_queryType && that_present_queryType))
        return false;
      if (this.queryType != that.queryType)
        return false;
    }

    boolean this_present_certType = true;
    boolean that_present_certType = true;
    if (this_present_certType || that_present_certType) {
      if (!(this_present_certType && that_present_certType))
        return false;
      if (this.certType != that.certType)
        return false;
    }

    boolean this_present_year = true && this.isSetYear();
    boolean that_present_year = true && that.isSetYear();
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!this.year.equals(that.year))
        return false;
    }

    boolean this_present_certNo = true && this.isSetCertNo();
    boolean that_present_certNo = true && that.isSetCertNo();
    if (this_present_certNo || that_present_certNo) {
      if (!(this_present_certNo && that_present_certNo))
        return false;
      if (!this.certNo.equals(that.certNo))
        return false;
    }

    boolean this_present_personInfo = true && this.isSetPersonInfo();
    boolean that_present_personInfo = true && that.isSetPersonInfo();
    if (this_present_personInfo || that_present_personInfo) {
      if (!(this_present_personInfo && that_present_personInfo))
        return false;
      if (!this.personInfo.equals(that.personInfo))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_isDel = true;
    boolean that_present_isDel = true;
    if (this_present_isDel || that_present_isDel) {
      if (!(this_present_isDel && that_present_isDel))
        return false;
      if (this.isDel != that.isDel)
        return false;
    }

    boolean this_present_detailsList = true && this.isSetDetailsList();
    boolean that_present_detailsList = true && that.isSetDetailsList();
    if (this_present_detailsList || that_present_detailsList) {
      if (!(this_present_detailsList && that_present_detailsList))
        return false;
      if (!this.detailsList.equals(that.detailsList))
        return false;
    }

    boolean this_present_checkStatus = true;
    boolean that_present_checkStatus = true;
    if (this_present_checkStatus || that_present_checkStatus) {
      if (!(this_present_checkStatus && that_present_checkStatus))
        return false;
      if (this.checkStatus != that.checkStatus)
        return false;
    }

    boolean this_present_checkDocTime = true && this.isSetCheckDocTime();
    boolean that_present_checkDocTime = true && that.isSetCheckDocTime();
    if (this_present_checkDocTime || that_present_checkDocTime) {
      if (!(this_present_checkDocTime && that_present_checkDocTime))
        return false;
      if (!this.checkDocTime.equals(that.checkDocTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_queryType = true;
    list.add(present_queryType);
    if (present_queryType)
      list.add(queryType);

    boolean present_certType = true;
    list.add(present_certType);
    if (present_certType)
      list.add(certType);

    boolean present_year = true && (isSetYear());
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_certNo = true && (isSetCertNo());
    list.add(present_certNo);
    if (present_certNo)
      list.add(certNo);

    boolean present_personInfo = true && (isSetPersonInfo());
    list.add(present_personInfo);
    if (present_personInfo)
      list.add(personInfo);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_isDel = true;
    list.add(present_isDel);
    if (present_isDel)
      list.add(isDel);

    boolean present_detailsList = true && (isSetDetailsList());
    list.add(present_detailsList);
    if (present_detailsList)
      list.add(detailsList);

    boolean present_checkStatus = true;
    list.add(present_checkStatus);
    if (present_checkStatus)
      list.add(checkStatus);

    boolean present_checkDocTime = true && (isSetCheckDocTime());
    list.add(present_checkDocTime);
    if (present_checkDocTime)
      list.add(checkDocTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(HouseCheckDoc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryType()).compareTo(other.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryType, other.queryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertType()).compareTo(other.isSetCertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certType, other.certType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNo()).compareTo(other.isSetCertNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNo, other.certNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonInfo()).compareTo(other.isSetPersonInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personInfo, other.personInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDel()).compareTo(other.isSetIsDel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDel, other.isDel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailsList()).compareTo(other.isSetDetailsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailsList, other.detailsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckStatus()).compareTo(other.isSetCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkStatus, other.checkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckDocTime()).compareTo(other.isSetCheckDocTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckDocTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocTime, other.checkDocTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HouseCheckDoc(");
    boolean first = true;

    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryType:");
    sb.append(this.queryType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certType:");
    sb.append(this.certType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    if (this.year == null) {
      sb.append("null");
    } else {
      sb.append(this.year);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNo:");
    if (this.certNo == null) {
      sb.append("null");
    } else {
      sb.append(this.certNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personInfo:");
    if (this.personInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.personInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDel:");
    sb.append(this.isDel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailsList:");
    if (this.detailsList == null) {
      sb.append("null");
    } else {
      sb.append(this.detailsList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkStatus:");
    sb.append(this.checkStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkDocTime:");
    if (this.checkDocTime == null) {
      sb.append("null");
    } else {
      sb.append(this.checkDocTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HouseCheckDocStandardSchemeFactory implements SchemeFactory {
    public HouseCheckDocStandardScheme getScheme() {
      return new HouseCheckDocStandardScheme();
    }
  }

  private static class HouseCheckDocStandardScheme extends StandardScheme<HouseCheckDoc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HouseCheckDoc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryType = iprot.readI32();
              struct.setQueryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.certType = iprot.readI32();
              struct.setCertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.year = iprot.readString();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CERT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNo = iprot.readString();
              struct.setCertNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PERSON_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.personInfo = iprot.readString();
              struct.setPersonInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_DEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isDel = iprot.readI32();
              struct.setIsDelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DETAILS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.detailsList = new ArrayList<HouseCheckDocDetails>(_list0.size);
                HouseCheckDocDetails _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new HouseCheckDocDetails();
                  _elem1.read(iprot);
                  struct.detailsList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDetailsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkStatus = iprot.readI32();
              struct.setCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CHECK_DOC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkDocTime = iprot.readString();
              struct.setCheckDocTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HouseCheckDoc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.queryType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CERT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.certType);
      oprot.writeFieldEnd();
      if (struct.year != null) {
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeString(struct.year);
        oprot.writeFieldEnd();
      }
      if (struct.certNo != null) {
        oprot.writeFieldBegin(CERT_NO_FIELD_DESC);
        oprot.writeString(struct.certNo);
        oprot.writeFieldEnd();
      }
      if (struct.personInfo != null) {
        oprot.writeFieldBegin(PERSON_INFO_FIELD_DESC);
        oprot.writeString(struct.personInfo);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_DEL_FIELD_DESC);
      oprot.writeI32(struct.isDel);
      oprot.writeFieldEnd();
      if (struct.detailsList != null) {
        oprot.writeFieldBegin(DETAILS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.detailsList.size()));
          for (HouseCheckDocDetails _iter3 : struct.detailsList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECK_STATUS_FIELD_DESC);
      oprot.writeI32(struct.checkStatus);
      oprot.writeFieldEnd();
      if (struct.checkDocTime != null) {
        oprot.writeFieldBegin(CHECK_DOC_TIME_FIELD_DESC);
        oprot.writeString(struct.checkDocTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HouseCheckDocTupleSchemeFactory implements SchemeFactory {
    public HouseCheckDocTupleScheme getScheme() {
      return new HouseCheckDocTupleScheme();
    }
  }

  private static class HouseCheckDocTupleScheme extends TupleScheme<HouseCheckDoc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HouseCheckDoc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetRows()) {
        optionals.set(1);
      }
      if (struct.isSetPid()) {
        optionals.set(2);
      }
      if (struct.isSetUserId()) {
        optionals.set(3);
      }
      if (struct.isSetQueryType()) {
        optionals.set(4);
      }
      if (struct.isSetCertType()) {
        optionals.set(5);
      }
      if (struct.isSetYear()) {
        optionals.set(6);
      }
      if (struct.isSetCertNo()) {
        optionals.set(7);
      }
      if (struct.isSetPersonInfo()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(9);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(10);
      }
      if (struct.isSetIsDel()) {
        optionals.set(11);
      }
      if (struct.isSetDetailsList()) {
        optionals.set(12);
      }
      if (struct.isSetCheckStatus()) {
        optionals.set(13);
      }
      if (struct.isSetCheckDocTime()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetQueryType()) {
        oprot.writeI32(struct.queryType);
      }
      if (struct.isSetCertType()) {
        oprot.writeI32(struct.certType);
      }
      if (struct.isSetYear()) {
        oprot.writeString(struct.year);
      }
      if (struct.isSetCertNo()) {
        oprot.writeString(struct.certNo);
      }
      if (struct.isSetPersonInfo()) {
        oprot.writeString(struct.personInfo);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetIsDel()) {
        oprot.writeI32(struct.isDel);
      }
      if (struct.isSetDetailsList()) {
        {
          oprot.writeI32(struct.detailsList.size());
          for (HouseCheckDocDetails _iter4 : struct.detailsList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetCheckStatus()) {
        oprot.writeI32(struct.checkStatus);
      }
      if (struct.isSetCheckDocTime()) {
        oprot.writeString(struct.checkDocTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HouseCheckDoc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.queryType = iprot.readI32();
        struct.setQueryTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.certType = iprot.readI32();
        struct.setCertTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.year = iprot.readString();
        struct.setYearIsSet(true);
      }
      if (incoming.get(7)) {
        struct.certNo = iprot.readString();
        struct.setCertNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.personInfo = iprot.readString();
        struct.setPersonInfoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isDel = iprot.readI32();
        struct.setIsDelIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.detailsList = new ArrayList<HouseCheckDocDetails>(_list5.size);
          HouseCheckDocDetails _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new HouseCheckDocDetails();
            _elem6.read(iprot);
            struct.detailsList.add(_elem6);
          }
        }
        struct.setDetailsListIsSet(true);
      }
      if (incoming.get(13)) {
        struct.checkStatus = iprot.readI32();
        struct.setCheckStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.checkDocTime = iprot.readString();
        struct.setCheckDocTimeIsSet(true);
      }
    }
  }

}


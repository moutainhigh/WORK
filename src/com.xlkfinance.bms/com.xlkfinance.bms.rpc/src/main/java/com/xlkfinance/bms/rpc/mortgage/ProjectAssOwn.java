/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.mortgage;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-10")
public class ProjectAssOwn implements org.apache.thrift.TBase<ProjectAssOwn, ProjectAssOwn._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectAssOwn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectAssOwn");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("baseId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PUBLIC_OWN_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("publicOwnUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OWN_USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ownUserIds", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("acctTypeText", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certType", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CERT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("certNumber", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectAssOwnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectAssOwnTupleSchemeFactory());
  }

  public int pid; // required
  public int baseId; // required
  public int publicOwnUserId; // required
  public int status; // required
  public String ownUserIds; // required
  public String acctName; // required
  public String acctTypeText; // required
  public int acctId; // required
  public int cusType; // required
  public int ecoTrade; // required
  public int page; // required
  public int rows; // required
  public String certType; // required
  public String certNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    BASE_ID((short)2, "baseId"),
    PUBLIC_OWN_USER_ID((short)3, "publicOwnUserId"),
    STATUS((short)4, "status"),
    OWN_USER_IDS((short)5, "ownUserIds"),
    ACCT_NAME((short)6, "acctName"),
    ACCT_TYPE_TEXT((short)7, "acctTypeText"),
    ACCT_ID((short)8, "acctId"),
    CUS_TYPE((short)9, "cusType"),
    ECO_TRADE((short)10, "ecoTrade"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows"),
    CERT_TYPE((short)13, "certType"),
    CERT_NUMBER((short)14, "certNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // BASE_ID
          return BASE_ID;
        case 3: // PUBLIC_OWN_USER_ID
          return PUBLIC_OWN_USER_ID;
        case 4: // STATUS
          return STATUS;
        case 5: // OWN_USER_IDS
          return OWN_USER_IDS;
        case 6: // ACCT_NAME
          return ACCT_NAME;
        case 7: // ACCT_TYPE_TEXT
          return ACCT_TYPE_TEXT;
        case 8: // ACCT_ID
          return ACCT_ID;
        case 9: // CUS_TYPE
          return CUS_TYPE;
        case 10: // ECO_TRADE
          return ECO_TRADE;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        case 13: // CERT_TYPE
          return CERT_TYPE;
        case 14: // CERT_NUMBER
          return CERT_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __BASEID_ISSET_ID = 1;
  private static final int __PUBLICOWNUSERID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __ACCTID_ISSET_ID = 4;
  private static final int __CUSTYPE_ISSET_ID = 5;
  private static final int __ECOTRADE_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("baseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLIC_OWN_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("publicOwnUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OWN_USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("ownUserIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("acctTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("certNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectAssOwn.class, metaDataMap);
  }

  public ProjectAssOwn() {
  }

  public ProjectAssOwn(
    int pid,
    int baseId,
    int publicOwnUserId,
    int status,
    String ownUserIds,
    String acctName,
    String acctTypeText,
    int acctId,
    int cusType,
    int ecoTrade,
    int page,
    int rows,
    String certType,
    String certNumber)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.baseId = baseId;
    setBaseIdIsSet(true);
    this.publicOwnUserId = publicOwnUserId;
    setPublicOwnUserIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.ownUserIds = ownUserIds;
    this.acctName = acctName;
    this.acctTypeText = acctTypeText;
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.certType = certType;
    this.certNumber = certNumber;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectAssOwn(ProjectAssOwn other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.baseId = other.baseId;
    this.publicOwnUserId = other.publicOwnUserId;
    this.status = other.status;
    if (other.isSetOwnUserIds()) {
      this.ownUserIds = other.ownUserIds;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    if (other.isSetAcctTypeText()) {
      this.acctTypeText = other.acctTypeText;
    }
    this.acctId = other.acctId;
    this.cusType = other.cusType;
    this.ecoTrade = other.ecoTrade;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCertType()) {
      this.certType = other.certType;
    }
    if (other.isSetCertNumber()) {
      this.certNumber = other.certNumber;
    }
  }

  public ProjectAssOwn deepCopy() {
    return new ProjectAssOwn(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setBaseIdIsSet(false);
    this.baseId = 0;
    setPublicOwnUserIdIsSet(false);
    this.publicOwnUserId = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.ownUserIds = null;
    this.acctName = null;
    this.acctTypeText = null;
    setAcctIdIsSet(false);
    this.acctId = 0;
    setCusTypeIsSet(false);
    this.cusType = 0;
    setEcoTradeIsSet(false);
    this.ecoTrade = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.certType = null;
    this.certNumber = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectAssOwn setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getBaseId() {
    return this.baseId;
  }

  public ProjectAssOwn setBaseId(int baseId) {
    this.baseId = baseId;
    setBaseIdIsSet(true);
    return this;
  }

  public void unsetBaseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEID_ISSET_ID);
  }

  /** Returns true if field baseId is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseId() {
    return EncodingUtils.testBit(__isset_bitfield, __BASEID_ISSET_ID);
  }

  public void setBaseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEID_ISSET_ID, value);
  }

  public int getPublicOwnUserId() {
    return this.publicOwnUserId;
  }

  public ProjectAssOwn setPublicOwnUserId(int publicOwnUserId) {
    this.publicOwnUserId = publicOwnUserId;
    setPublicOwnUserIdIsSet(true);
    return this;
  }

  public void unsetPublicOwnUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICOWNUSERID_ISSET_ID);
  }

  /** Returns true if field publicOwnUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicOwnUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICOWNUSERID_ISSET_ID);
  }

  public void setPublicOwnUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICOWNUSERID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectAssOwn setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getOwnUserIds() {
    return this.ownUserIds;
  }

  public ProjectAssOwn setOwnUserIds(String ownUserIds) {
    this.ownUserIds = ownUserIds;
    return this;
  }

  public void unsetOwnUserIds() {
    this.ownUserIds = null;
  }

  /** Returns true if field ownUserIds is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnUserIds() {
    return this.ownUserIds != null;
  }

  public void setOwnUserIdsIsSet(boolean value) {
    if (!value) {
      this.ownUserIds = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public ProjectAssOwn setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public String getAcctTypeText() {
    return this.acctTypeText;
  }

  public ProjectAssOwn setAcctTypeText(String acctTypeText) {
    this.acctTypeText = acctTypeText;
    return this;
  }

  public void unsetAcctTypeText() {
    this.acctTypeText = null;
  }

  /** Returns true if field acctTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctTypeText() {
    return this.acctTypeText != null;
  }

  public void setAcctTypeTextIsSet(boolean value) {
    if (!value) {
      this.acctTypeText = null;
    }
  }

  public int getAcctId() {
    return this.acctId;
  }

  public ProjectAssOwn setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public int getCusType() {
    return this.cusType;
  }

  public ProjectAssOwn setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public int getEcoTrade() {
    return this.ecoTrade;
  }

  public ProjectAssOwn setEcoTrade(int ecoTrade) {
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    return this;
  }

  public void unsetEcoTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  public void setEcoTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECOTRADE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public ProjectAssOwn setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ProjectAssOwn setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCertType() {
    return this.certType;
  }

  public ProjectAssOwn setCertType(String certType) {
    this.certType = certType;
    return this;
  }

  public void unsetCertType() {
    this.certType = null;
  }

  /** Returns true if field certType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertType() {
    return this.certType != null;
  }

  public void setCertTypeIsSet(boolean value) {
    if (!value) {
      this.certType = null;
    }
  }

  public String getCertNumber() {
    return this.certNumber;
  }

  public ProjectAssOwn setCertNumber(String certNumber) {
    this.certNumber = certNumber;
    return this;
  }

  public void unsetCertNumber() {
    this.certNumber = null;
  }

  /** Returns true if field certNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNumber() {
    return this.certNumber != null;
  }

  public void setCertNumberIsSet(boolean value) {
    if (!value) {
      this.certNumber = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case BASE_ID:
      if (value == null) {
        unsetBaseId();
      } else {
        setBaseId((Integer)value);
      }
      break;

    case PUBLIC_OWN_USER_ID:
      if (value == null) {
        unsetPublicOwnUserId();
      } else {
        setPublicOwnUserId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case OWN_USER_IDS:
      if (value == null) {
        unsetOwnUserIds();
      } else {
        setOwnUserIds((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case ACCT_TYPE_TEXT:
      if (value == null) {
        unsetAcctTypeText();
      } else {
        setAcctTypeText((String)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CERT_TYPE:
      if (value == null) {
        unsetCertType();
      } else {
        setCertType((String)value);
      }
      break;

    case CERT_NUMBER:
      if (value == null) {
        unsetCertNumber();
      } else {
        setCertNumber((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case BASE_ID:
      return Integer.valueOf(getBaseId());

    case PUBLIC_OWN_USER_ID:
      return Integer.valueOf(getPublicOwnUserId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case OWN_USER_IDS:
      return getOwnUserIds();

    case ACCT_NAME:
      return getAcctName();

    case ACCT_TYPE_TEXT:
      return getAcctTypeText();

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case ECO_TRADE:
      return Integer.valueOf(getEcoTrade());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CERT_TYPE:
      return getCertType();

    case CERT_NUMBER:
      return getCertNumber();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case BASE_ID:
      return isSetBaseId();
    case PUBLIC_OWN_USER_ID:
      return isSetPublicOwnUserId();
    case STATUS:
      return isSetStatus();
    case OWN_USER_IDS:
      return isSetOwnUserIds();
    case ACCT_NAME:
      return isSetAcctName();
    case ACCT_TYPE_TEXT:
      return isSetAcctTypeText();
    case ACCT_ID:
      return isSetAcctId();
    case CUS_TYPE:
      return isSetCusType();
    case ECO_TRADE:
      return isSetEcoTrade();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CERT_TYPE:
      return isSetCertType();
    case CERT_NUMBER:
      return isSetCertNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectAssOwn)
      return this.equals((ProjectAssOwn)that);
    return false;
  }

  public boolean equals(ProjectAssOwn that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_baseId = true;
    boolean that_present_baseId = true;
    if (this_present_baseId || that_present_baseId) {
      if (!(this_present_baseId && that_present_baseId))
        return false;
      if (this.baseId != that.baseId)
        return false;
    }

    boolean this_present_publicOwnUserId = true;
    boolean that_present_publicOwnUserId = true;
    if (this_present_publicOwnUserId || that_present_publicOwnUserId) {
      if (!(this_present_publicOwnUserId && that_present_publicOwnUserId))
        return false;
      if (this.publicOwnUserId != that.publicOwnUserId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_ownUserIds = true && this.isSetOwnUserIds();
    boolean that_present_ownUserIds = true && that.isSetOwnUserIds();
    if (this_present_ownUserIds || that_present_ownUserIds) {
      if (!(this_present_ownUserIds && that_present_ownUserIds))
        return false;
      if (!this.ownUserIds.equals(that.ownUserIds))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_acctTypeText = true && this.isSetAcctTypeText();
    boolean that_present_acctTypeText = true && that.isSetAcctTypeText();
    if (this_present_acctTypeText || that_present_acctTypeText) {
      if (!(this_present_acctTypeText && that_present_acctTypeText))
        return false;
      if (!this.acctTypeText.equals(that.acctTypeText))
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_ecoTrade = true;
    boolean that_present_ecoTrade = true;
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (this.ecoTrade != that.ecoTrade)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_certType = true && this.isSetCertType();
    boolean that_present_certType = true && that.isSetCertType();
    if (this_present_certType || that_present_certType) {
      if (!(this_present_certType && that_present_certType))
        return false;
      if (!this.certType.equals(that.certType))
        return false;
    }

    boolean this_present_certNumber = true && this.isSetCertNumber();
    boolean that_present_certNumber = true && that.isSetCertNumber();
    if (this_present_certNumber || that_present_certNumber) {
      if (!(this_present_certNumber && that_present_certNumber))
        return false;
      if (!this.certNumber.equals(that.certNumber))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_baseId = true;
    list.add(present_baseId);
    if (present_baseId)
      list.add(baseId);

    boolean present_publicOwnUserId = true;
    list.add(present_publicOwnUserId);
    if (present_publicOwnUserId)
      list.add(publicOwnUserId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_ownUserIds = true && (isSetOwnUserIds());
    list.add(present_ownUserIds);
    if (present_ownUserIds)
      list.add(ownUserIds);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_acctTypeText = true && (isSetAcctTypeText());
    list.add(present_acctTypeText);
    if (present_acctTypeText)
      list.add(acctTypeText);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_ecoTrade = true;
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_certType = true && (isSetCertType());
    list.add(present_certType);
    if (present_certType)
      list.add(certType);

    boolean present_certNumber = true && (isSetCertNumber());
    list.add(present_certNumber);
    if (present_certNumber)
      list.add(certNumber);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectAssOwn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseId()).compareTo(other.isSetBaseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseId, other.baseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicOwnUserId()).compareTo(other.isSetPublicOwnUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicOwnUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicOwnUserId, other.publicOwnUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnUserIds()).compareTo(other.isSetOwnUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownUserIds, other.ownUserIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctTypeText()).compareTo(other.isSetAcctTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctTypeText, other.acctTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertType()).compareTo(other.isSetCertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certType, other.certType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNumber()).compareTo(other.isSetCertNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNumber, other.certNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectAssOwn(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("baseId:");
    sb.append(this.baseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicOwnUserId:");
    sb.append(this.publicOwnUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownUserIds:");
    if (this.ownUserIds == null) {
      sb.append("null");
    } else {
      sb.append(this.ownUserIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctTypeText:");
    if (this.acctTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.acctTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    sb.append(this.ecoTrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certType:");
    if (this.certType == null) {
      sb.append("null");
    } else {
      sb.append(this.certType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNumber:");
    if (this.certNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.certNumber);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectAssOwnStandardSchemeFactory implements SchemeFactory {
    public ProjectAssOwnStandardScheme getScheme() {
      return new ProjectAssOwnStandardScheme();
    }
  }

  private static class ProjectAssOwnStandardScheme extends StandardScheme<ProjectAssOwn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectAssOwn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.baseId = iprot.readI32();
              struct.setBaseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUBLIC_OWN_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicOwnUserId = iprot.readI32();
              struct.setPublicOwnUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OWN_USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownUserIds = iprot.readString();
              struct.setOwnUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCT_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctTypeText = iprot.readString();
              struct.setAcctTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecoTrade = iprot.readI32();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certType = iprot.readString();
              struct.setCertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CERT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNumber = iprot.readString();
              struct.setCertNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectAssOwn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
      oprot.writeI32(struct.baseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUBLIC_OWN_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.publicOwnUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.ownUserIds != null) {
        oprot.writeFieldBegin(OWN_USER_IDS_FIELD_DESC);
        oprot.writeString(struct.ownUserIds);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      if (struct.acctTypeText != null) {
        oprot.writeFieldBegin(ACCT_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.acctTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
      oprot.writeI32(struct.ecoTrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.certType != null) {
        oprot.writeFieldBegin(CERT_TYPE_FIELD_DESC);
        oprot.writeString(struct.certType);
        oprot.writeFieldEnd();
      }
      if (struct.certNumber != null) {
        oprot.writeFieldBegin(CERT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.certNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectAssOwnTupleSchemeFactory implements SchemeFactory {
    public ProjectAssOwnTupleScheme getScheme() {
      return new ProjectAssOwnTupleScheme();
    }
  }

  private static class ProjectAssOwnTupleScheme extends TupleScheme<ProjectAssOwn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectAssOwn struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetBaseId()) {
        optionals.set(1);
      }
      if (struct.isSetPublicOwnUserId()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetOwnUserIds()) {
        optionals.set(4);
      }
      if (struct.isSetAcctName()) {
        optionals.set(5);
      }
      if (struct.isSetAcctTypeText()) {
        optionals.set(6);
      }
      if (struct.isSetAcctId()) {
        optionals.set(7);
      }
      if (struct.isSetCusType()) {
        optionals.set(8);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetCertType()) {
        optionals.set(12);
      }
      if (struct.isSetCertNumber()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetBaseId()) {
        oprot.writeI32(struct.baseId);
      }
      if (struct.isSetPublicOwnUserId()) {
        oprot.writeI32(struct.publicOwnUserId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetOwnUserIds()) {
        oprot.writeString(struct.ownUserIds);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetAcctTypeText()) {
        oprot.writeString(struct.acctTypeText);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeI32(struct.ecoTrade);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCertType()) {
        oprot.writeString(struct.certType);
      }
      if (struct.isSetCertNumber()) {
        oprot.writeString(struct.certNumber);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectAssOwn struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.baseId = iprot.readI32();
        struct.setBaseIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.publicOwnUserId = iprot.readI32();
        struct.setPublicOwnUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ownUserIds = iprot.readString();
        struct.setOwnUserIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.acctTypeText = iprot.readString();
        struct.setAcctTypeTextIsSet(true);
      }
      if (incoming.get(7)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ecoTrade = iprot.readI32();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.certType = iprot.readString();
        struct.setCertTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.certNumber = iprot.readString();
        struct.setCertNumberIsSet(true);
      }
    }
  }

}


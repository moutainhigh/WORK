/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComContact implements org.apache.thrift.TBase<CusComContact, CusComContact._Fields>, java.io.Serializable, Cloneable, Comparable<CusComContact> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComContact");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_COM_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CTT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cttName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAIN_CTT_FIELD_DESC = new org.apache.thrift.protocol.TField("mainCtt", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DUTY_FIELD_DESC = new org.apache.thrift.protocol.TField("duty", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MOVE_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("movePhone", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FIXED_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("fixedPhone", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FAMILY_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("familyAddr", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COM_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("comPhone", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComContactStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComContactTupleSchemeFactory());
  }

  public int pid; // required
  public CusComBase cusComBase; // required
  public String cttName; // required
  public int mainCtt; // required
  public String duty; // required
  public String department; // required
  public String remark; // required
  public String movePhone; // required
  public String fixedPhone; // required
  public String familyAddr; // required
  public String comPhone; // required
  public int status; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_COM_BASE((short)2, "cusComBase"),
    CTT_NAME((short)3, "cttName"),
    MAIN_CTT((short)4, "mainCtt"),
    DUTY((short)5, "duty"),
    DEPARTMENT((short)6, "department"),
    REMARK((short)7, "remark"),
    MOVE_PHONE((short)8, "movePhone"),
    FIXED_PHONE((short)9, "fixedPhone"),
    FAMILY_ADDR((short)10, "familyAddr"),
    COM_PHONE((short)11, "comPhone"),
    STATUS((short)12, "status"),
    PAGE((short)13, "page"),
    ROWS((short)14, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_COM_BASE
          return CUS_COM_BASE;
        case 3: // CTT_NAME
          return CTT_NAME;
        case 4: // MAIN_CTT
          return MAIN_CTT;
        case 5: // DUTY
          return DUTY;
        case 6: // DEPARTMENT
          return DEPARTMENT;
        case 7: // REMARK
          return REMARK;
        case 8: // MOVE_PHONE
          return MOVE_PHONE;
        case 9: // FIXED_PHONE
          return FIXED_PHONE;
        case 10: // FAMILY_ADDR
          return FAMILY_ADDR;
        case 11: // COM_PHONE
          return COM_PHONE;
        case 12: // STATUS
          return STATUS;
        case 13: // PAGE
          return PAGE;
        case 14: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __MAINCTT_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_COM_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusComBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBase.class)));
    tmpMap.put(_Fields.CTT_NAME, new org.apache.thrift.meta_data.FieldMetaData("cttName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIN_CTT, new org.apache.thrift.meta_data.FieldMetaData("mainCtt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DUTY, new org.apache.thrift.meta_data.FieldMetaData("duty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOVE_PHONE, new org.apache.thrift.meta_data.FieldMetaData("movePhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIXED_PHONE, new org.apache.thrift.meta_data.FieldMetaData("fixedPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAMILY_ADDR, new org.apache.thrift.meta_data.FieldMetaData("familyAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COM_PHONE, new org.apache.thrift.meta_data.FieldMetaData("comPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComContact.class, metaDataMap);
  }

  public CusComContact() {
  }

  public CusComContact(
    int pid,
    CusComBase cusComBase,
    String cttName,
    int mainCtt,
    String duty,
    String department,
    String remark,
    String movePhone,
    String fixedPhone,
    String familyAddr,
    String comPhone,
    int status,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusComBase = cusComBase;
    this.cttName = cttName;
    this.mainCtt = mainCtt;
    setMainCttIsSet(true);
    this.duty = duty;
    this.department = department;
    this.remark = remark;
    this.movePhone = movePhone;
    this.fixedPhone = fixedPhone;
    this.familyAddr = familyAddr;
    this.comPhone = comPhone;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComContact(CusComContact other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusComBase()) {
      this.cusComBase = new CusComBase(other.cusComBase);
    }
    if (other.isSetCttName()) {
      this.cttName = other.cttName;
    }
    this.mainCtt = other.mainCtt;
    if (other.isSetDuty()) {
      this.duty = other.duty;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetMovePhone()) {
      this.movePhone = other.movePhone;
    }
    if (other.isSetFixedPhone()) {
      this.fixedPhone = other.fixedPhone;
    }
    if (other.isSetFamilyAddr()) {
      this.familyAddr = other.familyAddr;
    }
    if (other.isSetComPhone()) {
      this.comPhone = other.comPhone;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
  }

  public CusComContact deepCopy() {
    return new CusComContact(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusComBase = null;
    this.cttName = null;
    setMainCttIsSet(false);
    this.mainCtt = 0;
    this.duty = null;
    this.department = null;
    this.remark = null;
    this.movePhone = null;
    this.fixedPhone = null;
    this.familyAddr = null;
    this.comPhone = null;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComContact setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusComBase getCusComBase() {
    return this.cusComBase;
  }

  public CusComContact setCusComBase(CusComBase cusComBase) {
    this.cusComBase = cusComBase;
    return this;
  }

  public void unsetCusComBase() {
    this.cusComBase = null;
  }

  /** Returns true if field cusComBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComBase() {
    return this.cusComBase != null;
  }

  public void setCusComBaseIsSet(boolean value) {
    if (!value) {
      this.cusComBase = null;
    }
  }

  public String getCttName() {
    return this.cttName;
  }

  public CusComContact setCttName(String cttName) {
    this.cttName = cttName;
    return this;
  }

  public void unsetCttName() {
    this.cttName = null;
  }

  /** Returns true if field cttName is set (has been assigned a value) and false otherwise */
  public boolean isSetCttName() {
    return this.cttName != null;
  }

  public void setCttNameIsSet(boolean value) {
    if (!value) {
      this.cttName = null;
    }
  }

  public int getMainCtt() {
    return this.mainCtt;
  }

  public CusComContact setMainCtt(int mainCtt) {
    this.mainCtt = mainCtt;
    setMainCttIsSet(true);
    return this;
  }

  public void unsetMainCtt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAINCTT_ISSET_ID);
  }

  /** Returns true if field mainCtt is set (has been assigned a value) and false otherwise */
  public boolean isSetMainCtt() {
    return EncodingUtils.testBit(__isset_bitfield, __MAINCTT_ISSET_ID);
  }

  public void setMainCttIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAINCTT_ISSET_ID, value);
  }

  public String getDuty() {
    return this.duty;
  }

  public CusComContact setDuty(String duty) {
    this.duty = duty;
    return this;
  }

  public void unsetDuty() {
    this.duty = null;
  }

  /** Returns true if field duty is set (has been assigned a value) and false otherwise */
  public boolean isSetDuty() {
    return this.duty != null;
  }

  public void setDutyIsSet(boolean value) {
    if (!value) {
      this.duty = null;
    }
  }

  public String getDepartment() {
    return this.department;
  }

  public CusComContact setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CusComContact setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getMovePhone() {
    return this.movePhone;
  }

  public CusComContact setMovePhone(String movePhone) {
    this.movePhone = movePhone;
    return this;
  }

  public void unsetMovePhone() {
    this.movePhone = null;
  }

  /** Returns true if field movePhone is set (has been assigned a value) and false otherwise */
  public boolean isSetMovePhone() {
    return this.movePhone != null;
  }

  public void setMovePhoneIsSet(boolean value) {
    if (!value) {
      this.movePhone = null;
    }
  }

  public String getFixedPhone() {
    return this.fixedPhone;
  }

  public CusComContact setFixedPhone(String fixedPhone) {
    this.fixedPhone = fixedPhone;
    return this;
  }

  public void unsetFixedPhone() {
    this.fixedPhone = null;
  }

  /** Returns true if field fixedPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetFixedPhone() {
    return this.fixedPhone != null;
  }

  public void setFixedPhoneIsSet(boolean value) {
    if (!value) {
      this.fixedPhone = null;
    }
  }

  public String getFamilyAddr() {
    return this.familyAddr;
  }

  public CusComContact setFamilyAddr(String familyAddr) {
    this.familyAddr = familyAddr;
    return this;
  }

  public void unsetFamilyAddr() {
    this.familyAddr = null;
  }

  /** Returns true if field familyAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyAddr() {
    return this.familyAddr != null;
  }

  public void setFamilyAddrIsSet(boolean value) {
    if (!value) {
      this.familyAddr = null;
    }
  }

  public String getComPhone() {
    return this.comPhone;
  }

  public CusComContact setComPhone(String comPhone) {
    this.comPhone = comPhone;
    return this;
  }

  public void unsetComPhone() {
    this.comPhone = null;
  }

  /** Returns true if field comPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetComPhone() {
    return this.comPhone != null;
  }

  public void setComPhoneIsSet(boolean value) {
    if (!value) {
      this.comPhone = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusComContact setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusComContact setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusComContact setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_COM_BASE:
      if (value == null) {
        unsetCusComBase();
      } else {
        setCusComBase((CusComBase)value);
      }
      break;

    case CTT_NAME:
      if (value == null) {
        unsetCttName();
      } else {
        setCttName((String)value);
      }
      break;

    case MAIN_CTT:
      if (value == null) {
        unsetMainCtt();
      } else {
        setMainCtt((Integer)value);
      }
      break;

    case DUTY:
      if (value == null) {
        unsetDuty();
      } else {
        setDuty((String)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case MOVE_PHONE:
      if (value == null) {
        unsetMovePhone();
      } else {
        setMovePhone((String)value);
      }
      break;

    case FIXED_PHONE:
      if (value == null) {
        unsetFixedPhone();
      } else {
        setFixedPhone((String)value);
      }
      break;

    case FAMILY_ADDR:
      if (value == null) {
        unsetFamilyAddr();
      } else {
        setFamilyAddr((String)value);
      }
      break;

    case COM_PHONE:
      if (value == null) {
        unsetComPhone();
      } else {
        setComPhone((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_COM_BASE:
      return getCusComBase();

    case CTT_NAME:
      return getCttName();

    case MAIN_CTT:
      return Integer.valueOf(getMainCtt());

    case DUTY:
      return getDuty();

    case DEPARTMENT:
      return getDepartment();

    case REMARK:
      return getRemark();

    case MOVE_PHONE:
      return getMovePhone();

    case FIXED_PHONE:
      return getFixedPhone();

    case FAMILY_ADDR:
      return getFamilyAddr();

    case COM_PHONE:
      return getComPhone();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_COM_BASE:
      return isSetCusComBase();
    case CTT_NAME:
      return isSetCttName();
    case MAIN_CTT:
      return isSetMainCtt();
    case DUTY:
      return isSetDuty();
    case DEPARTMENT:
      return isSetDepartment();
    case REMARK:
      return isSetRemark();
    case MOVE_PHONE:
      return isSetMovePhone();
    case FIXED_PHONE:
      return isSetFixedPhone();
    case FAMILY_ADDR:
      return isSetFamilyAddr();
    case COM_PHONE:
      return isSetComPhone();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComContact)
      return this.equals((CusComContact)that);
    return false;
  }

  public boolean equals(CusComContact that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusComBase = true && this.isSetCusComBase();
    boolean that_present_cusComBase = true && that.isSetCusComBase();
    if (this_present_cusComBase || that_present_cusComBase) {
      if (!(this_present_cusComBase && that_present_cusComBase))
        return false;
      if (!this.cusComBase.equals(that.cusComBase))
        return false;
    }

    boolean this_present_cttName = true && this.isSetCttName();
    boolean that_present_cttName = true && that.isSetCttName();
    if (this_present_cttName || that_present_cttName) {
      if (!(this_present_cttName && that_present_cttName))
        return false;
      if (!this.cttName.equals(that.cttName))
        return false;
    }

    boolean this_present_mainCtt = true;
    boolean that_present_mainCtt = true;
    if (this_present_mainCtt || that_present_mainCtt) {
      if (!(this_present_mainCtt && that_present_mainCtt))
        return false;
      if (this.mainCtt != that.mainCtt)
        return false;
    }

    boolean this_present_duty = true && this.isSetDuty();
    boolean that_present_duty = true && that.isSetDuty();
    if (this_present_duty || that_present_duty) {
      if (!(this_present_duty && that_present_duty))
        return false;
      if (!this.duty.equals(that.duty))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_movePhone = true && this.isSetMovePhone();
    boolean that_present_movePhone = true && that.isSetMovePhone();
    if (this_present_movePhone || that_present_movePhone) {
      if (!(this_present_movePhone && that_present_movePhone))
        return false;
      if (!this.movePhone.equals(that.movePhone))
        return false;
    }

    boolean this_present_fixedPhone = true && this.isSetFixedPhone();
    boolean that_present_fixedPhone = true && that.isSetFixedPhone();
    if (this_present_fixedPhone || that_present_fixedPhone) {
      if (!(this_present_fixedPhone && that_present_fixedPhone))
        return false;
      if (!this.fixedPhone.equals(that.fixedPhone))
        return false;
    }

    boolean this_present_familyAddr = true && this.isSetFamilyAddr();
    boolean that_present_familyAddr = true && that.isSetFamilyAddr();
    if (this_present_familyAddr || that_present_familyAddr) {
      if (!(this_present_familyAddr && that_present_familyAddr))
        return false;
      if (!this.familyAddr.equals(that.familyAddr))
        return false;
    }

    boolean this_present_comPhone = true && this.isSetComPhone();
    boolean that_present_comPhone = true && that.isSetComPhone();
    if (this_present_comPhone || that_present_comPhone) {
      if (!(this_present_comPhone && that_present_comPhone))
        return false;
      if (!this.comPhone.equals(that.comPhone))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusComBase = true && (isSetCusComBase());
    list.add(present_cusComBase);
    if (present_cusComBase)
      list.add(cusComBase);

    boolean present_cttName = true && (isSetCttName());
    list.add(present_cttName);
    if (present_cttName)
      list.add(cttName);

    boolean present_mainCtt = true;
    list.add(present_mainCtt);
    if (present_mainCtt)
      list.add(mainCtt);

    boolean present_duty = true && (isSetDuty());
    list.add(present_duty);
    if (present_duty)
      list.add(duty);

    boolean present_department = true && (isSetDepartment());
    list.add(present_department);
    if (present_department)
      list.add(department);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_movePhone = true && (isSetMovePhone());
    list.add(present_movePhone);
    if (present_movePhone)
      list.add(movePhone);

    boolean present_fixedPhone = true && (isSetFixedPhone());
    list.add(present_fixedPhone);
    if (present_fixedPhone)
      list.add(fixedPhone);

    boolean present_familyAddr = true && (isSetFamilyAddr());
    list.add(present_familyAddr);
    if (present_familyAddr)
      list.add(familyAddr);

    boolean present_comPhone = true && (isSetComPhone());
    list.add(present_comPhone);
    if (present_comPhone)
      list.add(comPhone);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComContact other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComBase()).compareTo(other.isSetCusComBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComBase, other.cusComBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCttName()).compareTo(other.isSetCttName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCttName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cttName, other.cttName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainCtt()).compareTo(other.isSetMainCtt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainCtt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainCtt, other.mainCtt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuty()).compareTo(other.isSetDuty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duty, other.duty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMovePhone()).compareTo(other.isSetMovePhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMovePhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.movePhone, other.movePhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixedPhone()).compareTo(other.isSetFixedPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixedPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixedPhone, other.fixedPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyAddr()).compareTo(other.isSetFamilyAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyAddr, other.familyAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComPhone()).compareTo(other.isSetComPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comPhone, other.comPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComContact(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComBase:");
    if (this.cusComBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cttName:");
    if (this.cttName == null) {
      sb.append("null");
    } else {
      sb.append(this.cttName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mainCtt:");
    sb.append(this.mainCtt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duty:");
    if (this.duty == null) {
      sb.append("null");
    } else {
      sb.append(this.duty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("department:");
    if (this.department == null) {
      sb.append("null");
    } else {
      sb.append(this.department);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("movePhone:");
    if (this.movePhone == null) {
      sb.append("null");
    } else {
      sb.append(this.movePhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixedPhone:");
    if (this.fixedPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.fixedPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyAddr:");
    if (this.familyAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.familyAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comPhone:");
    if (this.comPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.comPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusComBase != null) {
      cusComBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComContactStandardSchemeFactory implements SchemeFactory {
    public CusComContactStandardScheme getScheme() {
      return new CusComContactStandardScheme();
    }
  }

  private static class CusComContactStandardScheme extends StandardScheme<CusComContact> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComContact struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_COM_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusComBase = new CusComBase();
              struct.cusComBase.read(iprot);
              struct.setCusComBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CTT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cttName = iprot.readString();
              struct.setCttNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAIN_CTT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mainCtt = iprot.readI32();
              struct.setMainCttIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DUTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.duty = iprot.readString();
              struct.setDutyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MOVE_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.movePhone = iprot.readString();
              struct.setMovePhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FIXED_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fixedPhone = iprot.readString();
              struct.setFixedPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FAMILY_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.familyAddr = iprot.readString();
              struct.setFamilyAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COM_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comPhone = iprot.readString();
              struct.setComPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComContact struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusComBase != null) {
        oprot.writeFieldBegin(CUS_COM_BASE_FIELD_DESC);
        struct.cusComBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cttName != null) {
        oprot.writeFieldBegin(CTT_NAME_FIELD_DESC);
        oprot.writeString(struct.cttName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAIN_CTT_FIELD_DESC);
      oprot.writeI32(struct.mainCtt);
      oprot.writeFieldEnd();
      if (struct.duty != null) {
        oprot.writeFieldBegin(DUTY_FIELD_DESC);
        oprot.writeString(struct.duty);
        oprot.writeFieldEnd();
      }
      if (struct.department != null) {
        oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
        oprot.writeString(struct.department);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.movePhone != null) {
        oprot.writeFieldBegin(MOVE_PHONE_FIELD_DESC);
        oprot.writeString(struct.movePhone);
        oprot.writeFieldEnd();
      }
      if (struct.fixedPhone != null) {
        oprot.writeFieldBegin(FIXED_PHONE_FIELD_DESC);
        oprot.writeString(struct.fixedPhone);
        oprot.writeFieldEnd();
      }
      if (struct.familyAddr != null) {
        oprot.writeFieldBegin(FAMILY_ADDR_FIELD_DESC);
        oprot.writeString(struct.familyAddr);
        oprot.writeFieldEnd();
      }
      if (struct.comPhone != null) {
        oprot.writeFieldBegin(COM_PHONE_FIELD_DESC);
        oprot.writeString(struct.comPhone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComContactTupleSchemeFactory implements SchemeFactory {
    public CusComContactTupleScheme getScheme() {
      return new CusComContactTupleScheme();
    }
  }

  private static class CusComContactTupleScheme extends TupleScheme<CusComContact> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComContact struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusComBase()) {
        optionals.set(1);
      }
      if (struct.isSetCttName()) {
        optionals.set(2);
      }
      if (struct.isSetMainCtt()) {
        optionals.set(3);
      }
      if (struct.isSetDuty()) {
        optionals.set(4);
      }
      if (struct.isSetDepartment()) {
        optionals.set(5);
      }
      if (struct.isSetRemark()) {
        optionals.set(6);
      }
      if (struct.isSetMovePhone()) {
        optionals.set(7);
      }
      if (struct.isSetFixedPhone()) {
        optionals.set(8);
      }
      if (struct.isSetFamilyAddr()) {
        optionals.set(9);
      }
      if (struct.isSetComPhone()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetPage()) {
        optionals.set(12);
      }
      if (struct.isSetRows()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusComBase()) {
        struct.cusComBase.write(oprot);
      }
      if (struct.isSetCttName()) {
        oprot.writeString(struct.cttName);
      }
      if (struct.isSetMainCtt()) {
        oprot.writeI32(struct.mainCtt);
      }
      if (struct.isSetDuty()) {
        oprot.writeString(struct.duty);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetMovePhone()) {
        oprot.writeString(struct.movePhone);
      }
      if (struct.isSetFixedPhone()) {
        oprot.writeString(struct.fixedPhone);
      }
      if (struct.isSetFamilyAddr()) {
        oprot.writeString(struct.familyAddr);
      }
      if (struct.isSetComPhone()) {
        oprot.writeString(struct.comPhone);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComContact struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusComBase = new CusComBase();
        struct.cusComBase.read(iprot);
        struct.setCusComBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cttName = iprot.readString();
        struct.setCttNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mainCtt = iprot.readI32();
        struct.setMainCttIsSet(true);
      }
      if (incoming.get(4)) {
        struct.duty = iprot.readString();
        struct.setDutyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.movePhone = iprot.readString();
        struct.setMovePhoneIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fixedPhone = iprot.readString();
        struct.setFixedPhoneIsSet(true);
      }
      if (incoming.get(9)) {
        struct.familyAddr = iprot.readString();
        struct.setFamilyAddrIsSet(true);
      }
      if (incoming.get(10)) {
        struct.comPhone = iprot.readString();
        struct.setComPhoneIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


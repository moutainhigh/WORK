/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class CollectFileDTO implements org.apache.thrift.TBase<CollectFileDTO, CollectFileDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CollectFileDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectFileDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField COLLECT_FILE_MAP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFileMapList", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField COLLECT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("collectDate", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField BUYER_SELLER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerSellerType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField BUYER_SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerSellerName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField REFUND_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundStatus", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField REFUND_FINISH_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFinishStatus", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectFileDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectFileDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int status; // required
  public String code; // required
  public String name; // required
  public String remark; // required
  public String createrDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public List<CollectFileMap> collectFileMapList; // required
  public String collectDate; // required
  public int buyerSellerType; // required
  public String buyerSellerName; // required
  public String refundDate; // required
  public int refundStatus; // required
  public int refundFinishStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    STATUS((short)3, "status"),
    CODE((short)4, "code"),
    NAME((short)5, "name"),
    REMARK((short)6, "remark"),
    CREATER_DATE((short)7, "createrDate"),
    CREATER_ID((short)8, "createrId"),
    UPDATE_ID((short)9, "updateId"),
    UPDATE_DATE((short)10, "updateDate"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows"),
    USER_IDS((short)13, "userIds"),
    COLLECT_FILE_MAP_LIST((short)14, "collectFileMapList"),
    COLLECT_DATE((short)15, "collectDate"),
    BUYER_SELLER_TYPE((short)16, "buyerSellerType"),
    BUYER_SELLER_NAME((short)17, "buyerSellerName"),
    REFUND_DATE((short)18, "refundDate"),
    REFUND_STATUS((short)19, "refundStatus"),
    REFUND_FINISH_STATUS((short)20, "refundFinishStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // STATUS
          return STATUS;
        case 4: // CODE
          return CODE;
        case 5: // NAME
          return NAME;
        case 6: // REMARK
          return REMARK;
        case 7: // CREATER_DATE
          return CREATER_DATE;
        case 8: // CREATER_ID
          return CREATER_ID;
        case 9: // UPDATE_ID
          return UPDATE_ID;
        case 10: // UPDATE_DATE
          return UPDATE_DATE;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        case 13: // USER_IDS
          return USER_IDS;
        case 14: // COLLECT_FILE_MAP_LIST
          return COLLECT_FILE_MAP_LIST;
        case 15: // COLLECT_DATE
          return COLLECT_DATE;
        case 16: // BUYER_SELLER_TYPE
          return BUYER_SELLER_TYPE;
        case 17: // BUYER_SELLER_NAME
          return BUYER_SELLER_NAME;
        case 18: // REFUND_DATE
          return REFUND_DATE;
        case 19: // REFUND_STATUS
          return REFUND_STATUS;
        case 20: // REFUND_FINISH_STATUS
          return REFUND_FINISH_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __CREATERID_ISSET_ID = 3;
  private static final int __UPDATEID_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __BUYERSELLERTYPE_ISSET_ID = 7;
  private static final int __REFUNDSTATUS_ISSET_ID = 8;
  private static final int __REFUNDFINISHSTATUS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COLLECT_FILE_MAP_LIST, new org.apache.thrift.meta_data.FieldMetaData("collectFileMapList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFileMap.class))));
    tmpMap.put(_Fields.COLLECT_DATE, new org.apache.thrift.meta_data.FieldMetaData("collectDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_SELLER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("buyerSellerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUYER_SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerSellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("refundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_STATUS, new org.apache.thrift.meta_data.FieldMetaData("refundStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REFUND_FINISH_STATUS, new org.apache.thrift.meta_data.FieldMetaData("refundFinishStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectFileDTO.class, metaDataMap);
  }

  public CollectFileDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public CollectFileDTO(
    int pid,
    int projectId,
    int status,
    String code,
    String name,
    String remark,
    String createrDate,
    int createrId,
    int updateId,
    String updateDate,
    int page,
    int rows,
    List<Integer> userIds,
    List<CollectFileMap> collectFileMapList,
    String collectDate,
    int buyerSellerType,
    String buyerSellerName,
    String refundDate,
    int refundStatus,
    int refundFinishStatus)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.code = code;
    this.name = name;
    this.remark = remark;
    this.createrDate = createrDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.collectFileMapList = collectFileMapList;
    this.collectDate = collectDate;
    this.buyerSellerType = buyerSellerType;
    setBuyerSellerTypeIsSet(true);
    this.buyerSellerName = buyerSellerName;
    this.refundDate = refundDate;
    this.refundStatus = refundStatus;
    setRefundStatusIsSet(true);
    this.refundFinishStatus = refundFinishStatus;
    setRefundFinishStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectFileDTO(CollectFileDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.status = other.status;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetCollectFileMapList()) {
      List<CollectFileMap> __this__collectFileMapList = new ArrayList<CollectFileMap>(other.collectFileMapList.size());
      for (CollectFileMap other_element : other.collectFileMapList) {
        __this__collectFileMapList.add(new CollectFileMap(other_element));
      }
      this.collectFileMapList = __this__collectFileMapList;
    }
    if (other.isSetCollectDate()) {
      this.collectDate = other.collectDate;
    }
    this.buyerSellerType = other.buyerSellerType;
    if (other.isSetBuyerSellerName()) {
      this.buyerSellerName = other.buyerSellerName;
    }
    if (other.isSetRefundDate()) {
      this.refundDate = other.refundDate;
    }
    this.refundStatus = other.refundStatus;
    this.refundFinishStatus = other.refundFinishStatus;
  }

  public CollectFileDTO deepCopy() {
    return new CollectFileDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.code = null;
    this.name = null;
    this.remark = null;
    this.createrDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.collectFileMapList = null;
    this.collectDate = null;
    setBuyerSellerTypeIsSet(false);
    this.buyerSellerType = 0;
    this.buyerSellerName = null;
    this.refundDate = null;
    setRefundStatusIsSet(false);
    this.refundStatus = 0;
    setRefundFinishStatusIsSet(false);
    this.refundFinishStatus = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CollectFileDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CollectFileDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CollectFileDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getCode() {
    return this.code;
  }

  public CollectFileDTO setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public CollectFileDTO setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CollectFileDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public CollectFileDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public CollectFileDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public CollectFileDTO setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public CollectFileDTO setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CollectFileDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CollectFileDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CollectFileDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getCollectFileMapListSize() {
    return (this.collectFileMapList == null) ? 0 : this.collectFileMapList.size();
  }

  public java.util.Iterator<CollectFileMap> getCollectFileMapListIterator() {
    return (this.collectFileMapList == null) ? null : this.collectFileMapList.iterator();
  }

  public void addToCollectFileMapList(CollectFileMap elem) {
    if (this.collectFileMapList == null) {
      this.collectFileMapList = new ArrayList<CollectFileMap>();
    }
    this.collectFileMapList.add(elem);
  }

  public List<CollectFileMap> getCollectFileMapList() {
    return this.collectFileMapList;
  }

  public CollectFileDTO setCollectFileMapList(List<CollectFileMap> collectFileMapList) {
    this.collectFileMapList = collectFileMapList;
    return this;
  }

  public void unsetCollectFileMapList() {
    this.collectFileMapList = null;
  }

  /** Returns true if field collectFileMapList is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectFileMapList() {
    return this.collectFileMapList != null;
  }

  public void setCollectFileMapListIsSet(boolean value) {
    if (!value) {
      this.collectFileMapList = null;
    }
  }

  public String getCollectDate() {
    return this.collectDate;
  }

  public CollectFileDTO setCollectDate(String collectDate) {
    this.collectDate = collectDate;
    return this;
  }

  public void unsetCollectDate() {
    this.collectDate = null;
  }

  /** Returns true if field collectDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectDate() {
    return this.collectDate != null;
  }

  public void setCollectDateIsSet(boolean value) {
    if (!value) {
      this.collectDate = null;
    }
  }

  public int getBuyerSellerType() {
    return this.buyerSellerType;
  }

  public CollectFileDTO setBuyerSellerType(int buyerSellerType) {
    this.buyerSellerType = buyerSellerType;
    setBuyerSellerTypeIsSet(true);
    return this;
  }

  public void unsetBuyerSellerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID);
  }

  /** Returns true if field buyerSellerType is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerSellerType() {
    return EncodingUtils.testBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID);
  }

  public void setBuyerSellerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYERSELLERTYPE_ISSET_ID, value);
  }

  public String getBuyerSellerName() {
    return this.buyerSellerName;
  }

  public CollectFileDTO setBuyerSellerName(String buyerSellerName) {
    this.buyerSellerName = buyerSellerName;
    return this;
  }

  public void unsetBuyerSellerName() {
    this.buyerSellerName = null;
  }

  /** Returns true if field buyerSellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerSellerName() {
    return this.buyerSellerName != null;
  }

  public void setBuyerSellerNameIsSet(boolean value) {
    if (!value) {
      this.buyerSellerName = null;
    }
  }

  public String getRefundDate() {
    return this.refundDate;
  }

  public CollectFileDTO setRefundDate(String refundDate) {
    this.refundDate = refundDate;
    return this;
  }

  public void unsetRefundDate() {
    this.refundDate = null;
  }

  /** Returns true if field refundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundDate() {
    return this.refundDate != null;
  }

  public void setRefundDateIsSet(boolean value) {
    if (!value) {
      this.refundDate = null;
    }
  }

  public int getRefundStatus() {
    return this.refundStatus;
  }

  public CollectFileDTO setRefundStatus(int refundStatus) {
    this.refundStatus = refundStatus;
    setRefundStatusIsSet(true);
    return this;
  }

  public void unsetRefundStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDSTATUS_ISSET_ID);
  }

  /** Returns true if field refundStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDSTATUS_ISSET_ID);
  }

  public void setRefundStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDSTATUS_ISSET_ID, value);
  }

  public int getRefundFinishStatus() {
    return this.refundFinishStatus;
  }

  public CollectFileDTO setRefundFinishStatus(int refundFinishStatus) {
    this.refundFinishStatus = refundFinishStatus;
    setRefundFinishStatusIsSet(true);
    return this;
  }

  public void unsetRefundFinishStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDFINISHSTATUS_ISSET_ID);
  }

  /** Returns true if field refundFinishStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundFinishStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDFINISHSTATUS_ISSET_ID);
  }

  public void setRefundFinishStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDFINISHSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case COLLECT_FILE_MAP_LIST:
      if (value == null) {
        unsetCollectFileMapList();
      } else {
        setCollectFileMapList((List<CollectFileMap>)value);
      }
      break;

    case COLLECT_DATE:
      if (value == null) {
        unsetCollectDate();
      } else {
        setCollectDate((String)value);
      }
      break;

    case BUYER_SELLER_TYPE:
      if (value == null) {
        unsetBuyerSellerType();
      } else {
        setBuyerSellerType((Integer)value);
      }
      break;

    case BUYER_SELLER_NAME:
      if (value == null) {
        unsetBuyerSellerName();
      } else {
        setBuyerSellerName((String)value);
      }
      break;

    case REFUND_DATE:
      if (value == null) {
        unsetRefundDate();
      } else {
        setRefundDate((String)value);
      }
      break;

    case REFUND_STATUS:
      if (value == null) {
        unsetRefundStatus();
      } else {
        setRefundStatus((Integer)value);
      }
      break;

    case REFUND_FINISH_STATUS:
      if (value == null) {
        unsetRefundFinishStatus();
      } else {
        setRefundFinishStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CODE:
      return getCode();

    case NAME:
      return getName();

    case REMARK:
      return getRemark();

    case CREATER_DATE:
      return getCreaterDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case COLLECT_FILE_MAP_LIST:
      return getCollectFileMapList();

    case COLLECT_DATE:
      return getCollectDate();

    case BUYER_SELLER_TYPE:
      return Integer.valueOf(getBuyerSellerType());

    case BUYER_SELLER_NAME:
      return getBuyerSellerName();

    case REFUND_DATE:
      return getRefundDate();

    case REFUND_STATUS:
      return Integer.valueOf(getRefundStatus());

    case REFUND_FINISH_STATUS:
      return Integer.valueOf(getRefundFinishStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case STATUS:
      return isSetStatus();
    case CODE:
      return isSetCode();
    case NAME:
      return isSetName();
    case REMARK:
      return isSetRemark();
    case CREATER_DATE:
      return isSetCreaterDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case COLLECT_FILE_MAP_LIST:
      return isSetCollectFileMapList();
    case COLLECT_DATE:
      return isSetCollectDate();
    case BUYER_SELLER_TYPE:
      return isSetBuyerSellerType();
    case BUYER_SELLER_NAME:
      return isSetBuyerSellerName();
    case REFUND_DATE:
      return isSetRefundDate();
    case REFUND_STATUS:
      return isSetRefundStatus();
    case REFUND_FINISH_STATUS:
      return isSetRefundFinishStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectFileDTO)
      return this.equals((CollectFileDTO)that);
    return false;
  }

  public boolean equals(CollectFileDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_collectFileMapList = true && this.isSetCollectFileMapList();
    boolean that_present_collectFileMapList = true && that.isSetCollectFileMapList();
    if (this_present_collectFileMapList || that_present_collectFileMapList) {
      if (!(this_present_collectFileMapList && that_present_collectFileMapList))
        return false;
      if (!this.collectFileMapList.equals(that.collectFileMapList))
        return false;
    }

    boolean this_present_collectDate = true && this.isSetCollectDate();
    boolean that_present_collectDate = true && that.isSetCollectDate();
    if (this_present_collectDate || that_present_collectDate) {
      if (!(this_present_collectDate && that_present_collectDate))
        return false;
      if (!this.collectDate.equals(that.collectDate))
        return false;
    }

    boolean this_present_buyerSellerType = true;
    boolean that_present_buyerSellerType = true;
    if (this_present_buyerSellerType || that_present_buyerSellerType) {
      if (!(this_present_buyerSellerType && that_present_buyerSellerType))
        return false;
      if (this.buyerSellerType != that.buyerSellerType)
        return false;
    }

    boolean this_present_buyerSellerName = true && this.isSetBuyerSellerName();
    boolean that_present_buyerSellerName = true && that.isSetBuyerSellerName();
    if (this_present_buyerSellerName || that_present_buyerSellerName) {
      if (!(this_present_buyerSellerName && that_present_buyerSellerName))
        return false;
      if (!this.buyerSellerName.equals(that.buyerSellerName))
        return false;
    }

    boolean this_present_refundDate = true && this.isSetRefundDate();
    boolean that_present_refundDate = true && that.isSetRefundDate();
    if (this_present_refundDate || that_present_refundDate) {
      if (!(this_present_refundDate && that_present_refundDate))
        return false;
      if (!this.refundDate.equals(that.refundDate))
        return false;
    }

    boolean this_present_refundStatus = true;
    boolean that_present_refundStatus = true;
    if (this_present_refundStatus || that_present_refundStatus) {
      if (!(this_present_refundStatus && that_present_refundStatus))
        return false;
      if (this.refundStatus != that.refundStatus)
        return false;
    }

    boolean this_present_refundFinishStatus = true;
    boolean that_present_refundFinishStatus = true;
    if (this_present_refundFinishStatus || that_present_refundFinishStatus) {
      if (!(this_present_refundFinishStatus && that_present_refundFinishStatus))
        return false;
      if (this.refundFinishStatus != that.refundFinishStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_collectFileMapList = true && (isSetCollectFileMapList());
    list.add(present_collectFileMapList);
    if (present_collectFileMapList)
      list.add(collectFileMapList);

    boolean present_collectDate = true && (isSetCollectDate());
    list.add(present_collectDate);
    if (present_collectDate)
      list.add(collectDate);

    boolean present_buyerSellerType = true;
    list.add(present_buyerSellerType);
    if (present_buyerSellerType)
      list.add(buyerSellerType);

    boolean present_buyerSellerName = true && (isSetBuyerSellerName());
    list.add(present_buyerSellerName);
    if (present_buyerSellerName)
      list.add(buyerSellerName);

    boolean present_refundDate = true && (isSetRefundDate());
    list.add(present_refundDate);
    if (present_refundDate)
      list.add(refundDate);

    boolean present_refundStatus = true;
    list.add(present_refundStatus);
    if (present_refundStatus)
      list.add(refundStatus);

    boolean present_refundFinishStatus = true;
    list.add(present_refundFinishStatus);
    if (present_refundFinishStatus)
      list.add(refundFinishStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectFileDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectFileMapList()).compareTo(other.isSetCollectFileMapList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectFileMapList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFileMapList, other.collectFileMapList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectDate()).compareTo(other.isSetCollectDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectDate, other.collectDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerSellerType()).compareTo(other.isSetBuyerSellerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerSellerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerSellerType, other.buyerSellerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerSellerName()).compareTo(other.isSetBuyerSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerSellerName, other.buyerSellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundDate()).compareTo(other.isSetRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDate, other.refundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundStatus()).compareTo(other.isSetRefundStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundStatus, other.refundStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundFinishStatus()).compareTo(other.isSetRefundFinishStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundFinishStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFinishStatus, other.refundFinishStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectFileDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectFileMapList:");
    if (this.collectFileMapList == null) {
      sb.append("null");
    } else {
      sb.append(this.collectFileMapList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectDate:");
    if (this.collectDate == null) {
      sb.append("null");
    } else {
      sb.append(this.collectDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerSellerType:");
    sb.append(this.buyerSellerType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerSellerName:");
    if (this.buyerSellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerSellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundDate:");
    if (this.refundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.refundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundStatus:");
    sb.append(this.refundStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundFinishStatus:");
    sb.append(this.refundFinishStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectFileDTOStandardSchemeFactory implements SchemeFactory {
    public CollectFileDTOStandardScheme getScheme() {
      return new CollectFileDTOStandardScheme();
    }
  }

  private static class CollectFileDTOStandardScheme extends StandardScheme<CollectFileDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectFileDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list184.size);
                int _elem185;
                for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                {
                  _elem185 = iprot.readI32();
                  struct.userIds.add(_elem185);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COLLECT_FILE_MAP_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();
                struct.collectFileMapList = new ArrayList<CollectFileMap>(_list187.size);
                CollectFileMap _elem188;
                for (int _i189 = 0; _i189 < _list187.size; ++_i189)
                {
                  _elem188 = new CollectFileMap();
                  _elem188.read(iprot);
                  struct.collectFileMapList.add(_elem188);
                }
                iprot.readListEnd();
              }
              struct.setCollectFileMapListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COLLECT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collectDate = iprot.readString();
              struct.setCollectDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BUYER_SELLER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buyerSellerType = iprot.readI32();
              struct.setBuyerSellerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BUYER_SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerSellerName = iprot.readString();
              struct.setBuyerSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundDate = iprot.readString();
              struct.setRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REFUND_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundStatus = iprot.readI32();
              struct.setRefundStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REFUND_FINISH_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refundFinishStatus = iprot.readI32();
              struct.setRefundFinishStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectFileDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter190 : struct.userIds)
          {
            oprot.writeI32(_iter190);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.collectFileMapList != null) {
        oprot.writeFieldBegin(COLLECT_FILE_MAP_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.collectFileMapList.size()));
          for (CollectFileMap _iter191 : struct.collectFileMapList)
          {
            _iter191.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.collectDate != null) {
        oprot.writeFieldBegin(COLLECT_DATE_FIELD_DESC);
        oprot.writeString(struct.collectDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUYER_SELLER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.buyerSellerType);
      oprot.writeFieldEnd();
      if (struct.buyerSellerName != null) {
        oprot.writeFieldBegin(BUYER_SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerSellerName);
        oprot.writeFieldEnd();
      }
      if (struct.refundDate != null) {
        oprot.writeFieldBegin(REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.refundDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_STATUS_FIELD_DESC);
      oprot.writeI32(struct.refundStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_FINISH_STATUS_FIELD_DESC);
      oprot.writeI32(struct.refundFinishStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectFileDTOTupleSchemeFactory implements SchemeFactory {
    public CollectFileDTOTupleScheme getScheme() {
      return new CollectFileDTOTupleScheme();
    }
  }

  private static class CollectFileDTOTupleScheme extends TupleScheme<CollectFileDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectFileDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetCode()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetRemark()) {
        optionals.set(5);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(6);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetUserIds()) {
        optionals.set(12);
      }
      if (struct.isSetCollectFileMapList()) {
        optionals.set(13);
      }
      if (struct.isSetCollectDate()) {
        optionals.set(14);
      }
      if (struct.isSetBuyerSellerType()) {
        optionals.set(15);
      }
      if (struct.isSetBuyerSellerName()) {
        optionals.set(16);
      }
      if (struct.isSetRefundDate()) {
        optionals.set(17);
      }
      if (struct.isSetRefundStatus()) {
        optionals.set(18);
      }
      if (struct.isSetRefundFinishStatus()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter192 : struct.userIds)
          {
            oprot.writeI32(_iter192);
          }
        }
      }
      if (struct.isSetCollectFileMapList()) {
        {
          oprot.writeI32(struct.collectFileMapList.size());
          for (CollectFileMap _iter193 : struct.collectFileMapList)
          {
            _iter193.write(oprot);
          }
        }
      }
      if (struct.isSetCollectDate()) {
        oprot.writeString(struct.collectDate);
      }
      if (struct.isSetBuyerSellerType()) {
        oprot.writeI32(struct.buyerSellerType);
      }
      if (struct.isSetBuyerSellerName()) {
        oprot.writeString(struct.buyerSellerName);
      }
      if (struct.isSetRefundDate()) {
        oprot.writeString(struct.refundDate);
      }
      if (struct.isSetRefundStatus()) {
        oprot.writeI32(struct.refundStatus);
      }
      if (struct.isSetRefundFinishStatus()) {
        oprot.writeI32(struct.refundFinishStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectFileDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list194.size);
          int _elem195;
          for (int _i196 = 0; _i196 < _list194.size; ++_i196)
          {
            _elem195 = iprot.readI32();
            struct.userIds.add(_elem195);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.collectFileMapList = new ArrayList<CollectFileMap>(_list197.size);
          CollectFileMap _elem198;
          for (int _i199 = 0; _i199 < _list197.size; ++_i199)
          {
            _elem198 = new CollectFileMap();
            _elem198.read(iprot);
            struct.collectFileMapList.add(_elem198);
          }
        }
        struct.setCollectFileMapListIsSet(true);
      }
      if (incoming.get(14)) {
        struct.collectDate = iprot.readString();
        struct.setCollectDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.buyerSellerType = iprot.readI32();
        struct.setBuyerSellerTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.buyerSellerName = iprot.readString();
        struct.setBuyerSellerNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.refundDate = iprot.readString();
        struct.setRefundDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.refundStatus = iprot.readI32();
        struct.setRefundStatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.refundFinishStatus = iprot.readI32();
        struct.setRefundFinishStatusIsSet(true);
      }
    }
  }

}


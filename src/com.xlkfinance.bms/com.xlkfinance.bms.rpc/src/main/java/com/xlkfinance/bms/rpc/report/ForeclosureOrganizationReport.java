/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-28")
public class ForeclosureOrganizationReport implements org.apache.thrift.TBase<ForeclosureOrganizationReport, ForeclosureOrganizationReport._Fields>, java.io.Serializable, Cloneable, Comparable<ForeclosureOrganizationReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForeclosureOrganizationReport");

  private static final org.apache.thrift.protocol.TField RE_PAYMENT_MONTH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rePaymentMonthId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("newCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NEW_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("newMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SQUARE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("squareCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SQUARE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("squareMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ingCount", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ING_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("ingMoney", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField RE_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("reMonth", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CHOOSE_MONTH_OR_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("chooseMonthOrWeek", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField AVAILABLE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableLimit", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField SINGE_UPPER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("singeUpperLimit", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ASSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("assureMoney", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField INCLUDE_WT_FIELD_DESC = new org.apache.thrift.protocol.TField("includeWt", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SUM_NEW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sumNewCount", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SUM_NEW_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sumNewMoney", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ForeclosureOrganizationReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ForeclosureOrganizationReportTupleSchemeFactory());
  }

  public String rePaymentMonthId; // required
  public int newCount; // required
  public double newMoney; // required
  public int squareCount; // required
  public double squareMoney; // required
  public String ingCount; // required
  public String ingMoney; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String reMonth; // required
  public String orgName; // required
  public int chooseMonthOrWeek; // required
  public String fromDate; // required
  public String endDate; // required
  public String availableLimit; // required
  public String singeUpperLimit; // required
  public String assureMoney; // required
  public int includeWt; // required
  public String sumNewCount; // required
  public String sumNewMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RE_PAYMENT_MONTH_ID((short)1, "rePaymentMonthId"),
    NEW_COUNT((short)2, "newCount"),
    NEW_MONEY((short)3, "newMoney"),
    SQUARE_COUNT((short)4, "squareCount"),
    SQUARE_MONEY((short)5, "squareMoney"),
    ING_COUNT((short)6, "ingCount"),
    ING_MONEY((short)7, "ingMoney"),
    PAGE((short)8, "page"),
    ROWS((short)9, "rows"),
    USER_IDS((short)10, "userIds"),
    RE_MONTH((short)11, "reMonth"),
    ORG_NAME((short)12, "orgName"),
    CHOOSE_MONTH_OR_WEEK((short)13, "chooseMonthOrWeek"),
    FROM_DATE((short)14, "fromDate"),
    END_DATE((short)15, "endDate"),
    AVAILABLE_LIMIT((short)16, "availableLimit"),
    SINGE_UPPER_LIMIT((short)17, "singeUpperLimit"),
    ASSURE_MONEY((short)18, "assureMoney"),
    INCLUDE_WT((short)19, "includeWt"),
    SUM_NEW_COUNT((short)20, "sumNewCount"),
    SUM_NEW_MONEY((short)21, "sumNewMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RE_PAYMENT_MONTH_ID
          return RE_PAYMENT_MONTH_ID;
        case 2: // NEW_COUNT
          return NEW_COUNT;
        case 3: // NEW_MONEY
          return NEW_MONEY;
        case 4: // SQUARE_COUNT
          return SQUARE_COUNT;
        case 5: // SQUARE_MONEY
          return SQUARE_MONEY;
        case 6: // ING_COUNT
          return ING_COUNT;
        case 7: // ING_MONEY
          return ING_MONEY;
        case 8: // PAGE
          return PAGE;
        case 9: // ROWS
          return ROWS;
        case 10: // USER_IDS
          return USER_IDS;
        case 11: // RE_MONTH
          return RE_MONTH;
        case 12: // ORG_NAME
          return ORG_NAME;
        case 13: // CHOOSE_MONTH_OR_WEEK
          return CHOOSE_MONTH_OR_WEEK;
        case 14: // FROM_DATE
          return FROM_DATE;
        case 15: // END_DATE
          return END_DATE;
        case 16: // AVAILABLE_LIMIT
          return AVAILABLE_LIMIT;
        case 17: // SINGE_UPPER_LIMIT
          return SINGE_UPPER_LIMIT;
        case 18: // ASSURE_MONEY
          return ASSURE_MONEY;
        case 19: // INCLUDE_WT
          return INCLUDE_WT;
        case 20: // SUM_NEW_COUNT
          return SUM_NEW_COUNT;
        case 21: // SUM_NEW_MONEY
          return SUM_NEW_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEWCOUNT_ISSET_ID = 0;
  private static final int __NEWMONEY_ISSET_ID = 1;
  private static final int __SQUARECOUNT_ISSET_ID = 2;
  private static final int __SQUAREMONEY_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private static final int __CHOOSEMONTHORWEEK_ISSET_ID = 6;
  private static final int __INCLUDEWT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RE_PAYMENT_MONTH_ID, new org.apache.thrift.meta_data.FieldMetaData("rePaymentMonthId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("newCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_MONEY, new org.apache.thrift.meta_data.FieldMetaData("newMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SQUARE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("squareCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SQUARE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("squareMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ingCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ING_MONEY, new org.apache.thrift.meta_data.FieldMetaData("ingMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RE_MONTH, new org.apache.thrift.meta_data.FieldMetaData("reMonth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHOOSE_MONTH_OR_WEEK, new org.apache.thrift.meta_data.FieldMetaData("chooseMonthOrWeek", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABLE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("availableLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINGE_UPPER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("singeUpperLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("assureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCLUDE_WT, new org.apache.thrift.meta_data.FieldMetaData("includeWt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUM_NEW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sumNewCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUM_NEW_MONEY, new org.apache.thrift.meta_data.FieldMetaData("sumNewMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForeclosureOrganizationReport.class, metaDataMap);
  }

  public ForeclosureOrganizationReport() {
    this.page = 1;

    this.rows = 10;

  }

  public ForeclosureOrganizationReport(
    String rePaymentMonthId,
    int newCount,
    double newMoney,
    int squareCount,
    double squareMoney,
    String ingCount,
    String ingMoney,
    int page,
    int rows,
    List<Integer> userIds,
    String reMonth,
    String orgName,
    int chooseMonthOrWeek,
    String fromDate,
    String endDate,
    String availableLimit,
    String singeUpperLimit,
    String assureMoney,
    int includeWt,
    String sumNewCount,
    String sumNewMoney)
  {
    this();
    this.rePaymentMonthId = rePaymentMonthId;
    this.newCount = newCount;
    setNewCountIsSet(true);
    this.newMoney = newMoney;
    setNewMoneyIsSet(true);
    this.squareCount = squareCount;
    setSquareCountIsSet(true);
    this.squareMoney = squareMoney;
    setSquareMoneyIsSet(true);
    this.ingCount = ingCount;
    this.ingMoney = ingMoney;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.reMonth = reMonth;
    this.orgName = orgName;
    this.chooseMonthOrWeek = chooseMonthOrWeek;
    setChooseMonthOrWeekIsSet(true);
    this.fromDate = fromDate;
    this.endDate = endDate;
    this.availableLimit = availableLimit;
    this.singeUpperLimit = singeUpperLimit;
    this.assureMoney = assureMoney;
    this.includeWt = includeWt;
    setIncludeWtIsSet(true);
    this.sumNewCount = sumNewCount;
    this.sumNewMoney = sumNewMoney;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ForeclosureOrganizationReport(ForeclosureOrganizationReport other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRePaymentMonthId()) {
      this.rePaymentMonthId = other.rePaymentMonthId;
    }
    this.newCount = other.newCount;
    this.newMoney = other.newMoney;
    this.squareCount = other.squareCount;
    this.squareMoney = other.squareMoney;
    if (other.isSetIngCount()) {
      this.ingCount = other.ingCount;
    }
    if (other.isSetIngMoney()) {
      this.ingMoney = other.ingMoney;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetReMonth()) {
      this.reMonth = other.reMonth;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    this.chooseMonthOrWeek = other.chooseMonthOrWeek;
    if (other.isSetFromDate()) {
      this.fromDate = other.fromDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    if (other.isSetAvailableLimit()) {
      this.availableLimit = other.availableLimit;
    }
    if (other.isSetSingeUpperLimit()) {
      this.singeUpperLimit = other.singeUpperLimit;
    }
    if (other.isSetAssureMoney()) {
      this.assureMoney = other.assureMoney;
    }
    this.includeWt = other.includeWt;
    if (other.isSetSumNewCount()) {
      this.sumNewCount = other.sumNewCount;
    }
    if (other.isSetSumNewMoney()) {
      this.sumNewMoney = other.sumNewMoney;
    }
  }

  public ForeclosureOrganizationReport deepCopy() {
    return new ForeclosureOrganizationReport(this);
  }

  @Override
  public void clear() {
    this.rePaymentMonthId = null;
    setNewCountIsSet(false);
    this.newCount = 0;
    setNewMoneyIsSet(false);
    this.newMoney = 0.0;
    setSquareCountIsSet(false);
    this.squareCount = 0;
    setSquareMoneyIsSet(false);
    this.squareMoney = 0.0;
    this.ingCount = null;
    this.ingMoney = null;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.reMonth = null;
    this.orgName = null;
    setChooseMonthOrWeekIsSet(false);
    this.chooseMonthOrWeek = 0;
    this.fromDate = null;
    this.endDate = null;
    this.availableLimit = null;
    this.singeUpperLimit = null;
    this.assureMoney = null;
    setIncludeWtIsSet(false);
    this.includeWt = 0;
    this.sumNewCount = null;
    this.sumNewMoney = null;
  }

  public String getRePaymentMonthId() {
    return this.rePaymentMonthId;
  }

  public ForeclosureOrganizationReport setRePaymentMonthId(String rePaymentMonthId) {
    this.rePaymentMonthId = rePaymentMonthId;
    return this;
  }

  public void unsetRePaymentMonthId() {
    this.rePaymentMonthId = null;
  }

  /** Returns true if field rePaymentMonthId is set (has been assigned a value) and false otherwise */
  public boolean isSetRePaymentMonthId() {
    return this.rePaymentMonthId != null;
  }

  public void setRePaymentMonthIdIsSet(boolean value) {
    if (!value) {
      this.rePaymentMonthId = null;
    }
  }

  public int getNewCount() {
    return this.newCount;
  }

  public ForeclosureOrganizationReport setNewCount(int newCount) {
    this.newCount = newCount;
    setNewCountIsSet(true);
    return this;
  }

  public void unsetNewCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWCOUNT_ISSET_ID);
  }

  /** Returns true if field newCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNewCount() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWCOUNT_ISSET_ID);
  }

  public void setNewCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWCOUNT_ISSET_ID, value);
  }

  public double getNewMoney() {
    return this.newMoney;
  }

  public ForeclosureOrganizationReport setNewMoney(double newMoney) {
    this.newMoney = newMoney;
    setNewMoneyIsSet(true);
    return this;
  }

  public void unsetNewMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWMONEY_ISSET_ID);
  }

  /** Returns true if field newMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetNewMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWMONEY_ISSET_ID);
  }

  public void setNewMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWMONEY_ISSET_ID, value);
  }

  public int getSquareCount() {
    return this.squareCount;
  }

  public ForeclosureOrganizationReport setSquareCount(int squareCount) {
    this.squareCount = squareCount;
    setSquareCountIsSet(true);
    return this;
  }

  public void unsetSquareCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SQUARECOUNT_ISSET_ID);
  }

  /** Returns true if field squareCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SQUARECOUNT_ISSET_ID);
  }

  public void setSquareCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SQUARECOUNT_ISSET_ID, value);
  }

  public double getSquareMoney() {
    return this.squareMoney;
  }

  public ForeclosureOrganizationReport setSquareMoney(double squareMoney) {
    this.squareMoney = squareMoney;
    setSquareMoneyIsSet(true);
    return this;
  }

  public void unsetSquareMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SQUAREMONEY_ISSET_ID);
  }

  /** Returns true if field squareMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SQUAREMONEY_ISSET_ID);
  }

  public void setSquareMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SQUAREMONEY_ISSET_ID, value);
  }

  public String getIngCount() {
    return this.ingCount;
  }

  public ForeclosureOrganizationReport setIngCount(String ingCount) {
    this.ingCount = ingCount;
    return this;
  }

  public void unsetIngCount() {
    this.ingCount = null;
  }

  /** Returns true if field ingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIngCount() {
    return this.ingCount != null;
  }

  public void setIngCountIsSet(boolean value) {
    if (!value) {
      this.ingCount = null;
    }
  }

  public String getIngMoney() {
    return this.ingMoney;
  }

  public ForeclosureOrganizationReport setIngMoney(String ingMoney) {
    this.ingMoney = ingMoney;
    return this;
  }

  public void unsetIngMoney() {
    this.ingMoney = null;
  }

  /** Returns true if field ingMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetIngMoney() {
    return this.ingMoney != null;
  }

  public void setIngMoneyIsSet(boolean value) {
    if (!value) {
      this.ingMoney = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ForeclosureOrganizationReport setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ForeclosureOrganizationReport setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ForeclosureOrganizationReport setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getReMonth() {
    return this.reMonth;
  }

  public ForeclosureOrganizationReport setReMonth(String reMonth) {
    this.reMonth = reMonth;
    return this;
  }

  public void unsetReMonth() {
    this.reMonth = null;
  }

  /** Returns true if field reMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetReMonth() {
    return this.reMonth != null;
  }

  public void setReMonthIsSet(boolean value) {
    if (!value) {
      this.reMonth = null;
    }
  }

  public String getOrgName() {
    return this.orgName;
  }

  public ForeclosureOrganizationReport setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public int getChooseMonthOrWeek() {
    return this.chooseMonthOrWeek;
  }

  public ForeclosureOrganizationReport setChooseMonthOrWeek(int chooseMonthOrWeek) {
    this.chooseMonthOrWeek = chooseMonthOrWeek;
    setChooseMonthOrWeekIsSet(true);
    return this;
  }

  public void unsetChooseMonthOrWeek() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID);
  }

  /** Returns true if field chooseMonthOrWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetChooseMonthOrWeek() {
    return EncodingUtils.testBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID);
  }

  public void setChooseMonthOrWeekIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID, value);
  }

  public String getFromDate() {
    return this.fromDate;
  }

  public ForeclosureOrganizationReport setFromDate(String fromDate) {
    this.fromDate = fromDate;
    return this;
  }

  public void unsetFromDate() {
    this.fromDate = null;
  }

  /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromDate() {
    return this.fromDate != null;
  }

  public void setFromDateIsSet(boolean value) {
    if (!value) {
      this.fromDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public ForeclosureOrganizationReport setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public String getAvailableLimit() {
    return this.availableLimit;
  }

  public ForeclosureOrganizationReport setAvailableLimit(String availableLimit) {
    this.availableLimit = availableLimit;
    return this;
  }

  public void unsetAvailableLimit() {
    this.availableLimit = null;
  }

  /** Returns true if field availableLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableLimit() {
    return this.availableLimit != null;
  }

  public void setAvailableLimitIsSet(boolean value) {
    if (!value) {
      this.availableLimit = null;
    }
  }

  public String getSingeUpperLimit() {
    return this.singeUpperLimit;
  }

  public ForeclosureOrganizationReport setSingeUpperLimit(String singeUpperLimit) {
    this.singeUpperLimit = singeUpperLimit;
    return this;
  }

  public void unsetSingeUpperLimit() {
    this.singeUpperLimit = null;
  }

  /** Returns true if field singeUpperLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSingeUpperLimit() {
    return this.singeUpperLimit != null;
  }

  public void setSingeUpperLimitIsSet(boolean value) {
    if (!value) {
      this.singeUpperLimit = null;
    }
  }

  public String getAssureMoney() {
    return this.assureMoney;
  }

  public ForeclosureOrganizationReport setAssureMoney(String assureMoney) {
    this.assureMoney = assureMoney;
    return this;
  }

  public void unsetAssureMoney() {
    this.assureMoney = null;
  }

  /** Returns true if field assureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureMoney() {
    return this.assureMoney != null;
  }

  public void setAssureMoneyIsSet(boolean value) {
    if (!value) {
      this.assureMoney = null;
    }
  }

  public int getIncludeWt() {
    return this.includeWt;
  }

  public ForeclosureOrganizationReport setIncludeWt(int includeWt) {
    this.includeWt = includeWt;
    setIncludeWtIsSet(true);
    return this;
  }

  public void unsetIncludeWt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEWT_ISSET_ID);
  }

  /** Returns true if field includeWt is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeWt() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEWT_ISSET_ID);
  }

  public void setIncludeWtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEWT_ISSET_ID, value);
  }

  public String getSumNewCount() {
    return this.sumNewCount;
  }

  public ForeclosureOrganizationReport setSumNewCount(String sumNewCount) {
    this.sumNewCount = sumNewCount;
    return this;
  }

  public void unsetSumNewCount() {
    this.sumNewCount = null;
  }

  /** Returns true if field sumNewCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSumNewCount() {
    return this.sumNewCount != null;
  }

  public void setSumNewCountIsSet(boolean value) {
    if (!value) {
      this.sumNewCount = null;
    }
  }

  public String getSumNewMoney() {
    return this.sumNewMoney;
  }

  public ForeclosureOrganizationReport setSumNewMoney(String sumNewMoney) {
    this.sumNewMoney = sumNewMoney;
    return this;
  }

  public void unsetSumNewMoney() {
    this.sumNewMoney = null;
  }

  /** Returns true if field sumNewMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSumNewMoney() {
    return this.sumNewMoney != null;
  }

  public void setSumNewMoneyIsSet(boolean value) {
    if (!value) {
      this.sumNewMoney = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RE_PAYMENT_MONTH_ID:
      if (value == null) {
        unsetRePaymentMonthId();
      } else {
        setRePaymentMonthId((String)value);
      }
      break;

    case NEW_COUNT:
      if (value == null) {
        unsetNewCount();
      } else {
        setNewCount((Integer)value);
      }
      break;

    case NEW_MONEY:
      if (value == null) {
        unsetNewMoney();
      } else {
        setNewMoney((Double)value);
      }
      break;

    case SQUARE_COUNT:
      if (value == null) {
        unsetSquareCount();
      } else {
        setSquareCount((Integer)value);
      }
      break;

    case SQUARE_MONEY:
      if (value == null) {
        unsetSquareMoney();
      } else {
        setSquareMoney((Double)value);
      }
      break;

    case ING_COUNT:
      if (value == null) {
        unsetIngCount();
      } else {
        setIngCount((String)value);
      }
      break;

    case ING_MONEY:
      if (value == null) {
        unsetIngMoney();
      } else {
        setIngMoney((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case RE_MONTH:
      if (value == null) {
        unsetReMonth();
      } else {
        setReMonth((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case CHOOSE_MONTH_OR_WEEK:
      if (value == null) {
        unsetChooseMonthOrWeek();
      } else {
        setChooseMonthOrWeek((Integer)value);
      }
      break;

    case FROM_DATE:
      if (value == null) {
        unsetFromDate();
      } else {
        setFromDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case AVAILABLE_LIMIT:
      if (value == null) {
        unsetAvailableLimit();
      } else {
        setAvailableLimit((String)value);
      }
      break;

    case SINGE_UPPER_LIMIT:
      if (value == null) {
        unsetSingeUpperLimit();
      } else {
        setSingeUpperLimit((String)value);
      }
      break;

    case ASSURE_MONEY:
      if (value == null) {
        unsetAssureMoney();
      } else {
        setAssureMoney((String)value);
      }
      break;

    case INCLUDE_WT:
      if (value == null) {
        unsetIncludeWt();
      } else {
        setIncludeWt((Integer)value);
      }
      break;

    case SUM_NEW_COUNT:
      if (value == null) {
        unsetSumNewCount();
      } else {
        setSumNewCount((String)value);
      }
      break;

    case SUM_NEW_MONEY:
      if (value == null) {
        unsetSumNewMoney();
      } else {
        setSumNewMoney((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RE_PAYMENT_MONTH_ID:
      return getRePaymentMonthId();

    case NEW_COUNT:
      return Integer.valueOf(getNewCount());

    case NEW_MONEY:
      return Double.valueOf(getNewMoney());

    case SQUARE_COUNT:
      return Integer.valueOf(getSquareCount());

    case SQUARE_MONEY:
      return Double.valueOf(getSquareMoney());

    case ING_COUNT:
      return getIngCount();

    case ING_MONEY:
      return getIngMoney();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case RE_MONTH:
      return getReMonth();

    case ORG_NAME:
      return getOrgName();

    case CHOOSE_MONTH_OR_WEEK:
      return Integer.valueOf(getChooseMonthOrWeek());

    case FROM_DATE:
      return getFromDate();

    case END_DATE:
      return getEndDate();

    case AVAILABLE_LIMIT:
      return getAvailableLimit();

    case SINGE_UPPER_LIMIT:
      return getSingeUpperLimit();

    case ASSURE_MONEY:
      return getAssureMoney();

    case INCLUDE_WT:
      return Integer.valueOf(getIncludeWt());

    case SUM_NEW_COUNT:
      return getSumNewCount();

    case SUM_NEW_MONEY:
      return getSumNewMoney();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RE_PAYMENT_MONTH_ID:
      return isSetRePaymentMonthId();
    case NEW_COUNT:
      return isSetNewCount();
    case NEW_MONEY:
      return isSetNewMoney();
    case SQUARE_COUNT:
      return isSetSquareCount();
    case SQUARE_MONEY:
      return isSetSquareMoney();
    case ING_COUNT:
      return isSetIngCount();
    case ING_MONEY:
      return isSetIngMoney();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case RE_MONTH:
      return isSetReMonth();
    case ORG_NAME:
      return isSetOrgName();
    case CHOOSE_MONTH_OR_WEEK:
      return isSetChooseMonthOrWeek();
    case FROM_DATE:
      return isSetFromDate();
    case END_DATE:
      return isSetEndDate();
    case AVAILABLE_LIMIT:
      return isSetAvailableLimit();
    case SINGE_UPPER_LIMIT:
      return isSetSingeUpperLimit();
    case ASSURE_MONEY:
      return isSetAssureMoney();
    case INCLUDE_WT:
      return isSetIncludeWt();
    case SUM_NEW_COUNT:
      return isSetSumNewCount();
    case SUM_NEW_MONEY:
      return isSetSumNewMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ForeclosureOrganizationReport)
      return this.equals((ForeclosureOrganizationReport)that);
    return false;
  }

  public boolean equals(ForeclosureOrganizationReport that) {
    if (that == null)
      return false;

    boolean this_present_rePaymentMonthId = true && this.isSetRePaymentMonthId();
    boolean that_present_rePaymentMonthId = true && that.isSetRePaymentMonthId();
    if (this_present_rePaymentMonthId || that_present_rePaymentMonthId) {
      if (!(this_present_rePaymentMonthId && that_present_rePaymentMonthId))
        return false;
      if (!this.rePaymentMonthId.equals(that.rePaymentMonthId))
        return false;
    }

    boolean this_present_newCount = true;
    boolean that_present_newCount = true;
    if (this_present_newCount || that_present_newCount) {
      if (!(this_present_newCount && that_present_newCount))
        return false;
      if (this.newCount != that.newCount)
        return false;
    }

    boolean this_present_newMoney = true;
    boolean that_present_newMoney = true;
    if (this_present_newMoney || that_present_newMoney) {
      if (!(this_present_newMoney && that_present_newMoney))
        return false;
      if (this.newMoney != that.newMoney)
        return false;
    }

    boolean this_present_squareCount = true;
    boolean that_present_squareCount = true;
    if (this_present_squareCount || that_present_squareCount) {
      if (!(this_present_squareCount && that_present_squareCount))
        return false;
      if (this.squareCount != that.squareCount)
        return false;
    }

    boolean this_present_squareMoney = true;
    boolean that_present_squareMoney = true;
    if (this_present_squareMoney || that_present_squareMoney) {
      if (!(this_present_squareMoney && that_present_squareMoney))
        return false;
      if (this.squareMoney != that.squareMoney)
        return false;
    }

    boolean this_present_ingCount = true && this.isSetIngCount();
    boolean that_present_ingCount = true && that.isSetIngCount();
    if (this_present_ingCount || that_present_ingCount) {
      if (!(this_present_ingCount && that_present_ingCount))
        return false;
      if (!this.ingCount.equals(that.ingCount))
        return false;
    }

    boolean this_present_ingMoney = true && this.isSetIngMoney();
    boolean that_present_ingMoney = true && that.isSetIngMoney();
    if (this_present_ingMoney || that_present_ingMoney) {
      if (!(this_present_ingMoney && that_present_ingMoney))
        return false;
      if (!this.ingMoney.equals(that.ingMoney))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_reMonth = true && this.isSetReMonth();
    boolean that_present_reMonth = true && that.isSetReMonth();
    if (this_present_reMonth || that_present_reMonth) {
      if (!(this_present_reMonth && that_present_reMonth))
        return false;
      if (!this.reMonth.equals(that.reMonth))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_chooseMonthOrWeek = true;
    boolean that_present_chooseMonthOrWeek = true;
    if (this_present_chooseMonthOrWeek || that_present_chooseMonthOrWeek) {
      if (!(this_present_chooseMonthOrWeek && that_present_chooseMonthOrWeek))
        return false;
      if (this.chooseMonthOrWeek != that.chooseMonthOrWeek)
        return false;
    }

    boolean this_present_fromDate = true && this.isSetFromDate();
    boolean that_present_fromDate = true && that.isSetFromDate();
    if (this_present_fromDate || that_present_fromDate) {
      if (!(this_present_fromDate && that_present_fromDate))
        return false;
      if (!this.fromDate.equals(that.fromDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_availableLimit = true && this.isSetAvailableLimit();
    boolean that_present_availableLimit = true && that.isSetAvailableLimit();
    if (this_present_availableLimit || that_present_availableLimit) {
      if (!(this_present_availableLimit && that_present_availableLimit))
        return false;
      if (!this.availableLimit.equals(that.availableLimit))
        return false;
    }

    boolean this_present_singeUpperLimit = true && this.isSetSingeUpperLimit();
    boolean that_present_singeUpperLimit = true && that.isSetSingeUpperLimit();
    if (this_present_singeUpperLimit || that_present_singeUpperLimit) {
      if (!(this_present_singeUpperLimit && that_present_singeUpperLimit))
        return false;
      if (!this.singeUpperLimit.equals(that.singeUpperLimit))
        return false;
    }

    boolean this_present_assureMoney = true && this.isSetAssureMoney();
    boolean that_present_assureMoney = true && that.isSetAssureMoney();
    if (this_present_assureMoney || that_present_assureMoney) {
      if (!(this_present_assureMoney && that_present_assureMoney))
        return false;
      if (!this.assureMoney.equals(that.assureMoney))
        return false;
    }

    boolean this_present_includeWt = true;
    boolean that_present_includeWt = true;
    if (this_present_includeWt || that_present_includeWt) {
      if (!(this_present_includeWt && that_present_includeWt))
        return false;
      if (this.includeWt != that.includeWt)
        return false;
    }

    boolean this_present_sumNewCount = true && this.isSetSumNewCount();
    boolean that_present_sumNewCount = true && that.isSetSumNewCount();
    if (this_present_sumNewCount || that_present_sumNewCount) {
      if (!(this_present_sumNewCount && that_present_sumNewCount))
        return false;
      if (!this.sumNewCount.equals(that.sumNewCount))
        return false;
    }

    boolean this_present_sumNewMoney = true && this.isSetSumNewMoney();
    boolean that_present_sumNewMoney = true && that.isSetSumNewMoney();
    if (this_present_sumNewMoney || that_present_sumNewMoney) {
      if (!(this_present_sumNewMoney && that_present_sumNewMoney))
        return false;
      if (!this.sumNewMoney.equals(that.sumNewMoney))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rePaymentMonthId = true && (isSetRePaymentMonthId());
    list.add(present_rePaymentMonthId);
    if (present_rePaymentMonthId)
      list.add(rePaymentMonthId);

    boolean present_newCount = true;
    list.add(present_newCount);
    if (present_newCount)
      list.add(newCount);

    boolean present_newMoney = true;
    list.add(present_newMoney);
    if (present_newMoney)
      list.add(newMoney);

    boolean present_squareCount = true;
    list.add(present_squareCount);
    if (present_squareCount)
      list.add(squareCount);

    boolean present_squareMoney = true;
    list.add(present_squareMoney);
    if (present_squareMoney)
      list.add(squareMoney);

    boolean present_ingCount = true && (isSetIngCount());
    list.add(present_ingCount);
    if (present_ingCount)
      list.add(ingCount);

    boolean present_ingMoney = true && (isSetIngMoney());
    list.add(present_ingMoney);
    if (present_ingMoney)
      list.add(ingMoney);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_reMonth = true && (isSetReMonth());
    list.add(present_reMonth);
    if (present_reMonth)
      list.add(reMonth);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_chooseMonthOrWeek = true;
    list.add(present_chooseMonthOrWeek);
    if (present_chooseMonthOrWeek)
      list.add(chooseMonthOrWeek);

    boolean present_fromDate = true && (isSetFromDate());
    list.add(present_fromDate);
    if (present_fromDate)
      list.add(fromDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_availableLimit = true && (isSetAvailableLimit());
    list.add(present_availableLimit);
    if (present_availableLimit)
      list.add(availableLimit);

    boolean present_singeUpperLimit = true && (isSetSingeUpperLimit());
    list.add(present_singeUpperLimit);
    if (present_singeUpperLimit)
      list.add(singeUpperLimit);

    boolean present_assureMoney = true && (isSetAssureMoney());
    list.add(present_assureMoney);
    if (present_assureMoney)
      list.add(assureMoney);

    boolean present_includeWt = true;
    list.add(present_includeWt);
    if (present_includeWt)
      list.add(includeWt);

    boolean present_sumNewCount = true && (isSetSumNewCount());
    list.add(present_sumNewCount);
    if (present_sumNewCount)
      list.add(sumNewCount);

    boolean present_sumNewMoney = true && (isSetSumNewMoney());
    list.add(present_sumNewMoney);
    if (present_sumNewMoney)
      list.add(sumNewMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(ForeclosureOrganizationReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRePaymentMonthId()).compareTo(other.isSetRePaymentMonthId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRePaymentMonthId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rePaymentMonthId, other.rePaymentMonthId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewCount()).compareTo(other.isSetNewCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newCount, other.newCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewMoney()).compareTo(other.isSetNewMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newMoney, other.newMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquareCount()).compareTo(other.isSetSquareCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareCount, other.squareCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquareMoney()).compareTo(other.isSetSquareMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareMoney, other.squareMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIngCount()).compareTo(other.isSetIngCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIngCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ingCount, other.ingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIngMoney()).compareTo(other.isSetIngMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIngMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ingMoney, other.ingMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReMonth()).compareTo(other.isSetReMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reMonth, other.reMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChooseMonthOrWeek()).compareTo(other.isSetChooseMonthOrWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChooseMonthOrWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chooseMonthOrWeek, other.chooseMonthOrWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(other.isSetFromDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, other.fromDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableLimit()).compareTo(other.isSetAvailableLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableLimit, other.availableLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingeUpperLimit()).compareTo(other.isSetSingeUpperLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingeUpperLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singeUpperLimit, other.singeUpperLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureMoney()).compareTo(other.isSetAssureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureMoney, other.assureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeWt()).compareTo(other.isSetIncludeWt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeWt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeWt, other.includeWt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSumNewCount()).compareTo(other.isSetSumNewCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumNewCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sumNewCount, other.sumNewCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSumNewMoney()).compareTo(other.isSetSumNewMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumNewMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sumNewMoney, other.sumNewMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ForeclosureOrganizationReport(");
    boolean first = true;

    sb.append("rePaymentMonthId:");
    if (this.rePaymentMonthId == null) {
      sb.append("null");
    } else {
      sb.append(this.rePaymentMonthId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newCount:");
    sb.append(this.newCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newMoney:");
    sb.append(this.newMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareCount:");
    sb.append(this.squareCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareMoney:");
    sb.append(this.squareMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ingCount:");
    if (this.ingCount == null) {
      sb.append("null");
    } else {
      sb.append(this.ingCount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ingMoney:");
    if (this.ingMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.ingMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reMonth:");
    if (this.reMonth == null) {
      sb.append("null");
    } else {
      sb.append(this.reMonth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chooseMonthOrWeek:");
    sb.append(this.chooseMonthOrWeek);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromDate:");
    if (this.fromDate == null) {
      sb.append("null");
    } else {
      sb.append(this.fromDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableLimit:");
    if (this.availableLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.availableLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singeUpperLimit:");
    if (this.singeUpperLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.singeUpperLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureMoney:");
    if (this.assureMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.assureMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeWt:");
    sb.append(this.includeWt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sumNewCount:");
    if (this.sumNewCount == null) {
      sb.append("null");
    } else {
      sb.append(this.sumNewCount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sumNewMoney:");
    if (this.sumNewMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.sumNewMoney);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ForeclosureOrganizationReportStandardSchemeFactory implements SchemeFactory {
    public ForeclosureOrganizationReportStandardScheme getScheme() {
      return new ForeclosureOrganizationReportStandardScheme();
    }
  }

  private static class ForeclosureOrganizationReportStandardScheme extends StandardScheme<ForeclosureOrganizationReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ForeclosureOrganizationReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RE_PAYMENT_MONTH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rePaymentMonthId = iprot.readString();
              struct.setRePaymentMonthIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newCount = iprot.readI32();
              struct.setNewCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEW_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.newMoney = iprot.readDouble();
              struct.setNewMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SQUARE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.squareCount = iprot.readI32();
              struct.setSquareCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SQUARE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.squareMoney = iprot.readDouble();
              struct.setSquareMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ingCount = iprot.readString();
              struct.setIngCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ING_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ingMoney = iprot.readString();
              struct.setIngMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list48.size);
                int _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI32();
                  struct.userIds.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RE_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reMonth = iprot.readString();
              struct.setReMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHOOSE_MONTH_OR_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chooseMonthOrWeek = iprot.readI32();
              struct.setChooseMonthOrWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FROM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromDate = iprot.readString();
              struct.setFromDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AVAILABLE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.availableLimit = iprot.readString();
              struct.setAvailableLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SINGE_UPPER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.singeUpperLimit = iprot.readString();
              struct.setSingeUpperLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ASSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assureMoney = iprot.readString();
              struct.setAssureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // INCLUDE_WT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.includeWt = iprot.readI32();
              struct.setIncludeWtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SUM_NEW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sumNewCount = iprot.readString();
              struct.setSumNewCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SUM_NEW_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sumNewMoney = iprot.readString();
              struct.setSumNewMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ForeclosureOrganizationReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rePaymentMonthId != null) {
        oprot.writeFieldBegin(RE_PAYMENT_MONTH_ID_FIELD_DESC);
        oprot.writeString(struct.rePaymentMonthId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.newCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.newMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SQUARE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.squareCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SQUARE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.squareMoney);
      oprot.writeFieldEnd();
      if (struct.ingCount != null) {
        oprot.writeFieldBegin(ING_COUNT_FIELD_DESC);
        oprot.writeString(struct.ingCount);
        oprot.writeFieldEnd();
      }
      if (struct.ingMoney != null) {
        oprot.writeFieldBegin(ING_MONEY_FIELD_DESC);
        oprot.writeString(struct.ingMoney);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter51 : struct.userIds)
          {
            oprot.writeI32(_iter51);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.reMonth != null) {
        oprot.writeFieldBegin(RE_MONTH_FIELD_DESC);
        oprot.writeString(struct.reMonth);
        oprot.writeFieldEnd();
      }
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHOOSE_MONTH_OR_WEEK_FIELD_DESC);
      oprot.writeI32(struct.chooseMonthOrWeek);
      oprot.writeFieldEnd();
      if (struct.fromDate != null) {
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeString(struct.fromDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.availableLimit != null) {
        oprot.writeFieldBegin(AVAILABLE_LIMIT_FIELD_DESC);
        oprot.writeString(struct.availableLimit);
        oprot.writeFieldEnd();
      }
      if (struct.singeUpperLimit != null) {
        oprot.writeFieldBegin(SINGE_UPPER_LIMIT_FIELD_DESC);
        oprot.writeString(struct.singeUpperLimit);
        oprot.writeFieldEnd();
      }
      if (struct.assureMoney != null) {
        oprot.writeFieldBegin(ASSURE_MONEY_FIELD_DESC);
        oprot.writeString(struct.assureMoney);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INCLUDE_WT_FIELD_DESC);
      oprot.writeI32(struct.includeWt);
      oprot.writeFieldEnd();
      if (struct.sumNewCount != null) {
        oprot.writeFieldBegin(SUM_NEW_COUNT_FIELD_DESC);
        oprot.writeString(struct.sumNewCount);
        oprot.writeFieldEnd();
      }
      if (struct.sumNewMoney != null) {
        oprot.writeFieldBegin(SUM_NEW_MONEY_FIELD_DESC);
        oprot.writeString(struct.sumNewMoney);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ForeclosureOrganizationReportTupleSchemeFactory implements SchemeFactory {
    public ForeclosureOrganizationReportTupleScheme getScheme() {
      return new ForeclosureOrganizationReportTupleScheme();
    }
  }

  private static class ForeclosureOrganizationReportTupleScheme extends TupleScheme<ForeclosureOrganizationReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ForeclosureOrganizationReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRePaymentMonthId()) {
        optionals.set(0);
      }
      if (struct.isSetNewCount()) {
        optionals.set(1);
      }
      if (struct.isSetNewMoney()) {
        optionals.set(2);
      }
      if (struct.isSetSquareCount()) {
        optionals.set(3);
      }
      if (struct.isSetSquareMoney()) {
        optionals.set(4);
      }
      if (struct.isSetIngCount()) {
        optionals.set(5);
      }
      if (struct.isSetIngMoney()) {
        optionals.set(6);
      }
      if (struct.isSetPage()) {
        optionals.set(7);
      }
      if (struct.isSetRows()) {
        optionals.set(8);
      }
      if (struct.isSetUserIds()) {
        optionals.set(9);
      }
      if (struct.isSetReMonth()) {
        optionals.set(10);
      }
      if (struct.isSetOrgName()) {
        optionals.set(11);
      }
      if (struct.isSetChooseMonthOrWeek()) {
        optionals.set(12);
      }
      if (struct.isSetFromDate()) {
        optionals.set(13);
      }
      if (struct.isSetEndDate()) {
        optionals.set(14);
      }
      if (struct.isSetAvailableLimit()) {
        optionals.set(15);
      }
      if (struct.isSetSingeUpperLimit()) {
        optionals.set(16);
      }
      if (struct.isSetAssureMoney()) {
        optionals.set(17);
      }
      if (struct.isSetIncludeWt()) {
        optionals.set(18);
      }
      if (struct.isSetSumNewCount()) {
        optionals.set(19);
      }
      if (struct.isSetSumNewMoney()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetRePaymentMonthId()) {
        oprot.writeString(struct.rePaymentMonthId);
      }
      if (struct.isSetNewCount()) {
        oprot.writeI32(struct.newCount);
      }
      if (struct.isSetNewMoney()) {
        oprot.writeDouble(struct.newMoney);
      }
      if (struct.isSetSquareCount()) {
        oprot.writeI32(struct.squareCount);
      }
      if (struct.isSetSquareMoney()) {
        oprot.writeDouble(struct.squareMoney);
      }
      if (struct.isSetIngCount()) {
        oprot.writeString(struct.ingCount);
      }
      if (struct.isSetIngMoney()) {
        oprot.writeString(struct.ingMoney);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter52 : struct.userIds)
          {
            oprot.writeI32(_iter52);
          }
        }
      }
      if (struct.isSetReMonth()) {
        oprot.writeString(struct.reMonth);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetChooseMonthOrWeek()) {
        oprot.writeI32(struct.chooseMonthOrWeek);
      }
      if (struct.isSetFromDate()) {
        oprot.writeString(struct.fromDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetAvailableLimit()) {
        oprot.writeString(struct.availableLimit);
      }
      if (struct.isSetSingeUpperLimit()) {
        oprot.writeString(struct.singeUpperLimit);
      }
      if (struct.isSetAssureMoney()) {
        oprot.writeString(struct.assureMoney);
      }
      if (struct.isSetIncludeWt()) {
        oprot.writeI32(struct.includeWt);
      }
      if (struct.isSetSumNewCount()) {
        oprot.writeString(struct.sumNewCount);
      }
      if (struct.isSetSumNewMoney()) {
        oprot.writeString(struct.sumNewMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ForeclosureOrganizationReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.rePaymentMonthId = iprot.readString();
        struct.setRePaymentMonthIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.newCount = iprot.readI32();
        struct.setNewCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.newMoney = iprot.readDouble();
        struct.setNewMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.squareCount = iprot.readI32();
        struct.setSquareCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.squareMoney = iprot.readDouble();
        struct.setSquareMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ingCount = iprot.readString();
        struct.setIngCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ingMoney = iprot.readString();
        struct.setIngMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list53.size);
          int _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = iprot.readI32();
            struct.userIds.add(_elem54);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reMonth = iprot.readString();
        struct.setReMonthIsSet(true);
      }
      if (incoming.get(11)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.chooseMonthOrWeek = iprot.readI32();
        struct.setChooseMonthOrWeekIsSet(true);
      }
      if (incoming.get(13)) {
        struct.fromDate = iprot.readString();
        struct.setFromDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.availableLimit = iprot.readString();
        struct.setAvailableLimitIsSet(true);
      }
      if (incoming.get(16)) {
        struct.singeUpperLimit = iprot.readString();
        struct.setSingeUpperLimitIsSet(true);
      }
      if (incoming.get(17)) {
        struct.assureMoney = iprot.readString();
        struct.setAssureMoneyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.includeWt = iprot.readI32();
        struct.setIncludeWtIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sumNewCount = iprot.readString();
        struct.setSumNewCountIsSet(true);
      }
      if (incoming.get(20)) {
        struct.sumNewMoney = iprot.readString();
        struct.setSumNewMoneyIsSet(true);
      }
    }
  }

}


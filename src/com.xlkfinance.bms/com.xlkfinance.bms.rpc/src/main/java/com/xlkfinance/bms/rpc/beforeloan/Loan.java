/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class Loan implements org.apache.thrift.TBase<Loan, Loan._Fields>, java.io.Serializable, Cloneable, Comparable<Loan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Loan");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CURRENCY_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyText", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dateMode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_MODE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("dateModeText", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REPAY_FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("repayFun", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REOAY_FUN_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("reoayFunText", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycleType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycleTypeText", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycleDate", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REPAY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("repayOption", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDate", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField LIQ_DMG_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("liqDmgProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField OVERDUE_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFineInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField MIS_FINE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("misFineInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField PREPAY_LIQ_DMG_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("prepayLiqDmgProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField YEAR_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("yearLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField YEAR_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("yearLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField YEAR_LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("yearLoanOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField DAY_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField DAY_LOAN_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLoanMgr", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField DAY_LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLoanOtherFee", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField EACHISSUE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("eachissueOption", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField FEES_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("feesProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField FROZEN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenStatus", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField INTEREST_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("interestVersion", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField JUDGE_REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("judgeRepayCycle", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField CREDIT_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("creditEndDate", org.apache.thrift.protocol.TType.STRING, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public double creditAmt; // required
  public int currency; // required
  public String currencyText; // required
  public int dateMode; // required
  public String dateModeText; // required
  public int repayFun; // required
  public String reoayFunText; // required
  public int repayCycleType; // required
  public String repayCycleTypeText; // required
  public int repayCycleDate; // required
  public int repayCycle; // required
  public String planOutLoanDt; // required
  public String planRepayLoanDt; // required
  public int repayOption; // required
  public int repayDate; // required
  public double monthLoanInterest; // required
  public double monthLoanMgr; // required
  public double monthLoanOtherFee; // required
  public double liqDmgProportion; // required
  public double overdueLoanInterest; // required
  public double overdueFineInterest; // required
  public double misFineInterest; // required
  public double prepayLiqDmgProportion; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String completeDttm; // required
  public int status; // required
  public double yearLoanInterest; // required
  public double yearLoanMgr; // required
  public double yearLoanOtherFee; // required
  public double dayLoanInterest; // required
  public double dayLoanMgr; // required
  public double dayLoanOtherFee; // required
  public int eachissueOption; // required
  public double feesProportion; // required
  public int frozenStatus; // required
  public int interestVersion; // required
  public int judgeRepayCycle; // required
  public String creditEndDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    CREDIT_AMT((short)3, "creditAmt"),
    CURRENCY((short)4, "currency"),
    CURRENCY_TEXT((short)5, "currencyText"),
    DATE_MODE((short)6, "dateMode"),
    DATE_MODE_TEXT((short)7, "dateModeText"),
    REPAY_FUN((short)8, "repayFun"),
    REOAY_FUN_TEXT((short)9, "reoayFunText"),
    REPAY_CYCLE_TYPE((short)10, "repayCycleType"),
    REPAY_CYCLE_TYPE_TEXT((short)11, "repayCycleTypeText"),
    REPAY_CYCLE_DATE((short)12, "repayCycleDate"),
    REPAY_CYCLE((short)13, "repayCycle"),
    PLAN_OUT_LOAN_DT((short)14, "planOutLoanDt"),
    PLAN_REPAY_LOAN_DT((short)15, "planRepayLoanDt"),
    REPAY_OPTION((short)16, "repayOption"),
    REPAY_DATE((short)17, "repayDate"),
    MONTH_LOAN_INTEREST((short)18, "monthLoanInterest"),
    MONTH_LOAN_MGR((short)19, "monthLoanMgr"),
    MONTH_LOAN_OTHER_FEE((short)20, "monthLoanOtherFee"),
    LIQ_DMG_PROPORTION((short)21, "liqDmgProportion"),
    OVERDUE_LOAN_INTEREST((short)22, "overdueLoanInterest"),
    OVERDUE_FINE_INTEREST((short)23, "overdueFineInterest"),
    MIS_FINE_INTEREST((short)24, "misFineInterest"),
    PREPAY_LIQ_DMG_PROPORTION((short)25, "prepayLiqDmgProportion"),
    REQUEST_STATUS((short)26, "requestStatus"),
    REQUEST_DTTM((short)27, "requestDttm"),
    COMPLETE_DTTM((short)28, "completeDttm"),
    STATUS((short)29, "status"),
    YEAR_LOAN_INTEREST((short)30, "yearLoanInterest"),
    YEAR_LOAN_MGR((short)31, "yearLoanMgr"),
    YEAR_LOAN_OTHER_FEE((short)32, "yearLoanOtherFee"),
    DAY_LOAN_INTEREST((short)33, "dayLoanInterest"),
    DAY_LOAN_MGR((short)34, "dayLoanMgr"),
    DAY_LOAN_OTHER_FEE((short)35, "dayLoanOtherFee"),
    EACHISSUE_OPTION((short)36, "eachissueOption"),
    FEES_PROPORTION((short)37, "feesProportion"),
    FROZEN_STATUS((short)38, "frozenStatus"),
    INTEREST_VERSION((short)39, "interestVersion"),
    JUDGE_REPAY_CYCLE((short)40, "judgeRepayCycle"),
    CREDIT_END_DATE((short)41, "creditEndDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // CREDIT_AMT
          return CREDIT_AMT;
        case 4: // CURRENCY
          return CURRENCY;
        case 5: // CURRENCY_TEXT
          return CURRENCY_TEXT;
        case 6: // DATE_MODE
          return DATE_MODE;
        case 7: // DATE_MODE_TEXT
          return DATE_MODE_TEXT;
        case 8: // REPAY_FUN
          return REPAY_FUN;
        case 9: // REOAY_FUN_TEXT
          return REOAY_FUN_TEXT;
        case 10: // REPAY_CYCLE_TYPE
          return REPAY_CYCLE_TYPE;
        case 11: // REPAY_CYCLE_TYPE_TEXT
          return REPAY_CYCLE_TYPE_TEXT;
        case 12: // REPAY_CYCLE_DATE
          return REPAY_CYCLE_DATE;
        case 13: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 14: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 15: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 16: // REPAY_OPTION
          return REPAY_OPTION;
        case 17: // REPAY_DATE
          return REPAY_DATE;
        case 18: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        case 19: // MONTH_LOAN_MGR
          return MONTH_LOAN_MGR;
        case 20: // MONTH_LOAN_OTHER_FEE
          return MONTH_LOAN_OTHER_FEE;
        case 21: // LIQ_DMG_PROPORTION
          return LIQ_DMG_PROPORTION;
        case 22: // OVERDUE_LOAN_INTEREST
          return OVERDUE_LOAN_INTEREST;
        case 23: // OVERDUE_FINE_INTEREST
          return OVERDUE_FINE_INTEREST;
        case 24: // MIS_FINE_INTEREST
          return MIS_FINE_INTEREST;
        case 25: // PREPAY_LIQ_DMG_PROPORTION
          return PREPAY_LIQ_DMG_PROPORTION;
        case 26: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 27: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 28: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 29: // STATUS
          return STATUS;
        case 30: // YEAR_LOAN_INTEREST
          return YEAR_LOAN_INTEREST;
        case 31: // YEAR_LOAN_MGR
          return YEAR_LOAN_MGR;
        case 32: // YEAR_LOAN_OTHER_FEE
          return YEAR_LOAN_OTHER_FEE;
        case 33: // DAY_LOAN_INTEREST
          return DAY_LOAN_INTEREST;
        case 34: // DAY_LOAN_MGR
          return DAY_LOAN_MGR;
        case 35: // DAY_LOAN_OTHER_FEE
          return DAY_LOAN_OTHER_FEE;
        case 36: // EACHISSUE_OPTION
          return EACHISSUE_OPTION;
        case 37: // FEES_PROPORTION
          return FEES_PROPORTION;
        case 38: // FROZEN_STATUS
          return FROZEN_STATUS;
        case 39: // INTEREST_VERSION
          return INTEREST_VERSION;
        case 40: // JUDGE_REPAY_CYCLE
          return JUDGE_REPAY_CYCLE;
        case 41: // CREDIT_END_DATE
          return CREDIT_END_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __CREDITAMT_ISSET_ID = 2;
  private static final int __CURRENCY_ISSET_ID = 3;
  private static final int __DATEMODE_ISSET_ID = 4;
  private static final int __REPAYFUN_ISSET_ID = 5;
  private static final int __REPAYCYCLETYPE_ISSET_ID = 6;
  private static final int __REPAYCYCLEDATE_ISSET_ID = 7;
  private static final int __REPAYCYCLE_ISSET_ID = 8;
  private static final int __REPAYOPTION_ISSET_ID = 9;
  private static final int __REPAYDATE_ISSET_ID = 10;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 11;
  private static final int __MONTHLOANMGR_ISSET_ID = 12;
  private static final int __MONTHLOANOTHERFEE_ISSET_ID = 13;
  private static final int __LIQDMGPROPORTION_ISSET_ID = 14;
  private static final int __OVERDUELOANINTEREST_ISSET_ID = 15;
  private static final int __OVERDUEFINEINTEREST_ISSET_ID = 16;
  private static final int __MISFINEINTEREST_ISSET_ID = 17;
  private static final int __PREPAYLIQDMGPROPORTION_ISSET_ID = 18;
  private static final int __REQUESTSTATUS_ISSET_ID = 19;
  private static final int __STATUS_ISSET_ID = 20;
  private static final int __YEARLOANINTEREST_ISSET_ID = 21;
  private static final int __YEARLOANMGR_ISSET_ID = 22;
  private static final int __YEARLOANOTHERFEE_ISSET_ID = 23;
  private static final int __DAYLOANINTEREST_ISSET_ID = 24;
  private static final int __DAYLOANMGR_ISSET_ID = 25;
  private static final int __DAYLOANOTHERFEE_ISSET_ID = 26;
  private static final int __EACHISSUEOPTION_ISSET_ID = 27;
  private static final int __FEESPROPORTION_ISSET_ID = 28;
  private static final int __FROZENSTATUS_ISSET_ID = 29;
  private static final int __INTERESTVERSION_ISSET_ID = 30;
  private static final int __JUDGEREPAYCYCLE_ISSET_ID = 31;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENCY_TEXT, new org.apache.thrift.meta_data.FieldMetaData("currencyText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("dateMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_MODE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("dateModeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_FUN, new org.apache.thrift.meta_data.FieldMetaData("repayFun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REOAY_FUN_TEXT, new org.apache.thrift.meta_data.FieldMetaData("reoayFunText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_CYCLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repayCycleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_CYCLE_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("repayCycleTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_CYCLE_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayCycleDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("repayOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("monthLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("monthLoanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LIQ_DMG_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("liqDmgProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FINE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueFineInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIS_FINE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("misFineInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREPAY_LIQ_DMG_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("prepayLiqDmgProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.YEAR_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("yearLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("yearLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR_LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("yearLoanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("dayLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_LOAN_MGR, new org.apache.thrift.meta_data.FieldMetaData("dayLoanMgr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("dayLoanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EACHISSUE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("eachissueOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEES_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("feesProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("frozenStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTEREST_VERSION, new org.apache.thrift.meta_data.FieldMetaData("interestVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JUDGE_REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("judgeRepayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("creditEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Loan.class, metaDataMap);
  }

  public Loan() {
  }

  public Loan(
    int pid,
    int projectId,
    double creditAmt,
    int currency,
    String currencyText,
    int dateMode,
    String dateModeText,
    int repayFun,
    String reoayFunText,
    int repayCycleType,
    String repayCycleTypeText,
    int repayCycleDate,
    int repayCycle,
    String planOutLoanDt,
    String planRepayLoanDt,
    int repayOption,
    int repayDate,
    double monthLoanInterest,
    double monthLoanMgr,
    double monthLoanOtherFee,
    double liqDmgProportion,
    double overdueLoanInterest,
    double overdueFineInterest,
    double misFineInterest,
    double prepayLiqDmgProportion,
    int requestStatus,
    String requestDttm,
    String completeDttm,
    int status,
    double yearLoanInterest,
    double yearLoanMgr,
    double yearLoanOtherFee,
    double dayLoanInterest,
    double dayLoanMgr,
    double dayLoanOtherFee,
    int eachissueOption,
    double feesProportion,
    int frozenStatus,
    int interestVersion,
    int judgeRepayCycle,
    String creditEndDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.currency = currency;
    setCurrencyIsSet(true);
    this.currencyText = currencyText;
    this.dateMode = dateMode;
    setDateModeIsSet(true);
    this.dateModeText = dateModeText;
    this.repayFun = repayFun;
    setRepayFunIsSet(true);
    this.reoayFunText = reoayFunText;
    this.repayCycleType = repayCycleType;
    setRepayCycleTypeIsSet(true);
    this.repayCycleTypeText = repayCycleTypeText;
    this.repayCycleDate = repayCycleDate;
    setRepayCycleDateIsSet(true);
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    this.planOutLoanDt = planOutLoanDt;
    this.planRepayLoanDt = planRepayLoanDt;
    this.repayOption = repayOption;
    setRepayOptionIsSet(true);
    this.repayDate = repayDate;
    setRepayDateIsSet(true);
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    this.monthLoanOtherFee = monthLoanOtherFee;
    setMonthLoanOtherFeeIsSet(true);
    this.liqDmgProportion = liqDmgProportion;
    setLiqDmgProportionIsSet(true);
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    this.misFineInterest = misFineInterest;
    setMisFineInterestIsSet(true);
    this.prepayLiqDmgProportion = prepayLiqDmgProportion;
    setPrepayLiqDmgProportionIsSet(true);
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.completeDttm = completeDttm;
    this.status = status;
    setStatusIsSet(true);
    this.yearLoanInterest = yearLoanInterest;
    setYearLoanInterestIsSet(true);
    this.yearLoanMgr = yearLoanMgr;
    setYearLoanMgrIsSet(true);
    this.yearLoanOtherFee = yearLoanOtherFee;
    setYearLoanOtherFeeIsSet(true);
    this.dayLoanInterest = dayLoanInterest;
    setDayLoanInterestIsSet(true);
    this.dayLoanMgr = dayLoanMgr;
    setDayLoanMgrIsSet(true);
    this.dayLoanOtherFee = dayLoanOtherFee;
    setDayLoanOtherFeeIsSet(true);
    this.eachissueOption = eachissueOption;
    setEachissueOptionIsSet(true);
    this.feesProportion = feesProportion;
    setFeesProportionIsSet(true);
    this.frozenStatus = frozenStatus;
    setFrozenStatusIsSet(true);
    this.interestVersion = interestVersion;
    setInterestVersionIsSet(true);
    this.judgeRepayCycle = judgeRepayCycle;
    setJudgeRepayCycleIsSet(true);
    this.creditEndDate = creditEndDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Loan(Loan other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.creditAmt = other.creditAmt;
    this.currency = other.currency;
    if (other.isSetCurrencyText()) {
      this.currencyText = other.currencyText;
    }
    this.dateMode = other.dateMode;
    if (other.isSetDateModeText()) {
      this.dateModeText = other.dateModeText;
    }
    this.repayFun = other.repayFun;
    if (other.isSetReoayFunText()) {
      this.reoayFunText = other.reoayFunText;
    }
    this.repayCycleType = other.repayCycleType;
    if (other.isSetRepayCycleTypeText()) {
      this.repayCycleTypeText = other.repayCycleTypeText;
    }
    this.repayCycleDate = other.repayCycleDate;
    this.repayCycle = other.repayCycle;
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    this.repayOption = other.repayOption;
    this.repayDate = other.repayDate;
    this.monthLoanInterest = other.monthLoanInterest;
    this.monthLoanMgr = other.monthLoanMgr;
    this.monthLoanOtherFee = other.monthLoanOtherFee;
    this.liqDmgProportion = other.liqDmgProportion;
    this.overdueLoanInterest = other.overdueLoanInterest;
    this.overdueFineInterest = other.overdueFineInterest;
    this.misFineInterest = other.misFineInterest;
    this.prepayLiqDmgProportion = other.prepayLiqDmgProportion;
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    this.status = other.status;
    this.yearLoanInterest = other.yearLoanInterest;
    this.yearLoanMgr = other.yearLoanMgr;
    this.yearLoanOtherFee = other.yearLoanOtherFee;
    this.dayLoanInterest = other.dayLoanInterest;
    this.dayLoanMgr = other.dayLoanMgr;
    this.dayLoanOtherFee = other.dayLoanOtherFee;
    this.eachissueOption = other.eachissueOption;
    this.feesProportion = other.feesProportion;
    this.frozenStatus = other.frozenStatus;
    this.interestVersion = other.interestVersion;
    this.judgeRepayCycle = other.judgeRepayCycle;
    if (other.isSetCreditEndDate()) {
      this.creditEndDate = other.creditEndDate;
    }
  }

  public Loan deepCopy() {
    return new Loan(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setCurrencyIsSet(false);
    this.currency = 0;
    this.currencyText = null;
    setDateModeIsSet(false);
    this.dateMode = 0;
    this.dateModeText = null;
    setRepayFunIsSet(false);
    this.repayFun = 0;
    this.reoayFunText = null;
    setRepayCycleTypeIsSet(false);
    this.repayCycleType = 0;
    this.repayCycleTypeText = null;
    setRepayCycleDateIsSet(false);
    this.repayCycleDate = 0;
    setRepayCycleIsSet(false);
    this.repayCycle = 0;
    this.planOutLoanDt = null;
    this.planRepayLoanDt = null;
    setRepayOptionIsSet(false);
    this.repayOption = 0;
    setRepayDateIsSet(false);
    this.repayDate = 0;
    setMonthLoanInterestIsSet(false);
    this.monthLoanInterest = 0.0;
    setMonthLoanMgrIsSet(false);
    this.monthLoanMgr = 0.0;
    setMonthLoanOtherFeeIsSet(false);
    this.monthLoanOtherFee = 0.0;
    setLiqDmgProportionIsSet(false);
    this.liqDmgProportion = 0.0;
    setOverdueLoanInterestIsSet(false);
    this.overdueLoanInterest = 0.0;
    setOverdueFineInterestIsSet(false);
    this.overdueFineInterest = 0.0;
    setMisFineInterestIsSet(false);
    this.misFineInterest = 0.0;
    setPrepayLiqDmgProportionIsSet(false);
    this.prepayLiqDmgProportion = 0.0;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.completeDttm = null;
    setStatusIsSet(false);
    this.status = 0;
    setYearLoanInterestIsSet(false);
    this.yearLoanInterest = 0.0;
    setYearLoanMgrIsSet(false);
    this.yearLoanMgr = 0.0;
    setYearLoanOtherFeeIsSet(false);
    this.yearLoanOtherFee = 0.0;
    setDayLoanInterestIsSet(false);
    this.dayLoanInterest = 0.0;
    setDayLoanMgrIsSet(false);
    this.dayLoanMgr = 0.0;
    setDayLoanOtherFeeIsSet(false);
    this.dayLoanOtherFee = 0.0;
    setEachissueOptionIsSet(false);
    this.eachissueOption = 0;
    setFeesProportionIsSet(false);
    this.feesProportion = 0.0;
    setFrozenStatusIsSet(false);
    this.frozenStatus = 0;
    setInterestVersionIsSet(false);
    this.interestVersion = 0;
    setJudgeRepayCycleIsSet(false);
    this.judgeRepayCycle = 0;
    this.creditEndDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public Loan setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public Loan setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public Loan setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public int getCurrency() {
    return this.currency;
  }

  public Loan setCurrency(int currency) {
    this.currency = currency;
    setCurrencyIsSet(true);
    return this;
  }

  public void unsetCurrency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  public void setCurrencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENCY_ISSET_ID, value);
  }

  public String getCurrencyText() {
    return this.currencyText;
  }

  public Loan setCurrencyText(String currencyText) {
    this.currencyText = currencyText;
    return this;
  }

  public void unsetCurrencyText() {
    this.currencyText = null;
  }

  /** Returns true if field currencyText is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyText() {
    return this.currencyText != null;
  }

  public void setCurrencyTextIsSet(boolean value) {
    if (!value) {
      this.currencyText = null;
    }
  }

  public int getDateMode() {
    return this.dateMode;
  }

  public Loan setDateMode(int dateMode) {
    this.dateMode = dateMode;
    setDateModeIsSet(true);
    return this;
  }

  public void unsetDateMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATEMODE_ISSET_ID);
  }

  /** Returns true if field dateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDateMode() {
    return EncodingUtils.testBit(__isset_bitfield, __DATEMODE_ISSET_ID);
  }

  public void setDateModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATEMODE_ISSET_ID, value);
  }

  public String getDateModeText() {
    return this.dateModeText;
  }

  public Loan setDateModeText(String dateModeText) {
    this.dateModeText = dateModeText;
    return this;
  }

  public void unsetDateModeText() {
    this.dateModeText = null;
  }

  /** Returns true if field dateModeText is set (has been assigned a value) and false otherwise */
  public boolean isSetDateModeText() {
    return this.dateModeText != null;
  }

  public void setDateModeTextIsSet(boolean value) {
    if (!value) {
      this.dateModeText = null;
    }
  }

  public int getRepayFun() {
    return this.repayFun;
  }

  public Loan setRepayFun(int repayFun) {
    this.repayFun = repayFun;
    setRepayFunIsSet(true);
    return this;
  }

  public void unsetRepayFun() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYFUN_ISSET_ID);
  }

  /** Returns true if field repayFun is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayFun() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYFUN_ISSET_ID);
  }

  public void setRepayFunIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYFUN_ISSET_ID, value);
  }

  public String getReoayFunText() {
    return this.reoayFunText;
  }

  public Loan setReoayFunText(String reoayFunText) {
    this.reoayFunText = reoayFunText;
    return this;
  }

  public void unsetReoayFunText() {
    this.reoayFunText = null;
  }

  /** Returns true if field reoayFunText is set (has been assigned a value) and false otherwise */
  public boolean isSetReoayFunText() {
    return this.reoayFunText != null;
  }

  public void setReoayFunTextIsSet(boolean value) {
    if (!value) {
      this.reoayFunText = null;
    }
  }

  public int getRepayCycleType() {
    return this.repayCycleType;
  }

  public Loan setRepayCycleType(int repayCycleType) {
    this.repayCycleType = repayCycleType;
    setRepayCycleTypeIsSet(true);
    return this;
  }

  public void unsetRepayCycleType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYCYCLETYPE_ISSET_ID);
  }

  /** Returns true if field repayCycleType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycleType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYCYCLETYPE_ISSET_ID);
  }

  public void setRepayCycleTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYCYCLETYPE_ISSET_ID, value);
  }

  public String getRepayCycleTypeText() {
    return this.repayCycleTypeText;
  }

  public Loan setRepayCycleTypeText(String repayCycleTypeText) {
    this.repayCycleTypeText = repayCycleTypeText;
    return this;
  }

  public void unsetRepayCycleTypeText() {
    this.repayCycleTypeText = null;
  }

  /** Returns true if field repayCycleTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycleTypeText() {
    return this.repayCycleTypeText != null;
  }

  public void setRepayCycleTypeTextIsSet(boolean value) {
    if (!value) {
      this.repayCycleTypeText = null;
    }
  }

  public int getRepayCycleDate() {
    return this.repayCycleDate;
  }

  public Loan setRepayCycleDate(int repayCycleDate) {
    this.repayCycleDate = repayCycleDate;
    setRepayCycleDateIsSet(true);
    return this;
  }

  public void unsetRepayCycleDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYCYCLEDATE_ISSET_ID);
  }

  /** Returns true if field repayCycleDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycleDate() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYCYCLEDATE_ISSET_ID);
  }

  public void setRepayCycleDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYCYCLEDATE_ISSET_ID, value);
  }

  public int getRepayCycle() {
    return this.repayCycle;
  }

  public Loan setRepayCycle(int repayCycle) {
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    return this;
  }

  public void unsetRepayCycle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  public void setRepayCycleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID, value);
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public Loan setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public Loan setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public int getRepayOption() {
    return this.repayOption;
  }

  public Loan setRepayOption(int repayOption) {
    this.repayOption = repayOption;
    setRepayOptionIsSet(true);
    return this;
  }

  public void unsetRepayOption() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYOPTION_ISSET_ID);
  }

  /** Returns true if field repayOption is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayOption() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYOPTION_ISSET_ID);
  }

  public void setRepayOptionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYOPTION_ISSET_ID, value);
  }

  public int getRepayDate() {
    return this.repayDate;
  }

  public Loan setRepayDate(int repayDate) {
    this.repayDate = repayDate;
    setRepayDateIsSet(true);
    return this;
  }

  public void unsetRepayDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYDATE_ISSET_ID);
  }

  /** Returns true if field repayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDate() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYDATE_ISSET_ID);
  }

  public void setRepayDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYDATE_ISSET_ID, value);
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public Loan setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID, value);
  }

  public double getMonthLoanMgr() {
    return this.monthLoanMgr;
  }

  public Loan setMonthLoanMgr(double monthLoanMgr) {
    this.monthLoanMgr = monthLoanMgr;
    setMonthLoanMgrIsSet(true);
    return this;
  }

  public void unsetMonthLoanMgr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID);
  }

  /** Returns true if field monthLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanMgr() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID);
  }

  public void setMonthLoanMgrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANMGR_ISSET_ID, value);
  }

  public double getMonthLoanOtherFee() {
    return this.monthLoanOtherFee;
  }

  public Loan setMonthLoanOtherFee(double monthLoanOtherFee) {
    this.monthLoanOtherFee = monthLoanOtherFee;
    setMonthLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetMonthLoanOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field monthLoanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANOTHERFEE_ISSET_ID);
  }

  public void setMonthLoanOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANOTHERFEE_ISSET_ID, value);
  }

  public double getLiqDmgProportion() {
    return this.liqDmgProportion;
  }

  public Loan setLiqDmgProportion(double liqDmgProportion) {
    this.liqDmgProportion = liqDmgProportion;
    setLiqDmgProportionIsSet(true);
    return this;
  }

  public void unsetLiqDmgProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIQDMGPROPORTION_ISSET_ID);
  }

  /** Returns true if field liqDmgProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetLiqDmgProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __LIQDMGPROPORTION_ISSET_ID);
  }

  public void setLiqDmgProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIQDMGPROPORTION_ISSET_ID, value);
  }

  public double getOverdueLoanInterest() {
    return this.overdueLoanInterest;
  }

  public Loan setOverdueLoanInterest(double overdueLoanInterest) {
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    return this;
  }

  public void unsetOverdueLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID);
  }

  public void setOverdueLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID, value);
  }

  public double getOverdueFineInterest() {
    return this.overdueFineInterest;
  }

  public Loan setOverdueFineInterest(double overdueFineInterest) {
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    return this;
  }

  public void unsetOverdueFineInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueFineInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFineInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID);
  }

  public void setOverdueFineInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID, value);
  }

  public double getMisFineInterest() {
    return this.misFineInterest;
  }

  public Loan setMisFineInterest(double misFineInterest) {
    this.misFineInterest = misFineInterest;
    setMisFineInterestIsSet(true);
    return this;
  }

  public void unsetMisFineInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISFINEINTEREST_ISSET_ID);
  }

  /** Returns true if field misFineInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMisFineInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MISFINEINTEREST_ISSET_ID);
  }

  public void setMisFineInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISFINEINTEREST_ISSET_ID, value);
  }

  public double getPrepayLiqDmgProportion() {
    return this.prepayLiqDmgProportion;
  }

  public Loan setPrepayLiqDmgProportion(double prepayLiqDmgProportion) {
    this.prepayLiqDmgProportion = prepayLiqDmgProportion;
    setPrepayLiqDmgProportionIsSet(true);
    return this;
  }

  public void unsetPrepayLiqDmgProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID);
  }

  /** Returns true if field prepayLiqDmgProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepayLiqDmgProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID);
  }

  public void setPrepayLiqDmgProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID, value);
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public Loan setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public Loan setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public Loan setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public Loan setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getYearLoanInterest() {
    return this.yearLoanInterest;
  }

  public Loan setYearLoanInterest(double yearLoanInterest) {
    this.yearLoanInterest = yearLoanInterest;
    setYearLoanInterestIsSet(true);
    return this;
  }

  public void unsetYearLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEARLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field yearLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetYearLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __YEARLOANINTEREST_ISSET_ID);
  }

  public void setYearLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEARLOANINTEREST_ISSET_ID, value);
  }

  public double getYearLoanMgr() {
    return this.yearLoanMgr;
  }

  public Loan setYearLoanMgr(double yearLoanMgr) {
    this.yearLoanMgr = yearLoanMgr;
    setYearLoanMgrIsSet(true);
    return this;
  }

  public void unsetYearLoanMgr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEARLOANMGR_ISSET_ID);
  }

  /** Returns true if field yearLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetYearLoanMgr() {
    return EncodingUtils.testBit(__isset_bitfield, __YEARLOANMGR_ISSET_ID);
  }

  public void setYearLoanMgrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEARLOANMGR_ISSET_ID, value);
  }

  public double getYearLoanOtherFee() {
    return this.yearLoanOtherFee;
  }

  public Loan setYearLoanOtherFee(double yearLoanOtherFee) {
    this.yearLoanOtherFee = yearLoanOtherFee;
    setYearLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetYearLoanOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEARLOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field yearLoanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetYearLoanOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __YEARLOANOTHERFEE_ISSET_ID);
  }

  public void setYearLoanOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEARLOANOTHERFEE_ISSET_ID, value);
  }

  public double getDayLoanInterest() {
    return this.dayLoanInterest;
  }

  public Loan setDayLoanInterest(double dayLoanInterest) {
    this.dayLoanInterest = dayLoanInterest;
    setDayLoanInterestIsSet(true);
    return this;
  }

  public void unsetDayLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field dayLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetDayLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYLOANINTEREST_ISSET_ID);
  }

  public void setDayLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYLOANINTEREST_ISSET_ID, value);
  }

  public double getDayLoanMgr() {
    return this.dayLoanMgr;
  }

  public Loan setDayLoanMgr(double dayLoanMgr) {
    this.dayLoanMgr = dayLoanMgr;
    setDayLoanMgrIsSet(true);
    return this;
  }

  public void unsetDayLoanMgr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYLOANMGR_ISSET_ID);
  }

  /** Returns true if field dayLoanMgr is set (has been assigned a value) and false otherwise */
  public boolean isSetDayLoanMgr() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYLOANMGR_ISSET_ID);
  }

  public void setDayLoanMgrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYLOANMGR_ISSET_ID, value);
  }

  public double getDayLoanOtherFee() {
    return this.dayLoanOtherFee;
  }

  public Loan setDayLoanOtherFee(double dayLoanOtherFee) {
    this.dayLoanOtherFee = dayLoanOtherFee;
    setDayLoanOtherFeeIsSet(true);
    return this;
  }

  public void unsetDayLoanOtherFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYLOANOTHERFEE_ISSET_ID);
  }

  /** Returns true if field dayLoanOtherFee is set (has been assigned a value) and false otherwise */
  public boolean isSetDayLoanOtherFee() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYLOANOTHERFEE_ISSET_ID);
  }

  public void setDayLoanOtherFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYLOANOTHERFEE_ISSET_ID, value);
  }

  public int getEachissueOption() {
    return this.eachissueOption;
  }

  public Loan setEachissueOption(int eachissueOption) {
    this.eachissueOption = eachissueOption;
    setEachissueOptionIsSet(true);
    return this;
  }

  public void unsetEachissueOption() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EACHISSUEOPTION_ISSET_ID);
  }

  /** Returns true if field eachissueOption is set (has been assigned a value) and false otherwise */
  public boolean isSetEachissueOption() {
    return EncodingUtils.testBit(__isset_bitfield, __EACHISSUEOPTION_ISSET_ID);
  }

  public void setEachissueOptionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EACHISSUEOPTION_ISSET_ID, value);
  }

  public double getFeesProportion() {
    return this.feesProportion;
  }

  public Loan setFeesProportion(double feesProportion) {
    this.feesProportion = feesProportion;
    setFeesProportionIsSet(true);
    return this;
  }

  public void unsetFeesProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEESPROPORTION_ISSET_ID);
  }

  /** Returns true if field feesProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetFeesProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __FEESPROPORTION_ISSET_ID);
  }

  public void setFeesProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEESPROPORTION_ISSET_ID, value);
  }

  public int getFrozenStatus() {
    return this.frozenStatus;
  }

  public Loan setFrozenStatus(int frozenStatus) {
    this.frozenStatus = frozenStatus;
    setFrozenStatusIsSet(true);
    return this;
  }

  public void unsetFrozenStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENSTATUS_ISSET_ID);
  }

  /** Returns true if field frozenStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENSTATUS_ISSET_ID);
  }

  public void setFrozenStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENSTATUS_ISSET_ID, value);
  }

  public int getInterestVersion() {
    return this.interestVersion;
  }

  public Loan setInterestVersion(int interestVersion) {
    this.interestVersion = interestVersion;
    setInterestVersionIsSet(true);
    return this;
  }

  public void unsetInterestVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERESTVERSION_ISSET_ID);
  }

  /** Returns true if field interestVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetInterestVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERESTVERSION_ISSET_ID);
  }

  public void setInterestVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERESTVERSION_ISSET_ID, value);
  }

  public int getJudgeRepayCycle() {
    return this.judgeRepayCycle;
  }

  public Loan setJudgeRepayCycle(int judgeRepayCycle) {
    this.judgeRepayCycle = judgeRepayCycle;
    setJudgeRepayCycleIsSet(true);
    return this;
  }

  public void unsetJudgeRepayCycle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JUDGEREPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field judgeRepayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetJudgeRepayCycle() {
    return EncodingUtils.testBit(__isset_bitfield, __JUDGEREPAYCYCLE_ISSET_ID);
  }

  public void setJudgeRepayCycleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JUDGEREPAYCYCLE_ISSET_ID, value);
  }

  public String getCreditEndDate() {
    return this.creditEndDate;
  }

  public Loan setCreditEndDate(String creditEndDate) {
    this.creditEndDate = creditEndDate;
    return this;
  }

  public void unsetCreditEndDate() {
    this.creditEndDate = null;
  }

  /** Returns true if field creditEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditEndDate() {
    return this.creditEndDate != null;
  }

  public void setCreditEndDateIsSet(boolean value) {
    if (!value) {
      this.creditEndDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((Integer)value);
      }
      break;

    case CURRENCY_TEXT:
      if (value == null) {
        unsetCurrencyText();
      } else {
        setCurrencyText((String)value);
      }
      break;

    case DATE_MODE:
      if (value == null) {
        unsetDateMode();
      } else {
        setDateMode((Integer)value);
      }
      break;

    case DATE_MODE_TEXT:
      if (value == null) {
        unsetDateModeText();
      } else {
        setDateModeText((String)value);
      }
      break;

    case REPAY_FUN:
      if (value == null) {
        unsetRepayFun();
      } else {
        setRepayFun((Integer)value);
      }
      break;

    case REOAY_FUN_TEXT:
      if (value == null) {
        unsetReoayFunText();
      } else {
        setReoayFunText((String)value);
      }
      break;

    case REPAY_CYCLE_TYPE:
      if (value == null) {
        unsetRepayCycleType();
      } else {
        setRepayCycleType((Integer)value);
      }
      break;

    case REPAY_CYCLE_TYPE_TEXT:
      if (value == null) {
        unsetRepayCycleTypeText();
      } else {
        setRepayCycleTypeText((String)value);
      }
      break;

    case REPAY_CYCLE_DATE:
      if (value == null) {
        unsetRepayCycleDate();
      } else {
        setRepayCycleDate((Integer)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((Integer)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case REPAY_OPTION:
      if (value == null) {
        unsetRepayOption();
      } else {
        setRepayOption((Integer)value);
      }
      break;

    case REPAY_DATE:
      if (value == null) {
        unsetRepayDate();
      } else {
        setRepayDate((Integer)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    case MONTH_LOAN_MGR:
      if (value == null) {
        unsetMonthLoanMgr();
      } else {
        setMonthLoanMgr((Double)value);
      }
      break;

    case MONTH_LOAN_OTHER_FEE:
      if (value == null) {
        unsetMonthLoanOtherFee();
      } else {
        setMonthLoanOtherFee((Double)value);
      }
      break;

    case LIQ_DMG_PROPORTION:
      if (value == null) {
        unsetLiqDmgProportion();
      } else {
        setLiqDmgProportion((Double)value);
      }
      break;

    case OVERDUE_LOAN_INTEREST:
      if (value == null) {
        unsetOverdueLoanInterest();
      } else {
        setOverdueLoanInterest((Double)value);
      }
      break;

    case OVERDUE_FINE_INTEREST:
      if (value == null) {
        unsetOverdueFineInterest();
      } else {
        setOverdueFineInterest((Double)value);
      }
      break;

    case MIS_FINE_INTEREST:
      if (value == null) {
        unsetMisFineInterest();
      } else {
        setMisFineInterest((Double)value);
      }
      break;

    case PREPAY_LIQ_DMG_PROPORTION:
      if (value == null) {
        unsetPrepayLiqDmgProportion();
      } else {
        setPrepayLiqDmgProportion((Double)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case YEAR_LOAN_INTEREST:
      if (value == null) {
        unsetYearLoanInterest();
      } else {
        setYearLoanInterest((Double)value);
      }
      break;

    case YEAR_LOAN_MGR:
      if (value == null) {
        unsetYearLoanMgr();
      } else {
        setYearLoanMgr((Double)value);
      }
      break;

    case YEAR_LOAN_OTHER_FEE:
      if (value == null) {
        unsetYearLoanOtherFee();
      } else {
        setYearLoanOtherFee((Double)value);
      }
      break;

    case DAY_LOAN_INTEREST:
      if (value == null) {
        unsetDayLoanInterest();
      } else {
        setDayLoanInterest((Double)value);
      }
      break;

    case DAY_LOAN_MGR:
      if (value == null) {
        unsetDayLoanMgr();
      } else {
        setDayLoanMgr((Double)value);
      }
      break;

    case DAY_LOAN_OTHER_FEE:
      if (value == null) {
        unsetDayLoanOtherFee();
      } else {
        setDayLoanOtherFee((Double)value);
      }
      break;

    case EACHISSUE_OPTION:
      if (value == null) {
        unsetEachissueOption();
      } else {
        setEachissueOption((Integer)value);
      }
      break;

    case FEES_PROPORTION:
      if (value == null) {
        unsetFeesProportion();
      } else {
        setFeesProportion((Double)value);
      }
      break;

    case FROZEN_STATUS:
      if (value == null) {
        unsetFrozenStatus();
      } else {
        setFrozenStatus((Integer)value);
      }
      break;

    case INTEREST_VERSION:
      if (value == null) {
        unsetInterestVersion();
      } else {
        setInterestVersion((Integer)value);
      }
      break;

    case JUDGE_REPAY_CYCLE:
      if (value == null) {
        unsetJudgeRepayCycle();
      } else {
        setJudgeRepayCycle((Integer)value);
      }
      break;

    case CREDIT_END_DATE:
      if (value == null) {
        unsetCreditEndDate();
      } else {
        setCreditEndDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case CURRENCY:
      return Integer.valueOf(getCurrency());

    case CURRENCY_TEXT:
      return getCurrencyText();

    case DATE_MODE:
      return Integer.valueOf(getDateMode());

    case DATE_MODE_TEXT:
      return getDateModeText();

    case REPAY_FUN:
      return Integer.valueOf(getRepayFun());

    case REOAY_FUN_TEXT:
      return getReoayFunText();

    case REPAY_CYCLE_TYPE:
      return Integer.valueOf(getRepayCycleType());

    case REPAY_CYCLE_TYPE_TEXT:
      return getRepayCycleTypeText();

    case REPAY_CYCLE_DATE:
      return Integer.valueOf(getRepayCycleDate());

    case REPAY_CYCLE:
      return Integer.valueOf(getRepayCycle());

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case REPAY_OPTION:
      return Integer.valueOf(getRepayOption());

    case REPAY_DATE:
      return Integer.valueOf(getRepayDate());

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    case MONTH_LOAN_MGR:
      return Double.valueOf(getMonthLoanMgr());

    case MONTH_LOAN_OTHER_FEE:
      return Double.valueOf(getMonthLoanOtherFee());

    case LIQ_DMG_PROPORTION:
      return Double.valueOf(getLiqDmgProportion());

    case OVERDUE_LOAN_INTEREST:
      return Double.valueOf(getOverdueLoanInterest());

    case OVERDUE_FINE_INTEREST:
      return Double.valueOf(getOverdueFineInterest());

    case MIS_FINE_INTEREST:
      return Double.valueOf(getMisFineInterest());

    case PREPAY_LIQ_DMG_PROPORTION:
      return Double.valueOf(getPrepayLiqDmgProportion());

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    case YEAR_LOAN_INTEREST:
      return Double.valueOf(getYearLoanInterest());

    case YEAR_LOAN_MGR:
      return Double.valueOf(getYearLoanMgr());

    case YEAR_LOAN_OTHER_FEE:
      return Double.valueOf(getYearLoanOtherFee());

    case DAY_LOAN_INTEREST:
      return Double.valueOf(getDayLoanInterest());

    case DAY_LOAN_MGR:
      return Double.valueOf(getDayLoanMgr());

    case DAY_LOAN_OTHER_FEE:
      return Double.valueOf(getDayLoanOtherFee());

    case EACHISSUE_OPTION:
      return Integer.valueOf(getEachissueOption());

    case FEES_PROPORTION:
      return Double.valueOf(getFeesProportion());

    case FROZEN_STATUS:
      return Integer.valueOf(getFrozenStatus());

    case INTEREST_VERSION:
      return Integer.valueOf(getInterestVersion());

    case JUDGE_REPAY_CYCLE:
      return Integer.valueOf(getJudgeRepayCycle());

    case CREDIT_END_DATE:
      return getCreditEndDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case CURRENCY:
      return isSetCurrency();
    case CURRENCY_TEXT:
      return isSetCurrencyText();
    case DATE_MODE:
      return isSetDateMode();
    case DATE_MODE_TEXT:
      return isSetDateModeText();
    case REPAY_FUN:
      return isSetRepayFun();
    case REOAY_FUN_TEXT:
      return isSetReoayFunText();
    case REPAY_CYCLE_TYPE:
      return isSetRepayCycleType();
    case REPAY_CYCLE_TYPE_TEXT:
      return isSetRepayCycleTypeText();
    case REPAY_CYCLE_DATE:
      return isSetRepayCycleDate();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case REPAY_OPTION:
      return isSetRepayOption();
    case REPAY_DATE:
      return isSetRepayDate();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    case MONTH_LOAN_MGR:
      return isSetMonthLoanMgr();
    case MONTH_LOAN_OTHER_FEE:
      return isSetMonthLoanOtherFee();
    case LIQ_DMG_PROPORTION:
      return isSetLiqDmgProportion();
    case OVERDUE_LOAN_INTEREST:
      return isSetOverdueLoanInterest();
    case OVERDUE_FINE_INTEREST:
      return isSetOverdueFineInterest();
    case MIS_FINE_INTEREST:
      return isSetMisFineInterest();
    case PREPAY_LIQ_DMG_PROPORTION:
      return isSetPrepayLiqDmgProportion();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case STATUS:
      return isSetStatus();
    case YEAR_LOAN_INTEREST:
      return isSetYearLoanInterest();
    case YEAR_LOAN_MGR:
      return isSetYearLoanMgr();
    case YEAR_LOAN_OTHER_FEE:
      return isSetYearLoanOtherFee();
    case DAY_LOAN_INTEREST:
      return isSetDayLoanInterest();
    case DAY_LOAN_MGR:
      return isSetDayLoanMgr();
    case DAY_LOAN_OTHER_FEE:
      return isSetDayLoanOtherFee();
    case EACHISSUE_OPTION:
      return isSetEachissueOption();
    case FEES_PROPORTION:
      return isSetFeesProportion();
    case FROZEN_STATUS:
      return isSetFrozenStatus();
    case INTEREST_VERSION:
      return isSetInterestVersion();
    case JUDGE_REPAY_CYCLE:
      return isSetJudgeRepayCycle();
    case CREDIT_END_DATE:
      return isSetCreditEndDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Loan)
      return this.equals((Loan)that);
    return false;
  }

  public boolean equals(Loan that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_currency = true;
    boolean that_present_currency = true;
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (this.currency != that.currency)
        return false;
    }

    boolean this_present_currencyText = true && this.isSetCurrencyText();
    boolean that_present_currencyText = true && that.isSetCurrencyText();
    if (this_present_currencyText || that_present_currencyText) {
      if (!(this_present_currencyText && that_present_currencyText))
        return false;
      if (!this.currencyText.equals(that.currencyText))
        return false;
    }

    boolean this_present_dateMode = true;
    boolean that_present_dateMode = true;
    if (this_present_dateMode || that_present_dateMode) {
      if (!(this_present_dateMode && that_present_dateMode))
        return false;
      if (this.dateMode != that.dateMode)
        return false;
    }

    boolean this_present_dateModeText = true && this.isSetDateModeText();
    boolean that_present_dateModeText = true && that.isSetDateModeText();
    if (this_present_dateModeText || that_present_dateModeText) {
      if (!(this_present_dateModeText && that_present_dateModeText))
        return false;
      if (!this.dateModeText.equals(that.dateModeText))
        return false;
    }

    boolean this_present_repayFun = true;
    boolean that_present_repayFun = true;
    if (this_present_repayFun || that_present_repayFun) {
      if (!(this_present_repayFun && that_present_repayFun))
        return false;
      if (this.repayFun != that.repayFun)
        return false;
    }

    boolean this_present_reoayFunText = true && this.isSetReoayFunText();
    boolean that_present_reoayFunText = true && that.isSetReoayFunText();
    if (this_present_reoayFunText || that_present_reoayFunText) {
      if (!(this_present_reoayFunText && that_present_reoayFunText))
        return false;
      if (!this.reoayFunText.equals(that.reoayFunText))
        return false;
    }

    boolean this_present_repayCycleType = true;
    boolean that_present_repayCycleType = true;
    if (this_present_repayCycleType || that_present_repayCycleType) {
      if (!(this_present_repayCycleType && that_present_repayCycleType))
        return false;
      if (this.repayCycleType != that.repayCycleType)
        return false;
    }

    boolean this_present_repayCycleTypeText = true && this.isSetRepayCycleTypeText();
    boolean that_present_repayCycleTypeText = true && that.isSetRepayCycleTypeText();
    if (this_present_repayCycleTypeText || that_present_repayCycleTypeText) {
      if (!(this_present_repayCycleTypeText && that_present_repayCycleTypeText))
        return false;
      if (!this.repayCycleTypeText.equals(that.repayCycleTypeText))
        return false;
    }

    boolean this_present_repayCycleDate = true;
    boolean that_present_repayCycleDate = true;
    if (this_present_repayCycleDate || that_present_repayCycleDate) {
      if (!(this_present_repayCycleDate && that_present_repayCycleDate))
        return false;
      if (this.repayCycleDate != that.repayCycleDate)
        return false;
    }

    boolean this_present_repayCycle = true;
    boolean that_present_repayCycle = true;
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (this.repayCycle != that.repayCycle)
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_repayOption = true;
    boolean that_present_repayOption = true;
    if (this_present_repayOption || that_present_repayOption) {
      if (!(this_present_repayOption && that_present_repayOption))
        return false;
      if (this.repayOption != that.repayOption)
        return false;
    }

    boolean this_present_repayDate = true;
    boolean that_present_repayDate = true;
    if (this_present_repayDate || that_present_repayDate) {
      if (!(this_present_repayDate && that_present_repayDate))
        return false;
      if (this.repayDate != that.repayDate)
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    boolean this_present_monthLoanMgr = true;
    boolean that_present_monthLoanMgr = true;
    if (this_present_monthLoanMgr || that_present_monthLoanMgr) {
      if (!(this_present_monthLoanMgr && that_present_monthLoanMgr))
        return false;
      if (this.monthLoanMgr != that.monthLoanMgr)
        return false;
    }

    boolean this_present_monthLoanOtherFee = true;
    boolean that_present_monthLoanOtherFee = true;
    if (this_present_monthLoanOtherFee || that_present_monthLoanOtherFee) {
      if (!(this_present_monthLoanOtherFee && that_present_monthLoanOtherFee))
        return false;
      if (this.monthLoanOtherFee != that.monthLoanOtherFee)
        return false;
    }

    boolean this_present_liqDmgProportion = true;
    boolean that_present_liqDmgProportion = true;
    if (this_present_liqDmgProportion || that_present_liqDmgProportion) {
      if (!(this_present_liqDmgProportion && that_present_liqDmgProportion))
        return false;
      if (this.liqDmgProportion != that.liqDmgProportion)
        return false;
    }

    boolean this_present_overdueLoanInterest = true;
    boolean that_present_overdueLoanInterest = true;
    if (this_present_overdueLoanInterest || that_present_overdueLoanInterest) {
      if (!(this_present_overdueLoanInterest && that_present_overdueLoanInterest))
        return false;
      if (this.overdueLoanInterest != that.overdueLoanInterest)
        return false;
    }

    boolean this_present_overdueFineInterest = true;
    boolean that_present_overdueFineInterest = true;
    if (this_present_overdueFineInterest || that_present_overdueFineInterest) {
      if (!(this_present_overdueFineInterest && that_present_overdueFineInterest))
        return false;
      if (this.overdueFineInterest != that.overdueFineInterest)
        return false;
    }

    boolean this_present_misFineInterest = true;
    boolean that_present_misFineInterest = true;
    if (this_present_misFineInterest || that_present_misFineInterest) {
      if (!(this_present_misFineInterest && that_present_misFineInterest))
        return false;
      if (this.misFineInterest != that.misFineInterest)
        return false;
    }

    boolean this_present_prepayLiqDmgProportion = true;
    boolean that_present_prepayLiqDmgProportion = true;
    if (this_present_prepayLiqDmgProportion || that_present_prepayLiqDmgProportion) {
      if (!(this_present_prepayLiqDmgProportion && that_present_prepayLiqDmgProportion))
        return false;
      if (this.prepayLiqDmgProportion != that.prepayLiqDmgProportion)
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_yearLoanInterest = true;
    boolean that_present_yearLoanInterest = true;
    if (this_present_yearLoanInterest || that_present_yearLoanInterest) {
      if (!(this_present_yearLoanInterest && that_present_yearLoanInterest))
        return false;
      if (this.yearLoanInterest != that.yearLoanInterest)
        return false;
    }

    boolean this_present_yearLoanMgr = true;
    boolean that_present_yearLoanMgr = true;
    if (this_present_yearLoanMgr || that_present_yearLoanMgr) {
      if (!(this_present_yearLoanMgr && that_present_yearLoanMgr))
        return false;
      if (this.yearLoanMgr != that.yearLoanMgr)
        return false;
    }

    boolean this_present_yearLoanOtherFee = true;
    boolean that_present_yearLoanOtherFee = true;
    if (this_present_yearLoanOtherFee || that_present_yearLoanOtherFee) {
      if (!(this_present_yearLoanOtherFee && that_present_yearLoanOtherFee))
        return false;
      if (this.yearLoanOtherFee != that.yearLoanOtherFee)
        return false;
    }

    boolean this_present_dayLoanInterest = true;
    boolean that_present_dayLoanInterest = true;
    if (this_present_dayLoanInterest || that_present_dayLoanInterest) {
      if (!(this_present_dayLoanInterest && that_present_dayLoanInterest))
        return false;
      if (this.dayLoanInterest != that.dayLoanInterest)
        return false;
    }

    boolean this_present_dayLoanMgr = true;
    boolean that_present_dayLoanMgr = true;
    if (this_present_dayLoanMgr || that_present_dayLoanMgr) {
      if (!(this_present_dayLoanMgr && that_present_dayLoanMgr))
        return false;
      if (this.dayLoanMgr != that.dayLoanMgr)
        return false;
    }

    boolean this_present_dayLoanOtherFee = true;
    boolean that_present_dayLoanOtherFee = true;
    if (this_present_dayLoanOtherFee || that_present_dayLoanOtherFee) {
      if (!(this_present_dayLoanOtherFee && that_present_dayLoanOtherFee))
        return false;
      if (this.dayLoanOtherFee != that.dayLoanOtherFee)
        return false;
    }

    boolean this_present_eachissueOption = true;
    boolean that_present_eachissueOption = true;
    if (this_present_eachissueOption || that_present_eachissueOption) {
      if (!(this_present_eachissueOption && that_present_eachissueOption))
        return false;
      if (this.eachissueOption != that.eachissueOption)
        return false;
    }

    boolean this_present_feesProportion = true;
    boolean that_present_feesProportion = true;
    if (this_present_feesProportion || that_present_feesProportion) {
      if (!(this_present_feesProportion && that_present_feesProportion))
        return false;
      if (this.feesProportion != that.feesProportion)
        return false;
    }

    boolean this_present_frozenStatus = true;
    boolean that_present_frozenStatus = true;
    if (this_present_frozenStatus || that_present_frozenStatus) {
      if (!(this_present_frozenStatus && that_present_frozenStatus))
        return false;
      if (this.frozenStatus != that.frozenStatus)
        return false;
    }

    boolean this_present_interestVersion = true;
    boolean that_present_interestVersion = true;
    if (this_present_interestVersion || that_present_interestVersion) {
      if (!(this_present_interestVersion && that_present_interestVersion))
        return false;
      if (this.interestVersion != that.interestVersion)
        return false;
    }

    boolean this_present_judgeRepayCycle = true;
    boolean that_present_judgeRepayCycle = true;
    if (this_present_judgeRepayCycle || that_present_judgeRepayCycle) {
      if (!(this_present_judgeRepayCycle && that_present_judgeRepayCycle))
        return false;
      if (this.judgeRepayCycle != that.judgeRepayCycle)
        return false;
    }

    boolean this_present_creditEndDate = true && this.isSetCreditEndDate();
    boolean that_present_creditEndDate = true && that.isSetCreditEndDate();
    if (this_present_creditEndDate || that_present_creditEndDate) {
      if (!(this_present_creditEndDate && that_present_creditEndDate))
        return false;
      if (!this.creditEndDate.equals(that.creditEndDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_currency = true;
    list.add(present_currency);
    if (present_currency)
      list.add(currency);

    boolean present_currencyText = true && (isSetCurrencyText());
    list.add(present_currencyText);
    if (present_currencyText)
      list.add(currencyText);

    boolean present_dateMode = true;
    list.add(present_dateMode);
    if (present_dateMode)
      list.add(dateMode);

    boolean present_dateModeText = true && (isSetDateModeText());
    list.add(present_dateModeText);
    if (present_dateModeText)
      list.add(dateModeText);

    boolean present_repayFun = true;
    list.add(present_repayFun);
    if (present_repayFun)
      list.add(repayFun);

    boolean present_reoayFunText = true && (isSetReoayFunText());
    list.add(present_reoayFunText);
    if (present_reoayFunText)
      list.add(reoayFunText);

    boolean present_repayCycleType = true;
    list.add(present_repayCycleType);
    if (present_repayCycleType)
      list.add(repayCycleType);

    boolean present_repayCycleTypeText = true && (isSetRepayCycleTypeText());
    list.add(present_repayCycleTypeText);
    if (present_repayCycleTypeText)
      list.add(repayCycleTypeText);

    boolean present_repayCycleDate = true;
    list.add(present_repayCycleDate);
    if (present_repayCycleDate)
      list.add(repayCycleDate);

    boolean present_repayCycle = true;
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_repayOption = true;
    list.add(present_repayOption);
    if (present_repayOption)
      list.add(repayOption);

    boolean present_repayDate = true;
    list.add(present_repayDate);
    if (present_repayDate)
      list.add(repayDate);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    boolean present_monthLoanMgr = true;
    list.add(present_monthLoanMgr);
    if (present_monthLoanMgr)
      list.add(monthLoanMgr);

    boolean present_monthLoanOtherFee = true;
    list.add(present_monthLoanOtherFee);
    if (present_monthLoanOtherFee)
      list.add(monthLoanOtherFee);

    boolean present_liqDmgProportion = true;
    list.add(present_liqDmgProportion);
    if (present_liqDmgProportion)
      list.add(liqDmgProportion);

    boolean present_overdueLoanInterest = true;
    list.add(present_overdueLoanInterest);
    if (present_overdueLoanInterest)
      list.add(overdueLoanInterest);

    boolean present_overdueFineInterest = true;
    list.add(present_overdueFineInterest);
    if (present_overdueFineInterest)
      list.add(overdueFineInterest);

    boolean present_misFineInterest = true;
    list.add(present_misFineInterest);
    if (present_misFineInterest)
      list.add(misFineInterest);

    boolean present_prepayLiqDmgProportion = true;
    list.add(present_prepayLiqDmgProportion);
    if (present_prepayLiqDmgProportion)
      list.add(prepayLiqDmgProportion);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_yearLoanInterest = true;
    list.add(present_yearLoanInterest);
    if (present_yearLoanInterest)
      list.add(yearLoanInterest);

    boolean present_yearLoanMgr = true;
    list.add(present_yearLoanMgr);
    if (present_yearLoanMgr)
      list.add(yearLoanMgr);

    boolean present_yearLoanOtherFee = true;
    list.add(present_yearLoanOtherFee);
    if (present_yearLoanOtherFee)
      list.add(yearLoanOtherFee);

    boolean present_dayLoanInterest = true;
    list.add(present_dayLoanInterest);
    if (present_dayLoanInterest)
      list.add(dayLoanInterest);

    boolean present_dayLoanMgr = true;
    list.add(present_dayLoanMgr);
    if (present_dayLoanMgr)
      list.add(dayLoanMgr);

    boolean present_dayLoanOtherFee = true;
    list.add(present_dayLoanOtherFee);
    if (present_dayLoanOtherFee)
      list.add(dayLoanOtherFee);

    boolean present_eachissueOption = true;
    list.add(present_eachissueOption);
    if (present_eachissueOption)
      list.add(eachissueOption);

    boolean present_feesProportion = true;
    list.add(present_feesProportion);
    if (present_feesProportion)
      list.add(feesProportion);

    boolean present_frozenStatus = true;
    list.add(present_frozenStatus);
    if (present_frozenStatus)
      list.add(frozenStatus);

    boolean present_interestVersion = true;
    list.add(present_interestVersion);
    if (present_interestVersion)
      list.add(interestVersion);

    boolean present_judgeRepayCycle = true;
    list.add(present_judgeRepayCycle);
    if (present_judgeRepayCycle)
      list.add(judgeRepayCycle);

    boolean present_creditEndDate = true && (isSetCreditEndDate());
    list.add(present_creditEndDate);
    if (present_creditEndDate)
      list.add(creditEndDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(Loan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyText()).compareTo(other.isSetCurrencyText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyText, other.currencyText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateMode()).compareTo(other.isSetDateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateMode, other.dateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateModeText()).compareTo(other.isSetDateModeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateModeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateModeText, other.dateModeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayFun()).compareTo(other.isSetRepayFun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayFun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayFun, other.repayFun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReoayFunText()).compareTo(other.isSetReoayFunText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReoayFunText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reoayFunText, other.reoayFunText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycleType()).compareTo(other.isSetRepayCycleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycleType, other.repayCycleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycleTypeText()).compareTo(other.isSetRepayCycleTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycleTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycleTypeText, other.repayCycleTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycleDate()).compareTo(other.isSetRepayCycleDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycleDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycleDate, other.repayCycleDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayOption()).compareTo(other.isSetRepayOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayOption, other.repayOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDate()).compareTo(other.isSetRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDate, other.repayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanMgr()).compareTo(other.isSetMonthLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanMgr, other.monthLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanOtherFee()).compareTo(other.isSetMonthLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanOtherFee, other.monthLoanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiqDmgProportion()).compareTo(other.isSetLiqDmgProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiqDmgProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liqDmgProportion, other.liqDmgProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueLoanInterest()).compareTo(other.isSetOverdueLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueLoanInterest, other.overdueLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFineInterest()).compareTo(other.isSetOverdueFineInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFineInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFineInterest, other.overdueFineInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMisFineInterest()).compareTo(other.isSetMisFineInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMisFineInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.misFineInterest, other.misFineInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrepayLiqDmgProportion()).compareTo(other.isSetPrepayLiqDmgProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepayLiqDmgProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepayLiqDmgProportion, other.prepayLiqDmgProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearLoanInterest()).compareTo(other.isSetYearLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearLoanInterest, other.yearLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearLoanMgr()).compareTo(other.isSetYearLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearLoanMgr, other.yearLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearLoanOtherFee()).compareTo(other.isSetYearLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearLoanOtherFee, other.yearLoanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayLoanInterest()).compareTo(other.isSetDayLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLoanInterest, other.dayLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayLoanMgr()).compareTo(other.isSetDayLoanMgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayLoanMgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLoanMgr, other.dayLoanMgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayLoanOtherFee()).compareTo(other.isSetDayLoanOtherFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayLoanOtherFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLoanOtherFee, other.dayLoanOtherFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEachissueOption()).compareTo(other.isSetEachissueOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEachissueOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eachissueOption, other.eachissueOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeesProportion()).compareTo(other.isSetFeesProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeesProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feesProportion, other.feesProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenStatus()).compareTo(other.isSetFrozenStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenStatus, other.frozenStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterestVersion()).compareTo(other.isSetInterestVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterestVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestVersion, other.interestVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJudgeRepayCycle()).compareTo(other.isSetJudgeRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJudgeRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judgeRepayCycle, other.judgeRepayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditEndDate()).compareTo(other.isSetCreditEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditEndDate, other.creditEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Loan(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    sb.append(this.currency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencyText:");
    if (this.currencyText == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateMode:");
    sb.append(this.dateMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateModeText:");
    if (this.dateModeText == null) {
      sb.append("null");
    } else {
      sb.append(this.dateModeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayFun:");
    sb.append(this.repayFun);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reoayFunText:");
    if (this.reoayFunText == null) {
      sb.append("null");
    } else {
      sb.append(this.reoayFunText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycleType:");
    sb.append(this.repayCycleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycleTypeText:");
    if (this.repayCycleTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.repayCycleTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycleDate:");
    sb.append(this.repayCycleDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    sb.append(this.repayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayOption:");
    sb.append(this.repayOption);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDate:");
    sb.append(this.repayDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanMgr:");
    sb.append(this.monthLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanOtherFee:");
    sb.append(this.monthLoanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liqDmgProportion:");
    sb.append(this.liqDmgProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueLoanInterest:");
    sb.append(this.overdueLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFineInterest:");
    sb.append(this.overdueFineInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("misFineInterest:");
    sb.append(this.misFineInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prepayLiqDmgProportion:");
    sb.append(this.prepayLiqDmgProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearLoanInterest:");
    sb.append(this.yearLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearLoanMgr:");
    sb.append(this.yearLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearLoanOtherFee:");
    sb.append(this.yearLoanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayLoanInterest:");
    sb.append(this.dayLoanInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayLoanMgr:");
    sb.append(this.dayLoanMgr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayLoanOtherFee:");
    sb.append(this.dayLoanOtherFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eachissueOption:");
    sb.append(this.eachissueOption);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feesProportion:");
    sb.append(this.feesProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenStatus:");
    sb.append(this.frozenStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interestVersion:");
    sb.append(this.interestVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("judgeRepayCycle:");
    sb.append(this.judgeRepayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditEndDate:");
    if (this.creditEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.creditEndDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanStandardSchemeFactory implements SchemeFactory {
    public LoanStandardScheme getScheme() {
      return new LoanStandardScheme();
    }
  }

  private static class LoanStandardScheme extends StandardScheme<Loan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Loan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currency = iprot.readI32();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CURRENCY_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyText = iprot.readString();
              struct.setCurrencyTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dateMode = iprot.readI32();
              struct.setDateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE_MODE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateModeText = iprot.readString();
              struct.setDateModeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPAY_FUN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayFun = iprot.readI32();
              struct.setRepayFunIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REOAY_FUN_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reoayFunText = iprot.readString();
              struct.setReoayFunTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REPAY_CYCLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycleType = iprot.readI32();
              struct.setRepayCycleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REPAY_CYCLE_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayCycleTypeText = iprot.readString();
              struct.setRepayCycleTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REPAY_CYCLE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycleDate = iprot.readI32();
              struct.setRepayCycleDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycle = iprot.readI32();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REPAY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayOption = iprot.readI32();
              struct.setRepayOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayDate = iprot.readI32();
              struct.setRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MONTH_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanMgr = iprot.readDouble();
              struct.setMonthLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MONTH_LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanOtherFee = iprot.readDouble();
              struct.setMonthLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LIQ_DMG_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.liqDmgProportion = iprot.readDouble();
              struct.setLiqDmgProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // OVERDUE_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueLoanInterest = iprot.readDouble();
              struct.setOverdueLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OVERDUE_FINE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFineInterest = iprot.readDouble();
              struct.setOverdueFineInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MIS_FINE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.misFineInterest = iprot.readDouble();
              struct.setMisFineInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PREPAY_LIQ_DMG_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prepayLiqDmgProportion = iprot.readDouble();
              struct.setPrepayLiqDmgProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // YEAR_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearLoanInterest = iprot.readDouble();
              struct.setYearLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // YEAR_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearLoanMgr = iprot.readDouble();
              struct.setYearLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // YEAR_LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yearLoanOtherFee = iprot.readDouble();
              struct.setYearLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DAY_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayLoanInterest = iprot.readDouble();
              struct.setDayLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DAY_LOAN_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayLoanMgr = iprot.readDouble();
              struct.setDayLoanMgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // DAY_LOAN_OTHER_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayLoanOtherFee = iprot.readDouble();
              struct.setDayLoanOtherFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // EACHISSUE_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eachissueOption = iprot.readI32();
              struct.setEachissueOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // FEES_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feesProportion = iprot.readDouble();
              struct.setFeesProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // FROZEN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frozenStatus = iprot.readI32();
              struct.setFrozenStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // INTEREST_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interestVersion = iprot.readI32();
              struct.setInterestVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // JUDGE_REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.judgeRepayCycle = iprot.readI32();
              struct.setJudgeRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // CREDIT_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creditEndDate = iprot.readString();
              struct.setCreditEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Loan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeI32(struct.currency);
      oprot.writeFieldEnd();
      if (struct.currencyText != null) {
        oprot.writeFieldBegin(CURRENCY_TEXT_FIELD_DESC);
        oprot.writeString(struct.currencyText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_MODE_FIELD_DESC);
      oprot.writeI32(struct.dateMode);
      oprot.writeFieldEnd();
      if (struct.dateModeText != null) {
        oprot.writeFieldBegin(DATE_MODE_TEXT_FIELD_DESC);
        oprot.writeString(struct.dateModeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_FUN_FIELD_DESC);
      oprot.writeI32(struct.repayFun);
      oprot.writeFieldEnd();
      if (struct.reoayFunText != null) {
        oprot.writeFieldBegin(REOAY_FUN_TEXT_FIELD_DESC);
        oprot.writeString(struct.reoayFunText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_CYCLE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repayCycleType);
      oprot.writeFieldEnd();
      if (struct.repayCycleTypeText != null) {
        oprot.writeFieldBegin(REPAY_CYCLE_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.repayCycleTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_CYCLE_DATE_FIELD_DESC);
      oprot.writeI32(struct.repayCycleDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.repayCycle);
      oprot.writeFieldEnd();
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_OPTION_FIELD_DESC);
      oprot.writeI32(struct.repayOption);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAY_DATE_FIELD_DESC);
      oprot.writeI32(struct.repayDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanMgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIQ_DMG_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.liqDmgProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueFineInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIS_FINE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.misFineInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREPAY_LIQ_DMG_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.prepayLiqDmgProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.yearLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.yearLoanMgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.yearLoanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.dayLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_LOAN_MGR_FIELD_DESC);
      oprot.writeDouble(struct.dayLoanMgr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_LOAN_OTHER_FEE_FIELD_DESC);
      oprot.writeDouble(struct.dayLoanOtherFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EACHISSUE_OPTION_FIELD_DESC);
      oprot.writeI32(struct.eachissueOption);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEES_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.feesProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_STATUS_FIELD_DESC);
      oprot.writeI32(struct.frozenStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_VERSION_FIELD_DESC);
      oprot.writeI32(struct.interestVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JUDGE_REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.judgeRepayCycle);
      oprot.writeFieldEnd();
      if (struct.creditEndDate != null) {
        oprot.writeFieldBegin(CREDIT_END_DATE_FIELD_DESC);
        oprot.writeString(struct.creditEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanTupleSchemeFactory implements SchemeFactory {
    public LoanTupleScheme getScheme() {
      return new LoanTupleScheme();
    }
  }

  private static class LoanTupleScheme extends TupleScheme<Loan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Loan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(2);
      }
      if (struct.isSetCurrency()) {
        optionals.set(3);
      }
      if (struct.isSetCurrencyText()) {
        optionals.set(4);
      }
      if (struct.isSetDateMode()) {
        optionals.set(5);
      }
      if (struct.isSetDateModeText()) {
        optionals.set(6);
      }
      if (struct.isSetRepayFun()) {
        optionals.set(7);
      }
      if (struct.isSetReoayFunText()) {
        optionals.set(8);
      }
      if (struct.isSetRepayCycleType()) {
        optionals.set(9);
      }
      if (struct.isSetRepayCycleTypeText()) {
        optionals.set(10);
      }
      if (struct.isSetRepayCycleDate()) {
        optionals.set(11);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(12);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(13);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(14);
      }
      if (struct.isSetRepayOption()) {
        optionals.set(15);
      }
      if (struct.isSetRepayDate()) {
        optionals.set(16);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(17);
      }
      if (struct.isSetMonthLoanMgr()) {
        optionals.set(18);
      }
      if (struct.isSetMonthLoanOtherFee()) {
        optionals.set(19);
      }
      if (struct.isSetLiqDmgProportion()) {
        optionals.set(20);
      }
      if (struct.isSetOverdueLoanInterest()) {
        optionals.set(21);
      }
      if (struct.isSetOverdueFineInterest()) {
        optionals.set(22);
      }
      if (struct.isSetMisFineInterest()) {
        optionals.set(23);
      }
      if (struct.isSetPrepayLiqDmgProportion()) {
        optionals.set(24);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(25);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(26);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(27);
      }
      if (struct.isSetStatus()) {
        optionals.set(28);
      }
      if (struct.isSetYearLoanInterest()) {
        optionals.set(29);
      }
      if (struct.isSetYearLoanMgr()) {
        optionals.set(30);
      }
      if (struct.isSetYearLoanOtherFee()) {
        optionals.set(31);
      }
      if (struct.isSetDayLoanInterest()) {
        optionals.set(32);
      }
      if (struct.isSetDayLoanMgr()) {
        optionals.set(33);
      }
      if (struct.isSetDayLoanOtherFee()) {
        optionals.set(34);
      }
      if (struct.isSetEachissueOption()) {
        optionals.set(35);
      }
      if (struct.isSetFeesProportion()) {
        optionals.set(36);
      }
      if (struct.isSetFrozenStatus()) {
        optionals.set(37);
      }
      if (struct.isSetInterestVersion()) {
        optionals.set(38);
      }
      if (struct.isSetJudgeRepayCycle()) {
        optionals.set(39);
      }
      if (struct.isSetCreditEndDate()) {
        optionals.set(40);
      }
      oprot.writeBitSet(optionals, 41);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetCurrency()) {
        oprot.writeI32(struct.currency);
      }
      if (struct.isSetCurrencyText()) {
        oprot.writeString(struct.currencyText);
      }
      if (struct.isSetDateMode()) {
        oprot.writeI32(struct.dateMode);
      }
      if (struct.isSetDateModeText()) {
        oprot.writeString(struct.dateModeText);
      }
      if (struct.isSetRepayFun()) {
        oprot.writeI32(struct.repayFun);
      }
      if (struct.isSetReoayFunText()) {
        oprot.writeString(struct.reoayFunText);
      }
      if (struct.isSetRepayCycleType()) {
        oprot.writeI32(struct.repayCycleType);
      }
      if (struct.isSetRepayCycleTypeText()) {
        oprot.writeString(struct.repayCycleTypeText);
      }
      if (struct.isSetRepayCycleDate()) {
        oprot.writeI32(struct.repayCycleDate);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeI32(struct.repayCycle);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetRepayOption()) {
        oprot.writeI32(struct.repayOption);
      }
      if (struct.isSetRepayDate()) {
        oprot.writeI32(struct.repayDate);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
      if (struct.isSetMonthLoanMgr()) {
        oprot.writeDouble(struct.monthLoanMgr);
      }
      if (struct.isSetMonthLoanOtherFee()) {
        oprot.writeDouble(struct.monthLoanOtherFee);
      }
      if (struct.isSetLiqDmgProportion()) {
        oprot.writeDouble(struct.liqDmgProportion);
      }
      if (struct.isSetOverdueLoanInterest()) {
        oprot.writeDouble(struct.overdueLoanInterest);
      }
      if (struct.isSetOverdueFineInterest()) {
        oprot.writeDouble(struct.overdueFineInterest);
      }
      if (struct.isSetMisFineInterest()) {
        oprot.writeDouble(struct.misFineInterest);
      }
      if (struct.isSetPrepayLiqDmgProportion()) {
        oprot.writeDouble(struct.prepayLiqDmgProportion);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetYearLoanInterest()) {
        oprot.writeDouble(struct.yearLoanInterest);
      }
      if (struct.isSetYearLoanMgr()) {
        oprot.writeDouble(struct.yearLoanMgr);
      }
      if (struct.isSetYearLoanOtherFee()) {
        oprot.writeDouble(struct.yearLoanOtherFee);
      }
      if (struct.isSetDayLoanInterest()) {
        oprot.writeDouble(struct.dayLoanInterest);
      }
      if (struct.isSetDayLoanMgr()) {
        oprot.writeDouble(struct.dayLoanMgr);
      }
      if (struct.isSetDayLoanOtherFee()) {
        oprot.writeDouble(struct.dayLoanOtherFee);
      }
      if (struct.isSetEachissueOption()) {
        oprot.writeI32(struct.eachissueOption);
      }
      if (struct.isSetFeesProportion()) {
        oprot.writeDouble(struct.feesProportion);
      }
      if (struct.isSetFrozenStatus()) {
        oprot.writeI32(struct.frozenStatus);
      }
      if (struct.isSetInterestVersion()) {
        oprot.writeI32(struct.interestVersion);
      }
      if (struct.isSetJudgeRepayCycle()) {
        oprot.writeI32(struct.judgeRepayCycle);
      }
      if (struct.isSetCreditEndDate()) {
        oprot.writeString(struct.creditEndDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Loan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(41);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currency = iprot.readI32();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.currencyText = iprot.readString();
        struct.setCurrencyTextIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dateMode = iprot.readI32();
        struct.setDateModeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dateModeText = iprot.readString();
        struct.setDateModeTextIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repayFun = iprot.readI32();
        struct.setRepayFunIsSet(true);
      }
      if (incoming.get(8)) {
        struct.reoayFunText = iprot.readString();
        struct.setReoayFunTextIsSet(true);
      }
      if (incoming.get(9)) {
        struct.repayCycleType = iprot.readI32();
        struct.setRepayCycleTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.repayCycleTypeText = iprot.readString();
        struct.setRepayCycleTypeTextIsSet(true);
      }
      if (incoming.get(11)) {
        struct.repayCycleDate = iprot.readI32();
        struct.setRepayCycleDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.repayCycle = iprot.readI32();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(13)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.repayOption = iprot.readI32();
        struct.setRepayOptionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.repayDate = iprot.readI32();
        struct.setRepayDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
      if (incoming.get(18)) {
        struct.monthLoanMgr = iprot.readDouble();
        struct.setMonthLoanMgrIsSet(true);
      }
      if (incoming.get(19)) {
        struct.monthLoanOtherFee = iprot.readDouble();
        struct.setMonthLoanOtherFeeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.liqDmgProportion = iprot.readDouble();
        struct.setLiqDmgProportionIsSet(true);
      }
      if (incoming.get(21)) {
        struct.overdueLoanInterest = iprot.readDouble();
        struct.setOverdueLoanInterestIsSet(true);
      }
      if (incoming.get(22)) {
        struct.overdueFineInterest = iprot.readDouble();
        struct.setOverdueFineInterestIsSet(true);
      }
      if (incoming.get(23)) {
        struct.misFineInterest = iprot.readDouble();
        struct.setMisFineInterestIsSet(true);
      }
      if (incoming.get(24)) {
        struct.prepayLiqDmgProportion = iprot.readDouble();
        struct.setPrepayLiqDmgProportionIsSet(true);
      }
      if (incoming.get(25)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(26)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(27)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(28)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(29)) {
        struct.yearLoanInterest = iprot.readDouble();
        struct.setYearLoanInterestIsSet(true);
      }
      if (incoming.get(30)) {
        struct.yearLoanMgr = iprot.readDouble();
        struct.setYearLoanMgrIsSet(true);
      }
      if (incoming.get(31)) {
        struct.yearLoanOtherFee = iprot.readDouble();
        struct.setYearLoanOtherFeeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.dayLoanInterest = iprot.readDouble();
        struct.setDayLoanInterestIsSet(true);
      }
      if (incoming.get(33)) {
        struct.dayLoanMgr = iprot.readDouble();
        struct.setDayLoanMgrIsSet(true);
      }
      if (incoming.get(34)) {
        struct.dayLoanOtherFee = iprot.readDouble();
        struct.setDayLoanOtherFeeIsSet(true);
      }
      if (incoming.get(35)) {
        struct.eachissueOption = iprot.readI32();
        struct.setEachissueOptionIsSet(true);
      }
      if (incoming.get(36)) {
        struct.feesProportion = iprot.readDouble();
        struct.setFeesProportionIsSet(true);
      }
      if (incoming.get(37)) {
        struct.frozenStatus = iprot.readI32();
        struct.setFrozenStatusIsSet(true);
      }
      if (incoming.get(38)) {
        struct.interestVersion = iprot.readI32();
        struct.setInterestVersionIsSet(true);
      }
      if (incoming.get(39)) {
        struct.judgeRepayCycle = iprot.readI32();
        struct.setJudgeRepayCycleIsSet(true);
      }
      if (incoming.get(40)) {
        struct.creditEndDate = iprot.readString();
        struct.setCreditEndDateIsSet(true);
      }
    }
  }

}


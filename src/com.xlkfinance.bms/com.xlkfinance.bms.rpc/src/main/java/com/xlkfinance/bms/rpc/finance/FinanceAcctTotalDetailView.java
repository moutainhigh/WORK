/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceAcctTotalDetailView implements org.apache.thrift.TBase<FinanceAcctTotalDetailView, FinanceAcctTotalDetailView._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceAcctTotalDetailView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceAcctTotalDetailView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INITIAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("initialAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField INCOME_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeAccount", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("accountOut", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField GAP_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("gapAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TERMINAL_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("terminalBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("remarks", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField FT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftDate", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceAcctTotalDetailViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceAcctTotalDetailViewTupleSchemeFactory());
  }

  public String pid; // required
  public double initialAmt; // required
  public double incomeAccount; // required
  public double accountOut; // required
  public double gapAmt; // required
  public double terminalBalance; // required
  public String remarks; // required
  public double ftAmt; // required
  public String ftType; // required
  public String ftDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    INITIAL_AMT((short)2, "initialAmt"),
    INCOME_ACCOUNT((short)3, "incomeAccount"),
    ACCOUNT_OUT((short)4, "accountOut"),
    GAP_AMT((short)5, "gapAmt"),
    TERMINAL_BALANCE((short)6, "terminalBalance"),
    REMARKS((short)7, "remarks"),
    FT_AMT((short)8, "ftAmt"),
    FT_TYPE((short)9, "ftType"),
    FT_DATE((short)10, "ftDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // INITIAL_AMT
          return INITIAL_AMT;
        case 3: // INCOME_ACCOUNT
          return INCOME_ACCOUNT;
        case 4: // ACCOUNT_OUT
          return ACCOUNT_OUT;
        case 5: // GAP_AMT
          return GAP_AMT;
        case 6: // TERMINAL_BALANCE
          return TERMINAL_BALANCE;
        case 7: // REMARKS
          return REMARKS;
        case 8: // FT_AMT
          return FT_AMT;
        case 9: // FT_TYPE
          return FT_TYPE;
        case 10: // FT_DATE
          return FT_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INITIALAMT_ISSET_ID = 0;
  private static final int __INCOMEACCOUNT_ISSET_ID = 1;
  private static final int __ACCOUNTOUT_ISSET_ID = 2;
  private static final int __GAPAMT_ISSET_ID = 3;
  private static final int __TERMINALBALANCE_ISSET_ID = 4;
  private static final int __FTAMT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INITIAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("initialAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCOME_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("incomeAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCOUNT_OUT, new org.apache.thrift.meta_data.FieldMetaData("accountOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GAP_AMT, new org.apache.thrift.meta_data.FieldMetaData("gapAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TERMINAL_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("terminalBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARKS, new org.apache.thrift.meta_data.FieldMetaData("remarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_AMT, new org.apache.thrift.meta_data.FieldMetaData("ftAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_DATE, new org.apache.thrift.meta_data.FieldMetaData("ftDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceAcctTotalDetailView.class, metaDataMap);
  }

  public FinanceAcctTotalDetailView() {
  }

  public FinanceAcctTotalDetailView(
    String pid,
    double initialAmt,
    double incomeAccount,
    double accountOut,
    double gapAmt,
    double terminalBalance,
    String remarks,
    double ftAmt,
    String ftType,
    String ftDate)
  {
    this();
    this.pid = pid;
    this.initialAmt = initialAmt;
    setInitialAmtIsSet(true);
    this.incomeAccount = incomeAccount;
    setIncomeAccountIsSet(true);
    this.accountOut = accountOut;
    setAccountOutIsSet(true);
    this.gapAmt = gapAmt;
    setGapAmtIsSet(true);
    this.terminalBalance = terminalBalance;
    setTerminalBalanceIsSet(true);
    this.remarks = remarks;
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    this.ftType = ftType;
    this.ftDate = ftDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceAcctTotalDetailView(FinanceAcctTotalDetailView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPid()) {
      this.pid = other.pid;
    }
    this.initialAmt = other.initialAmt;
    this.incomeAccount = other.incomeAccount;
    this.accountOut = other.accountOut;
    this.gapAmt = other.gapAmt;
    this.terminalBalance = other.terminalBalance;
    if (other.isSetRemarks()) {
      this.remarks = other.remarks;
    }
    this.ftAmt = other.ftAmt;
    if (other.isSetFtType()) {
      this.ftType = other.ftType;
    }
    if (other.isSetFtDate()) {
      this.ftDate = other.ftDate;
    }
  }

  public FinanceAcctTotalDetailView deepCopy() {
    return new FinanceAcctTotalDetailView(this);
  }

  @Override
  public void clear() {
    this.pid = null;
    setInitialAmtIsSet(false);
    this.initialAmt = 0.0;
    setIncomeAccountIsSet(false);
    this.incomeAccount = 0.0;
    setAccountOutIsSet(false);
    this.accountOut = 0.0;
    setGapAmtIsSet(false);
    this.gapAmt = 0.0;
    setTerminalBalanceIsSet(false);
    this.terminalBalance = 0.0;
    this.remarks = null;
    setFtAmtIsSet(false);
    this.ftAmt = 0.0;
    this.ftType = null;
    this.ftDate = null;
  }

  public String getPid() {
    return this.pid;
  }

  public FinanceAcctTotalDetailView setPid(String pid) {
    this.pid = pid;
    return this;
  }

  public void unsetPid() {
    this.pid = null;
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return this.pid != null;
  }

  public void setPidIsSet(boolean value) {
    if (!value) {
      this.pid = null;
    }
  }

  public double getInitialAmt() {
    return this.initialAmt;
  }

  public FinanceAcctTotalDetailView setInitialAmt(double initialAmt) {
    this.initialAmt = initialAmt;
    setInitialAmtIsSet(true);
    return this;
  }

  public void unsetInitialAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIALAMT_ISSET_ID);
  }

  /** Returns true if field initialAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIALAMT_ISSET_ID);
  }

  public void setInitialAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIALAMT_ISSET_ID, value);
  }

  public double getIncomeAccount() {
    return this.incomeAccount;
  }

  public FinanceAcctTotalDetailView setIncomeAccount(double incomeAccount) {
    this.incomeAccount = incomeAccount;
    setIncomeAccountIsSet(true);
    return this;
  }

  public void unsetIncomeAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCOMEACCOUNT_ISSET_ID);
  }

  /** Returns true if field incomeAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __INCOMEACCOUNT_ISSET_ID);
  }

  public void setIncomeAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCOMEACCOUNT_ISSET_ID, value);
  }

  public double getAccountOut() {
    return this.accountOut;
  }

  public FinanceAcctTotalDetailView setAccountOut(double accountOut) {
    this.accountOut = accountOut;
    setAccountOutIsSet(true);
    return this;
  }

  public void unsetAccountOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTOUT_ISSET_ID);
  }

  /** Returns true if field accountOut is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountOut() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTOUT_ISSET_ID);
  }

  public void setAccountOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTOUT_ISSET_ID, value);
  }

  public double getGapAmt() {
    return this.gapAmt;
  }

  public FinanceAcctTotalDetailView setGapAmt(double gapAmt) {
    this.gapAmt = gapAmt;
    setGapAmtIsSet(true);
    return this;
  }

  public void unsetGapAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAPAMT_ISSET_ID);
  }

  /** Returns true if field gapAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetGapAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __GAPAMT_ISSET_ID);
  }

  public void setGapAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAPAMT_ISSET_ID, value);
  }

  public double getTerminalBalance() {
    return this.terminalBalance;
  }

  public FinanceAcctTotalDetailView setTerminalBalance(double terminalBalance) {
    this.terminalBalance = terminalBalance;
    setTerminalBalanceIsSet(true);
    return this;
  }

  public void unsetTerminalBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TERMINALBALANCE_ISSET_ID);
  }

  /** Returns true if field terminalBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetTerminalBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __TERMINALBALANCE_ISSET_ID);
  }

  public void setTerminalBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TERMINALBALANCE_ISSET_ID, value);
  }

  public String getRemarks() {
    return this.remarks;
  }

  public FinanceAcctTotalDetailView setRemarks(String remarks) {
    this.remarks = remarks;
    return this;
  }

  public void unsetRemarks() {
    this.remarks = null;
  }

  /** Returns true if field remarks is set (has been assigned a value) and false otherwise */
  public boolean isSetRemarks() {
    return this.remarks != null;
  }

  public void setRemarksIsSet(boolean value) {
    if (!value) {
      this.remarks = null;
    }
  }

  public double getFtAmt() {
    return this.ftAmt;
  }

  public FinanceAcctTotalDetailView setFtAmt(double ftAmt) {
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    return this;
  }

  public void unsetFtAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  /** Returns true if field ftAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  public void setFtAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTAMT_ISSET_ID, value);
  }

  public String getFtType() {
    return this.ftType;
  }

  public FinanceAcctTotalDetailView setFtType(String ftType) {
    this.ftType = ftType;
    return this;
  }

  public void unsetFtType() {
    this.ftType = null;
  }

  /** Returns true if field ftType is set (has been assigned a value) and false otherwise */
  public boolean isSetFtType() {
    return this.ftType != null;
  }

  public void setFtTypeIsSet(boolean value) {
    if (!value) {
      this.ftType = null;
    }
  }

  public String getFtDate() {
    return this.ftDate;
  }

  public FinanceAcctTotalDetailView setFtDate(String ftDate) {
    this.ftDate = ftDate;
    return this;
  }

  public void unsetFtDate() {
    this.ftDate = null;
  }

  /** Returns true if field ftDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFtDate() {
    return this.ftDate != null;
  }

  public void setFtDateIsSet(boolean value) {
    if (!value) {
      this.ftDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((String)value);
      }
      break;

    case INITIAL_AMT:
      if (value == null) {
        unsetInitialAmt();
      } else {
        setInitialAmt((Double)value);
      }
      break;

    case INCOME_ACCOUNT:
      if (value == null) {
        unsetIncomeAccount();
      } else {
        setIncomeAccount((Double)value);
      }
      break;

    case ACCOUNT_OUT:
      if (value == null) {
        unsetAccountOut();
      } else {
        setAccountOut((Double)value);
      }
      break;

    case GAP_AMT:
      if (value == null) {
        unsetGapAmt();
      } else {
        setGapAmt((Double)value);
      }
      break;

    case TERMINAL_BALANCE:
      if (value == null) {
        unsetTerminalBalance();
      } else {
        setTerminalBalance((Double)value);
      }
      break;

    case REMARKS:
      if (value == null) {
        unsetRemarks();
      } else {
        setRemarks((String)value);
      }
      break;

    case FT_AMT:
      if (value == null) {
        unsetFtAmt();
      } else {
        setFtAmt((Double)value);
      }
      break;

    case FT_TYPE:
      if (value == null) {
        unsetFtType();
      } else {
        setFtType((String)value);
      }
      break;

    case FT_DATE:
      if (value == null) {
        unsetFtDate();
      } else {
        setFtDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return getPid();

    case INITIAL_AMT:
      return Double.valueOf(getInitialAmt());

    case INCOME_ACCOUNT:
      return Double.valueOf(getIncomeAccount());

    case ACCOUNT_OUT:
      return Double.valueOf(getAccountOut());

    case GAP_AMT:
      return Double.valueOf(getGapAmt());

    case TERMINAL_BALANCE:
      return Double.valueOf(getTerminalBalance());

    case REMARKS:
      return getRemarks();

    case FT_AMT:
      return Double.valueOf(getFtAmt());

    case FT_TYPE:
      return getFtType();

    case FT_DATE:
      return getFtDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case INITIAL_AMT:
      return isSetInitialAmt();
    case INCOME_ACCOUNT:
      return isSetIncomeAccount();
    case ACCOUNT_OUT:
      return isSetAccountOut();
    case GAP_AMT:
      return isSetGapAmt();
    case TERMINAL_BALANCE:
      return isSetTerminalBalance();
    case REMARKS:
      return isSetRemarks();
    case FT_AMT:
      return isSetFtAmt();
    case FT_TYPE:
      return isSetFtType();
    case FT_DATE:
      return isSetFtDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceAcctTotalDetailView)
      return this.equals((FinanceAcctTotalDetailView)that);
    return false;
  }

  public boolean equals(FinanceAcctTotalDetailView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (!this.pid.equals(that.pid))
        return false;
    }

    boolean this_present_initialAmt = true;
    boolean that_present_initialAmt = true;
    if (this_present_initialAmt || that_present_initialAmt) {
      if (!(this_present_initialAmt && that_present_initialAmt))
        return false;
      if (this.initialAmt != that.initialAmt)
        return false;
    }

    boolean this_present_incomeAccount = true;
    boolean that_present_incomeAccount = true;
    if (this_present_incomeAccount || that_present_incomeAccount) {
      if (!(this_present_incomeAccount && that_present_incomeAccount))
        return false;
      if (this.incomeAccount != that.incomeAccount)
        return false;
    }

    boolean this_present_accountOut = true;
    boolean that_present_accountOut = true;
    if (this_present_accountOut || that_present_accountOut) {
      if (!(this_present_accountOut && that_present_accountOut))
        return false;
      if (this.accountOut != that.accountOut)
        return false;
    }

    boolean this_present_gapAmt = true;
    boolean that_present_gapAmt = true;
    if (this_present_gapAmt || that_present_gapAmt) {
      if (!(this_present_gapAmt && that_present_gapAmt))
        return false;
      if (this.gapAmt != that.gapAmt)
        return false;
    }

    boolean this_present_terminalBalance = true;
    boolean that_present_terminalBalance = true;
    if (this_present_terminalBalance || that_present_terminalBalance) {
      if (!(this_present_terminalBalance && that_present_terminalBalance))
        return false;
      if (this.terminalBalance != that.terminalBalance)
        return false;
    }

    boolean this_present_remarks = true && this.isSetRemarks();
    boolean that_present_remarks = true && that.isSetRemarks();
    if (this_present_remarks || that_present_remarks) {
      if (!(this_present_remarks && that_present_remarks))
        return false;
      if (!this.remarks.equals(that.remarks))
        return false;
    }

    boolean this_present_ftAmt = true;
    boolean that_present_ftAmt = true;
    if (this_present_ftAmt || that_present_ftAmt) {
      if (!(this_present_ftAmt && that_present_ftAmt))
        return false;
      if (this.ftAmt != that.ftAmt)
        return false;
    }

    boolean this_present_ftType = true && this.isSetFtType();
    boolean that_present_ftType = true && that.isSetFtType();
    if (this_present_ftType || that_present_ftType) {
      if (!(this_present_ftType && that_present_ftType))
        return false;
      if (!this.ftType.equals(that.ftType))
        return false;
    }

    boolean this_present_ftDate = true && this.isSetFtDate();
    boolean that_present_ftDate = true && that.isSetFtDate();
    if (this_present_ftDate || that_present_ftDate) {
      if (!(this_present_ftDate && that_present_ftDate))
        return false;
      if (!this.ftDate.equals(that.ftDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true && (isSetPid());
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_initialAmt = true;
    list.add(present_initialAmt);
    if (present_initialAmt)
      list.add(initialAmt);

    boolean present_incomeAccount = true;
    list.add(present_incomeAccount);
    if (present_incomeAccount)
      list.add(incomeAccount);

    boolean present_accountOut = true;
    list.add(present_accountOut);
    if (present_accountOut)
      list.add(accountOut);

    boolean present_gapAmt = true;
    list.add(present_gapAmt);
    if (present_gapAmt)
      list.add(gapAmt);

    boolean present_terminalBalance = true;
    list.add(present_terminalBalance);
    if (present_terminalBalance)
      list.add(terminalBalance);

    boolean present_remarks = true && (isSetRemarks());
    list.add(present_remarks);
    if (present_remarks)
      list.add(remarks);

    boolean present_ftAmt = true;
    list.add(present_ftAmt);
    if (present_ftAmt)
      list.add(ftAmt);

    boolean present_ftType = true && (isSetFtType());
    list.add(present_ftType);
    if (present_ftType)
      list.add(ftType);

    boolean present_ftDate = true && (isSetFtDate());
    list.add(present_ftDate);
    if (present_ftDate)
      list.add(ftDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceAcctTotalDetailView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialAmt()).compareTo(other.isSetInitialAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialAmt, other.initialAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeAccount()).compareTo(other.isSetIncomeAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeAccount, other.incomeAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountOut()).compareTo(other.isSetAccountOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountOut, other.accountOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGapAmt()).compareTo(other.isSetGapAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGapAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gapAmt, other.gapAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerminalBalance()).compareTo(other.isSetTerminalBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerminalBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terminalBalance, other.terminalBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemarks()).compareTo(other.isSetRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remarks, other.remarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtAmt()).compareTo(other.isSetFtAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftAmt, other.ftAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtType()).compareTo(other.isSetFtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftType, other.ftType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtDate()).compareTo(other.isSetFtDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftDate, other.ftDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceAcctTotalDetailView(");
    boolean first = true;

    sb.append("pid:");
    if (this.pid == null) {
      sb.append("null");
    } else {
      sb.append(this.pid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("initialAmt:");
    sb.append(this.initialAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeAccount:");
    sb.append(this.incomeAccount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountOut:");
    sb.append(this.accountOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gapAmt:");
    sb.append(this.gapAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("terminalBalance:");
    sb.append(this.terminalBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remarks:");
    if (this.remarks == null) {
      sb.append("null");
    } else {
      sb.append(this.remarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftAmt:");
    sb.append(this.ftAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftType:");
    if (this.ftType == null) {
      sb.append("null");
    } else {
      sb.append(this.ftType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftDate:");
    if (this.ftDate == null) {
      sb.append("null");
    } else {
      sb.append(this.ftDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceAcctTotalDetailViewStandardSchemeFactory implements SchemeFactory {
    public FinanceAcctTotalDetailViewStandardScheme getScheme() {
      return new FinanceAcctTotalDetailViewStandardScheme();
    }
  }

  private static class FinanceAcctTotalDetailViewStandardScheme extends StandardScheme<FinanceAcctTotalDetailView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceAcctTotalDetailView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pid = iprot.readString();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INITIAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialAmt = iprot.readDouble();
              struct.setInitialAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCOME_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.incomeAccount = iprot.readDouble();
              struct.setIncomeAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.accountOut = iprot.readDouble();
              struct.setAccountOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GAP_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.gapAmt = iprot.readDouble();
              struct.setGapAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TERMINAL_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.terminalBalance = iprot.readDouble();
              struct.setTerminalBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remarks = iprot.readString();
              struct.setRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ftAmt = iprot.readDouble();
              struct.setFtAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftType = iprot.readString();
              struct.setFtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftDate = iprot.readString();
              struct.setFtDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceAcctTotalDetailView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pid != null) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeString(struct.pid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INITIAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.initialAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCOME_ACCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.incomeAccount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_OUT_FIELD_DESC);
      oprot.writeDouble(struct.accountOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GAP_AMT_FIELD_DESC);
      oprot.writeDouble(struct.gapAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TERMINAL_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.terminalBalance);
      oprot.writeFieldEnd();
      if (struct.remarks != null) {
        oprot.writeFieldBegin(REMARKS_FIELD_DESC);
        oprot.writeString(struct.remarks);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.ftAmt);
      oprot.writeFieldEnd();
      if (struct.ftType != null) {
        oprot.writeFieldBegin(FT_TYPE_FIELD_DESC);
        oprot.writeString(struct.ftType);
        oprot.writeFieldEnd();
      }
      if (struct.ftDate != null) {
        oprot.writeFieldBegin(FT_DATE_FIELD_DESC);
        oprot.writeString(struct.ftDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceAcctTotalDetailViewTupleSchemeFactory implements SchemeFactory {
    public FinanceAcctTotalDetailViewTupleScheme getScheme() {
      return new FinanceAcctTotalDetailViewTupleScheme();
    }
  }

  private static class FinanceAcctTotalDetailViewTupleScheme extends TupleScheme<FinanceAcctTotalDetailView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceAcctTotalDetailView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetInitialAmt()) {
        optionals.set(1);
      }
      if (struct.isSetIncomeAccount()) {
        optionals.set(2);
      }
      if (struct.isSetAccountOut()) {
        optionals.set(3);
      }
      if (struct.isSetGapAmt()) {
        optionals.set(4);
      }
      if (struct.isSetTerminalBalance()) {
        optionals.set(5);
      }
      if (struct.isSetRemarks()) {
        optionals.set(6);
      }
      if (struct.isSetFtAmt()) {
        optionals.set(7);
      }
      if (struct.isSetFtType()) {
        optionals.set(8);
      }
      if (struct.isSetFtDate()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeString(struct.pid);
      }
      if (struct.isSetInitialAmt()) {
        oprot.writeDouble(struct.initialAmt);
      }
      if (struct.isSetIncomeAccount()) {
        oprot.writeDouble(struct.incomeAccount);
      }
      if (struct.isSetAccountOut()) {
        oprot.writeDouble(struct.accountOut);
      }
      if (struct.isSetGapAmt()) {
        oprot.writeDouble(struct.gapAmt);
      }
      if (struct.isSetTerminalBalance()) {
        oprot.writeDouble(struct.terminalBalance);
      }
      if (struct.isSetRemarks()) {
        oprot.writeString(struct.remarks);
      }
      if (struct.isSetFtAmt()) {
        oprot.writeDouble(struct.ftAmt);
      }
      if (struct.isSetFtType()) {
        oprot.writeString(struct.ftType);
      }
      if (struct.isSetFtDate()) {
        oprot.writeString(struct.ftDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceAcctTotalDetailView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readString();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.initialAmt = iprot.readDouble();
        struct.setInitialAmtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.incomeAccount = iprot.readDouble();
        struct.setIncomeAccountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accountOut = iprot.readDouble();
        struct.setAccountOutIsSet(true);
      }
      if (incoming.get(4)) {
        struct.gapAmt = iprot.readDouble();
        struct.setGapAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.terminalBalance = iprot.readDouble();
        struct.setTerminalBalanceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remarks = iprot.readString();
        struct.setRemarksIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ftAmt = iprot.readDouble();
        struct.setFtAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ftType = iprot.readString();
        struct.setFtTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ftDate = iprot.readString();
        struct.setFtDateIsSet(true);
      }
    }
  }

}


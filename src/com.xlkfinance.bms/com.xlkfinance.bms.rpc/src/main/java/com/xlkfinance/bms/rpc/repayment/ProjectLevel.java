/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class ProjectLevel implements org.apache.thrift.TBase<ProjectLevel, ProjectLevel._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectLevel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectLevel");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("projectLevel", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROCESS_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processUserId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDttm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField GUARANTEE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteeType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OVERDUENUM_FIELD_DESC = new org.apache.thrift.protocol.TField("overduenum", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PROJECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNum", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_END_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttmEnd", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectLevelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectLevelTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int projectLevel; // required
  public int processUserId; // required
  public String updateDttm; // required
  public int status; // required
  public String projectName; // required
  public String projectNumber; // required
  public String cusType; // required
  public String guaranteeType; // required
  public String requestDttm; // required
  public int overduenum; // required
  public int rows; // required
  public int page; // required
  public String projectNum; // required
  public String cusName; // required
  public String requestDttmEnd; // required
  public String ecoTrade; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_LEVEL((short)3, "projectLevel"),
    PROCESS_USER_ID((short)4, "processUserId"),
    UPDATE_DTTM((short)5, "updateDttm"),
    STATUS((short)6, "status"),
    PROJECT_NAME((short)7, "projectName"),
    PROJECT_NUMBER((short)8, "projectNumber"),
    CUS_TYPE((short)9, "cusType"),
    GUARANTEE_TYPE((short)10, "guaranteeType"),
    REQUEST_DTTM((short)11, "requestDttm"),
    OVERDUENUM((short)12, "overduenum"),
    ROWS((short)13, "rows"),
    PAGE((short)14, "page"),
    PROJECT_NUM((short)15, "projectNum"),
    CUS_NAME((short)16, "cusName"),
    REQUEST_DTTM_END((short)17, "requestDttmEnd"),
    ECO_TRADE((short)18, "ecoTrade");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_LEVEL
          return PROJECT_LEVEL;
        case 4: // PROCESS_USER_ID
          return PROCESS_USER_ID;
        case 5: // UPDATE_DTTM
          return UPDATE_DTTM;
        case 6: // STATUS
          return STATUS;
        case 7: // PROJECT_NAME
          return PROJECT_NAME;
        case 8: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 9: // CUS_TYPE
          return CUS_TYPE;
        case 10: // GUARANTEE_TYPE
          return GUARANTEE_TYPE;
        case 11: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 12: // OVERDUENUM
          return OVERDUENUM;
        case 13: // ROWS
          return ROWS;
        case 14: // PAGE
          return PAGE;
        case 15: // PROJECT_NUM
          return PROJECT_NUM;
        case 16: // CUS_NAME
          return CUS_NAME;
        case 17: // REQUEST_DTTM_END
          return REQUEST_DTTM_END;
        case 18: // ECO_TRADE
          return ECO_TRADE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __PROJECTLEVEL_ISSET_ID = 2;
  private static final int __PROCESSUSERID_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __OVERDUENUM_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("projectLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESS_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("processUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("updateDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUARANTEE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("guaranteeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUENUM, new org.apache.thrift.meta_data.FieldMetaData("overduenum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("projectNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM_END, new org.apache.thrift.meta_data.FieldMetaData("requestDttmEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectLevel.class, metaDataMap);
  }

  public ProjectLevel() {
  }

  public ProjectLevel(
    int pid,
    int projectId,
    int projectLevel,
    int processUserId,
    String updateDttm,
    int status,
    String projectName,
    String projectNumber,
    String cusType,
    String guaranteeType,
    String requestDttm,
    int overduenum,
    int rows,
    int page,
    String projectNum,
    String cusName,
    String requestDttmEnd,
    String ecoTrade)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectLevel = projectLevel;
    setProjectLevelIsSet(true);
    this.processUserId = processUserId;
    setProcessUserIdIsSet(true);
    this.updateDttm = updateDttm;
    this.status = status;
    setStatusIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.cusType = cusType;
    this.guaranteeType = guaranteeType;
    this.requestDttm = requestDttm;
    this.overduenum = overduenum;
    setOverduenumIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.projectNum = projectNum;
    this.cusName = cusName;
    this.requestDttmEnd = requestDttmEnd;
    this.ecoTrade = ecoTrade;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectLevel(ProjectLevel other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.projectLevel = other.projectLevel;
    this.processUserId = other.processUserId;
    if (other.isSetUpdateDttm()) {
      this.updateDttm = other.updateDttm;
    }
    this.status = other.status;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetCusType()) {
      this.cusType = other.cusType;
    }
    if (other.isSetGuaranteeType()) {
      this.guaranteeType = other.guaranteeType;
    }
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    this.overduenum = other.overduenum;
    this.rows = other.rows;
    this.page = other.page;
    if (other.isSetProjectNum()) {
      this.projectNum = other.projectNum;
    }
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    if (other.isSetRequestDttmEnd()) {
      this.requestDttmEnd = other.requestDttmEnd;
    }
    if (other.isSetEcoTrade()) {
      this.ecoTrade = other.ecoTrade;
    }
  }

  public ProjectLevel deepCopy() {
    return new ProjectLevel(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setProjectLevelIsSet(false);
    this.projectLevel = 0;
    setProcessUserIdIsSet(false);
    this.processUserId = 0;
    this.updateDttm = null;
    setStatusIsSet(false);
    this.status = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.cusType = null;
    this.guaranteeType = null;
    this.requestDttm = null;
    setOverduenumIsSet(false);
    this.overduenum = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    this.projectNum = null;
    this.cusName = null;
    this.requestDttmEnd = null;
    this.ecoTrade = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectLevel setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectLevel setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getProjectLevel() {
    return this.projectLevel;
  }

  public ProjectLevel setProjectLevel(int projectLevel) {
    this.projectLevel = projectLevel;
    setProjectLevelIsSet(true);
    return this;
  }

  public void unsetProjectLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTLEVEL_ISSET_ID);
  }

  /** Returns true if field projectLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTLEVEL_ISSET_ID);
  }

  public void setProjectLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTLEVEL_ISSET_ID, value);
  }

  public int getProcessUserId() {
    return this.processUserId;
  }

  public ProjectLevel setProcessUserId(int processUserId) {
    this.processUserId = processUserId;
    setProcessUserIdIsSet(true);
    return this;
  }

  public void unsetProcessUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESSUSERID_ISSET_ID);
  }

  /** Returns true if field processUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESSUSERID_ISSET_ID);
  }

  public void setProcessUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESSUSERID_ISSET_ID, value);
  }

  public String getUpdateDttm() {
    return this.updateDttm;
  }

  public ProjectLevel setUpdateDttm(String updateDttm) {
    this.updateDttm = updateDttm;
    return this;
  }

  public void unsetUpdateDttm() {
    this.updateDttm = null;
  }

  /** Returns true if field updateDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDttm() {
    return this.updateDttm != null;
  }

  public void setUpdateDttmIsSet(boolean value) {
    if (!value) {
      this.updateDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectLevel setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ProjectLevel setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ProjectLevel setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getCusType() {
    return this.cusType;
  }

  public ProjectLevel setCusType(String cusType) {
    this.cusType = cusType;
    return this;
  }

  public void unsetCusType() {
    this.cusType = null;
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return this.cusType != null;
  }

  public void setCusTypeIsSet(boolean value) {
    if (!value) {
      this.cusType = null;
    }
  }

  public String getGuaranteeType() {
    return this.guaranteeType;
  }

  public ProjectLevel setGuaranteeType(String guaranteeType) {
    this.guaranteeType = guaranteeType;
    return this;
  }

  public void unsetGuaranteeType() {
    this.guaranteeType = null;
  }

  /** Returns true if field guaranteeType is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteeType() {
    return this.guaranteeType != null;
  }

  public void setGuaranteeTypeIsSet(boolean value) {
    if (!value) {
      this.guaranteeType = null;
    }
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public ProjectLevel setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public int getOverduenum() {
    return this.overduenum;
  }

  public ProjectLevel setOverduenum(int overduenum) {
    this.overduenum = overduenum;
    setOverduenumIsSet(true);
    return this;
  }

  public void unsetOverduenum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUENUM_ISSET_ID);
  }

  /** Returns true if field overduenum is set (has been assigned a value) and false otherwise */
  public boolean isSetOverduenum() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUENUM_ISSET_ID);
  }

  public void setOverduenumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUENUM_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ProjectLevel setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public ProjectLevel setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public String getProjectNum() {
    return this.projectNum;
  }

  public ProjectLevel setProjectNum(String projectNum) {
    this.projectNum = projectNum;
    return this;
  }

  public void unsetProjectNum() {
    this.projectNum = null;
  }

  /** Returns true if field projectNum is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNum() {
    return this.projectNum != null;
  }

  public void setProjectNumIsSet(boolean value) {
    if (!value) {
      this.projectNum = null;
    }
  }

  public String getCusName() {
    return this.cusName;
  }

  public ProjectLevel setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public String getRequestDttmEnd() {
    return this.requestDttmEnd;
  }

  public ProjectLevel setRequestDttmEnd(String requestDttmEnd) {
    this.requestDttmEnd = requestDttmEnd;
    return this;
  }

  public void unsetRequestDttmEnd() {
    this.requestDttmEnd = null;
  }

  /** Returns true if field requestDttmEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttmEnd() {
    return this.requestDttmEnd != null;
  }

  public void setRequestDttmEndIsSet(boolean value) {
    if (!value) {
      this.requestDttmEnd = null;
    }
  }

  public String getEcoTrade() {
    return this.ecoTrade;
  }

  public ProjectLevel setEcoTrade(String ecoTrade) {
    this.ecoTrade = ecoTrade;
    return this;
  }

  public void unsetEcoTrade() {
    this.ecoTrade = null;
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return this.ecoTrade != null;
  }

  public void setEcoTradeIsSet(boolean value) {
    if (!value) {
      this.ecoTrade = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_LEVEL:
      if (value == null) {
        unsetProjectLevel();
      } else {
        setProjectLevel((Integer)value);
      }
      break;

    case PROCESS_USER_ID:
      if (value == null) {
        unsetProcessUserId();
      } else {
        setProcessUserId((Integer)value);
      }
      break;

    case UPDATE_DTTM:
      if (value == null) {
        unsetUpdateDttm();
      } else {
        setUpdateDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((String)value);
      }
      break;

    case GUARANTEE_TYPE:
      if (value == null) {
        unsetGuaranteeType();
      } else {
        setGuaranteeType((String)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case OVERDUENUM:
      if (value == null) {
        unsetOverduenum();
      } else {
        setOverduenum((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PROJECT_NUM:
      if (value == null) {
        unsetProjectNum();
      } else {
        setProjectNum((String)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case REQUEST_DTTM_END:
      if (value == null) {
        unsetRequestDttmEnd();
      } else {
        setRequestDttmEnd((String)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_LEVEL:
      return Integer.valueOf(getProjectLevel());

    case PROCESS_USER_ID:
      return Integer.valueOf(getProcessUserId());

    case UPDATE_DTTM:
      return getUpdateDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case CUS_TYPE:
      return getCusType();

    case GUARANTEE_TYPE:
      return getGuaranteeType();

    case REQUEST_DTTM:
      return getRequestDttm();

    case OVERDUENUM:
      return Integer.valueOf(getOverduenum());

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case PROJECT_NUM:
      return getProjectNum();

    case CUS_NAME:
      return getCusName();

    case REQUEST_DTTM_END:
      return getRequestDttmEnd();

    case ECO_TRADE:
      return getEcoTrade();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_LEVEL:
      return isSetProjectLevel();
    case PROCESS_USER_ID:
      return isSetProcessUserId();
    case UPDATE_DTTM:
      return isSetUpdateDttm();
    case STATUS:
      return isSetStatus();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case CUS_TYPE:
      return isSetCusType();
    case GUARANTEE_TYPE:
      return isSetGuaranteeType();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case OVERDUENUM:
      return isSetOverduenum();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case PROJECT_NUM:
      return isSetProjectNum();
    case CUS_NAME:
      return isSetCusName();
    case REQUEST_DTTM_END:
      return isSetRequestDttmEnd();
    case ECO_TRADE:
      return isSetEcoTrade();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectLevel)
      return this.equals((ProjectLevel)that);
    return false;
  }

  public boolean equals(ProjectLevel that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectLevel = true;
    boolean that_present_projectLevel = true;
    if (this_present_projectLevel || that_present_projectLevel) {
      if (!(this_present_projectLevel && that_present_projectLevel))
        return false;
      if (this.projectLevel != that.projectLevel)
        return false;
    }

    boolean this_present_processUserId = true;
    boolean that_present_processUserId = true;
    if (this_present_processUserId || that_present_processUserId) {
      if (!(this_present_processUserId && that_present_processUserId))
        return false;
      if (this.processUserId != that.processUserId)
        return false;
    }

    boolean this_present_updateDttm = true && this.isSetUpdateDttm();
    boolean that_present_updateDttm = true && that.isSetUpdateDttm();
    if (this_present_updateDttm || that_present_updateDttm) {
      if (!(this_present_updateDttm && that_present_updateDttm))
        return false;
      if (!this.updateDttm.equals(that.updateDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_cusType = true && this.isSetCusType();
    boolean that_present_cusType = true && that.isSetCusType();
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (!this.cusType.equals(that.cusType))
        return false;
    }

    boolean this_present_guaranteeType = true && this.isSetGuaranteeType();
    boolean that_present_guaranteeType = true && that.isSetGuaranteeType();
    if (this_present_guaranteeType || that_present_guaranteeType) {
      if (!(this_present_guaranteeType && that_present_guaranteeType))
        return false;
      if (!this.guaranteeType.equals(that.guaranteeType))
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_overduenum = true;
    boolean that_present_overduenum = true;
    if (this_present_overduenum || that_present_overduenum) {
      if (!(this_present_overduenum && that_present_overduenum))
        return false;
      if (this.overduenum != that.overduenum)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_projectNum = true && this.isSetProjectNum();
    boolean that_present_projectNum = true && that.isSetProjectNum();
    if (this_present_projectNum || that_present_projectNum) {
      if (!(this_present_projectNum && that_present_projectNum))
        return false;
      if (!this.projectNum.equals(that.projectNum))
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_requestDttmEnd = true && this.isSetRequestDttmEnd();
    boolean that_present_requestDttmEnd = true && that.isSetRequestDttmEnd();
    if (this_present_requestDttmEnd || that_present_requestDttmEnd) {
      if (!(this_present_requestDttmEnd && that_present_requestDttmEnd))
        return false;
      if (!this.requestDttmEnd.equals(that.requestDttmEnd))
        return false;
    }

    boolean this_present_ecoTrade = true && this.isSetEcoTrade();
    boolean that_present_ecoTrade = true && that.isSetEcoTrade();
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (!this.ecoTrade.equals(that.ecoTrade))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectLevel = true;
    list.add(present_projectLevel);
    if (present_projectLevel)
      list.add(projectLevel);

    boolean present_processUserId = true;
    list.add(present_processUserId);
    if (present_processUserId)
      list.add(processUserId);

    boolean present_updateDttm = true && (isSetUpdateDttm());
    list.add(present_updateDttm);
    if (present_updateDttm)
      list.add(updateDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_cusType = true && (isSetCusType());
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_guaranteeType = true && (isSetGuaranteeType());
    list.add(present_guaranteeType);
    if (present_guaranteeType)
      list.add(guaranteeType);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_overduenum = true;
    list.add(present_overduenum);
    if (present_overduenum)
      list.add(overduenum);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_projectNum = true && (isSetProjectNum());
    list.add(present_projectNum);
    if (present_projectNum)
      list.add(projectNum);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_requestDttmEnd = true && (isSetRequestDttmEnd());
    list.add(present_requestDttmEnd);
    if (present_requestDttmEnd)
      list.add(requestDttmEnd);

    boolean present_ecoTrade = true && (isSetEcoTrade());
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectLevel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectLevel()).compareTo(other.isSetProjectLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectLevel, other.projectLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessUserId()).compareTo(other.isSetProcessUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processUserId, other.processUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDttm()).compareTo(other.isSetUpdateDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDttm, other.updateDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteeType()).compareTo(other.isSetGuaranteeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteeType, other.guaranteeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverduenum()).compareTo(other.isSetOverduenum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverduenum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overduenum, other.overduenum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNum()).compareTo(other.isSetProjectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNum, other.projectNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttmEnd()).compareTo(other.isSetRequestDttmEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttmEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttmEnd, other.requestDttmEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectLevel(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectLevel:");
    sb.append(this.projectLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processUserId:");
    sb.append(this.processUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDttm:");
    if (this.updateDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    if (this.cusType == null) {
      sb.append("null");
    } else {
      sb.append(this.cusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteeType:");
    if (this.guaranteeType == null) {
      sb.append("null");
    } else {
      sb.append(this.guaranteeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overduenum:");
    sb.append(this.overduenum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNum:");
    if (this.projectNum == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttmEnd:");
    if (this.requestDttmEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttmEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    if (this.ecoTrade == null) {
      sb.append("null");
    } else {
      sb.append(this.ecoTrade);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectLevelStandardSchemeFactory implements SchemeFactory {
    public ProjectLevelStandardScheme getScheme() {
      return new ProjectLevelStandardScheme();
    }
  }

  private static class ProjectLevelStandardScheme extends StandardScheme<ProjectLevel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectLevel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectLevel = iprot.readI32();
              struct.setProjectLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROCESS_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.processUserId = iprot.readI32();
              struct.setProcessUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDttm = iprot.readString();
              struct.setUpdateDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusType = iprot.readString();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GUARANTEE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guaranteeType = iprot.readString();
              struct.setGuaranteeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OVERDUENUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overduenum = iprot.readI32();
              struct.setOverduenumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROJECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNum = iprot.readString();
              struct.setProjectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REQUEST_DTTM_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttmEnd = iprot.readString();
              struct.setRequestDttmEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecoTrade = iprot.readString();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectLevel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.projectLevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROCESS_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.processUserId);
      oprot.writeFieldEnd();
      if (struct.updateDttm != null) {
        oprot.writeFieldBegin(UPDATE_DTTM_FIELD_DESC);
        oprot.writeString(struct.updateDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.cusType != null) {
        oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
        oprot.writeString(struct.cusType);
        oprot.writeFieldEnd();
      }
      if (struct.guaranteeType != null) {
        oprot.writeFieldBegin(GUARANTEE_TYPE_FIELD_DESC);
        oprot.writeString(struct.guaranteeType);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUENUM_FIELD_DESC);
      oprot.writeI32(struct.overduenum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      if (struct.projectNum != null) {
        oprot.writeFieldBegin(PROJECT_NUM_FIELD_DESC);
        oprot.writeString(struct.projectNum);
        oprot.writeFieldEnd();
      }
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttmEnd != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_END_FIELD_DESC);
        oprot.writeString(struct.requestDttmEnd);
        oprot.writeFieldEnd();
      }
      if (struct.ecoTrade != null) {
        oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
        oprot.writeString(struct.ecoTrade);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectLevelTupleSchemeFactory implements SchemeFactory {
    public ProjectLevelTupleScheme getScheme() {
      return new ProjectLevelTupleScheme();
    }
  }

  private static class ProjectLevelTupleScheme extends TupleScheme<ProjectLevel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectLevel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectLevel()) {
        optionals.set(2);
      }
      if (struct.isSetProcessUserId()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateDttm()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetProjectName()) {
        optionals.set(6);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(7);
      }
      if (struct.isSetCusType()) {
        optionals.set(8);
      }
      if (struct.isSetGuaranteeType()) {
        optionals.set(9);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(10);
      }
      if (struct.isSetOverduenum()) {
        optionals.set(11);
      }
      if (struct.isSetRows()) {
        optionals.set(12);
      }
      if (struct.isSetPage()) {
        optionals.set(13);
      }
      if (struct.isSetProjectNum()) {
        optionals.set(14);
      }
      if (struct.isSetCusName()) {
        optionals.set(15);
      }
      if (struct.isSetRequestDttmEnd()) {
        optionals.set(16);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectLevel()) {
        oprot.writeI32(struct.projectLevel);
      }
      if (struct.isSetProcessUserId()) {
        oprot.writeI32(struct.processUserId);
      }
      if (struct.isSetUpdateDttm()) {
        oprot.writeString(struct.updateDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetCusType()) {
        oprot.writeString(struct.cusType);
      }
      if (struct.isSetGuaranteeType()) {
        oprot.writeString(struct.guaranteeType);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetOverduenum()) {
        oprot.writeI32(struct.overduenum);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetProjectNum()) {
        oprot.writeString(struct.projectNum);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetRequestDttmEnd()) {
        oprot.writeString(struct.requestDttmEnd);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeString(struct.ecoTrade);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectLevel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectLevel = iprot.readI32();
        struct.setProjectLevelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.processUserId = iprot.readI32();
        struct.setProcessUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateDttm = iprot.readString();
        struct.setUpdateDttmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cusType = iprot.readString();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.guaranteeType = iprot.readString();
        struct.setGuaranteeTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(11)) {
        struct.overduenum = iprot.readI32();
        struct.setOverduenumIsSet(true);
      }
      if (incoming.get(12)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.projectNum = iprot.readString();
        struct.setProjectNumIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.requestDttmEnd = iprot.readString();
        struct.setRequestDttmEndIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ecoTrade = iprot.readString();
        struct.setEcoTradeIsSet(true);
      }
    }
  }

}


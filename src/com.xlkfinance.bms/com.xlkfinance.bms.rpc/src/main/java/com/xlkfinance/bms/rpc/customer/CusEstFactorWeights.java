/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusEstFactorWeights implements org.apache.thrift.TBase<CusEstFactorWeights, CusEstFactorWeights._Fields>, java.io.Serializable, Cloneable, Comparable<CusEstFactorWeights> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusEstFactorWeights");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_EST_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusEstTemplate", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FACTOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("factorName", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QUOTAS_FIELD_DESC = new org.apache.thrift.protocol.TField("quotas", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fname", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusEstFactorWeightsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusEstFactorWeightsTupleSchemeFactory());
  }

  public int pid; // required
  public CusEstTemplate cusEstTemplate; // required
  public int factorName; // required
  public double weight; // required
  public String remark; // required
  public int status; // required
  public List<CusEstQuota> quotas; // required
  public String fname; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_EST_TEMPLATE((short)2, "cusEstTemplate"),
    FACTOR_NAME((short)3, "factorName"),
    WEIGHT((short)4, "weight"),
    REMARK((short)5, "remark"),
    STATUS((short)6, "status"),
    QUOTAS((short)7, "quotas"),
    FNAME((short)8, "fname");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_EST_TEMPLATE
          return CUS_EST_TEMPLATE;
        case 3: // FACTOR_NAME
          return FACTOR_NAME;
        case 4: // WEIGHT
          return WEIGHT;
        case 5: // REMARK
          return REMARK;
        case 6: // STATUS
          return STATUS;
        case 7: // QUOTAS
          return QUOTAS;
        case 8: // FNAME
          return FNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __FACTORNAME_ISSET_ID = 1;
  private static final int __WEIGHT_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_EST_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("cusEstTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusEstTemplate.class)));
    tmpMap.put(_Fields.FACTOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("factorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUOTAS, new org.apache.thrift.meta_data.FieldMetaData("quotas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "CusEstQuota"))));
    tmpMap.put(_Fields.FNAME, new org.apache.thrift.meta_data.FieldMetaData("fname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusEstFactorWeights.class, metaDataMap);
  }

  public CusEstFactorWeights() {
  }

  public CusEstFactorWeights(
    int pid,
    CusEstTemplate cusEstTemplate,
    int factorName,
    double weight,
    String remark,
    int status,
    List<CusEstQuota> quotas,
    String fname)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusEstTemplate = cusEstTemplate;
    this.factorName = factorName;
    setFactorNameIsSet(true);
    this.weight = weight;
    setWeightIsSet(true);
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.quotas = quotas;
    this.fname = fname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusEstFactorWeights(CusEstFactorWeights other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusEstTemplate()) {
      this.cusEstTemplate = new CusEstTemplate(other.cusEstTemplate);
    }
    this.factorName = other.factorName;
    this.weight = other.weight;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetQuotas()) {
      List<CusEstQuota> __this__quotas = new ArrayList<CusEstQuota>(other.quotas.size());
      for (CusEstQuota other_element : other.quotas) {
        __this__quotas.add(other_element);
      }
      this.quotas = __this__quotas;
    }
    if (other.isSetFname()) {
      this.fname = other.fname;
    }
  }

  public CusEstFactorWeights deepCopy() {
    return new CusEstFactorWeights(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusEstTemplate = null;
    setFactorNameIsSet(false);
    this.factorName = 0;
    setWeightIsSet(false);
    this.weight = 0.0;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.quotas = null;
    this.fname = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusEstFactorWeights setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusEstTemplate getCusEstTemplate() {
    return this.cusEstTemplate;
  }

  public CusEstFactorWeights setCusEstTemplate(CusEstTemplate cusEstTemplate) {
    this.cusEstTemplate = cusEstTemplate;
    return this;
  }

  public void unsetCusEstTemplate() {
    this.cusEstTemplate = null;
  }

  /** Returns true if field cusEstTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetCusEstTemplate() {
    return this.cusEstTemplate != null;
  }

  public void setCusEstTemplateIsSet(boolean value) {
    if (!value) {
      this.cusEstTemplate = null;
    }
  }

  public int getFactorName() {
    return this.factorName;
  }

  public CusEstFactorWeights setFactorName(int factorName) {
    this.factorName = factorName;
    setFactorNameIsSet(true);
    return this;
  }

  public void unsetFactorName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACTORNAME_ISSET_ID);
  }

  /** Returns true if field factorName is set (has been assigned a value) and false otherwise */
  public boolean isSetFactorName() {
    return EncodingUtils.testBit(__isset_bitfield, __FACTORNAME_ISSET_ID);
  }

  public void setFactorNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACTORNAME_ISSET_ID, value);
  }

  public double getWeight() {
    return this.weight;
  }

  public CusEstFactorWeights setWeight(double weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public CusEstFactorWeights setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusEstFactorWeights setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getQuotasSize() {
    return (this.quotas == null) ? 0 : this.quotas.size();
  }

  public java.util.Iterator<CusEstQuota> getQuotasIterator() {
    return (this.quotas == null) ? null : this.quotas.iterator();
  }

  public void addToQuotas(CusEstQuota elem) {
    if (this.quotas == null) {
      this.quotas = new ArrayList<CusEstQuota>();
    }
    this.quotas.add(elem);
  }

  public List<CusEstQuota> getQuotas() {
    return this.quotas;
  }

  public CusEstFactorWeights setQuotas(List<CusEstQuota> quotas) {
    this.quotas = quotas;
    return this;
  }

  public void unsetQuotas() {
    this.quotas = null;
  }

  /** Returns true if field quotas is set (has been assigned a value) and false otherwise */
  public boolean isSetQuotas() {
    return this.quotas != null;
  }

  public void setQuotasIsSet(boolean value) {
    if (!value) {
      this.quotas = null;
    }
  }

  public String getFname() {
    return this.fname;
  }

  public CusEstFactorWeights setFname(String fname) {
    this.fname = fname;
    return this;
  }

  public void unsetFname() {
    this.fname = null;
  }

  /** Returns true if field fname is set (has been assigned a value) and false otherwise */
  public boolean isSetFname() {
    return this.fname != null;
  }

  public void setFnameIsSet(boolean value) {
    if (!value) {
      this.fname = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_EST_TEMPLATE:
      if (value == null) {
        unsetCusEstTemplate();
      } else {
        setCusEstTemplate((CusEstTemplate)value);
      }
      break;

    case FACTOR_NAME:
      if (value == null) {
        unsetFactorName();
      } else {
        setFactorName((Integer)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case QUOTAS:
      if (value == null) {
        unsetQuotas();
      } else {
        setQuotas((List<CusEstQuota>)value);
      }
      break;

    case FNAME:
      if (value == null) {
        unsetFname();
      } else {
        setFname((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_EST_TEMPLATE:
      return getCusEstTemplate();

    case FACTOR_NAME:
      return Integer.valueOf(getFactorName());

    case WEIGHT:
      return Double.valueOf(getWeight());

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case QUOTAS:
      return getQuotas();

    case FNAME:
      return getFname();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_EST_TEMPLATE:
      return isSetCusEstTemplate();
    case FACTOR_NAME:
      return isSetFactorName();
    case WEIGHT:
      return isSetWeight();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case QUOTAS:
      return isSetQuotas();
    case FNAME:
      return isSetFname();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusEstFactorWeights)
      return this.equals((CusEstFactorWeights)that);
    return false;
  }

  public boolean equals(CusEstFactorWeights that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusEstTemplate = true && this.isSetCusEstTemplate();
    boolean that_present_cusEstTemplate = true && that.isSetCusEstTemplate();
    if (this_present_cusEstTemplate || that_present_cusEstTemplate) {
      if (!(this_present_cusEstTemplate && that_present_cusEstTemplate))
        return false;
      if (!this.cusEstTemplate.equals(that.cusEstTemplate))
        return false;
    }

    boolean this_present_factorName = true;
    boolean that_present_factorName = true;
    if (this_present_factorName || that_present_factorName) {
      if (!(this_present_factorName && that_present_factorName))
        return false;
      if (this.factorName != that.factorName)
        return false;
    }

    boolean this_present_weight = true;
    boolean that_present_weight = true;
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_quotas = true && this.isSetQuotas();
    boolean that_present_quotas = true && that.isSetQuotas();
    if (this_present_quotas || that_present_quotas) {
      if (!(this_present_quotas && that_present_quotas))
        return false;
      if (!this.quotas.equals(that.quotas))
        return false;
    }

    boolean this_present_fname = true && this.isSetFname();
    boolean that_present_fname = true && that.isSetFname();
    if (this_present_fname || that_present_fname) {
      if (!(this_present_fname && that_present_fname))
        return false;
      if (!this.fname.equals(that.fname))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusEstTemplate = true && (isSetCusEstTemplate());
    list.add(present_cusEstTemplate);
    if (present_cusEstTemplate)
      list.add(cusEstTemplate);

    boolean present_factorName = true;
    list.add(present_factorName);
    if (present_factorName)
      list.add(factorName);

    boolean present_weight = true;
    list.add(present_weight);
    if (present_weight)
      list.add(weight);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_quotas = true && (isSetQuotas());
    list.add(present_quotas);
    if (present_quotas)
      list.add(quotas);

    boolean present_fname = true && (isSetFname());
    list.add(present_fname);
    if (present_fname)
      list.add(fname);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusEstFactorWeights other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusEstTemplate()).compareTo(other.isSetCusEstTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusEstTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusEstTemplate, other.cusEstTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFactorName()).compareTo(other.isSetFactorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFactorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factorName, other.factorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuotas()).compareTo(other.isSetQuotas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuotas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quotas, other.quotas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFname()).compareTo(other.isSetFname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fname, other.fname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusEstFactorWeights(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusEstTemplate:");
    if (this.cusEstTemplate == null) {
      sb.append("null");
    } else {
      sb.append(this.cusEstTemplate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("factorName:");
    sb.append(this.factorName);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weight:");
    sb.append(this.weight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quotas:");
    if (this.quotas == null) {
      sb.append("null");
    } else {
      sb.append(this.quotas);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fname:");
    if (this.fname == null) {
      sb.append("null");
    } else {
      sb.append(this.fname);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusEstTemplate != null) {
      cusEstTemplate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusEstFactorWeightsStandardSchemeFactory implements SchemeFactory {
    public CusEstFactorWeightsStandardScheme getScheme() {
      return new CusEstFactorWeightsStandardScheme();
    }
  }

  private static class CusEstFactorWeightsStandardScheme extends StandardScheme<CusEstFactorWeights> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusEstFactorWeights struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_EST_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusEstTemplate = new CusEstTemplate();
              struct.cusEstTemplate.read(iprot);
              struct.setCusEstTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FACTOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.factorName = iprot.readI32();
              struct.setFactorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.weight = iprot.readDouble();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUOTAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.quotas = new ArrayList<CusEstQuota>(_list40.size);
                CusEstQuota _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new CusEstQuota();
                  _elem41.read(iprot);
                  struct.quotas.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setQuotasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fname = iprot.readString();
              struct.setFnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusEstFactorWeights struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusEstTemplate != null) {
        oprot.writeFieldBegin(CUS_EST_TEMPLATE_FIELD_DESC);
        struct.cusEstTemplate.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FACTOR_NAME_FIELD_DESC);
      oprot.writeI32(struct.factorName);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeDouble(struct.weight);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.quotas != null) {
        oprot.writeFieldBegin(QUOTAS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.quotas.size()));
          for (CusEstQuota _iter43 : struct.quotas)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fname != null) {
        oprot.writeFieldBegin(FNAME_FIELD_DESC);
        oprot.writeString(struct.fname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusEstFactorWeightsTupleSchemeFactory implements SchemeFactory {
    public CusEstFactorWeightsTupleScheme getScheme() {
      return new CusEstFactorWeightsTupleScheme();
    }
  }

  private static class CusEstFactorWeightsTupleScheme extends TupleScheme<CusEstFactorWeights> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusEstFactorWeights struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusEstTemplate()) {
        optionals.set(1);
      }
      if (struct.isSetFactorName()) {
        optionals.set(2);
      }
      if (struct.isSetWeight()) {
        optionals.set(3);
      }
      if (struct.isSetRemark()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetQuotas()) {
        optionals.set(6);
      }
      if (struct.isSetFname()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusEstTemplate()) {
        struct.cusEstTemplate.write(oprot);
      }
      if (struct.isSetFactorName()) {
        oprot.writeI32(struct.factorName);
      }
      if (struct.isSetWeight()) {
        oprot.writeDouble(struct.weight);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetQuotas()) {
        {
          oprot.writeI32(struct.quotas.size());
          for (CusEstQuota _iter44 : struct.quotas)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetFname()) {
        oprot.writeString(struct.fname);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusEstFactorWeights struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusEstTemplate = new CusEstTemplate();
        struct.cusEstTemplate.read(iprot);
        struct.setCusEstTemplateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.factorName = iprot.readI32();
        struct.setFactorNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.weight = iprot.readDouble();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(4)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.quotas = new ArrayList<CusEstQuota>(_list45.size);
          CusEstQuota _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new CusEstQuota();
            _elem46.read(iprot);
            struct.quotas.add(_elem46);
          }
        }
        struct.setQuotasIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fname = iprot.readString();
        struct.setFnameIsSet(true);
      }
    }
  }

}


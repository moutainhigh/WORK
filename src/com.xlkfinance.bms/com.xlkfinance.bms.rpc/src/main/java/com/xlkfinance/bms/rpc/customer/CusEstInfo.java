/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusEstInfo implements org.apache.thrift.TBase<CusEstInfo, CusEstInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CusEstInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusEstInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_EST_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusEstTemplate", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CUS_ACCT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusAcct", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EST_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("estPerson", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CUS_EST_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("cusEstValues", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField EST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("estDate", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusEstInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusEstInfoTupleSchemeFactory());
  }

  public int pid; // required
  public CusEstTemplate cusEstTemplate; // required
  public CusAcct cusAcct; // required
  public int cusType; // required
  public int estPerson; // required
  public List<CusEstValue> cusEstValues; // required
  public int status; // required
  public double score; // required
  public String estDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_EST_TEMPLATE((short)2, "cusEstTemplate"),
    CUS_ACCT((short)3, "cusAcct"),
    CUS_TYPE((short)4, "cusType"),
    EST_PERSON((short)5, "estPerson"),
    CUS_EST_VALUES((short)6, "cusEstValues"),
    STATUS((short)7, "status"),
    SCORE((short)8, "score"),
    EST_DATE((short)9, "estDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_EST_TEMPLATE
          return CUS_EST_TEMPLATE;
        case 3: // CUS_ACCT
          return CUS_ACCT;
        case 4: // CUS_TYPE
          return CUS_TYPE;
        case 5: // EST_PERSON
          return EST_PERSON;
        case 6: // CUS_EST_VALUES
          return CUS_EST_VALUES;
        case 7: // STATUS
          return STATUS;
        case 8: // SCORE
          return SCORE;
        case 9: // EST_DATE
          return EST_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CUSTYPE_ISSET_ID = 1;
  private static final int __ESTPERSON_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __SCORE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_EST_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("cusEstTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusEstTemplate.class)));
    tmpMap.put(_Fields.CUS_ACCT, new org.apache.thrift.meta_data.FieldMetaData("cusAcct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusAcct.class)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EST_PERSON, new org.apache.thrift.meta_data.FieldMetaData("estPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_EST_VALUES, new org.apache.thrift.meta_data.FieldMetaData("cusEstValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "CusEstValue"))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EST_DATE, new org.apache.thrift.meta_data.FieldMetaData("estDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusEstInfo.class, metaDataMap);
  }

  public CusEstInfo() {
  }

  public CusEstInfo(
    int pid,
    CusEstTemplate cusEstTemplate,
    CusAcct cusAcct,
    int cusType,
    int estPerson,
    List<CusEstValue> cusEstValues,
    int status,
    double score,
    String estDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusEstTemplate = cusEstTemplate;
    this.cusAcct = cusAcct;
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.estPerson = estPerson;
    setEstPersonIsSet(true);
    this.cusEstValues = cusEstValues;
    this.status = status;
    setStatusIsSet(true);
    this.score = score;
    setScoreIsSet(true);
    this.estDate = estDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusEstInfo(CusEstInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusEstTemplate()) {
      this.cusEstTemplate = new CusEstTemplate(other.cusEstTemplate);
    }
    if (other.isSetCusAcct()) {
      this.cusAcct = new CusAcct(other.cusAcct);
    }
    this.cusType = other.cusType;
    this.estPerson = other.estPerson;
    if (other.isSetCusEstValues()) {
      List<CusEstValue> __this__cusEstValues = new ArrayList<CusEstValue>(other.cusEstValues.size());
      for (CusEstValue other_element : other.cusEstValues) {
        __this__cusEstValues.add(other_element);
      }
      this.cusEstValues = __this__cusEstValues;
    }
    this.status = other.status;
    this.score = other.score;
    if (other.isSetEstDate()) {
      this.estDate = other.estDate;
    }
  }

  public CusEstInfo deepCopy() {
    return new CusEstInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusEstTemplate = null;
    this.cusAcct = null;
    setCusTypeIsSet(false);
    this.cusType = 0;
    setEstPersonIsSet(false);
    this.estPerson = 0;
    this.cusEstValues = null;
    setStatusIsSet(false);
    this.status = 0;
    setScoreIsSet(false);
    this.score = 0.0;
    this.estDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusEstInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusEstTemplate getCusEstTemplate() {
    return this.cusEstTemplate;
  }

  public CusEstInfo setCusEstTemplate(CusEstTemplate cusEstTemplate) {
    this.cusEstTemplate = cusEstTemplate;
    return this;
  }

  public void unsetCusEstTemplate() {
    this.cusEstTemplate = null;
  }

  /** Returns true if field cusEstTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetCusEstTemplate() {
    return this.cusEstTemplate != null;
  }

  public void setCusEstTemplateIsSet(boolean value) {
    if (!value) {
      this.cusEstTemplate = null;
    }
  }

  public CusAcct getCusAcct() {
    return this.cusAcct;
  }

  public CusEstInfo setCusAcct(CusAcct cusAcct) {
    this.cusAcct = cusAcct;
    return this;
  }

  public void unsetCusAcct() {
    this.cusAcct = null;
  }

  /** Returns true if field cusAcct is set (has been assigned a value) and false otherwise */
  public boolean isSetCusAcct() {
    return this.cusAcct != null;
  }

  public void setCusAcctIsSet(boolean value) {
    if (!value) {
      this.cusAcct = null;
    }
  }

  public int getCusType() {
    return this.cusType;
  }

  public CusEstInfo setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public int getEstPerson() {
    return this.estPerson;
  }

  public CusEstInfo setEstPerson(int estPerson) {
    this.estPerson = estPerson;
    setEstPersonIsSet(true);
    return this;
  }

  public void unsetEstPerson() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTPERSON_ISSET_ID);
  }

  /** Returns true if field estPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetEstPerson() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTPERSON_ISSET_ID);
  }

  public void setEstPersonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTPERSON_ISSET_ID, value);
  }

  public int getCusEstValuesSize() {
    return (this.cusEstValues == null) ? 0 : this.cusEstValues.size();
  }

  public java.util.Iterator<CusEstValue> getCusEstValuesIterator() {
    return (this.cusEstValues == null) ? null : this.cusEstValues.iterator();
  }

  public void addToCusEstValues(CusEstValue elem) {
    if (this.cusEstValues == null) {
      this.cusEstValues = new ArrayList<CusEstValue>();
    }
    this.cusEstValues.add(elem);
  }

  public List<CusEstValue> getCusEstValues() {
    return this.cusEstValues;
  }

  public CusEstInfo setCusEstValues(List<CusEstValue> cusEstValues) {
    this.cusEstValues = cusEstValues;
    return this;
  }

  public void unsetCusEstValues() {
    this.cusEstValues = null;
  }

  /** Returns true if field cusEstValues is set (has been assigned a value) and false otherwise */
  public boolean isSetCusEstValues() {
    return this.cusEstValues != null;
  }

  public void setCusEstValuesIsSet(boolean value) {
    if (!value) {
      this.cusEstValues = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusEstInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getScore() {
    return this.score;
  }

  public CusEstInfo setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public String getEstDate() {
    return this.estDate;
  }

  public CusEstInfo setEstDate(String estDate) {
    this.estDate = estDate;
    return this;
  }

  public void unsetEstDate() {
    this.estDate = null;
  }

  /** Returns true if field estDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEstDate() {
    return this.estDate != null;
  }

  public void setEstDateIsSet(boolean value) {
    if (!value) {
      this.estDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_EST_TEMPLATE:
      if (value == null) {
        unsetCusEstTemplate();
      } else {
        setCusEstTemplate((CusEstTemplate)value);
      }
      break;

    case CUS_ACCT:
      if (value == null) {
        unsetCusAcct();
      } else {
        setCusAcct((CusAcct)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case EST_PERSON:
      if (value == null) {
        unsetEstPerson();
      } else {
        setEstPerson((Integer)value);
      }
      break;

    case CUS_EST_VALUES:
      if (value == null) {
        unsetCusEstValues();
      } else {
        setCusEstValues((List<CusEstValue>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case EST_DATE:
      if (value == null) {
        unsetEstDate();
      } else {
        setEstDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_EST_TEMPLATE:
      return getCusEstTemplate();

    case CUS_ACCT:
      return getCusAcct();

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case EST_PERSON:
      return Integer.valueOf(getEstPerson());

    case CUS_EST_VALUES:
      return getCusEstValues();

    case STATUS:
      return Integer.valueOf(getStatus());

    case SCORE:
      return Double.valueOf(getScore());

    case EST_DATE:
      return getEstDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_EST_TEMPLATE:
      return isSetCusEstTemplate();
    case CUS_ACCT:
      return isSetCusAcct();
    case CUS_TYPE:
      return isSetCusType();
    case EST_PERSON:
      return isSetEstPerson();
    case CUS_EST_VALUES:
      return isSetCusEstValues();
    case STATUS:
      return isSetStatus();
    case SCORE:
      return isSetScore();
    case EST_DATE:
      return isSetEstDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusEstInfo)
      return this.equals((CusEstInfo)that);
    return false;
  }

  public boolean equals(CusEstInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusEstTemplate = true && this.isSetCusEstTemplate();
    boolean that_present_cusEstTemplate = true && that.isSetCusEstTemplate();
    if (this_present_cusEstTemplate || that_present_cusEstTemplate) {
      if (!(this_present_cusEstTemplate && that_present_cusEstTemplate))
        return false;
      if (!this.cusEstTemplate.equals(that.cusEstTemplate))
        return false;
    }

    boolean this_present_cusAcct = true && this.isSetCusAcct();
    boolean that_present_cusAcct = true && that.isSetCusAcct();
    if (this_present_cusAcct || that_present_cusAcct) {
      if (!(this_present_cusAcct && that_present_cusAcct))
        return false;
      if (!this.cusAcct.equals(that.cusAcct))
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_estPerson = true;
    boolean that_present_estPerson = true;
    if (this_present_estPerson || that_present_estPerson) {
      if (!(this_present_estPerson && that_present_estPerson))
        return false;
      if (this.estPerson != that.estPerson)
        return false;
    }

    boolean this_present_cusEstValues = true && this.isSetCusEstValues();
    boolean that_present_cusEstValues = true && that.isSetCusEstValues();
    if (this_present_cusEstValues || that_present_cusEstValues) {
      if (!(this_present_cusEstValues && that_present_cusEstValues))
        return false;
      if (!this.cusEstValues.equals(that.cusEstValues))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_estDate = true && this.isSetEstDate();
    boolean that_present_estDate = true && that.isSetEstDate();
    if (this_present_estDate || that_present_estDate) {
      if (!(this_present_estDate && that_present_estDate))
        return false;
      if (!this.estDate.equals(that.estDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusEstTemplate = true && (isSetCusEstTemplate());
    list.add(present_cusEstTemplate);
    if (present_cusEstTemplate)
      list.add(cusEstTemplate);

    boolean present_cusAcct = true && (isSetCusAcct());
    list.add(present_cusAcct);
    if (present_cusAcct)
      list.add(cusAcct);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_estPerson = true;
    list.add(present_estPerson);
    if (present_estPerson)
      list.add(estPerson);

    boolean present_cusEstValues = true && (isSetCusEstValues());
    list.add(present_cusEstValues);
    if (present_cusEstValues)
      list.add(cusEstValues);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_score = true;
    list.add(present_score);
    if (present_score)
      list.add(score);

    boolean present_estDate = true && (isSetEstDate());
    list.add(present_estDate);
    if (present_estDate)
      list.add(estDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusEstInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusEstTemplate()).compareTo(other.isSetCusEstTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusEstTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusEstTemplate, other.cusEstTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusAcct()).compareTo(other.isSetCusAcct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusAcct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusAcct, other.cusAcct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstPerson()).compareTo(other.isSetEstPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estPerson, other.estPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusEstValues()).compareTo(other.isSetCusEstValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusEstValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusEstValues, other.cusEstValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstDate()).compareTo(other.isSetEstDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estDate, other.estDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusEstInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusEstTemplate:");
    if (this.cusEstTemplate == null) {
      sb.append("null");
    } else {
      sb.append(this.cusEstTemplate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusAcct:");
    if (this.cusAcct == null) {
      sb.append("null");
    } else {
      sb.append(this.cusAcct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estPerson:");
    sb.append(this.estPerson);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusEstValues:");
    if (this.cusEstValues == null) {
      sb.append("null");
    } else {
      sb.append(this.cusEstValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estDate:");
    if (this.estDate == null) {
      sb.append("null");
    } else {
      sb.append(this.estDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusEstTemplate != null) {
      cusEstTemplate.validate();
    }
    if (cusAcct != null) {
      cusAcct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusEstInfoStandardSchemeFactory implements SchemeFactory {
    public CusEstInfoStandardScheme getScheme() {
      return new CusEstInfoStandardScheme();
    }
  }

  private static class CusEstInfoStandardScheme extends StandardScheme<CusEstInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusEstInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_EST_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusEstTemplate = new CusEstTemplate();
              struct.cusEstTemplate.read(iprot);
              struct.setCusEstTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CUS_ACCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusAcct = new CusAcct();
              struct.cusAcct.read(iprot);
              struct.setCusAcctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EST_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estPerson = iprot.readI32();
              struct.setEstPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CUS_EST_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.cusEstValues = new ArrayList<CusEstValue>(_list72.size);
                CusEstValue _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new CusEstValue();
                  _elem73.read(iprot);
                  struct.cusEstValues.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setCusEstValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.estDate = iprot.readString();
              struct.setEstDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusEstInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusEstTemplate != null) {
        oprot.writeFieldBegin(CUS_EST_TEMPLATE_FIELD_DESC);
        struct.cusEstTemplate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cusAcct != null) {
        oprot.writeFieldBegin(CUS_ACCT_FIELD_DESC);
        struct.cusAcct.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EST_PERSON_FIELD_DESC);
      oprot.writeI32(struct.estPerson);
      oprot.writeFieldEnd();
      if (struct.cusEstValues != null) {
        oprot.writeFieldBegin(CUS_EST_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cusEstValues.size()));
          for (CusEstValue _iter75 : struct.cusEstValues)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeDouble(struct.score);
      oprot.writeFieldEnd();
      if (struct.estDate != null) {
        oprot.writeFieldBegin(EST_DATE_FIELD_DESC);
        oprot.writeString(struct.estDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusEstInfoTupleSchemeFactory implements SchemeFactory {
    public CusEstInfoTupleScheme getScheme() {
      return new CusEstInfoTupleScheme();
    }
  }

  private static class CusEstInfoTupleScheme extends TupleScheme<CusEstInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusEstInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusEstTemplate()) {
        optionals.set(1);
      }
      if (struct.isSetCusAcct()) {
        optionals.set(2);
      }
      if (struct.isSetCusType()) {
        optionals.set(3);
      }
      if (struct.isSetEstPerson()) {
        optionals.set(4);
      }
      if (struct.isSetCusEstValues()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetScore()) {
        optionals.set(7);
      }
      if (struct.isSetEstDate()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusEstTemplate()) {
        struct.cusEstTemplate.write(oprot);
      }
      if (struct.isSetCusAcct()) {
        struct.cusAcct.write(oprot);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetEstPerson()) {
        oprot.writeI32(struct.estPerson);
      }
      if (struct.isSetCusEstValues()) {
        {
          oprot.writeI32(struct.cusEstValues.size());
          for (CusEstValue _iter76 : struct.cusEstValues)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetEstDate()) {
        oprot.writeString(struct.estDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusEstInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusEstTemplate = new CusEstTemplate();
        struct.cusEstTemplate.read(iprot);
        struct.setCusEstTemplateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cusAcct = new CusAcct();
        struct.cusAcct.read(iprot);
        struct.setCusAcctIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.estPerson = iprot.readI32();
        struct.setEstPersonIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cusEstValues = new ArrayList<CusEstValue>(_list77.size);
          CusEstValue _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new CusEstValue();
            _elem78.read(iprot);
            struct.cusEstValues.add(_elem78);
          }
        }
        struct.setCusEstValuesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(8)) {
        struct.estDate = iprot.readString();
        struct.setEstDateIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.partner;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-14")
public class BizPartnerBankInfo implements org.apache.thrift.TBase<BizPartnerBankInfo, BizPartnerBankInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BizPartnerBankInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizPartnerBankInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REMIT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("remitType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BANK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UNION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("unionStatus", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("stationNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CLEAR_BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("clearBankNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NODE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UP_BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("upBankNo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PBC_BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pbcBankNo", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UNION_BANK_NAME_S_FIELD_DESC = new org.apache.thrift.protocol.TField("unionBankNameS", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTerm", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("amt", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PROVINCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BANK_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPhone", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField BANK_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAddr", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RESERV_NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("reservNum1", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField RESERV_STR1_FIELD_DESC = new org.apache.thrift.protocol.TField("reservStr1", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField DUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dueDate", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField USE_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("useTerm", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField LAST_MOD_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModDate", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ZIPCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zipcode", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizPartnerBankInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizPartnerBankInfoTupleSchemeFactory());
  }

  public int pid; // required
  public String bankNo; // required
  public String bankName; // required
  public String remitType; // required
  public String bankType; // required
  public String unionStatus; // required
  public String stationNo; // required
  public String clearBankNo; // required
  public String nodeCode; // required
  public String upBankNo; // required
  public String pbcBankNo; // required
  public String cityCode; // required
  public String unionBankNameS; // required
  public String updateTerm; // required
  public String amt; // required
  public String provinceName; // required
  public String cityName; // required
  public String bankPhone; // required
  public String bankAddr; // required
  public String reservNum1; // required
  public String reservStr1; // required
  public String startDate; // required
  public String dueDate; // required
  public String useTerm; // required
  public String lastModDate; // required
  public String zipcode; // required
  public String email; // required
  public String remark; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    BANK_NO((short)2, "bankNo"),
    BANK_NAME((short)3, "bankName"),
    REMIT_TYPE((short)4, "remitType"),
    BANK_TYPE((short)5, "bankType"),
    UNION_STATUS((short)6, "unionStatus"),
    STATION_NO((short)7, "stationNo"),
    CLEAR_BANK_NO((short)8, "clearBankNo"),
    NODE_CODE((short)9, "nodeCode"),
    UP_BANK_NO((short)10, "upBankNo"),
    PBC_BANK_NO((short)11, "pbcBankNo"),
    CITY_CODE((short)12, "cityCode"),
    UNION_BANK_NAME_S((short)13, "unionBankNameS"),
    UPDATE_TERM((short)14, "updateTerm"),
    AMT((short)15, "amt"),
    PROVINCE_NAME((short)16, "provinceName"),
    CITY_NAME((short)17, "cityName"),
    BANK_PHONE((short)18, "bankPhone"),
    BANK_ADDR((short)19, "bankAddr"),
    RESERV_NUM1((short)20, "reservNum1"),
    RESERV_STR1((short)21, "reservStr1"),
    START_DATE((short)22, "startDate"),
    DUE_DATE((short)23, "dueDate"),
    USE_TERM((short)24, "useTerm"),
    LAST_MOD_DATE((short)25, "lastModDate"),
    ZIPCODE((short)26, "zipcode"),
    EMAIL((short)27, "email"),
    REMARK((short)28, "remark"),
    PAGE((short)29, "page"),
    ROWS((short)30, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // BANK_NO
          return BANK_NO;
        case 3: // BANK_NAME
          return BANK_NAME;
        case 4: // REMIT_TYPE
          return REMIT_TYPE;
        case 5: // BANK_TYPE
          return BANK_TYPE;
        case 6: // UNION_STATUS
          return UNION_STATUS;
        case 7: // STATION_NO
          return STATION_NO;
        case 8: // CLEAR_BANK_NO
          return CLEAR_BANK_NO;
        case 9: // NODE_CODE
          return NODE_CODE;
        case 10: // UP_BANK_NO
          return UP_BANK_NO;
        case 11: // PBC_BANK_NO
          return PBC_BANK_NO;
        case 12: // CITY_CODE
          return CITY_CODE;
        case 13: // UNION_BANK_NAME_S
          return UNION_BANK_NAME_S;
        case 14: // UPDATE_TERM
          return UPDATE_TERM;
        case 15: // AMT
          return AMT;
        case 16: // PROVINCE_NAME
          return PROVINCE_NAME;
        case 17: // CITY_NAME
          return CITY_NAME;
        case 18: // BANK_PHONE
          return BANK_PHONE;
        case 19: // BANK_ADDR
          return BANK_ADDR;
        case 20: // RESERV_NUM1
          return RESERV_NUM1;
        case 21: // RESERV_STR1
          return RESERV_STR1;
        case 22: // START_DATE
          return START_DATE;
        case 23: // DUE_DATE
          return DUE_DATE;
        case 24: // USE_TERM
          return USE_TERM;
        case 25: // LAST_MOD_DATE
          return LAST_MOD_DATE;
        case 26: // ZIPCODE
          return ZIPCODE;
        case 27: // EMAIL
          return EMAIL;
        case 28: // REMARK
          return REMARK;
        case 29: // PAGE
          return PAGE;
        case 30: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PAGE_ISSET_ID = 1;
  private static final int __ROWS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMIT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("remitType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("unionStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATION_NO, new org.apache.thrift.meta_data.FieldMetaData("stationNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLEAR_BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("clearBankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_CODE, new org.apache.thrift.meta_data.FieldMetaData("nodeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UP_BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("upBankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PBC_BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("pbcBankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNION_BANK_NAME_S, new org.apache.thrift.meta_data.FieldMetaData("unionBankNameS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TERM, new org.apache.thrift.meta_data.FieldMetaData("updateTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMT, new org.apache.thrift.meta_data.FieldMetaData("amt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("provinceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_PHONE, new org.apache.thrift.meta_data.FieldMetaData("bankPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_ADDR, new org.apache.thrift.meta_data.FieldMetaData("bankAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESERV_NUM1, new org.apache.thrift.meta_data.FieldMetaData("reservNum1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESERV_STR1, new org.apache.thrift.meta_data.FieldMetaData("reservStr1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("dueDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_TERM, new org.apache.thrift.meta_data.FieldMetaData("useTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_MOD_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastModDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZIPCODE, new org.apache.thrift.meta_data.FieldMetaData("zipcode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizPartnerBankInfo.class, metaDataMap);
  }

  public BizPartnerBankInfo() {
  }

  public BizPartnerBankInfo(
    int pid,
    String bankNo,
    String bankName,
    String remitType,
    String bankType,
    String unionStatus,
    String stationNo,
    String clearBankNo,
    String nodeCode,
    String upBankNo,
    String pbcBankNo,
    String cityCode,
    String unionBankNameS,
    String updateTerm,
    String amt,
    String provinceName,
    String cityName,
    String bankPhone,
    String bankAddr,
    String reservNum1,
    String reservStr1,
    String startDate,
    String dueDate,
    String useTerm,
    String lastModDate,
    String zipcode,
    String email,
    String remark,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.bankNo = bankNo;
    this.bankName = bankName;
    this.remitType = remitType;
    this.bankType = bankType;
    this.unionStatus = unionStatus;
    this.stationNo = stationNo;
    this.clearBankNo = clearBankNo;
    this.nodeCode = nodeCode;
    this.upBankNo = upBankNo;
    this.pbcBankNo = pbcBankNo;
    this.cityCode = cityCode;
    this.unionBankNameS = unionBankNameS;
    this.updateTerm = updateTerm;
    this.amt = amt;
    this.provinceName = provinceName;
    this.cityName = cityName;
    this.bankPhone = bankPhone;
    this.bankAddr = bankAddr;
    this.reservNum1 = reservNum1;
    this.reservStr1 = reservStr1;
    this.startDate = startDate;
    this.dueDate = dueDate;
    this.useTerm = useTerm;
    this.lastModDate = lastModDate;
    this.zipcode = zipcode;
    this.email = email;
    this.remark = remark;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizPartnerBankInfo(BizPartnerBankInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetBankNo()) {
      this.bankNo = other.bankNo;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetRemitType()) {
      this.remitType = other.remitType;
    }
    if (other.isSetBankType()) {
      this.bankType = other.bankType;
    }
    if (other.isSetUnionStatus()) {
      this.unionStatus = other.unionStatus;
    }
    if (other.isSetStationNo()) {
      this.stationNo = other.stationNo;
    }
    if (other.isSetClearBankNo()) {
      this.clearBankNo = other.clearBankNo;
    }
    if (other.isSetNodeCode()) {
      this.nodeCode = other.nodeCode;
    }
    if (other.isSetUpBankNo()) {
      this.upBankNo = other.upBankNo;
    }
    if (other.isSetPbcBankNo()) {
      this.pbcBankNo = other.pbcBankNo;
    }
    if (other.isSetCityCode()) {
      this.cityCode = other.cityCode;
    }
    if (other.isSetUnionBankNameS()) {
      this.unionBankNameS = other.unionBankNameS;
    }
    if (other.isSetUpdateTerm()) {
      this.updateTerm = other.updateTerm;
    }
    if (other.isSetAmt()) {
      this.amt = other.amt;
    }
    if (other.isSetProvinceName()) {
      this.provinceName = other.provinceName;
    }
    if (other.isSetCityName()) {
      this.cityName = other.cityName;
    }
    if (other.isSetBankPhone()) {
      this.bankPhone = other.bankPhone;
    }
    if (other.isSetBankAddr()) {
      this.bankAddr = other.bankAddr;
    }
    if (other.isSetReservNum1()) {
      this.reservNum1 = other.reservNum1;
    }
    if (other.isSetReservStr1()) {
      this.reservStr1 = other.reservStr1;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetDueDate()) {
      this.dueDate = other.dueDate;
    }
    if (other.isSetUseTerm()) {
      this.useTerm = other.useTerm;
    }
    if (other.isSetLastModDate()) {
      this.lastModDate = other.lastModDate;
    }
    if (other.isSetZipcode()) {
      this.zipcode = other.zipcode;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.page = other.page;
    this.rows = other.rows;
  }

  public BizPartnerBankInfo deepCopy() {
    return new BizPartnerBankInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.bankNo = null;
    this.bankName = null;
    this.remitType = null;
    this.bankType = null;
    this.unionStatus = null;
    this.stationNo = null;
    this.clearBankNo = null;
    this.nodeCode = null;
    this.upBankNo = null;
    this.pbcBankNo = null;
    this.cityCode = null;
    this.unionBankNameS = null;
    this.updateTerm = null;
    this.amt = null;
    this.provinceName = null;
    this.cityName = null;
    this.bankPhone = null;
    this.bankAddr = null;
    this.reservNum1 = null;
    this.reservStr1 = null;
    this.startDate = null;
    this.dueDate = null;
    this.useTerm = null;
    this.lastModDate = null;
    this.zipcode = null;
    this.email = null;
    this.remark = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public BizPartnerBankInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getBankNo() {
    return this.bankNo;
  }

  public BizPartnerBankInfo setBankNo(String bankNo) {
    this.bankNo = bankNo;
    return this;
  }

  public void unsetBankNo() {
    this.bankNo = null;
  }

  /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNo() {
    return this.bankNo != null;
  }

  public void setBankNoIsSet(boolean value) {
    if (!value) {
      this.bankNo = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public BizPartnerBankInfo setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getRemitType() {
    return this.remitType;
  }

  public BizPartnerBankInfo setRemitType(String remitType) {
    this.remitType = remitType;
    return this;
  }

  public void unsetRemitType() {
    this.remitType = null;
  }

  /** Returns true if field remitType is set (has been assigned a value) and false otherwise */
  public boolean isSetRemitType() {
    return this.remitType != null;
  }

  public void setRemitTypeIsSet(boolean value) {
    if (!value) {
      this.remitType = null;
    }
  }

  public String getBankType() {
    return this.bankType;
  }

  public BizPartnerBankInfo setBankType(String bankType) {
    this.bankType = bankType;
    return this;
  }

  public void unsetBankType() {
    this.bankType = null;
  }

  /** Returns true if field bankType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankType() {
    return this.bankType != null;
  }

  public void setBankTypeIsSet(boolean value) {
    if (!value) {
      this.bankType = null;
    }
  }

  public String getUnionStatus() {
    return this.unionStatus;
  }

  public BizPartnerBankInfo setUnionStatus(String unionStatus) {
    this.unionStatus = unionStatus;
    return this;
  }

  public void unsetUnionStatus() {
    this.unionStatus = null;
  }

  /** Returns true if field unionStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionStatus() {
    return this.unionStatus != null;
  }

  public void setUnionStatusIsSet(boolean value) {
    if (!value) {
      this.unionStatus = null;
    }
  }

  public String getStationNo() {
    return this.stationNo;
  }

  public BizPartnerBankInfo setStationNo(String stationNo) {
    this.stationNo = stationNo;
    return this;
  }

  public void unsetStationNo() {
    this.stationNo = null;
  }

  /** Returns true if field stationNo is set (has been assigned a value) and false otherwise */
  public boolean isSetStationNo() {
    return this.stationNo != null;
  }

  public void setStationNoIsSet(boolean value) {
    if (!value) {
      this.stationNo = null;
    }
  }

  public String getClearBankNo() {
    return this.clearBankNo;
  }

  public BizPartnerBankInfo setClearBankNo(String clearBankNo) {
    this.clearBankNo = clearBankNo;
    return this;
  }

  public void unsetClearBankNo() {
    this.clearBankNo = null;
  }

  /** Returns true if field clearBankNo is set (has been assigned a value) and false otherwise */
  public boolean isSetClearBankNo() {
    return this.clearBankNo != null;
  }

  public void setClearBankNoIsSet(boolean value) {
    if (!value) {
      this.clearBankNo = null;
    }
  }

  public String getNodeCode() {
    return this.nodeCode;
  }

  public BizPartnerBankInfo setNodeCode(String nodeCode) {
    this.nodeCode = nodeCode;
    return this;
  }

  public void unsetNodeCode() {
    this.nodeCode = null;
  }

  /** Returns true if field nodeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeCode() {
    return this.nodeCode != null;
  }

  public void setNodeCodeIsSet(boolean value) {
    if (!value) {
      this.nodeCode = null;
    }
  }

  public String getUpBankNo() {
    return this.upBankNo;
  }

  public BizPartnerBankInfo setUpBankNo(String upBankNo) {
    this.upBankNo = upBankNo;
    return this;
  }

  public void unsetUpBankNo() {
    this.upBankNo = null;
  }

  /** Returns true if field upBankNo is set (has been assigned a value) and false otherwise */
  public boolean isSetUpBankNo() {
    return this.upBankNo != null;
  }

  public void setUpBankNoIsSet(boolean value) {
    if (!value) {
      this.upBankNo = null;
    }
  }

  public String getPbcBankNo() {
    return this.pbcBankNo;
  }

  public BizPartnerBankInfo setPbcBankNo(String pbcBankNo) {
    this.pbcBankNo = pbcBankNo;
    return this;
  }

  public void unsetPbcBankNo() {
    this.pbcBankNo = null;
  }

  /** Returns true if field pbcBankNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPbcBankNo() {
    return this.pbcBankNo != null;
  }

  public void setPbcBankNoIsSet(boolean value) {
    if (!value) {
      this.pbcBankNo = null;
    }
  }

  public String getCityCode() {
    return this.cityCode;
  }

  public BizPartnerBankInfo setCityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  public void unsetCityCode() {
    this.cityCode = null;
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return this.cityCode != null;
  }

  public void setCityCodeIsSet(boolean value) {
    if (!value) {
      this.cityCode = null;
    }
  }

  public String getUnionBankNameS() {
    return this.unionBankNameS;
  }

  public BizPartnerBankInfo setUnionBankNameS(String unionBankNameS) {
    this.unionBankNameS = unionBankNameS;
    return this;
  }

  public void unsetUnionBankNameS() {
    this.unionBankNameS = null;
  }

  /** Returns true if field unionBankNameS is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionBankNameS() {
    return this.unionBankNameS != null;
  }

  public void setUnionBankNameSIsSet(boolean value) {
    if (!value) {
      this.unionBankNameS = null;
    }
  }

  public String getUpdateTerm() {
    return this.updateTerm;
  }

  public BizPartnerBankInfo setUpdateTerm(String updateTerm) {
    this.updateTerm = updateTerm;
    return this;
  }

  public void unsetUpdateTerm() {
    this.updateTerm = null;
  }

  /** Returns true if field updateTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTerm() {
    return this.updateTerm != null;
  }

  public void setUpdateTermIsSet(boolean value) {
    if (!value) {
      this.updateTerm = null;
    }
  }

  public String getAmt() {
    return this.amt;
  }

  public BizPartnerBankInfo setAmt(String amt) {
    this.amt = amt;
    return this;
  }

  public void unsetAmt() {
    this.amt = null;
  }

  /** Returns true if field amt is set (has been assigned a value) and false otherwise */
  public boolean isSetAmt() {
    return this.amt != null;
  }

  public void setAmtIsSet(boolean value) {
    if (!value) {
      this.amt = null;
    }
  }

  public String getProvinceName() {
    return this.provinceName;
  }

  public BizPartnerBankInfo setProvinceName(String provinceName) {
    this.provinceName = provinceName;
    return this;
  }

  public void unsetProvinceName() {
    this.provinceName = null;
  }

  /** Returns true if field provinceName is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceName() {
    return this.provinceName != null;
  }

  public void setProvinceNameIsSet(boolean value) {
    if (!value) {
      this.provinceName = null;
    }
  }

  public String getCityName() {
    return this.cityName;
  }

  public BizPartnerBankInfo setCityName(String cityName) {
    this.cityName = cityName;
    return this;
  }

  public void unsetCityName() {
    this.cityName = null;
  }

  /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCityName() {
    return this.cityName != null;
  }

  public void setCityNameIsSet(boolean value) {
    if (!value) {
      this.cityName = null;
    }
  }

  public String getBankPhone() {
    return this.bankPhone;
  }

  public BizPartnerBankInfo setBankPhone(String bankPhone) {
    this.bankPhone = bankPhone;
    return this;
  }

  public void unsetBankPhone() {
    this.bankPhone = null;
  }

  /** Returns true if field bankPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPhone() {
    return this.bankPhone != null;
  }

  public void setBankPhoneIsSet(boolean value) {
    if (!value) {
      this.bankPhone = null;
    }
  }

  public String getBankAddr() {
    return this.bankAddr;
  }

  public BizPartnerBankInfo setBankAddr(String bankAddr) {
    this.bankAddr = bankAddr;
    return this;
  }

  public void unsetBankAddr() {
    this.bankAddr = null;
  }

  /** Returns true if field bankAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAddr() {
    return this.bankAddr != null;
  }

  public void setBankAddrIsSet(boolean value) {
    if (!value) {
      this.bankAddr = null;
    }
  }

  public String getReservNum1() {
    return this.reservNum1;
  }

  public BizPartnerBankInfo setReservNum1(String reservNum1) {
    this.reservNum1 = reservNum1;
    return this;
  }

  public void unsetReservNum1() {
    this.reservNum1 = null;
  }

  /** Returns true if field reservNum1 is set (has been assigned a value) and false otherwise */
  public boolean isSetReservNum1() {
    return this.reservNum1 != null;
  }

  public void setReservNum1IsSet(boolean value) {
    if (!value) {
      this.reservNum1 = null;
    }
  }

  public String getReservStr1() {
    return this.reservStr1;
  }

  public BizPartnerBankInfo setReservStr1(String reservStr1) {
    this.reservStr1 = reservStr1;
    return this;
  }

  public void unsetReservStr1() {
    this.reservStr1 = null;
  }

  /** Returns true if field reservStr1 is set (has been assigned a value) and false otherwise */
  public boolean isSetReservStr1() {
    return this.reservStr1 != null;
  }

  public void setReservStr1IsSet(boolean value) {
    if (!value) {
      this.reservStr1 = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public BizPartnerBankInfo setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getDueDate() {
    return this.dueDate;
  }

  public BizPartnerBankInfo setDueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  public void unsetDueDate() {
    this.dueDate = null;
  }

  /** Returns true if field dueDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDueDate() {
    return this.dueDate != null;
  }

  public void setDueDateIsSet(boolean value) {
    if (!value) {
      this.dueDate = null;
    }
  }

  public String getUseTerm() {
    return this.useTerm;
  }

  public BizPartnerBankInfo setUseTerm(String useTerm) {
    this.useTerm = useTerm;
    return this;
  }

  public void unsetUseTerm() {
    this.useTerm = null;
  }

  /** Returns true if field useTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetUseTerm() {
    return this.useTerm != null;
  }

  public void setUseTermIsSet(boolean value) {
    if (!value) {
      this.useTerm = null;
    }
  }

  public String getLastModDate() {
    return this.lastModDate;
  }

  public BizPartnerBankInfo setLastModDate(String lastModDate) {
    this.lastModDate = lastModDate;
    return this;
  }

  public void unsetLastModDate() {
    this.lastModDate = null;
  }

  /** Returns true if field lastModDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModDate() {
    return this.lastModDate != null;
  }

  public void setLastModDateIsSet(boolean value) {
    if (!value) {
      this.lastModDate = null;
    }
  }

  public String getZipcode() {
    return this.zipcode;
  }

  public BizPartnerBankInfo setZipcode(String zipcode) {
    this.zipcode = zipcode;
    return this;
  }

  public void unsetZipcode() {
    this.zipcode = null;
  }

  /** Returns true if field zipcode is set (has been assigned a value) and false otherwise */
  public boolean isSetZipcode() {
    return this.zipcode != null;
  }

  public void setZipcodeIsSet(boolean value) {
    if (!value) {
      this.zipcode = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public BizPartnerBankInfo setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public BizPartnerBankInfo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public BizPartnerBankInfo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public BizPartnerBankInfo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case BANK_NO:
      if (value == null) {
        unsetBankNo();
      } else {
        setBankNo((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case REMIT_TYPE:
      if (value == null) {
        unsetRemitType();
      } else {
        setRemitType((String)value);
      }
      break;

    case BANK_TYPE:
      if (value == null) {
        unsetBankType();
      } else {
        setBankType((String)value);
      }
      break;

    case UNION_STATUS:
      if (value == null) {
        unsetUnionStatus();
      } else {
        setUnionStatus((String)value);
      }
      break;

    case STATION_NO:
      if (value == null) {
        unsetStationNo();
      } else {
        setStationNo((String)value);
      }
      break;

    case CLEAR_BANK_NO:
      if (value == null) {
        unsetClearBankNo();
      } else {
        setClearBankNo((String)value);
      }
      break;

    case NODE_CODE:
      if (value == null) {
        unsetNodeCode();
      } else {
        setNodeCode((String)value);
      }
      break;

    case UP_BANK_NO:
      if (value == null) {
        unsetUpBankNo();
      } else {
        setUpBankNo((String)value);
      }
      break;

    case PBC_BANK_NO:
      if (value == null) {
        unsetPbcBankNo();
      } else {
        setPbcBankNo((String)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((String)value);
      }
      break;

    case UNION_BANK_NAME_S:
      if (value == null) {
        unsetUnionBankNameS();
      } else {
        setUnionBankNameS((String)value);
      }
      break;

    case UPDATE_TERM:
      if (value == null) {
        unsetUpdateTerm();
      } else {
        setUpdateTerm((String)value);
      }
      break;

    case AMT:
      if (value == null) {
        unsetAmt();
      } else {
        setAmt((String)value);
      }
      break;

    case PROVINCE_NAME:
      if (value == null) {
        unsetProvinceName();
      } else {
        setProvinceName((String)value);
      }
      break;

    case CITY_NAME:
      if (value == null) {
        unsetCityName();
      } else {
        setCityName((String)value);
      }
      break;

    case BANK_PHONE:
      if (value == null) {
        unsetBankPhone();
      } else {
        setBankPhone((String)value);
      }
      break;

    case BANK_ADDR:
      if (value == null) {
        unsetBankAddr();
      } else {
        setBankAddr((String)value);
      }
      break;

    case RESERV_NUM1:
      if (value == null) {
        unsetReservNum1();
      } else {
        setReservNum1((String)value);
      }
      break;

    case RESERV_STR1:
      if (value == null) {
        unsetReservStr1();
      } else {
        setReservStr1((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case DUE_DATE:
      if (value == null) {
        unsetDueDate();
      } else {
        setDueDate((String)value);
      }
      break;

    case USE_TERM:
      if (value == null) {
        unsetUseTerm();
      } else {
        setUseTerm((String)value);
      }
      break;

    case LAST_MOD_DATE:
      if (value == null) {
        unsetLastModDate();
      } else {
        setLastModDate((String)value);
      }
      break;

    case ZIPCODE:
      if (value == null) {
        unsetZipcode();
      } else {
        setZipcode((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case BANK_NO:
      return getBankNo();

    case BANK_NAME:
      return getBankName();

    case REMIT_TYPE:
      return getRemitType();

    case BANK_TYPE:
      return getBankType();

    case UNION_STATUS:
      return getUnionStatus();

    case STATION_NO:
      return getStationNo();

    case CLEAR_BANK_NO:
      return getClearBankNo();

    case NODE_CODE:
      return getNodeCode();

    case UP_BANK_NO:
      return getUpBankNo();

    case PBC_BANK_NO:
      return getPbcBankNo();

    case CITY_CODE:
      return getCityCode();

    case UNION_BANK_NAME_S:
      return getUnionBankNameS();

    case UPDATE_TERM:
      return getUpdateTerm();

    case AMT:
      return getAmt();

    case PROVINCE_NAME:
      return getProvinceName();

    case CITY_NAME:
      return getCityName();

    case BANK_PHONE:
      return getBankPhone();

    case BANK_ADDR:
      return getBankAddr();

    case RESERV_NUM1:
      return getReservNum1();

    case RESERV_STR1:
      return getReservStr1();

    case START_DATE:
      return getStartDate();

    case DUE_DATE:
      return getDueDate();

    case USE_TERM:
      return getUseTerm();

    case LAST_MOD_DATE:
      return getLastModDate();

    case ZIPCODE:
      return getZipcode();

    case EMAIL:
      return getEmail();

    case REMARK:
      return getRemark();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case BANK_NO:
      return isSetBankNo();
    case BANK_NAME:
      return isSetBankName();
    case REMIT_TYPE:
      return isSetRemitType();
    case BANK_TYPE:
      return isSetBankType();
    case UNION_STATUS:
      return isSetUnionStatus();
    case STATION_NO:
      return isSetStationNo();
    case CLEAR_BANK_NO:
      return isSetClearBankNo();
    case NODE_CODE:
      return isSetNodeCode();
    case UP_BANK_NO:
      return isSetUpBankNo();
    case PBC_BANK_NO:
      return isSetPbcBankNo();
    case CITY_CODE:
      return isSetCityCode();
    case UNION_BANK_NAME_S:
      return isSetUnionBankNameS();
    case UPDATE_TERM:
      return isSetUpdateTerm();
    case AMT:
      return isSetAmt();
    case PROVINCE_NAME:
      return isSetProvinceName();
    case CITY_NAME:
      return isSetCityName();
    case BANK_PHONE:
      return isSetBankPhone();
    case BANK_ADDR:
      return isSetBankAddr();
    case RESERV_NUM1:
      return isSetReservNum1();
    case RESERV_STR1:
      return isSetReservStr1();
    case START_DATE:
      return isSetStartDate();
    case DUE_DATE:
      return isSetDueDate();
    case USE_TERM:
      return isSetUseTerm();
    case LAST_MOD_DATE:
      return isSetLastModDate();
    case ZIPCODE:
      return isSetZipcode();
    case EMAIL:
      return isSetEmail();
    case REMARK:
      return isSetRemark();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizPartnerBankInfo)
      return this.equals((BizPartnerBankInfo)that);
    return false;
  }

  public boolean equals(BizPartnerBankInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_bankNo = true && this.isSetBankNo();
    boolean that_present_bankNo = true && that.isSetBankNo();
    if (this_present_bankNo || that_present_bankNo) {
      if (!(this_present_bankNo && that_present_bankNo))
        return false;
      if (!this.bankNo.equals(that.bankNo))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_remitType = true && this.isSetRemitType();
    boolean that_present_remitType = true && that.isSetRemitType();
    if (this_present_remitType || that_present_remitType) {
      if (!(this_present_remitType && that_present_remitType))
        return false;
      if (!this.remitType.equals(that.remitType))
        return false;
    }

    boolean this_present_bankType = true && this.isSetBankType();
    boolean that_present_bankType = true && that.isSetBankType();
    if (this_present_bankType || that_present_bankType) {
      if (!(this_present_bankType && that_present_bankType))
        return false;
      if (!this.bankType.equals(that.bankType))
        return false;
    }

    boolean this_present_unionStatus = true && this.isSetUnionStatus();
    boolean that_present_unionStatus = true && that.isSetUnionStatus();
    if (this_present_unionStatus || that_present_unionStatus) {
      if (!(this_present_unionStatus && that_present_unionStatus))
        return false;
      if (!this.unionStatus.equals(that.unionStatus))
        return false;
    }

    boolean this_present_stationNo = true && this.isSetStationNo();
    boolean that_present_stationNo = true && that.isSetStationNo();
    if (this_present_stationNo || that_present_stationNo) {
      if (!(this_present_stationNo && that_present_stationNo))
        return false;
      if (!this.stationNo.equals(that.stationNo))
        return false;
    }

    boolean this_present_clearBankNo = true && this.isSetClearBankNo();
    boolean that_present_clearBankNo = true && that.isSetClearBankNo();
    if (this_present_clearBankNo || that_present_clearBankNo) {
      if (!(this_present_clearBankNo && that_present_clearBankNo))
        return false;
      if (!this.clearBankNo.equals(that.clearBankNo))
        return false;
    }

    boolean this_present_nodeCode = true && this.isSetNodeCode();
    boolean that_present_nodeCode = true && that.isSetNodeCode();
    if (this_present_nodeCode || that_present_nodeCode) {
      if (!(this_present_nodeCode && that_present_nodeCode))
        return false;
      if (!this.nodeCode.equals(that.nodeCode))
        return false;
    }

    boolean this_present_upBankNo = true && this.isSetUpBankNo();
    boolean that_present_upBankNo = true && that.isSetUpBankNo();
    if (this_present_upBankNo || that_present_upBankNo) {
      if (!(this_present_upBankNo && that_present_upBankNo))
        return false;
      if (!this.upBankNo.equals(that.upBankNo))
        return false;
    }

    boolean this_present_pbcBankNo = true && this.isSetPbcBankNo();
    boolean that_present_pbcBankNo = true && that.isSetPbcBankNo();
    if (this_present_pbcBankNo || that_present_pbcBankNo) {
      if (!(this_present_pbcBankNo && that_present_pbcBankNo))
        return false;
      if (!this.pbcBankNo.equals(that.pbcBankNo))
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (!this.cityCode.equals(that.cityCode))
        return false;
    }

    boolean this_present_unionBankNameS = true && this.isSetUnionBankNameS();
    boolean that_present_unionBankNameS = true && that.isSetUnionBankNameS();
    if (this_present_unionBankNameS || that_present_unionBankNameS) {
      if (!(this_present_unionBankNameS && that_present_unionBankNameS))
        return false;
      if (!this.unionBankNameS.equals(that.unionBankNameS))
        return false;
    }

    boolean this_present_updateTerm = true && this.isSetUpdateTerm();
    boolean that_present_updateTerm = true && that.isSetUpdateTerm();
    if (this_present_updateTerm || that_present_updateTerm) {
      if (!(this_present_updateTerm && that_present_updateTerm))
        return false;
      if (!this.updateTerm.equals(that.updateTerm))
        return false;
    }

    boolean this_present_amt = true && this.isSetAmt();
    boolean that_present_amt = true && that.isSetAmt();
    if (this_present_amt || that_present_amt) {
      if (!(this_present_amt && that_present_amt))
        return false;
      if (!this.amt.equals(that.amt))
        return false;
    }

    boolean this_present_provinceName = true && this.isSetProvinceName();
    boolean that_present_provinceName = true && that.isSetProvinceName();
    if (this_present_provinceName || that_present_provinceName) {
      if (!(this_present_provinceName && that_present_provinceName))
        return false;
      if (!this.provinceName.equals(that.provinceName))
        return false;
    }

    boolean this_present_cityName = true && this.isSetCityName();
    boolean that_present_cityName = true && that.isSetCityName();
    if (this_present_cityName || that_present_cityName) {
      if (!(this_present_cityName && that_present_cityName))
        return false;
      if (!this.cityName.equals(that.cityName))
        return false;
    }

    boolean this_present_bankPhone = true && this.isSetBankPhone();
    boolean that_present_bankPhone = true && that.isSetBankPhone();
    if (this_present_bankPhone || that_present_bankPhone) {
      if (!(this_present_bankPhone && that_present_bankPhone))
        return false;
      if (!this.bankPhone.equals(that.bankPhone))
        return false;
    }

    boolean this_present_bankAddr = true && this.isSetBankAddr();
    boolean that_present_bankAddr = true && that.isSetBankAddr();
    if (this_present_bankAddr || that_present_bankAddr) {
      if (!(this_present_bankAddr && that_present_bankAddr))
        return false;
      if (!this.bankAddr.equals(that.bankAddr))
        return false;
    }

    boolean this_present_reservNum1 = true && this.isSetReservNum1();
    boolean that_present_reservNum1 = true && that.isSetReservNum1();
    if (this_present_reservNum1 || that_present_reservNum1) {
      if (!(this_present_reservNum1 && that_present_reservNum1))
        return false;
      if (!this.reservNum1.equals(that.reservNum1))
        return false;
    }

    boolean this_present_reservStr1 = true && this.isSetReservStr1();
    boolean that_present_reservStr1 = true && that.isSetReservStr1();
    if (this_present_reservStr1 || that_present_reservStr1) {
      if (!(this_present_reservStr1 && that_present_reservStr1))
        return false;
      if (!this.reservStr1.equals(that.reservStr1))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_dueDate = true && this.isSetDueDate();
    boolean that_present_dueDate = true && that.isSetDueDate();
    if (this_present_dueDate || that_present_dueDate) {
      if (!(this_present_dueDate && that_present_dueDate))
        return false;
      if (!this.dueDate.equals(that.dueDate))
        return false;
    }

    boolean this_present_useTerm = true && this.isSetUseTerm();
    boolean that_present_useTerm = true && that.isSetUseTerm();
    if (this_present_useTerm || that_present_useTerm) {
      if (!(this_present_useTerm && that_present_useTerm))
        return false;
      if (!this.useTerm.equals(that.useTerm))
        return false;
    }

    boolean this_present_lastModDate = true && this.isSetLastModDate();
    boolean that_present_lastModDate = true && that.isSetLastModDate();
    if (this_present_lastModDate || that_present_lastModDate) {
      if (!(this_present_lastModDate && that_present_lastModDate))
        return false;
      if (!this.lastModDate.equals(that.lastModDate))
        return false;
    }

    boolean this_present_zipcode = true && this.isSetZipcode();
    boolean that_present_zipcode = true && that.isSetZipcode();
    if (this_present_zipcode || that_present_zipcode) {
      if (!(this_present_zipcode && that_present_zipcode))
        return false;
      if (!this.zipcode.equals(that.zipcode))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_bankNo = true && (isSetBankNo());
    list.add(present_bankNo);
    if (present_bankNo)
      list.add(bankNo);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_remitType = true && (isSetRemitType());
    list.add(present_remitType);
    if (present_remitType)
      list.add(remitType);

    boolean present_bankType = true && (isSetBankType());
    list.add(present_bankType);
    if (present_bankType)
      list.add(bankType);

    boolean present_unionStatus = true && (isSetUnionStatus());
    list.add(present_unionStatus);
    if (present_unionStatus)
      list.add(unionStatus);

    boolean present_stationNo = true && (isSetStationNo());
    list.add(present_stationNo);
    if (present_stationNo)
      list.add(stationNo);

    boolean present_clearBankNo = true && (isSetClearBankNo());
    list.add(present_clearBankNo);
    if (present_clearBankNo)
      list.add(clearBankNo);

    boolean present_nodeCode = true && (isSetNodeCode());
    list.add(present_nodeCode);
    if (present_nodeCode)
      list.add(nodeCode);

    boolean present_upBankNo = true && (isSetUpBankNo());
    list.add(present_upBankNo);
    if (present_upBankNo)
      list.add(upBankNo);

    boolean present_pbcBankNo = true && (isSetPbcBankNo());
    list.add(present_pbcBankNo);
    if (present_pbcBankNo)
      list.add(pbcBankNo);

    boolean present_cityCode = true && (isSetCityCode());
    list.add(present_cityCode);
    if (present_cityCode)
      list.add(cityCode);

    boolean present_unionBankNameS = true && (isSetUnionBankNameS());
    list.add(present_unionBankNameS);
    if (present_unionBankNameS)
      list.add(unionBankNameS);

    boolean present_updateTerm = true && (isSetUpdateTerm());
    list.add(present_updateTerm);
    if (present_updateTerm)
      list.add(updateTerm);

    boolean present_amt = true && (isSetAmt());
    list.add(present_amt);
    if (present_amt)
      list.add(amt);

    boolean present_provinceName = true && (isSetProvinceName());
    list.add(present_provinceName);
    if (present_provinceName)
      list.add(provinceName);

    boolean present_cityName = true && (isSetCityName());
    list.add(present_cityName);
    if (present_cityName)
      list.add(cityName);

    boolean present_bankPhone = true && (isSetBankPhone());
    list.add(present_bankPhone);
    if (present_bankPhone)
      list.add(bankPhone);

    boolean present_bankAddr = true && (isSetBankAddr());
    list.add(present_bankAddr);
    if (present_bankAddr)
      list.add(bankAddr);

    boolean present_reservNum1 = true && (isSetReservNum1());
    list.add(present_reservNum1);
    if (present_reservNum1)
      list.add(reservNum1);

    boolean present_reservStr1 = true && (isSetReservStr1());
    list.add(present_reservStr1);
    if (present_reservStr1)
      list.add(reservStr1);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_dueDate = true && (isSetDueDate());
    list.add(present_dueDate);
    if (present_dueDate)
      list.add(dueDate);

    boolean present_useTerm = true && (isSetUseTerm());
    list.add(present_useTerm);
    if (present_useTerm)
      list.add(useTerm);

    boolean present_lastModDate = true && (isSetLastModDate());
    list.add(present_lastModDate);
    if (present_lastModDate)
      list.add(lastModDate);

    boolean present_zipcode = true && (isSetZipcode());
    list.add(present_zipcode);
    if (present_zipcode)
      list.add(zipcode);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizPartnerBankInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemitType()).compareTo(other.isSetRemitType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemitType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remitType, other.remitType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankType()).compareTo(other.isSetBankType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankType, other.bankType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionStatus()).compareTo(other.isSetUnionStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionStatus, other.unionStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStationNo()).compareTo(other.isSetStationNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStationNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stationNo, other.stationNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearBankNo()).compareTo(other.isSetClearBankNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearBankNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearBankNo, other.clearBankNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeCode()).compareTo(other.isSetNodeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeCode, other.nodeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpBankNo()).compareTo(other.isSetUpBankNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpBankNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upBankNo, other.upBankNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPbcBankNo()).compareTo(other.isSetPbcBankNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPbcBankNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pbcBankNo, other.pbcBankNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionBankNameS()).compareTo(other.isSetUnionBankNameS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionBankNameS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionBankNameS, other.unionBankNameS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTerm()).compareTo(other.isSetUpdateTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTerm, other.updateTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmt()).compareTo(other.isSetAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amt, other.amt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceName()).compareTo(other.isSetProvinceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceName, other.provinceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityName()).compareTo(other.isSetCityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, other.cityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPhone()).compareTo(other.isSetBankPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPhone, other.bankPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAddr()).compareTo(other.isSetBankAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAddr, other.bankAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReservNum1()).compareTo(other.isSetReservNum1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReservNum1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservNum1, other.reservNum1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReservStr1()).compareTo(other.isSetReservStr1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReservStr1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservStr1, other.reservStr1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDueDate()).compareTo(other.isSetDueDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDueDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dueDate, other.dueDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseTerm()).compareTo(other.isSetUseTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useTerm, other.useTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModDate()).compareTo(other.isSetLastModDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModDate, other.lastModDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZipcode()).compareTo(other.isSetZipcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZipcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipcode, other.zipcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizPartnerBankInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNo:");
    if (this.bankNo == null) {
      sb.append("null");
    } else {
      sb.append(this.bankNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remitType:");
    if (this.remitType == null) {
      sb.append("null");
    } else {
      sb.append(this.remitType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankType:");
    if (this.bankType == null) {
      sb.append("null");
    } else {
      sb.append(this.bankType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionStatus:");
    if (this.unionStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.unionStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stationNo:");
    if (this.stationNo == null) {
      sb.append("null");
    } else {
      sb.append(this.stationNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearBankNo:");
    if (this.clearBankNo == null) {
      sb.append("null");
    } else {
      sb.append(this.clearBankNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeCode:");
    if (this.nodeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("upBankNo:");
    if (this.upBankNo == null) {
      sb.append("null");
    } else {
      sb.append(this.upBankNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pbcBankNo:");
    if (this.pbcBankNo == null) {
      sb.append("null");
    } else {
      sb.append(this.pbcBankNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityCode:");
    if (this.cityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.cityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionBankNameS:");
    if (this.unionBankNameS == null) {
      sb.append("null");
    } else {
      sb.append(this.unionBankNameS);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTerm:");
    if (this.updateTerm == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTerm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amt:");
    if (this.amt == null) {
      sb.append("null");
    } else {
      sb.append(this.amt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceName:");
    if (this.provinceName == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityName:");
    if (this.cityName == null) {
      sb.append("null");
    } else {
      sb.append(this.cityName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPhone:");
    if (this.bankPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.bankPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAddr:");
    if (this.bankAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.bankAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reservNum1:");
    if (this.reservNum1 == null) {
      sb.append("null");
    } else {
      sb.append(this.reservNum1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reservStr1:");
    if (this.reservStr1 == null) {
      sb.append("null");
    } else {
      sb.append(this.reservStr1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dueDate:");
    if (this.dueDate == null) {
      sb.append("null");
    } else {
      sb.append(this.dueDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("useTerm:");
    if (this.useTerm == null) {
      sb.append("null");
    } else {
      sb.append(this.useTerm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastModDate:");
    if (this.lastModDate == null) {
      sb.append("null");
    } else {
      sb.append(this.lastModDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zipcode:");
    if (this.zipcode == null) {
      sb.append("null");
    } else {
      sb.append(this.zipcode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizPartnerBankInfoStandardSchemeFactory implements SchemeFactory {
    public BizPartnerBankInfoStandardScheme getScheme() {
      return new BizPartnerBankInfoStandardScheme();
    }
  }

  private static class BizPartnerBankInfoStandardScheme extends StandardScheme<BizPartnerBankInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizPartnerBankInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BANK_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankNo = iprot.readString();
              struct.setBankNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMIT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remitType = iprot.readString();
              struct.setRemitTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BANK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankType = iprot.readString();
              struct.setBankTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionStatus = iprot.readString();
              struct.setUnionStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stationNo = iprot.readString();
              struct.setStationNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLEAR_BANK_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clearBankNo = iprot.readString();
              struct.setClearBankNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NODE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeCode = iprot.readString();
              struct.setNodeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UP_BANK_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.upBankNo = iprot.readString();
              struct.setUpBankNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PBC_BANK_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pbcBankNo = iprot.readString();
              struct.setPbcBankNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityCode = iprot.readString();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UNION_BANK_NAME_S
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionBankNameS = iprot.readString();
              struct.setUnionBankNameSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTerm = iprot.readString();
              struct.setUpdateTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.amt = iprot.readString();
              struct.setAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PROVINCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provinceName = iprot.readString();
              struct.setProvinceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityName = iprot.readString();
              struct.setCityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BANK_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankPhone = iprot.readString();
              struct.setBankPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BANK_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankAddr = iprot.readString();
              struct.setBankAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RESERV_NUM1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reservNum1 = iprot.readString();
              struct.setReservNum1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RESERV_STR1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reservStr1 = iprot.readString();
              struct.setReservStr1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dueDate = iprot.readString();
              struct.setDueDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // USE_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useTerm = iprot.readString();
              struct.setUseTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LAST_MOD_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastModDate = iprot.readString();
              struct.setLastModDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ZIPCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zipcode = iprot.readString();
              struct.setZipcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizPartnerBankInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.bankNo != null) {
        oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
        oprot.writeString(struct.bankNo);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.remitType != null) {
        oprot.writeFieldBegin(REMIT_TYPE_FIELD_DESC);
        oprot.writeString(struct.remitType);
        oprot.writeFieldEnd();
      }
      if (struct.bankType != null) {
        oprot.writeFieldBegin(BANK_TYPE_FIELD_DESC);
        oprot.writeString(struct.bankType);
        oprot.writeFieldEnd();
      }
      if (struct.unionStatus != null) {
        oprot.writeFieldBegin(UNION_STATUS_FIELD_DESC);
        oprot.writeString(struct.unionStatus);
        oprot.writeFieldEnd();
      }
      if (struct.stationNo != null) {
        oprot.writeFieldBegin(STATION_NO_FIELD_DESC);
        oprot.writeString(struct.stationNo);
        oprot.writeFieldEnd();
      }
      if (struct.clearBankNo != null) {
        oprot.writeFieldBegin(CLEAR_BANK_NO_FIELD_DESC);
        oprot.writeString(struct.clearBankNo);
        oprot.writeFieldEnd();
      }
      if (struct.nodeCode != null) {
        oprot.writeFieldBegin(NODE_CODE_FIELD_DESC);
        oprot.writeString(struct.nodeCode);
        oprot.writeFieldEnd();
      }
      if (struct.upBankNo != null) {
        oprot.writeFieldBegin(UP_BANK_NO_FIELD_DESC);
        oprot.writeString(struct.upBankNo);
        oprot.writeFieldEnd();
      }
      if (struct.pbcBankNo != null) {
        oprot.writeFieldBegin(PBC_BANK_NO_FIELD_DESC);
        oprot.writeString(struct.pbcBankNo);
        oprot.writeFieldEnd();
      }
      if (struct.cityCode != null) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.unionBankNameS != null) {
        oprot.writeFieldBegin(UNION_BANK_NAME_S_FIELD_DESC);
        oprot.writeString(struct.unionBankNameS);
        oprot.writeFieldEnd();
      }
      if (struct.updateTerm != null) {
        oprot.writeFieldBegin(UPDATE_TERM_FIELD_DESC);
        oprot.writeString(struct.updateTerm);
        oprot.writeFieldEnd();
      }
      if (struct.amt != null) {
        oprot.writeFieldBegin(AMT_FIELD_DESC);
        oprot.writeString(struct.amt);
        oprot.writeFieldEnd();
      }
      if (struct.provinceName != null) {
        oprot.writeFieldBegin(PROVINCE_NAME_FIELD_DESC);
        oprot.writeString(struct.provinceName);
        oprot.writeFieldEnd();
      }
      if (struct.cityName != null) {
        oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
        oprot.writeString(struct.cityName);
        oprot.writeFieldEnd();
      }
      if (struct.bankPhone != null) {
        oprot.writeFieldBegin(BANK_PHONE_FIELD_DESC);
        oprot.writeString(struct.bankPhone);
        oprot.writeFieldEnd();
      }
      if (struct.bankAddr != null) {
        oprot.writeFieldBegin(BANK_ADDR_FIELD_DESC);
        oprot.writeString(struct.bankAddr);
        oprot.writeFieldEnd();
      }
      if (struct.reservNum1 != null) {
        oprot.writeFieldBegin(RESERV_NUM1_FIELD_DESC);
        oprot.writeString(struct.reservNum1);
        oprot.writeFieldEnd();
      }
      if (struct.reservStr1 != null) {
        oprot.writeFieldBegin(RESERV_STR1_FIELD_DESC);
        oprot.writeString(struct.reservStr1);
        oprot.writeFieldEnd();
      }
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.dueDate != null) {
        oprot.writeFieldBegin(DUE_DATE_FIELD_DESC);
        oprot.writeString(struct.dueDate);
        oprot.writeFieldEnd();
      }
      if (struct.useTerm != null) {
        oprot.writeFieldBegin(USE_TERM_FIELD_DESC);
        oprot.writeString(struct.useTerm);
        oprot.writeFieldEnd();
      }
      if (struct.lastModDate != null) {
        oprot.writeFieldBegin(LAST_MOD_DATE_FIELD_DESC);
        oprot.writeString(struct.lastModDate);
        oprot.writeFieldEnd();
      }
      if (struct.zipcode != null) {
        oprot.writeFieldBegin(ZIPCODE_FIELD_DESC);
        oprot.writeString(struct.zipcode);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizPartnerBankInfoTupleSchemeFactory implements SchemeFactory {
    public BizPartnerBankInfoTupleScheme getScheme() {
      return new BizPartnerBankInfoTupleScheme();
    }
  }

  private static class BizPartnerBankInfoTupleScheme extends TupleScheme<BizPartnerBankInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizPartnerBankInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetBankNo()) {
        optionals.set(1);
      }
      if (struct.isSetBankName()) {
        optionals.set(2);
      }
      if (struct.isSetRemitType()) {
        optionals.set(3);
      }
      if (struct.isSetBankType()) {
        optionals.set(4);
      }
      if (struct.isSetUnionStatus()) {
        optionals.set(5);
      }
      if (struct.isSetStationNo()) {
        optionals.set(6);
      }
      if (struct.isSetClearBankNo()) {
        optionals.set(7);
      }
      if (struct.isSetNodeCode()) {
        optionals.set(8);
      }
      if (struct.isSetUpBankNo()) {
        optionals.set(9);
      }
      if (struct.isSetPbcBankNo()) {
        optionals.set(10);
      }
      if (struct.isSetCityCode()) {
        optionals.set(11);
      }
      if (struct.isSetUnionBankNameS()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateTerm()) {
        optionals.set(13);
      }
      if (struct.isSetAmt()) {
        optionals.set(14);
      }
      if (struct.isSetProvinceName()) {
        optionals.set(15);
      }
      if (struct.isSetCityName()) {
        optionals.set(16);
      }
      if (struct.isSetBankPhone()) {
        optionals.set(17);
      }
      if (struct.isSetBankAddr()) {
        optionals.set(18);
      }
      if (struct.isSetReservNum1()) {
        optionals.set(19);
      }
      if (struct.isSetReservStr1()) {
        optionals.set(20);
      }
      if (struct.isSetStartDate()) {
        optionals.set(21);
      }
      if (struct.isSetDueDate()) {
        optionals.set(22);
      }
      if (struct.isSetUseTerm()) {
        optionals.set(23);
      }
      if (struct.isSetLastModDate()) {
        optionals.set(24);
      }
      if (struct.isSetZipcode()) {
        optionals.set(25);
      }
      if (struct.isSetEmail()) {
        optionals.set(26);
      }
      if (struct.isSetRemark()) {
        optionals.set(27);
      }
      if (struct.isSetPage()) {
        optionals.set(28);
      }
      if (struct.isSetRows()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetBankNo()) {
        oprot.writeString(struct.bankNo);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetRemitType()) {
        oprot.writeString(struct.remitType);
      }
      if (struct.isSetBankType()) {
        oprot.writeString(struct.bankType);
      }
      if (struct.isSetUnionStatus()) {
        oprot.writeString(struct.unionStatus);
      }
      if (struct.isSetStationNo()) {
        oprot.writeString(struct.stationNo);
      }
      if (struct.isSetClearBankNo()) {
        oprot.writeString(struct.clearBankNo);
      }
      if (struct.isSetNodeCode()) {
        oprot.writeString(struct.nodeCode);
      }
      if (struct.isSetUpBankNo()) {
        oprot.writeString(struct.upBankNo);
      }
      if (struct.isSetPbcBankNo()) {
        oprot.writeString(struct.pbcBankNo);
      }
      if (struct.isSetCityCode()) {
        oprot.writeString(struct.cityCode);
      }
      if (struct.isSetUnionBankNameS()) {
        oprot.writeString(struct.unionBankNameS);
      }
      if (struct.isSetUpdateTerm()) {
        oprot.writeString(struct.updateTerm);
      }
      if (struct.isSetAmt()) {
        oprot.writeString(struct.amt);
      }
      if (struct.isSetProvinceName()) {
        oprot.writeString(struct.provinceName);
      }
      if (struct.isSetCityName()) {
        oprot.writeString(struct.cityName);
      }
      if (struct.isSetBankPhone()) {
        oprot.writeString(struct.bankPhone);
      }
      if (struct.isSetBankAddr()) {
        oprot.writeString(struct.bankAddr);
      }
      if (struct.isSetReservNum1()) {
        oprot.writeString(struct.reservNum1);
      }
      if (struct.isSetReservStr1()) {
        oprot.writeString(struct.reservStr1);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetDueDate()) {
        oprot.writeString(struct.dueDate);
      }
      if (struct.isSetUseTerm()) {
        oprot.writeString(struct.useTerm);
      }
      if (struct.isSetLastModDate()) {
        oprot.writeString(struct.lastModDate);
      }
      if (struct.isSetZipcode()) {
        oprot.writeString(struct.zipcode);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizPartnerBankInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bankNo = iprot.readString();
        struct.setBankNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.remitType = iprot.readString();
        struct.setRemitTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bankType = iprot.readString();
        struct.setBankTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.unionStatus = iprot.readString();
        struct.setUnionStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stationNo = iprot.readString();
        struct.setStationNoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.clearBankNo = iprot.readString();
        struct.setClearBankNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.nodeCode = iprot.readString();
        struct.setNodeCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.upBankNo = iprot.readString();
        struct.setUpBankNoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.pbcBankNo = iprot.readString();
        struct.setPbcBankNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cityCode = iprot.readString();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.unionBankNameS = iprot.readString();
        struct.setUnionBankNameSIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updateTerm = iprot.readString();
        struct.setUpdateTermIsSet(true);
      }
      if (incoming.get(14)) {
        struct.amt = iprot.readString();
        struct.setAmtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.provinceName = iprot.readString();
        struct.setProvinceNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.cityName = iprot.readString();
        struct.setCityNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.bankPhone = iprot.readString();
        struct.setBankPhoneIsSet(true);
      }
      if (incoming.get(18)) {
        struct.bankAddr = iprot.readString();
        struct.setBankAddrIsSet(true);
      }
      if (incoming.get(19)) {
        struct.reservNum1 = iprot.readString();
        struct.setReservNum1IsSet(true);
      }
      if (incoming.get(20)) {
        struct.reservStr1 = iprot.readString();
        struct.setReservStr1IsSet(true);
      }
      if (incoming.get(21)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.dueDate = iprot.readString();
        struct.setDueDateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.useTerm = iprot.readString();
        struct.setUseTermIsSet(true);
      }
      if (incoming.get(24)) {
        struct.lastModDate = iprot.readString();
        struct.setLastModDateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.zipcode = iprot.readString();
        struct.setZipcodeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(27)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(28)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(29)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


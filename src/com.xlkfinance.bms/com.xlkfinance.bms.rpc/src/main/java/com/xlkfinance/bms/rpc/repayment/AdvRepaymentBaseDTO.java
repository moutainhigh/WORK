/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class AdvRepaymentBaseDTO implements org.apache.thrift.TBase<AdvRepaymentBaseDTO, AdvRepaymentBaseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<AdvRepaymentBaseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdvRepaymentBaseDTO");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_ADV_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestAdvDttm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PMUSER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmuserName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REQUEST_ADV_DTTM_LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("requestAdvDttmLast", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COMPELTE_ADV_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("compelteAdvDttm", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REQUEST_LOAN_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestLoanDttm", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PROJECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNum", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDate", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AdvRepaymentBaseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AdvRepaymentBaseDTOTupleSchemeFactory());
  }

  public String pId; // required
  public String projectId; // required
  public String projectName; // required
  public String cusName; // required
  public double creditAmt; // required
  public String requestAdvDttm; // required
  public int cusType; // required
  public String pmuserName; // required
  public int status; // required
  public String requestAdvDttmLast; // required
  public String compelteAdvDttm; // required
  public String ecoTrade; // required
  public String requestLoanDttm; // required
  public String planRepayLoanDt; // required
  public String projectNum; // required
  public int rows; // required
  public int page; // required
  public int requestStatus; // required
  public int preRepayId; // required
  public int loanId; // required
  public String requestDttm; // required
  public String repayDate; // required
  public int pmUserId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NAME((short)3, "projectName"),
    CUS_NAME((short)4, "cusName"),
    CREDIT_AMT((short)5, "creditAmt"),
    REQUEST_ADV_DTTM((short)6, "requestAdvDttm"),
    CUS_TYPE((short)7, "cusType"),
    PMUSER_NAME((short)8, "pmuserName"),
    STATUS((short)9, "status"),
    REQUEST_ADV_DTTM_LAST((short)10, "requestAdvDttmLast"),
    COMPELTE_ADV_DTTM((short)11, "compelteAdvDttm"),
    ECO_TRADE((short)12, "ecoTrade"),
    REQUEST_LOAN_DTTM((short)13, "requestLoanDttm"),
    PLAN_REPAY_LOAN_DT((short)14, "planRepayLoanDt"),
    PROJECT_NUM((short)17, "projectNum"),
    ROWS((short)15, "rows"),
    PAGE((short)16, "page"),
    REQUEST_STATUS((short)18, "requestStatus"),
    PRE_REPAY_ID((short)19, "preRepayId"),
    LOAN_ID((short)20, "loanId"),
    REQUEST_DTTM((short)21, "requestDttm"),
    REPAY_DATE((short)22, "repayDate"),
    PM_USER_ID((short)23, "pmUserId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NAME
          return PROJECT_NAME;
        case 4: // CUS_NAME
          return CUS_NAME;
        case 5: // CREDIT_AMT
          return CREDIT_AMT;
        case 6: // REQUEST_ADV_DTTM
          return REQUEST_ADV_DTTM;
        case 7: // CUS_TYPE
          return CUS_TYPE;
        case 8: // PMUSER_NAME
          return PMUSER_NAME;
        case 9: // STATUS
          return STATUS;
        case 10: // REQUEST_ADV_DTTM_LAST
          return REQUEST_ADV_DTTM_LAST;
        case 11: // COMPELTE_ADV_DTTM
          return COMPELTE_ADV_DTTM;
        case 12: // ECO_TRADE
          return ECO_TRADE;
        case 13: // REQUEST_LOAN_DTTM
          return REQUEST_LOAN_DTTM;
        case 14: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 17: // PROJECT_NUM
          return PROJECT_NUM;
        case 15: // ROWS
          return ROWS;
        case 16: // PAGE
          return PAGE;
        case 18: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 19: // PRE_REPAY_ID
          return PRE_REPAY_ID;
        case 20: // LOAN_ID
          return LOAN_ID;
        case 21: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 22: // REPAY_DATE
          return REPAY_DATE;
        case 23: // PM_USER_ID
          return PM_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREDITAMT_ISSET_ID = 0;
  private static final int __CUSTYPE_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __ROWS_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __REQUESTSTATUS_ISSET_ID = 5;
  private static final int __PREREPAYID_ISSET_ID = 6;
  private static final int __LOANID_ISSET_ID = 7;
  private static final int __PMUSERID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUEST_ADV_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestAdvDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PMUSER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmuserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_ADV_DTTM_LAST, new org.apache.thrift.meta_data.FieldMetaData("requestAdvDttmLast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPELTE_ADV_DTTM, new org.apache.thrift.meta_data.FieldMetaData("compelteAdvDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_LOAN_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestLoanDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("projectNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRE_REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("preRepayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdvRepaymentBaseDTO.class, metaDataMap);
  }

  public AdvRepaymentBaseDTO() {
  }

  public AdvRepaymentBaseDTO(
    String pId,
    String projectId,
    String projectName,
    String cusName,
    double creditAmt,
    String requestAdvDttm,
    int cusType,
    String pmuserName,
    int status,
    String requestAdvDttmLast,
    String compelteAdvDttm,
    String ecoTrade,
    String requestLoanDttm,
    String planRepayLoanDt,
    String projectNum,
    int rows,
    int page,
    int requestStatus,
    int preRepayId,
    int loanId,
    String requestDttm,
    String repayDate,
    int pmUserId)
  {
    this();
    this.pId = pId;
    this.projectId = projectId;
    this.projectName = projectName;
    this.cusName = cusName;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.requestAdvDttm = requestAdvDttm;
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.pmuserName = pmuserName;
    this.status = status;
    setStatusIsSet(true);
    this.requestAdvDttmLast = requestAdvDttmLast;
    this.compelteAdvDttm = compelteAdvDttm;
    this.ecoTrade = ecoTrade;
    this.requestLoanDttm = requestLoanDttm;
    this.planRepayLoanDt = planRepayLoanDt;
    this.projectNum = projectNum;
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.requestDttm = requestDttm;
    this.repayDate = repayDate;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdvRepaymentBaseDTO(AdvRepaymentBaseDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    this.creditAmt = other.creditAmt;
    if (other.isSetRequestAdvDttm()) {
      this.requestAdvDttm = other.requestAdvDttm;
    }
    this.cusType = other.cusType;
    if (other.isSetPmuserName()) {
      this.pmuserName = other.pmuserName;
    }
    this.status = other.status;
    if (other.isSetRequestAdvDttmLast()) {
      this.requestAdvDttmLast = other.requestAdvDttmLast;
    }
    if (other.isSetCompelteAdvDttm()) {
      this.compelteAdvDttm = other.compelteAdvDttm;
    }
    if (other.isSetEcoTrade()) {
      this.ecoTrade = other.ecoTrade;
    }
    if (other.isSetRequestLoanDttm()) {
      this.requestLoanDttm = other.requestLoanDttm;
    }
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    if (other.isSetProjectNum()) {
      this.projectNum = other.projectNum;
    }
    this.rows = other.rows;
    this.page = other.page;
    this.requestStatus = other.requestStatus;
    this.preRepayId = other.preRepayId;
    this.loanId = other.loanId;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetRepayDate()) {
      this.repayDate = other.repayDate;
    }
    this.pmUserId = other.pmUserId;
  }

  public AdvRepaymentBaseDTO deepCopy() {
    return new AdvRepaymentBaseDTO(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    this.projectId = null;
    this.projectName = null;
    this.cusName = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    this.requestAdvDttm = null;
    setCusTypeIsSet(false);
    this.cusType = 0;
    this.pmuserName = null;
    setStatusIsSet(false);
    this.status = 0;
    this.requestAdvDttmLast = null;
    this.compelteAdvDttm = null;
    this.ecoTrade = null;
    this.requestLoanDttm = null;
    this.planRepayLoanDt = null;
    this.projectNum = null;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    setPreRepayIdIsSet(false);
    this.preRepayId = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.requestDttm = null;
    this.repayDate = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
  }

  public String getPId() {
    return this.pId;
  }

  public AdvRepaymentBaseDTO setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public AdvRepaymentBaseDTO setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public AdvRepaymentBaseDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getCusName() {
    return this.cusName;
  }

  public AdvRepaymentBaseDTO setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public AdvRepaymentBaseDTO setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public String getRequestAdvDttm() {
    return this.requestAdvDttm;
  }

  public AdvRepaymentBaseDTO setRequestAdvDttm(String requestAdvDttm) {
    this.requestAdvDttm = requestAdvDttm;
    return this;
  }

  public void unsetRequestAdvDttm() {
    this.requestAdvDttm = null;
  }

  /** Returns true if field requestAdvDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestAdvDttm() {
    return this.requestAdvDttm != null;
  }

  public void setRequestAdvDttmIsSet(boolean value) {
    if (!value) {
      this.requestAdvDttm = null;
    }
  }

  public int getCusType() {
    return this.cusType;
  }

  public AdvRepaymentBaseDTO setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public String getPmuserName() {
    return this.pmuserName;
  }

  public AdvRepaymentBaseDTO setPmuserName(String pmuserName) {
    this.pmuserName = pmuserName;
    return this;
  }

  public void unsetPmuserName() {
    this.pmuserName = null;
  }

  /** Returns true if field pmuserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmuserName() {
    return this.pmuserName != null;
  }

  public void setPmuserNameIsSet(boolean value) {
    if (!value) {
      this.pmuserName = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public AdvRepaymentBaseDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRequestAdvDttmLast() {
    return this.requestAdvDttmLast;
  }

  public AdvRepaymentBaseDTO setRequestAdvDttmLast(String requestAdvDttmLast) {
    this.requestAdvDttmLast = requestAdvDttmLast;
    return this;
  }

  public void unsetRequestAdvDttmLast() {
    this.requestAdvDttmLast = null;
  }

  /** Returns true if field requestAdvDttmLast is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestAdvDttmLast() {
    return this.requestAdvDttmLast != null;
  }

  public void setRequestAdvDttmLastIsSet(boolean value) {
    if (!value) {
      this.requestAdvDttmLast = null;
    }
  }

  public String getCompelteAdvDttm() {
    return this.compelteAdvDttm;
  }

  public AdvRepaymentBaseDTO setCompelteAdvDttm(String compelteAdvDttm) {
    this.compelteAdvDttm = compelteAdvDttm;
    return this;
  }

  public void unsetCompelteAdvDttm() {
    this.compelteAdvDttm = null;
  }

  /** Returns true if field compelteAdvDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompelteAdvDttm() {
    return this.compelteAdvDttm != null;
  }

  public void setCompelteAdvDttmIsSet(boolean value) {
    if (!value) {
      this.compelteAdvDttm = null;
    }
  }

  public String getEcoTrade() {
    return this.ecoTrade;
  }

  public AdvRepaymentBaseDTO setEcoTrade(String ecoTrade) {
    this.ecoTrade = ecoTrade;
    return this;
  }

  public void unsetEcoTrade() {
    this.ecoTrade = null;
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return this.ecoTrade != null;
  }

  public void setEcoTradeIsSet(boolean value) {
    if (!value) {
      this.ecoTrade = null;
    }
  }

  public String getRequestLoanDttm() {
    return this.requestLoanDttm;
  }

  public AdvRepaymentBaseDTO setRequestLoanDttm(String requestLoanDttm) {
    this.requestLoanDttm = requestLoanDttm;
    return this;
  }

  public void unsetRequestLoanDttm() {
    this.requestLoanDttm = null;
  }

  /** Returns true if field requestLoanDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestLoanDttm() {
    return this.requestLoanDttm != null;
  }

  public void setRequestLoanDttmIsSet(boolean value) {
    if (!value) {
      this.requestLoanDttm = null;
    }
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public AdvRepaymentBaseDTO setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public String getProjectNum() {
    return this.projectNum;
  }

  public AdvRepaymentBaseDTO setProjectNum(String projectNum) {
    this.projectNum = projectNum;
    return this;
  }

  public void unsetProjectNum() {
    this.projectNum = null;
  }

  /** Returns true if field projectNum is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNum() {
    return this.projectNum != null;
  }

  public void setProjectNumIsSet(boolean value) {
    if (!value) {
      this.projectNum = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public AdvRepaymentBaseDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public AdvRepaymentBaseDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public AdvRepaymentBaseDTO setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public int getPreRepayId() {
    return this.preRepayId;
  }

  public AdvRepaymentBaseDTO setPreRepayId(int preRepayId) {
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    return this;
  }

  public void unsetPreRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  /** Returns true if field preRepayId is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  public void setPreRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public AdvRepaymentBaseDTO setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public AdvRepaymentBaseDTO setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getRepayDate() {
    return this.repayDate;
  }

  public AdvRepaymentBaseDTO setRepayDate(String repayDate) {
    this.repayDate = repayDate;
    return this;
  }

  public void unsetRepayDate() {
    this.repayDate = null;
  }

  /** Returns true if field repayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDate() {
    return this.repayDate != null;
  }

  public void setRepayDateIsSet(boolean value) {
    if (!value) {
      this.repayDate = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public AdvRepaymentBaseDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case REQUEST_ADV_DTTM:
      if (value == null) {
        unsetRequestAdvDttm();
      } else {
        setRequestAdvDttm((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case PMUSER_NAME:
      if (value == null) {
        unsetPmuserName();
      } else {
        setPmuserName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REQUEST_ADV_DTTM_LAST:
      if (value == null) {
        unsetRequestAdvDttmLast();
      } else {
        setRequestAdvDttmLast((String)value);
      }
      break;

    case COMPELTE_ADV_DTTM:
      if (value == null) {
        unsetCompelteAdvDttm();
      } else {
        setCompelteAdvDttm((String)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((String)value);
      }
      break;

    case REQUEST_LOAN_DTTM:
      if (value == null) {
        unsetRequestLoanDttm();
      } else {
        setRequestLoanDttm((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case PROJECT_NUM:
      if (value == null) {
        unsetProjectNum();
      } else {
        setProjectNum((String)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case PRE_REPAY_ID:
      if (value == null) {
        unsetPreRepayId();
      } else {
        setPreRepayId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case REPAY_DATE:
      if (value == null) {
        unsetRepayDate();
      } else {
        setRepayDate((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case PROJECT_ID:
      return getProjectId();

    case PROJECT_NAME:
      return getProjectName();

    case CUS_NAME:
      return getCusName();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case REQUEST_ADV_DTTM:
      return getRequestAdvDttm();

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case PMUSER_NAME:
      return getPmuserName();

    case STATUS:
      return Integer.valueOf(getStatus());

    case REQUEST_ADV_DTTM_LAST:
      return getRequestAdvDttmLast();

    case COMPELTE_ADV_DTTM:
      return getCompelteAdvDttm();

    case ECO_TRADE:
      return getEcoTrade();

    case REQUEST_LOAN_DTTM:
      return getRequestLoanDttm();

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case PROJECT_NUM:
      return getProjectNum();

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case PRE_REPAY_ID:
      return Integer.valueOf(getPreRepayId());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case REQUEST_DTTM:
      return getRequestDttm();

    case REPAY_DATE:
      return getRepayDate();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case CUS_NAME:
      return isSetCusName();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case REQUEST_ADV_DTTM:
      return isSetRequestAdvDttm();
    case CUS_TYPE:
      return isSetCusType();
    case PMUSER_NAME:
      return isSetPmuserName();
    case STATUS:
      return isSetStatus();
    case REQUEST_ADV_DTTM_LAST:
      return isSetRequestAdvDttmLast();
    case COMPELTE_ADV_DTTM:
      return isSetCompelteAdvDttm();
    case ECO_TRADE:
      return isSetEcoTrade();
    case REQUEST_LOAN_DTTM:
      return isSetRequestLoanDttm();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case PROJECT_NUM:
      return isSetProjectNum();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case PRE_REPAY_ID:
      return isSetPreRepayId();
    case LOAN_ID:
      return isSetLoanId();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case REPAY_DATE:
      return isSetRepayDate();
    case PM_USER_ID:
      return isSetPmUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AdvRepaymentBaseDTO)
      return this.equals((AdvRepaymentBaseDTO)that);
    return false;
  }

  public boolean equals(AdvRepaymentBaseDTO that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_requestAdvDttm = true && this.isSetRequestAdvDttm();
    boolean that_present_requestAdvDttm = true && that.isSetRequestAdvDttm();
    if (this_present_requestAdvDttm || that_present_requestAdvDttm) {
      if (!(this_present_requestAdvDttm && that_present_requestAdvDttm))
        return false;
      if (!this.requestAdvDttm.equals(that.requestAdvDttm))
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_pmuserName = true && this.isSetPmuserName();
    boolean that_present_pmuserName = true && that.isSetPmuserName();
    if (this_present_pmuserName || that_present_pmuserName) {
      if (!(this_present_pmuserName && that_present_pmuserName))
        return false;
      if (!this.pmuserName.equals(that.pmuserName))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_requestAdvDttmLast = true && this.isSetRequestAdvDttmLast();
    boolean that_present_requestAdvDttmLast = true && that.isSetRequestAdvDttmLast();
    if (this_present_requestAdvDttmLast || that_present_requestAdvDttmLast) {
      if (!(this_present_requestAdvDttmLast && that_present_requestAdvDttmLast))
        return false;
      if (!this.requestAdvDttmLast.equals(that.requestAdvDttmLast))
        return false;
    }

    boolean this_present_compelteAdvDttm = true && this.isSetCompelteAdvDttm();
    boolean that_present_compelteAdvDttm = true && that.isSetCompelteAdvDttm();
    if (this_present_compelteAdvDttm || that_present_compelteAdvDttm) {
      if (!(this_present_compelteAdvDttm && that_present_compelteAdvDttm))
        return false;
      if (!this.compelteAdvDttm.equals(that.compelteAdvDttm))
        return false;
    }

    boolean this_present_ecoTrade = true && this.isSetEcoTrade();
    boolean that_present_ecoTrade = true && that.isSetEcoTrade();
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (!this.ecoTrade.equals(that.ecoTrade))
        return false;
    }

    boolean this_present_requestLoanDttm = true && this.isSetRequestLoanDttm();
    boolean that_present_requestLoanDttm = true && that.isSetRequestLoanDttm();
    if (this_present_requestLoanDttm || that_present_requestLoanDttm) {
      if (!(this_present_requestLoanDttm && that_present_requestLoanDttm))
        return false;
      if (!this.requestLoanDttm.equals(that.requestLoanDttm))
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_projectNum = true && this.isSetProjectNum();
    boolean that_present_projectNum = true && that.isSetProjectNum();
    if (this_present_projectNum || that_present_projectNum) {
      if (!(this_present_projectNum && that_present_projectNum))
        return false;
      if (!this.projectNum.equals(that.projectNum))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_preRepayId = true;
    boolean that_present_preRepayId = true;
    if (this_present_preRepayId || that_present_preRepayId) {
      if (!(this_present_preRepayId && that_present_preRepayId))
        return false;
      if (this.preRepayId != that.preRepayId)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_repayDate = true && this.isSetRepayDate();
    boolean that_present_repayDate = true && that.isSetRepayDate();
    if (this_present_repayDate || that_present_repayDate) {
      if (!(this_present_repayDate && that_present_repayDate))
        return false;
      if (!this.repayDate.equals(that.repayDate))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_requestAdvDttm = true && (isSetRequestAdvDttm());
    list.add(present_requestAdvDttm);
    if (present_requestAdvDttm)
      list.add(requestAdvDttm);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_pmuserName = true && (isSetPmuserName());
    list.add(present_pmuserName);
    if (present_pmuserName)
      list.add(pmuserName);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_requestAdvDttmLast = true && (isSetRequestAdvDttmLast());
    list.add(present_requestAdvDttmLast);
    if (present_requestAdvDttmLast)
      list.add(requestAdvDttmLast);

    boolean present_compelteAdvDttm = true && (isSetCompelteAdvDttm());
    list.add(present_compelteAdvDttm);
    if (present_compelteAdvDttm)
      list.add(compelteAdvDttm);

    boolean present_ecoTrade = true && (isSetEcoTrade());
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_requestLoanDttm = true && (isSetRequestLoanDttm());
    list.add(present_requestLoanDttm);
    if (present_requestLoanDttm)
      list.add(requestLoanDttm);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_projectNum = true && (isSetProjectNum());
    list.add(present_projectNum);
    if (present_projectNum)
      list.add(projectNum);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_preRepayId = true;
    list.add(present_preRepayId);
    if (present_preRepayId)
      list.add(preRepayId);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_repayDate = true && (isSetRepayDate());
    list.add(present_repayDate);
    if (present_repayDate)
      list.add(repayDate);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    return list.hashCode();
  }

  @Override
  public int compareTo(AdvRepaymentBaseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestAdvDttm()).compareTo(other.isSetRequestAdvDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestAdvDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestAdvDttm, other.requestAdvDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmuserName()).compareTo(other.isSetPmuserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmuserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmuserName, other.pmuserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestAdvDttmLast()).compareTo(other.isSetRequestAdvDttmLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestAdvDttmLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestAdvDttmLast, other.requestAdvDttmLast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompelteAdvDttm()).compareTo(other.isSetCompelteAdvDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompelteAdvDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compelteAdvDttm, other.compelteAdvDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestLoanDttm()).compareTo(other.isSetRequestLoanDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestLoanDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestLoanDttm, other.requestLoanDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNum()).compareTo(other.isSetProjectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNum, other.projectNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayId()).compareTo(other.isSetPreRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayId, other.preRepayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDate()).compareTo(other.isSetRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDate, other.repayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AdvRepaymentBaseDTO(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestAdvDttm:");
    if (this.requestAdvDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestAdvDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmuserName:");
    if (this.pmuserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmuserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestAdvDttmLast:");
    if (this.requestAdvDttmLast == null) {
      sb.append("null");
    } else {
      sb.append(this.requestAdvDttmLast);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compelteAdvDttm:");
    if (this.compelteAdvDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.compelteAdvDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    if (this.ecoTrade == null) {
      sb.append("null");
    } else {
      sb.append(this.ecoTrade);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestLoanDttm:");
    if (this.requestLoanDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestLoanDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNum:");
    if (this.projectNum == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayId:");
    sb.append(this.preRepayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDate:");
    if (this.repayDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdvRepaymentBaseDTOStandardSchemeFactory implements SchemeFactory {
    public AdvRepaymentBaseDTOStandardScheme getScheme() {
      return new AdvRepaymentBaseDTOStandardScheme();
    }
  }

  private static class AdvRepaymentBaseDTOStandardScheme extends StandardScheme<AdvRepaymentBaseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdvRepaymentBaseDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_ADV_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestAdvDttm = iprot.readString();
              struct.setRequestAdvDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PMUSER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmuserName = iprot.readString();
              struct.setPmuserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUEST_ADV_DTTM_LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestAdvDttmLast = iprot.readString();
              struct.setRequestAdvDttmLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMPELTE_ADV_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compelteAdvDttm = iprot.readString();
              struct.setCompelteAdvDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecoTrade = iprot.readString();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUEST_LOAN_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestLoanDttm = iprot.readString();
              struct.setRequestLoanDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PROJECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNum = iprot.readString();
              struct.setProjectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRE_REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preRepayId = iprot.readI32();
              struct.setPreRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDate = iprot.readString();
              struct.setRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdvRepaymentBaseDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      if (struct.requestAdvDttm != null) {
        oprot.writeFieldBegin(REQUEST_ADV_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestAdvDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      if (struct.pmuserName != null) {
        oprot.writeFieldBegin(PMUSER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmuserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.requestAdvDttmLast != null) {
        oprot.writeFieldBegin(REQUEST_ADV_DTTM_LAST_FIELD_DESC);
        oprot.writeString(struct.requestAdvDttmLast);
        oprot.writeFieldEnd();
      }
      if (struct.compelteAdvDttm != null) {
        oprot.writeFieldBegin(COMPELTE_ADV_DTTM_FIELD_DESC);
        oprot.writeString(struct.compelteAdvDttm);
        oprot.writeFieldEnd();
      }
      if (struct.ecoTrade != null) {
        oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
        oprot.writeString(struct.ecoTrade);
        oprot.writeFieldEnd();
      }
      if (struct.requestLoanDttm != null) {
        oprot.writeFieldBegin(REQUEST_LOAN_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestLoanDttm);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      if (struct.projectNum != null) {
        oprot.writeFieldBegin(PROJECT_NUM_FIELD_DESC);
        oprot.writeString(struct.projectNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.preRepayId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.repayDate != null) {
        oprot.writeFieldBegin(REPAY_DATE_FIELD_DESC);
        oprot.writeString(struct.repayDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdvRepaymentBaseDTOTupleSchemeFactory implements SchemeFactory {
    public AdvRepaymentBaseDTOTupleScheme getScheme() {
      return new AdvRepaymentBaseDTOTupleScheme();
    }
  }

  private static class AdvRepaymentBaseDTOTupleScheme extends TupleScheme<AdvRepaymentBaseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdvRepaymentBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectName()) {
        optionals.set(2);
      }
      if (struct.isSetCusName()) {
        optionals.set(3);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(4);
      }
      if (struct.isSetRequestAdvDttm()) {
        optionals.set(5);
      }
      if (struct.isSetCusType()) {
        optionals.set(6);
      }
      if (struct.isSetPmuserName()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetRequestAdvDttmLast()) {
        optionals.set(9);
      }
      if (struct.isSetCompelteAdvDttm()) {
        optionals.set(10);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(11);
      }
      if (struct.isSetRequestLoanDttm()) {
        optionals.set(12);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(13);
      }
      if (struct.isSetProjectNum()) {
        optionals.set(14);
      }
      if (struct.isSetRows()) {
        optionals.set(15);
      }
      if (struct.isSetPage()) {
        optionals.set(16);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(17);
      }
      if (struct.isSetPreRepayId()) {
        optionals.set(18);
      }
      if (struct.isSetLoanId()) {
        optionals.set(19);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(20);
      }
      if (struct.isSetRepayDate()) {
        optionals.set(21);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetRequestAdvDttm()) {
        oprot.writeString(struct.requestAdvDttm);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetPmuserName()) {
        oprot.writeString(struct.pmuserName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRequestAdvDttmLast()) {
        oprot.writeString(struct.requestAdvDttmLast);
      }
      if (struct.isSetCompelteAdvDttm()) {
        oprot.writeString(struct.compelteAdvDttm);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeString(struct.ecoTrade);
      }
      if (struct.isSetRequestLoanDttm()) {
        oprot.writeString(struct.requestLoanDttm);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetProjectNum()) {
        oprot.writeString(struct.projectNum);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetPreRepayId()) {
        oprot.writeI32(struct.preRepayId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetRepayDate()) {
        oprot.writeString(struct.repayDate);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdvRepaymentBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestAdvDttm = iprot.readString();
        struct.setRequestAdvDttmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pmuserName = iprot.readString();
        struct.setPmuserNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requestAdvDttmLast = iprot.readString();
        struct.setRequestAdvDttmLastIsSet(true);
      }
      if (incoming.get(10)) {
        struct.compelteAdvDttm = iprot.readString();
        struct.setCompelteAdvDttmIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ecoTrade = iprot.readString();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requestLoanDttm = iprot.readString();
        struct.setRequestLoanDttmIsSet(true);
      }
      if (incoming.get(13)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.projectNum = iprot.readString();
        struct.setProjectNumIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(18)) {
        struct.preRepayId = iprot.readI32();
        struct.setPreRepayIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(21)) {
        struct.repayDate = iprot.readString();
        struct.setRepayDateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
    }
  }

}


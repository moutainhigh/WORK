/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.partner;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-25")
public class ProjectPartner implements org.apache.thrift.TBase<ProjectPartner, ProjectPartner._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectPartner> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectPartner");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PARTNER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("requestFiles", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("requestTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField APPROVAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField APPROVAL_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalComment", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SUBMIT_APPROVAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submitApprovalTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IS_CLOSED_FIELD_DESC = new org.apache.thrift.protocol.TField("isClosed", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LOAN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanStatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField LOAN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTime", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LOAN_RESULT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("loanResultTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REPAYMENT_REPURCHASE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRepurchaseType", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField REPAYMENT_REPURCHASE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRepurchaseStatus", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REPAYMENT_REPURCHASE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRepurchaseTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RP_RESULT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("rpResultTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LOAN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField TOTAL_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCost", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField PREMIUM_FIELD_DESC = new org.apache.thrift.protocol.TField("premium", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField GUARANTEE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteeFee", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField XI_FEE_REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("xiFeeRequestTime", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField XI_FEE_RESULT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("xiFeeResultTime", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField XI_FEE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("xiFeeStatus", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField PROJECT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectStatus", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField PROJECT_STATUS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectStatusTime", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField FILE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileIds", org.apache.thrift.protocol.TType.LIST, (short)32);
  private static final org.apache.thrift.protocol.TField APPROVAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalStatus", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)35);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField REPAYMENT_VOUCHER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentVoucherPath", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField XI_FEE_VOUCHER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("xiFeeVoucherPath", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField LOAN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanIds", org.apache.thrift.protocol.TType.LIST, (short)40);
  private static final org.apache.thrift.protocol.TField QUERY_XI_FEE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("queryXiFeeStatus", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField RE_APPLY_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reApplyReason", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField APPROVE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("approveMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanStatus", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanRequestTime", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_RESULT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanResultTime", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanReason", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField LOAN_JUSTICE_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("loanJusticeFiles", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField LOAN_BLANK_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("loanBlankFiles", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFiles", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField APPLY_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("applyLoanDate", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField LOAN_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRemark", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBank", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBankBranch", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField PAYMENT_ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAcctName", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField PAYMENT_ACCT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAcctNo", org.apache.thrift.protocol.TType.STRING, (short)56);
  private static final org.apache.thrift.protocol.TField PAYMENT_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)57);
  private static final org.apache.thrift.protocol.TField PAYMENT_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentCityCode", org.apache.thrift.protocol.TType.STRING, (short)58);
  private static final org.apache.thrift.protocol.TField PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceCode", org.apache.thrift.protocol.TType.STRING, (short)59);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.STRING, (short)60);
  private static final org.apache.thrift.protocol.TField LOAN_EFFE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanEffeDate", org.apache.thrift.protocol.TType.STRING, (short)61);
  private static final org.apache.thrift.protocol.TField PARTNER_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerLoanDate", org.apache.thrift.protocol.TType.STRING, (short)62);
  private static final org.apache.thrift.protocol.TField PARTNER_LOAN_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerLoanFile", org.apache.thrift.protocol.TType.STRING, (short)63);
  private static final org.apache.thrift.protocol.TField PARTNER_REAL_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerRealRefundDate", org.apache.thrift.protocol.TType.STRING, (short)64);
  private static final org.apache.thrift.protocol.TField PARTNER_REFUND_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerRefundFile", org.apache.thrift.protocol.TType.STRING, (short)65);
  private static final org.apache.thrift.protocol.TField PARTNER_INTERESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerInterests", org.apache.thrift.protocol.TType.DOUBLE, (short)66);
  private static final org.apache.thrift.protocol.TField REPAYMENT_REPURCHASE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRepurchaseRemark", org.apache.thrift.protocol.TType.STRING, (short)67);
  private static final org.apache.thrift.protocol.TField REFUND_LOAN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundLoanAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)68);
  private static final org.apache.thrift.protocol.TField REFUND_XIFEE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundXifee", org.apache.thrift.protocol.TType.DOUBLE, (short)69);
  private static final org.apache.thrift.protocol.TField REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDate", org.apache.thrift.protocol.TType.STRING, (short)70);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCategory", org.apache.thrift.protocol.TType.I32, (short)71);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATEGORY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCategoryStr", org.apache.thrift.protocol.TType.STRING, (short)72);
  private static final org.apache.thrift.protocol.TField PAY_ACCT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("payAcctNo", org.apache.thrift.protocol.TType.STRING, (short)73);
  private static final org.apache.thrift.protocol.TField PAY_ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("payAcctName", org.apache.thrift.protocol.TType.STRING, (short)74);
  private static final org.apache.thrift.protocol.TField PAY_BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("payBankName", org.apache.thrift.protocol.TType.STRING, (short)75);
  private static final org.apache.thrift.protocol.TField PAY_BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("payBankCode", org.apache.thrift.protocol.TType.STRING, (short)76);
  private static final org.apache.thrift.protocol.TField PAY_BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("payBankBranch", org.apache.thrift.protocol.TType.STRING, (short)77);
  private static final org.apache.thrift.protocol.TField PAY_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("payProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)78);
  private static final org.apache.thrift.protocol.TField PAY_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("payCityCode", org.apache.thrift.protocol.TType.STRING, (short)79);
  private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.STRING, (short)80);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)81);
  private static final org.apache.thrift.protocol.TField ORDER_BY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderByType", org.apache.thrift.protocol.TType.I32, (short)82);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)83);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanDays", org.apache.thrift.protocol.TType.I32, (short)84);
  private static final org.apache.thrift.protocol.TField APPLY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("applyDate", org.apache.thrift.protocol.TType.I32, (short)85);
  private static final org.apache.thrift.protocol.TField HOUSE_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)86);
  private static final org.apache.thrift.protocol.TField HOUSE_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseCityCode", org.apache.thrift.protocol.TType.STRING, (short)87);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)88);
  private static final org.apache.thrift.protocol.TField PARTNER_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerOrderCode", org.apache.thrift.protocol.TType.STRING, (short)89);
  private static final org.apache.thrift.protocol.TField LOAN_PERIOD_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanPeriodLimit", org.apache.thrift.protocol.TType.I32, (short)90);
  private static final org.apache.thrift.protocol.TField IS_CREDIT_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isCreditLoan", org.apache.thrift.protocol.TType.I32, (short)91);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBankPhone", org.apache.thrift.protocol.TType.STRING, (short)92);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_LINE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBankLineNo", org.apache.thrift.protocol.TType.STRING, (short)93);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatusList", org.apache.thrift.protocol.TType.LIST, (short)94);
  private static final org.apache.thrift.protocol.TField REFUND_TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundTotalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)95);
  private static final org.apache.thrift.protocol.TField REFUND_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("refundPenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)96);
  private static final org.apache.thrift.protocol.TField REFUND_FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFine", org.apache.thrift.protocol.TType.DOUBLE, (short)97);
  private static final org.apache.thrift.protocol.TField REFUND_COMPDINTE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundCompdinte", org.apache.thrift.protocol.TType.DOUBLE, (short)98);
  private static final org.apache.thrift.protocol.TField PARTNER_PLATFORM_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerPlatformOrderCode", org.apache.thrift.protocol.TType.STRING, (short)99);
  private static final org.apache.thrift.protocol.TField PLAN_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("planRefundDate", org.apache.thrift.protocol.TType.STRING, (short)100);
  private static final org.apache.thrift.protocol.TField FROM_PLAN_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromPlanRefundDate", org.apache.thrift.protocol.TType.STRING, (short)101);
  private static final org.apache.thrift.protocol.TField TO_PLAN_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toPlanRefundDate", org.apache.thrift.protocol.TType.STRING, (short)102);
  private static final org.apache.thrift.protocol.TField PARTNER_PUSH_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerPushAccount", org.apache.thrift.protocol.TType.I32, (short)103);
  private static final org.apache.thrift.protocol.TField PARTNER_GROSS_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerGrossRate", org.apache.thrift.protocol.TType.DOUBLE, (short)104);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectPartnerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectPartnerTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String loanId; // required
  public int requestStatus; // required
  public String partnerNo; // required
  public String requestFiles; // required
  public String remark; // required
  public String requestTime; // required
  public String updateTime; // required
  public String approvalTime; // required
  public String approvalComment; // required
  public String submitApprovalTime; // required
  public int isClosed; // required
  public int loanStatus; // required
  public String loanTime; // required
  public String loanResultTime; // required
  public int repaymentRepurchaseType; // required
  public int repaymentRepurchaseStatus; // required
  public String repaymentRepurchaseTime; // required
  public String rpResultTime; // required
  public double loanAmount; // required
  public double totalCost; // required
  public double premium; // required
  public double guaranteeFee; // required
  public String xiFeeRequestTime; // required
  public String xiFeeResultTime; // required
  public int xiFeeStatus; // required
  public String projectNumber; // required
  public String projectName; // required
  public int projectStatus; // required
  public String projectStatusTime; // required
  public List<Integer> fileIds; // required
  public int approvalStatus; // required
  public int pmUserId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public String repaymentVoucherPath; // required
  public String xiFeeVoucherPath; // required
  public List<String> loanIds; // required
  public int queryXiFeeStatus; // required
  public String reApplyReason; // required
  public double approveMoney; // required
  public int confirmLoanStatus; // required
  public String confirmLoanRequestTime; // required
  public String confirmLoanResultTime; // required
  public String confirmLoanReason; // required
  public String loanJusticeFiles; // required
  public String loanBlankFiles; // required
  public String loanOtherFiles; // required
  public String applyLoanDate; // required
  public String loanRemark; // required
  public String paymentBank; // required
  public String paymentBankBranch; // required
  public String paymentAcctName; // required
  public String paymentAcctNo; // required
  public String paymentProvinceCode; // required
  public String paymentCityCode; // required
  public String provinceCode; // required
  public String cityCode; // required
  public String loanEffeDate; // required
  public String partnerLoanDate; // required
  public String partnerLoanFile; // required
  public String partnerRealRefundDate; // required
  public String partnerRefundFile; // required
  public double partnerInterests; // required
  public String repaymentRepurchaseRemark; // required
  public double refundLoanAmount; // required
  public double refundXifee; // required
  public String refundDate; // required
  public int businessCategory; // required
  public String businessCategoryStr; // required
  public String payAcctNo; // required
  public String payAcctName; // required
  public String payBankName; // required
  public String payBankCode; // required
  public String payBankBranch; // required
  public String payProvinceCode; // required
  public String payCityCode; // required
  public String beginTime; // required
  public String endTime; // required
  public int orderByType; // required
  public double confirmLoanMoney; // required
  public int confirmLoanDays; // required
  public int applyDate; // required
  public String houseProvinceCode; // required
  public String houseCityCode; // required
  public int projectSource; // required
  public String partnerOrderCode; // required
  public int loanPeriodLimit; // required
  public int isCreditLoan; // required
  public String paymentBankPhone; // required
  public String paymentBankLineNo; // required
  public List<Integer> requestStatusList; // required
  public double refundTotalAmount; // required
  public double refundPenalty; // required
  public double refundFine; // required
  public double refundCompdinte; // required
  public String partnerPlatformOrderCode; // required
  public String planRefundDate; // required
  public String fromPlanRefundDate; // required
  public String toPlanRefundDate; // required
  public int partnerPushAccount; // required
  public double partnerGrossRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    LOAN_ID((short)3, "loanId"),
    REQUEST_STATUS((short)4, "requestStatus"),
    PARTNER_NO((short)5, "partnerNo"),
    REQUEST_FILES((short)6, "requestFiles"),
    REMARK((short)7, "remark"),
    REQUEST_TIME((short)8, "requestTime"),
    UPDATE_TIME((short)9, "updateTime"),
    APPROVAL_TIME((short)10, "approvalTime"),
    APPROVAL_COMMENT((short)11, "approvalComment"),
    SUBMIT_APPROVAL_TIME((short)12, "submitApprovalTime"),
    IS_CLOSED((short)13, "isClosed"),
    LOAN_STATUS((short)14, "loanStatus"),
    LOAN_TIME((short)15, "loanTime"),
    LOAN_RESULT_TIME((short)16, "loanResultTime"),
    REPAYMENT_REPURCHASE_TYPE((short)17, "repaymentRepurchaseType"),
    REPAYMENT_REPURCHASE_STATUS((short)18, "repaymentRepurchaseStatus"),
    REPAYMENT_REPURCHASE_TIME((short)19, "repaymentRepurchaseTime"),
    RP_RESULT_TIME((short)20, "rpResultTime"),
    LOAN_AMOUNT((short)21, "loanAmount"),
    TOTAL_COST((short)22, "totalCost"),
    PREMIUM((short)23, "premium"),
    GUARANTEE_FEE((short)24, "guaranteeFee"),
    XI_FEE_REQUEST_TIME((short)25, "xiFeeRequestTime"),
    XI_FEE_RESULT_TIME((short)26, "xiFeeResultTime"),
    XI_FEE_STATUS((short)27, "xiFeeStatus"),
    PROJECT_NUMBER((short)28, "projectNumber"),
    PROJECT_NAME((short)29, "projectName"),
    PROJECT_STATUS((short)30, "projectStatus"),
    PROJECT_STATUS_TIME((short)31, "projectStatusTime"),
    FILE_IDS((short)32, "fileIds"),
    APPROVAL_STATUS((short)33, "approvalStatus"),
    PM_USER_ID((short)34, "pmUserId"),
    USER_IDS((short)35, "userIds"),
    PAGE((short)36, "page"),
    ROWS((short)37, "rows"),
    REPAYMENT_VOUCHER_PATH((short)38, "repaymentVoucherPath"),
    XI_FEE_VOUCHER_PATH((short)39, "xiFeeVoucherPath"),
    LOAN_IDS((short)40, "loanIds"),
    QUERY_XI_FEE_STATUS((short)41, "queryXiFeeStatus"),
    RE_APPLY_REASON((short)42, "reApplyReason"),
    APPROVE_MONEY((short)43, "approveMoney"),
    CONFIRM_LOAN_STATUS((short)44, "confirmLoanStatus"),
    CONFIRM_LOAN_REQUEST_TIME((short)45, "confirmLoanRequestTime"),
    CONFIRM_LOAN_RESULT_TIME((short)46, "confirmLoanResultTime"),
    CONFIRM_LOAN_REASON((short)47, "confirmLoanReason"),
    LOAN_JUSTICE_FILES((short)48, "loanJusticeFiles"),
    LOAN_BLANK_FILES((short)49, "loanBlankFiles"),
    LOAN_OTHER_FILES((short)50, "loanOtherFiles"),
    APPLY_LOAN_DATE((short)51, "applyLoanDate"),
    LOAN_REMARK((short)52, "loanRemark"),
    PAYMENT_BANK((short)53, "paymentBank"),
    PAYMENT_BANK_BRANCH((short)54, "paymentBankBranch"),
    PAYMENT_ACCT_NAME((short)55, "paymentAcctName"),
    PAYMENT_ACCT_NO((short)56, "paymentAcctNo"),
    PAYMENT_PROVINCE_CODE((short)57, "paymentProvinceCode"),
    PAYMENT_CITY_CODE((short)58, "paymentCityCode"),
    PROVINCE_CODE((short)59, "provinceCode"),
    CITY_CODE((short)60, "cityCode"),
    LOAN_EFFE_DATE((short)61, "loanEffeDate"),
    PARTNER_LOAN_DATE((short)62, "partnerLoanDate"),
    PARTNER_LOAN_FILE((short)63, "partnerLoanFile"),
    PARTNER_REAL_REFUND_DATE((short)64, "partnerRealRefundDate"),
    PARTNER_REFUND_FILE((short)65, "partnerRefundFile"),
    PARTNER_INTERESTS((short)66, "partnerInterests"),
    REPAYMENT_REPURCHASE_REMARK((short)67, "repaymentRepurchaseRemark"),
    REFUND_LOAN_AMOUNT((short)68, "refundLoanAmount"),
    REFUND_XIFEE((short)69, "refundXifee"),
    REFUND_DATE((short)70, "refundDate"),
    BUSINESS_CATEGORY((short)71, "businessCategory"),
    BUSINESS_CATEGORY_STR((short)72, "businessCategoryStr"),
    PAY_ACCT_NO((short)73, "payAcctNo"),
    PAY_ACCT_NAME((short)74, "payAcctName"),
    PAY_BANK_NAME((short)75, "payBankName"),
    PAY_BANK_CODE((short)76, "payBankCode"),
    PAY_BANK_BRANCH((short)77, "payBankBranch"),
    PAY_PROVINCE_CODE((short)78, "payProvinceCode"),
    PAY_CITY_CODE((short)79, "payCityCode"),
    BEGIN_TIME((short)80, "beginTime"),
    END_TIME((short)81, "endTime"),
    ORDER_BY_TYPE((short)82, "orderByType"),
    CONFIRM_LOAN_MONEY((short)83, "confirmLoanMoney"),
    CONFIRM_LOAN_DAYS((short)84, "confirmLoanDays"),
    APPLY_DATE((short)85, "applyDate"),
    HOUSE_PROVINCE_CODE((short)86, "houseProvinceCode"),
    HOUSE_CITY_CODE((short)87, "houseCityCode"),
    PROJECT_SOURCE((short)88, "projectSource"),
    PARTNER_ORDER_CODE((short)89, "partnerOrderCode"),
    LOAN_PERIOD_LIMIT((short)90, "loanPeriodLimit"),
    IS_CREDIT_LOAN((short)91, "isCreditLoan"),
    PAYMENT_BANK_PHONE((short)92, "paymentBankPhone"),
    PAYMENT_BANK_LINE_NO((short)93, "paymentBankLineNo"),
    REQUEST_STATUS_LIST((short)94, "requestStatusList"),
    REFUND_TOTAL_AMOUNT((short)95, "refundTotalAmount"),
    REFUND_PENALTY((short)96, "refundPenalty"),
    REFUND_FINE((short)97, "refundFine"),
    REFUND_COMPDINTE((short)98, "refundCompdinte"),
    PARTNER_PLATFORM_ORDER_CODE((short)99, "partnerPlatformOrderCode"),
    PLAN_REFUND_DATE((short)100, "planRefundDate"),
    FROM_PLAN_REFUND_DATE((short)101, "fromPlanRefundDate"),
    TO_PLAN_REFUND_DATE((short)102, "toPlanRefundDate"),
    PARTNER_PUSH_ACCOUNT((short)103, "partnerPushAccount"),
    PARTNER_GROSS_RATE((short)104, "partnerGrossRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // LOAN_ID
          return LOAN_ID;
        case 4: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 5: // PARTNER_NO
          return PARTNER_NO;
        case 6: // REQUEST_FILES
          return REQUEST_FILES;
        case 7: // REMARK
          return REMARK;
        case 8: // REQUEST_TIME
          return REQUEST_TIME;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        case 10: // APPROVAL_TIME
          return APPROVAL_TIME;
        case 11: // APPROVAL_COMMENT
          return APPROVAL_COMMENT;
        case 12: // SUBMIT_APPROVAL_TIME
          return SUBMIT_APPROVAL_TIME;
        case 13: // IS_CLOSED
          return IS_CLOSED;
        case 14: // LOAN_STATUS
          return LOAN_STATUS;
        case 15: // LOAN_TIME
          return LOAN_TIME;
        case 16: // LOAN_RESULT_TIME
          return LOAN_RESULT_TIME;
        case 17: // REPAYMENT_REPURCHASE_TYPE
          return REPAYMENT_REPURCHASE_TYPE;
        case 18: // REPAYMENT_REPURCHASE_STATUS
          return REPAYMENT_REPURCHASE_STATUS;
        case 19: // REPAYMENT_REPURCHASE_TIME
          return REPAYMENT_REPURCHASE_TIME;
        case 20: // RP_RESULT_TIME
          return RP_RESULT_TIME;
        case 21: // LOAN_AMOUNT
          return LOAN_AMOUNT;
        case 22: // TOTAL_COST
          return TOTAL_COST;
        case 23: // PREMIUM
          return PREMIUM;
        case 24: // GUARANTEE_FEE
          return GUARANTEE_FEE;
        case 25: // XI_FEE_REQUEST_TIME
          return XI_FEE_REQUEST_TIME;
        case 26: // XI_FEE_RESULT_TIME
          return XI_FEE_RESULT_TIME;
        case 27: // XI_FEE_STATUS
          return XI_FEE_STATUS;
        case 28: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 29: // PROJECT_NAME
          return PROJECT_NAME;
        case 30: // PROJECT_STATUS
          return PROJECT_STATUS;
        case 31: // PROJECT_STATUS_TIME
          return PROJECT_STATUS_TIME;
        case 32: // FILE_IDS
          return FILE_IDS;
        case 33: // APPROVAL_STATUS
          return APPROVAL_STATUS;
        case 34: // PM_USER_ID
          return PM_USER_ID;
        case 35: // USER_IDS
          return USER_IDS;
        case 36: // PAGE
          return PAGE;
        case 37: // ROWS
          return ROWS;
        case 38: // REPAYMENT_VOUCHER_PATH
          return REPAYMENT_VOUCHER_PATH;
        case 39: // XI_FEE_VOUCHER_PATH
          return XI_FEE_VOUCHER_PATH;
        case 40: // LOAN_IDS
          return LOAN_IDS;
        case 41: // QUERY_XI_FEE_STATUS
          return QUERY_XI_FEE_STATUS;
        case 42: // RE_APPLY_REASON
          return RE_APPLY_REASON;
        case 43: // APPROVE_MONEY
          return APPROVE_MONEY;
        case 44: // CONFIRM_LOAN_STATUS
          return CONFIRM_LOAN_STATUS;
        case 45: // CONFIRM_LOAN_REQUEST_TIME
          return CONFIRM_LOAN_REQUEST_TIME;
        case 46: // CONFIRM_LOAN_RESULT_TIME
          return CONFIRM_LOAN_RESULT_TIME;
        case 47: // CONFIRM_LOAN_REASON
          return CONFIRM_LOAN_REASON;
        case 48: // LOAN_JUSTICE_FILES
          return LOAN_JUSTICE_FILES;
        case 49: // LOAN_BLANK_FILES
          return LOAN_BLANK_FILES;
        case 50: // LOAN_OTHER_FILES
          return LOAN_OTHER_FILES;
        case 51: // APPLY_LOAN_DATE
          return APPLY_LOAN_DATE;
        case 52: // LOAN_REMARK
          return LOAN_REMARK;
        case 53: // PAYMENT_BANK
          return PAYMENT_BANK;
        case 54: // PAYMENT_BANK_BRANCH
          return PAYMENT_BANK_BRANCH;
        case 55: // PAYMENT_ACCT_NAME
          return PAYMENT_ACCT_NAME;
        case 56: // PAYMENT_ACCT_NO
          return PAYMENT_ACCT_NO;
        case 57: // PAYMENT_PROVINCE_CODE
          return PAYMENT_PROVINCE_CODE;
        case 58: // PAYMENT_CITY_CODE
          return PAYMENT_CITY_CODE;
        case 59: // PROVINCE_CODE
          return PROVINCE_CODE;
        case 60: // CITY_CODE
          return CITY_CODE;
        case 61: // LOAN_EFFE_DATE
          return LOAN_EFFE_DATE;
        case 62: // PARTNER_LOAN_DATE
          return PARTNER_LOAN_DATE;
        case 63: // PARTNER_LOAN_FILE
          return PARTNER_LOAN_FILE;
        case 64: // PARTNER_REAL_REFUND_DATE
          return PARTNER_REAL_REFUND_DATE;
        case 65: // PARTNER_REFUND_FILE
          return PARTNER_REFUND_FILE;
        case 66: // PARTNER_INTERESTS
          return PARTNER_INTERESTS;
        case 67: // REPAYMENT_REPURCHASE_REMARK
          return REPAYMENT_REPURCHASE_REMARK;
        case 68: // REFUND_LOAN_AMOUNT
          return REFUND_LOAN_AMOUNT;
        case 69: // REFUND_XIFEE
          return REFUND_XIFEE;
        case 70: // REFUND_DATE
          return REFUND_DATE;
        case 71: // BUSINESS_CATEGORY
          return BUSINESS_CATEGORY;
        case 72: // BUSINESS_CATEGORY_STR
          return BUSINESS_CATEGORY_STR;
        case 73: // PAY_ACCT_NO
          return PAY_ACCT_NO;
        case 74: // PAY_ACCT_NAME
          return PAY_ACCT_NAME;
        case 75: // PAY_BANK_NAME
          return PAY_BANK_NAME;
        case 76: // PAY_BANK_CODE
          return PAY_BANK_CODE;
        case 77: // PAY_BANK_BRANCH
          return PAY_BANK_BRANCH;
        case 78: // PAY_PROVINCE_CODE
          return PAY_PROVINCE_CODE;
        case 79: // PAY_CITY_CODE
          return PAY_CITY_CODE;
        case 80: // BEGIN_TIME
          return BEGIN_TIME;
        case 81: // END_TIME
          return END_TIME;
        case 82: // ORDER_BY_TYPE
          return ORDER_BY_TYPE;
        case 83: // CONFIRM_LOAN_MONEY
          return CONFIRM_LOAN_MONEY;
        case 84: // CONFIRM_LOAN_DAYS
          return CONFIRM_LOAN_DAYS;
        case 85: // APPLY_DATE
          return APPLY_DATE;
        case 86: // HOUSE_PROVINCE_CODE
          return HOUSE_PROVINCE_CODE;
        case 87: // HOUSE_CITY_CODE
          return HOUSE_CITY_CODE;
        case 88: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 89: // PARTNER_ORDER_CODE
          return PARTNER_ORDER_CODE;
        case 90: // LOAN_PERIOD_LIMIT
          return LOAN_PERIOD_LIMIT;
        case 91: // IS_CREDIT_LOAN
          return IS_CREDIT_LOAN;
        case 92: // PAYMENT_BANK_PHONE
          return PAYMENT_BANK_PHONE;
        case 93: // PAYMENT_BANK_LINE_NO
          return PAYMENT_BANK_LINE_NO;
        case 94: // REQUEST_STATUS_LIST
          return REQUEST_STATUS_LIST;
        case 95: // REFUND_TOTAL_AMOUNT
          return REFUND_TOTAL_AMOUNT;
        case 96: // REFUND_PENALTY
          return REFUND_PENALTY;
        case 97: // REFUND_FINE
          return REFUND_FINE;
        case 98: // REFUND_COMPDINTE
          return REFUND_COMPDINTE;
        case 99: // PARTNER_PLATFORM_ORDER_CODE
          return PARTNER_PLATFORM_ORDER_CODE;
        case 100: // PLAN_REFUND_DATE
          return PLAN_REFUND_DATE;
        case 101: // FROM_PLAN_REFUND_DATE
          return FROM_PLAN_REFUND_DATE;
        case 102: // TO_PLAN_REFUND_DATE
          return TO_PLAN_REFUND_DATE;
        case 103: // PARTNER_PUSH_ACCOUNT
          return PARTNER_PUSH_ACCOUNT;
        case 104: // PARTNER_GROSS_RATE
          return PARTNER_GROSS_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __REQUESTSTATUS_ISSET_ID = 2;
  private static final int __ISCLOSED_ISSET_ID = 3;
  private static final int __LOANSTATUS_ISSET_ID = 4;
  private static final int __REPAYMENTREPURCHASETYPE_ISSET_ID = 5;
  private static final int __REPAYMENTREPURCHASESTATUS_ISSET_ID = 6;
  private static final int __LOANAMOUNT_ISSET_ID = 7;
  private static final int __TOTALCOST_ISSET_ID = 8;
  private static final int __PREMIUM_ISSET_ID = 9;
  private static final int __GUARANTEEFEE_ISSET_ID = 10;
  private static final int __XIFEESTATUS_ISSET_ID = 11;
  private static final int __PROJECTSTATUS_ISSET_ID = 12;
  private static final int __APPROVALSTATUS_ISSET_ID = 13;
  private static final int __PMUSERID_ISSET_ID = 14;
  private static final int __PAGE_ISSET_ID = 15;
  private static final int __ROWS_ISSET_ID = 16;
  private static final int __QUERYXIFEESTATUS_ISSET_ID = 17;
  private static final int __APPROVEMONEY_ISSET_ID = 18;
  private static final int __CONFIRMLOANSTATUS_ISSET_ID = 19;
  private static final int __PARTNERINTERESTS_ISSET_ID = 20;
  private static final int __REFUNDLOANAMOUNT_ISSET_ID = 21;
  private static final int __REFUNDXIFEE_ISSET_ID = 22;
  private static final int __BUSINESSCATEGORY_ISSET_ID = 23;
  private static final int __ORDERBYTYPE_ISSET_ID = 24;
  private static final int __CONFIRMLOANMONEY_ISSET_ID = 25;
  private static final int __CONFIRMLOANDAYS_ISSET_ID = 26;
  private static final int __APPLYDATE_ISSET_ID = 27;
  private static final int __PROJECTSOURCE_ISSET_ID = 28;
  private static final int __LOANPERIODLIMIT_ISSET_ID = 29;
  private static final int __ISCREDITLOAN_ISSET_ID = 30;
  private static final int __REFUNDTOTALAMOUNT_ISSET_ID = 31;
  private static final int __REFUNDPENALTY_ISSET_ID = 32;
  private static final int __REFUNDFINE_ISSET_ID = 33;
  private static final int __REFUNDCOMPDINTE_ISSET_ID = 34;
  private static final int __PARTNERPUSHACCOUNT_ISSET_ID = 35;
  private static final int __PARTNERGROSSRATE_ISSET_ID = 36;
  private long __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_NO, new org.apache.thrift.meta_data.FieldMetaData("partnerNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_FILES, new org.apache.thrift.meta_data.FieldMetaData("requestFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("requestTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("approvalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("approvalComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBMIT_APPROVAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("submitApprovalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CLOSED, new org.apache.thrift.meta_data.FieldMetaData("isClosed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("loanStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_TIME, new org.apache.thrift.meta_data.FieldMetaData("loanTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_RESULT_TIME, new org.apache.thrift.meta_data.FieldMetaData("loanResultTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_REPURCHASE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repaymentRepurchaseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_REPURCHASE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("repaymentRepurchaseStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_REPURCHASE_TIME, new org.apache.thrift.meta_data.FieldMetaData("repaymentRepurchaseTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RP_RESULT_TIME, new org.apache.thrift.meta_data.FieldMetaData("rpResultTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("loanAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_COST, new org.apache.thrift.meta_data.FieldMetaData("totalCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREMIUM, new org.apache.thrift.meta_data.FieldMetaData("premium", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GUARANTEE_FEE, new org.apache.thrift.meta_data.FieldMetaData("guaranteeFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.XI_FEE_REQUEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("xiFeeRequestTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XI_FEE_RESULT_TIME, new org.apache.thrift.meta_data.FieldMetaData("xiFeeResultTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XI_FEE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("xiFeeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("projectStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_STATUS_TIME, new org.apache.thrift.meta_data.FieldMetaData("projectStatusTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_IDS, new org.apache.thrift.meta_data.FieldMetaData("fileIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.APPROVAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("approvalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_VOUCHER_PATH, new org.apache.thrift.meta_data.FieldMetaData("repaymentVoucherPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.XI_FEE_VOUCHER_PATH, new org.apache.thrift.meta_data.FieldMetaData("xiFeeVoucherPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_IDS, new org.apache.thrift.meta_data.FieldMetaData("loanIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_XI_FEE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("queryXiFeeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_APPLY_REASON, new org.apache.thrift.meta_data.FieldMetaData("reApplyReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("approveMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONFIRM_LOAN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIRM_LOAN_REQUEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanRequestTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIRM_LOAN_RESULT_TIME, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanResultTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIRM_LOAN_REASON, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_JUSTICE_FILES, new org.apache.thrift.meta_data.FieldMetaData("loanJusticeFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_BLANK_FILES, new org.apache.thrift.meta_data.FieldMetaData("loanBlankFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_OTHER_FILES, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("applyLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_REMARK, new org.apache.thrift.meta_data.FieldMetaData("loanRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_BANK, new org.apache.thrift.meta_data.FieldMetaData("paymentBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("paymentBankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("paymentAcctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ACCT_NO, new org.apache.thrift.meta_data.FieldMetaData("paymentAcctNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("paymentProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("paymentCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("provinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_EFFE_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanEffeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("partnerLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_LOAN_FILE, new org.apache.thrift.meta_data.FieldMetaData("partnerLoanFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_REAL_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("partnerRealRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_REFUND_FILE, new org.apache.thrift.meta_data.FieldMetaData("partnerRefundFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_INTERESTS, new org.apache.thrift.meta_data.FieldMetaData("partnerInterests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAYMENT_REPURCHASE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("repaymentRepurchaseRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_LOAN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundLoanAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_XIFEE, new org.apache.thrift.meta_data.FieldMetaData("refundXifee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("refundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("businessCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_CATEGORY_STR, new org.apache.thrift.meta_data.FieldMetaData("businessCategoryStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_ACCT_NO, new org.apache.thrift.meta_data.FieldMetaData("payAcctNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("payAcctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("payBankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("payBankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("payBankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("payProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("payCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_BY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderByType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIRM_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONFIRM_LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_DATE, new org.apache.thrift.meta_data.FieldMetaData("applyDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("houseProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("houseCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("partnerOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_PERIOD_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("loanPeriodLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CREDIT_LOAN, new org.apache.thrift.meta_data.FieldMetaData("isCreditLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_BANK_PHONE, new org.apache.thrift.meta_data.FieldMetaData("paymentBankPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_BANK_LINE_NO, new org.apache.thrift.meta_data.FieldMetaData("paymentBankLineNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("requestStatusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REFUND_TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundTotalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("refundPenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_FINE, new org.apache.thrift.meta_data.FieldMetaData("refundFine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_COMPDINTE, new org.apache.thrift.meta_data.FieldMetaData("refundCompdinte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PARTNER_PLATFORM_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("partnerPlatformOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("planRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_PLAN_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromPlanRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_PLAN_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("toPlanRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_PUSH_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("partnerPushAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_GROSS_RATE, new org.apache.thrift.meta_data.FieldMetaData("partnerGrossRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectPartner.class, metaDataMap);
  }

  public ProjectPartner() {
  }

  public ProjectPartner(
    int pid,
    int projectId,
    String loanId,
    int requestStatus,
    String partnerNo,
    String requestFiles,
    String remark,
    String requestTime,
    String updateTime,
    String approvalTime,
    String approvalComment,
    String submitApprovalTime,
    int isClosed,
    int loanStatus,
    String loanTime,
    String loanResultTime,
    int repaymentRepurchaseType,
    int repaymentRepurchaseStatus,
    String repaymentRepurchaseTime,
    String rpResultTime,
    double loanAmount,
    double totalCost,
    double premium,
    double guaranteeFee,
    String xiFeeRequestTime,
    String xiFeeResultTime,
    int xiFeeStatus,
    String projectNumber,
    String projectName,
    int projectStatus,
    String projectStatusTime,
    List<Integer> fileIds,
    int approvalStatus,
    int pmUserId,
    List<Integer> userIds,
    int page,
    int rows,
    String repaymentVoucherPath,
    String xiFeeVoucherPath,
    List<String> loanIds,
    int queryXiFeeStatus,
    String reApplyReason,
    double approveMoney,
    int confirmLoanStatus,
    String confirmLoanRequestTime,
    String confirmLoanResultTime,
    String confirmLoanReason,
    String loanJusticeFiles,
    String loanBlankFiles,
    String loanOtherFiles,
    String applyLoanDate,
    String loanRemark,
    String paymentBank,
    String paymentBankBranch,
    String paymentAcctName,
    String paymentAcctNo,
    String paymentProvinceCode,
    String paymentCityCode,
    String provinceCode,
    String cityCode,
    String loanEffeDate,
    String partnerLoanDate,
    String partnerLoanFile,
    String partnerRealRefundDate,
    String partnerRefundFile,
    double partnerInterests,
    String repaymentRepurchaseRemark,
    double refundLoanAmount,
    double refundXifee,
    String refundDate,
    int businessCategory,
    String businessCategoryStr,
    String payAcctNo,
    String payAcctName,
    String payBankName,
    String payBankCode,
    String payBankBranch,
    String payProvinceCode,
    String payCityCode,
    String beginTime,
    String endTime,
    int orderByType,
    double confirmLoanMoney,
    int confirmLoanDays,
    int applyDate,
    String houseProvinceCode,
    String houseCityCode,
    int projectSource,
    String partnerOrderCode,
    int loanPeriodLimit,
    int isCreditLoan,
    String paymentBankPhone,
    String paymentBankLineNo,
    List<Integer> requestStatusList,
    double refundTotalAmount,
    double refundPenalty,
    double refundFine,
    double refundCompdinte,
    String partnerPlatformOrderCode,
    String planRefundDate,
    String fromPlanRefundDate,
    String toPlanRefundDate,
    int partnerPushAccount,
    double partnerGrossRate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.loanId = loanId;
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.partnerNo = partnerNo;
    this.requestFiles = requestFiles;
    this.remark = remark;
    this.requestTime = requestTime;
    this.updateTime = updateTime;
    this.approvalTime = approvalTime;
    this.approvalComment = approvalComment;
    this.submitApprovalTime = submitApprovalTime;
    this.isClosed = isClosed;
    setIsClosedIsSet(true);
    this.loanStatus = loanStatus;
    setLoanStatusIsSet(true);
    this.loanTime = loanTime;
    this.loanResultTime = loanResultTime;
    this.repaymentRepurchaseType = repaymentRepurchaseType;
    setRepaymentRepurchaseTypeIsSet(true);
    this.repaymentRepurchaseStatus = repaymentRepurchaseStatus;
    setRepaymentRepurchaseStatusIsSet(true);
    this.repaymentRepurchaseTime = repaymentRepurchaseTime;
    this.rpResultTime = rpResultTime;
    this.loanAmount = loanAmount;
    setLoanAmountIsSet(true);
    this.totalCost = totalCost;
    setTotalCostIsSet(true);
    this.premium = premium;
    setPremiumIsSet(true);
    this.guaranteeFee = guaranteeFee;
    setGuaranteeFeeIsSet(true);
    this.xiFeeRequestTime = xiFeeRequestTime;
    this.xiFeeResultTime = xiFeeResultTime;
    this.xiFeeStatus = xiFeeStatus;
    setXiFeeStatusIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.projectStatus = projectStatus;
    setProjectStatusIsSet(true);
    this.projectStatusTime = projectStatusTime;
    this.fileIds = fileIds;
    this.approvalStatus = approvalStatus;
    setApprovalStatusIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.repaymentVoucherPath = repaymentVoucherPath;
    this.xiFeeVoucherPath = xiFeeVoucherPath;
    this.loanIds = loanIds;
    this.queryXiFeeStatus = queryXiFeeStatus;
    setQueryXiFeeStatusIsSet(true);
    this.reApplyReason = reApplyReason;
    this.approveMoney = approveMoney;
    setApproveMoneyIsSet(true);
    this.confirmLoanStatus = confirmLoanStatus;
    setConfirmLoanStatusIsSet(true);
    this.confirmLoanRequestTime = confirmLoanRequestTime;
    this.confirmLoanResultTime = confirmLoanResultTime;
    this.confirmLoanReason = confirmLoanReason;
    this.loanJusticeFiles = loanJusticeFiles;
    this.loanBlankFiles = loanBlankFiles;
    this.loanOtherFiles = loanOtherFiles;
    this.applyLoanDate = applyLoanDate;
    this.loanRemark = loanRemark;
    this.paymentBank = paymentBank;
    this.paymentBankBranch = paymentBankBranch;
    this.paymentAcctName = paymentAcctName;
    this.paymentAcctNo = paymentAcctNo;
    this.paymentProvinceCode = paymentProvinceCode;
    this.paymentCityCode = paymentCityCode;
    this.provinceCode = provinceCode;
    this.cityCode = cityCode;
    this.loanEffeDate = loanEffeDate;
    this.partnerLoanDate = partnerLoanDate;
    this.partnerLoanFile = partnerLoanFile;
    this.partnerRealRefundDate = partnerRealRefundDate;
    this.partnerRefundFile = partnerRefundFile;
    this.partnerInterests = partnerInterests;
    setPartnerInterestsIsSet(true);
    this.repaymentRepurchaseRemark = repaymentRepurchaseRemark;
    this.refundLoanAmount = refundLoanAmount;
    setRefundLoanAmountIsSet(true);
    this.refundXifee = refundXifee;
    setRefundXifeeIsSet(true);
    this.refundDate = refundDate;
    this.businessCategory = businessCategory;
    setBusinessCategoryIsSet(true);
    this.businessCategoryStr = businessCategoryStr;
    this.payAcctNo = payAcctNo;
    this.payAcctName = payAcctName;
    this.payBankName = payBankName;
    this.payBankCode = payBankCode;
    this.payBankBranch = payBankBranch;
    this.payProvinceCode = payProvinceCode;
    this.payCityCode = payCityCode;
    this.beginTime = beginTime;
    this.endTime = endTime;
    this.orderByType = orderByType;
    setOrderByTypeIsSet(true);
    this.confirmLoanMoney = confirmLoanMoney;
    setConfirmLoanMoneyIsSet(true);
    this.confirmLoanDays = confirmLoanDays;
    setConfirmLoanDaysIsSet(true);
    this.applyDate = applyDate;
    setApplyDateIsSet(true);
    this.houseProvinceCode = houseProvinceCode;
    this.houseCityCode = houseCityCode;
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.partnerOrderCode = partnerOrderCode;
    this.loanPeriodLimit = loanPeriodLimit;
    setLoanPeriodLimitIsSet(true);
    this.isCreditLoan = isCreditLoan;
    setIsCreditLoanIsSet(true);
    this.paymentBankPhone = paymentBankPhone;
    this.paymentBankLineNo = paymentBankLineNo;
    this.requestStatusList = requestStatusList;
    this.refundTotalAmount = refundTotalAmount;
    setRefundTotalAmountIsSet(true);
    this.refundPenalty = refundPenalty;
    setRefundPenaltyIsSet(true);
    this.refundFine = refundFine;
    setRefundFineIsSet(true);
    this.refundCompdinte = refundCompdinte;
    setRefundCompdinteIsSet(true);
    this.partnerPlatformOrderCode = partnerPlatformOrderCode;
    this.planRefundDate = planRefundDate;
    this.fromPlanRefundDate = fromPlanRefundDate;
    this.toPlanRefundDate = toPlanRefundDate;
    this.partnerPushAccount = partnerPushAccount;
    setPartnerPushAccountIsSet(true);
    this.partnerGrossRate = partnerGrossRate;
    setPartnerGrossRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectPartner(ProjectPartner other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetLoanId()) {
      this.loanId = other.loanId;
    }
    this.requestStatus = other.requestStatus;
    if (other.isSetPartnerNo()) {
      this.partnerNo = other.partnerNo;
    }
    if (other.isSetRequestFiles()) {
      this.requestFiles = other.requestFiles;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetRequestTime()) {
      this.requestTime = other.requestTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetApprovalTime()) {
      this.approvalTime = other.approvalTime;
    }
    if (other.isSetApprovalComment()) {
      this.approvalComment = other.approvalComment;
    }
    if (other.isSetSubmitApprovalTime()) {
      this.submitApprovalTime = other.submitApprovalTime;
    }
    this.isClosed = other.isClosed;
    this.loanStatus = other.loanStatus;
    if (other.isSetLoanTime()) {
      this.loanTime = other.loanTime;
    }
    if (other.isSetLoanResultTime()) {
      this.loanResultTime = other.loanResultTime;
    }
    this.repaymentRepurchaseType = other.repaymentRepurchaseType;
    this.repaymentRepurchaseStatus = other.repaymentRepurchaseStatus;
    if (other.isSetRepaymentRepurchaseTime()) {
      this.repaymentRepurchaseTime = other.repaymentRepurchaseTime;
    }
    if (other.isSetRpResultTime()) {
      this.rpResultTime = other.rpResultTime;
    }
    this.loanAmount = other.loanAmount;
    this.totalCost = other.totalCost;
    this.premium = other.premium;
    this.guaranteeFee = other.guaranteeFee;
    if (other.isSetXiFeeRequestTime()) {
      this.xiFeeRequestTime = other.xiFeeRequestTime;
    }
    if (other.isSetXiFeeResultTime()) {
      this.xiFeeResultTime = other.xiFeeResultTime;
    }
    this.xiFeeStatus = other.xiFeeStatus;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.projectStatus = other.projectStatus;
    if (other.isSetProjectStatusTime()) {
      this.projectStatusTime = other.projectStatusTime;
    }
    if (other.isSetFileIds()) {
      List<Integer> __this__fileIds = new ArrayList<Integer>(other.fileIds);
      this.fileIds = __this__fileIds;
    }
    this.approvalStatus = other.approvalStatus;
    this.pmUserId = other.pmUserId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetRepaymentVoucherPath()) {
      this.repaymentVoucherPath = other.repaymentVoucherPath;
    }
    if (other.isSetXiFeeVoucherPath()) {
      this.xiFeeVoucherPath = other.xiFeeVoucherPath;
    }
    if (other.isSetLoanIds()) {
      List<String> __this__loanIds = new ArrayList<String>(other.loanIds);
      this.loanIds = __this__loanIds;
    }
    this.queryXiFeeStatus = other.queryXiFeeStatus;
    if (other.isSetReApplyReason()) {
      this.reApplyReason = other.reApplyReason;
    }
    this.approveMoney = other.approveMoney;
    this.confirmLoanStatus = other.confirmLoanStatus;
    if (other.isSetConfirmLoanRequestTime()) {
      this.confirmLoanRequestTime = other.confirmLoanRequestTime;
    }
    if (other.isSetConfirmLoanResultTime()) {
      this.confirmLoanResultTime = other.confirmLoanResultTime;
    }
    if (other.isSetConfirmLoanReason()) {
      this.confirmLoanReason = other.confirmLoanReason;
    }
    if (other.isSetLoanJusticeFiles()) {
      this.loanJusticeFiles = other.loanJusticeFiles;
    }
    if (other.isSetLoanBlankFiles()) {
      this.loanBlankFiles = other.loanBlankFiles;
    }
    if (other.isSetLoanOtherFiles()) {
      this.loanOtherFiles = other.loanOtherFiles;
    }
    if (other.isSetApplyLoanDate()) {
      this.applyLoanDate = other.applyLoanDate;
    }
    if (other.isSetLoanRemark()) {
      this.loanRemark = other.loanRemark;
    }
    if (other.isSetPaymentBank()) {
      this.paymentBank = other.paymentBank;
    }
    if (other.isSetPaymentBankBranch()) {
      this.paymentBankBranch = other.paymentBankBranch;
    }
    if (other.isSetPaymentAcctName()) {
      this.paymentAcctName = other.paymentAcctName;
    }
    if (other.isSetPaymentAcctNo()) {
      this.paymentAcctNo = other.paymentAcctNo;
    }
    if (other.isSetPaymentProvinceCode()) {
      this.paymentProvinceCode = other.paymentProvinceCode;
    }
    if (other.isSetPaymentCityCode()) {
      this.paymentCityCode = other.paymentCityCode;
    }
    if (other.isSetProvinceCode()) {
      this.provinceCode = other.provinceCode;
    }
    if (other.isSetCityCode()) {
      this.cityCode = other.cityCode;
    }
    if (other.isSetLoanEffeDate()) {
      this.loanEffeDate = other.loanEffeDate;
    }
    if (other.isSetPartnerLoanDate()) {
      this.partnerLoanDate = other.partnerLoanDate;
    }
    if (other.isSetPartnerLoanFile()) {
      this.partnerLoanFile = other.partnerLoanFile;
    }
    if (other.isSetPartnerRealRefundDate()) {
      this.partnerRealRefundDate = other.partnerRealRefundDate;
    }
    if (other.isSetPartnerRefundFile()) {
      this.partnerRefundFile = other.partnerRefundFile;
    }
    this.partnerInterests = other.partnerInterests;
    if (other.isSetRepaymentRepurchaseRemark()) {
      this.repaymentRepurchaseRemark = other.repaymentRepurchaseRemark;
    }
    this.refundLoanAmount = other.refundLoanAmount;
    this.refundXifee = other.refundXifee;
    if (other.isSetRefundDate()) {
      this.refundDate = other.refundDate;
    }
    this.businessCategory = other.businessCategory;
    if (other.isSetBusinessCategoryStr()) {
      this.businessCategoryStr = other.businessCategoryStr;
    }
    if (other.isSetPayAcctNo()) {
      this.payAcctNo = other.payAcctNo;
    }
    if (other.isSetPayAcctName()) {
      this.payAcctName = other.payAcctName;
    }
    if (other.isSetPayBankName()) {
      this.payBankName = other.payBankName;
    }
    if (other.isSetPayBankCode()) {
      this.payBankCode = other.payBankCode;
    }
    if (other.isSetPayBankBranch()) {
      this.payBankBranch = other.payBankBranch;
    }
    if (other.isSetPayProvinceCode()) {
      this.payProvinceCode = other.payProvinceCode;
    }
    if (other.isSetPayCityCode()) {
      this.payCityCode = other.payCityCode;
    }
    if (other.isSetBeginTime()) {
      this.beginTime = other.beginTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.orderByType = other.orderByType;
    this.confirmLoanMoney = other.confirmLoanMoney;
    this.confirmLoanDays = other.confirmLoanDays;
    this.applyDate = other.applyDate;
    if (other.isSetHouseProvinceCode()) {
      this.houseProvinceCode = other.houseProvinceCode;
    }
    if (other.isSetHouseCityCode()) {
      this.houseCityCode = other.houseCityCode;
    }
    this.projectSource = other.projectSource;
    if (other.isSetPartnerOrderCode()) {
      this.partnerOrderCode = other.partnerOrderCode;
    }
    this.loanPeriodLimit = other.loanPeriodLimit;
    this.isCreditLoan = other.isCreditLoan;
    if (other.isSetPaymentBankPhone()) {
      this.paymentBankPhone = other.paymentBankPhone;
    }
    if (other.isSetPaymentBankLineNo()) {
      this.paymentBankLineNo = other.paymentBankLineNo;
    }
    if (other.isSetRequestStatusList()) {
      List<Integer> __this__requestStatusList = new ArrayList<Integer>(other.requestStatusList);
      this.requestStatusList = __this__requestStatusList;
    }
    this.refundTotalAmount = other.refundTotalAmount;
    this.refundPenalty = other.refundPenalty;
    this.refundFine = other.refundFine;
    this.refundCompdinte = other.refundCompdinte;
    if (other.isSetPartnerPlatformOrderCode()) {
      this.partnerPlatformOrderCode = other.partnerPlatformOrderCode;
    }
    if (other.isSetPlanRefundDate()) {
      this.planRefundDate = other.planRefundDate;
    }
    if (other.isSetFromPlanRefundDate()) {
      this.fromPlanRefundDate = other.fromPlanRefundDate;
    }
    if (other.isSetToPlanRefundDate()) {
      this.toPlanRefundDate = other.toPlanRefundDate;
    }
    this.partnerPushAccount = other.partnerPushAccount;
    this.partnerGrossRate = other.partnerGrossRate;
  }

  public ProjectPartner deepCopy() {
    return new ProjectPartner(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.loanId = null;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.partnerNo = null;
    this.requestFiles = null;
    this.remark = null;
    this.requestTime = null;
    this.updateTime = null;
    this.approvalTime = null;
    this.approvalComment = null;
    this.submitApprovalTime = null;
    setIsClosedIsSet(false);
    this.isClosed = 0;
    setLoanStatusIsSet(false);
    this.loanStatus = 0;
    this.loanTime = null;
    this.loanResultTime = null;
    setRepaymentRepurchaseTypeIsSet(false);
    this.repaymentRepurchaseType = 0;
    setRepaymentRepurchaseStatusIsSet(false);
    this.repaymentRepurchaseStatus = 0;
    this.repaymentRepurchaseTime = null;
    this.rpResultTime = null;
    setLoanAmountIsSet(false);
    this.loanAmount = 0.0;
    setTotalCostIsSet(false);
    this.totalCost = 0.0;
    setPremiumIsSet(false);
    this.premium = 0.0;
    setGuaranteeFeeIsSet(false);
    this.guaranteeFee = 0.0;
    this.xiFeeRequestTime = null;
    this.xiFeeResultTime = null;
    setXiFeeStatusIsSet(false);
    this.xiFeeStatus = 0;
    this.projectNumber = null;
    this.projectName = null;
    setProjectStatusIsSet(false);
    this.projectStatus = 0;
    this.projectStatusTime = null;
    this.fileIds = null;
    setApprovalStatusIsSet(false);
    this.approvalStatus = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.userIds = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.repaymentVoucherPath = null;
    this.xiFeeVoucherPath = null;
    this.loanIds = null;
    setQueryXiFeeStatusIsSet(false);
    this.queryXiFeeStatus = 0;
    this.reApplyReason = null;
    setApproveMoneyIsSet(false);
    this.approveMoney = 0.0;
    setConfirmLoanStatusIsSet(false);
    this.confirmLoanStatus = 0;
    this.confirmLoanRequestTime = null;
    this.confirmLoanResultTime = null;
    this.confirmLoanReason = null;
    this.loanJusticeFiles = null;
    this.loanBlankFiles = null;
    this.loanOtherFiles = null;
    this.applyLoanDate = null;
    this.loanRemark = null;
    this.paymentBank = null;
    this.paymentBankBranch = null;
    this.paymentAcctName = null;
    this.paymentAcctNo = null;
    this.paymentProvinceCode = null;
    this.paymentCityCode = null;
    this.provinceCode = null;
    this.cityCode = null;
    this.loanEffeDate = null;
    this.partnerLoanDate = null;
    this.partnerLoanFile = null;
    this.partnerRealRefundDate = null;
    this.partnerRefundFile = null;
    setPartnerInterestsIsSet(false);
    this.partnerInterests = 0.0;
    this.repaymentRepurchaseRemark = null;
    setRefundLoanAmountIsSet(false);
    this.refundLoanAmount = 0.0;
    setRefundXifeeIsSet(false);
    this.refundXifee = 0.0;
    this.refundDate = null;
    setBusinessCategoryIsSet(false);
    this.businessCategory = 0;
    this.businessCategoryStr = null;
    this.payAcctNo = null;
    this.payAcctName = null;
    this.payBankName = null;
    this.payBankCode = null;
    this.payBankBranch = null;
    this.payProvinceCode = null;
    this.payCityCode = null;
    this.beginTime = null;
    this.endTime = null;
    setOrderByTypeIsSet(false);
    this.orderByType = 0;
    setConfirmLoanMoneyIsSet(false);
    this.confirmLoanMoney = 0.0;
    setConfirmLoanDaysIsSet(false);
    this.confirmLoanDays = 0;
    setApplyDateIsSet(false);
    this.applyDate = 0;
    this.houseProvinceCode = null;
    this.houseCityCode = null;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    this.partnerOrderCode = null;
    setLoanPeriodLimitIsSet(false);
    this.loanPeriodLimit = 0;
    setIsCreditLoanIsSet(false);
    this.isCreditLoan = 0;
    this.paymentBankPhone = null;
    this.paymentBankLineNo = null;
    this.requestStatusList = null;
    setRefundTotalAmountIsSet(false);
    this.refundTotalAmount = 0.0;
    setRefundPenaltyIsSet(false);
    this.refundPenalty = 0.0;
    setRefundFineIsSet(false);
    this.refundFine = 0.0;
    setRefundCompdinteIsSet(false);
    this.refundCompdinte = 0.0;
    this.partnerPlatformOrderCode = null;
    this.planRefundDate = null;
    this.fromPlanRefundDate = null;
    this.toPlanRefundDate = null;
    setPartnerPushAccountIsSet(false);
    this.partnerPushAccount = 0;
    setPartnerGrossRateIsSet(false);
    this.partnerGrossRate = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectPartner setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectPartner setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getLoanId() {
    return this.loanId;
  }

  public ProjectPartner setLoanId(String loanId) {
    this.loanId = loanId;
    return this;
  }

  public void unsetLoanId() {
    this.loanId = null;
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return this.loanId != null;
  }

  public void setLoanIdIsSet(boolean value) {
    if (!value) {
      this.loanId = null;
    }
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public ProjectPartner setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getPartnerNo() {
    return this.partnerNo;
  }

  public ProjectPartner setPartnerNo(String partnerNo) {
    this.partnerNo = partnerNo;
    return this;
  }

  public void unsetPartnerNo() {
    this.partnerNo = null;
  }

  /** Returns true if field partnerNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerNo() {
    return this.partnerNo != null;
  }

  public void setPartnerNoIsSet(boolean value) {
    if (!value) {
      this.partnerNo = null;
    }
  }

  public String getRequestFiles() {
    return this.requestFiles;
  }

  public ProjectPartner setRequestFiles(String requestFiles) {
    this.requestFiles = requestFiles;
    return this;
  }

  public void unsetRequestFiles() {
    this.requestFiles = null;
  }

  /** Returns true if field requestFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestFiles() {
    return this.requestFiles != null;
  }

  public void setRequestFilesIsSet(boolean value) {
    if (!value) {
      this.requestFiles = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public ProjectPartner setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getRequestTime() {
    return this.requestTime;
  }

  public ProjectPartner setRequestTime(String requestTime) {
    this.requestTime = requestTime;
    return this;
  }

  public void unsetRequestTime() {
    this.requestTime = null;
  }

  /** Returns true if field requestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestTime() {
    return this.requestTime != null;
  }

  public void setRequestTimeIsSet(boolean value) {
    if (!value) {
      this.requestTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProjectPartner setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getApprovalTime() {
    return this.approvalTime;
  }

  public ProjectPartner setApprovalTime(String approvalTime) {
    this.approvalTime = approvalTime;
    return this;
  }

  public void unsetApprovalTime() {
    this.approvalTime = null;
  }

  /** Returns true if field approvalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalTime() {
    return this.approvalTime != null;
  }

  public void setApprovalTimeIsSet(boolean value) {
    if (!value) {
      this.approvalTime = null;
    }
  }

  public String getApprovalComment() {
    return this.approvalComment;
  }

  public ProjectPartner setApprovalComment(String approvalComment) {
    this.approvalComment = approvalComment;
    return this;
  }

  public void unsetApprovalComment() {
    this.approvalComment = null;
  }

  /** Returns true if field approvalComment is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalComment() {
    return this.approvalComment != null;
  }

  public void setApprovalCommentIsSet(boolean value) {
    if (!value) {
      this.approvalComment = null;
    }
  }

  public String getSubmitApprovalTime() {
    return this.submitApprovalTime;
  }

  public ProjectPartner setSubmitApprovalTime(String submitApprovalTime) {
    this.submitApprovalTime = submitApprovalTime;
    return this;
  }

  public void unsetSubmitApprovalTime() {
    this.submitApprovalTime = null;
  }

  /** Returns true if field submitApprovalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitApprovalTime() {
    return this.submitApprovalTime != null;
  }

  public void setSubmitApprovalTimeIsSet(boolean value) {
    if (!value) {
      this.submitApprovalTime = null;
    }
  }

  public int getIsClosed() {
    return this.isClosed;
  }

  public ProjectPartner setIsClosed(int isClosed) {
    this.isClosed = isClosed;
    setIsClosedIsSet(true);
    return this;
  }

  public void unsetIsClosed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCLOSED_ISSET_ID);
  }

  /** Returns true if field isClosed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsClosed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCLOSED_ISSET_ID);
  }

  public void setIsClosedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCLOSED_ISSET_ID, value);
  }

  public int getLoanStatus() {
    return this.loanStatus;
  }

  public ProjectPartner setLoanStatus(int loanStatus) {
    this.loanStatus = loanStatus;
    setLoanStatusIsSet(true);
    return this;
  }

  public void unsetLoanStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANSTATUS_ISSET_ID);
  }

  /** Returns true if field loanStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANSTATUS_ISSET_ID);
  }

  public void setLoanStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANSTATUS_ISSET_ID, value);
  }

  public String getLoanTime() {
    return this.loanTime;
  }

  public ProjectPartner setLoanTime(String loanTime) {
    this.loanTime = loanTime;
    return this;
  }

  public void unsetLoanTime() {
    this.loanTime = null;
  }

  /** Returns true if field loanTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTime() {
    return this.loanTime != null;
  }

  public void setLoanTimeIsSet(boolean value) {
    if (!value) {
      this.loanTime = null;
    }
  }

  public String getLoanResultTime() {
    return this.loanResultTime;
  }

  public ProjectPartner setLoanResultTime(String loanResultTime) {
    this.loanResultTime = loanResultTime;
    return this;
  }

  public void unsetLoanResultTime() {
    this.loanResultTime = null;
  }

  /** Returns true if field loanResultTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanResultTime() {
    return this.loanResultTime != null;
  }

  public void setLoanResultTimeIsSet(boolean value) {
    if (!value) {
      this.loanResultTime = null;
    }
  }

  public int getRepaymentRepurchaseType() {
    return this.repaymentRepurchaseType;
  }

  public ProjectPartner setRepaymentRepurchaseType(int repaymentRepurchaseType) {
    this.repaymentRepurchaseType = repaymentRepurchaseType;
    setRepaymentRepurchaseTypeIsSet(true);
    return this;
  }

  public void unsetRepaymentRepurchaseType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTREPURCHASETYPE_ISSET_ID);
  }

  /** Returns true if field repaymentRepurchaseType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentRepurchaseType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTREPURCHASETYPE_ISSET_ID);
  }

  public void setRepaymentRepurchaseTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTREPURCHASETYPE_ISSET_ID, value);
  }

  public int getRepaymentRepurchaseStatus() {
    return this.repaymentRepurchaseStatus;
  }

  public ProjectPartner setRepaymentRepurchaseStatus(int repaymentRepurchaseStatus) {
    this.repaymentRepurchaseStatus = repaymentRepurchaseStatus;
    setRepaymentRepurchaseStatusIsSet(true);
    return this;
  }

  public void unsetRepaymentRepurchaseStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTREPURCHASESTATUS_ISSET_ID);
  }

  /** Returns true if field repaymentRepurchaseStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentRepurchaseStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTREPURCHASESTATUS_ISSET_ID);
  }

  public void setRepaymentRepurchaseStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTREPURCHASESTATUS_ISSET_ID, value);
  }

  public String getRepaymentRepurchaseTime() {
    return this.repaymentRepurchaseTime;
  }

  public ProjectPartner setRepaymentRepurchaseTime(String repaymentRepurchaseTime) {
    this.repaymentRepurchaseTime = repaymentRepurchaseTime;
    return this;
  }

  public void unsetRepaymentRepurchaseTime() {
    this.repaymentRepurchaseTime = null;
  }

  /** Returns true if field repaymentRepurchaseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentRepurchaseTime() {
    return this.repaymentRepurchaseTime != null;
  }

  public void setRepaymentRepurchaseTimeIsSet(boolean value) {
    if (!value) {
      this.repaymentRepurchaseTime = null;
    }
  }

  public String getRpResultTime() {
    return this.rpResultTime;
  }

  public ProjectPartner setRpResultTime(String rpResultTime) {
    this.rpResultTime = rpResultTime;
    return this;
  }

  public void unsetRpResultTime() {
    this.rpResultTime = null;
  }

  /** Returns true if field rpResultTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRpResultTime() {
    return this.rpResultTime != null;
  }

  public void setRpResultTimeIsSet(boolean value) {
    if (!value) {
      this.rpResultTime = null;
    }
  }

  public double getLoanAmount() {
    return this.loanAmount;
  }

  public ProjectPartner setLoanAmount(double loanAmount) {
    this.loanAmount = loanAmount;
    setLoanAmountIsSet(true);
    return this;
  }

  public void unsetLoanAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID);
  }

  /** Returns true if field loanAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID);
  }

  public void setLoanAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID, value);
  }

  public double getTotalCost() {
    return this.totalCost;
  }

  public ProjectPartner setTotalCost(double totalCost) {
    this.totalCost = totalCost;
    setTotalCostIsSet(true);
    return this;
  }

  public void unsetTotalCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOST_ISSET_ID);
  }

  /** Returns true if field totalCost is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCost() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOST_ISSET_ID);
  }

  public void setTotalCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOST_ISSET_ID, value);
  }

  public double getPremium() {
    return this.premium;
  }

  public ProjectPartner setPremium(double premium) {
    this.premium = premium;
    setPremiumIsSet(true);
    return this;
  }

  public void unsetPremium() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREMIUM_ISSET_ID);
  }

  /** Returns true if field premium is set (has been assigned a value) and false otherwise */
  public boolean isSetPremium() {
    return EncodingUtils.testBit(__isset_bitfield, __PREMIUM_ISSET_ID);
  }

  public void setPremiumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREMIUM_ISSET_ID, value);
  }

  public double getGuaranteeFee() {
    return this.guaranteeFee;
  }

  public ProjectPartner setGuaranteeFee(double guaranteeFee) {
    this.guaranteeFee = guaranteeFee;
    setGuaranteeFeeIsSet(true);
    return this;
  }

  public void unsetGuaranteeFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID);
  }

  /** Returns true if field guaranteeFee is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteeFee() {
    return EncodingUtils.testBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID);
  }

  public void setGuaranteeFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID, value);
  }

  public String getXiFeeRequestTime() {
    return this.xiFeeRequestTime;
  }

  public ProjectPartner setXiFeeRequestTime(String xiFeeRequestTime) {
    this.xiFeeRequestTime = xiFeeRequestTime;
    return this;
  }

  public void unsetXiFeeRequestTime() {
    this.xiFeeRequestTime = null;
  }

  /** Returns true if field xiFeeRequestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetXiFeeRequestTime() {
    return this.xiFeeRequestTime != null;
  }

  public void setXiFeeRequestTimeIsSet(boolean value) {
    if (!value) {
      this.xiFeeRequestTime = null;
    }
  }

  public String getXiFeeResultTime() {
    return this.xiFeeResultTime;
  }

  public ProjectPartner setXiFeeResultTime(String xiFeeResultTime) {
    this.xiFeeResultTime = xiFeeResultTime;
    return this;
  }

  public void unsetXiFeeResultTime() {
    this.xiFeeResultTime = null;
  }

  /** Returns true if field xiFeeResultTime is set (has been assigned a value) and false otherwise */
  public boolean isSetXiFeeResultTime() {
    return this.xiFeeResultTime != null;
  }

  public void setXiFeeResultTimeIsSet(boolean value) {
    if (!value) {
      this.xiFeeResultTime = null;
    }
  }

  public int getXiFeeStatus() {
    return this.xiFeeStatus;
  }

  public ProjectPartner setXiFeeStatus(int xiFeeStatus) {
    this.xiFeeStatus = xiFeeStatus;
    setXiFeeStatusIsSet(true);
    return this;
  }

  public void unsetXiFeeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XIFEESTATUS_ISSET_ID);
  }

  /** Returns true if field xiFeeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetXiFeeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __XIFEESTATUS_ISSET_ID);
  }

  public void setXiFeeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XIFEESTATUS_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ProjectPartner setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ProjectPartner setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getProjectStatus() {
    return this.projectStatus;
  }

  public ProjectPartner setProjectStatus(int projectStatus) {
    this.projectStatus = projectStatus;
    setProjectStatusIsSet(true);
    return this;
  }

  public void unsetProjectStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID);
  }

  /** Returns true if field projectStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID);
  }

  public void setProjectStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID, value);
  }

  public String getProjectStatusTime() {
    return this.projectStatusTime;
  }

  public ProjectPartner setProjectStatusTime(String projectStatusTime) {
    this.projectStatusTime = projectStatusTime;
    return this;
  }

  public void unsetProjectStatusTime() {
    this.projectStatusTime = null;
  }

  /** Returns true if field projectStatusTime is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectStatusTime() {
    return this.projectStatusTime != null;
  }

  public void setProjectStatusTimeIsSet(boolean value) {
    if (!value) {
      this.projectStatusTime = null;
    }
  }

  public int getFileIdsSize() {
    return (this.fileIds == null) ? 0 : this.fileIds.size();
  }

  public java.util.Iterator<Integer> getFileIdsIterator() {
    return (this.fileIds == null) ? null : this.fileIds.iterator();
  }

  public void addToFileIds(int elem) {
    if (this.fileIds == null) {
      this.fileIds = new ArrayList<Integer>();
    }
    this.fileIds.add(elem);
  }

  public List<Integer> getFileIds() {
    return this.fileIds;
  }

  public ProjectPartner setFileIds(List<Integer> fileIds) {
    this.fileIds = fileIds;
    return this;
  }

  public void unsetFileIds() {
    this.fileIds = null;
  }

  /** Returns true if field fileIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFileIds() {
    return this.fileIds != null;
  }

  public void setFileIdsIsSet(boolean value) {
    if (!value) {
      this.fileIds = null;
    }
  }

  public int getApprovalStatus() {
    return this.approvalStatus;
  }

  public ProjectPartner setApprovalStatus(int approvalStatus) {
    this.approvalStatus = approvalStatus;
    setApprovalStatusIsSet(true);
    return this;
  }

  public void unsetApprovalStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID);
  }

  /** Returns true if field approvalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID);
  }

  public void setApprovalStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public ProjectPartner setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ProjectPartner setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ProjectPartner setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ProjectPartner setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getRepaymentVoucherPath() {
    return this.repaymentVoucherPath;
  }

  public ProjectPartner setRepaymentVoucherPath(String repaymentVoucherPath) {
    this.repaymentVoucherPath = repaymentVoucherPath;
    return this;
  }

  public void unsetRepaymentVoucherPath() {
    this.repaymentVoucherPath = null;
  }

  /** Returns true if field repaymentVoucherPath is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentVoucherPath() {
    return this.repaymentVoucherPath != null;
  }

  public void setRepaymentVoucherPathIsSet(boolean value) {
    if (!value) {
      this.repaymentVoucherPath = null;
    }
  }

  public String getXiFeeVoucherPath() {
    return this.xiFeeVoucherPath;
  }

  public ProjectPartner setXiFeeVoucherPath(String xiFeeVoucherPath) {
    this.xiFeeVoucherPath = xiFeeVoucherPath;
    return this;
  }

  public void unsetXiFeeVoucherPath() {
    this.xiFeeVoucherPath = null;
  }

  /** Returns true if field xiFeeVoucherPath is set (has been assigned a value) and false otherwise */
  public boolean isSetXiFeeVoucherPath() {
    return this.xiFeeVoucherPath != null;
  }

  public void setXiFeeVoucherPathIsSet(boolean value) {
    if (!value) {
      this.xiFeeVoucherPath = null;
    }
  }

  public int getLoanIdsSize() {
    return (this.loanIds == null) ? 0 : this.loanIds.size();
  }

  public java.util.Iterator<String> getLoanIdsIterator() {
    return (this.loanIds == null) ? null : this.loanIds.iterator();
  }

  public void addToLoanIds(String elem) {
    if (this.loanIds == null) {
      this.loanIds = new ArrayList<String>();
    }
    this.loanIds.add(elem);
  }

  public List<String> getLoanIds() {
    return this.loanIds;
  }

  public ProjectPartner setLoanIds(List<String> loanIds) {
    this.loanIds = loanIds;
    return this;
  }

  public void unsetLoanIds() {
    this.loanIds = null;
  }

  /** Returns true if field loanIds is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanIds() {
    return this.loanIds != null;
  }

  public void setLoanIdsIsSet(boolean value) {
    if (!value) {
      this.loanIds = null;
    }
  }

  public int getQueryXiFeeStatus() {
    return this.queryXiFeeStatus;
  }

  public ProjectPartner setQueryXiFeeStatus(int queryXiFeeStatus) {
    this.queryXiFeeStatus = queryXiFeeStatus;
    setQueryXiFeeStatusIsSet(true);
    return this;
  }

  public void unsetQueryXiFeeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYXIFEESTATUS_ISSET_ID);
  }

  /** Returns true if field queryXiFeeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryXiFeeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYXIFEESTATUS_ISSET_ID);
  }

  public void setQueryXiFeeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYXIFEESTATUS_ISSET_ID, value);
  }

  public String getReApplyReason() {
    return this.reApplyReason;
  }

  public ProjectPartner setReApplyReason(String reApplyReason) {
    this.reApplyReason = reApplyReason;
    return this;
  }

  public void unsetReApplyReason() {
    this.reApplyReason = null;
  }

  /** Returns true if field reApplyReason is set (has been assigned a value) and false otherwise */
  public boolean isSetReApplyReason() {
    return this.reApplyReason != null;
  }

  public void setReApplyReasonIsSet(boolean value) {
    if (!value) {
      this.reApplyReason = null;
    }
  }

  public double getApproveMoney() {
    return this.approveMoney;
  }

  public ProjectPartner setApproveMoney(double approveMoney) {
    this.approveMoney = approveMoney;
    setApproveMoneyIsSet(true);
    return this;
  }

  public void unsetApproveMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID);
  }

  /** Returns true if field approveMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetApproveMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID);
  }

  public void setApproveMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID, value);
  }

  public int getConfirmLoanStatus() {
    return this.confirmLoanStatus;
  }

  public ProjectPartner setConfirmLoanStatus(int confirmLoanStatus) {
    this.confirmLoanStatus = confirmLoanStatus;
    setConfirmLoanStatusIsSet(true);
    return this;
  }

  public void unsetConfirmLoanStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMLOANSTATUS_ISSET_ID);
  }

  /** Returns true if field confirmLoanStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMLOANSTATUS_ISSET_ID);
  }

  public void setConfirmLoanStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMLOANSTATUS_ISSET_ID, value);
  }

  public String getConfirmLoanRequestTime() {
    return this.confirmLoanRequestTime;
  }

  public ProjectPartner setConfirmLoanRequestTime(String confirmLoanRequestTime) {
    this.confirmLoanRequestTime = confirmLoanRequestTime;
    return this;
  }

  public void unsetConfirmLoanRequestTime() {
    this.confirmLoanRequestTime = null;
  }

  /** Returns true if field confirmLoanRequestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanRequestTime() {
    return this.confirmLoanRequestTime != null;
  }

  public void setConfirmLoanRequestTimeIsSet(boolean value) {
    if (!value) {
      this.confirmLoanRequestTime = null;
    }
  }

  public String getConfirmLoanResultTime() {
    return this.confirmLoanResultTime;
  }

  public ProjectPartner setConfirmLoanResultTime(String confirmLoanResultTime) {
    this.confirmLoanResultTime = confirmLoanResultTime;
    return this;
  }

  public void unsetConfirmLoanResultTime() {
    this.confirmLoanResultTime = null;
  }

  /** Returns true if field confirmLoanResultTime is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanResultTime() {
    return this.confirmLoanResultTime != null;
  }

  public void setConfirmLoanResultTimeIsSet(boolean value) {
    if (!value) {
      this.confirmLoanResultTime = null;
    }
  }

  public String getConfirmLoanReason() {
    return this.confirmLoanReason;
  }

  public ProjectPartner setConfirmLoanReason(String confirmLoanReason) {
    this.confirmLoanReason = confirmLoanReason;
    return this;
  }

  public void unsetConfirmLoanReason() {
    this.confirmLoanReason = null;
  }

  /** Returns true if field confirmLoanReason is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanReason() {
    return this.confirmLoanReason != null;
  }

  public void setConfirmLoanReasonIsSet(boolean value) {
    if (!value) {
      this.confirmLoanReason = null;
    }
  }

  public String getLoanJusticeFiles() {
    return this.loanJusticeFiles;
  }

  public ProjectPartner setLoanJusticeFiles(String loanJusticeFiles) {
    this.loanJusticeFiles = loanJusticeFiles;
    return this;
  }

  public void unsetLoanJusticeFiles() {
    this.loanJusticeFiles = null;
  }

  /** Returns true if field loanJusticeFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanJusticeFiles() {
    return this.loanJusticeFiles != null;
  }

  public void setLoanJusticeFilesIsSet(boolean value) {
    if (!value) {
      this.loanJusticeFiles = null;
    }
  }

  public String getLoanBlankFiles() {
    return this.loanBlankFiles;
  }

  public ProjectPartner setLoanBlankFiles(String loanBlankFiles) {
    this.loanBlankFiles = loanBlankFiles;
    return this;
  }

  public void unsetLoanBlankFiles() {
    this.loanBlankFiles = null;
  }

  /** Returns true if field loanBlankFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanBlankFiles() {
    return this.loanBlankFiles != null;
  }

  public void setLoanBlankFilesIsSet(boolean value) {
    if (!value) {
      this.loanBlankFiles = null;
    }
  }

  public String getLoanOtherFiles() {
    return this.loanOtherFiles;
  }

  public ProjectPartner setLoanOtherFiles(String loanOtherFiles) {
    this.loanOtherFiles = loanOtherFiles;
    return this;
  }

  public void unsetLoanOtherFiles() {
    this.loanOtherFiles = null;
  }

  /** Returns true if field loanOtherFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFiles() {
    return this.loanOtherFiles != null;
  }

  public void setLoanOtherFilesIsSet(boolean value) {
    if (!value) {
      this.loanOtherFiles = null;
    }
  }

  public String getApplyLoanDate() {
    return this.applyLoanDate;
  }

  public ProjectPartner setApplyLoanDate(String applyLoanDate) {
    this.applyLoanDate = applyLoanDate;
    return this;
  }

  public void unsetApplyLoanDate() {
    this.applyLoanDate = null;
  }

  /** Returns true if field applyLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyLoanDate() {
    return this.applyLoanDate != null;
  }

  public void setApplyLoanDateIsSet(boolean value) {
    if (!value) {
      this.applyLoanDate = null;
    }
  }

  public String getLoanRemark() {
    return this.loanRemark;
  }

  public ProjectPartner setLoanRemark(String loanRemark) {
    this.loanRemark = loanRemark;
    return this;
  }

  public void unsetLoanRemark() {
    this.loanRemark = null;
  }

  /** Returns true if field loanRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanRemark() {
    return this.loanRemark != null;
  }

  public void setLoanRemarkIsSet(boolean value) {
    if (!value) {
      this.loanRemark = null;
    }
  }

  public String getPaymentBank() {
    return this.paymentBank;
  }

  public ProjectPartner setPaymentBank(String paymentBank) {
    this.paymentBank = paymentBank;
    return this;
  }

  public void unsetPaymentBank() {
    this.paymentBank = null;
  }

  /** Returns true if field paymentBank is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBank() {
    return this.paymentBank != null;
  }

  public void setPaymentBankIsSet(boolean value) {
    if (!value) {
      this.paymentBank = null;
    }
  }

  public String getPaymentBankBranch() {
    return this.paymentBankBranch;
  }

  public ProjectPartner setPaymentBankBranch(String paymentBankBranch) {
    this.paymentBankBranch = paymentBankBranch;
    return this;
  }

  public void unsetPaymentBankBranch() {
    this.paymentBankBranch = null;
  }

  /** Returns true if field paymentBankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBankBranch() {
    return this.paymentBankBranch != null;
  }

  public void setPaymentBankBranchIsSet(boolean value) {
    if (!value) {
      this.paymentBankBranch = null;
    }
  }

  public String getPaymentAcctName() {
    return this.paymentAcctName;
  }

  public ProjectPartner setPaymentAcctName(String paymentAcctName) {
    this.paymentAcctName = paymentAcctName;
    return this;
  }

  public void unsetPaymentAcctName() {
    this.paymentAcctName = null;
  }

  /** Returns true if field paymentAcctName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAcctName() {
    return this.paymentAcctName != null;
  }

  public void setPaymentAcctNameIsSet(boolean value) {
    if (!value) {
      this.paymentAcctName = null;
    }
  }

  public String getPaymentAcctNo() {
    return this.paymentAcctNo;
  }

  public ProjectPartner setPaymentAcctNo(String paymentAcctNo) {
    this.paymentAcctNo = paymentAcctNo;
    return this;
  }

  public void unsetPaymentAcctNo() {
    this.paymentAcctNo = null;
  }

  /** Returns true if field paymentAcctNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAcctNo() {
    return this.paymentAcctNo != null;
  }

  public void setPaymentAcctNoIsSet(boolean value) {
    if (!value) {
      this.paymentAcctNo = null;
    }
  }

  public String getPaymentProvinceCode() {
    return this.paymentProvinceCode;
  }

  public ProjectPartner setPaymentProvinceCode(String paymentProvinceCode) {
    this.paymentProvinceCode = paymentProvinceCode;
    return this;
  }

  public void unsetPaymentProvinceCode() {
    this.paymentProvinceCode = null;
  }

  /** Returns true if field paymentProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentProvinceCode() {
    return this.paymentProvinceCode != null;
  }

  public void setPaymentProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.paymentProvinceCode = null;
    }
  }

  public String getPaymentCityCode() {
    return this.paymentCityCode;
  }

  public ProjectPartner setPaymentCityCode(String paymentCityCode) {
    this.paymentCityCode = paymentCityCode;
    return this;
  }

  public void unsetPaymentCityCode() {
    this.paymentCityCode = null;
  }

  /** Returns true if field paymentCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentCityCode() {
    return this.paymentCityCode != null;
  }

  public void setPaymentCityCodeIsSet(boolean value) {
    if (!value) {
      this.paymentCityCode = null;
    }
  }

  public String getProvinceCode() {
    return this.provinceCode;
  }

  public ProjectPartner setProvinceCode(String provinceCode) {
    this.provinceCode = provinceCode;
    return this;
  }

  public void unsetProvinceCode() {
    this.provinceCode = null;
  }

  /** Returns true if field provinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceCode() {
    return this.provinceCode != null;
  }

  public void setProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.provinceCode = null;
    }
  }

  public String getCityCode() {
    return this.cityCode;
  }

  public ProjectPartner setCityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  public void unsetCityCode() {
    this.cityCode = null;
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return this.cityCode != null;
  }

  public void setCityCodeIsSet(boolean value) {
    if (!value) {
      this.cityCode = null;
    }
  }

  public String getLoanEffeDate() {
    return this.loanEffeDate;
  }

  public ProjectPartner setLoanEffeDate(String loanEffeDate) {
    this.loanEffeDate = loanEffeDate;
    return this;
  }

  public void unsetLoanEffeDate() {
    this.loanEffeDate = null;
  }

  /** Returns true if field loanEffeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanEffeDate() {
    return this.loanEffeDate != null;
  }

  public void setLoanEffeDateIsSet(boolean value) {
    if (!value) {
      this.loanEffeDate = null;
    }
  }

  public String getPartnerLoanDate() {
    return this.partnerLoanDate;
  }

  public ProjectPartner setPartnerLoanDate(String partnerLoanDate) {
    this.partnerLoanDate = partnerLoanDate;
    return this;
  }

  public void unsetPartnerLoanDate() {
    this.partnerLoanDate = null;
  }

  /** Returns true if field partnerLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerLoanDate() {
    return this.partnerLoanDate != null;
  }

  public void setPartnerLoanDateIsSet(boolean value) {
    if (!value) {
      this.partnerLoanDate = null;
    }
  }

  public String getPartnerLoanFile() {
    return this.partnerLoanFile;
  }

  public ProjectPartner setPartnerLoanFile(String partnerLoanFile) {
    this.partnerLoanFile = partnerLoanFile;
    return this;
  }

  public void unsetPartnerLoanFile() {
    this.partnerLoanFile = null;
  }

  /** Returns true if field partnerLoanFile is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerLoanFile() {
    return this.partnerLoanFile != null;
  }

  public void setPartnerLoanFileIsSet(boolean value) {
    if (!value) {
      this.partnerLoanFile = null;
    }
  }

  public String getPartnerRealRefundDate() {
    return this.partnerRealRefundDate;
  }

  public ProjectPartner setPartnerRealRefundDate(String partnerRealRefundDate) {
    this.partnerRealRefundDate = partnerRealRefundDate;
    return this;
  }

  public void unsetPartnerRealRefundDate() {
    this.partnerRealRefundDate = null;
  }

  /** Returns true if field partnerRealRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerRealRefundDate() {
    return this.partnerRealRefundDate != null;
  }

  public void setPartnerRealRefundDateIsSet(boolean value) {
    if (!value) {
      this.partnerRealRefundDate = null;
    }
  }

  public String getPartnerRefundFile() {
    return this.partnerRefundFile;
  }

  public ProjectPartner setPartnerRefundFile(String partnerRefundFile) {
    this.partnerRefundFile = partnerRefundFile;
    return this;
  }

  public void unsetPartnerRefundFile() {
    this.partnerRefundFile = null;
  }

  /** Returns true if field partnerRefundFile is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerRefundFile() {
    return this.partnerRefundFile != null;
  }

  public void setPartnerRefundFileIsSet(boolean value) {
    if (!value) {
      this.partnerRefundFile = null;
    }
  }

  public double getPartnerInterests() {
    return this.partnerInterests;
  }

  public ProjectPartner setPartnerInterests(double partnerInterests) {
    this.partnerInterests = partnerInterests;
    setPartnerInterestsIsSet(true);
    return this;
  }

  public void unsetPartnerInterests() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERINTERESTS_ISSET_ID);
  }

  /** Returns true if field partnerInterests is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerInterests() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERINTERESTS_ISSET_ID);
  }

  public void setPartnerInterestsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERINTERESTS_ISSET_ID, value);
  }

  public String getRepaymentRepurchaseRemark() {
    return this.repaymentRepurchaseRemark;
  }

  public ProjectPartner setRepaymentRepurchaseRemark(String repaymentRepurchaseRemark) {
    this.repaymentRepurchaseRemark = repaymentRepurchaseRemark;
    return this;
  }

  public void unsetRepaymentRepurchaseRemark() {
    this.repaymentRepurchaseRemark = null;
  }

  /** Returns true if field repaymentRepurchaseRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentRepurchaseRemark() {
    return this.repaymentRepurchaseRemark != null;
  }

  public void setRepaymentRepurchaseRemarkIsSet(boolean value) {
    if (!value) {
      this.repaymentRepurchaseRemark = null;
    }
  }

  public double getRefundLoanAmount() {
    return this.refundLoanAmount;
  }

  public ProjectPartner setRefundLoanAmount(double refundLoanAmount) {
    this.refundLoanAmount = refundLoanAmount;
    setRefundLoanAmountIsSet(true);
    return this;
  }

  public void unsetRefundLoanAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDLOANAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundLoanAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundLoanAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDLOANAMOUNT_ISSET_ID);
  }

  public void setRefundLoanAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDLOANAMOUNT_ISSET_ID, value);
  }

  public double getRefundXifee() {
    return this.refundXifee;
  }

  public ProjectPartner setRefundXifee(double refundXifee) {
    this.refundXifee = refundXifee;
    setRefundXifeeIsSet(true);
    return this;
  }

  public void unsetRefundXifee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDXIFEE_ISSET_ID);
  }

  /** Returns true if field refundXifee is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundXifee() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDXIFEE_ISSET_ID);
  }

  public void setRefundXifeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDXIFEE_ISSET_ID, value);
  }

  public String getRefundDate() {
    return this.refundDate;
  }

  public ProjectPartner setRefundDate(String refundDate) {
    this.refundDate = refundDate;
    return this;
  }

  public void unsetRefundDate() {
    this.refundDate = null;
  }

  /** Returns true if field refundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundDate() {
    return this.refundDate != null;
  }

  public void setRefundDateIsSet(boolean value) {
    if (!value) {
      this.refundDate = null;
    }
  }

  public int getBusinessCategory() {
    return this.businessCategory;
  }

  public ProjectPartner setBusinessCategory(int businessCategory) {
    this.businessCategory = businessCategory;
    setBusinessCategoryIsSet(true);
    return this;
  }

  public void unsetBusinessCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID);
  }

  /** Returns true if field businessCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID);
  }

  public void setBusinessCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID, value);
  }

  public String getBusinessCategoryStr() {
    return this.businessCategoryStr;
  }

  public ProjectPartner setBusinessCategoryStr(String businessCategoryStr) {
    this.businessCategoryStr = businessCategoryStr;
    return this;
  }

  public void unsetBusinessCategoryStr() {
    this.businessCategoryStr = null;
  }

  /** Returns true if field businessCategoryStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCategoryStr() {
    return this.businessCategoryStr != null;
  }

  public void setBusinessCategoryStrIsSet(boolean value) {
    if (!value) {
      this.businessCategoryStr = null;
    }
  }

  public String getPayAcctNo() {
    return this.payAcctNo;
  }

  public ProjectPartner setPayAcctNo(String payAcctNo) {
    this.payAcctNo = payAcctNo;
    return this;
  }

  public void unsetPayAcctNo() {
    this.payAcctNo = null;
  }

  /** Returns true if field payAcctNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPayAcctNo() {
    return this.payAcctNo != null;
  }

  public void setPayAcctNoIsSet(boolean value) {
    if (!value) {
      this.payAcctNo = null;
    }
  }

  public String getPayAcctName() {
    return this.payAcctName;
  }

  public ProjectPartner setPayAcctName(String payAcctName) {
    this.payAcctName = payAcctName;
    return this;
  }

  public void unsetPayAcctName() {
    this.payAcctName = null;
  }

  /** Returns true if field payAcctName is set (has been assigned a value) and false otherwise */
  public boolean isSetPayAcctName() {
    return this.payAcctName != null;
  }

  public void setPayAcctNameIsSet(boolean value) {
    if (!value) {
      this.payAcctName = null;
    }
  }

  public String getPayBankName() {
    return this.payBankName;
  }

  public ProjectPartner setPayBankName(String payBankName) {
    this.payBankName = payBankName;
    return this;
  }

  public void unsetPayBankName() {
    this.payBankName = null;
  }

  /** Returns true if field payBankName is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBankName() {
    return this.payBankName != null;
  }

  public void setPayBankNameIsSet(boolean value) {
    if (!value) {
      this.payBankName = null;
    }
  }

  public String getPayBankCode() {
    return this.payBankCode;
  }

  public ProjectPartner setPayBankCode(String payBankCode) {
    this.payBankCode = payBankCode;
    return this;
  }

  public void unsetPayBankCode() {
    this.payBankCode = null;
  }

  /** Returns true if field payBankCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBankCode() {
    return this.payBankCode != null;
  }

  public void setPayBankCodeIsSet(boolean value) {
    if (!value) {
      this.payBankCode = null;
    }
  }

  public String getPayBankBranch() {
    return this.payBankBranch;
  }

  public ProjectPartner setPayBankBranch(String payBankBranch) {
    this.payBankBranch = payBankBranch;
    return this;
  }

  public void unsetPayBankBranch() {
    this.payBankBranch = null;
  }

  /** Returns true if field payBankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBankBranch() {
    return this.payBankBranch != null;
  }

  public void setPayBankBranchIsSet(boolean value) {
    if (!value) {
      this.payBankBranch = null;
    }
  }

  public String getPayProvinceCode() {
    return this.payProvinceCode;
  }

  public ProjectPartner setPayProvinceCode(String payProvinceCode) {
    this.payProvinceCode = payProvinceCode;
    return this;
  }

  public void unsetPayProvinceCode() {
    this.payProvinceCode = null;
  }

  /** Returns true if field payProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPayProvinceCode() {
    return this.payProvinceCode != null;
  }

  public void setPayProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.payProvinceCode = null;
    }
  }

  public String getPayCityCode() {
    return this.payCityCode;
  }

  public ProjectPartner setPayCityCode(String payCityCode) {
    this.payCityCode = payCityCode;
    return this;
  }

  public void unsetPayCityCode() {
    this.payCityCode = null;
  }

  /** Returns true if field payCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPayCityCode() {
    return this.payCityCode != null;
  }

  public void setPayCityCodeIsSet(boolean value) {
    if (!value) {
      this.payCityCode = null;
    }
  }

  public String getBeginTime() {
    return this.beginTime;
  }

  public ProjectPartner setBeginTime(String beginTime) {
    this.beginTime = beginTime;
    return this;
  }

  public void unsetBeginTime() {
    this.beginTime = null;
  }

  /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return this.beginTime != null;
  }

  public void setBeginTimeIsSet(boolean value) {
    if (!value) {
      this.beginTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public ProjectPartner setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getOrderByType() {
    return this.orderByType;
  }

  public ProjectPartner setOrderByType(int orderByType) {
    this.orderByType = orderByType;
    setOrderByTypeIsSet(true);
    return this;
  }

  public void unsetOrderByType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERBYTYPE_ISSET_ID);
  }

  /** Returns true if field orderByType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderByType() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERBYTYPE_ISSET_ID);
  }

  public void setOrderByTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERBYTYPE_ISSET_ID, value);
  }

  public double getConfirmLoanMoney() {
    return this.confirmLoanMoney;
  }

  public ProjectPartner setConfirmLoanMoney(double confirmLoanMoney) {
    this.confirmLoanMoney = confirmLoanMoney;
    setConfirmLoanMoneyIsSet(true);
    return this;
  }

  public void unsetConfirmLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMLOANMONEY_ISSET_ID);
  }

  /** Returns true if field confirmLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMLOANMONEY_ISSET_ID);
  }

  public void setConfirmLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMLOANMONEY_ISSET_ID, value);
  }

  public int getConfirmLoanDays() {
    return this.confirmLoanDays;
  }

  public ProjectPartner setConfirmLoanDays(int confirmLoanDays) {
    this.confirmLoanDays = confirmLoanDays;
    setConfirmLoanDaysIsSet(true);
    return this;
  }

  public void unsetConfirmLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMLOANDAYS_ISSET_ID);
  }

  /** Returns true if field confirmLoanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMLOANDAYS_ISSET_ID);
  }

  public void setConfirmLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMLOANDAYS_ISSET_ID, value);
  }

  public int getApplyDate() {
    return this.applyDate;
  }

  public ProjectPartner setApplyDate(int applyDate) {
    this.applyDate = applyDate;
    setApplyDateIsSet(true);
    return this;
  }

  public void unsetApplyDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYDATE_ISSET_ID);
  }

  /** Returns true if field applyDate is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyDate() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYDATE_ISSET_ID);
  }

  public void setApplyDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYDATE_ISSET_ID, value);
  }

  public String getHouseProvinceCode() {
    return this.houseProvinceCode;
  }

  public ProjectPartner setHouseProvinceCode(String houseProvinceCode) {
    this.houseProvinceCode = houseProvinceCode;
    return this;
  }

  public void unsetHouseProvinceCode() {
    this.houseProvinceCode = null;
  }

  /** Returns true if field houseProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseProvinceCode() {
    return this.houseProvinceCode != null;
  }

  public void setHouseProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.houseProvinceCode = null;
    }
  }

  public String getHouseCityCode() {
    return this.houseCityCode;
  }

  public ProjectPartner setHouseCityCode(String houseCityCode) {
    this.houseCityCode = houseCityCode;
    return this;
  }

  public void unsetHouseCityCode() {
    this.houseCityCode = null;
  }

  /** Returns true if field houseCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseCityCode() {
    return this.houseCityCode != null;
  }

  public void setHouseCityCodeIsSet(boolean value) {
    if (!value) {
      this.houseCityCode = null;
    }
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public ProjectPartner setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID, value);
  }

  public String getPartnerOrderCode() {
    return this.partnerOrderCode;
  }

  public ProjectPartner setPartnerOrderCode(String partnerOrderCode) {
    this.partnerOrderCode = partnerOrderCode;
    return this;
  }

  public void unsetPartnerOrderCode() {
    this.partnerOrderCode = null;
  }

  /** Returns true if field partnerOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerOrderCode() {
    return this.partnerOrderCode != null;
  }

  public void setPartnerOrderCodeIsSet(boolean value) {
    if (!value) {
      this.partnerOrderCode = null;
    }
  }

  public int getLoanPeriodLimit() {
    return this.loanPeriodLimit;
  }

  public ProjectPartner setLoanPeriodLimit(int loanPeriodLimit) {
    this.loanPeriodLimit = loanPeriodLimit;
    setLoanPeriodLimitIsSet(true);
    return this;
  }

  public void unsetLoanPeriodLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANPERIODLIMIT_ISSET_ID);
  }

  /** Returns true if field loanPeriodLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanPeriodLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANPERIODLIMIT_ISSET_ID);
  }

  public void setLoanPeriodLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANPERIODLIMIT_ISSET_ID, value);
  }

  public int getIsCreditLoan() {
    return this.isCreditLoan;
  }

  public ProjectPartner setIsCreditLoan(int isCreditLoan) {
    this.isCreditLoan = isCreditLoan;
    setIsCreditLoanIsSet(true);
    return this;
  }

  public void unsetIsCreditLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCREDITLOAN_ISSET_ID);
  }

  /** Returns true if field isCreditLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCreditLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCREDITLOAN_ISSET_ID);
  }

  public void setIsCreditLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCREDITLOAN_ISSET_ID, value);
  }

  public String getPaymentBankPhone() {
    return this.paymentBankPhone;
  }

  public ProjectPartner setPaymentBankPhone(String paymentBankPhone) {
    this.paymentBankPhone = paymentBankPhone;
    return this;
  }

  public void unsetPaymentBankPhone() {
    this.paymentBankPhone = null;
  }

  /** Returns true if field paymentBankPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBankPhone() {
    return this.paymentBankPhone != null;
  }

  public void setPaymentBankPhoneIsSet(boolean value) {
    if (!value) {
      this.paymentBankPhone = null;
    }
  }

  public String getPaymentBankLineNo() {
    return this.paymentBankLineNo;
  }

  public ProjectPartner setPaymentBankLineNo(String paymentBankLineNo) {
    this.paymentBankLineNo = paymentBankLineNo;
    return this;
  }

  public void unsetPaymentBankLineNo() {
    this.paymentBankLineNo = null;
  }

  /** Returns true if field paymentBankLineNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBankLineNo() {
    return this.paymentBankLineNo != null;
  }

  public void setPaymentBankLineNoIsSet(boolean value) {
    if (!value) {
      this.paymentBankLineNo = null;
    }
  }

  public int getRequestStatusListSize() {
    return (this.requestStatusList == null) ? 0 : this.requestStatusList.size();
  }

  public java.util.Iterator<Integer> getRequestStatusListIterator() {
    return (this.requestStatusList == null) ? null : this.requestStatusList.iterator();
  }

  public void addToRequestStatusList(int elem) {
    if (this.requestStatusList == null) {
      this.requestStatusList = new ArrayList<Integer>();
    }
    this.requestStatusList.add(elem);
  }

  public List<Integer> getRequestStatusList() {
    return this.requestStatusList;
  }

  public ProjectPartner setRequestStatusList(List<Integer> requestStatusList) {
    this.requestStatusList = requestStatusList;
    return this;
  }

  public void unsetRequestStatusList() {
    this.requestStatusList = null;
  }

  /** Returns true if field requestStatusList is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatusList() {
    return this.requestStatusList != null;
  }

  public void setRequestStatusListIsSet(boolean value) {
    if (!value) {
      this.requestStatusList = null;
    }
  }

  public double getRefundTotalAmount() {
    return this.refundTotalAmount;
  }

  public ProjectPartner setRefundTotalAmount(double refundTotalAmount) {
    this.refundTotalAmount = refundTotalAmount;
    setRefundTotalAmountIsSet(true);
    return this;
  }

  public void unsetRefundTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDTOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundTotalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDTOTALAMOUNT_ISSET_ID);
  }

  public void setRefundTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDTOTALAMOUNT_ISSET_ID, value);
  }

  public double getRefundPenalty() {
    return this.refundPenalty;
  }

  public ProjectPartner setRefundPenalty(double refundPenalty) {
    this.refundPenalty = refundPenalty;
    setRefundPenaltyIsSet(true);
    return this;
  }

  public void unsetRefundPenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDPENALTY_ISSET_ID);
  }

  /** Returns true if field refundPenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundPenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDPENALTY_ISSET_ID);
  }

  public void setRefundPenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDPENALTY_ISSET_ID, value);
  }

  public double getRefundFine() {
    return this.refundFine;
  }

  public ProjectPartner setRefundFine(double refundFine) {
    this.refundFine = refundFine;
    setRefundFineIsSet(true);
    return this;
  }

  public void unsetRefundFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDFINE_ISSET_ID);
  }

  /** Returns true if field refundFine is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundFine() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDFINE_ISSET_ID);
  }

  public void setRefundFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDFINE_ISSET_ID, value);
  }

  public double getRefundCompdinte() {
    return this.refundCompdinte;
  }

  public ProjectPartner setRefundCompdinte(double refundCompdinte) {
    this.refundCompdinte = refundCompdinte;
    setRefundCompdinteIsSet(true);
    return this;
  }

  public void unsetRefundCompdinte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDCOMPDINTE_ISSET_ID);
  }

  /** Returns true if field refundCompdinte is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundCompdinte() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDCOMPDINTE_ISSET_ID);
  }

  public void setRefundCompdinteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDCOMPDINTE_ISSET_ID, value);
  }

  public String getPartnerPlatformOrderCode() {
    return this.partnerPlatformOrderCode;
  }

  public ProjectPartner setPartnerPlatformOrderCode(String partnerPlatformOrderCode) {
    this.partnerPlatformOrderCode = partnerPlatformOrderCode;
    return this;
  }

  public void unsetPartnerPlatformOrderCode() {
    this.partnerPlatformOrderCode = null;
  }

  /** Returns true if field partnerPlatformOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerPlatformOrderCode() {
    return this.partnerPlatformOrderCode != null;
  }

  public void setPartnerPlatformOrderCodeIsSet(boolean value) {
    if (!value) {
      this.partnerPlatformOrderCode = null;
    }
  }

  public String getPlanRefundDate() {
    return this.planRefundDate;
  }

  public ProjectPartner setPlanRefundDate(String planRefundDate) {
    this.planRefundDate = planRefundDate;
    return this;
  }

  public void unsetPlanRefundDate() {
    this.planRefundDate = null;
  }

  /** Returns true if field planRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRefundDate() {
    return this.planRefundDate != null;
  }

  public void setPlanRefundDateIsSet(boolean value) {
    if (!value) {
      this.planRefundDate = null;
    }
  }

  public String getFromPlanRefundDate() {
    return this.fromPlanRefundDate;
  }

  public ProjectPartner setFromPlanRefundDate(String fromPlanRefundDate) {
    this.fromPlanRefundDate = fromPlanRefundDate;
    return this;
  }

  public void unsetFromPlanRefundDate() {
    this.fromPlanRefundDate = null;
  }

  /** Returns true if field fromPlanRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromPlanRefundDate() {
    return this.fromPlanRefundDate != null;
  }

  public void setFromPlanRefundDateIsSet(boolean value) {
    if (!value) {
      this.fromPlanRefundDate = null;
    }
  }

  public String getToPlanRefundDate() {
    return this.toPlanRefundDate;
  }

  public ProjectPartner setToPlanRefundDate(String toPlanRefundDate) {
    this.toPlanRefundDate = toPlanRefundDate;
    return this;
  }

  public void unsetToPlanRefundDate() {
    this.toPlanRefundDate = null;
  }

  /** Returns true if field toPlanRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetToPlanRefundDate() {
    return this.toPlanRefundDate != null;
  }

  public void setToPlanRefundDateIsSet(boolean value) {
    if (!value) {
      this.toPlanRefundDate = null;
    }
  }

  public int getPartnerPushAccount() {
    return this.partnerPushAccount;
  }

  public ProjectPartner setPartnerPushAccount(int partnerPushAccount) {
    this.partnerPushAccount = partnerPushAccount;
    setPartnerPushAccountIsSet(true);
    return this;
  }

  public void unsetPartnerPushAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERPUSHACCOUNT_ISSET_ID);
  }

  /** Returns true if field partnerPushAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerPushAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERPUSHACCOUNT_ISSET_ID);
  }

  public void setPartnerPushAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERPUSHACCOUNT_ISSET_ID, value);
  }

  public double getPartnerGrossRate() {
    return this.partnerGrossRate;
  }

  public ProjectPartner setPartnerGrossRate(double partnerGrossRate) {
    this.partnerGrossRate = partnerGrossRate;
    setPartnerGrossRateIsSet(true);
    return this;
  }

  public void unsetPartnerGrossRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERGROSSRATE_ISSET_ID);
  }

  /** Returns true if field partnerGrossRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerGrossRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERGROSSRATE_ISSET_ID);
  }

  public void setPartnerGrossRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERGROSSRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((String)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case PARTNER_NO:
      if (value == null) {
        unsetPartnerNo();
      } else {
        setPartnerNo((String)value);
      }
      break;

    case REQUEST_FILES:
      if (value == null) {
        unsetRequestFiles();
      } else {
        setRequestFiles((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case REQUEST_TIME:
      if (value == null) {
        unsetRequestTime();
      } else {
        setRequestTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case APPROVAL_TIME:
      if (value == null) {
        unsetApprovalTime();
      } else {
        setApprovalTime((String)value);
      }
      break;

    case APPROVAL_COMMENT:
      if (value == null) {
        unsetApprovalComment();
      } else {
        setApprovalComment((String)value);
      }
      break;

    case SUBMIT_APPROVAL_TIME:
      if (value == null) {
        unsetSubmitApprovalTime();
      } else {
        setSubmitApprovalTime((String)value);
      }
      break;

    case IS_CLOSED:
      if (value == null) {
        unsetIsClosed();
      } else {
        setIsClosed((Integer)value);
      }
      break;

    case LOAN_STATUS:
      if (value == null) {
        unsetLoanStatus();
      } else {
        setLoanStatus((Integer)value);
      }
      break;

    case LOAN_TIME:
      if (value == null) {
        unsetLoanTime();
      } else {
        setLoanTime((String)value);
      }
      break;

    case LOAN_RESULT_TIME:
      if (value == null) {
        unsetLoanResultTime();
      } else {
        setLoanResultTime((String)value);
      }
      break;

    case REPAYMENT_REPURCHASE_TYPE:
      if (value == null) {
        unsetRepaymentRepurchaseType();
      } else {
        setRepaymentRepurchaseType((Integer)value);
      }
      break;

    case REPAYMENT_REPURCHASE_STATUS:
      if (value == null) {
        unsetRepaymentRepurchaseStatus();
      } else {
        setRepaymentRepurchaseStatus((Integer)value);
      }
      break;

    case REPAYMENT_REPURCHASE_TIME:
      if (value == null) {
        unsetRepaymentRepurchaseTime();
      } else {
        setRepaymentRepurchaseTime((String)value);
      }
      break;

    case RP_RESULT_TIME:
      if (value == null) {
        unsetRpResultTime();
      } else {
        setRpResultTime((String)value);
      }
      break;

    case LOAN_AMOUNT:
      if (value == null) {
        unsetLoanAmount();
      } else {
        setLoanAmount((Double)value);
      }
      break;

    case TOTAL_COST:
      if (value == null) {
        unsetTotalCost();
      } else {
        setTotalCost((Double)value);
      }
      break;

    case PREMIUM:
      if (value == null) {
        unsetPremium();
      } else {
        setPremium((Double)value);
      }
      break;

    case GUARANTEE_FEE:
      if (value == null) {
        unsetGuaranteeFee();
      } else {
        setGuaranteeFee((Double)value);
      }
      break;

    case XI_FEE_REQUEST_TIME:
      if (value == null) {
        unsetXiFeeRequestTime();
      } else {
        setXiFeeRequestTime((String)value);
      }
      break;

    case XI_FEE_RESULT_TIME:
      if (value == null) {
        unsetXiFeeResultTime();
      } else {
        setXiFeeResultTime((String)value);
      }
      break;

    case XI_FEE_STATUS:
      if (value == null) {
        unsetXiFeeStatus();
      } else {
        setXiFeeStatus((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_STATUS:
      if (value == null) {
        unsetProjectStatus();
      } else {
        setProjectStatus((Integer)value);
      }
      break;

    case PROJECT_STATUS_TIME:
      if (value == null) {
        unsetProjectStatusTime();
      } else {
        setProjectStatusTime((String)value);
      }
      break;

    case FILE_IDS:
      if (value == null) {
        unsetFileIds();
      } else {
        setFileIds((List<Integer>)value);
      }
      break;

    case APPROVAL_STATUS:
      if (value == null) {
        unsetApprovalStatus();
      } else {
        setApprovalStatus((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case REPAYMENT_VOUCHER_PATH:
      if (value == null) {
        unsetRepaymentVoucherPath();
      } else {
        setRepaymentVoucherPath((String)value);
      }
      break;

    case XI_FEE_VOUCHER_PATH:
      if (value == null) {
        unsetXiFeeVoucherPath();
      } else {
        setXiFeeVoucherPath((String)value);
      }
      break;

    case LOAN_IDS:
      if (value == null) {
        unsetLoanIds();
      } else {
        setLoanIds((List<String>)value);
      }
      break;

    case QUERY_XI_FEE_STATUS:
      if (value == null) {
        unsetQueryXiFeeStatus();
      } else {
        setQueryXiFeeStatus((Integer)value);
      }
      break;

    case RE_APPLY_REASON:
      if (value == null) {
        unsetReApplyReason();
      } else {
        setReApplyReason((String)value);
      }
      break;

    case APPROVE_MONEY:
      if (value == null) {
        unsetApproveMoney();
      } else {
        setApproveMoney((Double)value);
      }
      break;

    case CONFIRM_LOAN_STATUS:
      if (value == null) {
        unsetConfirmLoanStatus();
      } else {
        setConfirmLoanStatus((Integer)value);
      }
      break;

    case CONFIRM_LOAN_REQUEST_TIME:
      if (value == null) {
        unsetConfirmLoanRequestTime();
      } else {
        setConfirmLoanRequestTime((String)value);
      }
      break;

    case CONFIRM_LOAN_RESULT_TIME:
      if (value == null) {
        unsetConfirmLoanResultTime();
      } else {
        setConfirmLoanResultTime((String)value);
      }
      break;

    case CONFIRM_LOAN_REASON:
      if (value == null) {
        unsetConfirmLoanReason();
      } else {
        setConfirmLoanReason((String)value);
      }
      break;

    case LOAN_JUSTICE_FILES:
      if (value == null) {
        unsetLoanJusticeFiles();
      } else {
        setLoanJusticeFiles((String)value);
      }
      break;

    case LOAN_BLANK_FILES:
      if (value == null) {
        unsetLoanBlankFiles();
      } else {
        setLoanBlankFiles((String)value);
      }
      break;

    case LOAN_OTHER_FILES:
      if (value == null) {
        unsetLoanOtherFiles();
      } else {
        setLoanOtherFiles((String)value);
      }
      break;

    case APPLY_LOAN_DATE:
      if (value == null) {
        unsetApplyLoanDate();
      } else {
        setApplyLoanDate((String)value);
      }
      break;

    case LOAN_REMARK:
      if (value == null) {
        unsetLoanRemark();
      } else {
        setLoanRemark((String)value);
      }
      break;

    case PAYMENT_BANK:
      if (value == null) {
        unsetPaymentBank();
      } else {
        setPaymentBank((String)value);
      }
      break;

    case PAYMENT_BANK_BRANCH:
      if (value == null) {
        unsetPaymentBankBranch();
      } else {
        setPaymentBankBranch((String)value);
      }
      break;

    case PAYMENT_ACCT_NAME:
      if (value == null) {
        unsetPaymentAcctName();
      } else {
        setPaymentAcctName((String)value);
      }
      break;

    case PAYMENT_ACCT_NO:
      if (value == null) {
        unsetPaymentAcctNo();
      } else {
        setPaymentAcctNo((String)value);
      }
      break;

    case PAYMENT_PROVINCE_CODE:
      if (value == null) {
        unsetPaymentProvinceCode();
      } else {
        setPaymentProvinceCode((String)value);
      }
      break;

    case PAYMENT_CITY_CODE:
      if (value == null) {
        unsetPaymentCityCode();
      } else {
        setPaymentCityCode((String)value);
      }
      break;

    case PROVINCE_CODE:
      if (value == null) {
        unsetProvinceCode();
      } else {
        setProvinceCode((String)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((String)value);
      }
      break;

    case LOAN_EFFE_DATE:
      if (value == null) {
        unsetLoanEffeDate();
      } else {
        setLoanEffeDate((String)value);
      }
      break;

    case PARTNER_LOAN_DATE:
      if (value == null) {
        unsetPartnerLoanDate();
      } else {
        setPartnerLoanDate((String)value);
      }
      break;

    case PARTNER_LOAN_FILE:
      if (value == null) {
        unsetPartnerLoanFile();
      } else {
        setPartnerLoanFile((String)value);
      }
      break;

    case PARTNER_REAL_REFUND_DATE:
      if (value == null) {
        unsetPartnerRealRefundDate();
      } else {
        setPartnerRealRefundDate((String)value);
      }
      break;

    case PARTNER_REFUND_FILE:
      if (value == null) {
        unsetPartnerRefundFile();
      } else {
        setPartnerRefundFile((String)value);
      }
      break;

    case PARTNER_INTERESTS:
      if (value == null) {
        unsetPartnerInterests();
      } else {
        setPartnerInterests((Double)value);
      }
      break;

    case REPAYMENT_REPURCHASE_REMARK:
      if (value == null) {
        unsetRepaymentRepurchaseRemark();
      } else {
        setRepaymentRepurchaseRemark((String)value);
      }
      break;

    case REFUND_LOAN_AMOUNT:
      if (value == null) {
        unsetRefundLoanAmount();
      } else {
        setRefundLoanAmount((Double)value);
      }
      break;

    case REFUND_XIFEE:
      if (value == null) {
        unsetRefundXifee();
      } else {
        setRefundXifee((Double)value);
      }
      break;

    case REFUND_DATE:
      if (value == null) {
        unsetRefundDate();
      } else {
        setRefundDate((String)value);
      }
      break;

    case BUSINESS_CATEGORY:
      if (value == null) {
        unsetBusinessCategory();
      } else {
        setBusinessCategory((Integer)value);
      }
      break;

    case BUSINESS_CATEGORY_STR:
      if (value == null) {
        unsetBusinessCategoryStr();
      } else {
        setBusinessCategoryStr((String)value);
      }
      break;

    case PAY_ACCT_NO:
      if (value == null) {
        unsetPayAcctNo();
      } else {
        setPayAcctNo((String)value);
      }
      break;

    case PAY_ACCT_NAME:
      if (value == null) {
        unsetPayAcctName();
      } else {
        setPayAcctName((String)value);
      }
      break;

    case PAY_BANK_NAME:
      if (value == null) {
        unsetPayBankName();
      } else {
        setPayBankName((String)value);
      }
      break;

    case PAY_BANK_CODE:
      if (value == null) {
        unsetPayBankCode();
      } else {
        setPayBankCode((String)value);
      }
      break;

    case PAY_BANK_BRANCH:
      if (value == null) {
        unsetPayBankBranch();
      } else {
        setPayBankBranch((String)value);
      }
      break;

    case PAY_PROVINCE_CODE:
      if (value == null) {
        unsetPayProvinceCode();
      } else {
        setPayProvinceCode((String)value);
      }
      break;

    case PAY_CITY_CODE:
      if (value == null) {
        unsetPayCityCode();
      } else {
        setPayCityCode((String)value);
      }
      break;

    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case ORDER_BY_TYPE:
      if (value == null) {
        unsetOrderByType();
      } else {
        setOrderByType((Integer)value);
      }
      break;

    case CONFIRM_LOAN_MONEY:
      if (value == null) {
        unsetConfirmLoanMoney();
      } else {
        setConfirmLoanMoney((Double)value);
      }
      break;

    case CONFIRM_LOAN_DAYS:
      if (value == null) {
        unsetConfirmLoanDays();
      } else {
        setConfirmLoanDays((Integer)value);
      }
      break;

    case APPLY_DATE:
      if (value == null) {
        unsetApplyDate();
      } else {
        setApplyDate((Integer)value);
      }
      break;

    case HOUSE_PROVINCE_CODE:
      if (value == null) {
        unsetHouseProvinceCode();
      } else {
        setHouseProvinceCode((String)value);
      }
      break;

    case HOUSE_CITY_CODE:
      if (value == null) {
        unsetHouseCityCode();
      } else {
        setHouseCityCode((String)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case PARTNER_ORDER_CODE:
      if (value == null) {
        unsetPartnerOrderCode();
      } else {
        setPartnerOrderCode((String)value);
      }
      break;

    case LOAN_PERIOD_LIMIT:
      if (value == null) {
        unsetLoanPeriodLimit();
      } else {
        setLoanPeriodLimit((Integer)value);
      }
      break;

    case IS_CREDIT_LOAN:
      if (value == null) {
        unsetIsCreditLoan();
      } else {
        setIsCreditLoan((Integer)value);
      }
      break;

    case PAYMENT_BANK_PHONE:
      if (value == null) {
        unsetPaymentBankPhone();
      } else {
        setPaymentBankPhone((String)value);
      }
      break;

    case PAYMENT_BANK_LINE_NO:
      if (value == null) {
        unsetPaymentBankLineNo();
      } else {
        setPaymentBankLineNo((String)value);
      }
      break;

    case REQUEST_STATUS_LIST:
      if (value == null) {
        unsetRequestStatusList();
      } else {
        setRequestStatusList((List<Integer>)value);
      }
      break;

    case REFUND_TOTAL_AMOUNT:
      if (value == null) {
        unsetRefundTotalAmount();
      } else {
        setRefundTotalAmount((Double)value);
      }
      break;

    case REFUND_PENALTY:
      if (value == null) {
        unsetRefundPenalty();
      } else {
        setRefundPenalty((Double)value);
      }
      break;

    case REFUND_FINE:
      if (value == null) {
        unsetRefundFine();
      } else {
        setRefundFine((Double)value);
      }
      break;

    case REFUND_COMPDINTE:
      if (value == null) {
        unsetRefundCompdinte();
      } else {
        setRefundCompdinte((Double)value);
      }
      break;

    case PARTNER_PLATFORM_ORDER_CODE:
      if (value == null) {
        unsetPartnerPlatformOrderCode();
      } else {
        setPartnerPlatformOrderCode((String)value);
      }
      break;

    case PLAN_REFUND_DATE:
      if (value == null) {
        unsetPlanRefundDate();
      } else {
        setPlanRefundDate((String)value);
      }
      break;

    case FROM_PLAN_REFUND_DATE:
      if (value == null) {
        unsetFromPlanRefundDate();
      } else {
        setFromPlanRefundDate((String)value);
      }
      break;

    case TO_PLAN_REFUND_DATE:
      if (value == null) {
        unsetToPlanRefundDate();
      } else {
        setToPlanRefundDate((String)value);
      }
      break;

    case PARTNER_PUSH_ACCOUNT:
      if (value == null) {
        unsetPartnerPushAccount();
      } else {
        setPartnerPushAccount((Integer)value);
      }
      break;

    case PARTNER_GROSS_RATE:
      if (value == null) {
        unsetPartnerGrossRate();
      } else {
        setPartnerGrossRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LOAN_ID:
      return getLoanId();

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case PARTNER_NO:
      return getPartnerNo();

    case REQUEST_FILES:
      return getRequestFiles();

    case REMARK:
      return getRemark();

    case REQUEST_TIME:
      return getRequestTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case APPROVAL_TIME:
      return getApprovalTime();

    case APPROVAL_COMMENT:
      return getApprovalComment();

    case SUBMIT_APPROVAL_TIME:
      return getSubmitApprovalTime();

    case IS_CLOSED:
      return Integer.valueOf(getIsClosed());

    case LOAN_STATUS:
      return Integer.valueOf(getLoanStatus());

    case LOAN_TIME:
      return getLoanTime();

    case LOAN_RESULT_TIME:
      return getLoanResultTime();

    case REPAYMENT_REPURCHASE_TYPE:
      return Integer.valueOf(getRepaymentRepurchaseType());

    case REPAYMENT_REPURCHASE_STATUS:
      return Integer.valueOf(getRepaymentRepurchaseStatus());

    case REPAYMENT_REPURCHASE_TIME:
      return getRepaymentRepurchaseTime();

    case RP_RESULT_TIME:
      return getRpResultTime();

    case LOAN_AMOUNT:
      return Double.valueOf(getLoanAmount());

    case TOTAL_COST:
      return Double.valueOf(getTotalCost());

    case PREMIUM:
      return Double.valueOf(getPremium());

    case GUARANTEE_FEE:
      return Double.valueOf(getGuaranteeFee());

    case XI_FEE_REQUEST_TIME:
      return getXiFeeRequestTime();

    case XI_FEE_RESULT_TIME:
      return getXiFeeResultTime();

    case XI_FEE_STATUS:
      return Integer.valueOf(getXiFeeStatus());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_STATUS:
      return Integer.valueOf(getProjectStatus());

    case PROJECT_STATUS_TIME:
      return getProjectStatusTime();

    case FILE_IDS:
      return getFileIds();

    case APPROVAL_STATUS:
      return Integer.valueOf(getApprovalStatus());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case REPAYMENT_VOUCHER_PATH:
      return getRepaymentVoucherPath();

    case XI_FEE_VOUCHER_PATH:
      return getXiFeeVoucherPath();

    case LOAN_IDS:
      return getLoanIds();

    case QUERY_XI_FEE_STATUS:
      return Integer.valueOf(getQueryXiFeeStatus());

    case RE_APPLY_REASON:
      return getReApplyReason();

    case APPROVE_MONEY:
      return Double.valueOf(getApproveMoney());

    case CONFIRM_LOAN_STATUS:
      return Integer.valueOf(getConfirmLoanStatus());

    case CONFIRM_LOAN_REQUEST_TIME:
      return getConfirmLoanRequestTime();

    case CONFIRM_LOAN_RESULT_TIME:
      return getConfirmLoanResultTime();

    case CONFIRM_LOAN_REASON:
      return getConfirmLoanReason();

    case LOAN_JUSTICE_FILES:
      return getLoanJusticeFiles();

    case LOAN_BLANK_FILES:
      return getLoanBlankFiles();

    case LOAN_OTHER_FILES:
      return getLoanOtherFiles();

    case APPLY_LOAN_DATE:
      return getApplyLoanDate();

    case LOAN_REMARK:
      return getLoanRemark();

    case PAYMENT_BANK:
      return getPaymentBank();

    case PAYMENT_BANK_BRANCH:
      return getPaymentBankBranch();

    case PAYMENT_ACCT_NAME:
      return getPaymentAcctName();

    case PAYMENT_ACCT_NO:
      return getPaymentAcctNo();

    case PAYMENT_PROVINCE_CODE:
      return getPaymentProvinceCode();

    case PAYMENT_CITY_CODE:
      return getPaymentCityCode();

    case PROVINCE_CODE:
      return getProvinceCode();

    case CITY_CODE:
      return getCityCode();

    case LOAN_EFFE_DATE:
      return getLoanEffeDate();

    case PARTNER_LOAN_DATE:
      return getPartnerLoanDate();

    case PARTNER_LOAN_FILE:
      return getPartnerLoanFile();

    case PARTNER_REAL_REFUND_DATE:
      return getPartnerRealRefundDate();

    case PARTNER_REFUND_FILE:
      return getPartnerRefundFile();

    case PARTNER_INTERESTS:
      return Double.valueOf(getPartnerInterests());

    case REPAYMENT_REPURCHASE_REMARK:
      return getRepaymentRepurchaseRemark();

    case REFUND_LOAN_AMOUNT:
      return Double.valueOf(getRefundLoanAmount());

    case REFUND_XIFEE:
      return Double.valueOf(getRefundXifee());

    case REFUND_DATE:
      return getRefundDate();

    case BUSINESS_CATEGORY:
      return Integer.valueOf(getBusinessCategory());

    case BUSINESS_CATEGORY_STR:
      return getBusinessCategoryStr();

    case PAY_ACCT_NO:
      return getPayAcctNo();

    case PAY_ACCT_NAME:
      return getPayAcctName();

    case PAY_BANK_NAME:
      return getPayBankName();

    case PAY_BANK_CODE:
      return getPayBankCode();

    case PAY_BANK_BRANCH:
      return getPayBankBranch();

    case PAY_PROVINCE_CODE:
      return getPayProvinceCode();

    case PAY_CITY_CODE:
      return getPayCityCode();

    case BEGIN_TIME:
      return getBeginTime();

    case END_TIME:
      return getEndTime();

    case ORDER_BY_TYPE:
      return Integer.valueOf(getOrderByType());

    case CONFIRM_LOAN_MONEY:
      return Double.valueOf(getConfirmLoanMoney());

    case CONFIRM_LOAN_DAYS:
      return Integer.valueOf(getConfirmLoanDays());

    case APPLY_DATE:
      return Integer.valueOf(getApplyDate());

    case HOUSE_PROVINCE_CODE:
      return getHouseProvinceCode();

    case HOUSE_CITY_CODE:
      return getHouseCityCode();

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case PARTNER_ORDER_CODE:
      return getPartnerOrderCode();

    case LOAN_PERIOD_LIMIT:
      return Integer.valueOf(getLoanPeriodLimit());

    case IS_CREDIT_LOAN:
      return Integer.valueOf(getIsCreditLoan());

    case PAYMENT_BANK_PHONE:
      return getPaymentBankPhone();

    case PAYMENT_BANK_LINE_NO:
      return getPaymentBankLineNo();

    case REQUEST_STATUS_LIST:
      return getRequestStatusList();

    case REFUND_TOTAL_AMOUNT:
      return Double.valueOf(getRefundTotalAmount());

    case REFUND_PENALTY:
      return Double.valueOf(getRefundPenalty());

    case REFUND_FINE:
      return Double.valueOf(getRefundFine());

    case REFUND_COMPDINTE:
      return Double.valueOf(getRefundCompdinte());

    case PARTNER_PLATFORM_ORDER_CODE:
      return getPartnerPlatformOrderCode();

    case PLAN_REFUND_DATE:
      return getPlanRefundDate();

    case FROM_PLAN_REFUND_DATE:
      return getFromPlanRefundDate();

    case TO_PLAN_REFUND_DATE:
      return getToPlanRefundDate();

    case PARTNER_PUSH_ACCOUNT:
      return Integer.valueOf(getPartnerPushAccount());

    case PARTNER_GROSS_RATE:
      return Double.valueOf(getPartnerGrossRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case LOAN_ID:
      return isSetLoanId();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case PARTNER_NO:
      return isSetPartnerNo();
    case REQUEST_FILES:
      return isSetRequestFiles();
    case REMARK:
      return isSetRemark();
    case REQUEST_TIME:
      return isSetRequestTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case APPROVAL_TIME:
      return isSetApprovalTime();
    case APPROVAL_COMMENT:
      return isSetApprovalComment();
    case SUBMIT_APPROVAL_TIME:
      return isSetSubmitApprovalTime();
    case IS_CLOSED:
      return isSetIsClosed();
    case LOAN_STATUS:
      return isSetLoanStatus();
    case LOAN_TIME:
      return isSetLoanTime();
    case LOAN_RESULT_TIME:
      return isSetLoanResultTime();
    case REPAYMENT_REPURCHASE_TYPE:
      return isSetRepaymentRepurchaseType();
    case REPAYMENT_REPURCHASE_STATUS:
      return isSetRepaymentRepurchaseStatus();
    case REPAYMENT_REPURCHASE_TIME:
      return isSetRepaymentRepurchaseTime();
    case RP_RESULT_TIME:
      return isSetRpResultTime();
    case LOAN_AMOUNT:
      return isSetLoanAmount();
    case TOTAL_COST:
      return isSetTotalCost();
    case PREMIUM:
      return isSetPremium();
    case GUARANTEE_FEE:
      return isSetGuaranteeFee();
    case XI_FEE_REQUEST_TIME:
      return isSetXiFeeRequestTime();
    case XI_FEE_RESULT_TIME:
      return isSetXiFeeResultTime();
    case XI_FEE_STATUS:
      return isSetXiFeeStatus();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_STATUS:
      return isSetProjectStatus();
    case PROJECT_STATUS_TIME:
      return isSetProjectStatusTime();
    case FILE_IDS:
      return isSetFileIds();
    case APPROVAL_STATUS:
      return isSetApprovalStatus();
    case PM_USER_ID:
      return isSetPmUserId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case REPAYMENT_VOUCHER_PATH:
      return isSetRepaymentVoucherPath();
    case XI_FEE_VOUCHER_PATH:
      return isSetXiFeeVoucherPath();
    case LOAN_IDS:
      return isSetLoanIds();
    case QUERY_XI_FEE_STATUS:
      return isSetQueryXiFeeStatus();
    case RE_APPLY_REASON:
      return isSetReApplyReason();
    case APPROVE_MONEY:
      return isSetApproveMoney();
    case CONFIRM_LOAN_STATUS:
      return isSetConfirmLoanStatus();
    case CONFIRM_LOAN_REQUEST_TIME:
      return isSetConfirmLoanRequestTime();
    case CONFIRM_LOAN_RESULT_TIME:
      return isSetConfirmLoanResultTime();
    case CONFIRM_LOAN_REASON:
      return isSetConfirmLoanReason();
    case LOAN_JUSTICE_FILES:
      return isSetLoanJusticeFiles();
    case LOAN_BLANK_FILES:
      return isSetLoanBlankFiles();
    case LOAN_OTHER_FILES:
      return isSetLoanOtherFiles();
    case APPLY_LOAN_DATE:
      return isSetApplyLoanDate();
    case LOAN_REMARK:
      return isSetLoanRemark();
    case PAYMENT_BANK:
      return isSetPaymentBank();
    case PAYMENT_BANK_BRANCH:
      return isSetPaymentBankBranch();
    case PAYMENT_ACCT_NAME:
      return isSetPaymentAcctName();
    case PAYMENT_ACCT_NO:
      return isSetPaymentAcctNo();
    case PAYMENT_PROVINCE_CODE:
      return isSetPaymentProvinceCode();
    case PAYMENT_CITY_CODE:
      return isSetPaymentCityCode();
    case PROVINCE_CODE:
      return isSetProvinceCode();
    case CITY_CODE:
      return isSetCityCode();
    case LOAN_EFFE_DATE:
      return isSetLoanEffeDate();
    case PARTNER_LOAN_DATE:
      return isSetPartnerLoanDate();
    case PARTNER_LOAN_FILE:
      return isSetPartnerLoanFile();
    case PARTNER_REAL_REFUND_DATE:
      return isSetPartnerRealRefundDate();
    case PARTNER_REFUND_FILE:
      return isSetPartnerRefundFile();
    case PARTNER_INTERESTS:
      return isSetPartnerInterests();
    case REPAYMENT_REPURCHASE_REMARK:
      return isSetRepaymentRepurchaseRemark();
    case REFUND_LOAN_AMOUNT:
      return isSetRefundLoanAmount();
    case REFUND_XIFEE:
      return isSetRefundXifee();
    case REFUND_DATE:
      return isSetRefundDate();
    case BUSINESS_CATEGORY:
      return isSetBusinessCategory();
    case BUSINESS_CATEGORY_STR:
      return isSetBusinessCategoryStr();
    case PAY_ACCT_NO:
      return isSetPayAcctNo();
    case PAY_ACCT_NAME:
      return isSetPayAcctName();
    case PAY_BANK_NAME:
      return isSetPayBankName();
    case PAY_BANK_CODE:
      return isSetPayBankCode();
    case PAY_BANK_BRANCH:
      return isSetPayBankBranch();
    case PAY_PROVINCE_CODE:
      return isSetPayProvinceCode();
    case PAY_CITY_CODE:
      return isSetPayCityCode();
    case BEGIN_TIME:
      return isSetBeginTime();
    case END_TIME:
      return isSetEndTime();
    case ORDER_BY_TYPE:
      return isSetOrderByType();
    case CONFIRM_LOAN_MONEY:
      return isSetConfirmLoanMoney();
    case CONFIRM_LOAN_DAYS:
      return isSetConfirmLoanDays();
    case APPLY_DATE:
      return isSetApplyDate();
    case HOUSE_PROVINCE_CODE:
      return isSetHouseProvinceCode();
    case HOUSE_CITY_CODE:
      return isSetHouseCityCode();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case PARTNER_ORDER_CODE:
      return isSetPartnerOrderCode();
    case LOAN_PERIOD_LIMIT:
      return isSetLoanPeriodLimit();
    case IS_CREDIT_LOAN:
      return isSetIsCreditLoan();
    case PAYMENT_BANK_PHONE:
      return isSetPaymentBankPhone();
    case PAYMENT_BANK_LINE_NO:
      return isSetPaymentBankLineNo();
    case REQUEST_STATUS_LIST:
      return isSetRequestStatusList();
    case REFUND_TOTAL_AMOUNT:
      return isSetRefundTotalAmount();
    case REFUND_PENALTY:
      return isSetRefundPenalty();
    case REFUND_FINE:
      return isSetRefundFine();
    case REFUND_COMPDINTE:
      return isSetRefundCompdinte();
    case PARTNER_PLATFORM_ORDER_CODE:
      return isSetPartnerPlatformOrderCode();
    case PLAN_REFUND_DATE:
      return isSetPlanRefundDate();
    case FROM_PLAN_REFUND_DATE:
      return isSetFromPlanRefundDate();
    case TO_PLAN_REFUND_DATE:
      return isSetToPlanRefundDate();
    case PARTNER_PUSH_ACCOUNT:
      return isSetPartnerPushAccount();
    case PARTNER_GROSS_RATE:
      return isSetPartnerGrossRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectPartner)
      return this.equals((ProjectPartner)that);
    return false;
  }

  public boolean equals(ProjectPartner that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_loanId = true && this.isSetLoanId();
    boolean that_present_loanId = true && that.isSetLoanId();
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (!this.loanId.equals(that.loanId))
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_partnerNo = true && this.isSetPartnerNo();
    boolean that_present_partnerNo = true && that.isSetPartnerNo();
    if (this_present_partnerNo || that_present_partnerNo) {
      if (!(this_present_partnerNo && that_present_partnerNo))
        return false;
      if (!this.partnerNo.equals(that.partnerNo))
        return false;
    }

    boolean this_present_requestFiles = true && this.isSetRequestFiles();
    boolean that_present_requestFiles = true && that.isSetRequestFiles();
    if (this_present_requestFiles || that_present_requestFiles) {
      if (!(this_present_requestFiles && that_present_requestFiles))
        return false;
      if (!this.requestFiles.equals(that.requestFiles))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_requestTime = true && this.isSetRequestTime();
    boolean that_present_requestTime = true && that.isSetRequestTime();
    if (this_present_requestTime || that_present_requestTime) {
      if (!(this_present_requestTime && that_present_requestTime))
        return false;
      if (!this.requestTime.equals(that.requestTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_approvalTime = true && this.isSetApprovalTime();
    boolean that_present_approvalTime = true && that.isSetApprovalTime();
    if (this_present_approvalTime || that_present_approvalTime) {
      if (!(this_present_approvalTime && that_present_approvalTime))
        return false;
      if (!this.approvalTime.equals(that.approvalTime))
        return false;
    }

    boolean this_present_approvalComment = true && this.isSetApprovalComment();
    boolean that_present_approvalComment = true && that.isSetApprovalComment();
    if (this_present_approvalComment || that_present_approvalComment) {
      if (!(this_present_approvalComment && that_present_approvalComment))
        return false;
      if (!this.approvalComment.equals(that.approvalComment))
        return false;
    }

    boolean this_present_submitApprovalTime = true && this.isSetSubmitApprovalTime();
    boolean that_present_submitApprovalTime = true && that.isSetSubmitApprovalTime();
    if (this_present_submitApprovalTime || that_present_submitApprovalTime) {
      if (!(this_present_submitApprovalTime && that_present_submitApprovalTime))
        return false;
      if (!this.submitApprovalTime.equals(that.submitApprovalTime))
        return false;
    }

    boolean this_present_isClosed = true;
    boolean that_present_isClosed = true;
    if (this_present_isClosed || that_present_isClosed) {
      if (!(this_present_isClosed && that_present_isClosed))
        return false;
      if (this.isClosed != that.isClosed)
        return false;
    }

    boolean this_present_loanStatus = true;
    boolean that_present_loanStatus = true;
    if (this_present_loanStatus || that_present_loanStatus) {
      if (!(this_present_loanStatus && that_present_loanStatus))
        return false;
      if (this.loanStatus != that.loanStatus)
        return false;
    }

    boolean this_present_loanTime = true && this.isSetLoanTime();
    boolean that_present_loanTime = true && that.isSetLoanTime();
    if (this_present_loanTime || that_present_loanTime) {
      if (!(this_present_loanTime && that_present_loanTime))
        return false;
      if (!this.loanTime.equals(that.loanTime))
        return false;
    }

    boolean this_present_loanResultTime = true && this.isSetLoanResultTime();
    boolean that_present_loanResultTime = true && that.isSetLoanResultTime();
    if (this_present_loanResultTime || that_present_loanResultTime) {
      if (!(this_present_loanResultTime && that_present_loanResultTime))
        return false;
      if (!this.loanResultTime.equals(that.loanResultTime))
        return false;
    }

    boolean this_present_repaymentRepurchaseType = true;
    boolean that_present_repaymentRepurchaseType = true;
    if (this_present_repaymentRepurchaseType || that_present_repaymentRepurchaseType) {
      if (!(this_present_repaymentRepurchaseType && that_present_repaymentRepurchaseType))
        return false;
      if (this.repaymentRepurchaseType != that.repaymentRepurchaseType)
        return false;
    }

    boolean this_present_repaymentRepurchaseStatus = true;
    boolean that_present_repaymentRepurchaseStatus = true;
    if (this_present_repaymentRepurchaseStatus || that_present_repaymentRepurchaseStatus) {
      if (!(this_present_repaymentRepurchaseStatus && that_present_repaymentRepurchaseStatus))
        return false;
      if (this.repaymentRepurchaseStatus != that.repaymentRepurchaseStatus)
        return false;
    }

    boolean this_present_repaymentRepurchaseTime = true && this.isSetRepaymentRepurchaseTime();
    boolean that_present_repaymentRepurchaseTime = true && that.isSetRepaymentRepurchaseTime();
    if (this_present_repaymentRepurchaseTime || that_present_repaymentRepurchaseTime) {
      if (!(this_present_repaymentRepurchaseTime && that_present_repaymentRepurchaseTime))
        return false;
      if (!this.repaymentRepurchaseTime.equals(that.repaymentRepurchaseTime))
        return false;
    }

    boolean this_present_rpResultTime = true && this.isSetRpResultTime();
    boolean that_present_rpResultTime = true && that.isSetRpResultTime();
    if (this_present_rpResultTime || that_present_rpResultTime) {
      if (!(this_present_rpResultTime && that_present_rpResultTime))
        return false;
      if (!this.rpResultTime.equals(that.rpResultTime))
        return false;
    }

    boolean this_present_loanAmount = true;
    boolean that_present_loanAmount = true;
    if (this_present_loanAmount || that_present_loanAmount) {
      if (!(this_present_loanAmount && that_present_loanAmount))
        return false;
      if (this.loanAmount != that.loanAmount)
        return false;
    }

    boolean this_present_totalCost = true;
    boolean that_present_totalCost = true;
    if (this_present_totalCost || that_present_totalCost) {
      if (!(this_present_totalCost && that_present_totalCost))
        return false;
      if (this.totalCost != that.totalCost)
        return false;
    }

    boolean this_present_premium = true;
    boolean that_present_premium = true;
    if (this_present_premium || that_present_premium) {
      if (!(this_present_premium && that_present_premium))
        return false;
      if (this.premium != that.premium)
        return false;
    }

    boolean this_present_guaranteeFee = true;
    boolean that_present_guaranteeFee = true;
    if (this_present_guaranteeFee || that_present_guaranteeFee) {
      if (!(this_present_guaranteeFee && that_present_guaranteeFee))
        return false;
      if (this.guaranteeFee != that.guaranteeFee)
        return false;
    }

    boolean this_present_xiFeeRequestTime = true && this.isSetXiFeeRequestTime();
    boolean that_present_xiFeeRequestTime = true && that.isSetXiFeeRequestTime();
    if (this_present_xiFeeRequestTime || that_present_xiFeeRequestTime) {
      if (!(this_present_xiFeeRequestTime && that_present_xiFeeRequestTime))
        return false;
      if (!this.xiFeeRequestTime.equals(that.xiFeeRequestTime))
        return false;
    }

    boolean this_present_xiFeeResultTime = true && this.isSetXiFeeResultTime();
    boolean that_present_xiFeeResultTime = true && that.isSetXiFeeResultTime();
    if (this_present_xiFeeResultTime || that_present_xiFeeResultTime) {
      if (!(this_present_xiFeeResultTime && that_present_xiFeeResultTime))
        return false;
      if (!this.xiFeeResultTime.equals(that.xiFeeResultTime))
        return false;
    }

    boolean this_present_xiFeeStatus = true;
    boolean that_present_xiFeeStatus = true;
    if (this_present_xiFeeStatus || that_present_xiFeeStatus) {
      if (!(this_present_xiFeeStatus && that_present_xiFeeStatus))
        return false;
      if (this.xiFeeStatus != that.xiFeeStatus)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectStatus = true;
    boolean that_present_projectStatus = true;
    if (this_present_projectStatus || that_present_projectStatus) {
      if (!(this_present_projectStatus && that_present_projectStatus))
        return false;
      if (this.projectStatus != that.projectStatus)
        return false;
    }

    boolean this_present_projectStatusTime = true && this.isSetProjectStatusTime();
    boolean that_present_projectStatusTime = true && that.isSetProjectStatusTime();
    if (this_present_projectStatusTime || that_present_projectStatusTime) {
      if (!(this_present_projectStatusTime && that_present_projectStatusTime))
        return false;
      if (!this.projectStatusTime.equals(that.projectStatusTime))
        return false;
    }

    boolean this_present_fileIds = true && this.isSetFileIds();
    boolean that_present_fileIds = true && that.isSetFileIds();
    if (this_present_fileIds || that_present_fileIds) {
      if (!(this_present_fileIds && that_present_fileIds))
        return false;
      if (!this.fileIds.equals(that.fileIds))
        return false;
    }

    boolean this_present_approvalStatus = true;
    boolean that_present_approvalStatus = true;
    if (this_present_approvalStatus || that_present_approvalStatus) {
      if (!(this_present_approvalStatus && that_present_approvalStatus))
        return false;
      if (this.approvalStatus != that.approvalStatus)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_repaymentVoucherPath = true && this.isSetRepaymentVoucherPath();
    boolean that_present_repaymentVoucherPath = true && that.isSetRepaymentVoucherPath();
    if (this_present_repaymentVoucherPath || that_present_repaymentVoucherPath) {
      if (!(this_present_repaymentVoucherPath && that_present_repaymentVoucherPath))
        return false;
      if (!this.repaymentVoucherPath.equals(that.repaymentVoucherPath))
        return false;
    }

    boolean this_present_xiFeeVoucherPath = true && this.isSetXiFeeVoucherPath();
    boolean that_present_xiFeeVoucherPath = true && that.isSetXiFeeVoucherPath();
    if (this_present_xiFeeVoucherPath || that_present_xiFeeVoucherPath) {
      if (!(this_present_xiFeeVoucherPath && that_present_xiFeeVoucherPath))
        return false;
      if (!this.xiFeeVoucherPath.equals(that.xiFeeVoucherPath))
        return false;
    }

    boolean this_present_loanIds = true && this.isSetLoanIds();
    boolean that_present_loanIds = true && that.isSetLoanIds();
    if (this_present_loanIds || that_present_loanIds) {
      if (!(this_present_loanIds && that_present_loanIds))
        return false;
      if (!this.loanIds.equals(that.loanIds))
        return false;
    }

    boolean this_present_queryXiFeeStatus = true;
    boolean that_present_queryXiFeeStatus = true;
    if (this_present_queryXiFeeStatus || that_present_queryXiFeeStatus) {
      if (!(this_present_queryXiFeeStatus && that_present_queryXiFeeStatus))
        return false;
      if (this.queryXiFeeStatus != that.queryXiFeeStatus)
        return false;
    }

    boolean this_present_reApplyReason = true && this.isSetReApplyReason();
    boolean that_present_reApplyReason = true && that.isSetReApplyReason();
    if (this_present_reApplyReason || that_present_reApplyReason) {
      if (!(this_present_reApplyReason && that_present_reApplyReason))
        return false;
      if (!this.reApplyReason.equals(that.reApplyReason))
        return false;
    }

    boolean this_present_approveMoney = true;
    boolean that_present_approveMoney = true;
    if (this_present_approveMoney || that_present_approveMoney) {
      if (!(this_present_approveMoney && that_present_approveMoney))
        return false;
      if (this.approveMoney != that.approveMoney)
        return false;
    }

    boolean this_present_confirmLoanStatus = true;
    boolean that_present_confirmLoanStatus = true;
    if (this_present_confirmLoanStatus || that_present_confirmLoanStatus) {
      if (!(this_present_confirmLoanStatus && that_present_confirmLoanStatus))
        return false;
      if (this.confirmLoanStatus != that.confirmLoanStatus)
        return false;
    }

    boolean this_present_confirmLoanRequestTime = true && this.isSetConfirmLoanRequestTime();
    boolean that_present_confirmLoanRequestTime = true && that.isSetConfirmLoanRequestTime();
    if (this_present_confirmLoanRequestTime || that_present_confirmLoanRequestTime) {
      if (!(this_present_confirmLoanRequestTime && that_present_confirmLoanRequestTime))
        return false;
      if (!this.confirmLoanRequestTime.equals(that.confirmLoanRequestTime))
        return false;
    }

    boolean this_present_confirmLoanResultTime = true && this.isSetConfirmLoanResultTime();
    boolean that_present_confirmLoanResultTime = true && that.isSetConfirmLoanResultTime();
    if (this_present_confirmLoanResultTime || that_present_confirmLoanResultTime) {
      if (!(this_present_confirmLoanResultTime && that_present_confirmLoanResultTime))
        return false;
      if (!this.confirmLoanResultTime.equals(that.confirmLoanResultTime))
        return false;
    }

    boolean this_present_confirmLoanReason = true && this.isSetConfirmLoanReason();
    boolean that_present_confirmLoanReason = true && that.isSetConfirmLoanReason();
    if (this_present_confirmLoanReason || that_present_confirmLoanReason) {
      if (!(this_present_confirmLoanReason && that_present_confirmLoanReason))
        return false;
      if (!this.confirmLoanReason.equals(that.confirmLoanReason))
        return false;
    }

    boolean this_present_loanJusticeFiles = true && this.isSetLoanJusticeFiles();
    boolean that_present_loanJusticeFiles = true && that.isSetLoanJusticeFiles();
    if (this_present_loanJusticeFiles || that_present_loanJusticeFiles) {
      if (!(this_present_loanJusticeFiles && that_present_loanJusticeFiles))
        return false;
      if (!this.loanJusticeFiles.equals(that.loanJusticeFiles))
        return false;
    }

    boolean this_present_loanBlankFiles = true && this.isSetLoanBlankFiles();
    boolean that_present_loanBlankFiles = true && that.isSetLoanBlankFiles();
    if (this_present_loanBlankFiles || that_present_loanBlankFiles) {
      if (!(this_present_loanBlankFiles && that_present_loanBlankFiles))
        return false;
      if (!this.loanBlankFiles.equals(that.loanBlankFiles))
        return false;
    }

    boolean this_present_loanOtherFiles = true && this.isSetLoanOtherFiles();
    boolean that_present_loanOtherFiles = true && that.isSetLoanOtherFiles();
    if (this_present_loanOtherFiles || that_present_loanOtherFiles) {
      if (!(this_present_loanOtherFiles && that_present_loanOtherFiles))
        return false;
      if (!this.loanOtherFiles.equals(that.loanOtherFiles))
        return false;
    }

    boolean this_present_applyLoanDate = true && this.isSetApplyLoanDate();
    boolean that_present_applyLoanDate = true && that.isSetApplyLoanDate();
    if (this_present_applyLoanDate || that_present_applyLoanDate) {
      if (!(this_present_applyLoanDate && that_present_applyLoanDate))
        return false;
      if (!this.applyLoanDate.equals(that.applyLoanDate))
        return false;
    }

    boolean this_present_loanRemark = true && this.isSetLoanRemark();
    boolean that_present_loanRemark = true && that.isSetLoanRemark();
    if (this_present_loanRemark || that_present_loanRemark) {
      if (!(this_present_loanRemark && that_present_loanRemark))
        return false;
      if (!this.loanRemark.equals(that.loanRemark))
        return false;
    }

    boolean this_present_paymentBank = true && this.isSetPaymentBank();
    boolean that_present_paymentBank = true && that.isSetPaymentBank();
    if (this_present_paymentBank || that_present_paymentBank) {
      if (!(this_present_paymentBank && that_present_paymentBank))
        return false;
      if (!this.paymentBank.equals(that.paymentBank))
        return false;
    }

    boolean this_present_paymentBankBranch = true && this.isSetPaymentBankBranch();
    boolean that_present_paymentBankBranch = true && that.isSetPaymentBankBranch();
    if (this_present_paymentBankBranch || that_present_paymentBankBranch) {
      if (!(this_present_paymentBankBranch && that_present_paymentBankBranch))
        return false;
      if (!this.paymentBankBranch.equals(that.paymentBankBranch))
        return false;
    }

    boolean this_present_paymentAcctName = true && this.isSetPaymentAcctName();
    boolean that_present_paymentAcctName = true && that.isSetPaymentAcctName();
    if (this_present_paymentAcctName || that_present_paymentAcctName) {
      if (!(this_present_paymentAcctName && that_present_paymentAcctName))
        return false;
      if (!this.paymentAcctName.equals(that.paymentAcctName))
        return false;
    }

    boolean this_present_paymentAcctNo = true && this.isSetPaymentAcctNo();
    boolean that_present_paymentAcctNo = true && that.isSetPaymentAcctNo();
    if (this_present_paymentAcctNo || that_present_paymentAcctNo) {
      if (!(this_present_paymentAcctNo && that_present_paymentAcctNo))
        return false;
      if (!this.paymentAcctNo.equals(that.paymentAcctNo))
        return false;
    }

    boolean this_present_paymentProvinceCode = true && this.isSetPaymentProvinceCode();
    boolean that_present_paymentProvinceCode = true && that.isSetPaymentProvinceCode();
    if (this_present_paymentProvinceCode || that_present_paymentProvinceCode) {
      if (!(this_present_paymentProvinceCode && that_present_paymentProvinceCode))
        return false;
      if (!this.paymentProvinceCode.equals(that.paymentProvinceCode))
        return false;
    }

    boolean this_present_paymentCityCode = true && this.isSetPaymentCityCode();
    boolean that_present_paymentCityCode = true && that.isSetPaymentCityCode();
    if (this_present_paymentCityCode || that_present_paymentCityCode) {
      if (!(this_present_paymentCityCode && that_present_paymentCityCode))
        return false;
      if (!this.paymentCityCode.equals(that.paymentCityCode))
        return false;
    }

    boolean this_present_provinceCode = true && this.isSetProvinceCode();
    boolean that_present_provinceCode = true && that.isSetProvinceCode();
    if (this_present_provinceCode || that_present_provinceCode) {
      if (!(this_present_provinceCode && that_present_provinceCode))
        return false;
      if (!this.provinceCode.equals(that.provinceCode))
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (!this.cityCode.equals(that.cityCode))
        return false;
    }

    boolean this_present_loanEffeDate = true && this.isSetLoanEffeDate();
    boolean that_present_loanEffeDate = true && that.isSetLoanEffeDate();
    if (this_present_loanEffeDate || that_present_loanEffeDate) {
      if (!(this_present_loanEffeDate && that_present_loanEffeDate))
        return false;
      if (!this.loanEffeDate.equals(that.loanEffeDate))
        return false;
    }

    boolean this_present_partnerLoanDate = true && this.isSetPartnerLoanDate();
    boolean that_present_partnerLoanDate = true && that.isSetPartnerLoanDate();
    if (this_present_partnerLoanDate || that_present_partnerLoanDate) {
      if (!(this_present_partnerLoanDate && that_present_partnerLoanDate))
        return false;
      if (!this.partnerLoanDate.equals(that.partnerLoanDate))
        return false;
    }

    boolean this_present_partnerLoanFile = true && this.isSetPartnerLoanFile();
    boolean that_present_partnerLoanFile = true && that.isSetPartnerLoanFile();
    if (this_present_partnerLoanFile || that_present_partnerLoanFile) {
      if (!(this_present_partnerLoanFile && that_present_partnerLoanFile))
        return false;
      if (!this.partnerLoanFile.equals(that.partnerLoanFile))
        return false;
    }

    boolean this_present_partnerRealRefundDate = true && this.isSetPartnerRealRefundDate();
    boolean that_present_partnerRealRefundDate = true && that.isSetPartnerRealRefundDate();
    if (this_present_partnerRealRefundDate || that_present_partnerRealRefundDate) {
      if (!(this_present_partnerRealRefundDate && that_present_partnerRealRefundDate))
        return false;
      if (!this.partnerRealRefundDate.equals(that.partnerRealRefundDate))
        return false;
    }

    boolean this_present_partnerRefundFile = true && this.isSetPartnerRefundFile();
    boolean that_present_partnerRefundFile = true && that.isSetPartnerRefundFile();
    if (this_present_partnerRefundFile || that_present_partnerRefundFile) {
      if (!(this_present_partnerRefundFile && that_present_partnerRefundFile))
        return false;
      if (!this.partnerRefundFile.equals(that.partnerRefundFile))
        return false;
    }

    boolean this_present_partnerInterests = true;
    boolean that_present_partnerInterests = true;
    if (this_present_partnerInterests || that_present_partnerInterests) {
      if (!(this_present_partnerInterests && that_present_partnerInterests))
        return false;
      if (this.partnerInterests != that.partnerInterests)
        return false;
    }

    boolean this_present_repaymentRepurchaseRemark = true && this.isSetRepaymentRepurchaseRemark();
    boolean that_present_repaymentRepurchaseRemark = true && that.isSetRepaymentRepurchaseRemark();
    if (this_present_repaymentRepurchaseRemark || that_present_repaymentRepurchaseRemark) {
      if (!(this_present_repaymentRepurchaseRemark && that_present_repaymentRepurchaseRemark))
        return false;
      if (!this.repaymentRepurchaseRemark.equals(that.repaymentRepurchaseRemark))
        return false;
    }

    boolean this_present_refundLoanAmount = true;
    boolean that_present_refundLoanAmount = true;
    if (this_present_refundLoanAmount || that_present_refundLoanAmount) {
      if (!(this_present_refundLoanAmount && that_present_refundLoanAmount))
        return false;
      if (this.refundLoanAmount != that.refundLoanAmount)
        return false;
    }

    boolean this_present_refundXifee = true;
    boolean that_present_refundXifee = true;
    if (this_present_refundXifee || that_present_refundXifee) {
      if (!(this_present_refundXifee && that_present_refundXifee))
        return false;
      if (this.refundXifee != that.refundXifee)
        return false;
    }

    boolean this_present_refundDate = true && this.isSetRefundDate();
    boolean that_present_refundDate = true && that.isSetRefundDate();
    if (this_present_refundDate || that_present_refundDate) {
      if (!(this_present_refundDate && that_present_refundDate))
        return false;
      if (!this.refundDate.equals(that.refundDate))
        return false;
    }

    boolean this_present_businessCategory = true;
    boolean that_present_businessCategory = true;
    if (this_present_businessCategory || that_present_businessCategory) {
      if (!(this_present_businessCategory && that_present_businessCategory))
        return false;
      if (this.businessCategory != that.businessCategory)
        return false;
    }

    boolean this_present_businessCategoryStr = true && this.isSetBusinessCategoryStr();
    boolean that_present_businessCategoryStr = true && that.isSetBusinessCategoryStr();
    if (this_present_businessCategoryStr || that_present_businessCategoryStr) {
      if (!(this_present_businessCategoryStr && that_present_businessCategoryStr))
        return false;
      if (!this.businessCategoryStr.equals(that.businessCategoryStr))
        return false;
    }

    boolean this_present_payAcctNo = true && this.isSetPayAcctNo();
    boolean that_present_payAcctNo = true && that.isSetPayAcctNo();
    if (this_present_payAcctNo || that_present_payAcctNo) {
      if (!(this_present_payAcctNo && that_present_payAcctNo))
        return false;
      if (!this.payAcctNo.equals(that.payAcctNo))
        return false;
    }

    boolean this_present_payAcctName = true && this.isSetPayAcctName();
    boolean that_present_payAcctName = true && that.isSetPayAcctName();
    if (this_present_payAcctName || that_present_payAcctName) {
      if (!(this_present_payAcctName && that_present_payAcctName))
        return false;
      if (!this.payAcctName.equals(that.payAcctName))
        return false;
    }

    boolean this_present_payBankName = true && this.isSetPayBankName();
    boolean that_present_payBankName = true && that.isSetPayBankName();
    if (this_present_payBankName || that_present_payBankName) {
      if (!(this_present_payBankName && that_present_payBankName))
        return false;
      if (!this.payBankName.equals(that.payBankName))
        return false;
    }

    boolean this_present_payBankCode = true && this.isSetPayBankCode();
    boolean that_present_payBankCode = true && that.isSetPayBankCode();
    if (this_present_payBankCode || that_present_payBankCode) {
      if (!(this_present_payBankCode && that_present_payBankCode))
        return false;
      if (!this.payBankCode.equals(that.payBankCode))
        return false;
    }

    boolean this_present_payBankBranch = true && this.isSetPayBankBranch();
    boolean that_present_payBankBranch = true && that.isSetPayBankBranch();
    if (this_present_payBankBranch || that_present_payBankBranch) {
      if (!(this_present_payBankBranch && that_present_payBankBranch))
        return false;
      if (!this.payBankBranch.equals(that.payBankBranch))
        return false;
    }

    boolean this_present_payProvinceCode = true && this.isSetPayProvinceCode();
    boolean that_present_payProvinceCode = true && that.isSetPayProvinceCode();
    if (this_present_payProvinceCode || that_present_payProvinceCode) {
      if (!(this_present_payProvinceCode && that_present_payProvinceCode))
        return false;
      if (!this.payProvinceCode.equals(that.payProvinceCode))
        return false;
    }

    boolean this_present_payCityCode = true && this.isSetPayCityCode();
    boolean that_present_payCityCode = true && that.isSetPayCityCode();
    if (this_present_payCityCode || that_present_payCityCode) {
      if (!(this_present_payCityCode && that_present_payCityCode))
        return false;
      if (!this.payCityCode.equals(that.payCityCode))
        return false;
    }

    boolean this_present_beginTime = true && this.isSetBeginTime();
    boolean that_present_beginTime = true && that.isSetBeginTime();
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (!this.beginTime.equals(that.beginTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_orderByType = true;
    boolean that_present_orderByType = true;
    if (this_present_orderByType || that_present_orderByType) {
      if (!(this_present_orderByType && that_present_orderByType))
        return false;
      if (this.orderByType != that.orderByType)
        return false;
    }

    boolean this_present_confirmLoanMoney = true;
    boolean that_present_confirmLoanMoney = true;
    if (this_present_confirmLoanMoney || that_present_confirmLoanMoney) {
      if (!(this_present_confirmLoanMoney && that_present_confirmLoanMoney))
        return false;
      if (this.confirmLoanMoney != that.confirmLoanMoney)
        return false;
    }

    boolean this_present_confirmLoanDays = true;
    boolean that_present_confirmLoanDays = true;
    if (this_present_confirmLoanDays || that_present_confirmLoanDays) {
      if (!(this_present_confirmLoanDays && that_present_confirmLoanDays))
        return false;
      if (this.confirmLoanDays != that.confirmLoanDays)
        return false;
    }

    boolean this_present_applyDate = true;
    boolean that_present_applyDate = true;
    if (this_present_applyDate || that_present_applyDate) {
      if (!(this_present_applyDate && that_present_applyDate))
        return false;
      if (this.applyDate != that.applyDate)
        return false;
    }

    boolean this_present_houseProvinceCode = true && this.isSetHouseProvinceCode();
    boolean that_present_houseProvinceCode = true && that.isSetHouseProvinceCode();
    if (this_present_houseProvinceCode || that_present_houseProvinceCode) {
      if (!(this_present_houseProvinceCode && that_present_houseProvinceCode))
        return false;
      if (!this.houseProvinceCode.equals(that.houseProvinceCode))
        return false;
    }

    boolean this_present_houseCityCode = true && this.isSetHouseCityCode();
    boolean that_present_houseCityCode = true && that.isSetHouseCityCode();
    if (this_present_houseCityCode || that_present_houseCityCode) {
      if (!(this_present_houseCityCode && that_present_houseCityCode))
        return false;
      if (!this.houseCityCode.equals(that.houseCityCode))
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_partnerOrderCode = true && this.isSetPartnerOrderCode();
    boolean that_present_partnerOrderCode = true && that.isSetPartnerOrderCode();
    if (this_present_partnerOrderCode || that_present_partnerOrderCode) {
      if (!(this_present_partnerOrderCode && that_present_partnerOrderCode))
        return false;
      if (!this.partnerOrderCode.equals(that.partnerOrderCode))
        return false;
    }

    boolean this_present_loanPeriodLimit = true;
    boolean that_present_loanPeriodLimit = true;
    if (this_present_loanPeriodLimit || that_present_loanPeriodLimit) {
      if (!(this_present_loanPeriodLimit && that_present_loanPeriodLimit))
        return false;
      if (this.loanPeriodLimit != that.loanPeriodLimit)
        return false;
    }

    boolean this_present_isCreditLoan = true;
    boolean that_present_isCreditLoan = true;
    if (this_present_isCreditLoan || that_present_isCreditLoan) {
      if (!(this_present_isCreditLoan && that_present_isCreditLoan))
        return false;
      if (this.isCreditLoan != that.isCreditLoan)
        return false;
    }

    boolean this_present_paymentBankPhone = true && this.isSetPaymentBankPhone();
    boolean that_present_paymentBankPhone = true && that.isSetPaymentBankPhone();
    if (this_present_paymentBankPhone || that_present_paymentBankPhone) {
      if (!(this_present_paymentBankPhone && that_present_paymentBankPhone))
        return false;
      if (!this.paymentBankPhone.equals(that.paymentBankPhone))
        return false;
    }

    boolean this_present_paymentBankLineNo = true && this.isSetPaymentBankLineNo();
    boolean that_present_paymentBankLineNo = true && that.isSetPaymentBankLineNo();
    if (this_present_paymentBankLineNo || that_present_paymentBankLineNo) {
      if (!(this_present_paymentBankLineNo && that_present_paymentBankLineNo))
        return false;
      if (!this.paymentBankLineNo.equals(that.paymentBankLineNo))
        return false;
    }

    boolean this_present_requestStatusList = true && this.isSetRequestStatusList();
    boolean that_present_requestStatusList = true && that.isSetRequestStatusList();
    if (this_present_requestStatusList || that_present_requestStatusList) {
      if (!(this_present_requestStatusList && that_present_requestStatusList))
        return false;
      if (!this.requestStatusList.equals(that.requestStatusList))
        return false;
    }

    boolean this_present_refundTotalAmount = true;
    boolean that_present_refundTotalAmount = true;
    if (this_present_refundTotalAmount || that_present_refundTotalAmount) {
      if (!(this_present_refundTotalAmount && that_present_refundTotalAmount))
        return false;
      if (this.refundTotalAmount != that.refundTotalAmount)
        return false;
    }

    boolean this_present_refundPenalty = true;
    boolean that_present_refundPenalty = true;
    if (this_present_refundPenalty || that_present_refundPenalty) {
      if (!(this_present_refundPenalty && that_present_refundPenalty))
        return false;
      if (this.refundPenalty != that.refundPenalty)
        return false;
    }

    boolean this_present_refundFine = true;
    boolean that_present_refundFine = true;
    if (this_present_refundFine || that_present_refundFine) {
      if (!(this_present_refundFine && that_present_refundFine))
        return false;
      if (this.refundFine != that.refundFine)
        return false;
    }

    boolean this_present_refundCompdinte = true;
    boolean that_present_refundCompdinte = true;
    if (this_present_refundCompdinte || that_present_refundCompdinte) {
      if (!(this_present_refundCompdinte && that_present_refundCompdinte))
        return false;
      if (this.refundCompdinte != that.refundCompdinte)
        return false;
    }

    boolean this_present_partnerPlatformOrderCode = true && this.isSetPartnerPlatformOrderCode();
    boolean that_present_partnerPlatformOrderCode = true && that.isSetPartnerPlatformOrderCode();
    if (this_present_partnerPlatformOrderCode || that_present_partnerPlatformOrderCode) {
      if (!(this_present_partnerPlatformOrderCode && that_present_partnerPlatformOrderCode))
        return false;
      if (!this.partnerPlatformOrderCode.equals(that.partnerPlatformOrderCode))
        return false;
    }

    boolean this_present_planRefundDate = true && this.isSetPlanRefundDate();
    boolean that_present_planRefundDate = true && that.isSetPlanRefundDate();
    if (this_present_planRefundDate || that_present_planRefundDate) {
      if (!(this_present_planRefundDate && that_present_planRefundDate))
        return false;
      if (!this.planRefundDate.equals(that.planRefundDate))
        return false;
    }

    boolean this_present_fromPlanRefundDate = true && this.isSetFromPlanRefundDate();
    boolean that_present_fromPlanRefundDate = true && that.isSetFromPlanRefundDate();
    if (this_present_fromPlanRefundDate || that_present_fromPlanRefundDate) {
      if (!(this_present_fromPlanRefundDate && that_present_fromPlanRefundDate))
        return false;
      if (!this.fromPlanRefundDate.equals(that.fromPlanRefundDate))
        return false;
    }

    boolean this_present_toPlanRefundDate = true && this.isSetToPlanRefundDate();
    boolean that_present_toPlanRefundDate = true && that.isSetToPlanRefundDate();
    if (this_present_toPlanRefundDate || that_present_toPlanRefundDate) {
      if (!(this_present_toPlanRefundDate && that_present_toPlanRefundDate))
        return false;
      if (!this.toPlanRefundDate.equals(that.toPlanRefundDate))
        return false;
    }

    boolean this_present_partnerPushAccount = true;
    boolean that_present_partnerPushAccount = true;
    if (this_present_partnerPushAccount || that_present_partnerPushAccount) {
      if (!(this_present_partnerPushAccount && that_present_partnerPushAccount))
        return false;
      if (this.partnerPushAccount != that.partnerPushAccount)
        return false;
    }

    boolean this_present_partnerGrossRate = true;
    boolean that_present_partnerGrossRate = true;
    if (this_present_partnerGrossRate || that_present_partnerGrossRate) {
      if (!(this_present_partnerGrossRate && that_present_partnerGrossRate))
        return false;
      if (this.partnerGrossRate != that.partnerGrossRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_loanId = true && (isSetLoanId());
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_partnerNo = true && (isSetPartnerNo());
    list.add(present_partnerNo);
    if (present_partnerNo)
      list.add(partnerNo);

    boolean present_requestFiles = true && (isSetRequestFiles());
    list.add(present_requestFiles);
    if (present_requestFiles)
      list.add(requestFiles);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_requestTime = true && (isSetRequestTime());
    list.add(present_requestTime);
    if (present_requestTime)
      list.add(requestTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_approvalTime = true && (isSetApprovalTime());
    list.add(present_approvalTime);
    if (present_approvalTime)
      list.add(approvalTime);

    boolean present_approvalComment = true && (isSetApprovalComment());
    list.add(present_approvalComment);
    if (present_approvalComment)
      list.add(approvalComment);

    boolean present_submitApprovalTime = true && (isSetSubmitApprovalTime());
    list.add(present_submitApprovalTime);
    if (present_submitApprovalTime)
      list.add(submitApprovalTime);

    boolean present_isClosed = true;
    list.add(present_isClosed);
    if (present_isClosed)
      list.add(isClosed);

    boolean present_loanStatus = true;
    list.add(present_loanStatus);
    if (present_loanStatus)
      list.add(loanStatus);

    boolean present_loanTime = true && (isSetLoanTime());
    list.add(present_loanTime);
    if (present_loanTime)
      list.add(loanTime);

    boolean present_loanResultTime = true && (isSetLoanResultTime());
    list.add(present_loanResultTime);
    if (present_loanResultTime)
      list.add(loanResultTime);

    boolean present_repaymentRepurchaseType = true;
    list.add(present_repaymentRepurchaseType);
    if (present_repaymentRepurchaseType)
      list.add(repaymentRepurchaseType);

    boolean present_repaymentRepurchaseStatus = true;
    list.add(present_repaymentRepurchaseStatus);
    if (present_repaymentRepurchaseStatus)
      list.add(repaymentRepurchaseStatus);

    boolean present_repaymentRepurchaseTime = true && (isSetRepaymentRepurchaseTime());
    list.add(present_repaymentRepurchaseTime);
    if (present_repaymentRepurchaseTime)
      list.add(repaymentRepurchaseTime);

    boolean present_rpResultTime = true && (isSetRpResultTime());
    list.add(present_rpResultTime);
    if (present_rpResultTime)
      list.add(rpResultTime);

    boolean present_loanAmount = true;
    list.add(present_loanAmount);
    if (present_loanAmount)
      list.add(loanAmount);

    boolean present_totalCost = true;
    list.add(present_totalCost);
    if (present_totalCost)
      list.add(totalCost);

    boolean present_premium = true;
    list.add(present_premium);
    if (present_premium)
      list.add(premium);

    boolean present_guaranteeFee = true;
    list.add(present_guaranteeFee);
    if (present_guaranteeFee)
      list.add(guaranteeFee);

    boolean present_xiFeeRequestTime = true && (isSetXiFeeRequestTime());
    list.add(present_xiFeeRequestTime);
    if (present_xiFeeRequestTime)
      list.add(xiFeeRequestTime);

    boolean present_xiFeeResultTime = true && (isSetXiFeeResultTime());
    list.add(present_xiFeeResultTime);
    if (present_xiFeeResultTime)
      list.add(xiFeeResultTime);

    boolean present_xiFeeStatus = true;
    list.add(present_xiFeeStatus);
    if (present_xiFeeStatus)
      list.add(xiFeeStatus);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectStatus = true;
    list.add(present_projectStatus);
    if (present_projectStatus)
      list.add(projectStatus);

    boolean present_projectStatusTime = true && (isSetProjectStatusTime());
    list.add(present_projectStatusTime);
    if (present_projectStatusTime)
      list.add(projectStatusTime);

    boolean present_fileIds = true && (isSetFileIds());
    list.add(present_fileIds);
    if (present_fileIds)
      list.add(fileIds);

    boolean present_approvalStatus = true;
    list.add(present_approvalStatus);
    if (present_approvalStatus)
      list.add(approvalStatus);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_repaymentVoucherPath = true && (isSetRepaymentVoucherPath());
    list.add(present_repaymentVoucherPath);
    if (present_repaymentVoucherPath)
      list.add(repaymentVoucherPath);

    boolean present_xiFeeVoucherPath = true && (isSetXiFeeVoucherPath());
    list.add(present_xiFeeVoucherPath);
    if (present_xiFeeVoucherPath)
      list.add(xiFeeVoucherPath);

    boolean present_loanIds = true && (isSetLoanIds());
    list.add(present_loanIds);
    if (present_loanIds)
      list.add(loanIds);

    boolean present_queryXiFeeStatus = true;
    list.add(present_queryXiFeeStatus);
    if (present_queryXiFeeStatus)
      list.add(queryXiFeeStatus);

    boolean present_reApplyReason = true && (isSetReApplyReason());
    list.add(present_reApplyReason);
    if (present_reApplyReason)
      list.add(reApplyReason);

    boolean present_approveMoney = true;
    list.add(present_approveMoney);
    if (present_approveMoney)
      list.add(approveMoney);

    boolean present_confirmLoanStatus = true;
    list.add(present_confirmLoanStatus);
    if (present_confirmLoanStatus)
      list.add(confirmLoanStatus);

    boolean present_confirmLoanRequestTime = true && (isSetConfirmLoanRequestTime());
    list.add(present_confirmLoanRequestTime);
    if (present_confirmLoanRequestTime)
      list.add(confirmLoanRequestTime);

    boolean present_confirmLoanResultTime = true && (isSetConfirmLoanResultTime());
    list.add(present_confirmLoanResultTime);
    if (present_confirmLoanResultTime)
      list.add(confirmLoanResultTime);

    boolean present_confirmLoanReason = true && (isSetConfirmLoanReason());
    list.add(present_confirmLoanReason);
    if (present_confirmLoanReason)
      list.add(confirmLoanReason);

    boolean present_loanJusticeFiles = true && (isSetLoanJusticeFiles());
    list.add(present_loanJusticeFiles);
    if (present_loanJusticeFiles)
      list.add(loanJusticeFiles);

    boolean present_loanBlankFiles = true && (isSetLoanBlankFiles());
    list.add(present_loanBlankFiles);
    if (present_loanBlankFiles)
      list.add(loanBlankFiles);

    boolean present_loanOtherFiles = true && (isSetLoanOtherFiles());
    list.add(present_loanOtherFiles);
    if (present_loanOtherFiles)
      list.add(loanOtherFiles);

    boolean present_applyLoanDate = true && (isSetApplyLoanDate());
    list.add(present_applyLoanDate);
    if (present_applyLoanDate)
      list.add(applyLoanDate);

    boolean present_loanRemark = true && (isSetLoanRemark());
    list.add(present_loanRemark);
    if (present_loanRemark)
      list.add(loanRemark);

    boolean present_paymentBank = true && (isSetPaymentBank());
    list.add(present_paymentBank);
    if (present_paymentBank)
      list.add(paymentBank);

    boolean present_paymentBankBranch = true && (isSetPaymentBankBranch());
    list.add(present_paymentBankBranch);
    if (present_paymentBankBranch)
      list.add(paymentBankBranch);

    boolean present_paymentAcctName = true && (isSetPaymentAcctName());
    list.add(present_paymentAcctName);
    if (present_paymentAcctName)
      list.add(paymentAcctName);

    boolean present_paymentAcctNo = true && (isSetPaymentAcctNo());
    list.add(present_paymentAcctNo);
    if (present_paymentAcctNo)
      list.add(paymentAcctNo);

    boolean present_paymentProvinceCode = true && (isSetPaymentProvinceCode());
    list.add(present_paymentProvinceCode);
    if (present_paymentProvinceCode)
      list.add(paymentProvinceCode);

    boolean present_paymentCityCode = true && (isSetPaymentCityCode());
    list.add(present_paymentCityCode);
    if (present_paymentCityCode)
      list.add(paymentCityCode);

    boolean present_provinceCode = true && (isSetProvinceCode());
    list.add(present_provinceCode);
    if (present_provinceCode)
      list.add(provinceCode);

    boolean present_cityCode = true && (isSetCityCode());
    list.add(present_cityCode);
    if (present_cityCode)
      list.add(cityCode);

    boolean present_loanEffeDate = true && (isSetLoanEffeDate());
    list.add(present_loanEffeDate);
    if (present_loanEffeDate)
      list.add(loanEffeDate);

    boolean present_partnerLoanDate = true && (isSetPartnerLoanDate());
    list.add(present_partnerLoanDate);
    if (present_partnerLoanDate)
      list.add(partnerLoanDate);

    boolean present_partnerLoanFile = true && (isSetPartnerLoanFile());
    list.add(present_partnerLoanFile);
    if (present_partnerLoanFile)
      list.add(partnerLoanFile);

    boolean present_partnerRealRefundDate = true && (isSetPartnerRealRefundDate());
    list.add(present_partnerRealRefundDate);
    if (present_partnerRealRefundDate)
      list.add(partnerRealRefundDate);

    boolean present_partnerRefundFile = true && (isSetPartnerRefundFile());
    list.add(present_partnerRefundFile);
    if (present_partnerRefundFile)
      list.add(partnerRefundFile);

    boolean present_partnerInterests = true;
    list.add(present_partnerInterests);
    if (present_partnerInterests)
      list.add(partnerInterests);

    boolean present_repaymentRepurchaseRemark = true && (isSetRepaymentRepurchaseRemark());
    list.add(present_repaymentRepurchaseRemark);
    if (present_repaymentRepurchaseRemark)
      list.add(repaymentRepurchaseRemark);

    boolean present_refundLoanAmount = true;
    list.add(present_refundLoanAmount);
    if (present_refundLoanAmount)
      list.add(refundLoanAmount);

    boolean present_refundXifee = true;
    list.add(present_refundXifee);
    if (present_refundXifee)
      list.add(refundXifee);

    boolean present_refundDate = true && (isSetRefundDate());
    list.add(present_refundDate);
    if (present_refundDate)
      list.add(refundDate);

    boolean present_businessCategory = true;
    list.add(present_businessCategory);
    if (present_businessCategory)
      list.add(businessCategory);

    boolean present_businessCategoryStr = true && (isSetBusinessCategoryStr());
    list.add(present_businessCategoryStr);
    if (present_businessCategoryStr)
      list.add(businessCategoryStr);

    boolean present_payAcctNo = true && (isSetPayAcctNo());
    list.add(present_payAcctNo);
    if (present_payAcctNo)
      list.add(payAcctNo);

    boolean present_payAcctName = true && (isSetPayAcctName());
    list.add(present_payAcctName);
    if (present_payAcctName)
      list.add(payAcctName);

    boolean present_payBankName = true && (isSetPayBankName());
    list.add(present_payBankName);
    if (present_payBankName)
      list.add(payBankName);

    boolean present_payBankCode = true && (isSetPayBankCode());
    list.add(present_payBankCode);
    if (present_payBankCode)
      list.add(payBankCode);

    boolean present_payBankBranch = true && (isSetPayBankBranch());
    list.add(present_payBankBranch);
    if (present_payBankBranch)
      list.add(payBankBranch);

    boolean present_payProvinceCode = true && (isSetPayProvinceCode());
    list.add(present_payProvinceCode);
    if (present_payProvinceCode)
      list.add(payProvinceCode);

    boolean present_payCityCode = true && (isSetPayCityCode());
    list.add(present_payCityCode);
    if (present_payCityCode)
      list.add(payCityCode);

    boolean present_beginTime = true && (isSetBeginTime());
    list.add(present_beginTime);
    if (present_beginTime)
      list.add(beginTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_orderByType = true;
    list.add(present_orderByType);
    if (present_orderByType)
      list.add(orderByType);

    boolean present_confirmLoanMoney = true;
    list.add(present_confirmLoanMoney);
    if (present_confirmLoanMoney)
      list.add(confirmLoanMoney);

    boolean present_confirmLoanDays = true;
    list.add(present_confirmLoanDays);
    if (present_confirmLoanDays)
      list.add(confirmLoanDays);

    boolean present_applyDate = true;
    list.add(present_applyDate);
    if (present_applyDate)
      list.add(applyDate);

    boolean present_houseProvinceCode = true && (isSetHouseProvinceCode());
    list.add(present_houseProvinceCode);
    if (present_houseProvinceCode)
      list.add(houseProvinceCode);

    boolean present_houseCityCode = true && (isSetHouseCityCode());
    list.add(present_houseCityCode);
    if (present_houseCityCode)
      list.add(houseCityCode);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_partnerOrderCode = true && (isSetPartnerOrderCode());
    list.add(present_partnerOrderCode);
    if (present_partnerOrderCode)
      list.add(partnerOrderCode);

    boolean present_loanPeriodLimit = true;
    list.add(present_loanPeriodLimit);
    if (present_loanPeriodLimit)
      list.add(loanPeriodLimit);

    boolean present_isCreditLoan = true;
    list.add(present_isCreditLoan);
    if (present_isCreditLoan)
      list.add(isCreditLoan);

    boolean present_paymentBankPhone = true && (isSetPaymentBankPhone());
    list.add(present_paymentBankPhone);
    if (present_paymentBankPhone)
      list.add(paymentBankPhone);

    boolean present_paymentBankLineNo = true && (isSetPaymentBankLineNo());
    list.add(present_paymentBankLineNo);
    if (present_paymentBankLineNo)
      list.add(paymentBankLineNo);

    boolean present_requestStatusList = true && (isSetRequestStatusList());
    list.add(present_requestStatusList);
    if (present_requestStatusList)
      list.add(requestStatusList);

    boolean present_refundTotalAmount = true;
    list.add(present_refundTotalAmount);
    if (present_refundTotalAmount)
      list.add(refundTotalAmount);

    boolean present_refundPenalty = true;
    list.add(present_refundPenalty);
    if (present_refundPenalty)
      list.add(refundPenalty);

    boolean present_refundFine = true;
    list.add(present_refundFine);
    if (present_refundFine)
      list.add(refundFine);

    boolean present_refundCompdinte = true;
    list.add(present_refundCompdinte);
    if (present_refundCompdinte)
      list.add(refundCompdinte);

    boolean present_partnerPlatformOrderCode = true && (isSetPartnerPlatformOrderCode());
    list.add(present_partnerPlatformOrderCode);
    if (present_partnerPlatformOrderCode)
      list.add(partnerPlatformOrderCode);

    boolean present_planRefundDate = true && (isSetPlanRefundDate());
    list.add(present_planRefundDate);
    if (present_planRefundDate)
      list.add(planRefundDate);

    boolean present_fromPlanRefundDate = true && (isSetFromPlanRefundDate());
    list.add(present_fromPlanRefundDate);
    if (present_fromPlanRefundDate)
      list.add(fromPlanRefundDate);

    boolean present_toPlanRefundDate = true && (isSetToPlanRefundDate());
    list.add(present_toPlanRefundDate);
    if (present_toPlanRefundDate)
      list.add(toPlanRefundDate);

    boolean present_partnerPushAccount = true;
    list.add(present_partnerPushAccount);
    if (present_partnerPushAccount)
      list.add(partnerPushAccount);

    boolean present_partnerGrossRate = true;
    list.add(present_partnerGrossRate);
    if (present_partnerGrossRate)
      list.add(partnerGrossRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectPartner other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerNo()).compareTo(other.isSetPartnerNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerNo, other.partnerNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestFiles()).compareTo(other.isSetRequestFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestFiles, other.requestFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestTime()).compareTo(other.isSetRequestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestTime, other.requestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalTime()).compareTo(other.isSetApprovalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalTime, other.approvalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalComment()).compareTo(other.isSetApprovalComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalComment, other.approvalComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitApprovalTime()).compareTo(other.isSetSubmitApprovalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitApprovalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitApprovalTime, other.submitApprovalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsClosed()).compareTo(other.isSetIsClosed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsClosed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isClosed, other.isClosed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanStatus()).compareTo(other.isSetLoanStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanStatus, other.loanStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTime()).compareTo(other.isSetLoanTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTime, other.loanTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanResultTime()).compareTo(other.isSetLoanResultTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanResultTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanResultTime, other.loanResultTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentRepurchaseType()).compareTo(other.isSetRepaymentRepurchaseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentRepurchaseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRepurchaseType, other.repaymentRepurchaseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentRepurchaseStatus()).compareTo(other.isSetRepaymentRepurchaseStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentRepurchaseStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRepurchaseStatus, other.repaymentRepurchaseStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentRepurchaseTime()).compareTo(other.isSetRepaymentRepurchaseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentRepurchaseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRepurchaseTime, other.repaymentRepurchaseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRpResultTime()).compareTo(other.isSetRpResultTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpResultTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpResultTime, other.rpResultTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmount()).compareTo(other.isSetLoanAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmount, other.loanAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCost()).compareTo(other.isSetTotalCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCost, other.totalCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPremium()).compareTo(other.isSetPremium());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPremium()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.premium, other.premium);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteeFee()).compareTo(other.isSetGuaranteeFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteeFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteeFee, other.guaranteeFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXiFeeRequestTime()).compareTo(other.isSetXiFeeRequestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXiFeeRequestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xiFeeRequestTime, other.xiFeeRequestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXiFeeResultTime()).compareTo(other.isSetXiFeeResultTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXiFeeResultTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xiFeeResultTime, other.xiFeeResultTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXiFeeStatus()).compareTo(other.isSetXiFeeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXiFeeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xiFeeStatus, other.xiFeeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectStatus()).compareTo(other.isSetProjectStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectStatus, other.projectStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectStatusTime()).compareTo(other.isSetProjectStatusTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectStatusTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectStatusTime, other.projectStatusTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileIds()).compareTo(other.isSetFileIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileIds, other.fileIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalStatus()).compareTo(other.isSetApprovalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalStatus, other.approvalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentVoucherPath()).compareTo(other.isSetRepaymentVoucherPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentVoucherPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentVoucherPath, other.repaymentVoucherPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXiFeeVoucherPath()).compareTo(other.isSetXiFeeVoucherPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXiFeeVoucherPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xiFeeVoucherPath, other.xiFeeVoucherPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanIds()).compareTo(other.isSetLoanIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanIds, other.loanIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryXiFeeStatus()).compareTo(other.isSetQueryXiFeeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryXiFeeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryXiFeeStatus, other.queryXiFeeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReApplyReason()).compareTo(other.isSetReApplyReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReApplyReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reApplyReason, other.reApplyReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApproveMoney()).compareTo(other.isSetApproveMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApproveMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approveMoney, other.approveMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanStatus()).compareTo(other.isSetConfirmLoanStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanStatus, other.confirmLoanStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanRequestTime()).compareTo(other.isSetConfirmLoanRequestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanRequestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanRequestTime, other.confirmLoanRequestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanResultTime()).compareTo(other.isSetConfirmLoanResultTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanResultTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanResultTime, other.confirmLoanResultTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanReason()).compareTo(other.isSetConfirmLoanReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanReason, other.confirmLoanReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanJusticeFiles()).compareTo(other.isSetLoanJusticeFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanJusticeFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanJusticeFiles, other.loanJusticeFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanBlankFiles()).compareTo(other.isSetLoanBlankFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanBlankFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanBlankFiles, other.loanBlankFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFiles()).compareTo(other.isSetLoanOtherFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFiles, other.loanOtherFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyLoanDate()).compareTo(other.isSetApplyLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyLoanDate, other.applyLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanRemark()).compareTo(other.isSetLoanRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRemark, other.loanRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBank()).compareTo(other.isSetPaymentBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBank, other.paymentBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBankBranch()).compareTo(other.isSetPaymentBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBankBranch, other.paymentBankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAcctName()).compareTo(other.isSetPaymentAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAcctName, other.paymentAcctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAcctNo()).compareTo(other.isSetPaymentAcctNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAcctNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAcctNo, other.paymentAcctNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentProvinceCode()).compareTo(other.isSetPaymentProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentProvinceCode, other.paymentProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentCityCode()).compareTo(other.isSetPaymentCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentCityCode, other.paymentCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceCode()).compareTo(other.isSetProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceCode, other.provinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanEffeDate()).compareTo(other.isSetLoanEffeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanEffeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanEffeDate, other.loanEffeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerLoanDate()).compareTo(other.isSetPartnerLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerLoanDate, other.partnerLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerLoanFile()).compareTo(other.isSetPartnerLoanFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerLoanFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerLoanFile, other.partnerLoanFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerRealRefundDate()).compareTo(other.isSetPartnerRealRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerRealRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerRealRefundDate, other.partnerRealRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerRefundFile()).compareTo(other.isSetPartnerRefundFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerRefundFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerRefundFile, other.partnerRefundFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerInterests()).compareTo(other.isSetPartnerInterests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerInterests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerInterests, other.partnerInterests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentRepurchaseRemark()).compareTo(other.isSetRepaymentRepurchaseRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentRepurchaseRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRepurchaseRemark, other.repaymentRepurchaseRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundLoanAmount()).compareTo(other.isSetRefundLoanAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundLoanAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundLoanAmount, other.refundLoanAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundXifee()).compareTo(other.isSetRefundXifee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundXifee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundXifee, other.refundXifee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundDate()).compareTo(other.isSetRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDate, other.refundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCategory()).compareTo(other.isSetBusinessCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCategory, other.businessCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCategoryStr()).compareTo(other.isSetBusinessCategoryStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCategoryStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCategoryStr, other.businessCategoryStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayAcctNo()).compareTo(other.isSetPayAcctNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayAcctNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payAcctNo, other.payAcctNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayAcctName()).compareTo(other.isSetPayAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payAcctName, other.payAcctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBankName()).compareTo(other.isSetPayBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBankName, other.payBankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBankCode()).compareTo(other.isSetPayBankCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBankCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBankCode, other.payBankCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBankBranch()).compareTo(other.isSetPayBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBankBranch, other.payBankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayProvinceCode()).compareTo(other.isSetPayProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payProvinceCode, other.payProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayCityCode()).compareTo(other.isSetPayCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payCityCode, other.payCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(other.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, other.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderByType()).compareTo(other.isSetOrderByType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderByType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderByType, other.orderByType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanMoney()).compareTo(other.isSetConfirmLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanMoney, other.confirmLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanDays()).compareTo(other.isSetConfirmLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanDays, other.confirmLoanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyDate()).compareTo(other.isSetApplyDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyDate, other.applyDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseProvinceCode()).compareTo(other.isSetHouseProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseProvinceCode, other.houseProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseCityCode()).compareTo(other.isSetHouseCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseCityCode, other.houseCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerOrderCode()).compareTo(other.isSetPartnerOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerOrderCode, other.partnerOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanPeriodLimit()).compareTo(other.isSetLoanPeriodLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanPeriodLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanPeriodLimit, other.loanPeriodLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCreditLoan()).compareTo(other.isSetIsCreditLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCreditLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCreditLoan, other.isCreditLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBankPhone()).compareTo(other.isSetPaymentBankPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBankPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBankPhone, other.paymentBankPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBankLineNo()).compareTo(other.isSetPaymentBankLineNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBankLineNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBankLineNo, other.paymentBankLineNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatusList()).compareTo(other.isSetRequestStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatusList, other.requestStatusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundTotalAmount()).compareTo(other.isSetRefundTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundTotalAmount, other.refundTotalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundPenalty()).compareTo(other.isSetRefundPenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundPenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundPenalty, other.refundPenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundFine()).compareTo(other.isSetRefundFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFine, other.refundFine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundCompdinte()).compareTo(other.isSetRefundCompdinte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundCompdinte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundCompdinte, other.refundCompdinte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerPlatformOrderCode()).compareTo(other.isSetPartnerPlatformOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerPlatformOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerPlatformOrderCode, other.partnerPlatformOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRefundDate()).compareTo(other.isSetPlanRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRefundDate, other.planRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromPlanRefundDate()).compareTo(other.isSetFromPlanRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromPlanRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromPlanRefundDate, other.fromPlanRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToPlanRefundDate()).compareTo(other.isSetToPlanRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToPlanRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toPlanRefundDate, other.toPlanRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerPushAccount()).compareTo(other.isSetPartnerPushAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerPushAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerPushAccount, other.partnerPushAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerGrossRate()).compareTo(other.isSetPartnerGrossRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerGrossRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerGrossRate, other.partnerGrossRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectPartner(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    if (this.loanId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerNo:");
    if (this.partnerNo == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestFiles:");
    if (this.requestFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.requestFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestTime:");
    if (this.requestTime == null) {
      sb.append("null");
    } else {
      sb.append(this.requestTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalTime:");
    if (this.approvalTime == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalComment:");
    if (this.approvalComment == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalComment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitApprovalTime:");
    if (this.submitApprovalTime == null) {
      sb.append("null");
    } else {
      sb.append(this.submitApprovalTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isClosed:");
    sb.append(this.isClosed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanStatus:");
    sb.append(this.loanStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTime:");
    if (this.loanTime == null) {
      sb.append("null");
    } else {
      sb.append(this.loanTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanResultTime:");
    if (this.loanResultTime == null) {
      sb.append("null");
    } else {
      sb.append(this.loanResultTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentRepurchaseType:");
    sb.append(this.repaymentRepurchaseType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentRepurchaseStatus:");
    sb.append(this.repaymentRepurchaseStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentRepurchaseTime:");
    if (this.repaymentRepurchaseTime == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentRepurchaseTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpResultTime:");
    if (this.rpResultTime == null) {
      sb.append("null");
    } else {
      sb.append(this.rpResultTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmount:");
    sb.append(this.loanAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCost:");
    sb.append(this.totalCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("premium:");
    sb.append(this.premium);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteeFee:");
    sb.append(this.guaranteeFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xiFeeRequestTime:");
    if (this.xiFeeRequestTime == null) {
      sb.append("null");
    } else {
      sb.append(this.xiFeeRequestTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xiFeeResultTime:");
    if (this.xiFeeResultTime == null) {
      sb.append("null");
    } else {
      sb.append(this.xiFeeResultTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xiFeeStatus:");
    sb.append(this.xiFeeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectStatus:");
    sb.append(this.projectStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectStatusTime:");
    if (this.projectStatusTime == null) {
      sb.append("null");
    } else {
      sb.append(this.projectStatusTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileIds:");
    if (this.fileIds == null) {
      sb.append("null");
    } else {
      sb.append(this.fileIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalStatus:");
    sb.append(this.approvalStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentVoucherPath:");
    if (this.repaymentVoucherPath == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentVoucherPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("xiFeeVoucherPath:");
    if (this.xiFeeVoucherPath == null) {
      sb.append("null");
    } else {
      sb.append(this.xiFeeVoucherPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanIds:");
    if (this.loanIds == null) {
      sb.append("null");
    } else {
      sb.append(this.loanIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryXiFeeStatus:");
    sb.append(this.queryXiFeeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reApplyReason:");
    if (this.reApplyReason == null) {
      sb.append("null");
    } else {
      sb.append(this.reApplyReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approveMoney:");
    sb.append(this.approveMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanStatus:");
    sb.append(this.confirmLoanStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanRequestTime:");
    if (this.confirmLoanRequestTime == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmLoanRequestTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanResultTime:");
    if (this.confirmLoanResultTime == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmLoanResultTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanReason:");
    if (this.confirmLoanReason == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmLoanReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanJusticeFiles:");
    if (this.loanJusticeFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.loanJusticeFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanBlankFiles:");
    if (this.loanBlankFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.loanBlankFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFiles:");
    if (this.loanOtherFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.loanOtherFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyLoanDate:");
    if (this.applyLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.applyLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanRemark:");
    if (this.loanRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.loanRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBank:");
    if (this.paymentBank == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBankBranch:");
    if (this.paymentBankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAcctName:");
    if (this.paymentAcctName == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentAcctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAcctNo:");
    if (this.paymentAcctNo == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentAcctNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentProvinceCode:");
    if (this.paymentProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentCityCode:");
    if (this.paymentCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceCode:");
    if (this.provinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityCode:");
    if (this.cityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.cityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanEffeDate:");
    if (this.loanEffeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanEffeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerLoanDate:");
    if (this.partnerLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerLoanFile:");
    if (this.partnerLoanFile == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerLoanFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerRealRefundDate:");
    if (this.partnerRealRefundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerRealRefundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerRefundFile:");
    if (this.partnerRefundFile == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerRefundFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerInterests:");
    sb.append(this.partnerInterests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentRepurchaseRemark:");
    if (this.repaymentRepurchaseRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentRepurchaseRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundLoanAmount:");
    sb.append(this.refundLoanAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundXifee:");
    sb.append(this.refundXifee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundDate:");
    if (this.refundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.refundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCategory:");
    sb.append(this.businessCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCategoryStr:");
    if (this.businessCategoryStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessCategoryStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payAcctNo:");
    if (this.payAcctNo == null) {
      sb.append("null");
    } else {
      sb.append(this.payAcctNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payAcctName:");
    if (this.payAcctName == null) {
      sb.append("null");
    } else {
      sb.append(this.payAcctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payBankName:");
    if (this.payBankName == null) {
      sb.append("null");
    } else {
      sb.append(this.payBankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payBankCode:");
    if (this.payBankCode == null) {
      sb.append("null");
    } else {
      sb.append(this.payBankCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payBankBranch:");
    if (this.payBankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.payBankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payProvinceCode:");
    if (this.payProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.payProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payCityCode:");
    if (this.payCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.payCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginTime:");
    if (this.beginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.beginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderByType:");
    sb.append(this.orderByType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanMoney:");
    sb.append(this.confirmLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanDays:");
    sb.append(this.confirmLoanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyDate:");
    sb.append(this.applyDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseProvinceCode:");
    if (this.houseProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.houseProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseCityCode:");
    if (this.houseCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.houseCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerOrderCode:");
    if (this.partnerOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanPeriodLimit:");
    sb.append(this.loanPeriodLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCreditLoan:");
    sb.append(this.isCreditLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBankPhone:");
    if (this.paymentBankPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBankPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBankLineNo:");
    if (this.paymentBankLineNo == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBankLineNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatusList:");
    if (this.requestStatusList == null) {
      sb.append("null");
    } else {
      sb.append(this.requestStatusList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundTotalAmount:");
    sb.append(this.refundTotalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundPenalty:");
    sb.append(this.refundPenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundFine:");
    sb.append(this.refundFine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundCompdinte:");
    sb.append(this.refundCompdinte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerPlatformOrderCode:");
    if (this.partnerPlatformOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerPlatformOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRefundDate:");
    if (this.planRefundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.planRefundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromPlanRefundDate:");
    if (this.fromPlanRefundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.fromPlanRefundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toPlanRefundDate:");
    if (this.toPlanRefundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.toPlanRefundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerPushAccount:");
    sb.append(this.partnerPushAccount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerGrossRate:");
    sb.append(this.partnerGrossRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectPartnerStandardSchemeFactory implements SchemeFactory {
    public ProjectPartnerStandardScheme getScheme() {
      return new ProjectPartnerStandardScheme();
    }
  }

  private static class ProjectPartnerStandardScheme extends StandardScheme<ProjectPartner> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectPartner struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanId = iprot.readString();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTNER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerNo = iprot.readString();
              struct.setPartnerNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestFiles = iprot.readString();
              struct.setRequestFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestTime = iprot.readString();
              struct.setRequestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APPROVAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalTime = iprot.readString();
              struct.setApprovalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // APPROVAL_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalComment = iprot.readString();
              struct.setApprovalCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SUBMIT_APPROVAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submitApprovalTime = iprot.readString();
              struct.setSubmitApprovalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_CLOSED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isClosed = iprot.readI32();
              struct.setIsClosedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanStatus = iprot.readI32();
              struct.setLoanStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOAN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanTime = iprot.readString();
              struct.setLoanTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAN_RESULT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanResultTime = iprot.readString();
              struct.setLoanResultTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REPAYMENT_REPURCHASE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentRepurchaseType = iprot.readI32();
              struct.setRepaymentRepurchaseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REPAYMENT_REPURCHASE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentRepurchaseStatus = iprot.readI32();
              struct.setRepaymentRepurchaseStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REPAYMENT_REPURCHASE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentRepurchaseTime = iprot.readString();
              struct.setRepaymentRepurchaseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RP_RESULT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpResultTime = iprot.readString();
              struct.setRpResultTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOAN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmount = iprot.readDouble();
              struct.setLoanAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TOTAL_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalCost = iprot.readDouble();
              struct.setTotalCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PREMIUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.premium = iprot.readDouble();
              struct.setPremiumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // GUARANTEE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.guaranteeFee = iprot.readDouble();
              struct.setGuaranteeFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // XI_FEE_REQUEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xiFeeRequestTime = iprot.readString();
              struct.setXiFeeRequestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // XI_FEE_RESULT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xiFeeResultTime = iprot.readString();
              struct.setXiFeeResultTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // XI_FEE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.xiFeeStatus = iprot.readI32();
              struct.setXiFeeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PROJECT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectStatus = iprot.readI32();
              struct.setProjectStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PROJECT_STATUS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectStatusTime = iprot.readString();
              struct.setProjectStatusTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // FILE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.fileIds = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.fileIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFileIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // APPROVAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approvalStatus = iprot.readI32();
              struct.setApprovalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.userIds.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // REPAYMENT_VOUCHER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentVoucherPath = iprot.readString();
              struct.setRepaymentVoucherPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // XI_FEE_VOUCHER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xiFeeVoucherPath = iprot.readString();
              struct.setXiFeeVoucherPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // LOAN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.loanIds = new ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.loanIds.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setLoanIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // QUERY_XI_FEE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryXiFeeStatus = iprot.readI32();
              struct.setQueryXiFeeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // RE_APPLY_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reApplyReason = iprot.readString();
              struct.setReApplyReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // APPROVE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.approveMoney = iprot.readDouble();
              struct.setApproveMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // CONFIRM_LOAN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.confirmLoanStatus = iprot.readI32();
              struct.setConfirmLoanStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // CONFIRM_LOAN_REQUEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirmLoanRequestTime = iprot.readString();
              struct.setConfirmLoanRequestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // CONFIRM_LOAN_RESULT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirmLoanResultTime = iprot.readString();
              struct.setConfirmLoanResultTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // CONFIRM_LOAN_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirmLoanReason = iprot.readString();
              struct.setConfirmLoanReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // LOAN_JUSTICE_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanJusticeFiles = iprot.readString();
              struct.setLoanJusticeFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // LOAN_BLANK_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanBlankFiles = iprot.readString();
              struct.setLoanBlankFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // LOAN_OTHER_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanOtherFiles = iprot.readString();
              struct.setLoanOtherFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // APPLY_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyLoanDate = iprot.readString();
              struct.setApplyLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // LOAN_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanRemark = iprot.readString();
              struct.setLoanRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // PAYMENT_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBank = iprot.readString();
              struct.setPaymentBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // PAYMENT_BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBankBranch = iprot.readString();
              struct.setPaymentBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // PAYMENT_ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentAcctName = iprot.readString();
              struct.setPaymentAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // PAYMENT_ACCT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentAcctNo = iprot.readString();
              struct.setPaymentAcctNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // PAYMENT_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentProvinceCode = iprot.readString();
              struct.setPaymentProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // PAYMENT_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentCityCode = iprot.readString();
              struct.setPaymentCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provinceCode = iprot.readString();
              struct.setProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityCode = iprot.readString();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // LOAN_EFFE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanEffeDate = iprot.readString();
              struct.setLoanEffeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // PARTNER_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerLoanDate = iprot.readString();
              struct.setPartnerLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // PARTNER_LOAN_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerLoanFile = iprot.readString();
              struct.setPartnerLoanFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // PARTNER_REAL_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerRealRefundDate = iprot.readString();
              struct.setPartnerRealRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // PARTNER_REFUND_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerRefundFile = iprot.readString();
              struct.setPartnerRefundFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // PARTNER_INTERESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.partnerInterests = iprot.readDouble();
              struct.setPartnerInterestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // REPAYMENT_REPURCHASE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentRepurchaseRemark = iprot.readString();
              struct.setRepaymentRepurchaseRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // REFUND_LOAN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundLoanAmount = iprot.readDouble();
              struct.setRefundLoanAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // REFUND_XIFEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundXifee = iprot.readDouble();
              struct.setRefundXifeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundDate = iprot.readString();
              struct.setRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // BUSINESS_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessCategory = iprot.readI32();
              struct.setBusinessCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // BUSINESS_CATEGORY_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessCategoryStr = iprot.readString();
              struct.setBusinessCategoryStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // PAY_ACCT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payAcctNo = iprot.readString();
              struct.setPayAcctNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // PAY_ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payAcctName = iprot.readString();
              struct.setPayAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // PAY_BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payBankName = iprot.readString();
              struct.setPayBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // PAY_BANK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payBankCode = iprot.readString();
              struct.setPayBankCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // PAY_BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payBankBranch = iprot.readString();
              struct.setPayBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // PAY_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payProvinceCode = iprot.readString();
              struct.setPayProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // PAY_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payCityCode = iprot.readString();
              struct.setPayCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // BEGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginTime = iprot.readString();
              struct.setBeginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 82: // ORDER_BY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderByType = iprot.readI32();
              struct.setOrderByTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 83: // CONFIRM_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confirmLoanMoney = iprot.readDouble();
              struct.setConfirmLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 84: // CONFIRM_LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.confirmLoanDays = iprot.readI32();
              struct.setConfirmLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 85: // APPLY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyDate = iprot.readI32();
              struct.setApplyDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 86: // HOUSE_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseProvinceCode = iprot.readString();
              struct.setHouseProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 87: // HOUSE_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseCityCode = iprot.readString();
              struct.setHouseCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 88: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 89: // PARTNER_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerOrderCode = iprot.readString();
              struct.setPartnerOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // LOAN_PERIOD_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanPeriodLimit = iprot.readI32();
              struct.setLoanPeriodLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 91: // IS_CREDIT_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isCreditLoan = iprot.readI32();
              struct.setIsCreditLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 92: // PAYMENT_BANK_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBankPhone = iprot.readString();
              struct.setPaymentBankPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 93: // PAYMENT_BANK_LINE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBankLineNo = iprot.readString();
              struct.setPaymentBankLineNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 94: // REQUEST_STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.requestStatusList = new ArrayList<Integer>(_list9.size);
                int _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI32();
                  struct.requestStatusList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setRequestStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 95: // REFUND_TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundTotalAmount = iprot.readDouble();
              struct.setRefundTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 96: // REFUND_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundPenalty = iprot.readDouble();
              struct.setRefundPenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 97: // REFUND_FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundFine = iprot.readDouble();
              struct.setRefundFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 98: // REFUND_COMPDINTE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundCompdinte = iprot.readDouble();
              struct.setRefundCompdinteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 99: // PARTNER_PLATFORM_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerPlatformOrderCode = iprot.readString();
              struct.setPartnerPlatformOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // PLAN_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRefundDate = iprot.readString();
              struct.setPlanRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // FROM_PLAN_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromPlanRefundDate = iprot.readString();
              struct.setFromPlanRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // TO_PLAN_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toPlanRefundDate = iprot.readString();
              struct.setToPlanRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // PARTNER_PUSH_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerPushAccount = iprot.readI32();
              struct.setPartnerPushAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // PARTNER_GROSS_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.partnerGrossRate = iprot.readDouble();
              struct.setPartnerGrossRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectPartner struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.loanId != null) {
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeString(struct.loanId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.partnerNo != null) {
        oprot.writeFieldBegin(PARTNER_NO_FIELD_DESC);
        oprot.writeString(struct.partnerNo);
        oprot.writeFieldEnd();
      }
      if (struct.requestFiles != null) {
        oprot.writeFieldBegin(REQUEST_FILES_FIELD_DESC);
        oprot.writeString(struct.requestFiles);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.requestTime != null) {
        oprot.writeFieldBegin(REQUEST_TIME_FIELD_DESC);
        oprot.writeString(struct.requestTime);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.approvalTime != null) {
        oprot.writeFieldBegin(APPROVAL_TIME_FIELD_DESC);
        oprot.writeString(struct.approvalTime);
        oprot.writeFieldEnd();
      }
      if (struct.approvalComment != null) {
        oprot.writeFieldBegin(APPROVAL_COMMENT_FIELD_DESC);
        oprot.writeString(struct.approvalComment);
        oprot.writeFieldEnd();
      }
      if (struct.submitApprovalTime != null) {
        oprot.writeFieldBegin(SUBMIT_APPROVAL_TIME_FIELD_DESC);
        oprot.writeString(struct.submitApprovalTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CLOSED_FIELD_DESC);
      oprot.writeI32(struct.isClosed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_STATUS_FIELD_DESC);
      oprot.writeI32(struct.loanStatus);
      oprot.writeFieldEnd();
      if (struct.loanTime != null) {
        oprot.writeFieldBegin(LOAN_TIME_FIELD_DESC);
        oprot.writeString(struct.loanTime);
        oprot.writeFieldEnd();
      }
      if (struct.loanResultTime != null) {
        oprot.writeFieldBegin(LOAN_RESULT_TIME_FIELD_DESC);
        oprot.writeString(struct.loanResultTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_REPURCHASE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repaymentRepurchaseType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_REPURCHASE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.repaymentRepurchaseStatus);
      oprot.writeFieldEnd();
      if (struct.repaymentRepurchaseTime != null) {
        oprot.writeFieldBegin(REPAYMENT_REPURCHASE_TIME_FIELD_DESC);
        oprot.writeString(struct.repaymentRepurchaseTime);
        oprot.writeFieldEnd();
      }
      if (struct.rpResultTime != null) {
        oprot.writeFieldBegin(RP_RESULT_TIME_FIELD_DESC);
        oprot.writeString(struct.rpResultTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COST_FIELD_DESC);
      oprot.writeDouble(struct.totalCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREMIUM_FIELD_DESC);
      oprot.writeDouble(struct.premium);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUARANTEE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.guaranteeFee);
      oprot.writeFieldEnd();
      if (struct.xiFeeRequestTime != null) {
        oprot.writeFieldBegin(XI_FEE_REQUEST_TIME_FIELD_DESC);
        oprot.writeString(struct.xiFeeRequestTime);
        oprot.writeFieldEnd();
      }
      if (struct.xiFeeResultTime != null) {
        oprot.writeFieldBegin(XI_FEE_RESULT_TIME_FIELD_DESC);
        oprot.writeString(struct.xiFeeResultTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(XI_FEE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.xiFeeStatus);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.projectStatus);
      oprot.writeFieldEnd();
      if (struct.projectStatusTime != null) {
        oprot.writeFieldBegin(PROJECT_STATUS_TIME_FIELD_DESC);
        oprot.writeString(struct.projectStatusTime);
        oprot.writeFieldEnd();
      }
      if (struct.fileIds != null) {
        oprot.writeFieldBegin(FILE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.fileIds.size()));
          for (int _iter12 : struct.fileIds)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPROVAL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.approvalStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter13 : struct.userIds)
          {
            oprot.writeI32(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.repaymentVoucherPath != null) {
        oprot.writeFieldBegin(REPAYMENT_VOUCHER_PATH_FIELD_DESC);
        oprot.writeString(struct.repaymentVoucherPath);
        oprot.writeFieldEnd();
      }
      if (struct.xiFeeVoucherPath != null) {
        oprot.writeFieldBegin(XI_FEE_VOUCHER_PATH_FIELD_DESC);
        oprot.writeString(struct.xiFeeVoucherPath);
        oprot.writeFieldEnd();
      }
      if (struct.loanIds != null) {
        oprot.writeFieldBegin(LOAN_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.loanIds.size()));
          for (String _iter14 : struct.loanIds)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUERY_XI_FEE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.queryXiFeeStatus);
      oprot.writeFieldEnd();
      if (struct.reApplyReason != null) {
        oprot.writeFieldBegin(RE_APPLY_REASON_FIELD_DESC);
        oprot.writeString(struct.reApplyReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPROVE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.approveMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_LOAN_STATUS_FIELD_DESC);
      oprot.writeI32(struct.confirmLoanStatus);
      oprot.writeFieldEnd();
      if (struct.confirmLoanRequestTime != null) {
        oprot.writeFieldBegin(CONFIRM_LOAN_REQUEST_TIME_FIELD_DESC);
        oprot.writeString(struct.confirmLoanRequestTime);
        oprot.writeFieldEnd();
      }
      if (struct.confirmLoanResultTime != null) {
        oprot.writeFieldBegin(CONFIRM_LOAN_RESULT_TIME_FIELD_DESC);
        oprot.writeString(struct.confirmLoanResultTime);
        oprot.writeFieldEnd();
      }
      if (struct.confirmLoanReason != null) {
        oprot.writeFieldBegin(CONFIRM_LOAN_REASON_FIELD_DESC);
        oprot.writeString(struct.confirmLoanReason);
        oprot.writeFieldEnd();
      }
      if (struct.loanJusticeFiles != null) {
        oprot.writeFieldBegin(LOAN_JUSTICE_FILES_FIELD_DESC);
        oprot.writeString(struct.loanJusticeFiles);
        oprot.writeFieldEnd();
      }
      if (struct.loanBlankFiles != null) {
        oprot.writeFieldBegin(LOAN_BLANK_FILES_FIELD_DESC);
        oprot.writeString(struct.loanBlankFiles);
        oprot.writeFieldEnd();
      }
      if (struct.loanOtherFiles != null) {
        oprot.writeFieldBegin(LOAN_OTHER_FILES_FIELD_DESC);
        oprot.writeString(struct.loanOtherFiles);
        oprot.writeFieldEnd();
      }
      if (struct.applyLoanDate != null) {
        oprot.writeFieldBegin(APPLY_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.applyLoanDate);
        oprot.writeFieldEnd();
      }
      if (struct.loanRemark != null) {
        oprot.writeFieldBegin(LOAN_REMARK_FIELD_DESC);
        oprot.writeString(struct.loanRemark);
        oprot.writeFieldEnd();
      }
      if (struct.paymentBank != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_FIELD_DESC);
        oprot.writeString(struct.paymentBank);
        oprot.writeFieldEnd();
      }
      if (struct.paymentBankBranch != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.paymentBankBranch);
        oprot.writeFieldEnd();
      }
      if (struct.paymentAcctName != null) {
        oprot.writeFieldBegin(PAYMENT_ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.paymentAcctName);
        oprot.writeFieldEnd();
      }
      if (struct.paymentAcctNo != null) {
        oprot.writeFieldBegin(PAYMENT_ACCT_NO_FIELD_DESC);
        oprot.writeString(struct.paymentAcctNo);
        oprot.writeFieldEnd();
      }
      if (struct.paymentProvinceCode != null) {
        oprot.writeFieldBegin(PAYMENT_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.paymentProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.paymentCityCode != null) {
        oprot.writeFieldBegin(PAYMENT_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.paymentCityCode);
        oprot.writeFieldEnd();
      }
      if (struct.provinceCode != null) {
        oprot.writeFieldBegin(PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.provinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityCode != null) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.loanEffeDate != null) {
        oprot.writeFieldBegin(LOAN_EFFE_DATE_FIELD_DESC);
        oprot.writeString(struct.loanEffeDate);
        oprot.writeFieldEnd();
      }
      if (struct.partnerLoanDate != null) {
        oprot.writeFieldBegin(PARTNER_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.partnerLoanDate);
        oprot.writeFieldEnd();
      }
      if (struct.partnerLoanFile != null) {
        oprot.writeFieldBegin(PARTNER_LOAN_FILE_FIELD_DESC);
        oprot.writeString(struct.partnerLoanFile);
        oprot.writeFieldEnd();
      }
      if (struct.partnerRealRefundDate != null) {
        oprot.writeFieldBegin(PARTNER_REAL_REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.partnerRealRefundDate);
        oprot.writeFieldEnd();
      }
      if (struct.partnerRefundFile != null) {
        oprot.writeFieldBegin(PARTNER_REFUND_FILE_FIELD_DESC);
        oprot.writeString(struct.partnerRefundFile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTNER_INTERESTS_FIELD_DESC);
      oprot.writeDouble(struct.partnerInterests);
      oprot.writeFieldEnd();
      if (struct.repaymentRepurchaseRemark != null) {
        oprot.writeFieldBegin(REPAYMENT_REPURCHASE_REMARK_FIELD_DESC);
        oprot.writeString(struct.repaymentRepurchaseRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_LOAN_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.refundLoanAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_XIFEE_FIELD_DESC);
      oprot.writeDouble(struct.refundXifee);
      oprot.writeFieldEnd();
      if (struct.refundDate != null) {
        oprot.writeFieldBegin(REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.refundDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.businessCategory);
      oprot.writeFieldEnd();
      if (struct.businessCategoryStr != null) {
        oprot.writeFieldBegin(BUSINESS_CATEGORY_STR_FIELD_DESC);
        oprot.writeString(struct.businessCategoryStr);
        oprot.writeFieldEnd();
      }
      if (struct.payAcctNo != null) {
        oprot.writeFieldBegin(PAY_ACCT_NO_FIELD_DESC);
        oprot.writeString(struct.payAcctNo);
        oprot.writeFieldEnd();
      }
      if (struct.payAcctName != null) {
        oprot.writeFieldBegin(PAY_ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.payAcctName);
        oprot.writeFieldEnd();
      }
      if (struct.payBankName != null) {
        oprot.writeFieldBegin(PAY_BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.payBankName);
        oprot.writeFieldEnd();
      }
      if (struct.payBankCode != null) {
        oprot.writeFieldBegin(PAY_BANK_CODE_FIELD_DESC);
        oprot.writeString(struct.payBankCode);
        oprot.writeFieldEnd();
      }
      if (struct.payBankBranch != null) {
        oprot.writeFieldBegin(PAY_BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.payBankBranch);
        oprot.writeFieldEnd();
      }
      if (struct.payProvinceCode != null) {
        oprot.writeFieldBegin(PAY_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.payProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.payCityCode != null) {
        oprot.writeFieldBegin(PAY_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.payCityCode);
        oprot.writeFieldEnd();
      }
      if (struct.beginTime != null) {
        oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.beginTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_BY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.orderByType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.confirmLoanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.confirmLoanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_DATE_FIELD_DESC);
      oprot.writeI32(struct.applyDate);
      oprot.writeFieldEnd();
      if (struct.houseProvinceCode != null) {
        oprot.writeFieldBegin(HOUSE_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.houseProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.houseCityCode != null) {
        oprot.writeFieldBegin(HOUSE_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.houseCityCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      if (struct.partnerOrderCode != null) {
        oprot.writeFieldBegin(PARTNER_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.partnerOrderCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_PERIOD_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.loanPeriodLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CREDIT_LOAN_FIELD_DESC);
      oprot.writeI32(struct.isCreditLoan);
      oprot.writeFieldEnd();
      if (struct.paymentBankPhone != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_PHONE_FIELD_DESC);
        oprot.writeString(struct.paymentBankPhone);
        oprot.writeFieldEnd();
      }
      if (struct.paymentBankLineNo != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_LINE_NO_FIELD_DESC);
        oprot.writeString(struct.paymentBankLineNo);
        oprot.writeFieldEnd();
      }
      if (struct.requestStatusList != null) {
        oprot.writeFieldBegin(REQUEST_STATUS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.requestStatusList.size()));
          for (int _iter15 : struct.requestStatusList)
          {
            oprot.writeI32(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.refundTotalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.refundPenalty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_FINE_FIELD_DESC);
      oprot.writeDouble(struct.refundFine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_COMPDINTE_FIELD_DESC);
      oprot.writeDouble(struct.refundCompdinte);
      oprot.writeFieldEnd();
      if (struct.partnerPlatformOrderCode != null) {
        oprot.writeFieldBegin(PARTNER_PLATFORM_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.partnerPlatformOrderCode);
        oprot.writeFieldEnd();
      }
      if (struct.planRefundDate != null) {
        oprot.writeFieldBegin(PLAN_REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.planRefundDate);
        oprot.writeFieldEnd();
      }
      if (struct.fromPlanRefundDate != null) {
        oprot.writeFieldBegin(FROM_PLAN_REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.fromPlanRefundDate);
        oprot.writeFieldEnd();
      }
      if (struct.toPlanRefundDate != null) {
        oprot.writeFieldBegin(TO_PLAN_REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.toPlanRefundDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTNER_PUSH_ACCOUNT_FIELD_DESC);
      oprot.writeI32(struct.partnerPushAccount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTNER_GROSS_RATE_FIELD_DESC);
      oprot.writeDouble(struct.partnerGrossRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectPartnerTupleSchemeFactory implements SchemeFactory {
    public ProjectPartnerTupleScheme getScheme() {
      return new ProjectPartnerTupleScheme();
    }
  }

  private static class ProjectPartnerTupleScheme extends TupleScheme<ProjectPartner> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectPartner struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetLoanId()) {
        optionals.set(2);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(3);
      }
      if (struct.isSetPartnerNo()) {
        optionals.set(4);
      }
      if (struct.isSetRequestFiles()) {
        optionals.set(5);
      }
      if (struct.isSetRemark()) {
        optionals.set(6);
      }
      if (struct.isSetRequestTime()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(8);
      }
      if (struct.isSetApprovalTime()) {
        optionals.set(9);
      }
      if (struct.isSetApprovalComment()) {
        optionals.set(10);
      }
      if (struct.isSetSubmitApprovalTime()) {
        optionals.set(11);
      }
      if (struct.isSetIsClosed()) {
        optionals.set(12);
      }
      if (struct.isSetLoanStatus()) {
        optionals.set(13);
      }
      if (struct.isSetLoanTime()) {
        optionals.set(14);
      }
      if (struct.isSetLoanResultTime()) {
        optionals.set(15);
      }
      if (struct.isSetRepaymentRepurchaseType()) {
        optionals.set(16);
      }
      if (struct.isSetRepaymentRepurchaseStatus()) {
        optionals.set(17);
      }
      if (struct.isSetRepaymentRepurchaseTime()) {
        optionals.set(18);
      }
      if (struct.isSetRpResultTime()) {
        optionals.set(19);
      }
      if (struct.isSetLoanAmount()) {
        optionals.set(20);
      }
      if (struct.isSetTotalCost()) {
        optionals.set(21);
      }
      if (struct.isSetPremium()) {
        optionals.set(22);
      }
      if (struct.isSetGuaranteeFee()) {
        optionals.set(23);
      }
      if (struct.isSetXiFeeRequestTime()) {
        optionals.set(24);
      }
      if (struct.isSetXiFeeResultTime()) {
        optionals.set(25);
      }
      if (struct.isSetXiFeeStatus()) {
        optionals.set(26);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(27);
      }
      if (struct.isSetProjectName()) {
        optionals.set(28);
      }
      if (struct.isSetProjectStatus()) {
        optionals.set(29);
      }
      if (struct.isSetProjectStatusTime()) {
        optionals.set(30);
      }
      if (struct.isSetFileIds()) {
        optionals.set(31);
      }
      if (struct.isSetApprovalStatus()) {
        optionals.set(32);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(33);
      }
      if (struct.isSetUserIds()) {
        optionals.set(34);
      }
      if (struct.isSetPage()) {
        optionals.set(35);
      }
      if (struct.isSetRows()) {
        optionals.set(36);
      }
      if (struct.isSetRepaymentVoucherPath()) {
        optionals.set(37);
      }
      if (struct.isSetXiFeeVoucherPath()) {
        optionals.set(38);
      }
      if (struct.isSetLoanIds()) {
        optionals.set(39);
      }
      if (struct.isSetQueryXiFeeStatus()) {
        optionals.set(40);
      }
      if (struct.isSetReApplyReason()) {
        optionals.set(41);
      }
      if (struct.isSetApproveMoney()) {
        optionals.set(42);
      }
      if (struct.isSetConfirmLoanStatus()) {
        optionals.set(43);
      }
      if (struct.isSetConfirmLoanRequestTime()) {
        optionals.set(44);
      }
      if (struct.isSetConfirmLoanResultTime()) {
        optionals.set(45);
      }
      if (struct.isSetConfirmLoanReason()) {
        optionals.set(46);
      }
      if (struct.isSetLoanJusticeFiles()) {
        optionals.set(47);
      }
      if (struct.isSetLoanBlankFiles()) {
        optionals.set(48);
      }
      if (struct.isSetLoanOtherFiles()) {
        optionals.set(49);
      }
      if (struct.isSetApplyLoanDate()) {
        optionals.set(50);
      }
      if (struct.isSetLoanRemark()) {
        optionals.set(51);
      }
      if (struct.isSetPaymentBank()) {
        optionals.set(52);
      }
      if (struct.isSetPaymentBankBranch()) {
        optionals.set(53);
      }
      if (struct.isSetPaymentAcctName()) {
        optionals.set(54);
      }
      if (struct.isSetPaymentAcctNo()) {
        optionals.set(55);
      }
      if (struct.isSetPaymentProvinceCode()) {
        optionals.set(56);
      }
      if (struct.isSetPaymentCityCode()) {
        optionals.set(57);
      }
      if (struct.isSetProvinceCode()) {
        optionals.set(58);
      }
      if (struct.isSetCityCode()) {
        optionals.set(59);
      }
      if (struct.isSetLoanEffeDate()) {
        optionals.set(60);
      }
      if (struct.isSetPartnerLoanDate()) {
        optionals.set(61);
      }
      if (struct.isSetPartnerLoanFile()) {
        optionals.set(62);
      }
      if (struct.isSetPartnerRealRefundDate()) {
        optionals.set(63);
      }
      if (struct.isSetPartnerRefundFile()) {
        optionals.set(64);
      }
      if (struct.isSetPartnerInterests()) {
        optionals.set(65);
      }
      if (struct.isSetRepaymentRepurchaseRemark()) {
        optionals.set(66);
      }
      if (struct.isSetRefundLoanAmount()) {
        optionals.set(67);
      }
      if (struct.isSetRefundXifee()) {
        optionals.set(68);
      }
      if (struct.isSetRefundDate()) {
        optionals.set(69);
      }
      if (struct.isSetBusinessCategory()) {
        optionals.set(70);
      }
      if (struct.isSetBusinessCategoryStr()) {
        optionals.set(71);
      }
      if (struct.isSetPayAcctNo()) {
        optionals.set(72);
      }
      if (struct.isSetPayAcctName()) {
        optionals.set(73);
      }
      if (struct.isSetPayBankName()) {
        optionals.set(74);
      }
      if (struct.isSetPayBankCode()) {
        optionals.set(75);
      }
      if (struct.isSetPayBankBranch()) {
        optionals.set(76);
      }
      if (struct.isSetPayProvinceCode()) {
        optionals.set(77);
      }
      if (struct.isSetPayCityCode()) {
        optionals.set(78);
      }
      if (struct.isSetBeginTime()) {
        optionals.set(79);
      }
      if (struct.isSetEndTime()) {
        optionals.set(80);
      }
      if (struct.isSetOrderByType()) {
        optionals.set(81);
      }
      if (struct.isSetConfirmLoanMoney()) {
        optionals.set(82);
      }
      if (struct.isSetConfirmLoanDays()) {
        optionals.set(83);
      }
      if (struct.isSetApplyDate()) {
        optionals.set(84);
      }
      if (struct.isSetHouseProvinceCode()) {
        optionals.set(85);
      }
      if (struct.isSetHouseCityCode()) {
        optionals.set(86);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(87);
      }
      if (struct.isSetPartnerOrderCode()) {
        optionals.set(88);
      }
      if (struct.isSetLoanPeriodLimit()) {
        optionals.set(89);
      }
      if (struct.isSetIsCreditLoan()) {
        optionals.set(90);
      }
      if (struct.isSetPaymentBankPhone()) {
        optionals.set(91);
      }
      if (struct.isSetPaymentBankLineNo()) {
        optionals.set(92);
      }
      if (struct.isSetRequestStatusList()) {
        optionals.set(93);
      }
      if (struct.isSetRefundTotalAmount()) {
        optionals.set(94);
      }
      if (struct.isSetRefundPenalty()) {
        optionals.set(95);
      }
      if (struct.isSetRefundFine()) {
        optionals.set(96);
      }
      if (struct.isSetRefundCompdinte()) {
        optionals.set(97);
      }
      if (struct.isSetPartnerPlatformOrderCode()) {
        optionals.set(98);
      }
      if (struct.isSetPlanRefundDate()) {
        optionals.set(99);
      }
      if (struct.isSetFromPlanRefundDate()) {
        optionals.set(100);
      }
      if (struct.isSetToPlanRefundDate()) {
        optionals.set(101);
      }
      if (struct.isSetPartnerPushAccount()) {
        optionals.set(102);
      }
      if (struct.isSetPartnerGrossRate()) {
        optionals.set(103);
      }
      oprot.writeBitSet(optionals, 104);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeString(struct.loanId);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetPartnerNo()) {
        oprot.writeString(struct.partnerNo);
      }
      if (struct.isSetRequestFiles()) {
        oprot.writeString(struct.requestFiles);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetRequestTime()) {
        oprot.writeString(struct.requestTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetApprovalTime()) {
        oprot.writeString(struct.approvalTime);
      }
      if (struct.isSetApprovalComment()) {
        oprot.writeString(struct.approvalComment);
      }
      if (struct.isSetSubmitApprovalTime()) {
        oprot.writeString(struct.submitApprovalTime);
      }
      if (struct.isSetIsClosed()) {
        oprot.writeI32(struct.isClosed);
      }
      if (struct.isSetLoanStatus()) {
        oprot.writeI32(struct.loanStatus);
      }
      if (struct.isSetLoanTime()) {
        oprot.writeString(struct.loanTime);
      }
      if (struct.isSetLoanResultTime()) {
        oprot.writeString(struct.loanResultTime);
      }
      if (struct.isSetRepaymentRepurchaseType()) {
        oprot.writeI32(struct.repaymentRepurchaseType);
      }
      if (struct.isSetRepaymentRepurchaseStatus()) {
        oprot.writeI32(struct.repaymentRepurchaseStatus);
      }
      if (struct.isSetRepaymentRepurchaseTime()) {
        oprot.writeString(struct.repaymentRepurchaseTime);
      }
      if (struct.isSetRpResultTime()) {
        oprot.writeString(struct.rpResultTime);
      }
      if (struct.isSetLoanAmount()) {
        oprot.writeDouble(struct.loanAmount);
      }
      if (struct.isSetTotalCost()) {
        oprot.writeDouble(struct.totalCost);
      }
      if (struct.isSetPremium()) {
        oprot.writeDouble(struct.premium);
      }
      if (struct.isSetGuaranteeFee()) {
        oprot.writeDouble(struct.guaranteeFee);
      }
      if (struct.isSetXiFeeRequestTime()) {
        oprot.writeString(struct.xiFeeRequestTime);
      }
      if (struct.isSetXiFeeResultTime()) {
        oprot.writeString(struct.xiFeeResultTime);
      }
      if (struct.isSetXiFeeStatus()) {
        oprot.writeI32(struct.xiFeeStatus);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectStatus()) {
        oprot.writeI32(struct.projectStatus);
      }
      if (struct.isSetProjectStatusTime()) {
        oprot.writeString(struct.projectStatusTime);
      }
      if (struct.isSetFileIds()) {
        {
          oprot.writeI32(struct.fileIds.size());
          for (int _iter16 : struct.fileIds)
          {
            oprot.writeI32(_iter16);
          }
        }
      }
      if (struct.isSetApprovalStatus()) {
        oprot.writeI32(struct.approvalStatus);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter17 : struct.userIds)
          {
            oprot.writeI32(_iter17);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetRepaymentVoucherPath()) {
        oprot.writeString(struct.repaymentVoucherPath);
      }
      if (struct.isSetXiFeeVoucherPath()) {
        oprot.writeString(struct.xiFeeVoucherPath);
      }
      if (struct.isSetLoanIds()) {
        {
          oprot.writeI32(struct.loanIds.size());
          for (String _iter18 : struct.loanIds)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetQueryXiFeeStatus()) {
        oprot.writeI32(struct.queryXiFeeStatus);
      }
      if (struct.isSetReApplyReason()) {
        oprot.writeString(struct.reApplyReason);
      }
      if (struct.isSetApproveMoney()) {
        oprot.writeDouble(struct.approveMoney);
      }
      if (struct.isSetConfirmLoanStatus()) {
        oprot.writeI32(struct.confirmLoanStatus);
      }
      if (struct.isSetConfirmLoanRequestTime()) {
        oprot.writeString(struct.confirmLoanRequestTime);
      }
      if (struct.isSetConfirmLoanResultTime()) {
        oprot.writeString(struct.confirmLoanResultTime);
      }
      if (struct.isSetConfirmLoanReason()) {
        oprot.writeString(struct.confirmLoanReason);
      }
      if (struct.isSetLoanJusticeFiles()) {
        oprot.writeString(struct.loanJusticeFiles);
      }
      if (struct.isSetLoanBlankFiles()) {
        oprot.writeString(struct.loanBlankFiles);
      }
      if (struct.isSetLoanOtherFiles()) {
        oprot.writeString(struct.loanOtherFiles);
      }
      if (struct.isSetApplyLoanDate()) {
        oprot.writeString(struct.applyLoanDate);
      }
      if (struct.isSetLoanRemark()) {
        oprot.writeString(struct.loanRemark);
      }
      if (struct.isSetPaymentBank()) {
        oprot.writeString(struct.paymentBank);
      }
      if (struct.isSetPaymentBankBranch()) {
        oprot.writeString(struct.paymentBankBranch);
      }
      if (struct.isSetPaymentAcctName()) {
        oprot.writeString(struct.paymentAcctName);
      }
      if (struct.isSetPaymentAcctNo()) {
        oprot.writeString(struct.paymentAcctNo);
      }
      if (struct.isSetPaymentProvinceCode()) {
        oprot.writeString(struct.paymentProvinceCode);
      }
      if (struct.isSetPaymentCityCode()) {
        oprot.writeString(struct.paymentCityCode);
      }
      if (struct.isSetProvinceCode()) {
        oprot.writeString(struct.provinceCode);
      }
      if (struct.isSetCityCode()) {
        oprot.writeString(struct.cityCode);
      }
      if (struct.isSetLoanEffeDate()) {
        oprot.writeString(struct.loanEffeDate);
      }
      if (struct.isSetPartnerLoanDate()) {
        oprot.writeString(struct.partnerLoanDate);
      }
      if (struct.isSetPartnerLoanFile()) {
        oprot.writeString(struct.partnerLoanFile);
      }
      if (struct.isSetPartnerRealRefundDate()) {
        oprot.writeString(struct.partnerRealRefundDate);
      }
      if (struct.isSetPartnerRefundFile()) {
        oprot.writeString(struct.partnerRefundFile);
      }
      if (struct.isSetPartnerInterests()) {
        oprot.writeDouble(struct.partnerInterests);
      }
      if (struct.isSetRepaymentRepurchaseRemark()) {
        oprot.writeString(struct.repaymentRepurchaseRemark);
      }
      if (struct.isSetRefundLoanAmount()) {
        oprot.writeDouble(struct.refundLoanAmount);
      }
      if (struct.isSetRefundXifee()) {
        oprot.writeDouble(struct.refundXifee);
      }
      if (struct.isSetRefundDate()) {
        oprot.writeString(struct.refundDate);
      }
      if (struct.isSetBusinessCategory()) {
        oprot.writeI32(struct.businessCategory);
      }
      if (struct.isSetBusinessCategoryStr()) {
        oprot.writeString(struct.businessCategoryStr);
      }
      if (struct.isSetPayAcctNo()) {
        oprot.writeString(struct.payAcctNo);
      }
      if (struct.isSetPayAcctName()) {
        oprot.writeString(struct.payAcctName);
      }
      if (struct.isSetPayBankName()) {
        oprot.writeString(struct.payBankName);
      }
      if (struct.isSetPayBankCode()) {
        oprot.writeString(struct.payBankCode);
      }
      if (struct.isSetPayBankBranch()) {
        oprot.writeString(struct.payBankBranch);
      }
      if (struct.isSetPayProvinceCode()) {
        oprot.writeString(struct.payProvinceCode);
      }
      if (struct.isSetPayCityCode()) {
        oprot.writeString(struct.payCityCode);
      }
      if (struct.isSetBeginTime()) {
        oprot.writeString(struct.beginTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetOrderByType()) {
        oprot.writeI32(struct.orderByType);
      }
      if (struct.isSetConfirmLoanMoney()) {
        oprot.writeDouble(struct.confirmLoanMoney);
      }
      if (struct.isSetConfirmLoanDays()) {
        oprot.writeI32(struct.confirmLoanDays);
      }
      if (struct.isSetApplyDate()) {
        oprot.writeI32(struct.applyDate);
      }
      if (struct.isSetHouseProvinceCode()) {
        oprot.writeString(struct.houseProvinceCode);
      }
      if (struct.isSetHouseCityCode()) {
        oprot.writeString(struct.houseCityCode);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetPartnerOrderCode()) {
        oprot.writeString(struct.partnerOrderCode);
      }
      if (struct.isSetLoanPeriodLimit()) {
        oprot.writeI32(struct.loanPeriodLimit);
      }
      if (struct.isSetIsCreditLoan()) {
        oprot.writeI32(struct.isCreditLoan);
      }
      if (struct.isSetPaymentBankPhone()) {
        oprot.writeString(struct.paymentBankPhone);
      }
      if (struct.isSetPaymentBankLineNo()) {
        oprot.writeString(struct.paymentBankLineNo);
      }
      if (struct.isSetRequestStatusList()) {
        {
          oprot.writeI32(struct.requestStatusList.size());
          for (int _iter19 : struct.requestStatusList)
          {
            oprot.writeI32(_iter19);
          }
        }
      }
      if (struct.isSetRefundTotalAmount()) {
        oprot.writeDouble(struct.refundTotalAmount);
      }
      if (struct.isSetRefundPenalty()) {
        oprot.writeDouble(struct.refundPenalty);
      }
      if (struct.isSetRefundFine()) {
        oprot.writeDouble(struct.refundFine);
      }
      if (struct.isSetRefundCompdinte()) {
        oprot.writeDouble(struct.refundCompdinte);
      }
      if (struct.isSetPartnerPlatformOrderCode()) {
        oprot.writeString(struct.partnerPlatformOrderCode);
      }
      if (struct.isSetPlanRefundDate()) {
        oprot.writeString(struct.planRefundDate);
      }
      if (struct.isSetFromPlanRefundDate()) {
        oprot.writeString(struct.fromPlanRefundDate);
      }
      if (struct.isSetToPlanRefundDate()) {
        oprot.writeString(struct.toPlanRefundDate);
      }
      if (struct.isSetPartnerPushAccount()) {
        oprot.writeI32(struct.partnerPushAccount);
      }
      if (struct.isSetPartnerGrossRate()) {
        oprot.writeDouble(struct.partnerGrossRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectPartner struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(104);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanId = iprot.readString();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.partnerNo = iprot.readString();
        struct.setPartnerNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestFiles = iprot.readString();
        struct.setRequestFilesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.requestTime = iprot.readString();
        struct.setRequestTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.approvalTime = iprot.readString();
        struct.setApprovalTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.approvalComment = iprot.readString();
        struct.setApprovalCommentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.submitApprovalTime = iprot.readString();
        struct.setSubmitApprovalTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isClosed = iprot.readI32();
        struct.setIsClosedIsSet(true);
      }
      if (incoming.get(13)) {
        struct.loanStatus = iprot.readI32();
        struct.setLoanStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.loanTime = iprot.readString();
        struct.setLoanTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loanResultTime = iprot.readString();
        struct.setLoanResultTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.repaymentRepurchaseType = iprot.readI32();
        struct.setRepaymentRepurchaseTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.repaymentRepurchaseStatus = iprot.readI32();
        struct.setRepaymentRepurchaseStatusIsSet(true);
      }
      if (incoming.get(18)) {
        struct.repaymentRepurchaseTime = iprot.readString();
        struct.setRepaymentRepurchaseTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.rpResultTime = iprot.readString();
        struct.setRpResultTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.loanAmount = iprot.readDouble();
        struct.setLoanAmountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.totalCost = iprot.readDouble();
        struct.setTotalCostIsSet(true);
      }
      if (incoming.get(22)) {
        struct.premium = iprot.readDouble();
        struct.setPremiumIsSet(true);
      }
      if (incoming.get(23)) {
        struct.guaranteeFee = iprot.readDouble();
        struct.setGuaranteeFeeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.xiFeeRequestTime = iprot.readString();
        struct.setXiFeeRequestTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.xiFeeResultTime = iprot.readString();
        struct.setXiFeeResultTimeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.xiFeeStatus = iprot.readI32();
        struct.setXiFeeStatusIsSet(true);
      }
      if (incoming.get(27)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(28)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(29)) {
        struct.projectStatus = iprot.readI32();
        struct.setProjectStatusIsSet(true);
      }
      if (incoming.get(30)) {
        struct.projectStatusTime = iprot.readString();
        struct.setProjectStatusTimeIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.fileIds = new ArrayList<Integer>(_list20.size);
          int _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = iprot.readI32();
            struct.fileIds.add(_elem21);
          }
        }
        struct.setFileIdsIsSet(true);
      }
      if (incoming.get(32)) {
        struct.approvalStatus = iprot.readI32();
        struct.setApprovalStatusIsSet(true);
      }
      if (incoming.get(33)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(34)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list23.size);
          int _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readI32();
            struct.userIds.add(_elem24);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(35)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(36)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(37)) {
        struct.repaymentVoucherPath = iprot.readString();
        struct.setRepaymentVoucherPathIsSet(true);
      }
      if (incoming.get(38)) {
        struct.xiFeeVoucherPath = iprot.readString();
        struct.setXiFeeVoucherPathIsSet(true);
      }
      if (incoming.get(39)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.loanIds = new ArrayList<String>(_list26.size);
          String _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readString();
            struct.loanIds.add(_elem27);
          }
        }
        struct.setLoanIdsIsSet(true);
      }
      if (incoming.get(40)) {
        struct.queryXiFeeStatus = iprot.readI32();
        struct.setQueryXiFeeStatusIsSet(true);
      }
      if (incoming.get(41)) {
        struct.reApplyReason = iprot.readString();
        struct.setReApplyReasonIsSet(true);
      }
      if (incoming.get(42)) {
        struct.approveMoney = iprot.readDouble();
        struct.setApproveMoneyIsSet(true);
      }
      if (incoming.get(43)) {
        struct.confirmLoanStatus = iprot.readI32();
        struct.setConfirmLoanStatusIsSet(true);
      }
      if (incoming.get(44)) {
        struct.confirmLoanRequestTime = iprot.readString();
        struct.setConfirmLoanRequestTimeIsSet(true);
      }
      if (incoming.get(45)) {
        struct.confirmLoanResultTime = iprot.readString();
        struct.setConfirmLoanResultTimeIsSet(true);
      }
      if (incoming.get(46)) {
        struct.confirmLoanReason = iprot.readString();
        struct.setConfirmLoanReasonIsSet(true);
      }
      if (incoming.get(47)) {
        struct.loanJusticeFiles = iprot.readString();
        struct.setLoanJusticeFilesIsSet(true);
      }
      if (incoming.get(48)) {
        struct.loanBlankFiles = iprot.readString();
        struct.setLoanBlankFilesIsSet(true);
      }
      if (incoming.get(49)) {
        struct.loanOtherFiles = iprot.readString();
        struct.setLoanOtherFilesIsSet(true);
      }
      if (incoming.get(50)) {
        struct.applyLoanDate = iprot.readString();
        struct.setApplyLoanDateIsSet(true);
      }
      if (incoming.get(51)) {
        struct.loanRemark = iprot.readString();
        struct.setLoanRemarkIsSet(true);
      }
      if (incoming.get(52)) {
        struct.paymentBank = iprot.readString();
        struct.setPaymentBankIsSet(true);
      }
      if (incoming.get(53)) {
        struct.paymentBankBranch = iprot.readString();
        struct.setPaymentBankBranchIsSet(true);
      }
      if (incoming.get(54)) {
        struct.paymentAcctName = iprot.readString();
        struct.setPaymentAcctNameIsSet(true);
      }
      if (incoming.get(55)) {
        struct.paymentAcctNo = iprot.readString();
        struct.setPaymentAcctNoIsSet(true);
      }
      if (incoming.get(56)) {
        struct.paymentProvinceCode = iprot.readString();
        struct.setPaymentProvinceCodeIsSet(true);
      }
      if (incoming.get(57)) {
        struct.paymentCityCode = iprot.readString();
        struct.setPaymentCityCodeIsSet(true);
      }
      if (incoming.get(58)) {
        struct.provinceCode = iprot.readString();
        struct.setProvinceCodeIsSet(true);
      }
      if (incoming.get(59)) {
        struct.cityCode = iprot.readString();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(60)) {
        struct.loanEffeDate = iprot.readString();
        struct.setLoanEffeDateIsSet(true);
      }
      if (incoming.get(61)) {
        struct.partnerLoanDate = iprot.readString();
        struct.setPartnerLoanDateIsSet(true);
      }
      if (incoming.get(62)) {
        struct.partnerLoanFile = iprot.readString();
        struct.setPartnerLoanFileIsSet(true);
      }
      if (incoming.get(63)) {
        struct.partnerRealRefundDate = iprot.readString();
        struct.setPartnerRealRefundDateIsSet(true);
      }
      if (incoming.get(64)) {
        struct.partnerRefundFile = iprot.readString();
        struct.setPartnerRefundFileIsSet(true);
      }
      if (incoming.get(65)) {
        struct.partnerInterests = iprot.readDouble();
        struct.setPartnerInterestsIsSet(true);
      }
      if (incoming.get(66)) {
        struct.repaymentRepurchaseRemark = iprot.readString();
        struct.setRepaymentRepurchaseRemarkIsSet(true);
      }
      if (incoming.get(67)) {
        struct.refundLoanAmount = iprot.readDouble();
        struct.setRefundLoanAmountIsSet(true);
      }
      if (incoming.get(68)) {
        struct.refundXifee = iprot.readDouble();
        struct.setRefundXifeeIsSet(true);
      }
      if (incoming.get(69)) {
        struct.refundDate = iprot.readString();
        struct.setRefundDateIsSet(true);
      }
      if (incoming.get(70)) {
        struct.businessCategory = iprot.readI32();
        struct.setBusinessCategoryIsSet(true);
      }
      if (incoming.get(71)) {
        struct.businessCategoryStr = iprot.readString();
        struct.setBusinessCategoryStrIsSet(true);
      }
      if (incoming.get(72)) {
        struct.payAcctNo = iprot.readString();
        struct.setPayAcctNoIsSet(true);
      }
      if (incoming.get(73)) {
        struct.payAcctName = iprot.readString();
        struct.setPayAcctNameIsSet(true);
      }
      if (incoming.get(74)) {
        struct.payBankName = iprot.readString();
        struct.setPayBankNameIsSet(true);
      }
      if (incoming.get(75)) {
        struct.payBankCode = iprot.readString();
        struct.setPayBankCodeIsSet(true);
      }
      if (incoming.get(76)) {
        struct.payBankBranch = iprot.readString();
        struct.setPayBankBranchIsSet(true);
      }
      if (incoming.get(77)) {
        struct.payProvinceCode = iprot.readString();
        struct.setPayProvinceCodeIsSet(true);
      }
      if (incoming.get(78)) {
        struct.payCityCode = iprot.readString();
        struct.setPayCityCodeIsSet(true);
      }
      if (incoming.get(79)) {
        struct.beginTime = iprot.readString();
        struct.setBeginTimeIsSet(true);
      }
      if (incoming.get(80)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(81)) {
        struct.orderByType = iprot.readI32();
        struct.setOrderByTypeIsSet(true);
      }
      if (incoming.get(82)) {
        struct.confirmLoanMoney = iprot.readDouble();
        struct.setConfirmLoanMoneyIsSet(true);
      }
      if (incoming.get(83)) {
        struct.confirmLoanDays = iprot.readI32();
        struct.setConfirmLoanDaysIsSet(true);
      }
      if (incoming.get(84)) {
        struct.applyDate = iprot.readI32();
        struct.setApplyDateIsSet(true);
      }
      if (incoming.get(85)) {
        struct.houseProvinceCode = iprot.readString();
        struct.setHouseProvinceCodeIsSet(true);
      }
      if (incoming.get(86)) {
        struct.houseCityCode = iprot.readString();
        struct.setHouseCityCodeIsSet(true);
      }
      if (incoming.get(87)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(88)) {
        struct.partnerOrderCode = iprot.readString();
        struct.setPartnerOrderCodeIsSet(true);
      }
      if (incoming.get(89)) {
        struct.loanPeriodLimit = iprot.readI32();
        struct.setLoanPeriodLimitIsSet(true);
      }
      if (incoming.get(90)) {
        struct.isCreditLoan = iprot.readI32();
        struct.setIsCreditLoanIsSet(true);
      }
      if (incoming.get(91)) {
        struct.paymentBankPhone = iprot.readString();
        struct.setPaymentBankPhoneIsSet(true);
      }
      if (incoming.get(92)) {
        struct.paymentBankLineNo = iprot.readString();
        struct.setPaymentBankLineNoIsSet(true);
      }
      if (incoming.get(93)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.requestStatusList = new ArrayList<Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.requestStatusList.add(_elem30);
          }
        }
        struct.setRequestStatusListIsSet(true);
      }
      if (incoming.get(94)) {
        struct.refundTotalAmount = iprot.readDouble();
        struct.setRefundTotalAmountIsSet(true);
      }
      if (incoming.get(95)) {
        struct.refundPenalty = iprot.readDouble();
        struct.setRefundPenaltyIsSet(true);
      }
      if (incoming.get(96)) {
        struct.refundFine = iprot.readDouble();
        struct.setRefundFineIsSet(true);
      }
      if (incoming.get(97)) {
        struct.refundCompdinte = iprot.readDouble();
        struct.setRefundCompdinteIsSet(true);
      }
      if (incoming.get(98)) {
        struct.partnerPlatformOrderCode = iprot.readString();
        struct.setPartnerPlatformOrderCodeIsSet(true);
      }
      if (incoming.get(99)) {
        struct.planRefundDate = iprot.readString();
        struct.setPlanRefundDateIsSet(true);
      }
      if (incoming.get(100)) {
        struct.fromPlanRefundDate = iprot.readString();
        struct.setFromPlanRefundDateIsSet(true);
      }
      if (incoming.get(101)) {
        struct.toPlanRefundDate = iprot.readString();
        struct.setToPlanRefundDateIsSet(true);
      }
      if (incoming.get(102)) {
        struct.partnerPushAccount = iprot.readI32();
        struct.setPartnerPushAccountIsSet(true);
      }
      if (incoming.get(103)) {
        struct.partnerGrossRate = iprot.readDouble();
        struct.setPartnerGrossRateIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class OverdueFeeDTO implements org.apache.thrift.TBase<OverdueFeeDTO, OverdueFeeDTO._Fields>, java.io.Serializable, Cloneable, Comparable<OverdueFeeDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OverdueFeeDTO");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accountName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OVERDUE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFee", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField OVERDUE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueRate", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDay", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PAYMENT_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentWay", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField IS_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("isConfirm", org.apache.thrift.protocol.TType.I32, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OverdueFeeDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OverdueFeeDTOTupleSchemeFactory());
  }

  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public int pid; // required
  public int projectId; // required
  public String accountName; // required
  public String bankName; // required
  public String accountNo; // required
  public double overdueFee; // required
  public double overdueRate; // required
  public int overdueDay; // required
  public int paymentWay; // required
  public int status; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public String createrDate; // required
  public String remark; // required
  public int isConfirm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    ROWS((short)2, "rows"),
    USER_IDS((short)3, "userIds"),
    PID((short)4, "pid"),
    PROJECT_ID((short)5, "projectId"),
    ACCOUNT_NAME((short)6, "accountName"),
    BANK_NAME((short)7, "bankName"),
    ACCOUNT_NO((short)8, "accountNo"),
    OVERDUE_FEE((short)9, "overdueFee"),
    OVERDUE_RATE((short)10, "overdueRate"),
    OVERDUE_DAY((short)11, "overdueDay"),
    PAYMENT_WAY((short)12, "paymentWay"),
    STATUS((short)13, "status"),
    CREATER_ID((short)14, "createrId"),
    UPDATE_ID((short)15, "updateId"),
    UPDATE_DATE((short)16, "updateDate"),
    CREATER_DATE((short)17, "createrDate"),
    REMARK((short)18, "remark"),
    IS_CONFIRM((short)19, "isConfirm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // ROWS
          return ROWS;
        case 3: // USER_IDS
          return USER_IDS;
        case 4: // PID
          return PID;
        case 5: // PROJECT_ID
          return PROJECT_ID;
        case 6: // ACCOUNT_NAME
          return ACCOUNT_NAME;
        case 7: // BANK_NAME
          return BANK_NAME;
        case 8: // ACCOUNT_NO
          return ACCOUNT_NO;
        case 9: // OVERDUE_FEE
          return OVERDUE_FEE;
        case 10: // OVERDUE_RATE
          return OVERDUE_RATE;
        case 11: // OVERDUE_DAY
          return OVERDUE_DAY;
        case 12: // PAYMENT_WAY
          return PAYMENT_WAY;
        case 13: // STATUS
          return STATUS;
        case 14: // CREATER_ID
          return CREATER_ID;
        case 15: // UPDATE_ID
          return UPDATE_ID;
        case 16: // UPDATE_DATE
          return UPDATE_DATE;
        case 17: // CREATER_DATE
          return CREATER_DATE;
        case 18: // REMARK
          return REMARK;
        case 19: // IS_CONFIRM
          return IS_CONFIRM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private static final int __OVERDUEFEE_ISSET_ID = 4;
  private static final int __OVERDUERATE_ISSET_ID = 5;
  private static final int __OVERDUEDAY_ISSET_ID = 6;
  private static final int __PAYMENTWAY_ISSET_ID = 7;
  private static final int __STATUS_ISSET_ID = 8;
  private static final int __CREATERID_ISSET_ID = 9;
  private static final int __UPDATEID_ISSET_ID = 10;
  private static final int __ISCONFIRM_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("accountName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_FEE, new org.apache.thrift.meta_data.FieldMetaData("overdueFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_RATE, new org.apache.thrift.meta_data.FieldMetaData("overdueRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_WAY, new org.apache.thrift.meta_data.FieldMetaData("paymentWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("isConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OverdueFeeDTO.class, metaDataMap);
  }

  public OverdueFeeDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public OverdueFeeDTO(
    int page,
    int rows,
    List<Integer> userIds,
    int pid,
    int projectId,
    String accountName,
    String bankName,
    String accountNo,
    double overdueFee,
    double overdueRate,
    int overdueDay,
    int paymentWay,
    int status,
    int createrId,
    int updateId,
    String updateDate,
    String createrDate,
    String remark,
    int isConfirm)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.accountName = accountName;
    this.bankName = bankName;
    this.accountNo = accountNo;
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    this.paymentWay = paymentWay;
    setPaymentWayIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.createrDate = createrDate;
    this.remark = remark;
    this.isConfirm = isConfirm;
    setIsConfirmIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OverdueFeeDTO(OverdueFeeDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetAccountName()) {
      this.accountName = other.accountName;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetAccountNo()) {
      this.accountNo = other.accountNo;
    }
    this.overdueFee = other.overdueFee;
    this.overdueRate = other.overdueRate;
    this.overdueDay = other.overdueDay;
    this.paymentWay = other.paymentWay;
    this.status = other.status;
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.isConfirm = other.isConfirm;
  }

  public OverdueFeeDTO deepCopy() {
    return new OverdueFeeDTO(this);
  }

  @Override
  public void clear() {
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.accountName = null;
    this.bankName = null;
    this.accountNo = null;
    setOverdueFeeIsSet(false);
    this.overdueFee = 0.0;
    setOverdueRateIsSet(false);
    this.overdueRate = 0.0;
    setOverdueDayIsSet(false);
    this.overdueDay = 0;
    setPaymentWayIsSet(false);
    this.paymentWay = 0;
    setStatusIsSet(false);
    this.status = 0;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.createrDate = null;
    this.remark = null;
    setIsConfirmIsSet(false);
    this.isConfirm = 0;
  }

  public int getPage() {
    return this.page;
  }

  public OverdueFeeDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public OverdueFeeDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public OverdueFeeDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public OverdueFeeDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public OverdueFeeDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getAccountName() {
    return this.accountName;
  }

  public OverdueFeeDTO setAccountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  public void unsetAccountName() {
    this.accountName = null;
  }

  /** Returns true if field accountName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountName() {
    return this.accountName != null;
  }

  public void setAccountNameIsSet(boolean value) {
    if (!value) {
      this.accountName = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public OverdueFeeDTO setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getAccountNo() {
    return this.accountNo;
  }

  public OverdueFeeDTO setAccountNo(String accountNo) {
    this.accountNo = accountNo;
    return this;
  }

  public void unsetAccountNo() {
    this.accountNo = null;
  }

  /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNo() {
    return this.accountNo != null;
  }

  public void setAccountNoIsSet(boolean value) {
    if (!value) {
      this.accountNo = null;
    }
  }

  public double getOverdueFee() {
    return this.overdueFee;
  }

  public OverdueFeeDTO setOverdueFee(double overdueFee) {
    this.overdueFee = overdueFee;
    setOverdueFeeIsSet(true);
    return this;
  }

  public void unsetOverdueFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  /** Returns true if field overdueFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID);
  }

  public void setOverdueFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFEE_ISSET_ID, value);
  }

  public double getOverdueRate() {
    return this.overdueRate;
  }

  public OverdueFeeDTO setOverdueRate(double overdueRate) {
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    return this;
  }

  public void unsetOverdueRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  /** Returns true if field overdueRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  public void setOverdueRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUERATE_ISSET_ID, value);
  }

  public int getOverdueDay() {
    return this.overdueDay;
  }

  public OverdueFeeDTO setOverdueDay(int overdueDay) {
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    return this;
  }

  public void unsetOverdueDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  /** Returns true if field overdueDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  public void setOverdueDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID, value);
  }

  public int getPaymentWay() {
    return this.paymentWay;
  }

  public OverdueFeeDTO setPaymentWay(int paymentWay) {
    this.paymentWay = paymentWay;
    setPaymentWayIsSet(true);
    return this;
  }

  public void unsetPaymentWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTWAY_ISSET_ID);
  }

  /** Returns true if field paymentWay is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentWay() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTWAY_ISSET_ID);
  }

  public void setPaymentWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTWAY_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public OverdueFeeDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public OverdueFeeDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public OverdueFeeDTO setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public OverdueFeeDTO setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public OverdueFeeDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public OverdueFeeDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getIsConfirm() {
    return this.isConfirm;
  }

  public OverdueFeeDTO setIsConfirm(int isConfirm) {
    this.isConfirm = isConfirm;
    setIsConfirmIsSet(true);
    return this;
  }

  public void unsetIsConfirm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCONFIRM_ISSET_ID);
  }

  /** Returns true if field isConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetIsConfirm() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCONFIRM_ISSET_ID);
  }

  public void setIsConfirmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCONFIRM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ACCOUNT_NAME:
      if (value == null) {
        unsetAccountName();
      } else {
        setAccountName((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case ACCOUNT_NO:
      if (value == null) {
        unsetAccountNo();
      } else {
        setAccountNo((String)value);
      }
      break;

    case OVERDUE_FEE:
      if (value == null) {
        unsetOverdueFee();
      } else {
        setOverdueFee((Double)value);
      }
      break;

    case OVERDUE_RATE:
      if (value == null) {
        unsetOverdueRate();
      } else {
        setOverdueRate((Double)value);
      }
      break;

    case OVERDUE_DAY:
      if (value == null) {
        unsetOverdueDay();
      } else {
        setOverdueDay((Integer)value);
      }
      break;

    case PAYMENT_WAY:
      if (value == null) {
        unsetPaymentWay();
      } else {
        setPaymentWay((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case IS_CONFIRM:
      if (value == null) {
        unsetIsConfirm();
      } else {
        setIsConfirm((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ACCOUNT_NAME:
      return getAccountName();

    case BANK_NAME:
      return getBankName();

    case ACCOUNT_NO:
      return getAccountNo();

    case OVERDUE_FEE:
      return Double.valueOf(getOverdueFee());

    case OVERDUE_RATE:
      return Double.valueOf(getOverdueRate());

    case OVERDUE_DAY:
      return Integer.valueOf(getOverdueDay());

    case PAYMENT_WAY:
      return Integer.valueOf(getPaymentWay());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case CREATER_DATE:
      return getCreaterDate();

    case REMARK:
      return getRemark();

    case IS_CONFIRM:
      return Integer.valueOf(getIsConfirm());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCOUNT_NAME:
      return isSetAccountName();
    case BANK_NAME:
      return isSetBankName();
    case ACCOUNT_NO:
      return isSetAccountNo();
    case OVERDUE_FEE:
      return isSetOverdueFee();
    case OVERDUE_RATE:
      return isSetOverdueRate();
    case OVERDUE_DAY:
      return isSetOverdueDay();
    case PAYMENT_WAY:
      return isSetPaymentWay();
    case STATUS:
      return isSetStatus();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case CREATER_DATE:
      return isSetCreaterDate();
    case REMARK:
      return isSetRemark();
    case IS_CONFIRM:
      return isSetIsConfirm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OverdueFeeDTO)
      return this.equals((OverdueFeeDTO)that);
    return false;
  }

  public boolean equals(OverdueFeeDTO that) {
    if (that == null)
      return false;

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_accountName = true && this.isSetAccountName();
    boolean that_present_accountName = true && that.isSetAccountName();
    if (this_present_accountName || that_present_accountName) {
      if (!(this_present_accountName && that_present_accountName))
        return false;
      if (!this.accountName.equals(that.accountName))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_accountNo = true && this.isSetAccountNo();
    boolean that_present_accountNo = true && that.isSetAccountNo();
    if (this_present_accountNo || that_present_accountNo) {
      if (!(this_present_accountNo && that_present_accountNo))
        return false;
      if (!this.accountNo.equals(that.accountNo))
        return false;
    }

    boolean this_present_overdueFee = true;
    boolean that_present_overdueFee = true;
    if (this_present_overdueFee || that_present_overdueFee) {
      if (!(this_present_overdueFee && that_present_overdueFee))
        return false;
      if (this.overdueFee != that.overdueFee)
        return false;
    }

    boolean this_present_overdueRate = true;
    boolean that_present_overdueRate = true;
    if (this_present_overdueRate || that_present_overdueRate) {
      if (!(this_present_overdueRate && that_present_overdueRate))
        return false;
      if (this.overdueRate != that.overdueRate)
        return false;
    }

    boolean this_present_overdueDay = true;
    boolean that_present_overdueDay = true;
    if (this_present_overdueDay || that_present_overdueDay) {
      if (!(this_present_overdueDay && that_present_overdueDay))
        return false;
      if (this.overdueDay != that.overdueDay)
        return false;
    }

    boolean this_present_paymentWay = true;
    boolean that_present_paymentWay = true;
    if (this_present_paymentWay || that_present_paymentWay) {
      if (!(this_present_paymentWay && that_present_paymentWay))
        return false;
      if (this.paymentWay != that.paymentWay)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_isConfirm = true;
    boolean that_present_isConfirm = true;
    if (this_present_isConfirm || that_present_isConfirm) {
      if (!(this_present_isConfirm && that_present_isConfirm))
        return false;
      if (this.isConfirm != that.isConfirm)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_accountName = true && (isSetAccountName());
    list.add(present_accountName);
    if (present_accountName)
      list.add(accountName);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_accountNo = true && (isSetAccountNo());
    list.add(present_accountNo);
    if (present_accountNo)
      list.add(accountNo);

    boolean present_overdueFee = true;
    list.add(present_overdueFee);
    if (present_overdueFee)
      list.add(overdueFee);

    boolean present_overdueRate = true;
    list.add(present_overdueRate);
    if (present_overdueRate)
      list.add(overdueRate);

    boolean present_overdueDay = true;
    list.add(present_overdueDay);
    if (present_overdueDay)
      list.add(overdueDay);

    boolean present_paymentWay = true;
    list.add(present_paymentWay);
    if (present_paymentWay)
      list.add(paymentWay);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_isConfirm = true;
    list.add(present_isConfirm);
    if (present_isConfirm)
      list.add(isConfirm);

    return list.hashCode();
  }

  @Override
  public int compareTo(OverdueFeeDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountName()).compareTo(other.isSetAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountName, other.accountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFee()).compareTo(other.isSetOverdueFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFee, other.overdueFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueRate()).compareTo(other.isSetOverdueRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueRate, other.overdueRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDay()).compareTo(other.isSetOverdueDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDay, other.overdueDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentWay()).compareTo(other.isSetPaymentWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentWay, other.paymentWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsConfirm()).compareTo(other.isSetIsConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isConfirm, other.isConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OverdueFeeDTO(");
    boolean first = true;

    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountName:");
    if (this.accountName == null) {
      sb.append("null");
    } else {
      sb.append(this.accountName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountNo:");
    if (this.accountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFee:");
    sb.append(this.overdueFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueRate:");
    sb.append(this.overdueRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDay:");
    sb.append(this.overdueDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentWay:");
    sb.append(this.paymentWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isConfirm:");
    sb.append(this.isConfirm);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OverdueFeeDTOStandardSchemeFactory implements SchemeFactory {
    public OverdueFeeDTOStandardScheme getScheme() {
      return new OverdueFeeDTOStandardScheme();
    }
  }

  private static class OverdueFeeDTOStandardScheme extends StandardScheme<OverdueFeeDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OverdueFeeDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list264.size);
                int _elem265;
                for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                {
                  _elem265 = iprot.readI32();
                  struct.userIds.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountName = iprot.readString();
              struct.setAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNo = iprot.readString();
              struct.setAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OVERDUE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFee = iprot.readDouble();
              struct.setOverdueFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OVERDUE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueRate = iprot.readDouble();
              struct.setOverdueRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OVERDUE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDay = iprot.readI32();
              struct.setOverdueDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAYMENT_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paymentWay = iprot.readI32();
              struct.setPaymentWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isConfirm = iprot.readI32();
              struct.setIsConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OverdueFeeDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter267 : struct.userIds)
          {
            oprot.writeI32(_iter267);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.accountName != null) {
        oprot.writeFieldBegin(ACCOUNT_NAME_FIELD_DESC);
        oprot.writeString(struct.accountName);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.accountNo != null) {
        oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.accountNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.overdueFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.overdueRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_WAY_FIELD_DESC);
      oprot.writeI32(struct.paymentWay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CONFIRM_FIELD_DESC);
      oprot.writeI32(struct.isConfirm);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OverdueFeeDTOTupleSchemeFactory implements SchemeFactory {
    public OverdueFeeDTOTupleScheme getScheme() {
      return new OverdueFeeDTOTupleScheme();
    }
  }

  private static class OverdueFeeDTOTupleScheme extends TupleScheme<OverdueFeeDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OverdueFeeDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetRows()) {
        optionals.set(1);
      }
      if (struct.isSetUserIds()) {
        optionals.set(2);
      }
      if (struct.isSetPid()) {
        optionals.set(3);
      }
      if (struct.isSetProjectId()) {
        optionals.set(4);
      }
      if (struct.isSetAccountName()) {
        optionals.set(5);
      }
      if (struct.isSetBankName()) {
        optionals.set(6);
      }
      if (struct.isSetAccountNo()) {
        optionals.set(7);
      }
      if (struct.isSetOverdueFee()) {
        optionals.set(8);
      }
      if (struct.isSetOverdueRate()) {
        optionals.set(9);
      }
      if (struct.isSetOverdueDay()) {
        optionals.set(10);
      }
      if (struct.isSetPaymentWay()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(13);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(14);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(15);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(16);
      }
      if (struct.isSetRemark()) {
        optionals.set(17);
      }
      if (struct.isSetIsConfirm()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter268 : struct.userIds)
          {
            oprot.writeI32(_iter268);
          }
        }
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetAccountName()) {
        oprot.writeString(struct.accountName);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetAccountNo()) {
        oprot.writeString(struct.accountNo);
      }
      if (struct.isSetOverdueFee()) {
        oprot.writeDouble(struct.overdueFee);
      }
      if (struct.isSetOverdueRate()) {
        oprot.writeDouble(struct.overdueRate);
      }
      if (struct.isSetOverdueDay()) {
        oprot.writeI32(struct.overdueDay);
      }
      if (struct.isSetPaymentWay()) {
        oprot.writeI32(struct.paymentWay);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetIsConfirm()) {
        oprot.writeI32(struct.isConfirm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OverdueFeeDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list269.size);
          int _elem270;
          for (int _i271 = 0; _i271 < _list269.size; ++_i271)
          {
            _elem270 = iprot.readI32();
            struct.userIds.add(_elem270);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accountName = iprot.readString();
        struct.setAccountNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.accountNo = iprot.readString();
        struct.setAccountNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.overdueFee = iprot.readDouble();
        struct.setOverdueFeeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.overdueRate = iprot.readDouble();
        struct.setOverdueRateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.overdueDay = iprot.readI32();
        struct.setOverdueDayIsSet(true);
      }
      if (incoming.get(11)) {
        struct.paymentWay = iprot.readI32();
        struct.setPaymentWayIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(18)) {
        struct.isConfirm = iprot.readI32();
        struct.setIsConfirmIsSet(true);
      }
    }
  }

}


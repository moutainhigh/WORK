/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.partner;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
public class ProjectPartnerFile implements org.apache.thrift.TBase<ProjectPartnerFile, ProjectPartnerFile._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectPartnerFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectPartnerFile");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARTNER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCESSORY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accessoryType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ACCESSORY_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("accessoryTypes", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pidList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField ACCESSORY_CHILD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accessoryChildType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField THIRD_FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdFileUrl", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectPartnerFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectPartnerFileTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String partnerNo; // required
  public String accessoryType; // required
  public String fileName; // required
  public String fileType; // required
  public int fileSize; // required
  public String fileUrl; // required
  public String updateTime; // required
  public int status; // required
  public String remark; // required
  public List<String> accessoryTypes; // required
  public List<Integer> pidList; // required
  public String accessoryChildType; // required
  public String thirdFileUrl; // required
  public int partnerId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    PARTNER_NO((short)3, "partnerNo"),
    ACCESSORY_TYPE((short)4, "accessoryType"),
    FILE_NAME((short)5, "fileName"),
    FILE_TYPE((short)6, "fileType"),
    FILE_SIZE((short)7, "fileSize"),
    FILE_URL((short)8, "fileUrl"),
    UPDATE_TIME((short)9, "updateTime"),
    STATUS((short)10, "status"),
    REMARK((short)11, "remark"),
    ACCESSORY_TYPES((short)12, "accessoryTypes"),
    PID_LIST((short)13, "pidList"),
    ACCESSORY_CHILD_TYPE((short)14, "accessoryChildType"),
    THIRD_FILE_URL((short)15, "thirdFileUrl"),
    PARTNER_ID((short)16, "partnerId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PARTNER_NO
          return PARTNER_NO;
        case 4: // ACCESSORY_TYPE
          return ACCESSORY_TYPE;
        case 5: // FILE_NAME
          return FILE_NAME;
        case 6: // FILE_TYPE
          return FILE_TYPE;
        case 7: // FILE_SIZE
          return FILE_SIZE;
        case 8: // FILE_URL
          return FILE_URL;
        case 9: // UPDATE_TIME
          return UPDATE_TIME;
        case 10: // STATUS
          return STATUS;
        case 11: // REMARK
          return REMARK;
        case 12: // ACCESSORY_TYPES
          return ACCESSORY_TYPES;
        case 13: // PID_LIST
          return PID_LIST;
        case 14: // ACCESSORY_CHILD_TYPE
          return ACCESSORY_CHILD_TYPE;
        case 15: // THIRD_FILE_URL
          return THIRD_FILE_URL;
        case 16: // PARTNER_ID
          return PARTNER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __FILESIZE_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __PARTNERID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_NO, new org.apache.thrift.meta_data.FieldMetaData("partnerNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESSORY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accessoryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("fileUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESSORY_TYPES, new org.apache.thrift.meta_data.FieldMetaData("accessoryTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PID_LIST, new org.apache.thrift.meta_data.FieldMetaData("pidList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ACCESSORY_CHILD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accessoryChildType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("thirdFileUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectPartnerFile.class, metaDataMap);
  }

  public ProjectPartnerFile() {
  }

  public ProjectPartnerFile(
    int pid,
    int projectId,
    String partnerNo,
    String accessoryType,
    String fileName,
    String fileType,
    int fileSize,
    String fileUrl,
    String updateTime,
    int status,
    String remark,
    List<String> accessoryTypes,
    List<Integer> pidList,
    String accessoryChildType,
    String thirdFileUrl,
    int partnerId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.partnerNo = partnerNo;
    this.accessoryType = accessoryType;
    this.fileName = fileName;
    this.fileType = fileType;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.fileUrl = fileUrl;
    this.updateTime = updateTime;
    this.status = status;
    setStatusIsSet(true);
    this.remark = remark;
    this.accessoryTypes = accessoryTypes;
    this.pidList = pidList;
    this.accessoryChildType = accessoryChildType;
    this.thirdFileUrl = thirdFileUrl;
    this.partnerId = partnerId;
    setPartnerIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectPartnerFile(ProjectPartnerFile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetPartnerNo()) {
      this.partnerNo = other.partnerNo;
    }
    if (other.isSetAccessoryType()) {
      this.accessoryType = other.accessoryType;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    this.fileSize = other.fileSize;
    if (other.isSetFileUrl()) {
      this.fileUrl = other.fileUrl;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.status = other.status;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetAccessoryTypes()) {
      List<String> __this__accessoryTypes = new ArrayList<String>(other.accessoryTypes);
      this.accessoryTypes = __this__accessoryTypes;
    }
    if (other.isSetPidList()) {
      List<Integer> __this__pidList = new ArrayList<Integer>(other.pidList);
      this.pidList = __this__pidList;
    }
    if (other.isSetAccessoryChildType()) {
      this.accessoryChildType = other.accessoryChildType;
    }
    if (other.isSetThirdFileUrl()) {
      this.thirdFileUrl = other.thirdFileUrl;
    }
    this.partnerId = other.partnerId;
  }

  public ProjectPartnerFile deepCopy() {
    return new ProjectPartnerFile(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.partnerNo = null;
    this.accessoryType = null;
    this.fileName = null;
    this.fileType = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    this.fileUrl = null;
    this.updateTime = null;
    setStatusIsSet(false);
    this.status = 0;
    this.remark = null;
    this.accessoryTypes = null;
    this.pidList = null;
    this.accessoryChildType = null;
    this.thirdFileUrl = null;
    setPartnerIdIsSet(false);
    this.partnerId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectPartnerFile setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectPartnerFile setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getPartnerNo() {
    return this.partnerNo;
  }

  public ProjectPartnerFile setPartnerNo(String partnerNo) {
    this.partnerNo = partnerNo;
    return this;
  }

  public void unsetPartnerNo() {
    this.partnerNo = null;
  }

  /** Returns true if field partnerNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerNo() {
    return this.partnerNo != null;
  }

  public void setPartnerNoIsSet(boolean value) {
    if (!value) {
      this.partnerNo = null;
    }
  }

  public String getAccessoryType() {
    return this.accessoryType;
  }

  public ProjectPartnerFile setAccessoryType(String accessoryType) {
    this.accessoryType = accessoryType;
    return this;
  }

  public void unsetAccessoryType() {
    this.accessoryType = null;
  }

  /** Returns true if field accessoryType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessoryType() {
    return this.accessoryType != null;
  }

  public void setAccessoryTypeIsSet(boolean value) {
    if (!value) {
      this.accessoryType = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public ProjectPartnerFile setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getFileType() {
    return this.fileType;
  }

  public ProjectPartnerFile setFileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  public int getFileSize() {
    return this.fileSize;
  }

  public ProjectPartnerFile setFileSize(int fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public String getFileUrl() {
    return this.fileUrl;
  }

  public ProjectPartnerFile setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  public void unsetFileUrl() {
    this.fileUrl = null;
  }

  /** Returns true if field fileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFileUrl() {
    return this.fileUrl != null;
  }

  public void setFileUrlIsSet(boolean value) {
    if (!value) {
      this.fileUrl = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProjectPartnerFile setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectPartnerFile setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public ProjectPartnerFile setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getAccessoryTypesSize() {
    return (this.accessoryTypes == null) ? 0 : this.accessoryTypes.size();
  }

  public java.util.Iterator<String> getAccessoryTypesIterator() {
    return (this.accessoryTypes == null) ? null : this.accessoryTypes.iterator();
  }

  public void addToAccessoryTypes(String elem) {
    if (this.accessoryTypes == null) {
      this.accessoryTypes = new ArrayList<String>();
    }
    this.accessoryTypes.add(elem);
  }

  public List<String> getAccessoryTypes() {
    return this.accessoryTypes;
  }

  public ProjectPartnerFile setAccessoryTypes(List<String> accessoryTypes) {
    this.accessoryTypes = accessoryTypes;
    return this;
  }

  public void unsetAccessoryTypes() {
    this.accessoryTypes = null;
  }

  /** Returns true if field accessoryTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessoryTypes() {
    return this.accessoryTypes != null;
  }

  public void setAccessoryTypesIsSet(boolean value) {
    if (!value) {
      this.accessoryTypes = null;
    }
  }

  public int getPidListSize() {
    return (this.pidList == null) ? 0 : this.pidList.size();
  }

  public java.util.Iterator<Integer> getPidListIterator() {
    return (this.pidList == null) ? null : this.pidList.iterator();
  }

  public void addToPidList(int elem) {
    if (this.pidList == null) {
      this.pidList = new ArrayList<Integer>();
    }
    this.pidList.add(elem);
  }

  public List<Integer> getPidList() {
    return this.pidList;
  }

  public ProjectPartnerFile setPidList(List<Integer> pidList) {
    this.pidList = pidList;
    return this;
  }

  public void unsetPidList() {
    this.pidList = null;
  }

  /** Returns true if field pidList is set (has been assigned a value) and false otherwise */
  public boolean isSetPidList() {
    return this.pidList != null;
  }

  public void setPidListIsSet(boolean value) {
    if (!value) {
      this.pidList = null;
    }
  }

  public String getAccessoryChildType() {
    return this.accessoryChildType;
  }

  public ProjectPartnerFile setAccessoryChildType(String accessoryChildType) {
    this.accessoryChildType = accessoryChildType;
    return this;
  }

  public void unsetAccessoryChildType() {
    this.accessoryChildType = null;
  }

  /** Returns true if field accessoryChildType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessoryChildType() {
    return this.accessoryChildType != null;
  }

  public void setAccessoryChildTypeIsSet(boolean value) {
    if (!value) {
      this.accessoryChildType = null;
    }
  }

  public String getThirdFileUrl() {
    return this.thirdFileUrl;
  }

  public ProjectPartnerFile setThirdFileUrl(String thirdFileUrl) {
    this.thirdFileUrl = thirdFileUrl;
    return this;
  }

  public void unsetThirdFileUrl() {
    this.thirdFileUrl = null;
  }

  /** Returns true if field thirdFileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdFileUrl() {
    return this.thirdFileUrl != null;
  }

  public void setThirdFileUrlIsSet(boolean value) {
    if (!value) {
      this.thirdFileUrl = null;
    }
  }

  public int getPartnerId() {
    return this.partnerId;
  }

  public ProjectPartnerFile setPartnerId(int partnerId) {
    this.partnerId = partnerId;
    setPartnerIdIsSet(true);
    return this;
  }

  public void unsetPartnerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERID_ISSET_ID);
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERID_ISSET_ID);
  }

  public void setPartnerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PARTNER_NO:
      if (value == null) {
        unsetPartnerNo();
      } else {
        setPartnerNo((String)value);
      }
      break;

    case ACCESSORY_TYPE:
      if (value == null) {
        unsetAccessoryType();
      } else {
        setAccessoryType((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Integer)value);
      }
      break;

    case FILE_URL:
      if (value == null) {
        unsetFileUrl();
      } else {
        setFileUrl((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ACCESSORY_TYPES:
      if (value == null) {
        unsetAccessoryTypes();
      } else {
        setAccessoryTypes((List<String>)value);
      }
      break;

    case PID_LIST:
      if (value == null) {
        unsetPidList();
      } else {
        setPidList((List<Integer>)value);
      }
      break;

    case ACCESSORY_CHILD_TYPE:
      if (value == null) {
        unsetAccessoryChildType();
      } else {
        setAccessoryChildType((String)value);
      }
      break;

    case THIRD_FILE_URL:
      if (value == null) {
        unsetThirdFileUrl();
      } else {
        setThirdFileUrl((String)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PARTNER_NO:
      return getPartnerNo();

    case ACCESSORY_TYPE:
      return getAccessoryType();

    case FILE_NAME:
      return getFileName();

    case FILE_TYPE:
      return getFileType();

    case FILE_SIZE:
      return Integer.valueOf(getFileSize());

    case FILE_URL:
      return getFileUrl();

    case UPDATE_TIME:
      return getUpdateTime();

    case STATUS:
      return Integer.valueOf(getStatus());

    case REMARK:
      return getRemark();

    case ACCESSORY_TYPES:
      return getAccessoryTypes();

    case PID_LIST:
      return getPidList();

    case ACCESSORY_CHILD_TYPE:
      return getAccessoryChildType();

    case THIRD_FILE_URL:
      return getThirdFileUrl();

    case PARTNER_ID:
      return Integer.valueOf(getPartnerId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case PARTNER_NO:
      return isSetPartnerNo();
    case ACCESSORY_TYPE:
      return isSetAccessoryType();
    case FILE_NAME:
      return isSetFileName();
    case FILE_TYPE:
      return isSetFileType();
    case FILE_SIZE:
      return isSetFileSize();
    case FILE_URL:
      return isSetFileUrl();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case STATUS:
      return isSetStatus();
    case REMARK:
      return isSetRemark();
    case ACCESSORY_TYPES:
      return isSetAccessoryTypes();
    case PID_LIST:
      return isSetPidList();
    case ACCESSORY_CHILD_TYPE:
      return isSetAccessoryChildType();
    case THIRD_FILE_URL:
      return isSetThirdFileUrl();
    case PARTNER_ID:
      return isSetPartnerId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectPartnerFile)
      return this.equals((ProjectPartnerFile)that);
    return false;
  }

  public boolean equals(ProjectPartnerFile that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_partnerNo = true && this.isSetPartnerNo();
    boolean that_present_partnerNo = true && that.isSetPartnerNo();
    if (this_present_partnerNo || that_present_partnerNo) {
      if (!(this_present_partnerNo && that_present_partnerNo))
        return false;
      if (!this.partnerNo.equals(that.partnerNo))
        return false;
    }

    boolean this_present_accessoryType = true && this.isSetAccessoryType();
    boolean that_present_accessoryType = true && that.isSetAccessoryType();
    if (this_present_accessoryType || that_present_accessoryType) {
      if (!(this_present_accessoryType && that_present_accessoryType))
        return false;
      if (!this.accessoryType.equals(that.accessoryType))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_fileUrl = true && this.isSetFileUrl();
    boolean that_present_fileUrl = true && that.isSetFileUrl();
    if (this_present_fileUrl || that_present_fileUrl) {
      if (!(this_present_fileUrl && that_present_fileUrl))
        return false;
      if (!this.fileUrl.equals(that.fileUrl))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_accessoryTypes = true && this.isSetAccessoryTypes();
    boolean that_present_accessoryTypes = true && that.isSetAccessoryTypes();
    if (this_present_accessoryTypes || that_present_accessoryTypes) {
      if (!(this_present_accessoryTypes && that_present_accessoryTypes))
        return false;
      if (!this.accessoryTypes.equals(that.accessoryTypes))
        return false;
    }

    boolean this_present_pidList = true && this.isSetPidList();
    boolean that_present_pidList = true && that.isSetPidList();
    if (this_present_pidList || that_present_pidList) {
      if (!(this_present_pidList && that_present_pidList))
        return false;
      if (!this.pidList.equals(that.pidList))
        return false;
    }

    boolean this_present_accessoryChildType = true && this.isSetAccessoryChildType();
    boolean that_present_accessoryChildType = true && that.isSetAccessoryChildType();
    if (this_present_accessoryChildType || that_present_accessoryChildType) {
      if (!(this_present_accessoryChildType && that_present_accessoryChildType))
        return false;
      if (!this.accessoryChildType.equals(that.accessoryChildType))
        return false;
    }

    boolean this_present_thirdFileUrl = true && this.isSetThirdFileUrl();
    boolean that_present_thirdFileUrl = true && that.isSetThirdFileUrl();
    if (this_present_thirdFileUrl || that_present_thirdFileUrl) {
      if (!(this_present_thirdFileUrl && that_present_thirdFileUrl))
        return false;
      if (!this.thirdFileUrl.equals(that.thirdFileUrl))
        return false;
    }

    boolean this_present_partnerId = true;
    boolean that_present_partnerId = true;
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (this.partnerId != that.partnerId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_partnerNo = true && (isSetPartnerNo());
    list.add(present_partnerNo);
    if (present_partnerNo)
      list.add(partnerNo);

    boolean present_accessoryType = true && (isSetAccessoryType());
    list.add(present_accessoryType);
    if (present_accessoryType)
      list.add(accessoryType);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_fileType = true && (isSetFileType());
    list.add(present_fileType);
    if (present_fileType)
      list.add(fileType);

    boolean present_fileSize = true;
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_fileUrl = true && (isSetFileUrl());
    list.add(present_fileUrl);
    if (present_fileUrl)
      list.add(fileUrl);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_accessoryTypes = true && (isSetAccessoryTypes());
    list.add(present_accessoryTypes);
    if (present_accessoryTypes)
      list.add(accessoryTypes);

    boolean present_pidList = true && (isSetPidList());
    list.add(present_pidList);
    if (present_pidList)
      list.add(pidList);

    boolean present_accessoryChildType = true && (isSetAccessoryChildType());
    list.add(present_accessoryChildType);
    if (present_accessoryChildType)
      list.add(accessoryChildType);

    boolean present_thirdFileUrl = true && (isSetThirdFileUrl());
    list.add(present_thirdFileUrl);
    if (present_thirdFileUrl)
      list.add(thirdFileUrl);

    boolean present_partnerId = true;
    list.add(present_partnerId);
    if (present_partnerId)
      list.add(partnerId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectPartnerFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerNo()).compareTo(other.isSetPartnerNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerNo, other.partnerNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessoryType()).compareTo(other.isSetAccessoryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessoryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessoryType, other.accessoryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileUrl()).compareTo(other.isSetFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUrl, other.fileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessoryTypes()).compareTo(other.isSetAccessoryTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessoryTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessoryTypes, other.accessoryTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPidList()).compareTo(other.isSetPidList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPidList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidList, other.pidList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessoryChildType()).compareTo(other.isSetAccessoryChildType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessoryChildType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessoryChildType, other.accessoryChildType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdFileUrl()).compareTo(other.isSetThirdFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdFileUrl, other.thirdFileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectPartnerFile(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerNo:");
    if (this.partnerNo == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessoryType:");
    if (this.accessoryType == null) {
      sb.append("null");
    } else {
      sb.append(this.accessoryType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileUrl:");
    if (this.fileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.fileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessoryTypes:");
    if (this.accessoryTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.accessoryTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pidList:");
    if (this.pidList == null) {
      sb.append("null");
    } else {
      sb.append(this.pidList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessoryChildType:");
    if (this.accessoryChildType == null) {
      sb.append("null");
    } else {
      sb.append(this.accessoryChildType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdFileUrl:");
    if (this.thirdFileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdFileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    sb.append(this.partnerId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectPartnerFileStandardSchemeFactory implements SchemeFactory {
    public ProjectPartnerFileStandardScheme getScheme() {
      return new ProjectPartnerFileStandardScheme();
    }
  }

  private static class ProjectPartnerFileStandardScheme extends StandardScheme<ProjectPartnerFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectPartnerFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTNER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerNo = iprot.readString();
              struct.setPartnerNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCESSORY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessoryType = iprot.readString();
              struct.setAccessoryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileType = iprot.readString();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileSize = iprot.readI32();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileUrl = iprot.readString();
              struct.setFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACCESSORY_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.accessoryTypes = new ArrayList<String>(_list64.size);
                String _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = iprot.readString();
                  struct.accessoryTypes.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setAccessoryTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.pidList = new ArrayList<Integer>(_list67.size);
                int _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = iprot.readI32();
                  struct.pidList.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setPidListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ACCESSORY_CHILD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessoryChildType = iprot.readString();
              struct.setAccessoryChildTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // THIRD_FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdFileUrl = iprot.readString();
              struct.setThirdFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerId = iprot.readI32();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectPartnerFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.partnerNo != null) {
        oprot.writeFieldBegin(PARTNER_NO_FIELD_DESC);
        oprot.writeString(struct.partnerNo);
        oprot.writeFieldEnd();
      }
      if (struct.accessoryType != null) {
        oprot.writeFieldBegin(ACCESSORY_TYPE_FIELD_DESC);
        oprot.writeString(struct.accessoryType);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeString(struct.fileType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fileSize);
      oprot.writeFieldEnd();
      if (struct.fileUrl != null) {
        oprot.writeFieldBegin(FILE_URL_FIELD_DESC);
        oprot.writeString(struct.fileUrl);
        oprot.writeFieldEnd();
      }
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.accessoryTypes != null) {
        oprot.writeFieldBegin(ACCESSORY_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.accessoryTypes.size()));
          for (String _iter70 : struct.accessoryTypes)
          {
            oprot.writeString(_iter70);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pidList != null) {
        oprot.writeFieldBegin(PID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pidList.size()));
          for (int _iter71 : struct.pidList)
          {
            oprot.writeI32(_iter71);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.accessoryChildType != null) {
        oprot.writeFieldBegin(ACCESSORY_CHILD_TYPE_FIELD_DESC);
        oprot.writeString(struct.accessoryChildType);
        oprot.writeFieldEnd();
      }
      if (struct.thirdFileUrl != null) {
        oprot.writeFieldBegin(THIRD_FILE_URL_FIELD_DESC);
        oprot.writeString(struct.thirdFileUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
      oprot.writeI32(struct.partnerId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectPartnerFileTupleSchemeFactory implements SchemeFactory {
    public ProjectPartnerFileTupleScheme getScheme() {
      return new ProjectPartnerFileTupleScheme();
    }
  }

  private static class ProjectPartnerFileTupleScheme extends TupleScheme<ProjectPartnerFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectPartnerFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetPartnerNo()) {
        optionals.set(2);
      }
      if (struct.isSetAccessoryType()) {
        optionals.set(3);
      }
      if (struct.isSetFileName()) {
        optionals.set(4);
      }
      if (struct.isSetFileType()) {
        optionals.set(5);
      }
      if (struct.isSetFileSize()) {
        optionals.set(6);
      }
      if (struct.isSetFileUrl()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetAccessoryTypes()) {
        optionals.set(11);
      }
      if (struct.isSetPidList()) {
        optionals.set(12);
      }
      if (struct.isSetAccessoryChildType()) {
        optionals.set(13);
      }
      if (struct.isSetThirdFileUrl()) {
        optionals.set(14);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetPartnerNo()) {
        oprot.writeString(struct.partnerNo);
      }
      if (struct.isSetAccessoryType()) {
        oprot.writeString(struct.accessoryType);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetFileType()) {
        oprot.writeString(struct.fileType);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI32(struct.fileSize);
      }
      if (struct.isSetFileUrl()) {
        oprot.writeString(struct.fileUrl);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetAccessoryTypes()) {
        {
          oprot.writeI32(struct.accessoryTypes.size());
          for (String _iter72 : struct.accessoryTypes)
          {
            oprot.writeString(_iter72);
          }
        }
      }
      if (struct.isSetPidList()) {
        {
          oprot.writeI32(struct.pidList.size());
          for (int _iter73 : struct.pidList)
          {
            oprot.writeI32(_iter73);
          }
        }
      }
      if (struct.isSetAccessoryChildType()) {
        oprot.writeString(struct.accessoryChildType);
      }
      if (struct.isSetThirdFileUrl()) {
        oprot.writeString(struct.thirdFileUrl);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeI32(struct.partnerId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectPartnerFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partnerNo = iprot.readString();
        struct.setPartnerNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accessoryType = iprot.readString();
        struct.setAccessoryTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileType = iprot.readString();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fileSize = iprot.readI32();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fileUrl = iprot.readString();
        struct.setFileUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.accessoryTypes = new ArrayList<String>(_list74.size);
          String _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = iprot.readString();
            struct.accessoryTypes.add(_elem75);
          }
        }
        struct.setAccessoryTypesIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.pidList = new ArrayList<Integer>(_list77.size);
          int _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readI32();
            struct.pidList.add(_elem78);
          }
        }
        struct.setPidListIsSet(true);
      }
      if (incoming.get(13)) {
        struct.accessoryChildType = iprot.readString();
        struct.setAccessoryChildTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.thirdFileUrl = iprot.readString();
        struct.setThirdFileUrlIsSet(true);
      }
      if (incoming.get(15)) {
        struct.partnerId = iprot.readI32();
        struct.setPartnerIdIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class BizDynamicService {

  public interface Iface {

    public List<BizDynamic> queryBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException;

    public int getBizDynamicTotal(BizDynamic bizDynamic) throws org.apache.thrift.TException;

    public boolean addBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException;

    public boolean updateBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException;

    public boolean addOrUpdateBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException;

    public boolean delBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException;

    public boolean delBizDynamicByCascade(BizDynamic bizDynamic) throws org.apache.thrift.TException;

    public boolean initBizDynamic(int projectId) throws org.apache.thrift.TException;

    public int delBizDynamicByLastId(BizDynamic bizDynamic) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBizDynamicTotal(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOrUpdateBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delBizDynamicByCascade(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void initBizDynamic(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delBizDynamicByLastId(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<BizDynamic> queryBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      send_queryBizDynamic(bizDynamic);
      return recv_queryBizDynamic();
    }

    public void send_queryBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      queryBizDynamic_args args = new queryBizDynamic_args();
      args.setBizDynamic(bizDynamic);
      sendBase("queryBizDynamic", args);
    }

    public List<BizDynamic> recv_queryBizDynamic() throws org.apache.thrift.TException
    {
      queryBizDynamic_result result = new queryBizDynamic_result();
      receiveBase(result, "queryBizDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBizDynamic failed: unknown result");
    }

    public int getBizDynamicTotal(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      send_getBizDynamicTotal(bizDynamic);
      return recv_getBizDynamicTotal();
    }

    public void send_getBizDynamicTotal(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      getBizDynamicTotal_args args = new getBizDynamicTotal_args();
      args.setBizDynamic(bizDynamic);
      sendBase("getBizDynamicTotal", args);
    }

    public int recv_getBizDynamicTotal() throws org.apache.thrift.TException
    {
      getBizDynamicTotal_result result = new getBizDynamicTotal_result();
      receiveBase(result, "getBizDynamicTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBizDynamicTotal failed: unknown result");
    }

    public boolean addBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      send_addBizDynamic(bizDynamic);
      return recv_addBizDynamic();
    }

    public void send_addBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      addBizDynamic_args args = new addBizDynamic_args();
      args.setBizDynamic(bizDynamic);
      sendBase("addBizDynamic", args);
    }

    public boolean recv_addBizDynamic() throws org.apache.thrift.TException
    {
      addBizDynamic_result result = new addBizDynamic_result();
      receiveBase(result, "addBizDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBizDynamic failed: unknown result");
    }

    public boolean updateBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      send_updateBizDynamic(bizDynamic);
      return recv_updateBizDynamic();
    }

    public void send_updateBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      updateBizDynamic_args args = new updateBizDynamic_args();
      args.setBizDynamic(bizDynamic);
      sendBase("updateBizDynamic", args);
    }

    public boolean recv_updateBizDynamic() throws org.apache.thrift.TException
    {
      updateBizDynamic_result result = new updateBizDynamic_result();
      receiveBase(result, "updateBizDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBizDynamic failed: unknown result");
    }

    public boolean addOrUpdateBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      send_addOrUpdateBizDynamic(bizDynamic);
      return recv_addOrUpdateBizDynamic();
    }

    public void send_addOrUpdateBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      addOrUpdateBizDynamic_args args = new addOrUpdateBizDynamic_args();
      args.setBizDynamic(bizDynamic);
      sendBase("addOrUpdateBizDynamic", args);
    }

    public boolean recv_addOrUpdateBizDynamic() throws org.apache.thrift.TException
    {
      addOrUpdateBizDynamic_result result = new addOrUpdateBizDynamic_result();
      receiveBase(result, "addOrUpdateBizDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOrUpdateBizDynamic failed: unknown result");
    }

    public boolean delBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      send_delBizDynamic(bizDynamic);
      return recv_delBizDynamic();
    }

    public void send_delBizDynamic(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      delBizDynamic_args args = new delBizDynamic_args();
      args.setBizDynamic(bizDynamic);
      sendBase("delBizDynamic", args);
    }

    public boolean recv_delBizDynamic() throws org.apache.thrift.TException
    {
      delBizDynamic_result result = new delBizDynamic_result();
      receiveBase(result, "delBizDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delBizDynamic failed: unknown result");
    }

    public boolean delBizDynamicByCascade(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      send_delBizDynamicByCascade(bizDynamic);
      return recv_delBizDynamicByCascade();
    }

    public void send_delBizDynamicByCascade(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      delBizDynamicByCascade_args args = new delBizDynamicByCascade_args();
      args.setBizDynamic(bizDynamic);
      sendBase("delBizDynamicByCascade", args);
    }

    public boolean recv_delBizDynamicByCascade() throws org.apache.thrift.TException
    {
      delBizDynamicByCascade_result result = new delBizDynamicByCascade_result();
      receiveBase(result, "delBizDynamicByCascade");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delBizDynamicByCascade failed: unknown result");
    }

    public boolean initBizDynamic(int projectId) throws org.apache.thrift.TException
    {
      send_initBizDynamic(projectId);
      return recv_initBizDynamic();
    }

    public void send_initBizDynamic(int projectId) throws org.apache.thrift.TException
    {
      initBizDynamic_args args = new initBizDynamic_args();
      args.setProjectId(projectId);
      sendBase("initBizDynamic", args);
    }

    public boolean recv_initBizDynamic() throws org.apache.thrift.TException
    {
      initBizDynamic_result result = new initBizDynamic_result();
      receiveBase(result, "initBizDynamic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initBizDynamic failed: unknown result");
    }

    public int delBizDynamicByLastId(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      send_delBizDynamicByLastId(bizDynamic);
      return recv_delBizDynamicByLastId();
    }

    public void send_delBizDynamicByLastId(BizDynamic bizDynamic) throws org.apache.thrift.TException
    {
      delBizDynamicByLastId_args args = new delBizDynamicByLastId_args();
      args.setBizDynamic(bizDynamic);
      sendBase("delBizDynamicByLastId", args);
    }

    public int recv_delBizDynamicByLastId() throws org.apache.thrift.TException
    {
      delBizDynamicByLastId_result result = new delBizDynamicByLastId_result();
      receiveBase(result, "delBizDynamicByLastId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delBizDynamicByLastId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBizDynamic_call method_call = new queryBizDynamic_call(bizDynamic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBizDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamic bizDynamic;
      public queryBizDynamic_call(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamic = bizDynamic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBizDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBizDynamic_args args = new queryBizDynamic_args();
        args.setBizDynamic(bizDynamic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BizDynamic> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBizDynamic();
      }
    }

    public void getBizDynamicTotal(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBizDynamicTotal_call method_call = new getBizDynamicTotal_call(bizDynamic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBizDynamicTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamic bizDynamic;
      public getBizDynamicTotal_call(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamic = bizDynamic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBizDynamicTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBizDynamicTotal_args args = new getBizDynamicTotal_args();
        args.setBizDynamic(bizDynamic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBizDynamicTotal();
      }
    }

    public void addBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBizDynamic_call method_call = new addBizDynamic_call(bizDynamic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBizDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamic bizDynamic;
      public addBizDynamic_call(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamic = bizDynamic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBizDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBizDynamic_args args = new addBizDynamic_args();
        args.setBizDynamic(bizDynamic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBizDynamic();
      }
    }

    public void updateBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBizDynamic_call method_call = new updateBizDynamic_call(bizDynamic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBizDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamic bizDynamic;
      public updateBizDynamic_call(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamic = bizDynamic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBizDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBizDynamic_args args = new updateBizDynamic_args();
        args.setBizDynamic(bizDynamic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBizDynamic();
      }
    }

    public void addOrUpdateBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOrUpdateBizDynamic_call method_call = new addOrUpdateBizDynamic_call(bizDynamic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOrUpdateBizDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamic bizDynamic;
      public addOrUpdateBizDynamic_call(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamic = bizDynamic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOrUpdateBizDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOrUpdateBizDynamic_args args = new addOrUpdateBizDynamic_args();
        args.setBizDynamic(bizDynamic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOrUpdateBizDynamic();
      }
    }

    public void delBizDynamic(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delBizDynamic_call method_call = new delBizDynamic_call(bizDynamic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delBizDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamic bizDynamic;
      public delBizDynamic_call(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamic = bizDynamic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delBizDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delBizDynamic_args args = new delBizDynamic_args();
        args.setBizDynamic(bizDynamic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delBizDynamic();
      }
    }

    public void delBizDynamicByCascade(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delBizDynamicByCascade_call method_call = new delBizDynamicByCascade_call(bizDynamic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delBizDynamicByCascade_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamic bizDynamic;
      public delBizDynamicByCascade_call(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamic = bizDynamic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delBizDynamicByCascade", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delBizDynamicByCascade_args args = new delBizDynamicByCascade_args();
        args.setBizDynamic(bizDynamic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delBizDynamicByCascade();
      }
    }

    public void initBizDynamic(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initBizDynamic_call method_call = new initBizDynamic_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initBizDynamic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public initBizDynamic_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initBizDynamic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initBizDynamic_args args = new initBizDynamic_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initBizDynamic();
      }
    }

    public void delBizDynamicByLastId(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delBizDynamicByLastId_call method_call = new delBizDynamicByLastId_call(bizDynamic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delBizDynamicByLastId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BizDynamic bizDynamic;
      public delBizDynamicByLastId_call(BizDynamic bizDynamic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizDynamic = bizDynamic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delBizDynamicByLastId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delBizDynamicByLastId_args args = new delBizDynamicByLastId_args();
        args.setBizDynamic(bizDynamic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delBizDynamicByLastId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryBizDynamic", new queryBizDynamic());
      processMap.put("getBizDynamicTotal", new getBizDynamicTotal());
      processMap.put("addBizDynamic", new addBizDynamic());
      processMap.put("updateBizDynamic", new updateBizDynamic());
      processMap.put("addOrUpdateBizDynamic", new addOrUpdateBizDynamic());
      processMap.put("delBizDynamic", new delBizDynamic());
      processMap.put("delBizDynamicByCascade", new delBizDynamicByCascade());
      processMap.put("initBizDynamic", new initBizDynamic());
      processMap.put("delBizDynamicByLastId", new delBizDynamicByLastId());
      return processMap;
    }

    public static class queryBizDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBizDynamic_args> {
      public queryBizDynamic() {
        super("queryBizDynamic");
      }

      public queryBizDynamic_args getEmptyArgsInstance() {
        return new queryBizDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBizDynamic_result getResult(I iface, queryBizDynamic_args args) throws org.apache.thrift.TException {
        queryBizDynamic_result result = new queryBizDynamic_result();
        result.success = iface.queryBizDynamic(args.bizDynamic);
        return result;
      }
    }

    public static class getBizDynamicTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBizDynamicTotal_args> {
      public getBizDynamicTotal() {
        super("getBizDynamicTotal");
      }

      public getBizDynamicTotal_args getEmptyArgsInstance() {
        return new getBizDynamicTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBizDynamicTotal_result getResult(I iface, getBizDynamicTotal_args args) throws org.apache.thrift.TException {
        getBizDynamicTotal_result result = new getBizDynamicTotal_result();
        result.success = iface.getBizDynamicTotal(args.bizDynamic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addBizDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBizDynamic_args> {
      public addBizDynamic() {
        super("addBizDynamic");
      }

      public addBizDynamic_args getEmptyArgsInstance() {
        return new addBizDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBizDynamic_result getResult(I iface, addBizDynamic_args args) throws org.apache.thrift.TException {
        addBizDynamic_result result = new addBizDynamic_result();
        result.success = iface.addBizDynamic(args.bizDynamic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateBizDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBizDynamic_args> {
      public updateBizDynamic() {
        super("updateBizDynamic");
      }

      public updateBizDynamic_args getEmptyArgsInstance() {
        return new updateBizDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBizDynamic_result getResult(I iface, updateBizDynamic_args args) throws org.apache.thrift.TException {
        updateBizDynamic_result result = new updateBizDynamic_result();
        result.success = iface.updateBizDynamic(args.bizDynamic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addOrUpdateBizDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOrUpdateBizDynamic_args> {
      public addOrUpdateBizDynamic() {
        super("addOrUpdateBizDynamic");
      }

      public addOrUpdateBizDynamic_args getEmptyArgsInstance() {
        return new addOrUpdateBizDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOrUpdateBizDynamic_result getResult(I iface, addOrUpdateBizDynamic_args args) throws org.apache.thrift.TException {
        addOrUpdateBizDynamic_result result = new addOrUpdateBizDynamic_result();
        result.success = iface.addOrUpdateBizDynamic(args.bizDynamic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delBizDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delBizDynamic_args> {
      public delBizDynamic() {
        super("delBizDynamic");
      }

      public delBizDynamic_args getEmptyArgsInstance() {
        return new delBizDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delBizDynamic_result getResult(I iface, delBizDynamic_args args) throws org.apache.thrift.TException {
        delBizDynamic_result result = new delBizDynamic_result();
        result.success = iface.delBizDynamic(args.bizDynamic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delBizDynamicByCascade<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delBizDynamicByCascade_args> {
      public delBizDynamicByCascade() {
        super("delBizDynamicByCascade");
      }

      public delBizDynamicByCascade_args getEmptyArgsInstance() {
        return new delBizDynamicByCascade_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delBizDynamicByCascade_result getResult(I iface, delBizDynamicByCascade_args args) throws org.apache.thrift.TException {
        delBizDynamicByCascade_result result = new delBizDynamicByCascade_result();
        result.success = iface.delBizDynamicByCascade(args.bizDynamic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class initBizDynamic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initBizDynamic_args> {
      public initBizDynamic() {
        super("initBizDynamic");
      }

      public initBizDynamic_args getEmptyArgsInstance() {
        return new initBizDynamic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public initBizDynamic_result getResult(I iface, initBizDynamic_args args) throws org.apache.thrift.TException {
        initBizDynamic_result result = new initBizDynamic_result();
        result.success = iface.initBizDynamic(args.projectId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class delBizDynamicByLastId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delBizDynamicByLastId_args> {
      public delBizDynamicByLastId() {
        super("delBizDynamicByLastId");
      }

      public delBizDynamicByLastId_args getEmptyArgsInstance() {
        return new delBizDynamicByLastId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delBizDynamicByLastId_result getResult(I iface, delBizDynamicByLastId_args args) throws org.apache.thrift.TException {
        delBizDynamicByLastId_result result = new delBizDynamicByLastId_result();
        result.success = iface.delBizDynamicByLastId(args.bizDynamic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryBizDynamic", new queryBizDynamic());
      processMap.put("getBizDynamicTotal", new getBizDynamicTotal());
      processMap.put("addBizDynamic", new addBizDynamic());
      processMap.put("updateBizDynamic", new updateBizDynamic());
      processMap.put("addOrUpdateBizDynamic", new addOrUpdateBizDynamic());
      processMap.put("delBizDynamic", new delBizDynamic());
      processMap.put("delBizDynamicByCascade", new delBizDynamicByCascade());
      processMap.put("initBizDynamic", new initBizDynamic());
      processMap.put("delBizDynamicByLastId", new delBizDynamicByLastId());
      return processMap;
    }

    public static class queryBizDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBizDynamic_args, List<BizDynamic>> {
      public queryBizDynamic() {
        super("queryBizDynamic");
      }

      public queryBizDynamic_args getEmptyArgsInstance() {
        return new queryBizDynamic_args();
      }

      public AsyncMethodCallback<List<BizDynamic>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BizDynamic>>() { 
          public void onComplete(List<BizDynamic> o) {
            queryBizDynamic_result result = new queryBizDynamic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBizDynamic_result result = new queryBizDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBizDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<List<BizDynamic>> resultHandler) throws TException {
        iface.queryBizDynamic(args.bizDynamic,resultHandler);
      }
    }

    public static class getBizDynamicTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBizDynamicTotal_args, Integer> {
      public getBizDynamicTotal() {
        super("getBizDynamicTotal");
      }

      public getBizDynamicTotal_args getEmptyArgsInstance() {
        return new getBizDynamicTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getBizDynamicTotal_result result = new getBizDynamicTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBizDynamicTotal_result result = new getBizDynamicTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBizDynamicTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getBizDynamicTotal(args.bizDynamic,resultHandler);
      }
    }

    public static class addBizDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBizDynamic_args, Boolean> {
      public addBizDynamic() {
        super("addBizDynamic");
      }

      public addBizDynamic_args getEmptyArgsInstance() {
        return new addBizDynamic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addBizDynamic_result result = new addBizDynamic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBizDynamic_result result = new addBizDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBizDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addBizDynamic(args.bizDynamic,resultHandler);
      }
    }

    public static class updateBizDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBizDynamic_args, Boolean> {
      public updateBizDynamic() {
        super("updateBizDynamic");
      }

      public updateBizDynamic_args getEmptyArgsInstance() {
        return new updateBizDynamic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateBizDynamic_result result = new updateBizDynamic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBizDynamic_result result = new updateBizDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBizDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateBizDynamic(args.bizDynamic,resultHandler);
      }
    }

    public static class addOrUpdateBizDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOrUpdateBizDynamic_args, Boolean> {
      public addOrUpdateBizDynamic() {
        super("addOrUpdateBizDynamic");
      }

      public addOrUpdateBizDynamic_args getEmptyArgsInstance() {
        return new addOrUpdateBizDynamic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addOrUpdateBizDynamic_result result = new addOrUpdateBizDynamic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOrUpdateBizDynamic_result result = new addOrUpdateBizDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOrUpdateBizDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addOrUpdateBizDynamic(args.bizDynamic,resultHandler);
      }
    }

    public static class delBizDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delBizDynamic_args, Boolean> {
      public delBizDynamic() {
        super("delBizDynamic");
      }

      public delBizDynamic_args getEmptyArgsInstance() {
        return new delBizDynamic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            delBizDynamic_result result = new delBizDynamic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delBizDynamic_result result = new delBizDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delBizDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.delBizDynamic(args.bizDynamic,resultHandler);
      }
    }

    public static class delBizDynamicByCascade<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delBizDynamicByCascade_args, Boolean> {
      public delBizDynamicByCascade() {
        super("delBizDynamicByCascade");
      }

      public delBizDynamicByCascade_args getEmptyArgsInstance() {
        return new delBizDynamicByCascade_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            delBizDynamicByCascade_result result = new delBizDynamicByCascade_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delBizDynamicByCascade_result result = new delBizDynamicByCascade_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delBizDynamicByCascade_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.delBizDynamicByCascade(args.bizDynamic,resultHandler);
      }
    }

    public static class initBizDynamic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initBizDynamic_args, Boolean> {
      public initBizDynamic() {
        super("initBizDynamic");
      }

      public initBizDynamic_args getEmptyArgsInstance() {
        return new initBizDynamic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            initBizDynamic_result result = new initBizDynamic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initBizDynamic_result result = new initBizDynamic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initBizDynamic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.initBizDynamic(args.projectId,resultHandler);
      }
    }

    public static class delBizDynamicByLastId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delBizDynamicByLastId_args, Integer> {
      public delBizDynamicByLastId() {
        super("delBizDynamicByLastId");
      }

      public delBizDynamicByLastId_args getEmptyArgsInstance() {
        return new delBizDynamicByLastId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            delBizDynamicByLastId_result result = new delBizDynamicByLastId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delBizDynamicByLastId_result result = new delBizDynamicByLastId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delBizDynamicByLastId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.delBizDynamicByLastId(args.bizDynamic,resultHandler);
      }
    }

  }

  public static class queryBizDynamic_args implements org.apache.thrift.TBase<queryBizDynamic_args, queryBizDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBizDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBizDynamic_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBizDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBizDynamic_argsTupleSchemeFactory());
    }

    public BizDynamic bizDynamic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC((short)1, "bizDynamic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC
            return BIZ_DYNAMIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBizDynamic_args.class, metaDataMap);
    }

    public queryBizDynamic_args() {
    }

    public queryBizDynamic_args(
      BizDynamic bizDynamic)
    {
      this();
      this.bizDynamic = bizDynamic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBizDynamic_args(queryBizDynamic_args other) {
      if (other.isSetBizDynamic()) {
        this.bizDynamic = new BizDynamic(other.bizDynamic);
      }
    }

    public queryBizDynamic_args deepCopy() {
      return new queryBizDynamic_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamic = null;
    }

    public BizDynamic getBizDynamic() {
      return this.bizDynamic;
    }

    public queryBizDynamic_args setBizDynamic(BizDynamic bizDynamic) {
      this.bizDynamic = bizDynamic;
      return this;
    }

    public void unsetBizDynamic() {
      this.bizDynamic = null;
    }

    /** Returns true if field bizDynamic is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamic() {
      return this.bizDynamic != null;
    }

    public void setBizDynamicIsSet(boolean value) {
      if (!value) {
        this.bizDynamic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC:
        if (value == null) {
          unsetBizDynamic();
        } else {
          setBizDynamic((BizDynamic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC:
        return getBizDynamic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC:
        return isSetBizDynamic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBizDynamic_args)
        return this.equals((queryBizDynamic_args)that);
      return false;
    }

    public boolean equals(queryBizDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamic = true && this.isSetBizDynamic();
      boolean that_present_bizDynamic = true && that.isSetBizDynamic();
      if (this_present_bizDynamic || that_present_bizDynamic) {
        if (!(this_present_bizDynamic && that_present_bizDynamic))
          return false;
        if (!this.bizDynamic.equals(that.bizDynamic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamic = true && (isSetBizDynamic());
      list.add(present_bizDynamic);
      if (present_bizDynamic)
        list.add(bizDynamic);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBizDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamic()).compareTo(other.isSetBizDynamic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamic, other.bizDynamic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBizDynamic_args(");
      boolean first = true;

      sb.append("bizDynamic:");
      if (this.bizDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamic != null) {
        bizDynamic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBizDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public queryBizDynamic_argsStandardScheme getScheme() {
        return new queryBizDynamic_argsStandardScheme();
      }
    }

    private static class queryBizDynamic_argsStandardScheme extends StandardScheme<queryBizDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBizDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamic = new BizDynamic();
                struct.bizDynamic.read(iprot);
                struct.setBizDynamicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBizDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamic != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_FIELD_DESC);
          struct.bizDynamic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBizDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public queryBizDynamic_argsTupleScheme getScheme() {
        return new queryBizDynamic_argsTupleScheme();
      }
    }

    private static class queryBizDynamic_argsTupleScheme extends TupleScheme<queryBizDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamic()) {
          struct.bizDynamic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamic = new BizDynamic();
          struct.bizDynamic.read(iprot);
          struct.setBizDynamicIsSet(true);
        }
      }
    }

  }

  public static class queryBizDynamic_result implements org.apache.thrift.TBase<queryBizDynamic_result, queryBizDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBizDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBizDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBizDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBizDynamic_resultTupleSchemeFactory());
    }

    public List<BizDynamic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBizDynamic_result.class, metaDataMap);
    }

    public queryBizDynamic_result() {
    }

    public queryBizDynamic_result(
      List<BizDynamic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBizDynamic_result(queryBizDynamic_result other) {
      if (other.isSetSuccess()) {
        List<BizDynamic> __this__success = new ArrayList<BizDynamic>(other.success.size());
        for (BizDynamic other_element : other.success) {
          __this__success.add(new BizDynamic(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryBizDynamic_result deepCopy() {
      return new queryBizDynamic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BizDynamic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BizDynamic elem) {
      if (this.success == null) {
        this.success = new ArrayList<BizDynamic>();
      }
      this.success.add(elem);
    }

    public List<BizDynamic> getSuccess() {
      return this.success;
    }

    public queryBizDynamic_result setSuccess(List<BizDynamic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BizDynamic>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBizDynamic_result)
        return this.equals((queryBizDynamic_result)that);
      return false;
    }

    public boolean equals(queryBizDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBizDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBizDynamic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBizDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public queryBizDynamic_resultStandardScheme getScheme() {
        return new queryBizDynamic_resultStandardScheme();
      }
    }

    private static class queryBizDynamic_resultStandardScheme extends StandardScheme<queryBizDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBizDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list756 = iprot.readListBegin();
                  struct.success = new ArrayList<BizDynamic>(_list756.size);
                  BizDynamic _elem757;
                  for (int _i758 = 0; _i758 < _list756.size; ++_i758)
                  {
                    _elem757 = new BizDynamic();
                    _elem757.read(iprot);
                    struct.success.add(_elem757);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBizDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BizDynamic _iter759 : struct.success)
            {
              _iter759.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBizDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public queryBizDynamic_resultTupleScheme getScheme() {
        return new queryBizDynamic_resultTupleScheme();
      }
    }

    private static class queryBizDynamic_resultTupleScheme extends TupleScheme<queryBizDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BizDynamic _iter760 : struct.success)
            {
              _iter760.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list761 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BizDynamic>(_list761.size);
            BizDynamic _elem762;
            for (int _i763 = 0; _i763 < _list761.size; ++_i763)
            {
              _elem762 = new BizDynamic();
              _elem762.read(iprot);
              struct.success.add(_elem762);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBizDynamicTotal_args implements org.apache.thrift.TBase<getBizDynamicTotal_args, getBizDynamicTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBizDynamicTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBizDynamicTotal_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBizDynamicTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBizDynamicTotal_argsTupleSchemeFactory());
    }

    public BizDynamic bizDynamic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC((short)1, "bizDynamic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC
            return BIZ_DYNAMIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBizDynamicTotal_args.class, metaDataMap);
    }

    public getBizDynamicTotal_args() {
    }

    public getBizDynamicTotal_args(
      BizDynamic bizDynamic)
    {
      this();
      this.bizDynamic = bizDynamic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBizDynamicTotal_args(getBizDynamicTotal_args other) {
      if (other.isSetBizDynamic()) {
        this.bizDynamic = new BizDynamic(other.bizDynamic);
      }
    }

    public getBizDynamicTotal_args deepCopy() {
      return new getBizDynamicTotal_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamic = null;
    }

    public BizDynamic getBizDynamic() {
      return this.bizDynamic;
    }

    public getBizDynamicTotal_args setBizDynamic(BizDynamic bizDynamic) {
      this.bizDynamic = bizDynamic;
      return this;
    }

    public void unsetBizDynamic() {
      this.bizDynamic = null;
    }

    /** Returns true if field bizDynamic is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamic() {
      return this.bizDynamic != null;
    }

    public void setBizDynamicIsSet(boolean value) {
      if (!value) {
        this.bizDynamic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC:
        if (value == null) {
          unsetBizDynamic();
        } else {
          setBizDynamic((BizDynamic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC:
        return getBizDynamic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC:
        return isSetBizDynamic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBizDynamicTotal_args)
        return this.equals((getBizDynamicTotal_args)that);
      return false;
    }

    public boolean equals(getBizDynamicTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamic = true && this.isSetBizDynamic();
      boolean that_present_bizDynamic = true && that.isSetBizDynamic();
      if (this_present_bizDynamic || that_present_bizDynamic) {
        if (!(this_present_bizDynamic && that_present_bizDynamic))
          return false;
        if (!this.bizDynamic.equals(that.bizDynamic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamic = true && (isSetBizDynamic());
      list.add(present_bizDynamic);
      if (present_bizDynamic)
        list.add(bizDynamic);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBizDynamicTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamic()).compareTo(other.isSetBizDynamic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamic, other.bizDynamic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBizDynamicTotal_args(");
      boolean first = true;

      sb.append("bizDynamic:");
      if (this.bizDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamic != null) {
        bizDynamic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBizDynamicTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getBizDynamicTotal_argsStandardScheme getScheme() {
        return new getBizDynamicTotal_argsStandardScheme();
      }
    }

    private static class getBizDynamicTotal_argsStandardScheme extends StandardScheme<getBizDynamicTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBizDynamicTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamic = new BizDynamic();
                struct.bizDynamic.read(iprot);
                struct.setBizDynamicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBizDynamicTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamic != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_FIELD_DESC);
          struct.bizDynamic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBizDynamicTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getBizDynamicTotal_argsTupleScheme getScheme() {
        return new getBizDynamicTotal_argsTupleScheme();
      }
    }

    private static class getBizDynamicTotal_argsTupleScheme extends TupleScheme<getBizDynamicTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBizDynamicTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamic()) {
          struct.bizDynamic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBizDynamicTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamic = new BizDynamic();
          struct.bizDynamic.read(iprot);
          struct.setBizDynamicIsSet(true);
        }
      }
    }

  }

  public static class getBizDynamicTotal_result implements org.apache.thrift.TBase<getBizDynamicTotal_result, getBizDynamicTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBizDynamicTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBizDynamicTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBizDynamicTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBizDynamicTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBizDynamicTotal_result.class, metaDataMap);
    }

    public getBizDynamicTotal_result() {
    }

    public getBizDynamicTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBizDynamicTotal_result(getBizDynamicTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getBizDynamicTotal_result deepCopy() {
      return new getBizDynamicTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getBizDynamicTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBizDynamicTotal_result)
        return this.equals((getBizDynamicTotal_result)that);
      return false;
    }

    public boolean equals(getBizDynamicTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBizDynamicTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBizDynamicTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBizDynamicTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getBizDynamicTotal_resultStandardScheme getScheme() {
        return new getBizDynamicTotal_resultStandardScheme();
      }
    }

    private static class getBizDynamicTotal_resultStandardScheme extends StandardScheme<getBizDynamicTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBizDynamicTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBizDynamicTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBizDynamicTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getBizDynamicTotal_resultTupleScheme getScheme() {
        return new getBizDynamicTotal_resultTupleScheme();
      }
    }

    private static class getBizDynamicTotal_resultTupleScheme extends TupleScheme<getBizDynamicTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBizDynamicTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBizDynamicTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addBizDynamic_args implements org.apache.thrift.TBase<addBizDynamic_args, addBizDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBizDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBizDynamic_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBizDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBizDynamic_argsTupleSchemeFactory());
    }

    public BizDynamic bizDynamic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC((short)1, "bizDynamic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC
            return BIZ_DYNAMIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBizDynamic_args.class, metaDataMap);
    }

    public addBizDynamic_args() {
    }

    public addBizDynamic_args(
      BizDynamic bizDynamic)
    {
      this();
      this.bizDynamic = bizDynamic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBizDynamic_args(addBizDynamic_args other) {
      if (other.isSetBizDynamic()) {
        this.bizDynamic = new BizDynamic(other.bizDynamic);
      }
    }

    public addBizDynamic_args deepCopy() {
      return new addBizDynamic_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamic = null;
    }

    public BizDynamic getBizDynamic() {
      return this.bizDynamic;
    }

    public addBizDynamic_args setBizDynamic(BizDynamic bizDynamic) {
      this.bizDynamic = bizDynamic;
      return this;
    }

    public void unsetBizDynamic() {
      this.bizDynamic = null;
    }

    /** Returns true if field bizDynamic is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamic() {
      return this.bizDynamic != null;
    }

    public void setBizDynamicIsSet(boolean value) {
      if (!value) {
        this.bizDynamic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC:
        if (value == null) {
          unsetBizDynamic();
        } else {
          setBizDynamic((BizDynamic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC:
        return getBizDynamic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC:
        return isSetBizDynamic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBizDynamic_args)
        return this.equals((addBizDynamic_args)that);
      return false;
    }

    public boolean equals(addBizDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamic = true && this.isSetBizDynamic();
      boolean that_present_bizDynamic = true && that.isSetBizDynamic();
      if (this_present_bizDynamic || that_present_bizDynamic) {
        if (!(this_present_bizDynamic && that_present_bizDynamic))
          return false;
        if (!this.bizDynamic.equals(that.bizDynamic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamic = true && (isSetBizDynamic());
      list.add(present_bizDynamic);
      if (present_bizDynamic)
        list.add(bizDynamic);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBizDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamic()).compareTo(other.isSetBizDynamic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamic, other.bizDynamic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBizDynamic_args(");
      boolean first = true;

      sb.append("bizDynamic:");
      if (this.bizDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamic != null) {
        bizDynamic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBizDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public addBizDynamic_argsStandardScheme getScheme() {
        return new addBizDynamic_argsStandardScheme();
      }
    }

    private static class addBizDynamic_argsStandardScheme extends StandardScheme<addBizDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBizDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamic = new BizDynamic();
                struct.bizDynamic.read(iprot);
                struct.setBizDynamicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBizDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamic != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_FIELD_DESC);
          struct.bizDynamic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBizDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public addBizDynamic_argsTupleScheme getScheme() {
        return new addBizDynamic_argsTupleScheme();
      }
    }

    private static class addBizDynamic_argsTupleScheme extends TupleScheme<addBizDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamic()) {
          struct.bizDynamic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamic = new BizDynamic();
          struct.bizDynamic.read(iprot);
          struct.setBizDynamicIsSet(true);
        }
      }
    }

  }

  public static class addBizDynamic_result implements org.apache.thrift.TBase<addBizDynamic_result, addBizDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBizDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBizDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBizDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBizDynamic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBizDynamic_result.class, metaDataMap);
    }

    public addBizDynamic_result() {
    }

    public addBizDynamic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBizDynamic_result(addBizDynamic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addBizDynamic_result deepCopy() {
      return new addBizDynamic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addBizDynamic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBizDynamic_result)
        return this.equals((addBizDynamic_result)that);
      return false;
    }

    public boolean equals(addBizDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBizDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBizDynamic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBizDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public addBizDynamic_resultStandardScheme getScheme() {
        return new addBizDynamic_resultStandardScheme();
      }
    }

    private static class addBizDynamic_resultStandardScheme extends StandardScheme<addBizDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBizDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBizDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBizDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public addBizDynamic_resultTupleScheme getScheme() {
        return new addBizDynamic_resultTupleScheme();
      }
    }

    private static class addBizDynamic_resultTupleScheme extends TupleScheme<addBizDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBizDynamic_args implements org.apache.thrift.TBase<updateBizDynamic_args, updateBizDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizDynamic_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizDynamic_argsTupleSchemeFactory());
    }

    public BizDynamic bizDynamic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC((short)1, "bizDynamic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC
            return BIZ_DYNAMIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizDynamic_args.class, metaDataMap);
    }

    public updateBizDynamic_args() {
    }

    public updateBizDynamic_args(
      BizDynamic bizDynamic)
    {
      this();
      this.bizDynamic = bizDynamic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizDynamic_args(updateBizDynamic_args other) {
      if (other.isSetBizDynamic()) {
        this.bizDynamic = new BizDynamic(other.bizDynamic);
      }
    }

    public updateBizDynamic_args deepCopy() {
      return new updateBizDynamic_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamic = null;
    }

    public BizDynamic getBizDynamic() {
      return this.bizDynamic;
    }

    public updateBizDynamic_args setBizDynamic(BizDynamic bizDynamic) {
      this.bizDynamic = bizDynamic;
      return this;
    }

    public void unsetBizDynamic() {
      this.bizDynamic = null;
    }

    /** Returns true if field bizDynamic is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamic() {
      return this.bizDynamic != null;
    }

    public void setBizDynamicIsSet(boolean value) {
      if (!value) {
        this.bizDynamic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC:
        if (value == null) {
          unsetBizDynamic();
        } else {
          setBizDynamic((BizDynamic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC:
        return getBizDynamic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC:
        return isSetBizDynamic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizDynamic_args)
        return this.equals((updateBizDynamic_args)that);
      return false;
    }

    public boolean equals(updateBizDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamic = true && this.isSetBizDynamic();
      boolean that_present_bizDynamic = true && that.isSetBizDynamic();
      if (this_present_bizDynamic || that_present_bizDynamic) {
        if (!(this_present_bizDynamic && that_present_bizDynamic))
          return false;
        if (!this.bizDynamic.equals(that.bizDynamic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamic = true && (isSetBizDynamic());
      list.add(present_bizDynamic);
      if (present_bizDynamic)
        list.add(bizDynamic);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamic()).compareTo(other.isSetBizDynamic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamic, other.bizDynamic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizDynamic_args(");
      boolean first = true;

      sb.append("bizDynamic:");
      if (this.bizDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamic != null) {
        bizDynamic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public updateBizDynamic_argsStandardScheme getScheme() {
        return new updateBizDynamic_argsStandardScheme();
      }
    }

    private static class updateBizDynamic_argsStandardScheme extends StandardScheme<updateBizDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamic = new BizDynamic();
                struct.bizDynamic.read(iprot);
                struct.setBizDynamicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamic != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_FIELD_DESC);
          struct.bizDynamic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public updateBizDynamic_argsTupleScheme getScheme() {
        return new updateBizDynamic_argsTupleScheme();
      }
    }

    private static class updateBizDynamic_argsTupleScheme extends TupleScheme<updateBizDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamic()) {
          struct.bizDynamic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamic = new BizDynamic();
          struct.bizDynamic.read(iprot);
          struct.setBizDynamicIsSet(true);
        }
      }
    }

  }

  public static class updateBizDynamic_result implements org.apache.thrift.TBase<updateBizDynamic_result, updateBizDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizDynamic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizDynamic_result.class, metaDataMap);
    }

    public updateBizDynamic_result() {
    }

    public updateBizDynamic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizDynamic_result(updateBizDynamic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateBizDynamic_result deepCopy() {
      return new updateBizDynamic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateBizDynamic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizDynamic_result)
        return this.equals((updateBizDynamic_result)that);
      return false;
    }

    public boolean equals(updateBizDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizDynamic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public updateBizDynamic_resultStandardScheme getScheme() {
        return new updateBizDynamic_resultStandardScheme();
      }
    }

    private static class updateBizDynamic_resultStandardScheme extends StandardScheme<updateBizDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public updateBizDynamic_resultTupleScheme getScheme() {
        return new updateBizDynamic_resultTupleScheme();
      }
    }

    private static class updateBizDynamic_resultTupleScheme extends TupleScheme<updateBizDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addOrUpdateBizDynamic_args implements org.apache.thrift.TBase<addOrUpdateBizDynamic_args, addOrUpdateBizDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOrUpdateBizDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrUpdateBizDynamic_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrUpdateBizDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrUpdateBizDynamic_argsTupleSchemeFactory());
    }

    public BizDynamic bizDynamic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC((short)1, "bizDynamic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC
            return BIZ_DYNAMIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrUpdateBizDynamic_args.class, metaDataMap);
    }

    public addOrUpdateBizDynamic_args() {
    }

    public addOrUpdateBizDynamic_args(
      BizDynamic bizDynamic)
    {
      this();
      this.bizDynamic = bizDynamic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrUpdateBizDynamic_args(addOrUpdateBizDynamic_args other) {
      if (other.isSetBizDynamic()) {
        this.bizDynamic = new BizDynamic(other.bizDynamic);
      }
    }

    public addOrUpdateBizDynamic_args deepCopy() {
      return new addOrUpdateBizDynamic_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamic = null;
    }

    public BizDynamic getBizDynamic() {
      return this.bizDynamic;
    }

    public addOrUpdateBizDynamic_args setBizDynamic(BizDynamic bizDynamic) {
      this.bizDynamic = bizDynamic;
      return this;
    }

    public void unsetBizDynamic() {
      this.bizDynamic = null;
    }

    /** Returns true if field bizDynamic is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamic() {
      return this.bizDynamic != null;
    }

    public void setBizDynamicIsSet(boolean value) {
      if (!value) {
        this.bizDynamic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC:
        if (value == null) {
          unsetBizDynamic();
        } else {
          setBizDynamic((BizDynamic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC:
        return getBizDynamic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC:
        return isSetBizDynamic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrUpdateBizDynamic_args)
        return this.equals((addOrUpdateBizDynamic_args)that);
      return false;
    }

    public boolean equals(addOrUpdateBizDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamic = true && this.isSetBizDynamic();
      boolean that_present_bizDynamic = true && that.isSetBizDynamic();
      if (this_present_bizDynamic || that_present_bizDynamic) {
        if (!(this_present_bizDynamic && that_present_bizDynamic))
          return false;
        if (!this.bizDynamic.equals(that.bizDynamic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamic = true && (isSetBizDynamic());
      list.add(present_bizDynamic);
      if (present_bizDynamic)
        list.add(bizDynamic);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrUpdateBizDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamic()).compareTo(other.isSetBizDynamic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamic, other.bizDynamic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrUpdateBizDynamic_args(");
      boolean first = true;

      sb.append("bizDynamic:");
      if (this.bizDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamic != null) {
        bizDynamic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrUpdateBizDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public addOrUpdateBizDynamic_argsStandardScheme getScheme() {
        return new addOrUpdateBizDynamic_argsStandardScheme();
      }
    }

    private static class addOrUpdateBizDynamic_argsStandardScheme extends StandardScheme<addOrUpdateBizDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrUpdateBizDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamic = new BizDynamic();
                struct.bizDynamic.read(iprot);
                struct.setBizDynamicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrUpdateBizDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamic != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_FIELD_DESC);
          struct.bizDynamic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrUpdateBizDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public addOrUpdateBizDynamic_argsTupleScheme getScheme() {
        return new addOrUpdateBizDynamic_argsTupleScheme();
      }
    }

    private static class addOrUpdateBizDynamic_argsTupleScheme extends TupleScheme<addOrUpdateBizDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrUpdateBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamic()) {
          struct.bizDynamic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrUpdateBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamic = new BizDynamic();
          struct.bizDynamic.read(iprot);
          struct.setBizDynamicIsSet(true);
        }
      }
    }

  }

  public static class addOrUpdateBizDynamic_result implements org.apache.thrift.TBase<addOrUpdateBizDynamic_result, addOrUpdateBizDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOrUpdateBizDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrUpdateBizDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrUpdateBizDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrUpdateBizDynamic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrUpdateBizDynamic_result.class, metaDataMap);
    }

    public addOrUpdateBizDynamic_result() {
    }

    public addOrUpdateBizDynamic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrUpdateBizDynamic_result(addOrUpdateBizDynamic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addOrUpdateBizDynamic_result deepCopy() {
      return new addOrUpdateBizDynamic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addOrUpdateBizDynamic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrUpdateBizDynamic_result)
        return this.equals((addOrUpdateBizDynamic_result)that);
      return false;
    }

    public boolean equals(addOrUpdateBizDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrUpdateBizDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrUpdateBizDynamic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrUpdateBizDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public addOrUpdateBizDynamic_resultStandardScheme getScheme() {
        return new addOrUpdateBizDynamic_resultStandardScheme();
      }
    }

    private static class addOrUpdateBizDynamic_resultStandardScheme extends StandardScheme<addOrUpdateBizDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrUpdateBizDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrUpdateBizDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrUpdateBizDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public addOrUpdateBizDynamic_resultTupleScheme getScheme() {
        return new addOrUpdateBizDynamic_resultTupleScheme();
      }
    }

    private static class addOrUpdateBizDynamic_resultTupleScheme extends TupleScheme<addOrUpdateBizDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrUpdateBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrUpdateBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delBizDynamic_args implements org.apache.thrift.TBase<delBizDynamic_args, delBizDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<delBizDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBizDynamic_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBizDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBizDynamic_argsTupleSchemeFactory());
    }

    public BizDynamic bizDynamic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC((short)1, "bizDynamic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC
            return BIZ_DYNAMIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBizDynamic_args.class, metaDataMap);
    }

    public delBizDynamic_args() {
    }

    public delBizDynamic_args(
      BizDynamic bizDynamic)
    {
      this();
      this.bizDynamic = bizDynamic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBizDynamic_args(delBizDynamic_args other) {
      if (other.isSetBizDynamic()) {
        this.bizDynamic = new BizDynamic(other.bizDynamic);
      }
    }

    public delBizDynamic_args deepCopy() {
      return new delBizDynamic_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamic = null;
    }

    public BizDynamic getBizDynamic() {
      return this.bizDynamic;
    }

    public delBizDynamic_args setBizDynamic(BizDynamic bizDynamic) {
      this.bizDynamic = bizDynamic;
      return this;
    }

    public void unsetBizDynamic() {
      this.bizDynamic = null;
    }

    /** Returns true if field bizDynamic is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamic() {
      return this.bizDynamic != null;
    }

    public void setBizDynamicIsSet(boolean value) {
      if (!value) {
        this.bizDynamic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC:
        if (value == null) {
          unsetBizDynamic();
        } else {
          setBizDynamic((BizDynamic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC:
        return getBizDynamic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC:
        return isSetBizDynamic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBizDynamic_args)
        return this.equals((delBizDynamic_args)that);
      return false;
    }

    public boolean equals(delBizDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamic = true && this.isSetBizDynamic();
      boolean that_present_bizDynamic = true && that.isSetBizDynamic();
      if (this_present_bizDynamic || that_present_bizDynamic) {
        if (!(this_present_bizDynamic && that_present_bizDynamic))
          return false;
        if (!this.bizDynamic.equals(that.bizDynamic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamic = true && (isSetBizDynamic());
      list.add(present_bizDynamic);
      if (present_bizDynamic)
        list.add(bizDynamic);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBizDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamic()).compareTo(other.isSetBizDynamic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamic, other.bizDynamic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBizDynamic_args(");
      boolean first = true;

      sb.append("bizDynamic:");
      if (this.bizDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamic != null) {
        bizDynamic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBizDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public delBizDynamic_argsStandardScheme getScheme() {
        return new delBizDynamic_argsStandardScheme();
      }
    }

    private static class delBizDynamic_argsStandardScheme extends StandardScheme<delBizDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBizDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamic = new BizDynamic();
                struct.bizDynamic.read(iprot);
                struct.setBizDynamicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBizDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamic != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_FIELD_DESC);
          struct.bizDynamic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBizDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public delBizDynamic_argsTupleScheme getScheme() {
        return new delBizDynamic_argsTupleScheme();
      }
    }

    private static class delBizDynamic_argsTupleScheme extends TupleScheme<delBizDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamic()) {
          struct.bizDynamic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamic = new BizDynamic();
          struct.bizDynamic.read(iprot);
          struct.setBizDynamicIsSet(true);
        }
      }
    }

  }

  public static class delBizDynamic_result implements org.apache.thrift.TBase<delBizDynamic_result, delBizDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<delBizDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBizDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBizDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBizDynamic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBizDynamic_result.class, metaDataMap);
    }

    public delBizDynamic_result() {
    }

    public delBizDynamic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBizDynamic_result(delBizDynamic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delBizDynamic_result deepCopy() {
      return new delBizDynamic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delBizDynamic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBizDynamic_result)
        return this.equals((delBizDynamic_result)that);
      return false;
    }

    public boolean equals(delBizDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBizDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBizDynamic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBizDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public delBizDynamic_resultStandardScheme getScheme() {
        return new delBizDynamic_resultStandardScheme();
      }
    }

    private static class delBizDynamic_resultStandardScheme extends StandardScheme<delBizDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBizDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBizDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBizDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public delBizDynamic_resultTupleScheme getScheme() {
        return new delBizDynamic_resultTupleScheme();
      }
    }

    private static class delBizDynamic_resultTupleScheme extends TupleScheme<delBizDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delBizDynamicByCascade_args implements org.apache.thrift.TBase<delBizDynamicByCascade_args, delBizDynamicByCascade_args._Fields>, java.io.Serializable, Cloneable, Comparable<delBizDynamicByCascade_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBizDynamicByCascade_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBizDynamicByCascade_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBizDynamicByCascade_argsTupleSchemeFactory());
    }

    public BizDynamic bizDynamic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC((short)1, "bizDynamic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC
            return BIZ_DYNAMIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBizDynamicByCascade_args.class, metaDataMap);
    }

    public delBizDynamicByCascade_args() {
    }

    public delBizDynamicByCascade_args(
      BizDynamic bizDynamic)
    {
      this();
      this.bizDynamic = bizDynamic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBizDynamicByCascade_args(delBizDynamicByCascade_args other) {
      if (other.isSetBizDynamic()) {
        this.bizDynamic = new BizDynamic(other.bizDynamic);
      }
    }

    public delBizDynamicByCascade_args deepCopy() {
      return new delBizDynamicByCascade_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamic = null;
    }

    public BizDynamic getBizDynamic() {
      return this.bizDynamic;
    }

    public delBizDynamicByCascade_args setBizDynamic(BizDynamic bizDynamic) {
      this.bizDynamic = bizDynamic;
      return this;
    }

    public void unsetBizDynamic() {
      this.bizDynamic = null;
    }

    /** Returns true if field bizDynamic is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamic() {
      return this.bizDynamic != null;
    }

    public void setBizDynamicIsSet(boolean value) {
      if (!value) {
        this.bizDynamic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC:
        if (value == null) {
          unsetBizDynamic();
        } else {
          setBizDynamic((BizDynamic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC:
        return getBizDynamic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC:
        return isSetBizDynamic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBizDynamicByCascade_args)
        return this.equals((delBizDynamicByCascade_args)that);
      return false;
    }

    public boolean equals(delBizDynamicByCascade_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamic = true && this.isSetBizDynamic();
      boolean that_present_bizDynamic = true && that.isSetBizDynamic();
      if (this_present_bizDynamic || that_present_bizDynamic) {
        if (!(this_present_bizDynamic && that_present_bizDynamic))
          return false;
        if (!this.bizDynamic.equals(that.bizDynamic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamic = true && (isSetBizDynamic());
      list.add(present_bizDynamic);
      if (present_bizDynamic)
        list.add(bizDynamic);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBizDynamicByCascade_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamic()).compareTo(other.isSetBizDynamic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamic, other.bizDynamic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBizDynamicByCascade_args(");
      boolean first = true;

      sb.append("bizDynamic:");
      if (this.bizDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamic != null) {
        bizDynamic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBizDynamicByCascade_argsStandardSchemeFactory implements SchemeFactory {
      public delBizDynamicByCascade_argsStandardScheme getScheme() {
        return new delBizDynamicByCascade_argsStandardScheme();
      }
    }

    private static class delBizDynamicByCascade_argsStandardScheme extends StandardScheme<delBizDynamicByCascade_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBizDynamicByCascade_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamic = new BizDynamic();
                struct.bizDynamic.read(iprot);
                struct.setBizDynamicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBizDynamicByCascade_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamic != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_FIELD_DESC);
          struct.bizDynamic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBizDynamicByCascade_argsTupleSchemeFactory implements SchemeFactory {
      public delBizDynamicByCascade_argsTupleScheme getScheme() {
        return new delBizDynamicByCascade_argsTupleScheme();
      }
    }

    private static class delBizDynamicByCascade_argsTupleScheme extends TupleScheme<delBizDynamicByCascade_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBizDynamicByCascade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamic()) {
          struct.bizDynamic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBizDynamicByCascade_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamic = new BizDynamic();
          struct.bizDynamic.read(iprot);
          struct.setBizDynamicIsSet(true);
        }
      }
    }

  }

  public static class delBizDynamicByCascade_result implements org.apache.thrift.TBase<delBizDynamicByCascade_result, delBizDynamicByCascade_result._Fields>, java.io.Serializable, Cloneable, Comparable<delBizDynamicByCascade_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBizDynamicByCascade_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBizDynamicByCascade_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBizDynamicByCascade_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBizDynamicByCascade_result.class, metaDataMap);
    }

    public delBizDynamicByCascade_result() {
    }

    public delBizDynamicByCascade_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBizDynamicByCascade_result(delBizDynamicByCascade_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delBizDynamicByCascade_result deepCopy() {
      return new delBizDynamicByCascade_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public delBizDynamicByCascade_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBizDynamicByCascade_result)
        return this.equals((delBizDynamicByCascade_result)that);
      return false;
    }

    public boolean equals(delBizDynamicByCascade_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBizDynamicByCascade_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBizDynamicByCascade_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBizDynamicByCascade_resultStandardSchemeFactory implements SchemeFactory {
      public delBizDynamicByCascade_resultStandardScheme getScheme() {
        return new delBizDynamicByCascade_resultStandardScheme();
      }
    }

    private static class delBizDynamicByCascade_resultStandardScheme extends StandardScheme<delBizDynamicByCascade_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBizDynamicByCascade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBizDynamicByCascade_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBizDynamicByCascade_resultTupleSchemeFactory implements SchemeFactory {
      public delBizDynamicByCascade_resultTupleScheme getScheme() {
        return new delBizDynamicByCascade_resultTupleScheme();
      }
    }

    private static class delBizDynamicByCascade_resultTupleScheme extends TupleScheme<delBizDynamicByCascade_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBizDynamicByCascade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBizDynamicByCascade_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class initBizDynamic_args implements org.apache.thrift.TBase<initBizDynamic_args, initBizDynamic_args._Fields>, java.io.Serializable, Cloneable, Comparable<initBizDynamic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initBizDynamic_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initBizDynamic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initBizDynamic_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initBizDynamic_args.class, metaDataMap);
    }

    public initBizDynamic_args() {
    }

    public initBizDynamic_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initBizDynamic_args(initBizDynamic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public initBizDynamic_args deepCopy() {
      return new initBizDynamic_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public initBizDynamic_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initBizDynamic_args)
        return this.equals((initBizDynamic_args)that);
      return false;
    }

    public boolean equals(initBizDynamic_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(initBizDynamic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initBizDynamic_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initBizDynamic_argsStandardSchemeFactory implements SchemeFactory {
      public initBizDynamic_argsStandardScheme getScheme() {
        return new initBizDynamic_argsStandardScheme();
      }
    }

    private static class initBizDynamic_argsStandardScheme extends StandardScheme<initBizDynamic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initBizDynamic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initBizDynamic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initBizDynamic_argsTupleSchemeFactory implements SchemeFactory {
      public initBizDynamic_argsTupleScheme getScheme() {
        return new initBizDynamic_argsTupleScheme();
      }
    }

    private static class initBizDynamic_argsTupleScheme extends TupleScheme<initBizDynamic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initBizDynamic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class initBizDynamic_result implements org.apache.thrift.TBase<initBizDynamic_result, initBizDynamic_result._Fields>, java.io.Serializable, Cloneable, Comparable<initBizDynamic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initBizDynamic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initBizDynamic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initBizDynamic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initBizDynamic_result.class, metaDataMap);
    }

    public initBizDynamic_result() {
    }

    public initBizDynamic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initBizDynamic_result(initBizDynamic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public initBizDynamic_result deepCopy() {
      return new initBizDynamic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public initBizDynamic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initBizDynamic_result)
        return this.equals((initBizDynamic_result)that);
      return false;
    }

    public boolean equals(initBizDynamic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(initBizDynamic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initBizDynamic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initBizDynamic_resultStandardSchemeFactory implements SchemeFactory {
      public initBizDynamic_resultStandardScheme getScheme() {
        return new initBizDynamic_resultStandardScheme();
      }
    }

    private static class initBizDynamic_resultStandardScheme extends StandardScheme<initBizDynamic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initBizDynamic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initBizDynamic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initBizDynamic_resultTupleSchemeFactory implements SchemeFactory {
      public initBizDynamic_resultTupleScheme getScheme() {
        return new initBizDynamic_resultTupleScheme();
      }
    }

    private static class initBizDynamic_resultTupleScheme extends TupleScheme<initBizDynamic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initBizDynamic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delBizDynamicByLastId_args implements org.apache.thrift.TBase<delBizDynamicByLastId_args, delBizDynamicByLastId_args._Fields>, java.io.Serializable, Cloneable, Comparable<delBizDynamicByLastId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBizDynamicByLastId_args");

    private static final org.apache.thrift.protocol.TField BIZ_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("bizDynamic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBizDynamicByLastId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBizDynamicByLastId_argsTupleSchemeFactory());
    }

    public BizDynamic bizDynamic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_DYNAMIC((short)1, "bizDynamic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_DYNAMIC
            return BIZ_DYNAMIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("bizDynamic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BizDynamic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBizDynamicByLastId_args.class, metaDataMap);
    }

    public delBizDynamicByLastId_args() {
    }

    public delBizDynamicByLastId_args(
      BizDynamic bizDynamic)
    {
      this();
      this.bizDynamic = bizDynamic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBizDynamicByLastId_args(delBizDynamicByLastId_args other) {
      if (other.isSetBizDynamic()) {
        this.bizDynamic = new BizDynamic(other.bizDynamic);
      }
    }

    public delBizDynamicByLastId_args deepCopy() {
      return new delBizDynamicByLastId_args(this);
    }

    @Override
    public void clear() {
      this.bizDynamic = null;
    }

    public BizDynamic getBizDynamic() {
      return this.bizDynamic;
    }

    public delBizDynamicByLastId_args setBizDynamic(BizDynamic bizDynamic) {
      this.bizDynamic = bizDynamic;
      return this;
    }

    public void unsetBizDynamic() {
      this.bizDynamic = null;
    }

    /** Returns true if field bizDynamic is set (has been assigned a value) and false otherwise */
    public boolean isSetBizDynamic() {
      return this.bizDynamic != null;
    }

    public void setBizDynamicIsSet(boolean value) {
      if (!value) {
        this.bizDynamic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_DYNAMIC:
        if (value == null) {
          unsetBizDynamic();
        } else {
          setBizDynamic((BizDynamic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_DYNAMIC:
        return getBizDynamic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_DYNAMIC:
        return isSetBizDynamic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBizDynamicByLastId_args)
        return this.equals((delBizDynamicByLastId_args)that);
      return false;
    }

    public boolean equals(delBizDynamicByLastId_args that) {
      if (that == null)
        return false;

      boolean this_present_bizDynamic = true && this.isSetBizDynamic();
      boolean that_present_bizDynamic = true && that.isSetBizDynamic();
      if (this_present_bizDynamic || that_present_bizDynamic) {
        if (!(this_present_bizDynamic && that_present_bizDynamic))
          return false;
        if (!this.bizDynamic.equals(that.bizDynamic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizDynamic = true && (isSetBizDynamic());
      list.add(present_bizDynamic);
      if (present_bizDynamic)
        list.add(bizDynamic);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBizDynamicByLastId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizDynamic()).compareTo(other.isSetBizDynamic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizDynamic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizDynamic, other.bizDynamic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBizDynamicByLastId_args(");
      boolean first = true;

      sb.append("bizDynamic:");
      if (this.bizDynamic == null) {
        sb.append("null");
      } else {
        sb.append(this.bizDynamic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizDynamic != null) {
        bizDynamic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBizDynamicByLastId_argsStandardSchemeFactory implements SchemeFactory {
      public delBizDynamicByLastId_argsStandardScheme getScheme() {
        return new delBizDynamicByLastId_argsStandardScheme();
      }
    }

    private static class delBizDynamicByLastId_argsStandardScheme extends StandardScheme<delBizDynamicByLastId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBizDynamicByLastId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_DYNAMIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizDynamic = new BizDynamic();
                struct.bizDynamic.read(iprot);
                struct.setBizDynamicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBizDynamicByLastId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizDynamic != null) {
          oprot.writeFieldBegin(BIZ_DYNAMIC_FIELD_DESC);
          struct.bizDynamic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBizDynamicByLastId_argsTupleSchemeFactory implements SchemeFactory {
      public delBizDynamicByLastId_argsTupleScheme getScheme() {
        return new delBizDynamicByLastId_argsTupleScheme();
      }
    }

    private static class delBizDynamicByLastId_argsTupleScheme extends TupleScheme<delBizDynamicByLastId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBizDynamicByLastId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizDynamic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizDynamic()) {
          struct.bizDynamic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBizDynamicByLastId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizDynamic = new BizDynamic();
          struct.bizDynamic.read(iprot);
          struct.setBizDynamicIsSet(true);
        }
      }
    }

  }

  public static class delBizDynamicByLastId_result implements org.apache.thrift.TBase<delBizDynamicByLastId_result, delBizDynamicByLastId_result._Fields>, java.io.Serializable, Cloneable, Comparable<delBizDynamicByLastId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delBizDynamicByLastId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delBizDynamicByLastId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delBizDynamicByLastId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delBizDynamicByLastId_result.class, metaDataMap);
    }

    public delBizDynamicByLastId_result() {
    }

    public delBizDynamicByLastId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delBizDynamicByLastId_result(delBizDynamicByLastId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public delBizDynamicByLastId_result deepCopy() {
      return new delBizDynamicByLastId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public delBizDynamicByLastId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delBizDynamicByLastId_result)
        return this.equals((delBizDynamicByLastId_result)that);
      return false;
    }

    public boolean equals(delBizDynamicByLastId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delBizDynamicByLastId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delBizDynamicByLastId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delBizDynamicByLastId_resultStandardSchemeFactory implements SchemeFactory {
      public delBizDynamicByLastId_resultStandardScheme getScheme() {
        return new delBizDynamicByLastId_resultStandardScheme();
      }
    }

    private static class delBizDynamicByLastId_resultStandardScheme extends StandardScheme<delBizDynamicByLastId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delBizDynamicByLastId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delBizDynamicByLastId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delBizDynamicByLastId_resultTupleSchemeFactory implements SchemeFactory {
      public delBizDynamicByLastId_resultTupleScheme getScheme() {
        return new delBizDynamicByLastId_resultTupleScheme();
      }
    }

    private static class delBizDynamicByLastId_resultTupleScheme extends TupleScheme<delBizDynamicByLastId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delBizDynamicByLastId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delBizDynamicByLastId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

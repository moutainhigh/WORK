/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class LoanOutputInfoImplDTO implements org.apache.thrift.TBase<LoanOutputInfoImplDTO, LoanOutputInfoImplDTO._Fields>, java.io.Serializable, Cloneable, Comparable<LoanOutputInfoImplDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanOutputInfoImplDTO");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SHOULD_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DIF_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("difAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SHOULD_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycleDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OUTPUT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("outputDesc", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("bank", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField BANK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNum", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField BANK_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankUserName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BRANCH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("branchName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ACC_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("accArea", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ACC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField BANK_ACC_CATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccCate", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accType", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField FT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftType", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField TENDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tenderType", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField FT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField FT_BANK_ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ftBankAcctId", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField FT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ftUserId", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField LOAN_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanCardId", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField CREDIT_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("creditEndDate", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField CREATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createUser", org.apache.thrift.protocol.TType.STRING, (short)36);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanOutputInfoImplDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanOutputInfoImplDTOTupleSchemeFactory());
  }

  public int pId; // required
  public int loanId; // required
  public int projectType; // required
  public double creditAmt; // required
  public double shouldAmt; // required
  public double difAmt; // required
  public String shouldDate; // required
  public String repayCycle; // required
  public String ftDate; // required
  public String repayCycleDate; // required
  public String outputDesc; // required
  public long bank; // required
  public String bankNum; // required
  public String bankUserName; // required
  public String bankName; // required
  public String branchName; // required
  public String accArea; // required
  public String accName; // required
  public int bankAccCate; // required
  public int accType; // required
  public int refId; // required
  public int status; // required
  public int ftType; // required
  public int tenderType; // required
  public double ftAmt; // required
  public String ftBankAcctId; // required
  public int ftUserId; // required
  public String loanCardId; // required
  public String remark; // required
  public String planOutLoanDt; // required
  public String planRepayLoanDt; // required
  public String creditEndDate; // required
  public String createDate; // required
  public String createUser; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    LOAN_ID((short)2, "loanId"),
    PROJECT_TYPE((short)3, "projectType"),
    CREDIT_AMT((short)4, "creditAmt"),
    SHOULD_AMT((short)5, "shouldAmt"),
    DIF_AMT((short)6, "difAmt"),
    SHOULD_DATE((short)7, "shouldDate"),
    REPAY_CYCLE((short)8, "repayCycle"),
    FT_DATE((short)9, "ftDate"),
    REPAY_CYCLE_DATE((short)10, "repayCycleDate"),
    OUTPUT_DESC((short)13, "outputDesc"),
    BANK((short)14, "bank"),
    BANK_NUM((short)15, "bankNum"),
    BANK_USER_NAME((short)16, "bankUserName"),
    BANK_NAME((short)17, "bankName"),
    BRANCH_NAME((short)18, "branchName"),
    ACC_AREA((short)19, "accArea"),
    ACC_NAME((short)20, "accName"),
    BANK_ACC_CATE((short)21, "bankAccCate"),
    ACC_TYPE((short)22, "accType"),
    REF_ID((short)23, "refId"),
    STATUS((short)24, "status"),
    FT_TYPE((short)25, "ftType"),
    TENDER_TYPE((short)26, "tenderType"),
    FT_AMT((short)27, "ftAmt"),
    FT_BANK_ACCT_ID((short)28, "ftBankAcctId"),
    FT_USER_ID((short)29, "ftUserId"),
    LOAN_CARD_ID((short)30, "loanCardId"),
    REMARK((short)31, "remark"),
    PLAN_OUT_LOAN_DT((short)32, "planOutLoanDt"),
    PLAN_REPAY_LOAN_DT((short)33, "planRepayLoanDt"),
    CREDIT_END_DATE((short)34, "creditEndDate"),
    CREATE_DATE((short)35, "createDate"),
    CREATE_USER((short)36, "createUser");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // PROJECT_TYPE
          return PROJECT_TYPE;
        case 4: // CREDIT_AMT
          return CREDIT_AMT;
        case 5: // SHOULD_AMT
          return SHOULD_AMT;
        case 6: // DIF_AMT
          return DIF_AMT;
        case 7: // SHOULD_DATE
          return SHOULD_DATE;
        case 8: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 9: // FT_DATE
          return FT_DATE;
        case 10: // REPAY_CYCLE_DATE
          return REPAY_CYCLE_DATE;
        case 13: // OUTPUT_DESC
          return OUTPUT_DESC;
        case 14: // BANK
          return BANK;
        case 15: // BANK_NUM
          return BANK_NUM;
        case 16: // BANK_USER_NAME
          return BANK_USER_NAME;
        case 17: // BANK_NAME
          return BANK_NAME;
        case 18: // BRANCH_NAME
          return BRANCH_NAME;
        case 19: // ACC_AREA
          return ACC_AREA;
        case 20: // ACC_NAME
          return ACC_NAME;
        case 21: // BANK_ACC_CATE
          return BANK_ACC_CATE;
        case 22: // ACC_TYPE
          return ACC_TYPE;
        case 23: // REF_ID
          return REF_ID;
        case 24: // STATUS
          return STATUS;
        case 25: // FT_TYPE
          return FT_TYPE;
        case 26: // TENDER_TYPE
          return TENDER_TYPE;
        case 27: // FT_AMT
          return FT_AMT;
        case 28: // FT_BANK_ACCT_ID
          return FT_BANK_ACCT_ID;
        case 29: // FT_USER_ID
          return FT_USER_ID;
        case 30: // LOAN_CARD_ID
          return LOAN_CARD_ID;
        case 31: // REMARK
          return REMARK;
        case 32: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 33: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 34: // CREDIT_END_DATE
          return CREDIT_END_DATE;
        case 35: // CREATE_DATE
          return CREATE_DATE;
        case 36: // CREATE_USER
          return CREATE_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __PROJECTTYPE_ISSET_ID = 2;
  private static final int __CREDITAMT_ISSET_ID = 3;
  private static final int __SHOULDAMT_ISSET_ID = 4;
  private static final int __DIFAMT_ISSET_ID = 5;
  private static final int __BANK_ISSET_ID = 6;
  private static final int __BANKACCCATE_ISSET_ID = 7;
  private static final int __ACCTYPE_ISSET_ID = 8;
  private static final int __REFID_ISSET_ID = 9;
  private static final int __STATUS_ISSET_ID = 10;
  private static final int __FTTYPE_ISSET_ID = 11;
  private static final int __TENDERTYPE_ISSET_ID = 12;
  private static final int __FTAMT_ISSET_ID = 13;
  private static final int __FTUSERID_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_AMT, new org.apache.thrift.meta_data.FieldMetaData("shouldAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIF_AMT, new org.apache.thrift.meta_data.FieldMetaData("difAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_DATE, new org.apache.thrift.meta_data.FieldMetaData("shouldDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_DATE, new org.apache.thrift.meta_data.FieldMetaData("ftDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_CYCLE_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayCycleDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTPUT_DESC, new org.apache.thrift.meta_data.FieldMetaData("outputDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK, new org.apache.thrift.meta_data.FieldMetaData("bank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BANK_NUM, new org.apache.thrift.meta_data.FieldMetaData("bankNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRANCH_NAME, new org.apache.thrift.meta_data.FieldMetaData("branchName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_AREA, new org.apache.thrift.meta_data.FieldMetaData("accArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_NAME, new org.apache.thrift.meta_data.FieldMetaData("accName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_ACC_CATE, new org.apache.thrift.meta_data.FieldMetaData("bankAccCate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TENDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tenderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_AMT, new org.apache.thrift.meta_data.FieldMetaData("ftAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FT_BANK_ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("ftBankAcctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("ftUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("loanCardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("creditEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_USER, new org.apache.thrift.meta_data.FieldMetaData("createUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanOutputInfoImplDTO.class, metaDataMap);
  }

  public LoanOutputInfoImplDTO() {
  }

  public LoanOutputInfoImplDTO(
    int pId,
    int loanId,
    int projectType,
    double creditAmt,
    double shouldAmt,
    double difAmt,
    String shouldDate,
    String repayCycle,
    String ftDate,
    String repayCycleDate,
    String outputDesc,
    long bank,
    String bankNum,
    String bankUserName,
    String bankName,
    String branchName,
    String accArea,
    String accName,
    int bankAccCate,
    int accType,
    int refId,
    int status,
    int ftType,
    int tenderType,
    double ftAmt,
    String ftBankAcctId,
    int ftUserId,
    String loanCardId,
    String remark,
    String planOutLoanDt,
    String planRepayLoanDt,
    String creditEndDate,
    String createDate,
    String createUser)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.shouldAmt = shouldAmt;
    setShouldAmtIsSet(true);
    this.difAmt = difAmt;
    setDifAmtIsSet(true);
    this.shouldDate = shouldDate;
    this.repayCycle = repayCycle;
    this.ftDate = ftDate;
    this.repayCycleDate = repayCycleDate;
    this.outputDesc = outputDesc;
    this.bank = bank;
    setBankIsSet(true);
    this.bankNum = bankNum;
    this.bankUserName = bankUserName;
    this.bankName = bankName;
    this.branchName = branchName;
    this.accArea = accArea;
    this.accName = accName;
    this.bankAccCate = bankAccCate;
    setBankAccCateIsSet(true);
    this.accType = accType;
    setAccTypeIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.ftType = ftType;
    setFtTypeIsSet(true);
    this.tenderType = tenderType;
    setTenderTypeIsSet(true);
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    this.ftBankAcctId = ftBankAcctId;
    this.ftUserId = ftUserId;
    setFtUserIdIsSet(true);
    this.loanCardId = loanCardId;
    this.remark = remark;
    this.planOutLoanDt = planOutLoanDt;
    this.planRepayLoanDt = planRepayLoanDt;
    this.creditEndDate = creditEndDate;
    this.createDate = createDate;
    this.createUser = createUser;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanOutputInfoImplDTO(LoanOutputInfoImplDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    this.loanId = other.loanId;
    this.projectType = other.projectType;
    this.creditAmt = other.creditAmt;
    this.shouldAmt = other.shouldAmt;
    this.difAmt = other.difAmt;
    if (other.isSetShouldDate()) {
      this.shouldDate = other.shouldDate;
    }
    if (other.isSetRepayCycle()) {
      this.repayCycle = other.repayCycle;
    }
    if (other.isSetFtDate()) {
      this.ftDate = other.ftDate;
    }
    if (other.isSetRepayCycleDate()) {
      this.repayCycleDate = other.repayCycleDate;
    }
    if (other.isSetOutputDesc()) {
      this.outputDesc = other.outputDesc;
    }
    this.bank = other.bank;
    if (other.isSetBankNum()) {
      this.bankNum = other.bankNum;
    }
    if (other.isSetBankUserName()) {
      this.bankUserName = other.bankUserName;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetBranchName()) {
      this.branchName = other.branchName;
    }
    if (other.isSetAccArea()) {
      this.accArea = other.accArea;
    }
    if (other.isSetAccName()) {
      this.accName = other.accName;
    }
    this.bankAccCate = other.bankAccCate;
    this.accType = other.accType;
    this.refId = other.refId;
    this.status = other.status;
    this.ftType = other.ftType;
    this.tenderType = other.tenderType;
    this.ftAmt = other.ftAmt;
    if (other.isSetFtBankAcctId()) {
      this.ftBankAcctId = other.ftBankAcctId;
    }
    this.ftUserId = other.ftUserId;
    if (other.isSetLoanCardId()) {
      this.loanCardId = other.loanCardId;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    if (other.isSetCreditEndDate()) {
      this.creditEndDate = other.creditEndDate;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetCreateUser()) {
      this.createUser = other.createUser;
    }
  }

  public LoanOutputInfoImplDTO deepCopy() {
    return new LoanOutputInfoImplDTO(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setShouldAmtIsSet(false);
    this.shouldAmt = 0.0;
    setDifAmtIsSet(false);
    this.difAmt = 0.0;
    this.shouldDate = null;
    this.repayCycle = null;
    this.ftDate = null;
    this.repayCycleDate = null;
    this.outputDesc = null;
    setBankIsSet(false);
    this.bank = 0;
    this.bankNum = null;
    this.bankUserName = null;
    this.bankName = null;
    this.branchName = null;
    this.accArea = null;
    this.accName = null;
    setBankAccCateIsSet(false);
    this.bankAccCate = 0;
    setAccTypeIsSet(false);
    this.accType = 0;
    setRefIdIsSet(false);
    this.refId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setFtTypeIsSet(false);
    this.ftType = 0;
    setTenderTypeIsSet(false);
    this.tenderType = 0;
    setFtAmtIsSet(false);
    this.ftAmt = 0.0;
    this.ftBankAcctId = null;
    setFtUserIdIsSet(false);
    this.ftUserId = 0;
    this.loanCardId = null;
    this.remark = null;
    this.planOutLoanDt = null;
    this.planRepayLoanDt = null;
    this.creditEndDate = null;
    this.createDate = null;
    this.createUser = null;
  }

  public int getPId() {
    return this.pId;
  }

  public LoanOutputInfoImplDTO setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public LoanOutputInfoImplDTO setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public LoanOutputInfoImplDTO setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public LoanOutputInfoImplDTO setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getShouldAmt() {
    return this.shouldAmt;
  }

  public LoanOutputInfoImplDTO setShouldAmt(double shouldAmt) {
    this.shouldAmt = shouldAmt;
    setShouldAmtIsSet(true);
    return this;
  }

  public void unsetShouldAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDAMT_ISSET_ID);
  }

  /** Returns true if field shouldAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDAMT_ISSET_ID);
  }

  public void setShouldAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDAMT_ISSET_ID, value);
  }

  public double getDifAmt() {
    return this.difAmt;
  }

  public LoanOutputInfoImplDTO setDifAmt(double difAmt) {
    this.difAmt = difAmt;
    setDifAmtIsSet(true);
    return this;
  }

  public void unsetDifAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFAMT_ISSET_ID);
  }

  /** Returns true if field difAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDifAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFAMT_ISSET_ID);
  }

  public void setDifAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFAMT_ISSET_ID, value);
  }

  public String getShouldDate() {
    return this.shouldDate;
  }

  public LoanOutputInfoImplDTO setShouldDate(String shouldDate) {
    this.shouldDate = shouldDate;
    return this;
  }

  public void unsetShouldDate() {
    this.shouldDate = null;
  }

  /** Returns true if field shouldDate is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldDate() {
    return this.shouldDate != null;
  }

  public void setShouldDateIsSet(boolean value) {
    if (!value) {
      this.shouldDate = null;
    }
  }

  public String getRepayCycle() {
    return this.repayCycle;
  }

  public LoanOutputInfoImplDTO setRepayCycle(String repayCycle) {
    this.repayCycle = repayCycle;
    return this;
  }

  public void unsetRepayCycle() {
    this.repayCycle = null;
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return this.repayCycle != null;
  }

  public void setRepayCycleIsSet(boolean value) {
    if (!value) {
      this.repayCycle = null;
    }
  }

  public String getFtDate() {
    return this.ftDate;
  }

  public LoanOutputInfoImplDTO setFtDate(String ftDate) {
    this.ftDate = ftDate;
    return this;
  }

  public void unsetFtDate() {
    this.ftDate = null;
  }

  /** Returns true if field ftDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFtDate() {
    return this.ftDate != null;
  }

  public void setFtDateIsSet(boolean value) {
    if (!value) {
      this.ftDate = null;
    }
  }

  public String getRepayCycleDate() {
    return this.repayCycleDate;
  }

  public LoanOutputInfoImplDTO setRepayCycleDate(String repayCycleDate) {
    this.repayCycleDate = repayCycleDate;
    return this;
  }

  public void unsetRepayCycleDate() {
    this.repayCycleDate = null;
  }

  /** Returns true if field repayCycleDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycleDate() {
    return this.repayCycleDate != null;
  }

  public void setRepayCycleDateIsSet(boolean value) {
    if (!value) {
      this.repayCycleDate = null;
    }
  }

  public String getOutputDesc() {
    return this.outputDesc;
  }

  public LoanOutputInfoImplDTO setOutputDesc(String outputDesc) {
    this.outputDesc = outputDesc;
    return this;
  }

  public void unsetOutputDesc() {
    this.outputDesc = null;
  }

  /** Returns true if field outputDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputDesc() {
    return this.outputDesc != null;
  }

  public void setOutputDescIsSet(boolean value) {
    if (!value) {
      this.outputDesc = null;
    }
  }

  public long getBank() {
    return this.bank;
  }

  public LoanOutputInfoImplDTO setBank(long bank) {
    this.bank = bank;
    setBankIsSet(true);
    return this;
  }

  public void unsetBank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANK_ISSET_ID);
  }

  /** Returns true if field bank is set (has been assigned a value) and false otherwise */
  public boolean isSetBank() {
    return EncodingUtils.testBit(__isset_bitfield, __BANK_ISSET_ID);
  }

  public void setBankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANK_ISSET_ID, value);
  }

  public String getBankNum() {
    return this.bankNum;
  }

  public LoanOutputInfoImplDTO setBankNum(String bankNum) {
    this.bankNum = bankNum;
    return this;
  }

  public void unsetBankNum() {
    this.bankNum = null;
  }

  /** Returns true if field bankNum is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNum() {
    return this.bankNum != null;
  }

  public void setBankNumIsSet(boolean value) {
    if (!value) {
      this.bankNum = null;
    }
  }

  public String getBankUserName() {
    return this.bankUserName;
  }

  public LoanOutputInfoImplDTO setBankUserName(String bankUserName) {
    this.bankUserName = bankUserName;
    return this;
  }

  public void unsetBankUserName() {
    this.bankUserName = null;
  }

  /** Returns true if field bankUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankUserName() {
    return this.bankUserName != null;
  }

  public void setBankUserNameIsSet(boolean value) {
    if (!value) {
      this.bankUserName = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public LoanOutputInfoImplDTO setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getBranchName() {
    return this.branchName;
  }

  public LoanOutputInfoImplDTO setBranchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

  public void unsetBranchName() {
    this.branchName = null;
  }

  /** Returns true if field branchName is set (has been assigned a value) and false otherwise */
  public boolean isSetBranchName() {
    return this.branchName != null;
  }

  public void setBranchNameIsSet(boolean value) {
    if (!value) {
      this.branchName = null;
    }
  }

  public String getAccArea() {
    return this.accArea;
  }

  public LoanOutputInfoImplDTO setAccArea(String accArea) {
    this.accArea = accArea;
    return this;
  }

  public void unsetAccArea() {
    this.accArea = null;
  }

  /** Returns true if field accArea is set (has been assigned a value) and false otherwise */
  public boolean isSetAccArea() {
    return this.accArea != null;
  }

  public void setAccAreaIsSet(boolean value) {
    if (!value) {
      this.accArea = null;
    }
  }

  public String getAccName() {
    return this.accName;
  }

  public LoanOutputInfoImplDTO setAccName(String accName) {
    this.accName = accName;
    return this;
  }

  public void unsetAccName() {
    this.accName = null;
  }

  /** Returns true if field accName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccName() {
    return this.accName != null;
  }

  public void setAccNameIsSet(boolean value) {
    if (!value) {
      this.accName = null;
    }
  }

  public int getBankAccCate() {
    return this.bankAccCate;
  }

  public LoanOutputInfoImplDTO setBankAccCate(int bankAccCate) {
    this.bankAccCate = bankAccCate;
    setBankAccCateIsSet(true);
    return this;
  }

  public void unsetBankAccCate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKACCCATE_ISSET_ID);
  }

  /** Returns true if field bankAccCate is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccCate() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKACCCATE_ISSET_ID);
  }

  public void setBankAccCateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKACCCATE_ISSET_ID, value);
  }

  public int getAccType() {
    return this.accType;
  }

  public LoanOutputInfoImplDTO setAccType(int accType) {
    this.accType = accType;
    setAccTypeIsSet(true);
    return this;
  }

  public void unsetAccType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTYPE_ISSET_ID);
  }

  /** Returns true if field accType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTYPE_ISSET_ID);
  }

  public void setAccTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTYPE_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public LoanOutputInfoImplDTO setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public LoanOutputInfoImplDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getFtType() {
    return this.ftType;
  }

  public LoanOutputInfoImplDTO setFtType(int ftType) {
    this.ftType = ftType;
    setFtTypeIsSet(true);
    return this;
  }

  public void unsetFtType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTTYPE_ISSET_ID);
  }

  /** Returns true if field ftType is set (has been assigned a value) and false otherwise */
  public boolean isSetFtType() {
    return EncodingUtils.testBit(__isset_bitfield, __FTTYPE_ISSET_ID);
  }

  public void setFtTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTTYPE_ISSET_ID, value);
  }

  public int getTenderType() {
    return this.tenderType;
  }

  public LoanOutputInfoImplDTO setTenderType(int tenderType) {
    this.tenderType = tenderType;
    setTenderTypeIsSet(true);
    return this;
  }

  public void unsetTenderType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TENDERTYPE_ISSET_ID);
  }

  /** Returns true if field tenderType is set (has been assigned a value) and false otherwise */
  public boolean isSetTenderType() {
    return EncodingUtils.testBit(__isset_bitfield, __TENDERTYPE_ISSET_ID);
  }

  public void setTenderTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TENDERTYPE_ISSET_ID, value);
  }

  public double getFtAmt() {
    return this.ftAmt;
  }

  public LoanOutputInfoImplDTO setFtAmt(double ftAmt) {
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    return this;
  }

  public void unsetFtAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  /** Returns true if field ftAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  public void setFtAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTAMT_ISSET_ID, value);
  }

  public String getFtBankAcctId() {
    return this.ftBankAcctId;
  }

  public LoanOutputInfoImplDTO setFtBankAcctId(String ftBankAcctId) {
    this.ftBankAcctId = ftBankAcctId;
    return this;
  }

  public void unsetFtBankAcctId() {
    this.ftBankAcctId = null;
  }

  /** Returns true if field ftBankAcctId is set (has been assigned a value) and false otherwise */
  public boolean isSetFtBankAcctId() {
    return this.ftBankAcctId != null;
  }

  public void setFtBankAcctIdIsSet(boolean value) {
    if (!value) {
      this.ftBankAcctId = null;
    }
  }

  public int getFtUserId() {
    return this.ftUserId;
  }

  public LoanOutputInfoImplDTO setFtUserId(int ftUserId) {
    this.ftUserId = ftUserId;
    setFtUserIdIsSet(true);
    return this;
  }

  public void unsetFtUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTUSERID_ISSET_ID);
  }

  /** Returns true if field ftUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetFtUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __FTUSERID_ISSET_ID);
  }

  public void setFtUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTUSERID_ISSET_ID, value);
  }

  public String getLoanCardId() {
    return this.loanCardId;
  }

  public LoanOutputInfoImplDTO setLoanCardId(String loanCardId) {
    this.loanCardId = loanCardId;
    return this;
  }

  public void unsetLoanCardId() {
    this.loanCardId = null;
  }

  /** Returns true if field loanCardId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanCardId() {
    return this.loanCardId != null;
  }

  public void setLoanCardIdIsSet(boolean value) {
    if (!value) {
      this.loanCardId = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public LoanOutputInfoImplDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public LoanOutputInfoImplDTO setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public LoanOutputInfoImplDTO setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public String getCreditEndDate() {
    return this.creditEndDate;
  }

  public LoanOutputInfoImplDTO setCreditEndDate(String creditEndDate) {
    this.creditEndDate = creditEndDate;
    return this;
  }

  public void unsetCreditEndDate() {
    this.creditEndDate = null;
  }

  /** Returns true if field creditEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditEndDate() {
    return this.creditEndDate != null;
  }

  public void setCreditEndDateIsSet(boolean value) {
    if (!value) {
      this.creditEndDate = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public LoanOutputInfoImplDTO setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getCreateUser() {
    return this.createUser;
  }

  public LoanOutputInfoImplDTO setCreateUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

  public void unsetCreateUser() {
    this.createUser = null;
  }

  /** Returns true if field createUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUser() {
    return this.createUser != null;
  }

  public void setCreateUserIsSet(boolean value) {
    if (!value) {
      this.createUser = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case SHOULD_AMT:
      if (value == null) {
        unsetShouldAmt();
      } else {
        setShouldAmt((Double)value);
      }
      break;

    case DIF_AMT:
      if (value == null) {
        unsetDifAmt();
      } else {
        setDifAmt((Double)value);
      }
      break;

    case SHOULD_DATE:
      if (value == null) {
        unsetShouldDate();
      } else {
        setShouldDate((String)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((String)value);
      }
      break;

    case FT_DATE:
      if (value == null) {
        unsetFtDate();
      } else {
        setFtDate((String)value);
      }
      break;

    case REPAY_CYCLE_DATE:
      if (value == null) {
        unsetRepayCycleDate();
      } else {
        setRepayCycleDate((String)value);
      }
      break;

    case OUTPUT_DESC:
      if (value == null) {
        unsetOutputDesc();
      } else {
        setOutputDesc((String)value);
      }
      break;

    case BANK:
      if (value == null) {
        unsetBank();
      } else {
        setBank((Long)value);
      }
      break;

    case BANK_NUM:
      if (value == null) {
        unsetBankNum();
      } else {
        setBankNum((String)value);
      }
      break;

    case BANK_USER_NAME:
      if (value == null) {
        unsetBankUserName();
      } else {
        setBankUserName((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BRANCH_NAME:
      if (value == null) {
        unsetBranchName();
      } else {
        setBranchName((String)value);
      }
      break;

    case ACC_AREA:
      if (value == null) {
        unsetAccArea();
      } else {
        setAccArea((String)value);
      }
      break;

    case ACC_NAME:
      if (value == null) {
        unsetAccName();
      } else {
        setAccName((String)value);
      }
      break;

    case BANK_ACC_CATE:
      if (value == null) {
        unsetBankAccCate();
      } else {
        setBankAccCate((Integer)value);
      }
      break;

    case ACC_TYPE:
      if (value == null) {
        unsetAccType();
      } else {
        setAccType((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case FT_TYPE:
      if (value == null) {
        unsetFtType();
      } else {
        setFtType((Integer)value);
      }
      break;

    case TENDER_TYPE:
      if (value == null) {
        unsetTenderType();
      } else {
        setTenderType((Integer)value);
      }
      break;

    case FT_AMT:
      if (value == null) {
        unsetFtAmt();
      } else {
        setFtAmt((Double)value);
      }
      break;

    case FT_BANK_ACCT_ID:
      if (value == null) {
        unsetFtBankAcctId();
      } else {
        setFtBankAcctId((String)value);
      }
      break;

    case FT_USER_ID:
      if (value == null) {
        unsetFtUserId();
      } else {
        setFtUserId((Integer)value);
      }
      break;

    case LOAN_CARD_ID:
      if (value == null) {
        unsetLoanCardId();
      } else {
        setLoanCardId((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case CREDIT_END_DATE:
      if (value == null) {
        unsetCreditEndDate();
      } else {
        setCreditEndDate((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATE_USER:
      if (value == null) {
        unsetCreateUser();
      } else {
        setCreateUser((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case SHOULD_AMT:
      return Double.valueOf(getShouldAmt());

    case DIF_AMT:
      return Double.valueOf(getDifAmt());

    case SHOULD_DATE:
      return getShouldDate();

    case REPAY_CYCLE:
      return getRepayCycle();

    case FT_DATE:
      return getFtDate();

    case REPAY_CYCLE_DATE:
      return getRepayCycleDate();

    case OUTPUT_DESC:
      return getOutputDesc();

    case BANK:
      return Long.valueOf(getBank());

    case BANK_NUM:
      return getBankNum();

    case BANK_USER_NAME:
      return getBankUserName();

    case BANK_NAME:
      return getBankName();

    case BRANCH_NAME:
      return getBranchName();

    case ACC_AREA:
      return getAccArea();

    case ACC_NAME:
      return getAccName();

    case BANK_ACC_CATE:
      return Integer.valueOf(getBankAccCate());

    case ACC_TYPE:
      return Integer.valueOf(getAccType());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case FT_TYPE:
      return Integer.valueOf(getFtType());

    case TENDER_TYPE:
      return Integer.valueOf(getTenderType());

    case FT_AMT:
      return Double.valueOf(getFtAmt());

    case FT_BANK_ACCT_ID:
      return getFtBankAcctId();

    case FT_USER_ID:
      return Integer.valueOf(getFtUserId());

    case LOAN_CARD_ID:
      return getLoanCardId();

    case REMARK:
      return getRemark();

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case CREDIT_END_DATE:
      return getCreditEndDate();

    case CREATE_DATE:
      return getCreateDate();

    case CREATE_USER:
      return getCreateUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_TYPE:
      return isSetProjectType();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case SHOULD_AMT:
      return isSetShouldAmt();
    case DIF_AMT:
      return isSetDifAmt();
    case SHOULD_DATE:
      return isSetShouldDate();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case FT_DATE:
      return isSetFtDate();
    case REPAY_CYCLE_DATE:
      return isSetRepayCycleDate();
    case OUTPUT_DESC:
      return isSetOutputDesc();
    case BANK:
      return isSetBank();
    case BANK_NUM:
      return isSetBankNum();
    case BANK_USER_NAME:
      return isSetBankUserName();
    case BANK_NAME:
      return isSetBankName();
    case BRANCH_NAME:
      return isSetBranchName();
    case ACC_AREA:
      return isSetAccArea();
    case ACC_NAME:
      return isSetAccName();
    case BANK_ACC_CATE:
      return isSetBankAccCate();
    case ACC_TYPE:
      return isSetAccType();
    case REF_ID:
      return isSetRefId();
    case STATUS:
      return isSetStatus();
    case FT_TYPE:
      return isSetFtType();
    case TENDER_TYPE:
      return isSetTenderType();
    case FT_AMT:
      return isSetFtAmt();
    case FT_BANK_ACCT_ID:
      return isSetFtBankAcctId();
    case FT_USER_ID:
      return isSetFtUserId();
    case LOAN_CARD_ID:
      return isSetLoanCardId();
    case REMARK:
      return isSetRemark();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case CREDIT_END_DATE:
      return isSetCreditEndDate();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATE_USER:
      return isSetCreateUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanOutputInfoImplDTO)
      return this.equals((LoanOutputInfoImplDTO)that);
    return false;
  }

  public boolean equals(LoanOutputInfoImplDTO that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_shouldAmt = true;
    boolean that_present_shouldAmt = true;
    if (this_present_shouldAmt || that_present_shouldAmt) {
      if (!(this_present_shouldAmt && that_present_shouldAmt))
        return false;
      if (this.shouldAmt != that.shouldAmt)
        return false;
    }

    boolean this_present_difAmt = true;
    boolean that_present_difAmt = true;
    if (this_present_difAmt || that_present_difAmt) {
      if (!(this_present_difAmt && that_present_difAmt))
        return false;
      if (this.difAmt != that.difAmt)
        return false;
    }

    boolean this_present_shouldDate = true && this.isSetShouldDate();
    boolean that_present_shouldDate = true && that.isSetShouldDate();
    if (this_present_shouldDate || that_present_shouldDate) {
      if (!(this_present_shouldDate && that_present_shouldDate))
        return false;
      if (!this.shouldDate.equals(that.shouldDate))
        return false;
    }

    boolean this_present_repayCycle = true && this.isSetRepayCycle();
    boolean that_present_repayCycle = true && that.isSetRepayCycle();
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (!this.repayCycle.equals(that.repayCycle))
        return false;
    }

    boolean this_present_ftDate = true && this.isSetFtDate();
    boolean that_present_ftDate = true && that.isSetFtDate();
    if (this_present_ftDate || that_present_ftDate) {
      if (!(this_present_ftDate && that_present_ftDate))
        return false;
      if (!this.ftDate.equals(that.ftDate))
        return false;
    }

    boolean this_present_repayCycleDate = true && this.isSetRepayCycleDate();
    boolean that_present_repayCycleDate = true && that.isSetRepayCycleDate();
    if (this_present_repayCycleDate || that_present_repayCycleDate) {
      if (!(this_present_repayCycleDate && that_present_repayCycleDate))
        return false;
      if (!this.repayCycleDate.equals(that.repayCycleDate))
        return false;
    }

    boolean this_present_outputDesc = true && this.isSetOutputDesc();
    boolean that_present_outputDesc = true && that.isSetOutputDesc();
    if (this_present_outputDesc || that_present_outputDesc) {
      if (!(this_present_outputDesc && that_present_outputDesc))
        return false;
      if (!this.outputDesc.equals(that.outputDesc))
        return false;
    }

    boolean this_present_bank = true;
    boolean that_present_bank = true;
    if (this_present_bank || that_present_bank) {
      if (!(this_present_bank && that_present_bank))
        return false;
      if (this.bank != that.bank)
        return false;
    }

    boolean this_present_bankNum = true && this.isSetBankNum();
    boolean that_present_bankNum = true && that.isSetBankNum();
    if (this_present_bankNum || that_present_bankNum) {
      if (!(this_present_bankNum && that_present_bankNum))
        return false;
      if (!this.bankNum.equals(that.bankNum))
        return false;
    }

    boolean this_present_bankUserName = true && this.isSetBankUserName();
    boolean that_present_bankUserName = true && that.isSetBankUserName();
    if (this_present_bankUserName || that_present_bankUserName) {
      if (!(this_present_bankUserName && that_present_bankUserName))
        return false;
      if (!this.bankUserName.equals(that.bankUserName))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_branchName = true && this.isSetBranchName();
    boolean that_present_branchName = true && that.isSetBranchName();
    if (this_present_branchName || that_present_branchName) {
      if (!(this_present_branchName && that_present_branchName))
        return false;
      if (!this.branchName.equals(that.branchName))
        return false;
    }

    boolean this_present_accArea = true && this.isSetAccArea();
    boolean that_present_accArea = true && that.isSetAccArea();
    if (this_present_accArea || that_present_accArea) {
      if (!(this_present_accArea && that_present_accArea))
        return false;
      if (!this.accArea.equals(that.accArea))
        return false;
    }

    boolean this_present_accName = true && this.isSetAccName();
    boolean that_present_accName = true && that.isSetAccName();
    if (this_present_accName || that_present_accName) {
      if (!(this_present_accName && that_present_accName))
        return false;
      if (!this.accName.equals(that.accName))
        return false;
    }

    boolean this_present_bankAccCate = true;
    boolean that_present_bankAccCate = true;
    if (this_present_bankAccCate || that_present_bankAccCate) {
      if (!(this_present_bankAccCate && that_present_bankAccCate))
        return false;
      if (this.bankAccCate != that.bankAccCate)
        return false;
    }

    boolean this_present_accType = true;
    boolean that_present_accType = true;
    if (this_present_accType || that_present_accType) {
      if (!(this_present_accType && that_present_accType))
        return false;
      if (this.accType != that.accType)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_ftType = true;
    boolean that_present_ftType = true;
    if (this_present_ftType || that_present_ftType) {
      if (!(this_present_ftType && that_present_ftType))
        return false;
      if (this.ftType != that.ftType)
        return false;
    }

    boolean this_present_tenderType = true;
    boolean that_present_tenderType = true;
    if (this_present_tenderType || that_present_tenderType) {
      if (!(this_present_tenderType && that_present_tenderType))
        return false;
      if (this.tenderType != that.tenderType)
        return false;
    }

    boolean this_present_ftAmt = true;
    boolean that_present_ftAmt = true;
    if (this_present_ftAmt || that_present_ftAmt) {
      if (!(this_present_ftAmt && that_present_ftAmt))
        return false;
      if (this.ftAmt != that.ftAmt)
        return false;
    }

    boolean this_present_ftBankAcctId = true && this.isSetFtBankAcctId();
    boolean that_present_ftBankAcctId = true && that.isSetFtBankAcctId();
    if (this_present_ftBankAcctId || that_present_ftBankAcctId) {
      if (!(this_present_ftBankAcctId && that_present_ftBankAcctId))
        return false;
      if (!this.ftBankAcctId.equals(that.ftBankAcctId))
        return false;
    }

    boolean this_present_ftUserId = true;
    boolean that_present_ftUserId = true;
    if (this_present_ftUserId || that_present_ftUserId) {
      if (!(this_present_ftUserId && that_present_ftUserId))
        return false;
      if (this.ftUserId != that.ftUserId)
        return false;
    }

    boolean this_present_loanCardId = true && this.isSetLoanCardId();
    boolean that_present_loanCardId = true && that.isSetLoanCardId();
    if (this_present_loanCardId || that_present_loanCardId) {
      if (!(this_present_loanCardId && that_present_loanCardId))
        return false;
      if (!this.loanCardId.equals(that.loanCardId))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_creditEndDate = true && this.isSetCreditEndDate();
    boolean that_present_creditEndDate = true && that.isSetCreditEndDate();
    if (this_present_creditEndDate || that_present_creditEndDate) {
      if (!(this_present_creditEndDate && that_present_creditEndDate))
        return false;
      if (!this.creditEndDate.equals(that.creditEndDate))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createUser = true && this.isSetCreateUser();
    boolean that_present_createUser = true && that.isSetCreateUser();
    if (this_present_createUser || that_present_createUser) {
      if (!(this_present_createUser && that_present_createUser))
        return false;
      if (!this.createUser.equals(that.createUser))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_shouldAmt = true;
    list.add(present_shouldAmt);
    if (present_shouldAmt)
      list.add(shouldAmt);

    boolean present_difAmt = true;
    list.add(present_difAmt);
    if (present_difAmt)
      list.add(difAmt);

    boolean present_shouldDate = true && (isSetShouldDate());
    list.add(present_shouldDate);
    if (present_shouldDate)
      list.add(shouldDate);

    boolean present_repayCycle = true && (isSetRepayCycle());
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_ftDate = true && (isSetFtDate());
    list.add(present_ftDate);
    if (present_ftDate)
      list.add(ftDate);

    boolean present_repayCycleDate = true && (isSetRepayCycleDate());
    list.add(present_repayCycleDate);
    if (present_repayCycleDate)
      list.add(repayCycleDate);

    boolean present_outputDesc = true && (isSetOutputDesc());
    list.add(present_outputDesc);
    if (present_outputDesc)
      list.add(outputDesc);

    boolean present_bank = true;
    list.add(present_bank);
    if (present_bank)
      list.add(bank);

    boolean present_bankNum = true && (isSetBankNum());
    list.add(present_bankNum);
    if (present_bankNum)
      list.add(bankNum);

    boolean present_bankUserName = true && (isSetBankUserName());
    list.add(present_bankUserName);
    if (present_bankUserName)
      list.add(bankUserName);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_branchName = true && (isSetBranchName());
    list.add(present_branchName);
    if (present_branchName)
      list.add(branchName);

    boolean present_accArea = true && (isSetAccArea());
    list.add(present_accArea);
    if (present_accArea)
      list.add(accArea);

    boolean present_accName = true && (isSetAccName());
    list.add(present_accName);
    if (present_accName)
      list.add(accName);

    boolean present_bankAccCate = true;
    list.add(present_bankAccCate);
    if (present_bankAccCate)
      list.add(bankAccCate);

    boolean present_accType = true;
    list.add(present_accType);
    if (present_accType)
      list.add(accType);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_ftType = true;
    list.add(present_ftType);
    if (present_ftType)
      list.add(ftType);

    boolean present_tenderType = true;
    list.add(present_tenderType);
    if (present_tenderType)
      list.add(tenderType);

    boolean present_ftAmt = true;
    list.add(present_ftAmt);
    if (present_ftAmt)
      list.add(ftAmt);

    boolean present_ftBankAcctId = true && (isSetFtBankAcctId());
    list.add(present_ftBankAcctId);
    if (present_ftBankAcctId)
      list.add(ftBankAcctId);

    boolean present_ftUserId = true;
    list.add(present_ftUserId);
    if (present_ftUserId)
      list.add(ftUserId);

    boolean present_loanCardId = true && (isSetLoanCardId());
    list.add(present_loanCardId);
    if (present_loanCardId)
      list.add(loanCardId);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_creditEndDate = true && (isSetCreditEndDate());
    list.add(present_creditEndDate);
    if (present_creditEndDate)
      list.add(creditEndDate);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createUser = true && (isSetCreateUser());
    list.add(present_createUser);
    if (present_createUser)
      list.add(createUser);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanOutputInfoImplDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldAmt()).compareTo(other.isSetShouldAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldAmt, other.shouldAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDifAmt()).compareTo(other.isSetDifAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.difAmt, other.difAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldDate()).compareTo(other.isSetShouldDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldDate, other.shouldDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtDate()).compareTo(other.isSetFtDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftDate, other.ftDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycleDate()).compareTo(other.isSetRepayCycleDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycleDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycleDate, other.repayCycleDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputDesc()).compareTo(other.isSetOutputDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputDesc, other.outputDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBank()).compareTo(other.isSetBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bank, other.bank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNum()).compareTo(other.isSetBankNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNum, other.bankNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankUserName()).compareTo(other.isSetBankUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankUserName, other.bankUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBranchName()).compareTo(other.isSetBranchName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBranchName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branchName, other.branchName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccArea()).compareTo(other.isSetAccArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accArea, other.accArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccName()).compareTo(other.isSetAccName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accName, other.accName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccCate()).compareTo(other.isSetBankAccCate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccCate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccCate, other.bankAccCate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccType()).compareTo(other.isSetAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accType, other.accType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtType()).compareTo(other.isSetFtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftType, other.ftType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTenderType()).compareTo(other.isSetTenderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenderType, other.tenderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtAmt()).compareTo(other.isSetFtAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftAmt, other.ftAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtBankAcctId()).compareTo(other.isSetFtBankAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtBankAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftBankAcctId, other.ftBankAcctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtUserId()).compareTo(other.isSetFtUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftUserId, other.ftUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanCardId()).compareTo(other.isSetLoanCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanCardId, other.loanCardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditEndDate()).compareTo(other.isSetCreditEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditEndDate, other.creditEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUser()).compareTo(other.isSetCreateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUser, other.createUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanOutputInfoImplDTO(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldAmt:");
    sb.append(this.shouldAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("difAmt:");
    sb.append(this.difAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldDate:");
    if (this.shouldDate == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    if (this.repayCycle == null) {
      sb.append("null");
    } else {
      sb.append(this.repayCycle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftDate:");
    if (this.ftDate == null) {
      sb.append("null");
    } else {
      sb.append(this.ftDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycleDate:");
    if (this.repayCycleDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repayCycleDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputDesc:");
    if (this.outputDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.outputDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bank:");
    sb.append(this.bank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNum:");
    if (this.bankNum == null) {
      sb.append("null");
    } else {
      sb.append(this.bankNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankUserName:");
    if (this.bankUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("branchName:");
    if (this.branchName == null) {
      sb.append("null");
    } else {
      sb.append(this.branchName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accArea:");
    if (this.accArea == null) {
      sb.append("null");
    } else {
      sb.append(this.accArea);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accName:");
    if (this.accName == null) {
      sb.append("null");
    } else {
      sb.append(this.accName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccCate:");
    sb.append(this.bankAccCate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accType:");
    sb.append(this.accType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftType:");
    sb.append(this.ftType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenderType:");
    sb.append(this.tenderType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftAmt:");
    sb.append(this.ftAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftBankAcctId:");
    if (this.ftBankAcctId == null) {
      sb.append("null");
    } else {
      sb.append(this.ftBankAcctId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftUserId:");
    sb.append(this.ftUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanCardId:");
    if (this.loanCardId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanCardId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditEndDate:");
    if (this.creditEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.creditEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUser:");
    if (this.createUser == null) {
      sb.append("null");
    } else {
      sb.append(this.createUser);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanOutputInfoImplDTOStandardSchemeFactory implements SchemeFactory {
    public LoanOutputInfoImplDTOStandardScheme getScheme() {
      return new LoanOutputInfoImplDTOStandardScheme();
    }
  }

  private static class LoanOutputInfoImplDTOStandardScheme extends StandardScheme<LoanOutputInfoImplDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanOutputInfoImplDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOULD_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldAmt = iprot.readDouble();
              struct.setShouldAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIF_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.difAmt = iprot.readDouble();
              struct.setDifAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOULD_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldDate = iprot.readString();
              struct.setShouldDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayCycle = iprot.readString();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftDate = iprot.readString();
              struct.setFtDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REPAY_CYCLE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayCycleDate = iprot.readString();
              struct.setRepayCycleDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OUTPUT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputDesc = iprot.readString();
              struct.setOutputDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bank = iprot.readI64();
              struct.setBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BANK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankNum = iprot.readString();
              struct.setBankNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BANK_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankUserName = iprot.readString();
              struct.setBankUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BRANCH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.branchName = iprot.readString();
              struct.setBranchNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ACC_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accArea = iprot.readString();
              struct.setAccAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accName = iprot.readString();
              struct.setAccNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BANK_ACC_CATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankAccCate = iprot.readI32();
              struct.setBankAccCateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accType = iprot.readI32();
              struct.setAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ftType = iprot.readI32();
              struct.setFtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // TENDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tenderType = iprot.readI32();
              struct.setTenderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // FT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ftAmt = iprot.readDouble();
              struct.setFtAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // FT_BANK_ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftBankAcctId = iprot.readString();
              struct.setFtBankAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // FT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ftUserId = iprot.readI32();
              struct.setFtUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // LOAN_CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanCardId = iprot.readString();
              struct.setLoanCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // CREDIT_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creditEndDate = iprot.readString();
              struct.setCreditEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // CREATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createUser = iprot.readString();
              struct.setCreateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanOutputInfoImplDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_AMT_FIELD_DESC);
      oprot.writeDouble(struct.shouldAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIF_AMT_FIELD_DESC);
      oprot.writeDouble(struct.difAmt);
      oprot.writeFieldEnd();
      if (struct.shouldDate != null) {
        oprot.writeFieldBegin(SHOULD_DATE_FIELD_DESC);
        oprot.writeString(struct.shouldDate);
        oprot.writeFieldEnd();
      }
      if (struct.repayCycle != null) {
        oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
        oprot.writeString(struct.repayCycle);
        oprot.writeFieldEnd();
      }
      if (struct.ftDate != null) {
        oprot.writeFieldBegin(FT_DATE_FIELD_DESC);
        oprot.writeString(struct.ftDate);
        oprot.writeFieldEnd();
      }
      if (struct.repayCycleDate != null) {
        oprot.writeFieldBegin(REPAY_CYCLE_DATE_FIELD_DESC);
        oprot.writeString(struct.repayCycleDate);
        oprot.writeFieldEnd();
      }
      if (struct.outputDesc != null) {
        oprot.writeFieldBegin(OUTPUT_DESC_FIELD_DESC);
        oprot.writeString(struct.outputDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_FIELD_DESC);
      oprot.writeI64(struct.bank);
      oprot.writeFieldEnd();
      if (struct.bankNum != null) {
        oprot.writeFieldBegin(BANK_NUM_FIELD_DESC);
        oprot.writeString(struct.bankNum);
        oprot.writeFieldEnd();
      }
      if (struct.bankUserName != null) {
        oprot.writeFieldBegin(BANK_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.bankUserName);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.branchName != null) {
        oprot.writeFieldBegin(BRANCH_NAME_FIELD_DESC);
        oprot.writeString(struct.branchName);
        oprot.writeFieldEnd();
      }
      if (struct.accArea != null) {
        oprot.writeFieldBegin(ACC_AREA_FIELD_DESC);
        oprot.writeString(struct.accArea);
        oprot.writeFieldEnd();
      }
      if (struct.accName != null) {
        oprot.writeFieldBegin(ACC_NAME_FIELD_DESC);
        oprot.writeString(struct.accName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_ACC_CATE_FIELD_DESC);
      oprot.writeI32(struct.bankAccCate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACC_TYPE_FIELD_DESC);
      oprot.writeI32(struct.accType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ftType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TENDER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.tenderType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.ftAmt);
      oprot.writeFieldEnd();
      if (struct.ftBankAcctId != null) {
        oprot.writeFieldBegin(FT_BANK_ACCT_ID_FIELD_DESC);
        oprot.writeString(struct.ftBankAcctId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FT_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.ftUserId);
      oprot.writeFieldEnd();
      if (struct.loanCardId != null) {
        oprot.writeFieldBegin(LOAN_CARD_ID_FIELD_DESC);
        oprot.writeString(struct.loanCardId);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.creditEndDate != null) {
        oprot.writeFieldBegin(CREDIT_END_DATE_FIELD_DESC);
        oprot.writeString(struct.creditEndDate);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.createUser != null) {
        oprot.writeFieldBegin(CREATE_USER_FIELD_DESC);
        oprot.writeString(struct.createUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanOutputInfoImplDTOTupleSchemeFactory implements SchemeFactory {
    public LoanOutputInfoImplDTOTupleScheme getScheme() {
      return new LoanOutputInfoImplDTOTupleScheme();
    }
  }

  private static class LoanOutputInfoImplDTOTupleScheme extends TupleScheme<LoanOutputInfoImplDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanOutputInfoImplDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectType()) {
        optionals.set(2);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(3);
      }
      if (struct.isSetShouldAmt()) {
        optionals.set(4);
      }
      if (struct.isSetDifAmt()) {
        optionals.set(5);
      }
      if (struct.isSetShouldDate()) {
        optionals.set(6);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(7);
      }
      if (struct.isSetFtDate()) {
        optionals.set(8);
      }
      if (struct.isSetRepayCycleDate()) {
        optionals.set(9);
      }
      if (struct.isSetOutputDesc()) {
        optionals.set(10);
      }
      if (struct.isSetBank()) {
        optionals.set(11);
      }
      if (struct.isSetBankNum()) {
        optionals.set(12);
      }
      if (struct.isSetBankUserName()) {
        optionals.set(13);
      }
      if (struct.isSetBankName()) {
        optionals.set(14);
      }
      if (struct.isSetBranchName()) {
        optionals.set(15);
      }
      if (struct.isSetAccArea()) {
        optionals.set(16);
      }
      if (struct.isSetAccName()) {
        optionals.set(17);
      }
      if (struct.isSetBankAccCate()) {
        optionals.set(18);
      }
      if (struct.isSetAccType()) {
        optionals.set(19);
      }
      if (struct.isSetRefId()) {
        optionals.set(20);
      }
      if (struct.isSetStatus()) {
        optionals.set(21);
      }
      if (struct.isSetFtType()) {
        optionals.set(22);
      }
      if (struct.isSetTenderType()) {
        optionals.set(23);
      }
      if (struct.isSetFtAmt()) {
        optionals.set(24);
      }
      if (struct.isSetFtBankAcctId()) {
        optionals.set(25);
      }
      if (struct.isSetFtUserId()) {
        optionals.set(26);
      }
      if (struct.isSetLoanCardId()) {
        optionals.set(27);
      }
      if (struct.isSetRemark()) {
        optionals.set(28);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(29);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(30);
      }
      if (struct.isSetCreditEndDate()) {
        optionals.set(31);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(32);
      }
      if (struct.isSetCreateUser()) {
        optionals.set(33);
      }
      oprot.writeBitSet(optionals, 34);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetShouldAmt()) {
        oprot.writeDouble(struct.shouldAmt);
      }
      if (struct.isSetDifAmt()) {
        oprot.writeDouble(struct.difAmt);
      }
      if (struct.isSetShouldDate()) {
        oprot.writeString(struct.shouldDate);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeString(struct.repayCycle);
      }
      if (struct.isSetFtDate()) {
        oprot.writeString(struct.ftDate);
      }
      if (struct.isSetRepayCycleDate()) {
        oprot.writeString(struct.repayCycleDate);
      }
      if (struct.isSetOutputDesc()) {
        oprot.writeString(struct.outputDesc);
      }
      if (struct.isSetBank()) {
        oprot.writeI64(struct.bank);
      }
      if (struct.isSetBankNum()) {
        oprot.writeString(struct.bankNum);
      }
      if (struct.isSetBankUserName()) {
        oprot.writeString(struct.bankUserName);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBranchName()) {
        oprot.writeString(struct.branchName);
      }
      if (struct.isSetAccArea()) {
        oprot.writeString(struct.accArea);
      }
      if (struct.isSetAccName()) {
        oprot.writeString(struct.accName);
      }
      if (struct.isSetBankAccCate()) {
        oprot.writeI32(struct.bankAccCate);
      }
      if (struct.isSetAccType()) {
        oprot.writeI32(struct.accType);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetFtType()) {
        oprot.writeI32(struct.ftType);
      }
      if (struct.isSetTenderType()) {
        oprot.writeI32(struct.tenderType);
      }
      if (struct.isSetFtAmt()) {
        oprot.writeDouble(struct.ftAmt);
      }
      if (struct.isSetFtBankAcctId()) {
        oprot.writeString(struct.ftBankAcctId);
      }
      if (struct.isSetFtUserId()) {
        oprot.writeI32(struct.ftUserId);
      }
      if (struct.isSetLoanCardId()) {
        oprot.writeString(struct.loanCardId);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetCreditEndDate()) {
        oprot.writeString(struct.creditEndDate);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreateUser()) {
        oprot.writeString(struct.createUser);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanOutputInfoImplDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(34);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shouldAmt = iprot.readDouble();
        struct.setShouldAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.difAmt = iprot.readDouble();
        struct.setDifAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shouldDate = iprot.readString();
        struct.setShouldDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repayCycle = iprot.readString();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ftDate = iprot.readString();
        struct.setFtDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.repayCycleDate = iprot.readString();
        struct.setRepayCycleDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.outputDesc = iprot.readString();
        struct.setOutputDescIsSet(true);
      }
      if (incoming.get(11)) {
        struct.bank = iprot.readI64();
        struct.setBankIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bankNum = iprot.readString();
        struct.setBankNumIsSet(true);
      }
      if (incoming.get(13)) {
        struct.bankUserName = iprot.readString();
        struct.setBankUserNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.branchName = iprot.readString();
        struct.setBranchNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.accArea = iprot.readString();
        struct.setAccAreaIsSet(true);
      }
      if (incoming.get(17)) {
        struct.accName = iprot.readString();
        struct.setAccNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.bankAccCate = iprot.readI32();
        struct.setBankAccCateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.accType = iprot.readI32();
        struct.setAccTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(22)) {
        struct.ftType = iprot.readI32();
        struct.setFtTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.tenderType = iprot.readI32();
        struct.setTenderTypeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.ftAmt = iprot.readDouble();
        struct.setFtAmtIsSet(true);
      }
      if (incoming.get(25)) {
        struct.ftBankAcctId = iprot.readString();
        struct.setFtBankAcctIdIsSet(true);
      }
      if (incoming.get(26)) {
        struct.ftUserId = iprot.readI32();
        struct.setFtUserIdIsSet(true);
      }
      if (incoming.get(27)) {
        struct.loanCardId = iprot.readString();
        struct.setLoanCardIdIsSet(true);
      }
      if (incoming.get(28)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(29)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
      if (incoming.get(30)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(31)) {
        struct.creditEndDate = iprot.readString();
        struct.setCreditEndDateIsSet(true);
      }
      if (incoming.get(32)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(33)) {
        struct.createUser = iprot.readString();
        struct.setCreateUserIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class SettleFile implements org.apache.thrift.TBase<SettleFile, SettleFile._Fields>, java.io.Serializable, Cloneable, Comparable<SettleFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettleFile");

  private static final org.apache.thrift.protocol.TField OUTPUT_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("outputDttm", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTRACT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNum", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayDttm", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REPAY_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDttm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OUTPUT_ACC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outputAccName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardType", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettleFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettleFileTupleSchemeFactory());
  }

  public String outputDttm; // required
  public String acctName; // required
  public String creditAmt; // required
  public String contractNum; // required
  public String planRepayDttm; // required
  public String repayDttm; // required
  public String accName; // required
  public String bankCardId; // required
  public String bankName; // required
  public String outputAccName; // required
  public int bankCardType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OUTPUT_DTTM((short)1, "outputDttm"),
    ACCT_NAME((short)2, "acctName"),
    CREDIT_AMT((short)3, "creditAmt"),
    CONTRACT_NUM((short)4, "contractNum"),
    PLAN_REPAY_DTTM((short)5, "planRepayDttm"),
    REPAY_DTTM((short)6, "repayDttm"),
    ACC_NAME((short)7, "accName"),
    BANK_CARD_ID((short)8, "bankCardId"),
    BANK_NAME((short)9, "bankName"),
    OUTPUT_ACC_NAME((short)10, "outputAccName"),
    BANK_CARD_TYPE((short)11, "bankCardType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTPUT_DTTM
          return OUTPUT_DTTM;
        case 2: // ACCT_NAME
          return ACCT_NAME;
        case 3: // CREDIT_AMT
          return CREDIT_AMT;
        case 4: // CONTRACT_NUM
          return CONTRACT_NUM;
        case 5: // PLAN_REPAY_DTTM
          return PLAN_REPAY_DTTM;
        case 6: // REPAY_DTTM
          return REPAY_DTTM;
        case 7: // ACC_NAME
          return ACC_NAME;
        case 8: // BANK_CARD_ID
          return BANK_CARD_ID;
        case 9: // BANK_NAME
          return BANK_NAME;
        case 10: // OUTPUT_ACC_NAME
          return OUTPUT_ACC_NAME;
        case 11: // BANK_CARD_TYPE
          return BANK_CARD_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BANKCARDTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTPUT_DTTM, new org.apache.thrift.meta_data.FieldMetaData("outputDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NUM, new org.apache.thrift.meta_data.FieldMetaData("contractNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_DTTM, new org.apache.thrift.meta_data.FieldMetaData("planRepayDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_DTTM, new org.apache.thrift.meta_data.FieldMetaData("repayDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_NAME, new org.apache.thrift.meta_data.FieldMetaData("accName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("bankCardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTPUT_ACC_NAME, new org.apache.thrift.meta_data.FieldMetaData("outputAccName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bankCardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettleFile.class, metaDataMap);
  }

  public SettleFile() {
  }

  public SettleFile(
    String outputDttm,
    String acctName,
    String creditAmt,
    String contractNum,
    String planRepayDttm,
    String repayDttm,
    String accName,
    String bankCardId,
    String bankName,
    String outputAccName,
    int bankCardType)
  {
    this();
    this.outputDttm = outputDttm;
    this.acctName = acctName;
    this.creditAmt = creditAmt;
    this.contractNum = contractNum;
    this.planRepayDttm = planRepayDttm;
    this.repayDttm = repayDttm;
    this.accName = accName;
    this.bankCardId = bankCardId;
    this.bankName = bankName;
    this.outputAccName = outputAccName;
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettleFile(SettleFile other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOutputDttm()) {
      this.outputDttm = other.outputDttm;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    if (other.isSetCreditAmt()) {
      this.creditAmt = other.creditAmt;
    }
    if (other.isSetContractNum()) {
      this.contractNum = other.contractNum;
    }
    if (other.isSetPlanRepayDttm()) {
      this.planRepayDttm = other.planRepayDttm;
    }
    if (other.isSetRepayDttm()) {
      this.repayDttm = other.repayDttm;
    }
    if (other.isSetAccName()) {
      this.accName = other.accName;
    }
    if (other.isSetBankCardId()) {
      this.bankCardId = other.bankCardId;
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetOutputAccName()) {
      this.outputAccName = other.outputAccName;
    }
    this.bankCardType = other.bankCardType;
  }

  public SettleFile deepCopy() {
    return new SettleFile(this);
  }

  @Override
  public void clear() {
    this.outputDttm = null;
    this.acctName = null;
    this.creditAmt = null;
    this.contractNum = null;
    this.planRepayDttm = null;
    this.repayDttm = null;
    this.accName = null;
    this.bankCardId = null;
    this.bankName = null;
    this.outputAccName = null;
    setBankCardTypeIsSet(false);
    this.bankCardType = 0;
  }

  public String getOutputDttm() {
    return this.outputDttm;
  }

  public SettleFile setOutputDttm(String outputDttm) {
    this.outputDttm = outputDttm;
    return this;
  }

  public void unsetOutputDttm() {
    this.outputDttm = null;
  }

  /** Returns true if field outputDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputDttm() {
    return this.outputDttm != null;
  }

  public void setOutputDttmIsSet(boolean value) {
    if (!value) {
      this.outputDttm = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public SettleFile setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public String getCreditAmt() {
    return this.creditAmt;
  }

  public SettleFile setCreditAmt(String creditAmt) {
    this.creditAmt = creditAmt;
    return this;
  }

  public void unsetCreditAmt() {
    this.creditAmt = null;
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return this.creditAmt != null;
  }

  public void setCreditAmtIsSet(boolean value) {
    if (!value) {
      this.creditAmt = null;
    }
  }

  public String getContractNum() {
    return this.contractNum;
  }

  public SettleFile setContractNum(String contractNum) {
    this.contractNum = contractNum;
    return this;
  }

  public void unsetContractNum() {
    this.contractNum = null;
  }

  /** Returns true if field contractNum is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNum() {
    return this.contractNum != null;
  }

  public void setContractNumIsSet(boolean value) {
    if (!value) {
      this.contractNum = null;
    }
  }

  public String getPlanRepayDttm() {
    return this.planRepayDttm;
  }

  public SettleFile setPlanRepayDttm(String planRepayDttm) {
    this.planRepayDttm = planRepayDttm;
    return this;
  }

  public void unsetPlanRepayDttm() {
    this.planRepayDttm = null;
  }

  /** Returns true if field planRepayDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayDttm() {
    return this.planRepayDttm != null;
  }

  public void setPlanRepayDttmIsSet(boolean value) {
    if (!value) {
      this.planRepayDttm = null;
    }
  }

  public String getRepayDttm() {
    return this.repayDttm;
  }

  public SettleFile setRepayDttm(String repayDttm) {
    this.repayDttm = repayDttm;
    return this;
  }

  public void unsetRepayDttm() {
    this.repayDttm = null;
  }

  /** Returns true if field repayDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDttm() {
    return this.repayDttm != null;
  }

  public void setRepayDttmIsSet(boolean value) {
    if (!value) {
      this.repayDttm = null;
    }
  }

  public String getAccName() {
    return this.accName;
  }

  public SettleFile setAccName(String accName) {
    this.accName = accName;
    return this;
  }

  public void unsetAccName() {
    this.accName = null;
  }

  /** Returns true if field accName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccName() {
    return this.accName != null;
  }

  public void setAccNameIsSet(boolean value) {
    if (!value) {
      this.accName = null;
    }
  }

  public String getBankCardId() {
    return this.bankCardId;
  }

  public SettleFile setBankCardId(String bankCardId) {
    this.bankCardId = bankCardId;
    return this;
  }

  public void unsetBankCardId() {
    this.bankCardId = null;
  }

  /** Returns true if field bankCardId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardId() {
    return this.bankCardId != null;
  }

  public void setBankCardIdIsSet(boolean value) {
    if (!value) {
      this.bankCardId = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public SettleFile setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getOutputAccName() {
    return this.outputAccName;
  }

  public SettleFile setOutputAccName(String outputAccName) {
    this.outputAccName = outputAccName;
    return this;
  }

  public void unsetOutputAccName() {
    this.outputAccName = null;
  }

  /** Returns true if field outputAccName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputAccName() {
    return this.outputAccName != null;
  }

  public void setOutputAccNameIsSet(boolean value) {
    if (!value) {
      this.outputAccName = null;
    }
  }

  public int getBankCardType() {
    return this.bankCardType;
  }

  public SettleFile setBankCardType(int bankCardType) {
    this.bankCardType = bankCardType;
    setBankCardTypeIsSet(true);
    return this;
  }

  public void unsetBankCardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  /** Returns true if field bankCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardType() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID);
  }

  public void setBankCardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKCARDTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OUTPUT_DTTM:
      if (value == null) {
        unsetOutputDttm();
      } else {
        setOutputDttm((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((String)value);
      }
      break;

    case CONTRACT_NUM:
      if (value == null) {
        unsetContractNum();
      } else {
        setContractNum((String)value);
      }
      break;

    case PLAN_REPAY_DTTM:
      if (value == null) {
        unsetPlanRepayDttm();
      } else {
        setPlanRepayDttm((String)value);
      }
      break;

    case REPAY_DTTM:
      if (value == null) {
        unsetRepayDttm();
      } else {
        setRepayDttm((String)value);
      }
      break;

    case ACC_NAME:
      if (value == null) {
        unsetAccName();
      } else {
        setAccName((String)value);
      }
      break;

    case BANK_CARD_ID:
      if (value == null) {
        unsetBankCardId();
      } else {
        setBankCardId((String)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case OUTPUT_ACC_NAME:
      if (value == null) {
        unsetOutputAccName();
      } else {
        setOutputAccName((String)value);
      }
      break;

    case BANK_CARD_TYPE:
      if (value == null) {
        unsetBankCardType();
      } else {
        setBankCardType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTPUT_DTTM:
      return getOutputDttm();

    case ACCT_NAME:
      return getAcctName();

    case CREDIT_AMT:
      return getCreditAmt();

    case CONTRACT_NUM:
      return getContractNum();

    case PLAN_REPAY_DTTM:
      return getPlanRepayDttm();

    case REPAY_DTTM:
      return getRepayDttm();

    case ACC_NAME:
      return getAccName();

    case BANK_CARD_ID:
      return getBankCardId();

    case BANK_NAME:
      return getBankName();

    case OUTPUT_ACC_NAME:
      return getOutputAccName();

    case BANK_CARD_TYPE:
      return Integer.valueOf(getBankCardType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OUTPUT_DTTM:
      return isSetOutputDttm();
    case ACCT_NAME:
      return isSetAcctName();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case CONTRACT_NUM:
      return isSetContractNum();
    case PLAN_REPAY_DTTM:
      return isSetPlanRepayDttm();
    case REPAY_DTTM:
      return isSetRepayDttm();
    case ACC_NAME:
      return isSetAccName();
    case BANK_CARD_ID:
      return isSetBankCardId();
    case BANK_NAME:
      return isSetBankName();
    case OUTPUT_ACC_NAME:
      return isSetOutputAccName();
    case BANK_CARD_TYPE:
      return isSetBankCardType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettleFile)
      return this.equals((SettleFile)that);
    return false;
  }

  public boolean equals(SettleFile that) {
    if (that == null)
      return false;

    boolean this_present_outputDttm = true && this.isSetOutputDttm();
    boolean that_present_outputDttm = true && that.isSetOutputDttm();
    if (this_present_outputDttm || that_present_outputDttm) {
      if (!(this_present_outputDttm && that_present_outputDttm))
        return false;
      if (!this.outputDttm.equals(that.outputDttm))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_creditAmt = true && this.isSetCreditAmt();
    boolean that_present_creditAmt = true && that.isSetCreditAmt();
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (!this.creditAmt.equals(that.creditAmt))
        return false;
    }

    boolean this_present_contractNum = true && this.isSetContractNum();
    boolean that_present_contractNum = true && that.isSetContractNum();
    if (this_present_contractNum || that_present_contractNum) {
      if (!(this_present_contractNum && that_present_contractNum))
        return false;
      if (!this.contractNum.equals(that.contractNum))
        return false;
    }

    boolean this_present_planRepayDttm = true && this.isSetPlanRepayDttm();
    boolean that_present_planRepayDttm = true && that.isSetPlanRepayDttm();
    if (this_present_planRepayDttm || that_present_planRepayDttm) {
      if (!(this_present_planRepayDttm && that_present_planRepayDttm))
        return false;
      if (!this.planRepayDttm.equals(that.planRepayDttm))
        return false;
    }

    boolean this_present_repayDttm = true && this.isSetRepayDttm();
    boolean that_present_repayDttm = true && that.isSetRepayDttm();
    if (this_present_repayDttm || that_present_repayDttm) {
      if (!(this_present_repayDttm && that_present_repayDttm))
        return false;
      if (!this.repayDttm.equals(that.repayDttm))
        return false;
    }

    boolean this_present_accName = true && this.isSetAccName();
    boolean that_present_accName = true && that.isSetAccName();
    if (this_present_accName || that_present_accName) {
      if (!(this_present_accName && that_present_accName))
        return false;
      if (!this.accName.equals(that.accName))
        return false;
    }

    boolean this_present_bankCardId = true && this.isSetBankCardId();
    boolean that_present_bankCardId = true && that.isSetBankCardId();
    if (this_present_bankCardId || that_present_bankCardId) {
      if (!(this_present_bankCardId && that_present_bankCardId))
        return false;
      if (!this.bankCardId.equals(that.bankCardId))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_outputAccName = true && this.isSetOutputAccName();
    boolean that_present_outputAccName = true && that.isSetOutputAccName();
    if (this_present_outputAccName || that_present_outputAccName) {
      if (!(this_present_outputAccName && that_present_outputAccName))
        return false;
      if (!this.outputAccName.equals(that.outputAccName))
        return false;
    }

    boolean this_present_bankCardType = true;
    boolean that_present_bankCardType = true;
    if (this_present_bankCardType || that_present_bankCardType) {
      if (!(this_present_bankCardType && that_present_bankCardType))
        return false;
      if (this.bankCardType != that.bankCardType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_outputDttm = true && (isSetOutputDttm());
    list.add(present_outputDttm);
    if (present_outputDttm)
      list.add(outputDttm);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_creditAmt = true && (isSetCreditAmt());
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_contractNum = true && (isSetContractNum());
    list.add(present_contractNum);
    if (present_contractNum)
      list.add(contractNum);

    boolean present_planRepayDttm = true && (isSetPlanRepayDttm());
    list.add(present_planRepayDttm);
    if (present_planRepayDttm)
      list.add(planRepayDttm);

    boolean present_repayDttm = true && (isSetRepayDttm());
    list.add(present_repayDttm);
    if (present_repayDttm)
      list.add(repayDttm);

    boolean present_accName = true && (isSetAccName());
    list.add(present_accName);
    if (present_accName)
      list.add(accName);

    boolean present_bankCardId = true && (isSetBankCardId());
    list.add(present_bankCardId);
    if (present_bankCardId)
      list.add(bankCardId);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_outputAccName = true && (isSetOutputAccName());
    list.add(present_outputAccName);
    if (present_outputAccName)
      list.add(outputAccName);

    boolean present_bankCardType = true;
    list.add(present_bankCardType);
    if (present_bankCardType)
      list.add(bankCardType);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettleFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOutputDttm()).compareTo(other.isSetOutputDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputDttm, other.outputDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNum()).compareTo(other.isSetContractNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNum, other.contractNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayDttm()).compareTo(other.isSetPlanRepayDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayDttm, other.planRepayDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDttm()).compareTo(other.isSetRepayDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDttm, other.repayDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccName()).compareTo(other.isSetAccName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accName, other.accName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardId()).compareTo(other.isSetBankCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardId, other.bankCardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputAccName()).compareTo(other.isSetOutputAccName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputAccName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputAccName, other.outputAccName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardType()).compareTo(other.isSetBankCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardType, other.bankCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettleFile(");
    boolean first = true;

    sb.append("outputDttm:");
    if (this.outputDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.outputDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    if (this.creditAmt == null) {
      sb.append("null");
    } else {
      sb.append(this.creditAmt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNum:");
    if (this.contractNum == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayDttm:");
    if (this.planRepayDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDttm:");
    if (this.repayDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accName:");
    if (this.accName == null) {
      sb.append("null");
    } else {
      sb.append(this.accName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardId:");
    if (this.bankCardId == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputAccName:");
    if (this.outputAccName == null) {
      sb.append("null");
    } else {
      sb.append(this.outputAccName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardType:");
    sb.append(this.bankCardType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettleFileStandardSchemeFactory implements SchemeFactory {
    public SettleFileStandardScheme getScheme() {
      return new SettleFileStandardScheme();
    }
  }

  private static class SettleFileStandardScheme extends StandardScheme<SettleFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettleFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTPUT_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputDttm = iprot.readString();
              struct.setOutputDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creditAmt = iprot.readString();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTRACT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNum = iprot.readString();
              struct.setContractNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLAN_REPAY_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayDttm = iprot.readString();
              struct.setPlanRepayDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPAY_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDttm = iprot.readString();
              struct.setRepayDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accName = iprot.readString();
              struct.setAccNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardId = iprot.readString();
              struct.setBankCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUTPUT_ACC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputAccName = iprot.readString();
              struct.setOutputAccNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BANK_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankCardType = iprot.readI32();
              struct.setBankCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettleFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.outputDttm != null) {
        oprot.writeFieldBegin(OUTPUT_DTTM_FIELD_DESC);
        oprot.writeString(struct.outputDttm);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      if (struct.creditAmt != null) {
        oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
        oprot.writeString(struct.creditAmt);
        oprot.writeFieldEnd();
      }
      if (struct.contractNum != null) {
        oprot.writeFieldBegin(CONTRACT_NUM_FIELD_DESC);
        oprot.writeString(struct.contractNum);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayDttm != null) {
        oprot.writeFieldBegin(PLAN_REPAY_DTTM_FIELD_DESC);
        oprot.writeString(struct.planRepayDttm);
        oprot.writeFieldEnd();
      }
      if (struct.repayDttm != null) {
        oprot.writeFieldBegin(REPAY_DTTM_FIELD_DESC);
        oprot.writeString(struct.repayDttm);
        oprot.writeFieldEnd();
      }
      if (struct.accName != null) {
        oprot.writeFieldBegin(ACC_NAME_FIELD_DESC);
        oprot.writeString(struct.accName);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardId != null) {
        oprot.writeFieldBegin(BANK_CARD_ID_FIELD_DESC);
        oprot.writeString(struct.bankCardId);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.outputAccName != null) {
        oprot.writeFieldBegin(OUTPUT_ACC_NAME_FIELD_DESC);
        oprot.writeString(struct.outputAccName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_CARD_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bankCardType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettleFileTupleSchemeFactory implements SchemeFactory {
    public SettleFileTupleScheme getScheme() {
      return new SettleFileTupleScheme();
    }
  }

  private static class SettleFileTupleScheme extends TupleScheme<SettleFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettleFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOutputDttm()) {
        optionals.set(0);
      }
      if (struct.isSetAcctName()) {
        optionals.set(1);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(2);
      }
      if (struct.isSetContractNum()) {
        optionals.set(3);
      }
      if (struct.isSetPlanRepayDttm()) {
        optionals.set(4);
      }
      if (struct.isSetRepayDttm()) {
        optionals.set(5);
      }
      if (struct.isSetAccName()) {
        optionals.set(6);
      }
      if (struct.isSetBankCardId()) {
        optionals.set(7);
      }
      if (struct.isSetBankName()) {
        optionals.set(8);
      }
      if (struct.isSetOutputAccName()) {
        optionals.set(9);
      }
      if (struct.isSetBankCardType()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetOutputDttm()) {
        oprot.writeString(struct.outputDttm);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeString(struct.creditAmt);
      }
      if (struct.isSetContractNum()) {
        oprot.writeString(struct.contractNum);
      }
      if (struct.isSetPlanRepayDttm()) {
        oprot.writeString(struct.planRepayDttm);
      }
      if (struct.isSetRepayDttm()) {
        oprot.writeString(struct.repayDttm);
      }
      if (struct.isSetAccName()) {
        oprot.writeString(struct.accName);
      }
      if (struct.isSetBankCardId()) {
        oprot.writeString(struct.bankCardId);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetOutputAccName()) {
        oprot.writeString(struct.outputAccName);
      }
      if (struct.isSetBankCardType()) {
        oprot.writeI32(struct.bankCardType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettleFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.outputDttm = iprot.readString();
        struct.setOutputDttmIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creditAmt = iprot.readString();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractNum = iprot.readString();
        struct.setContractNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.planRepayDttm = iprot.readString();
        struct.setPlanRepayDttmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.repayDttm = iprot.readString();
        struct.setRepayDttmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accName = iprot.readString();
        struct.setAccNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankCardId = iprot.readString();
        struct.setBankCardIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.outputAccName = iprot.readString();
        struct.setOutputAccNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bankCardType = iprot.readI32();
        struct.setBankCardTypeIsSet(true);
      }
    }
  }

}


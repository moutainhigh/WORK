/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepayFeewdtlService {

  public interface Iface {

    public int insertLoanFeewdelInfo(String reason, String feewdel, int projectId, int loanId) throws org.apache.thrift.TException;

    public int uploadinstFeewapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RegAdvapplyFileview> queryRegFeewapplyFile(int repayId, int page, int rows) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int queryRegFeewapplyFileTotal(int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RepayFeewdtlDatView> queryRegFeewDealbyprocess(int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public String queryRegFeewReasonbyprocess(int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateRegFeewDealbyprocess(String reason, String FeewInfo, int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public RepayFeewdtlDatView queryRegFeewprojectinfobyproId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public RepayFeewdtlDatView queryRegFeewprojectinfobyrepayId(int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int uploadinstiDvertapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateEmbezzleFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RegAdvapplyFileview> queryRegDivertapplyFile(int DivertId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int changeReqstFeewdel(int reqStatus, int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteProjectbyFeewDealList(List<Integer> repayIds, List<Integer> projectIds) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteProjectbyFeewDeal(int repayId, int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int checkFeewDealByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateInsertRegFeewDealbyprocess(String reason, String feewdel, int repayId, int projectId, int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public FeeWaiverApplicationDTO findFeeWaiverApplication(int userId, int repayId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void insertLoanFeewdelInfo(String reason, String feewdel, int projectId, int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void uploadinstFeewapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRegFeewapplyFile(int repayId, int page, int rows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRegFeewapplyFileTotal(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRegFeewDealbyprocess(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRegFeewReasonbyprocess(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRegFeewDealbyprocess(String reason, String FeewInfo, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRegFeewprojectinfobyproId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRegFeewprojectinfobyrepayId(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void uploadinstiDvertapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateEmbezzleFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRegDivertapplyFile(int DivertId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeReqstFeewdel(int reqStatus, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProjectbyFeewDealList(List<Integer> repayIds, List<Integer> projectIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProjectbyFeewDeal(int repayId, int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkFeewDealByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateInsertRegFeewDealbyprocess(String reason, String feewdel, int repayId, int projectId, int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findFeeWaiverApplication(int userId, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int insertLoanFeewdelInfo(String reason, String feewdel, int projectId, int loanId) throws org.apache.thrift.TException
    {
      send_insertLoanFeewdelInfo(reason, feewdel, projectId, loanId);
      return recv_insertLoanFeewdelInfo();
    }

    public void send_insertLoanFeewdelInfo(String reason, String feewdel, int projectId, int loanId) throws org.apache.thrift.TException
    {
      insertLoanFeewdelInfo_args args = new insertLoanFeewdelInfo_args();
      args.setReason(reason);
      args.setFeewdel(feewdel);
      args.setProjectId(projectId);
      args.setLoanId(loanId);
      sendBase("insertLoanFeewdelInfo", args);
    }

    public int recv_insertLoanFeewdelInfo() throws org.apache.thrift.TException
    {
      insertLoanFeewdelInfo_result result = new insertLoanFeewdelInfo_result();
      receiveBase(result, "insertLoanFeewdelInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertLoanFeewdelInfo failed: unknown result");
    }

    public int uploadinstFeewapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_uploadinstFeewapply(uploadinstAdvapplyBaseDTO);
      return recv_uploadinstFeewapply();
    }

    public void send_uploadinstFeewapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      uploadinstFeewapply_args args = new uploadinstFeewapply_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("uploadinstFeewapply", args);
    }

    public int recv_uploadinstFeewapply() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      uploadinstFeewapply_result result = new uploadinstFeewapply_result();
      receiveBase(result, "uploadinstFeewapply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadinstFeewapply failed: unknown result");
    }

    public List<RegAdvapplyFileview> queryRegFeewapplyFile(int repayId, int page, int rows) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRegFeewapplyFile(repayId, page, rows);
      return recv_queryRegFeewapplyFile();
    }

    public void send_queryRegFeewapplyFile(int repayId, int page, int rows) throws org.apache.thrift.TException
    {
      queryRegFeewapplyFile_args args = new queryRegFeewapplyFile_args();
      args.setRepayId(repayId);
      args.setPage(page);
      args.setRows(rows);
      sendBase("queryRegFeewapplyFile", args);
    }

    public List<RegAdvapplyFileview> recv_queryRegFeewapplyFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRegFeewapplyFile_result result = new queryRegFeewapplyFile_result();
      receiveBase(result, "queryRegFeewapplyFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRegFeewapplyFile failed: unknown result");
    }

    public int queryRegFeewapplyFileTotal(int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRegFeewapplyFileTotal(repayId);
      return recv_queryRegFeewapplyFileTotal();
    }

    public void send_queryRegFeewapplyFileTotal(int repayId) throws org.apache.thrift.TException
    {
      queryRegFeewapplyFileTotal_args args = new queryRegFeewapplyFileTotal_args();
      args.setRepayId(repayId);
      sendBase("queryRegFeewapplyFileTotal", args);
    }

    public int recv_queryRegFeewapplyFileTotal() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRegFeewapplyFileTotal_result result = new queryRegFeewapplyFileTotal_result();
      receiveBase(result, "queryRegFeewapplyFileTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRegFeewapplyFileTotal failed: unknown result");
    }

    public List<RepayFeewdtlDatView> queryRegFeewDealbyprocess(int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRegFeewDealbyprocess(repayId);
      return recv_queryRegFeewDealbyprocess();
    }

    public void send_queryRegFeewDealbyprocess(int repayId) throws org.apache.thrift.TException
    {
      queryRegFeewDealbyprocess_args args = new queryRegFeewDealbyprocess_args();
      args.setRepayId(repayId);
      sendBase("queryRegFeewDealbyprocess", args);
    }

    public List<RepayFeewdtlDatView> recv_queryRegFeewDealbyprocess() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRegFeewDealbyprocess_result result = new queryRegFeewDealbyprocess_result();
      receiveBase(result, "queryRegFeewDealbyprocess");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRegFeewDealbyprocess failed: unknown result");
    }

    public String queryRegFeewReasonbyprocess(int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRegFeewReasonbyprocess(repayId);
      return recv_queryRegFeewReasonbyprocess();
    }

    public void send_queryRegFeewReasonbyprocess(int repayId) throws org.apache.thrift.TException
    {
      queryRegFeewReasonbyprocess_args args = new queryRegFeewReasonbyprocess_args();
      args.setRepayId(repayId);
      sendBase("queryRegFeewReasonbyprocess", args);
    }

    public String recv_queryRegFeewReasonbyprocess() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRegFeewReasonbyprocess_result result = new queryRegFeewReasonbyprocess_result();
      receiveBase(result, "queryRegFeewReasonbyprocess");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRegFeewReasonbyprocess failed: unknown result");
    }

    public int updateRegFeewDealbyprocess(String reason, String FeewInfo, int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateRegFeewDealbyprocess(reason, FeewInfo, repayId);
      return recv_updateRegFeewDealbyprocess();
    }

    public void send_updateRegFeewDealbyprocess(String reason, String FeewInfo, int repayId) throws org.apache.thrift.TException
    {
      updateRegFeewDealbyprocess_args args = new updateRegFeewDealbyprocess_args();
      args.setReason(reason);
      args.setFeewInfo(FeewInfo);
      args.setRepayId(repayId);
      sendBase("updateRegFeewDealbyprocess", args);
    }

    public int recv_updateRegFeewDealbyprocess() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateRegFeewDealbyprocess_result result = new updateRegFeewDealbyprocess_result();
      receiveBase(result, "updateRegFeewDealbyprocess");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRegFeewDealbyprocess failed: unknown result");
    }

    public RepayFeewdtlDatView queryRegFeewprojectinfobyproId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRegFeewprojectinfobyproId(projectId);
      return recv_queryRegFeewprojectinfobyproId();
    }

    public void send_queryRegFeewprojectinfobyproId(int projectId) throws org.apache.thrift.TException
    {
      queryRegFeewprojectinfobyproId_args args = new queryRegFeewprojectinfobyproId_args();
      args.setProjectId(projectId);
      sendBase("queryRegFeewprojectinfobyproId", args);
    }

    public RepayFeewdtlDatView recv_queryRegFeewprojectinfobyproId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRegFeewprojectinfobyproId_result result = new queryRegFeewprojectinfobyproId_result();
      receiveBase(result, "queryRegFeewprojectinfobyproId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRegFeewprojectinfobyproId failed: unknown result");
    }

    public RepayFeewdtlDatView queryRegFeewprojectinfobyrepayId(int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRegFeewprojectinfobyrepayId(repayId);
      return recv_queryRegFeewprojectinfobyrepayId();
    }

    public void send_queryRegFeewprojectinfobyrepayId(int repayId) throws org.apache.thrift.TException
    {
      queryRegFeewprojectinfobyrepayId_args args = new queryRegFeewprojectinfobyrepayId_args();
      args.setRepayId(repayId);
      sendBase("queryRegFeewprojectinfobyrepayId", args);
    }

    public RepayFeewdtlDatView recv_queryRegFeewprojectinfobyrepayId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRegFeewprojectinfobyrepayId_result result = new queryRegFeewprojectinfobyrepayId_result();
      receiveBase(result, "queryRegFeewprojectinfobyrepayId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRegFeewprojectinfobyrepayId failed: unknown result");
    }

    public int uploadinstiDvertapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_uploadinstiDvertapply(uploadinstAdvapplyBaseDTO);
      return recv_uploadinstiDvertapply();
    }

    public void send_uploadinstiDvertapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      uploadinstiDvertapply_args args = new uploadinstiDvertapply_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("uploadinstiDvertapply", args);
    }

    public int recv_uploadinstiDvertapply() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      uploadinstiDvertapply_result result = new uploadinstiDvertapply_result();
      receiveBase(result, "uploadinstiDvertapply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadinstiDvertapply failed: unknown result");
    }

    public int updateEmbezzleFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateEmbezzleFile(uploadinstAdvapplyBaseDTO);
      return recv_updateEmbezzleFile();
    }

    public void send_updateEmbezzleFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      updateEmbezzleFile_args args = new updateEmbezzleFile_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("updateEmbezzleFile", args);
    }

    public int recv_updateEmbezzleFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateEmbezzleFile_result result = new updateEmbezzleFile_result();
      receiveBase(result, "updateEmbezzleFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEmbezzleFile failed: unknown result");
    }

    public List<RegAdvapplyFileview> queryRegDivertapplyFile(int DivertId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRegDivertapplyFile(DivertId);
      return recv_queryRegDivertapplyFile();
    }

    public void send_queryRegDivertapplyFile(int DivertId) throws org.apache.thrift.TException
    {
      queryRegDivertapplyFile_args args = new queryRegDivertapplyFile_args();
      args.setDivertId(DivertId);
      sendBase("queryRegDivertapplyFile", args);
    }

    public List<RegAdvapplyFileview> recv_queryRegDivertapplyFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRegDivertapplyFile_result result = new queryRegDivertapplyFile_result();
      receiveBase(result, "queryRegDivertapplyFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRegDivertapplyFile failed: unknown result");
    }

    public int changeReqstFeewdel(int reqStatus, int repayId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_changeReqstFeewdel(reqStatus, repayId);
      return recv_changeReqstFeewdel();
    }

    public void send_changeReqstFeewdel(int reqStatus, int repayId) throws org.apache.thrift.TException
    {
      changeReqstFeewdel_args args = new changeReqstFeewdel_args();
      args.setReqStatus(reqStatus);
      args.setRepayId(repayId);
      sendBase("changeReqstFeewdel", args);
    }

    public int recv_changeReqstFeewdel() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      changeReqstFeewdel_result result = new changeReqstFeewdel_result();
      receiveBase(result, "changeReqstFeewdel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeReqstFeewdel failed: unknown result");
    }

    public int deleteProjectbyFeewDealList(List<Integer> repayIds, List<Integer> projectIds) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteProjectbyFeewDealList(repayIds, projectIds);
      return recv_deleteProjectbyFeewDealList();
    }

    public void send_deleteProjectbyFeewDealList(List<Integer> repayIds, List<Integer> projectIds) throws org.apache.thrift.TException
    {
      deleteProjectbyFeewDealList_args args = new deleteProjectbyFeewDealList_args();
      args.setRepayIds(repayIds);
      args.setProjectIds(projectIds);
      sendBase("deleteProjectbyFeewDealList", args);
    }

    public int recv_deleteProjectbyFeewDealList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteProjectbyFeewDealList_result result = new deleteProjectbyFeewDealList_result();
      receiveBase(result, "deleteProjectbyFeewDealList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProjectbyFeewDealList failed: unknown result");
    }

    public int deleteProjectbyFeewDeal(int repayId, int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteProjectbyFeewDeal(repayId, projectId);
      return recv_deleteProjectbyFeewDeal();
    }

    public void send_deleteProjectbyFeewDeal(int repayId, int projectId) throws org.apache.thrift.TException
    {
      deleteProjectbyFeewDeal_args args = new deleteProjectbyFeewDeal_args();
      args.setRepayId(repayId);
      args.setProjectId(projectId);
      sendBase("deleteProjectbyFeewDeal", args);
    }

    public int recv_deleteProjectbyFeewDeal() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteProjectbyFeewDeal_result result = new deleteProjectbyFeewDeal_result();
      receiveBase(result, "deleteProjectbyFeewDeal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProjectbyFeewDeal failed: unknown result");
    }

    public int checkFeewDealByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_checkFeewDealByProjectId(projectId);
      return recv_checkFeewDealByProjectId();
    }

    public void send_checkFeewDealByProjectId(int projectId) throws org.apache.thrift.TException
    {
      checkFeewDealByProjectId_args args = new checkFeewDealByProjectId_args();
      args.setProjectId(projectId);
      sendBase("checkFeewDealByProjectId", args);
    }

    public int recv_checkFeewDealByProjectId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      checkFeewDealByProjectId_result result = new checkFeewDealByProjectId_result();
      receiveBase(result, "checkFeewDealByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkFeewDealByProjectId failed: unknown result");
    }

    public int updateInsertRegFeewDealbyprocess(String reason, String feewdel, int repayId, int projectId, int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateInsertRegFeewDealbyprocess(reason, feewdel, repayId, projectId, loanId);
      return recv_updateInsertRegFeewDealbyprocess();
    }

    public void send_updateInsertRegFeewDealbyprocess(String reason, String feewdel, int repayId, int projectId, int loanId) throws org.apache.thrift.TException
    {
      updateInsertRegFeewDealbyprocess_args args = new updateInsertRegFeewDealbyprocess_args();
      args.setReason(reason);
      args.setFeewdel(feewdel);
      args.setRepayId(repayId);
      args.setProjectId(projectId);
      args.setLoanId(loanId);
      sendBase("updateInsertRegFeewDealbyprocess", args);
    }

    public int recv_updateInsertRegFeewDealbyprocess() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateInsertRegFeewDealbyprocess_result result = new updateInsertRegFeewDealbyprocess_result();
      receiveBase(result, "updateInsertRegFeewDealbyprocess");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateInsertRegFeewDealbyprocess failed: unknown result");
    }

    public FeeWaiverApplicationDTO findFeeWaiverApplication(int userId, int repayId) throws org.apache.thrift.TException
    {
      send_findFeeWaiverApplication(userId, repayId);
      return recv_findFeeWaiverApplication();
    }

    public void send_findFeeWaiverApplication(int userId, int repayId) throws org.apache.thrift.TException
    {
      findFeeWaiverApplication_args args = new findFeeWaiverApplication_args();
      args.setUserId(userId);
      args.setRepayId(repayId);
      sendBase("findFeeWaiverApplication", args);
    }

    public FeeWaiverApplicationDTO recv_findFeeWaiverApplication() throws org.apache.thrift.TException
    {
      findFeeWaiverApplication_result result = new findFeeWaiverApplication_result();
      receiveBase(result, "findFeeWaiverApplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFeeWaiverApplication failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void insertLoanFeewdelInfo(String reason, String feewdel, int projectId, int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertLoanFeewdelInfo_call method_call = new insertLoanFeewdelInfo_call(reason, feewdel, projectId, loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertLoanFeewdelInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reason;
      private String feewdel;
      private int projectId;
      private int loanId;
      public insertLoanFeewdelInfo_call(String reason, String feewdel, int projectId, int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reason = reason;
        this.feewdel = feewdel;
        this.projectId = projectId;
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertLoanFeewdelInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertLoanFeewdelInfo_args args = new insertLoanFeewdelInfo_args();
        args.setReason(reason);
        args.setFeewdel(feewdel);
        args.setProjectId(projectId);
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertLoanFeewdelInfo();
      }
    }

    public void uploadinstFeewapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadinstFeewapply_call method_call = new uploadinstFeewapply_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadinstFeewapply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public uploadinstFeewapply_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadinstFeewapply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadinstFeewapply_args args = new uploadinstFeewapply_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadinstFeewapply();
      }
    }

    public void queryRegFeewapplyFile(int repayId, int page, int rows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRegFeewapplyFile_call method_call = new queryRegFeewapplyFile_call(repayId, page, rows, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRegFeewapplyFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int repayId;
      private int page;
      private int rows;
      public queryRegFeewapplyFile_call(int repayId, int page, int rows, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayId = repayId;
        this.page = page;
        this.rows = rows;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRegFeewapplyFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRegFeewapplyFile_args args = new queryRegFeewapplyFile_args();
        args.setRepayId(repayId);
        args.setPage(page);
        args.setRows(rows);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RegAdvapplyFileview> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRegFeewapplyFile();
      }
    }

    public void queryRegFeewapplyFileTotal(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRegFeewapplyFileTotal_call method_call = new queryRegFeewapplyFileTotal_call(repayId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRegFeewapplyFileTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int repayId;
      public queryRegFeewapplyFileTotal_call(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayId = repayId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRegFeewapplyFileTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRegFeewapplyFileTotal_args args = new queryRegFeewapplyFileTotal_args();
        args.setRepayId(repayId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRegFeewapplyFileTotal();
      }
    }

    public void queryRegFeewDealbyprocess(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRegFeewDealbyprocess_call method_call = new queryRegFeewDealbyprocess_call(repayId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRegFeewDealbyprocess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int repayId;
      public queryRegFeewDealbyprocess_call(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayId = repayId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRegFeewDealbyprocess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRegFeewDealbyprocess_args args = new queryRegFeewDealbyprocess_args();
        args.setRepayId(repayId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepayFeewdtlDatView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRegFeewDealbyprocess();
      }
    }

    public void queryRegFeewReasonbyprocess(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRegFeewReasonbyprocess_call method_call = new queryRegFeewReasonbyprocess_call(repayId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRegFeewReasonbyprocess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int repayId;
      public queryRegFeewReasonbyprocess_call(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayId = repayId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRegFeewReasonbyprocess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRegFeewReasonbyprocess_args args = new queryRegFeewReasonbyprocess_args();
        args.setRepayId(repayId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRegFeewReasonbyprocess();
      }
    }

    public void updateRegFeewDealbyprocess(String reason, String FeewInfo, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRegFeewDealbyprocess_call method_call = new updateRegFeewDealbyprocess_call(reason, FeewInfo, repayId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRegFeewDealbyprocess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reason;
      private String FeewInfo;
      private int repayId;
      public updateRegFeewDealbyprocess_call(String reason, String FeewInfo, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reason = reason;
        this.FeewInfo = FeewInfo;
        this.repayId = repayId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRegFeewDealbyprocess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRegFeewDealbyprocess_args args = new updateRegFeewDealbyprocess_args();
        args.setReason(reason);
        args.setFeewInfo(FeewInfo);
        args.setRepayId(repayId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRegFeewDealbyprocess();
      }
    }

    public void queryRegFeewprojectinfobyproId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRegFeewprojectinfobyproId_call method_call = new queryRegFeewprojectinfobyproId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRegFeewprojectinfobyproId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public queryRegFeewprojectinfobyproId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRegFeewprojectinfobyproId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRegFeewprojectinfobyproId_args args = new queryRegFeewprojectinfobyproId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RepayFeewdtlDatView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRegFeewprojectinfobyproId();
      }
    }

    public void queryRegFeewprojectinfobyrepayId(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRegFeewprojectinfobyrepayId_call method_call = new queryRegFeewprojectinfobyrepayId_call(repayId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRegFeewprojectinfobyrepayId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int repayId;
      public queryRegFeewprojectinfobyrepayId_call(int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayId = repayId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRegFeewprojectinfobyrepayId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRegFeewprojectinfobyrepayId_args args = new queryRegFeewprojectinfobyrepayId_args();
        args.setRepayId(repayId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RepayFeewdtlDatView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRegFeewprojectinfobyrepayId();
      }
    }

    public void uploadinstiDvertapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadinstiDvertapply_call method_call = new uploadinstiDvertapply_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadinstiDvertapply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public uploadinstiDvertapply_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadinstiDvertapply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadinstiDvertapply_args args = new uploadinstiDvertapply_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadinstiDvertapply();
      }
    }

    public void updateEmbezzleFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEmbezzleFile_call method_call = new updateEmbezzleFile_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEmbezzleFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public updateEmbezzleFile_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEmbezzleFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEmbezzleFile_args args = new updateEmbezzleFile_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateEmbezzleFile();
      }
    }

    public void queryRegDivertapplyFile(int DivertId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRegDivertapplyFile_call method_call = new queryRegDivertapplyFile_call(DivertId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRegDivertapplyFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int DivertId;
      public queryRegDivertapplyFile_call(int DivertId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DivertId = DivertId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRegDivertapplyFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRegDivertapplyFile_args args = new queryRegDivertapplyFile_args();
        args.setDivertId(DivertId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RegAdvapplyFileview> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRegDivertapplyFile();
      }
    }

    public void changeReqstFeewdel(int reqStatus, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeReqstFeewdel_call method_call = new changeReqstFeewdel_call(reqStatus, repayId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeReqstFeewdel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reqStatus;
      private int repayId;
      public changeReqstFeewdel_call(int reqStatus, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqStatus = reqStatus;
        this.repayId = repayId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeReqstFeewdel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeReqstFeewdel_args args = new changeReqstFeewdel_args();
        args.setReqStatus(reqStatus);
        args.setRepayId(repayId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeReqstFeewdel();
      }
    }

    public void deleteProjectbyFeewDealList(List<Integer> repayIds, List<Integer> projectIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProjectbyFeewDealList_call method_call = new deleteProjectbyFeewDealList_call(repayIds, projectIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProjectbyFeewDealList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> repayIds;
      private List<Integer> projectIds;
      public deleteProjectbyFeewDealList_call(List<Integer> repayIds, List<Integer> projectIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayIds = repayIds;
        this.projectIds = projectIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProjectbyFeewDealList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProjectbyFeewDealList_args args = new deleteProjectbyFeewDealList_args();
        args.setRepayIds(repayIds);
        args.setProjectIds(projectIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProjectbyFeewDealList();
      }
    }

    public void deleteProjectbyFeewDeal(int repayId, int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProjectbyFeewDeal_call method_call = new deleteProjectbyFeewDeal_call(repayId, projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProjectbyFeewDeal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int repayId;
      private int projectId;
      public deleteProjectbyFeewDeal_call(int repayId, int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayId = repayId;
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProjectbyFeewDeal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProjectbyFeewDeal_args args = new deleteProjectbyFeewDeal_args();
        args.setRepayId(repayId);
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProjectbyFeewDeal();
      }
    }

    public void checkFeewDealByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkFeewDealByProjectId_call method_call = new checkFeewDealByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkFeewDealByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public checkFeewDealByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkFeewDealByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkFeewDealByProjectId_args args = new checkFeewDealByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkFeewDealByProjectId();
      }
    }

    public void updateInsertRegFeewDealbyprocess(String reason, String feewdel, int repayId, int projectId, int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateInsertRegFeewDealbyprocess_call method_call = new updateInsertRegFeewDealbyprocess_call(reason, feewdel, repayId, projectId, loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateInsertRegFeewDealbyprocess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reason;
      private String feewdel;
      private int repayId;
      private int projectId;
      private int loanId;
      public updateInsertRegFeewDealbyprocess_call(String reason, String feewdel, int repayId, int projectId, int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reason = reason;
        this.feewdel = feewdel;
        this.repayId = repayId;
        this.projectId = projectId;
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateInsertRegFeewDealbyprocess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateInsertRegFeewDealbyprocess_args args = new updateInsertRegFeewDealbyprocess_args();
        args.setReason(reason);
        args.setFeewdel(feewdel);
        args.setRepayId(repayId);
        args.setProjectId(projectId);
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateInsertRegFeewDealbyprocess();
      }
    }

    public void findFeeWaiverApplication(int userId, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFeeWaiverApplication_call method_call = new findFeeWaiverApplication_call(userId, repayId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFeeWaiverApplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int repayId;
      public findFeeWaiverApplication_call(int userId, int repayId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.repayId = repayId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFeeWaiverApplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFeeWaiverApplication_args args = new findFeeWaiverApplication_args();
        args.setUserId(userId);
        args.setRepayId(repayId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FeeWaiverApplicationDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFeeWaiverApplication();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("insertLoanFeewdelInfo", new insertLoanFeewdelInfo());
      processMap.put("uploadinstFeewapply", new uploadinstFeewapply());
      processMap.put("queryRegFeewapplyFile", new queryRegFeewapplyFile());
      processMap.put("queryRegFeewapplyFileTotal", new queryRegFeewapplyFileTotal());
      processMap.put("queryRegFeewDealbyprocess", new queryRegFeewDealbyprocess());
      processMap.put("queryRegFeewReasonbyprocess", new queryRegFeewReasonbyprocess());
      processMap.put("updateRegFeewDealbyprocess", new updateRegFeewDealbyprocess());
      processMap.put("queryRegFeewprojectinfobyproId", new queryRegFeewprojectinfobyproId());
      processMap.put("queryRegFeewprojectinfobyrepayId", new queryRegFeewprojectinfobyrepayId());
      processMap.put("uploadinstiDvertapply", new uploadinstiDvertapply());
      processMap.put("updateEmbezzleFile", new updateEmbezzleFile());
      processMap.put("queryRegDivertapplyFile", new queryRegDivertapplyFile());
      processMap.put("changeReqstFeewdel", new changeReqstFeewdel());
      processMap.put("deleteProjectbyFeewDealList", new deleteProjectbyFeewDealList());
      processMap.put("deleteProjectbyFeewDeal", new deleteProjectbyFeewDeal());
      processMap.put("checkFeewDealByProjectId", new checkFeewDealByProjectId());
      processMap.put("updateInsertRegFeewDealbyprocess", new updateInsertRegFeewDealbyprocess());
      processMap.put("findFeeWaiverApplication", new findFeeWaiverApplication());
      return processMap;
    }

    public static class insertLoanFeewdelInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertLoanFeewdelInfo_args> {
      public insertLoanFeewdelInfo() {
        super("insertLoanFeewdelInfo");
      }

      public insertLoanFeewdelInfo_args getEmptyArgsInstance() {
        return new insertLoanFeewdelInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertLoanFeewdelInfo_result getResult(I iface, insertLoanFeewdelInfo_args args) throws org.apache.thrift.TException {
        insertLoanFeewdelInfo_result result = new insertLoanFeewdelInfo_result();
        result.success = iface.insertLoanFeewdelInfo(args.reason, args.feewdel, args.projectId, args.loanId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class uploadinstFeewapply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadinstFeewapply_args> {
      public uploadinstFeewapply() {
        super("uploadinstFeewapply");
      }

      public uploadinstFeewapply_args getEmptyArgsInstance() {
        return new uploadinstFeewapply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadinstFeewapply_result getResult(I iface, uploadinstFeewapply_args args) throws org.apache.thrift.TException {
        uploadinstFeewapply_result result = new uploadinstFeewapply_result();
        try {
          result.success = iface.uploadinstFeewapply(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRegFeewapplyFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRegFeewapplyFile_args> {
      public queryRegFeewapplyFile() {
        super("queryRegFeewapplyFile");
      }

      public queryRegFeewapplyFile_args getEmptyArgsInstance() {
        return new queryRegFeewapplyFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRegFeewapplyFile_result getResult(I iface, queryRegFeewapplyFile_args args) throws org.apache.thrift.TException {
        queryRegFeewapplyFile_result result = new queryRegFeewapplyFile_result();
        try {
          result.success = iface.queryRegFeewapplyFile(args.repayId, args.page, args.rows);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRegFeewapplyFileTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRegFeewapplyFileTotal_args> {
      public queryRegFeewapplyFileTotal() {
        super("queryRegFeewapplyFileTotal");
      }

      public queryRegFeewapplyFileTotal_args getEmptyArgsInstance() {
        return new queryRegFeewapplyFileTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRegFeewapplyFileTotal_result getResult(I iface, queryRegFeewapplyFileTotal_args args) throws org.apache.thrift.TException {
        queryRegFeewapplyFileTotal_result result = new queryRegFeewapplyFileTotal_result();
        try {
          result.success = iface.queryRegFeewapplyFileTotal(args.repayId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRegFeewDealbyprocess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRegFeewDealbyprocess_args> {
      public queryRegFeewDealbyprocess() {
        super("queryRegFeewDealbyprocess");
      }

      public queryRegFeewDealbyprocess_args getEmptyArgsInstance() {
        return new queryRegFeewDealbyprocess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRegFeewDealbyprocess_result getResult(I iface, queryRegFeewDealbyprocess_args args) throws org.apache.thrift.TException {
        queryRegFeewDealbyprocess_result result = new queryRegFeewDealbyprocess_result();
        try {
          result.success = iface.queryRegFeewDealbyprocess(args.repayId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRegFeewReasonbyprocess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRegFeewReasonbyprocess_args> {
      public queryRegFeewReasonbyprocess() {
        super("queryRegFeewReasonbyprocess");
      }

      public queryRegFeewReasonbyprocess_args getEmptyArgsInstance() {
        return new queryRegFeewReasonbyprocess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRegFeewReasonbyprocess_result getResult(I iface, queryRegFeewReasonbyprocess_args args) throws org.apache.thrift.TException {
        queryRegFeewReasonbyprocess_result result = new queryRegFeewReasonbyprocess_result();
        try {
          result.success = iface.queryRegFeewReasonbyprocess(args.repayId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateRegFeewDealbyprocess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRegFeewDealbyprocess_args> {
      public updateRegFeewDealbyprocess() {
        super("updateRegFeewDealbyprocess");
      }

      public updateRegFeewDealbyprocess_args getEmptyArgsInstance() {
        return new updateRegFeewDealbyprocess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRegFeewDealbyprocess_result getResult(I iface, updateRegFeewDealbyprocess_args args) throws org.apache.thrift.TException {
        updateRegFeewDealbyprocess_result result = new updateRegFeewDealbyprocess_result();
        try {
          result.success = iface.updateRegFeewDealbyprocess(args.reason, args.FeewInfo, args.repayId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRegFeewprojectinfobyproId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRegFeewprojectinfobyproId_args> {
      public queryRegFeewprojectinfobyproId() {
        super("queryRegFeewprojectinfobyproId");
      }

      public queryRegFeewprojectinfobyproId_args getEmptyArgsInstance() {
        return new queryRegFeewprojectinfobyproId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRegFeewprojectinfobyproId_result getResult(I iface, queryRegFeewprojectinfobyproId_args args) throws org.apache.thrift.TException {
        queryRegFeewprojectinfobyproId_result result = new queryRegFeewprojectinfobyproId_result();
        try {
          result.success = iface.queryRegFeewprojectinfobyproId(args.projectId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRegFeewprojectinfobyrepayId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRegFeewprojectinfobyrepayId_args> {
      public queryRegFeewprojectinfobyrepayId() {
        super("queryRegFeewprojectinfobyrepayId");
      }

      public queryRegFeewprojectinfobyrepayId_args getEmptyArgsInstance() {
        return new queryRegFeewprojectinfobyrepayId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRegFeewprojectinfobyrepayId_result getResult(I iface, queryRegFeewprojectinfobyrepayId_args args) throws org.apache.thrift.TException {
        queryRegFeewprojectinfobyrepayId_result result = new queryRegFeewprojectinfobyrepayId_result();
        try {
          result.success = iface.queryRegFeewprojectinfobyrepayId(args.repayId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class uploadinstiDvertapply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadinstiDvertapply_args> {
      public uploadinstiDvertapply() {
        super("uploadinstiDvertapply");
      }

      public uploadinstiDvertapply_args getEmptyArgsInstance() {
        return new uploadinstiDvertapply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadinstiDvertapply_result getResult(I iface, uploadinstiDvertapply_args args) throws org.apache.thrift.TException {
        uploadinstiDvertapply_result result = new uploadinstiDvertapply_result();
        try {
          result.success = iface.uploadinstiDvertapply(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateEmbezzleFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEmbezzleFile_args> {
      public updateEmbezzleFile() {
        super("updateEmbezzleFile");
      }

      public updateEmbezzleFile_args getEmptyArgsInstance() {
        return new updateEmbezzleFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateEmbezzleFile_result getResult(I iface, updateEmbezzleFile_args args) throws org.apache.thrift.TException {
        updateEmbezzleFile_result result = new updateEmbezzleFile_result();
        try {
          result.success = iface.updateEmbezzleFile(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRegDivertapplyFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRegDivertapplyFile_args> {
      public queryRegDivertapplyFile() {
        super("queryRegDivertapplyFile");
      }

      public queryRegDivertapplyFile_args getEmptyArgsInstance() {
        return new queryRegDivertapplyFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRegDivertapplyFile_result getResult(I iface, queryRegDivertapplyFile_args args) throws org.apache.thrift.TException {
        queryRegDivertapplyFile_result result = new queryRegDivertapplyFile_result();
        try {
          result.success = iface.queryRegDivertapplyFile(args.DivertId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class changeReqstFeewdel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeReqstFeewdel_args> {
      public changeReqstFeewdel() {
        super("changeReqstFeewdel");
      }

      public changeReqstFeewdel_args getEmptyArgsInstance() {
        return new changeReqstFeewdel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeReqstFeewdel_result getResult(I iface, changeReqstFeewdel_args args) throws org.apache.thrift.TException {
        changeReqstFeewdel_result result = new changeReqstFeewdel_result();
        try {
          result.success = iface.changeReqstFeewdel(args.reqStatus, args.repayId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteProjectbyFeewDealList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProjectbyFeewDealList_args> {
      public deleteProjectbyFeewDealList() {
        super("deleteProjectbyFeewDealList");
      }

      public deleteProjectbyFeewDealList_args getEmptyArgsInstance() {
        return new deleteProjectbyFeewDealList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProjectbyFeewDealList_result getResult(I iface, deleteProjectbyFeewDealList_args args) throws org.apache.thrift.TException {
        deleteProjectbyFeewDealList_result result = new deleteProjectbyFeewDealList_result();
        try {
          result.success = iface.deleteProjectbyFeewDealList(args.repayIds, args.projectIds);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteProjectbyFeewDeal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProjectbyFeewDeal_args> {
      public deleteProjectbyFeewDeal() {
        super("deleteProjectbyFeewDeal");
      }

      public deleteProjectbyFeewDeal_args getEmptyArgsInstance() {
        return new deleteProjectbyFeewDeal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProjectbyFeewDeal_result getResult(I iface, deleteProjectbyFeewDeal_args args) throws org.apache.thrift.TException {
        deleteProjectbyFeewDeal_result result = new deleteProjectbyFeewDeal_result();
        try {
          result.success = iface.deleteProjectbyFeewDeal(args.repayId, args.projectId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class checkFeewDealByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkFeewDealByProjectId_args> {
      public checkFeewDealByProjectId() {
        super("checkFeewDealByProjectId");
      }

      public checkFeewDealByProjectId_args getEmptyArgsInstance() {
        return new checkFeewDealByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkFeewDealByProjectId_result getResult(I iface, checkFeewDealByProjectId_args args) throws org.apache.thrift.TException {
        checkFeewDealByProjectId_result result = new checkFeewDealByProjectId_result();
        try {
          result.success = iface.checkFeewDealByProjectId(args.projectId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateInsertRegFeewDealbyprocess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateInsertRegFeewDealbyprocess_args> {
      public updateInsertRegFeewDealbyprocess() {
        super("updateInsertRegFeewDealbyprocess");
      }

      public updateInsertRegFeewDealbyprocess_args getEmptyArgsInstance() {
        return new updateInsertRegFeewDealbyprocess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateInsertRegFeewDealbyprocess_result getResult(I iface, updateInsertRegFeewDealbyprocess_args args) throws org.apache.thrift.TException {
        updateInsertRegFeewDealbyprocess_result result = new updateInsertRegFeewDealbyprocess_result();
        try {
          result.success = iface.updateInsertRegFeewDealbyprocess(args.reason, args.feewdel, args.repayId, args.projectId, args.loanId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findFeeWaiverApplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFeeWaiverApplication_args> {
      public findFeeWaiverApplication() {
        super("findFeeWaiverApplication");
      }

      public findFeeWaiverApplication_args getEmptyArgsInstance() {
        return new findFeeWaiverApplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFeeWaiverApplication_result getResult(I iface, findFeeWaiverApplication_args args) throws org.apache.thrift.TException {
        findFeeWaiverApplication_result result = new findFeeWaiverApplication_result();
        result.success = iface.findFeeWaiverApplication(args.userId, args.repayId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("insertLoanFeewdelInfo", new insertLoanFeewdelInfo());
      processMap.put("uploadinstFeewapply", new uploadinstFeewapply());
      processMap.put("queryRegFeewapplyFile", new queryRegFeewapplyFile());
      processMap.put("queryRegFeewapplyFileTotal", new queryRegFeewapplyFileTotal());
      processMap.put("queryRegFeewDealbyprocess", new queryRegFeewDealbyprocess());
      processMap.put("queryRegFeewReasonbyprocess", new queryRegFeewReasonbyprocess());
      processMap.put("updateRegFeewDealbyprocess", new updateRegFeewDealbyprocess());
      processMap.put("queryRegFeewprojectinfobyproId", new queryRegFeewprojectinfobyproId());
      processMap.put("queryRegFeewprojectinfobyrepayId", new queryRegFeewprojectinfobyrepayId());
      processMap.put("uploadinstiDvertapply", new uploadinstiDvertapply());
      processMap.put("updateEmbezzleFile", new updateEmbezzleFile());
      processMap.put("queryRegDivertapplyFile", new queryRegDivertapplyFile());
      processMap.put("changeReqstFeewdel", new changeReqstFeewdel());
      processMap.put("deleteProjectbyFeewDealList", new deleteProjectbyFeewDealList());
      processMap.put("deleteProjectbyFeewDeal", new deleteProjectbyFeewDeal());
      processMap.put("checkFeewDealByProjectId", new checkFeewDealByProjectId());
      processMap.put("updateInsertRegFeewDealbyprocess", new updateInsertRegFeewDealbyprocess());
      processMap.put("findFeeWaiverApplication", new findFeeWaiverApplication());
      return processMap;
    }

    public static class insertLoanFeewdelInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertLoanFeewdelInfo_args, Integer> {
      public insertLoanFeewdelInfo() {
        super("insertLoanFeewdelInfo");
      }

      public insertLoanFeewdelInfo_args getEmptyArgsInstance() {
        return new insertLoanFeewdelInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertLoanFeewdelInfo_result result = new insertLoanFeewdelInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertLoanFeewdelInfo_result result = new insertLoanFeewdelInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertLoanFeewdelInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertLoanFeewdelInfo(args.reason, args.feewdel, args.projectId, args.loanId,resultHandler);
      }
    }

    public static class uploadinstFeewapply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadinstFeewapply_args, Integer> {
      public uploadinstFeewapply() {
        super("uploadinstFeewapply");
      }

      public uploadinstFeewapply_args getEmptyArgsInstance() {
        return new uploadinstFeewapply_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            uploadinstFeewapply_result result = new uploadinstFeewapply_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadinstFeewapply_result result = new uploadinstFeewapply_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadinstFeewapply_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.uploadinstFeewapply(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class queryRegFeewapplyFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRegFeewapplyFile_args, List<RegAdvapplyFileview>> {
      public queryRegFeewapplyFile() {
        super("queryRegFeewapplyFile");
      }

      public queryRegFeewapplyFile_args getEmptyArgsInstance() {
        return new queryRegFeewapplyFile_args();
      }

      public AsyncMethodCallback<List<RegAdvapplyFileview>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RegAdvapplyFileview>>() { 
          public void onComplete(List<RegAdvapplyFileview> o) {
            queryRegFeewapplyFile_result result = new queryRegFeewapplyFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRegFeewapplyFile_result result = new queryRegFeewapplyFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRegFeewapplyFile_args args, org.apache.thrift.async.AsyncMethodCallback<List<RegAdvapplyFileview>> resultHandler) throws TException {
        iface.queryRegFeewapplyFile(args.repayId, args.page, args.rows,resultHandler);
      }
    }

    public static class queryRegFeewapplyFileTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRegFeewapplyFileTotal_args, Integer> {
      public queryRegFeewapplyFileTotal() {
        super("queryRegFeewapplyFileTotal");
      }

      public queryRegFeewapplyFileTotal_args getEmptyArgsInstance() {
        return new queryRegFeewapplyFileTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryRegFeewapplyFileTotal_result result = new queryRegFeewapplyFileTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRegFeewapplyFileTotal_result result = new queryRegFeewapplyFileTotal_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRegFeewapplyFileTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryRegFeewapplyFileTotal(args.repayId,resultHandler);
      }
    }

    public static class queryRegFeewDealbyprocess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRegFeewDealbyprocess_args, List<RepayFeewdtlDatView>> {
      public queryRegFeewDealbyprocess() {
        super("queryRegFeewDealbyprocess");
      }

      public queryRegFeewDealbyprocess_args getEmptyArgsInstance() {
        return new queryRegFeewDealbyprocess_args();
      }

      public AsyncMethodCallback<List<RepayFeewdtlDatView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepayFeewdtlDatView>>() { 
          public void onComplete(List<RepayFeewdtlDatView> o) {
            queryRegFeewDealbyprocess_result result = new queryRegFeewDealbyprocess_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRegFeewDealbyprocess_result result = new queryRegFeewDealbyprocess_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRegFeewDealbyprocess_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepayFeewdtlDatView>> resultHandler) throws TException {
        iface.queryRegFeewDealbyprocess(args.repayId,resultHandler);
      }
    }

    public static class queryRegFeewReasonbyprocess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRegFeewReasonbyprocess_args, String> {
      public queryRegFeewReasonbyprocess() {
        super("queryRegFeewReasonbyprocess");
      }

      public queryRegFeewReasonbyprocess_args getEmptyArgsInstance() {
        return new queryRegFeewReasonbyprocess_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            queryRegFeewReasonbyprocess_result result = new queryRegFeewReasonbyprocess_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRegFeewReasonbyprocess_result result = new queryRegFeewReasonbyprocess_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRegFeewReasonbyprocess_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.queryRegFeewReasonbyprocess(args.repayId,resultHandler);
      }
    }

    public static class updateRegFeewDealbyprocess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRegFeewDealbyprocess_args, Integer> {
      public updateRegFeewDealbyprocess() {
        super("updateRegFeewDealbyprocess");
      }

      public updateRegFeewDealbyprocess_args getEmptyArgsInstance() {
        return new updateRegFeewDealbyprocess_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateRegFeewDealbyprocess_result result = new updateRegFeewDealbyprocess_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRegFeewDealbyprocess_result result = new updateRegFeewDealbyprocess_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRegFeewDealbyprocess_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateRegFeewDealbyprocess(args.reason, args.FeewInfo, args.repayId,resultHandler);
      }
    }

    public static class queryRegFeewprojectinfobyproId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRegFeewprojectinfobyproId_args, RepayFeewdtlDatView> {
      public queryRegFeewprojectinfobyproId() {
        super("queryRegFeewprojectinfobyproId");
      }

      public queryRegFeewprojectinfobyproId_args getEmptyArgsInstance() {
        return new queryRegFeewprojectinfobyproId_args();
      }

      public AsyncMethodCallback<RepayFeewdtlDatView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RepayFeewdtlDatView>() { 
          public void onComplete(RepayFeewdtlDatView o) {
            queryRegFeewprojectinfobyproId_result result = new queryRegFeewprojectinfobyproId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRegFeewprojectinfobyproId_result result = new queryRegFeewprojectinfobyproId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRegFeewprojectinfobyproId_args args, org.apache.thrift.async.AsyncMethodCallback<RepayFeewdtlDatView> resultHandler) throws TException {
        iface.queryRegFeewprojectinfobyproId(args.projectId,resultHandler);
      }
    }

    public static class queryRegFeewprojectinfobyrepayId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRegFeewprojectinfobyrepayId_args, RepayFeewdtlDatView> {
      public queryRegFeewprojectinfobyrepayId() {
        super("queryRegFeewprojectinfobyrepayId");
      }

      public queryRegFeewprojectinfobyrepayId_args getEmptyArgsInstance() {
        return new queryRegFeewprojectinfobyrepayId_args();
      }

      public AsyncMethodCallback<RepayFeewdtlDatView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RepayFeewdtlDatView>() { 
          public void onComplete(RepayFeewdtlDatView o) {
            queryRegFeewprojectinfobyrepayId_result result = new queryRegFeewprojectinfobyrepayId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRegFeewprojectinfobyrepayId_result result = new queryRegFeewprojectinfobyrepayId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRegFeewprojectinfobyrepayId_args args, org.apache.thrift.async.AsyncMethodCallback<RepayFeewdtlDatView> resultHandler) throws TException {
        iface.queryRegFeewprojectinfobyrepayId(args.repayId,resultHandler);
      }
    }

    public static class uploadinstiDvertapply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadinstiDvertapply_args, Integer> {
      public uploadinstiDvertapply() {
        super("uploadinstiDvertapply");
      }

      public uploadinstiDvertapply_args getEmptyArgsInstance() {
        return new uploadinstiDvertapply_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            uploadinstiDvertapply_result result = new uploadinstiDvertapply_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadinstiDvertapply_result result = new uploadinstiDvertapply_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadinstiDvertapply_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.uploadinstiDvertapply(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class updateEmbezzleFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateEmbezzleFile_args, Integer> {
      public updateEmbezzleFile() {
        super("updateEmbezzleFile");
      }

      public updateEmbezzleFile_args getEmptyArgsInstance() {
        return new updateEmbezzleFile_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateEmbezzleFile_result result = new updateEmbezzleFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateEmbezzleFile_result result = new updateEmbezzleFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateEmbezzleFile_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateEmbezzleFile(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class queryRegDivertapplyFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRegDivertapplyFile_args, List<RegAdvapplyFileview>> {
      public queryRegDivertapplyFile() {
        super("queryRegDivertapplyFile");
      }

      public queryRegDivertapplyFile_args getEmptyArgsInstance() {
        return new queryRegDivertapplyFile_args();
      }

      public AsyncMethodCallback<List<RegAdvapplyFileview>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RegAdvapplyFileview>>() { 
          public void onComplete(List<RegAdvapplyFileview> o) {
            queryRegDivertapplyFile_result result = new queryRegDivertapplyFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRegDivertapplyFile_result result = new queryRegDivertapplyFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRegDivertapplyFile_args args, org.apache.thrift.async.AsyncMethodCallback<List<RegAdvapplyFileview>> resultHandler) throws TException {
        iface.queryRegDivertapplyFile(args.DivertId,resultHandler);
      }
    }

    public static class changeReqstFeewdel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeReqstFeewdel_args, Integer> {
      public changeReqstFeewdel() {
        super("changeReqstFeewdel");
      }

      public changeReqstFeewdel_args getEmptyArgsInstance() {
        return new changeReqstFeewdel_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            changeReqstFeewdel_result result = new changeReqstFeewdel_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeReqstFeewdel_result result = new changeReqstFeewdel_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeReqstFeewdel_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.changeReqstFeewdel(args.reqStatus, args.repayId,resultHandler);
      }
    }

    public static class deleteProjectbyFeewDealList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProjectbyFeewDealList_args, Integer> {
      public deleteProjectbyFeewDealList() {
        super("deleteProjectbyFeewDealList");
      }

      public deleteProjectbyFeewDealList_args getEmptyArgsInstance() {
        return new deleteProjectbyFeewDealList_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteProjectbyFeewDealList_result result = new deleteProjectbyFeewDealList_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProjectbyFeewDealList_result result = new deleteProjectbyFeewDealList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProjectbyFeewDealList_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteProjectbyFeewDealList(args.repayIds, args.projectIds,resultHandler);
      }
    }

    public static class deleteProjectbyFeewDeal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProjectbyFeewDeal_args, Integer> {
      public deleteProjectbyFeewDeal() {
        super("deleteProjectbyFeewDeal");
      }

      public deleteProjectbyFeewDeal_args getEmptyArgsInstance() {
        return new deleteProjectbyFeewDeal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteProjectbyFeewDeal_result result = new deleteProjectbyFeewDeal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProjectbyFeewDeal_result result = new deleteProjectbyFeewDeal_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProjectbyFeewDeal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteProjectbyFeewDeal(args.repayId, args.projectId,resultHandler);
      }
    }

    public static class checkFeewDealByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkFeewDealByProjectId_args, Integer> {
      public checkFeewDealByProjectId() {
        super("checkFeewDealByProjectId");
      }

      public checkFeewDealByProjectId_args getEmptyArgsInstance() {
        return new checkFeewDealByProjectId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkFeewDealByProjectId_result result = new checkFeewDealByProjectId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkFeewDealByProjectId_result result = new checkFeewDealByProjectId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkFeewDealByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkFeewDealByProjectId(args.projectId,resultHandler);
      }
    }

    public static class updateInsertRegFeewDealbyprocess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateInsertRegFeewDealbyprocess_args, Integer> {
      public updateInsertRegFeewDealbyprocess() {
        super("updateInsertRegFeewDealbyprocess");
      }

      public updateInsertRegFeewDealbyprocess_args getEmptyArgsInstance() {
        return new updateInsertRegFeewDealbyprocess_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateInsertRegFeewDealbyprocess_result result = new updateInsertRegFeewDealbyprocess_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateInsertRegFeewDealbyprocess_result result = new updateInsertRegFeewDealbyprocess_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateInsertRegFeewDealbyprocess_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateInsertRegFeewDealbyprocess(args.reason, args.feewdel, args.repayId, args.projectId, args.loanId,resultHandler);
      }
    }

    public static class findFeeWaiverApplication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findFeeWaiverApplication_args, FeeWaiverApplicationDTO> {
      public findFeeWaiverApplication() {
        super("findFeeWaiverApplication");
      }

      public findFeeWaiverApplication_args getEmptyArgsInstance() {
        return new findFeeWaiverApplication_args();
      }

      public AsyncMethodCallback<FeeWaiverApplicationDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FeeWaiverApplicationDTO>() { 
          public void onComplete(FeeWaiverApplicationDTO o) {
            findFeeWaiverApplication_result result = new findFeeWaiverApplication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findFeeWaiverApplication_result result = new findFeeWaiverApplication_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findFeeWaiverApplication_args args, org.apache.thrift.async.AsyncMethodCallback<FeeWaiverApplicationDTO> resultHandler) throws TException {
        iface.findFeeWaiverApplication(args.userId, args.repayId,resultHandler);
      }
    }

  }

  public static class insertLoanFeewdelInfo_args implements org.apache.thrift.TBase<insertLoanFeewdelInfo_args, insertLoanFeewdelInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertLoanFeewdelInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertLoanFeewdelInfo_args");

    private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEEWDEL_FIELD_DESC = new org.apache.thrift.protocol.TField("feewdel", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertLoanFeewdelInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertLoanFeewdelInfo_argsTupleSchemeFactory());
    }

    public String reason; // required
    public String feewdel; // required
    public int projectId; // required
    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REASON((short)1, "reason"),
      FEEWDEL((short)2, "feewdel"),
      PROJECT_ID((short)3, "projectId"),
      LOAN_ID((short)4, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REASON
            return REASON;
          case 2: // FEEWDEL
            return FEEWDEL;
          case 3: // PROJECT_ID
            return PROJECT_ID;
          case 4: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __LOANID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEEWDEL, new org.apache.thrift.meta_data.FieldMetaData("feewdel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertLoanFeewdelInfo_args.class, metaDataMap);
    }

    public insertLoanFeewdelInfo_args() {
    }

    public insertLoanFeewdelInfo_args(
      String reason,
      String feewdel,
      int projectId,
      int loanId)
    {
      this();
      this.reason = reason;
      this.feewdel = feewdel;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertLoanFeewdelInfo_args(insertLoanFeewdelInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
      if (other.isSetFeewdel()) {
        this.feewdel = other.feewdel;
      }
      this.projectId = other.projectId;
      this.loanId = other.loanId;
    }

    public insertLoanFeewdelInfo_args deepCopy() {
      return new insertLoanFeewdelInfo_args(this);
    }

    @Override
    public void clear() {
      this.reason = null;
      this.feewdel = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public String getReason() {
      return this.reason;
    }

    public insertLoanFeewdelInfo_args setReason(String reason) {
      this.reason = reason;
      return this;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been assigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public String getFeewdel() {
      return this.feewdel;
    }

    public insertLoanFeewdelInfo_args setFeewdel(String feewdel) {
      this.feewdel = feewdel;
      return this;
    }

    public void unsetFeewdel() {
      this.feewdel = null;
    }

    /** Returns true if field feewdel is set (has been assigned a value) and false otherwise */
    public boolean isSetFeewdel() {
      return this.feewdel != null;
    }

    public void setFeewdelIsSet(boolean value) {
      if (!value) {
        this.feewdel = null;
      }
    }

    public int getProjectId() {
      return this.projectId;
    }

    public insertLoanFeewdelInfo_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getLoanId() {
      return this.loanId;
    }

    public insertLoanFeewdelInfo_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((String)value);
        }
        break;

      case FEEWDEL:
        if (value == null) {
          unsetFeewdel();
        } else {
          setFeewdel((String)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REASON:
        return getReason();

      case FEEWDEL:
        return getFeewdel();

      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REASON:
        return isSetReason();
      case FEEWDEL:
        return isSetFeewdel();
      case PROJECT_ID:
        return isSetProjectId();
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertLoanFeewdelInfo_args)
        return this.equals((insertLoanFeewdelInfo_args)that);
      return false;
    }

    public boolean equals(insertLoanFeewdelInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      boolean this_present_feewdel = true && this.isSetFeewdel();
      boolean that_present_feewdel = true && that.isSetFeewdel();
      if (this_present_feewdel || that_present_feewdel) {
        if (!(this_present_feewdel && that_present_feewdel))
          return false;
        if (!this.feewdel.equals(that.feewdel))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reason = true && (isSetReason());
      list.add(present_reason);
      if (present_reason)
        list.add(reason);

      boolean present_feewdel = true && (isSetFeewdel());
      list.add(present_feewdel);
      if (present_feewdel)
        list.add(feewdel);

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertLoanFeewdelInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeewdel()).compareTo(other.isSetFeewdel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeewdel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feewdel, other.feewdel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertLoanFeewdelInfo_args(");
      boolean first = true;

      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feewdel:");
      if (this.feewdel == null) {
        sb.append("null");
      } else {
        sb.append(this.feewdel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertLoanFeewdelInfo_argsStandardSchemeFactory implements SchemeFactory {
      public insertLoanFeewdelInfo_argsStandardScheme getScheme() {
        return new insertLoanFeewdelInfo_argsStandardScheme();
      }
    }

    private static class insertLoanFeewdelInfo_argsStandardScheme extends StandardScheme<insertLoanFeewdelInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertLoanFeewdelInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reason = iprot.readString();
                struct.setReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEEWDEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feewdel = iprot.readString();
                struct.setFeewdelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertLoanFeewdelInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reason != null) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
        if (struct.feewdel != null) {
          oprot.writeFieldBegin(FEEWDEL_FIELD_DESC);
          oprot.writeString(struct.feewdel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertLoanFeewdelInfo_argsTupleSchemeFactory implements SchemeFactory {
      public insertLoanFeewdelInfo_argsTupleScheme getScheme() {
        return new insertLoanFeewdelInfo_argsTupleScheme();
      }
    }

    private static class insertLoanFeewdelInfo_argsTupleScheme extends TupleScheme<insertLoanFeewdelInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertLoanFeewdelInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReason()) {
          optionals.set(0);
        }
        if (struct.isSetFeewdel()) {
          optionals.set(1);
        }
        if (struct.isSetProjectId()) {
          optionals.set(2);
        }
        if (struct.isSetLoanId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetReason()) {
          oprot.writeString(struct.reason);
        }
        if (struct.isSetFeewdel()) {
          oprot.writeString(struct.feewdel);
        }
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertLoanFeewdelInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.reason = iprot.readString();
          struct.setReasonIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feewdel = iprot.readString();
          struct.setFeewdelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class insertLoanFeewdelInfo_result implements org.apache.thrift.TBase<insertLoanFeewdelInfo_result, insertLoanFeewdelInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertLoanFeewdelInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertLoanFeewdelInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertLoanFeewdelInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertLoanFeewdelInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertLoanFeewdelInfo_result.class, metaDataMap);
    }

    public insertLoanFeewdelInfo_result() {
    }

    public insertLoanFeewdelInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertLoanFeewdelInfo_result(insertLoanFeewdelInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public insertLoanFeewdelInfo_result deepCopy() {
      return new insertLoanFeewdelInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertLoanFeewdelInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertLoanFeewdelInfo_result)
        return this.equals((insertLoanFeewdelInfo_result)that);
      return false;
    }

    public boolean equals(insertLoanFeewdelInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertLoanFeewdelInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertLoanFeewdelInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertLoanFeewdelInfo_resultStandardSchemeFactory implements SchemeFactory {
      public insertLoanFeewdelInfo_resultStandardScheme getScheme() {
        return new insertLoanFeewdelInfo_resultStandardScheme();
      }
    }

    private static class insertLoanFeewdelInfo_resultStandardScheme extends StandardScheme<insertLoanFeewdelInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertLoanFeewdelInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertLoanFeewdelInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertLoanFeewdelInfo_resultTupleSchemeFactory implements SchemeFactory {
      public insertLoanFeewdelInfo_resultTupleScheme getScheme() {
        return new insertLoanFeewdelInfo_resultTupleScheme();
      }
    }

    private static class insertLoanFeewdelInfo_resultTupleScheme extends TupleScheme<insertLoanFeewdelInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertLoanFeewdelInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertLoanFeewdelInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class uploadinstFeewapply_args implements org.apache.thrift.TBase<uploadinstFeewapply_args, uploadinstFeewapply_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadinstFeewapply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadinstFeewapply_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadinstFeewapply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadinstFeewapply_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadinstFeewapply_args.class, metaDataMap);
    }

    public uploadinstFeewapply_args() {
    }

    public uploadinstFeewapply_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadinstFeewapply_args(uploadinstFeewapply_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public uploadinstFeewapply_args deepCopy() {
      return new uploadinstFeewapply_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public uploadinstFeewapply_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadinstFeewapply_args)
        return this.equals((uploadinstFeewapply_args)that);
      return false;
    }

    public boolean equals(uploadinstFeewapply_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadinstFeewapply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadinstFeewapply_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadinstFeewapply_argsStandardSchemeFactory implements SchemeFactory {
      public uploadinstFeewapply_argsStandardScheme getScheme() {
        return new uploadinstFeewapply_argsStandardScheme();
      }
    }

    private static class uploadinstFeewapply_argsStandardScheme extends StandardScheme<uploadinstFeewapply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadinstFeewapply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadinstFeewapply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadinstFeewapply_argsTupleSchemeFactory implements SchemeFactory {
      public uploadinstFeewapply_argsTupleScheme getScheme() {
        return new uploadinstFeewapply_argsTupleScheme();
      }
    }

    private static class uploadinstFeewapply_argsTupleScheme extends TupleScheme<uploadinstFeewapply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadinstFeewapply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadinstFeewapply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class uploadinstFeewapply_result implements org.apache.thrift.TBase<uploadinstFeewapply_result, uploadinstFeewapply_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadinstFeewapply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadinstFeewapply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadinstFeewapply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadinstFeewapply_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadinstFeewapply_result.class, metaDataMap);
    }

    public uploadinstFeewapply_result() {
    }

    public uploadinstFeewapply_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadinstFeewapply_result(uploadinstFeewapply_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public uploadinstFeewapply_result deepCopy() {
      return new uploadinstFeewapply_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public uploadinstFeewapply_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public uploadinstFeewapply_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadinstFeewapply_result)
        return this.equals((uploadinstFeewapply_result)that);
      return false;
    }

    public boolean equals(uploadinstFeewapply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadinstFeewapply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadinstFeewapply_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadinstFeewapply_resultStandardSchemeFactory implements SchemeFactory {
      public uploadinstFeewapply_resultStandardScheme getScheme() {
        return new uploadinstFeewapply_resultStandardScheme();
      }
    }

    private static class uploadinstFeewapply_resultStandardScheme extends StandardScheme<uploadinstFeewapply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadinstFeewapply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadinstFeewapply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadinstFeewapply_resultTupleSchemeFactory implements SchemeFactory {
      public uploadinstFeewapply_resultTupleScheme getScheme() {
        return new uploadinstFeewapply_resultTupleScheme();
      }
    }

    private static class uploadinstFeewapply_resultTupleScheme extends TupleScheme<uploadinstFeewapply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadinstFeewapply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadinstFeewapply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewapplyFile_args implements org.apache.thrift.TBase<queryRegFeewapplyFile_args, queryRegFeewapplyFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewapplyFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewapplyFile_args");

    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewapplyFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewapplyFile_argsTupleSchemeFactory());
    }

    public int repayId; // required
    public int page; // required
    public int rows; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_ID((short)1, "repayId"),
      PAGE((short)2, "page"),
      ROWS((short)3, "rows");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_ID
            return REPAY_ID;
          case 2: // PAGE
            return PAGE;
          case 3: // ROWS
            return ROWS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYID_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __ROWS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewapplyFile_args.class, metaDataMap);
    }

    public queryRegFeewapplyFile_args() {
    }

    public queryRegFeewapplyFile_args(
      int repayId,
      int page,
      int rows)
    {
      this();
      this.repayId = repayId;
      setRepayIdIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.rows = rows;
      setRowsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewapplyFile_args(queryRegFeewapplyFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.repayId = other.repayId;
      this.page = other.page;
      this.rows = other.rows;
    }

    public queryRegFeewapplyFile_args deepCopy() {
      return new queryRegFeewapplyFile_args(this);
    }

    @Override
    public void clear() {
      setRepayIdIsSet(false);
      this.repayId = 0;
      setPageIsSet(false);
      this.page = 0;
      setRowsIsSet(false);
      this.rows = 0;
    }

    public int getRepayId() {
      return this.repayId;
    }

    public queryRegFeewapplyFile_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public queryRegFeewapplyFile_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getRows() {
      return this.rows;
    }

    public queryRegFeewapplyFile_args setRows(int rows) {
      this.rows = rows;
      setRowsIsSet(true);
      return this;
    }

    public void unsetRows() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
    }

    /** Returns true if field rows is set (has been assigned a value) and false otherwise */
    public boolean isSetRows() {
      return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
    }

    public void setRowsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case ROWS:
        if (value == null) {
          unsetRows();
        } else {
          setRows((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      case PAGE:
        return Integer.valueOf(getPage());

      case ROWS:
        return Integer.valueOf(getRows());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_ID:
        return isSetRepayId();
      case PAGE:
        return isSetPage();
      case ROWS:
        return isSetRows();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewapplyFile_args)
        return this.equals((queryRegFeewapplyFile_args)that);
      return false;
    }

    public boolean equals(queryRegFeewapplyFile_args that) {
      if (that == null)
        return false;

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_rows = true;
      boolean that_present_rows = true;
      if (this_present_rows || that_present_rows) {
        if (!(this_present_rows && that_present_rows))
          return false;
        if (this.rows != that.rows)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      boolean present_page = true;
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_rows = true;
      list.add(present_rows);
      if (present_rows)
        list.add(rows);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewapplyFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRows()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewapplyFile_args(");
      boolean first = true;

      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rows:");
      sb.append(this.rows);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewapplyFile_argsStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewapplyFile_argsStandardScheme getScheme() {
        return new queryRegFeewapplyFile_argsStandardScheme();
      }
    }

    private static class queryRegFeewapplyFile_argsStandardScheme extends StandardScheme<queryRegFeewapplyFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewapplyFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROWS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rows = iprot.readI32();
                struct.setRowsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewapplyFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ROWS_FIELD_DESC);
        oprot.writeI32(struct.rows);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewapplyFile_argsTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewapplyFile_argsTupleScheme getScheme() {
        return new queryRegFeewapplyFile_argsTupleScheme();
      }
    }

    private static class queryRegFeewapplyFile_argsTupleScheme extends TupleScheme<queryRegFeewapplyFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewapplyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetRows()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetRows()) {
          oprot.writeI32(struct.rows);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewapplyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rows = iprot.readI32();
          struct.setRowsIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewapplyFile_result implements org.apache.thrift.TBase<queryRegFeewapplyFile_result, queryRegFeewapplyFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewapplyFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewapplyFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewapplyFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewapplyFile_resultTupleSchemeFactory());
    }

    public List<RegAdvapplyFileview> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegAdvapplyFileview.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewapplyFile_result.class, metaDataMap);
    }

    public queryRegFeewapplyFile_result() {
    }

    public queryRegFeewapplyFile_result(
      List<RegAdvapplyFileview> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewapplyFile_result(queryRegFeewapplyFile_result other) {
      if (other.isSetSuccess()) {
        List<RegAdvapplyFileview> __this__success = new ArrayList<RegAdvapplyFileview>(other.success.size());
        for (RegAdvapplyFileview other_element : other.success) {
          __this__success.add(new RegAdvapplyFileview(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRegFeewapplyFile_result deepCopy() {
      return new queryRegFeewapplyFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RegAdvapplyFileview> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RegAdvapplyFileview elem) {
      if (this.success == null) {
        this.success = new ArrayList<RegAdvapplyFileview>();
      }
      this.success.add(elem);
    }

    public List<RegAdvapplyFileview> getSuccess() {
      return this.success;
    }

    public queryRegFeewapplyFile_result setSuccess(List<RegAdvapplyFileview> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRegFeewapplyFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RegAdvapplyFileview>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewapplyFile_result)
        return this.equals((queryRegFeewapplyFile_result)that);
      return false;
    }

    public boolean equals(queryRegFeewapplyFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewapplyFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewapplyFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewapplyFile_resultStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewapplyFile_resultStandardScheme getScheme() {
        return new queryRegFeewapplyFile_resultStandardScheme();
      }
    }

    private static class queryRegFeewapplyFile_resultStandardScheme extends StandardScheme<queryRegFeewapplyFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewapplyFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.success = new ArrayList<RegAdvapplyFileview>(_list248.size);
                  RegAdvapplyFileview _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = new RegAdvapplyFileview();
                    _elem249.read(iprot);
                    struct.success.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewapplyFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RegAdvapplyFileview _iter251 : struct.success)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewapplyFile_resultTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewapplyFile_resultTupleScheme getScheme() {
        return new queryRegFeewapplyFile_resultTupleScheme();
      }
    }

    private static class queryRegFeewapplyFile_resultTupleScheme extends TupleScheme<queryRegFeewapplyFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewapplyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RegAdvapplyFileview _iter252 : struct.success)
            {
              _iter252.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewapplyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RegAdvapplyFileview>(_list253.size);
            RegAdvapplyFileview _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              _elem254 = new RegAdvapplyFileview();
              _elem254.read(iprot);
              struct.success.add(_elem254);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewapplyFileTotal_args implements org.apache.thrift.TBase<queryRegFeewapplyFileTotal_args, queryRegFeewapplyFileTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewapplyFileTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewapplyFileTotal_args");

    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewapplyFileTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewapplyFileTotal_argsTupleSchemeFactory());
    }

    public int repayId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_ID((short)1, "repayId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_ID
            return REPAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewapplyFileTotal_args.class, metaDataMap);
    }

    public queryRegFeewapplyFileTotal_args() {
    }

    public queryRegFeewapplyFileTotal_args(
      int repayId)
    {
      this();
      this.repayId = repayId;
      setRepayIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewapplyFileTotal_args(queryRegFeewapplyFileTotal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.repayId = other.repayId;
    }

    public queryRegFeewapplyFileTotal_args deepCopy() {
      return new queryRegFeewapplyFileTotal_args(this);
    }

    @Override
    public void clear() {
      setRepayIdIsSet(false);
      this.repayId = 0;
    }

    public int getRepayId() {
      return this.repayId;
    }

    public queryRegFeewapplyFileTotal_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_ID:
        return isSetRepayId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewapplyFileTotal_args)
        return this.equals((queryRegFeewapplyFileTotal_args)that);
      return false;
    }

    public boolean equals(queryRegFeewapplyFileTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewapplyFileTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewapplyFileTotal_args(");
      boolean first = true;

      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewapplyFileTotal_argsStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewapplyFileTotal_argsStandardScheme getScheme() {
        return new queryRegFeewapplyFileTotal_argsStandardScheme();
      }
    }

    private static class queryRegFeewapplyFileTotal_argsStandardScheme extends StandardScheme<queryRegFeewapplyFileTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewapplyFileTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewapplyFileTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewapplyFileTotal_argsTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewapplyFileTotal_argsTupleScheme getScheme() {
        return new queryRegFeewapplyFileTotal_argsTupleScheme();
      }
    }

    private static class queryRegFeewapplyFileTotal_argsTupleScheme extends TupleScheme<queryRegFeewapplyFileTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewapplyFileTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewapplyFileTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewapplyFileTotal_result implements org.apache.thrift.TBase<queryRegFeewapplyFileTotal_result, queryRegFeewapplyFileTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewapplyFileTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewapplyFileTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewapplyFileTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewapplyFileTotal_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewapplyFileTotal_result.class, metaDataMap);
    }

    public queryRegFeewapplyFileTotal_result() {
    }

    public queryRegFeewapplyFileTotal_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewapplyFileTotal_result(queryRegFeewapplyFileTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRegFeewapplyFileTotal_result deepCopy() {
      return new queryRegFeewapplyFileTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryRegFeewapplyFileTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRegFeewapplyFileTotal_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewapplyFileTotal_result)
        return this.equals((queryRegFeewapplyFileTotal_result)that);
      return false;
    }

    public boolean equals(queryRegFeewapplyFileTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewapplyFileTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewapplyFileTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewapplyFileTotal_resultStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewapplyFileTotal_resultStandardScheme getScheme() {
        return new queryRegFeewapplyFileTotal_resultStandardScheme();
      }
    }

    private static class queryRegFeewapplyFileTotal_resultStandardScheme extends StandardScheme<queryRegFeewapplyFileTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewapplyFileTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewapplyFileTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewapplyFileTotal_resultTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewapplyFileTotal_resultTupleScheme getScheme() {
        return new queryRegFeewapplyFileTotal_resultTupleScheme();
      }
    }

    private static class queryRegFeewapplyFileTotal_resultTupleScheme extends TupleScheme<queryRegFeewapplyFileTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewapplyFileTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewapplyFileTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewDealbyprocess_args implements org.apache.thrift.TBase<queryRegFeewDealbyprocess_args, queryRegFeewDealbyprocess_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewDealbyprocess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewDealbyprocess_args");

    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewDealbyprocess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewDealbyprocess_argsTupleSchemeFactory());
    }

    public int repayId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_ID((short)1, "repayId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_ID
            return REPAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewDealbyprocess_args.class, metaDataMap);
    }

    public queryRegFeewDealbyprocess_args() {
    }

    public queryRegFeewDealbyprocess_args(
      int repayId)
    {
      this();
      this.repayId = repayId;
      setRepayIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewDealbyprocess_args(queryRegFeewDealbyprocess_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.repayId = other.repayId;
    }

    public queryRegFeewDealbyprocess_args deepCopy() {
      return new queryRegFeewDealbyprocess_args(this);
    }

    @Override
    public void clear() {
      setRepayIdIsSet(false);
      this.repayId = 0;
    }

    public int getRepayId() {
      return this.repayId;
    }

    public queryRegFeewDealbyprocess_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_ID:
        return isSetRepayId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewDealbyprocess_args)
        return this.equals((queryRegFeewDealbyprocess_args)that);
      return false;
    }

    public boolean equals(queryRegFeewDealbyprocess_args that) {
      if (that == null)
        return false;

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewDealbyprocess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewDealbyprocess_args(");
      boolean first = true;

      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewDealbyprocess_argsStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewDealbyprocess_argsStandardScheme getScheme() {
        return new queryRegFeewDealbyprocess_argsStandardScheme();
      }
    }

    private static class queryRegFeewDealbyprocess_argsStandardScheme extends StandardScheme<queryRegFeewDealbyprocess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewDealbyprocess_argsTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewDealbyprocess_argsTupleScheme getScheme() {
        return new queryRegFeewDealbyprocess_argsTupleScheme();
      }
    }

    private static class queryRegFeewDealbyprocess_argsTupleScheme extends TupleScheme<queryRegFeewDealbyprocess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewDealbyprocess_result implements org.apache.thrift.TBase<queryRegFeewDealbyprocess_result, queryRegFeewDealbyprocess_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewDealbyprocess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewDealbyprocess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewDealbyprocess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewDealbyprocess_resultTupleSchemeFactory());
    }

    public List<RepayFeewdtlDatView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayFeewdtlDatView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewDealbyprocess_result.class, metaDataMap);
    }

    public queryRegFeewDealbyprocess_result() {
    }

    public queryRegFeewDealbyprocess_result(
      List<RepayFeewdtlDatView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewDealbyprocess_result(queryRegFeewDealbyprocess_result other) {
      if (other.isSetSuccess()) {
        List<RepayFeewdtlDatView> __this__success = new ArrayList<RepayFeewdtlDatView>(other.success.size());
        for (RepayFeewdtlDatView other_element : other.success) {
          __this__success.add(new RepayFeewdtlDatView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRegFeewDealbyprocess_result deepCopy() {
      return new queryRegFeewDealbyprocess_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepayFeewdtlDatView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepayFeewdtlDatView elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepayFeewdtlDatView>();
      }
      this.success.add(elem);
    }

    public List<RepayFeewdtlDatView> getSuccess() {
      return this.success;
    }

    public queryRegFeewDealbyprocess_result setSuccess(List<RepayFeewdtlDatView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRegFeewDealbyprocess_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepayFeewdtlDatView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewDealbyprocess_result)
        return this.equals((queryRegFeewDealbyprocess_result)that);
      return false;
    }

    public boolean equals(queryRegFeewDealbyprocess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewDealbyprocess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewDealbyprocess_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewDealbyprocess_resultStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewDealbyprocess_resultStandardScheme getScheme() {
        return new queryRegFeewDealbyprocess_resultStandardScheme();
      }
    }

    private static class queryRegFeewDealbyprocess_resultStandardScheme extends StandardScheme<queryRegFeewDealbyprocess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.success = new ArrayList<RepayFeewdtlDatView>(_list256.size);
                  RepayFeewdtlDatView _elem257;
                  for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                  {
                    _elem257 = new RepayFeewdtlDatView();
                    _elem257.read(iprot);
                    struct.success.add(_elem257);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepayFeewdtlDatView _iter259 : struct.success)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewDealbyprocess_resultTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewDealbyprocess_resultTupleScheme getScheme() {
        return new queryRegFeewDealbyprocess_resultTupleScheme();
      }
    }

    private static class queryRegFeewDealbyprocess_resultTupleScheme extends TupleScheme<queryRegFeewDealbyprocess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepayFeewdtlDatView _iter260 : struct.success)
            {
              _iter260.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepayFeewdtlDatView>(_list261.size);
            RepayFeewdtlDatView _elem262;
            for (int _i263 = 0; _i263 < _list261.size; ++_i263)
            {
              _elem262 = new RepayFeewdtlDatView();
              _elem262.read(iprot);
              struct.success.add(_elem262);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewReasonbyprocess_args implements org.apache.thrift.TBase<queryRegFeewReasonbyprocess_args, queryRegFeewReasonbyprocess_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewReasonbyprocess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewReasonbyprocess_args");

    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewReasonbyprocess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewReasonbyprocess_argsTupleSchemeFactory());
    }

    public int repayId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_ID((short)1, "repayId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_ID
            return REPAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewReasonbyprocess_args.class, metaDataMap);
    }

    public queryRegFeewReasonbyprocess_args() {
    }

    public queryRegFeewReasonbyprocess_args(
      int repayId)
    {
      this();
      this.repayId = repayId;
      setRepayIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewReasonbyprocess_args(queryRegFeewReasonbyprocess_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.repayId = other.repayId;
    }

    public queryRegFeewReasonbyprocess_args deepCopy() {
      return new queryRegFeewReasonbyprocess_args(this);
    }

    @Override
    public void clear() {
      setRepayIdIsSet(false);
      this.repayId = 0;
    }

    public int getRepayId() {
      return this.repayId;
    }

    public queryRegFeewReasonbyprocess_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_ID:
        return isSetRepayId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewReasonbyprocess_args)
        return this.equals((queryRegFeewReasonbyprocess_args)that);
      return false;
    }

    public boolean equals(queryRegFeewReasonbyprocess_args that) {
      if (that == null)
        return false;

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewReasonbyprocess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewReasonbyprocess_args(");
      boolean first = true;

      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewReasonbyprocess_argsStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewReasonbyprocess_argsStandardScheme getScheme() {
        return new queryRegFeewReasonbyprocess_argsStandardScheme();
      }
    }

    private static class queryRegFeewReasonbyprocess_argsStandardScheme extends StandardScheme<queryRegFeewReasonbyprocess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewReasonbyprocess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewReasonbyprocess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewReasonbyprocess_argsTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewReasonbyprocess_argsTupleScheme getScheme() {
        return new queryRegFeewReasonbyprocess_argsTupleScheme();
      }
    }

    private static class queryRegFeewReasonbyprocess_argsTupleScheme extends TupleScheme<queryRegFeewReasonbyprocess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewReasonbyprocess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewReasonbyprocess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewReasonbyprocess_result implements org.apache.thrift.TBase<queryRegFeewReasonbyprocess_result, queryRegFeewReasonbyprocess_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewReasonbyprocess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewReasonbyprocess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewReasonbyprocess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewReasonbyprocess_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewReasonbyprocess_result.class, metaDataMap);
    }

    public queryRegFeewReasonbyprocess_result() {
    }

    public queryRegFeewReasonbyprocess_result(
      String success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewReasonbyprocess_result(queryRegFeewReasonbyprocess_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRegFeewReasonbyprocess_result deepCopy() {
      return new queryRegFeewReasonbyprocess_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public queryRegFeewReasonbyprocess_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRegFeewReasonbyprocess_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewReasonbyprocess_result)
        return this.equals((queryRegFeewReasonbyprocess_result)that);
      return false;
    }

    public boolean equals(queryRegFeewReasonbyprocess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewReasonbyprocess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewReasonbyprocess_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewReasonbyprocess_resultStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewReasonbyprocess_resultStandardScheme getScheme() {
        return new queryRegFeewReasonbyprocess_resultStandardScheme();
      }
    }

    private static class queryRegFeewReasonbyprocess_resultStandardScheme extends StandardScheme<queryRegFeewReasonbyprocess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewReasonbyprocess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewReasonbyprocess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewReasonbyprocess_resultTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewReasonbyprocess_resultTupleScheme getScheme() {
        return new queryRegFeewReasonbyprocess_resultTupleScheme();
      }
    }

    private static class queryRegFeewReasonbyprocess_resultTupleScheme extends TupleScheme<queryRegFeewReasonbyprocess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewReasonbyprocess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewReasonbyprocess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateRegFeewDealbyprocess_args implements org.apache.thrift.TBase<updateRegFeewDealbyprocess_args, updateRegFeewDealbyprocess_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRegFeewDealbyprocess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegFeewDealbyprocess_args");

    private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEEW_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("FeewInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegFeewDealbyprocess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegFeewDealbyprocess_argsTupleSchemeFactory());
    }

    public String reason; // required
    public String FeewInfo; // required
    public int repayId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REASON((short)1, "reason"),
      FEEW_INFO((short)2, "FeewInfo"),
      REPAY_ID((short)3, "repayId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REASON
            return REASON;
          case 2: // FEEW_INFO
            return FEEW_INFO;
          case 3: // REPAY_ID
            return REPAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEEW_INFO, new org.apache.thrift.meta_data.FieldMetaData("FeewInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegFeewDealbyprocess_args.class, metaDataMap);
    }

    public updateRegFeewDealbyprocess_args() {
    }

    public updateRegFeewDealbyprocess_args(
      String reason,
      String FeewInfo,
      int repayId)
    {
      this();
      this.reason = reason;
      this.FeewInfo = FeewInfo;
      this.repayId = repayId;
      setRepayIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegFeewDealbyprocess_args(updateRegFeewDealbyprocess_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
      if (other.isSetFeewInfo()) {
        this.FeewInfo = other.FeewInfo;
      }
      this.repayId = other.repayId;
    }

    public updateRegFeewDealbyprocess_args deepCopy() {
      return new updateRegFeewDealbyprocess_args(this);
    }

    @Override
    public void clear() {
      this.reason = null;
      this.FeewInfo = null;
      setRepayIdIsSet(false);
      this.repayId = 0;
    }

    public String getReason() {
      return this.reason;
    }

    public updateRegFeewDealbyprocess_args setReason(String reason) {
      this.reason = reason;
      return this;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been assigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public String getFeewInfo() {
      return this.FeewInfo;
    }

    public updateRegFeewDealbyprocess_args setFeewInfo(String FeewInfo) {
      this.FeewInfo = FeewInfo;
      return this;
    }

    public void unsetFeewInfo() {
      this.FeewInfo = null;
    }

    /** Returns true if field FeewInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetFeewInfo() {
      return this.FeewInfo != null;
    }

    public void setFeewInfoIsSet(boolean value) {
      if (!value) {
        this.FeewInfo = null;
      }
    }

    public int getRepayId() {
      return this.repayId;
    }

    public updateRegFeewDealbyprocess_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((String)value);
        }
        break;

      case FEEW_INFO:
        if (value == null) {
          unsetFeewInfo();
        } else {
          setFeewInfo((String)value);
        }
        break;

      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REASON:
        return getReason();

      case FEEW_INFO:
        return getFeewInfo();

      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REASON:
        return isSetReason();
      case FEEW_INFO:
        return isSetFeewInfo();
      case REPAY_ID:
        return isSetRepayId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegFeewDealbyprocess_args)
        return this.equals((updateRegFeewDealbyprocess_args)that);
      return false;
    }

    public boolean equals(updateRegFeewDealbyprocess_args that) {
      if (that == null)
        return false;

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      boolean this_present_FeewInfo = true && this.isSetFeewInfo();
      boolean that_present_FeewInfo = true && that.isSetFeewInfo();
      if (this_present_FeewInfo || that_present_FeewInfo) {
        if (!(this_present_FeewInfo && that_present_FeewInfo))
          return false;
        if (!this.FeewInfo.equals(that.FeewInfo))
          return false;
      }

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reason = true && (isSetReason());
      list.add(present_reason);
      if (present_reason)
        list.add(reason);

      boolean present_FeewInfo = true && (isSetFeewInfo());
      list.add(present_FeewInfo);
      if (present_FeewInfo)
        list.add(FeewInfo);

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRegFeewDealbyprocess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeewInfo()).compareTo(other.isSetFeewInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeewInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FeewInfo, other.FeewInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegFeewDealbyprocess_args(");
      boolean first = true;

      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("FeewInfo:");
      if (this.FeewInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.FeewInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegFeewDealbyprocess_argsStandardSchemeFactory implements SchemeFactory {
      public updateRegFeewDealbyprocess_argsStandardScheme getScheme() {
        return new updateRegFeewDealbyprocess_argsStandardScheme();
      }
    }

    private static class updateRegFeewDealbyprocess_argsStandardScheme extends StandardScheme<updateRegFeewDealbyprocess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reason = iprot.readString();
                struct.setReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEEW_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.FeewInfo = iprot.readString();
                struct.setFeewInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reason != null) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
        if (struct.FeewInfo != null) {
          oprot.writeFieldBegin(FEEW_INFO_FIELD_DESC);
          oprot.writeString(struct.FeewInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegFeewDealbyprocess_argsTupleSchemeFactory implements SchemeFactory {
      public updateRegFeewDealbyprocess_argsTupleScheme getScheme() {
        return new updateRegFeewDealbyprocess_argsTupleScheme();
      }
    }

    private static class updateRegFeewDealbyprocess_argsTupleScheme extends TupleScheme<updateRegFeewDealbyprocess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReason()) {
          optionals.set(0);
        }
        if (struct.isSetFeewInfo()) {
          optionals.set(1);
        }
        if (struct.isSetRepayId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetReason()) {
          oprot.writeString(struct.reason);
        }
        if (struct.isSetFeewInfo()) {
          oprot.writeString(struct.FeewInfo);
        }
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.reason = iprot.readString();
          struct.setReasonIsSet(true);
        }
        if (incoming.get(1)) {
          struct.FeewInfo = iprot.readString();
          struct.setFeewInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
      }
    }

  }

  public static class updateRegFeewDealbyprocess_result implements org.apache.thrift.TBase<updateRegFeewDealbyprocess_result, updateRegFeewDealbyprocess_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRegFeewDealbyprocess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegFeewDealbyprocess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegFeewDealbyprocess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegFeewDealbyprocess_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegFeewDealbyprocess_result.class, metaDataMap);
    }

    public updateRegFeewDealbyprocess_result() {
    }

    public updateRegFeewDealbyprocess_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegFeewDealbyprocess_result(updateRegFeewDealbyprocess_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateRegFeewDealbyprocess_result deepCopy() {
      return new updateRegFeewDealbyprocess_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateRegFeewDealbyprocess_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateRegFeewDealbyprocess_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegFeewDealbyprocess_result)
        return this.equals((updateRegFeewDealbyprocess_result)that);
      return false;
    }

    public boolean equals(updateRegFeewDealbyprocess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRegFeewDealbyprocess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegFeewDealbyprocess_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegFeewDealbyprocess_resultStandardSchemeFactory implements SchemeFactory {
      public updateRegFeewDealbyprocess_resultStandardScheme getScheme() {
        return new updateRegFeewDealbyprocess_resultStandardScheme();
      }
    }

    private static class updateRegFeewDealbyprocess_resultStandardScheme extends StandardScheme<updateRegFeewDealbyprocess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegFeewDealbyprocess_resultTupleSchemeFactory implements SchemeFactory {
      public updateRegFeewDealbyprocess_resultTupleScheme getScheme() {
        return new updateRegFeewDealbyprocess_resultTupleScheme();
      }
    }

    private static class updateRegFeewDealbyprocess_resultTupleScheme extends TupleScheme<updateRegFeewDealbyprocess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewprojectinfobyproId_args implements org.apache.thrift.TBase<queryRegFeewprojectinfobyproId_args, queryRegFeewprojectinfobyproId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewprojectinfobyproId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewprojectinfobyproId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewprojectinfobyproId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewprojectinfobyproId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewprojectinfobyproId_args.class, metaDataMap);
    }

    public queryRegFeewprojectinfobyproId_args() {
    }

    public queryRegFeewprojectinfobyproId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewprojectinfobyproId_args(queryRegFeewprojectinfobyproId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public queryRegFeewprojectinfobyproId_args deepCopy() {
      return new queryRegFeewprojectinfobyproId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public queryRegFeewprojectinfobyproId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewprojectinfobyproId_args)
        return this.equals((queryRegFeewprojectinfobyproId_args)that);
      return false;
    }

    public boolean equals(queryRegFeewprojectinfobyproId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewprojectinfobyproId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewprojectinfobyproId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewprojectinfobyproId_argsStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewprojectinfobyproId_argsStandardScheme getScheme() {
        return new queryRegFeewprojectinfobyproId_argsStandardScheme();
      }
    }

    private static class queryRegFeewprojectinfobyproId_argsStandardScheme extends StandardScheme<queryRegFeewprojectinfobyproId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewprojectinfobyproId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewprojectinfobyproId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewprojectinfobyproId_argsTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewprojectinfobyproId_argsTupleScheme getScheme() {
        return new queryRegFeewprojectinfobyproId_argsTupleScheme();
      }
    }

    private static class queryRegFeewprojectinfobyproId_argsTupleScheme extends TupleScheme<queryRegFeewprojectinfobyproId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewprojectinfobyproId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewprojectinfobyproId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewprojectinfobyproId_result implements org.apache.thrift.TBase<queryRegFeewprojectinfobyproId_result, queryRegFeewprojectinfobyproId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewprojectinfobyproId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewprojectinfobyproId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewprojectinfobyproId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewprojectinfobyproId_resultTupleSchemeFactory());
    }

    public RepayFeewdtlDatView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayFeewdtlDatView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewprojectinfobyproId_result.class, metaDataMap);
    }

    public queryRegFeewprojectinfobyproId_result() {
    }

    public queryRegFeewprojectinfobyproId_result(
      RepayFeewdtlDatView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewprojectinfobyproId_result(queryRegFeewprojectinfobyproId_result other) {
      if (other.isSetSuccess()) {
        this.success = new RepayFeewdtlDatView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRegFeewprojectinfobyproId_result deepCopy() {
      return new queryRegFeewprojectinfobyproId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RepayFeewdtlDatView getSuccess() {
      return this.success;
    }

    public queryRegFeewprojectinfobyproId_result setSuccess(RepayFeewdtlDatView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRegFeewprojectinfobyproId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RepayFeewdtlDatView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewprojectinfobyproId_result)
        return this.equals((queryRegFeewprojectinfobyproId_result)that);
      return false;
    }

    public boolean equals(queryRegFeewprojectinfobyproId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewprojectinfobyproId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewprojectinfobyproId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewprojectinfobyproId_resultStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewprojectinfobyproId_resultStandardScheme getScheme() {
        return new queryRegFeewprojectinfobyproId_resultStandardScheme();
      }
    }

    private static class queryRegFeewprojectinfobyproId_resultStandardScheme extends StandardScheme<queryRegFeewprojectinfobyproId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewprojectinfobyproId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RepayFeewdtlDatView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewprojectinfobyproId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewprojectinfobyproId_resultTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewprojectinfobyproId_resultTupleScheme getScheme() {
        return new queryRegFeewprojectinfobyproId_resultTupleScheme();
      }
    }

    private static class queryRegFeewprojectinfobyproId_resultTupleScheme extends TupleScheme<queryRegFeewprojectinfobyproId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewprojectinfobyproId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewprojectinfobyproId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RepayFeewdtlDatView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewprojectinfobyrepayId_args implements org.apache.thrift.TBase<queryRegFeewprojectinfobyrepayId_args, queryRegFeewprojectinfobyrepayId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewprojectinfobyrepayId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewprojectinfobyrepayId_args");

    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewprojectinfobyrepayId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewprojectinfobyrepayId_argsTupleSchemeFactory());
    }

    public int repayId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_ID((short)1, "repayId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_ID
            return REPAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewprojectinfobyrepayId_args.class, metaDataMap);
    }

    public queryRegFeewprojectinfobyrepayId_args() {
    }

    public queryRegFeewprojectinfobyrepayId_args(
      int repayId)
    {
      this();
      this.repayId = repayId;
      setRepayIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewprojectinfobyrepayId_args(queryRegFeewprojectinfobyrepayId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.repayId = other.repayId;
    }

    public queryRegFeewprojectinfobyrepayId_args deepCopy() {
      return new queryRegFeewprojectinfobyrepayId_args(this);
    }

    @Override
    public void clear() {
      setRepayIdIsSet(false);
      this.repayId = 0;
    }

    public int getRepayId() {
      return this.repayId;
    }

    public queryRegFeewprojectinfobyrepayId_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_ID:
        return isSetRepayId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewprojectinfobyrepayId_args)
        return this.equals((queryRegFeewprojectinfobyrepayId_args)that);
      return false;
    }

    public boolean equals(queryRegFeewprojectinfobyrepayId_args that) {
      if (that == null)
        return false;

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewprojectinfobyrepayId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewprojectinfobyrepayId_args(");
      boolean first = true;

      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewprojectinfobyrepayId_argsStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewprojectinfobyrepayId_argsStandardScheme getScheme() {
        return new queryRegFeewprojectinfobyrepayId_argsStandardScheme();
      }
    }

    private static class queryRegFeewprojectinfobyrepayId_argsStandardScheme extends StandardScheme<queryRegFeewprojectinfobyrepayId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewprojectinfobyrepayId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewprojectinfobyrepayId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewprojectinfobyrepayId_argsTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewprojectinfobyrepayId_argsTupleScheme getScheme() {
        return new queryRegFeewprojectinfobyrepayId_argsTupleScheme();
      }
    }

    private static class queryRegFeewprojectinfobyrepayId_argsTupleScheme extends TupleScheme<queryRegFeewprojectinfobyrepayId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewprojectinfobyrepayId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewprojectinfobyrepayId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
      }
    }

  }

  public static class queryRegFeewprojectinfobyrepayId_result implements org.apache.thrift.TBase<queryRegFeewprojectinfobyrepayId_result, queryRegFeewprojectinfobyrepayId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegFeewprojectinfobyrepayId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegFeewprojectinfobyrepayId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegFeewprojectinfobyrepayId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegFeewprojectinfobyrepayId_resultTupleSchemeFactory());
    }

    public RepayFeewdtlDatView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayFeewdtlDatView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegFeewprojectinfobyrepayId_result.class, metaDataMap);
    }

    public queryRegFeewprojectinfobyrepayId_result() {
    }

    public queryRegFeewprojectinfobyrepayId_result(
      RepayFeewdtlDatView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegFeewprojectinfobyrepayId_result(queryRegFeewprojectinfobyrepayId_result other) {
      if (other.isSetSuccess()) {
        this.success = new RepayFeewdtlDatView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRegFeewprojectinfobyrepayId_result deepCopy() {
      return new queryRegFeewprojectinfobyrepayId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RepayFeewdtlDatView getSuccess() {
      return this.success;
    }

    public queryRegFeewprojectinfobyrepayId_result setSuccess(RepayFeewdtlDatView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRegFeewprojectinfobyrepayId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RepayFeewdtlDatView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegFeewprojectinfobyrepayId_result)
        return this.equals((queryRegFeewprojectinfobyrepayId_result)that);
      return false;
    }

    public boolean equals(queryRegFeewprojectinfobyrepayId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegFeewprojectinfobyrepayId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegFeewprojectinfobyrepayId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegFeewprojectinfobyrepayId_resultStandardSchemeFactory implements SchemeFactory {
      public queryRegFeewprojectinfobyrepayId_resultStandardScheme getScheme() {
        return new queryRegFeewprojectinfobyrepayId_resultStandardScheme();
      }
    }

    private static class queryRegFeewprojectinfobyrepayId_resultStandardScheme extends StandardScheme<queryRegFeewprojectinfobyrepayId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegFeewprojectinfobyrepayId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RepayFeewdtlDatView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegFeewprojectinfobyrepayId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegFeewprojectinfobyrepayId_resultTupleSchemeFactory implements SchemeFactory {
      public queryRegFeewprojectinfobyrepayId_resultTupleScheme getScheme() {
        return new queryRegFeewprojectinfobyrepayId_resultTupleScheme();
      }
    }

    private static class queryRegFeewprojectinfobyrepayId_resultTupleScheme extends TupleScheme<queryRegFeewprojectinfobyrepayId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegFeewprojectinfobyrepayId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegFeewprojectinfobyrepayId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RepayFeewdtlDatView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class uploadinstiDvertapply_args implements org.apache.thrift.TBase<uploadinstiDvertapply_args, uploadinstiDvertapply_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadinstiDvertapply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadinstiDvertapply_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadinstiDvertapply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadinstiDvertapply_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadinstiDvertapply_args.class, metaDataMap);
    }

    public uploadinstiDvertapply_args() {
    }

    public uploadinstiDvertapply_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadinstiDvertapply_args(uploadinstiDvertapply_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public uploadinstiDvertapply_args deepCopy() {
      return new uploadinstiDvertapply_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public uploadinstiDvertapply_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadinstiDvertapply_args)
        return this.equals((uploadinstiDvertapply_args)that);
      return false;
    }

    public boolean equals(uploadinstiDvertapply_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadinstiDvertapply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadinstiDvertapply_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadinstiDvertapply_argsStandardSchemeFactory implements SchemeFactory {
      public uploadinstiDvertapply_argsStandardScheme getScheme() {
        return new uploadinstiDvertapply_argsStandardScheme();
      }
    }

    private static class uploadinstiDvertapply_argsStandardScheme extends StandardScheme<uploadinstiDvertapply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadinstiDvertapply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadinstiDvertapply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadinstiDvertapply_argsTupleSchemeFactory implements SchemeFactory {
      public uploadinstiDvertapply_argsTupleScheme getScheme() {
        return new uploadinstiDvertapply_argsTupleScheme();
      }
    }

    private static class uploadinstiDvertapply_argsTupleScheme extends TupleScheme<uploadinstiDvertapply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadinstiDvertapply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadinstiDvertapply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class uploadinstiDvertapply_result implements org.apache.thrift.TBase<uploadinstiDvertapply_result, uploadinstiDvertapply_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadinstiDvertapply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadinstiDvertapply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadinstiDvertapply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadinstiDvertapply_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadinstiDvertapply_result.class, metaDataMap);
    }

    public uploadinstiDvertapply_result() {
    }

    public uploadinstiDvertapply_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadinstiDvertapply_result(uploadinstiDvertapply_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public uploadinstiDvertapply_result deepCopy() {
      return new uploadinstiDvertapply_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public uploadinstiDvertapply_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public uploadinstiDvertapply_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadinstiDvertapply_result)
        return this.equals((uploadinstiDvertapply_result)that);
      return false;
    }

    public boolean equals(uploadinstiDvertapply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadinstiDvertapply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadinstiDvertapply_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadinstiDvertapply_resultStandardSchemeFactory implements SchemeFactory {
      public uploadinstiDvertapply_resultStandardScheme getScheme() {
        return new uploadinstiDvertapply_resultStandardScheme();
      }
    }

    private static class uploadinstiDvertapply_resultStandardScheme extends StandardScheme<uploadinstiDvertapply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadinstiDvertapply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadinstiDvertapply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadinstiDvertapply_resultTupleSchemeFactory implements SchemeFactory {
      public uploadinstiDvertapply_resultTupleScheme getScheme() {
        return new uploadinstiDvertapply_resultTupleScheme();
      }
    }

    private static class uploadinstiDvertapply_resultTupleScheme extends TupleScheme<uploadinstiDvertapply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadinstiDvertapply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadinstiDvertapply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateEmbezzleFile_args implements org.apache.thrift.TBase<updateEmbezzleFile_args, updateEmbezzleFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateEmbezzleFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEmbezzleFile_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEmbezzleFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEmbezzleFile_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEmbezzleFile_args.class, metaDataMap);
    }

    public updateEmbezzleFile_args() {
    }

    public updateEmbezzleFile_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEmbezzleFile_args(updateEmbezzleFile_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public updateEmbezzleFile_args deepCopy() {
      return new updateEmbezzleFile_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public updateEmbezzleFile_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEmbezzleFile_args)
        return this.equals((updateEmbezzleFile_args)that);
      return false;
    }

    public boolean equals(updateEmbezzleFile_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateEmbezzleFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEmbezzleFile_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEmbezzleFile_argsStandardSchemeFactory implements SchemeFactory {
      public updateEmbezzleFile_argsStandardScheme getScheme() {
        return new updateEmbezzleFile_argsStandardScheme();
      }
    }

    private static class updateEmbezzleFile_argsStandardScheme extends StandardScheme<updateEmbezzleFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEmbezzleFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEmbezzleFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEmbezzleFile_argsTupleSchemeFactory implements SchemeFactory {
      public updateEmbezzleFile_argsTupleScheme getScheme() {
        return new updateEmbezzleFile_argsTupleScheme();
      }
    }

    private static class updateEmbezzleFile_argsTupleScheme extends TupleScheme<updateEmbezzleFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEmbezzleFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEmbezzleFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class updateEmbezzleFile_result implements org.apache.thrift.TBase<updateEmbezzleFile_result, updateEmbezzleFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateEmbezzleFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEmbezzleFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEmbezzleFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEmbezzleFile_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEmbezzleFile_result.class, metaDataMap);
    }

    public updateEmbezzleFile_result() {
    }

    public updateEmbezzleFile_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEmbezzleFile_result(updateEmbezzleFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateEmbezzleFile_result deepCopy() {
      return new updateEmbezzleFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateEmbezzleFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateEmbezzleFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEmbezzleFile_result)
        return this.equals((updateEmbezzleFile_result)that);
      return false;
    }

    public boolean equals(updateEmbezzleFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateEmbezzleFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEmbezzleFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEmbezzleFile_resultStandardSchemeFactory implements SchemeFactory {
      public updateEmbezzleFile_resultStandardScheme getScheme() {
        return new updateEmbezzleFile_resultStandardScheme();
      }
    }

    private static class updateEmbezzleFile_resultStandardScheme extends StandardScheme<updateEmbezzleFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEmbezzleFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEmbezzleFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEmbezzleFile_resultTupleSchemeFactory implements SchemeFactory {
      public updateEmbezzleFile_resultTupleScheme getScheme() {
        return new updateEmbezzleFile_resultTupleScheme();
      }
    }

    private static class updateEmbezzleFile_resultTupleScheme extends TupleScheme<updateEmbezzleFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEmbezzleFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEmbezzleFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRegDivertapplyFile_args implements org.apache.thrift.TBase<queryRegDivertapplyFile_args, queryRegDivertapplyFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegDivertapplyFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegDivertapplyFile_args");

    private static final org.apache.thrift.protocol.TField DIVERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("DivertId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegDivertapplyFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegDivertapplyFile_argsTupleSchemeFactory());
    }

    public int DivertId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIVERT_ID((short)1, "DivertId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIVERT_ID
            return DIVERT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIVERTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIVERT_ID, new org.apache.thrift.meta_data.FieldMetaData("DivertId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegDivertapplyFile_args.class, metaDataMap);
    }

    public queryRegDivertapplyFile_args() {
    }

    public queryRegDivertapplyFile_args(
      int DivertId)
    {
      this();
      this.DivertId = DivertId;
      setDivertIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegDivertapplyFile_args(queryRegDivertapplyFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.DivertId = other.DivertId;
    }

    public queryRegDivertapplyFile_args deepCopy() {
      return new queryRegDivertapplyFile_args(this);
    }

    @Override
    public void clear() {
      setDivertIdIsSet(false);
      this.DivertId = 0;
    }

    public int getDivertId() {
      return this.DivertId;
    }

    public queryRegDivertapplyFile_args setDivertId(int DivertId) {
      this.DivertId = DivertId;
      setDivertIdIsSet(true);
      return this;
    }

    public void unsetDivertId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTID_ISSET_ID);
    }

    /** Returns true if field DivertId is set (has been assigned a value) and false otherwise */
    public boolean isSetDivertId() {
      return EncodingUtils.testBit(__isset_bitfield, __DIVERTID_ISSET_ID);
    }

    public void setDivertIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIVERT_ID:
        if (value == null) {
          unsetDivertId();
        } else {
          setDivertId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIVERT_ID:
        return Integer.valueOf(getDivertId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIVERT_ID:
        return isSetDivertId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegDivertapplyFile_args)
        return this.equals((queryRegDivertapplyFile_args)that);
      return false;
    }

    public boolean equals(queryRegDivertapplyFile_args that) {
      if (that == null)
        return false;

      boolean this_present_DivertId = true;
      boolean that_present_DivertId = true;
      if (this_present_DivertId || that_present_DivertId) {
        if (!(this_present_DivertId && that_present_DivertId))
          return false;
        if (this.DivertId != that.DivertId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_DivertId = true;
      list.add(present_DivertId);
      if (present_DivertId)
        list.add(DivertId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegDivertapplyFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDivertId()).compareTo(other.isSetDivertId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDivertId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DivertId, other.DivertId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegDivertapplyFile_args(");
      boolean first = true;

      sb.append("DivertId:");
      sb.append(this.DivertId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegDivertapplyFile_argsStandardSchemeFactory implements SchemeFactory {
      public queryRegDivertapplyFile_argsStandardScheme getScheme() {
        return new queryRegDivertapplyFile_argsStandardScheme();
      }
    }

    private static class queryRegDivertapplyFile_argsStandardScheme extends StandardScheme<queryRegDivertapplyFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegDivertapplyFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIVERT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.DivertId = iprot.readI32();
                struct.setDivertIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegDivertapplyFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIVERT_ID_FIELD_DESC);
        oprot.writeI32(struct.DivertId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegDivertapplyFile_argsTupleSchemeFactory implements SchemeFactory {
      public queryRegDivertapplyFile_argsTupleScheme getScheme() {
        return new queryRegDivertapplyFile_argsTupleScheme();
      }
    }

    private static class queryRegDivertapplyFile_argsTupleScheme extends TupleScheme<queryRegDivertapplyFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegDivertapplyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDivertId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDivertId()) {
          oprot.writeI32(struct.DivertId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegDivertapplyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.DivertId = iprot.readI32();
          struct.setDivertIdIsSet(true);
        }
      }
    }

  }

  public static class queryRegDivertapplyFile_result implements org.apache.thrift.TBase<queryRegDivertapplyFile_result, queryRegDivertapplyFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRegDivertapplyFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRegDivertapplyFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRegDivertapplyFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRegDivertapplyFile_resultTupleSchemeFactory());
    }

    public List<RegAdvapplyFileview> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegAdvapplyFileview.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRegDivertapplyFile_result.class, metaDataMap);
    }

    public queryRegDivertapplyFile_result() {
    }

    public queryRegDivertapplyFile_result(
      List<RegAdvapplyFileview> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRegDivertapplyFile_result(queryRegDivertapplyFile_result other) {
      if (other.isSetSuccess()) {
        List<RegAdvapplyFileview> __this__success = new ArrayList<RegAdvapplyFileview>(other.success.size());
        for (RegAdvapplyFileview other_element : other.success) {
          __this__success.add(new RegAdvapplyFileview(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRegDivertapplyFile_result deepCopy() {
      return new queryRegDivertapplyFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RegAdvapplyFileview> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RegAdvapplyFileview elem) {
      if (this.success == null) {
        this.success = new ArrayList<RegAdvapplyFileview>();
      }
      this.success.add(elem);
    }

    public List<RegAdvapplyFileview> getSuccess() {
      return this.success;
    }

    public queryRegDivertapplyFile_result setSuccess(List<RegAdvapplyFileview> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRegDivertapplyFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RegAdvapplyFileview>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRegDivertapplyFile_result)
        return this.equals((queryRegDivertapplyFile_result)that);
      return false;
    }

    public boolean equals(queryRegDivertapplyFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRegDivertapplyFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRegDivertapplyFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRegDivertapplyFile_resultStandardSchemeFactory implements SchemeFactory {
      public queryRegDivertapplyFile_resultStandardScheme getScheme() {
        return new queryRegDivertapplyFile_resultStandardScheme();
      }
    }

    private static class queryRegDivertapplyFile_resultStandardScheme extends StandardScheme<queryRegDivertapplyFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRegDivertapplyFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.success = new ArrayList<RegAdvapplyFileview>(_list264.size);
                  RegAdvapplyFileview _elem265;
                  for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                  {
                    _elem265 = new RegAdvapplyFileview();
                    _elem265.read(iprot);
                    struct.success.add(_elem265);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRegDivertapplyFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RegAdvapplyFileview _iter267 : struct.success)
            {
              _iter267.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRegDivertapplyFile_resultTupleSchemeFactory implements SchemeFactory {
      public queryRegDivertapplyFile_resultTupleScheme getScheme() {
        return new queryRegDivertapplyFile_resultTupleScheme();
      }
    }

    private static class queryRegDivertapplyFile_resultTupleScheme extends TupleScheme<queryRegDivertapplyFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRegDivertapplyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RegAdvapplyFileview _iter268 : struct.success)
            {
              _iter268.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRegDivertapplyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RegAdvapplyFileview>(_list269.size);
            RegAdvapplyFileview _elem270;
            for (int _i271 = 0; _i271 < _list269.size; ++_i271)
            {
              _elem270 = new RegAdvapplyFileview();
              _elem270.read(iprot);
              struct.success.add(_elem270);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class changeReqstFeewdel_args implements org.apache.thrift.TBase<changeReqstFeewdel_args, changeReqstFeewdel_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeReqstFeewdel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeReqstFeewdel_args");

    private static final org.apache.thrift.protocol.TField REQ_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reqStatus", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeReqstFeewdel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeReqstFeewdel_argsTupleSchemeFactory());
    }

    public int reqStatus; // required
    public int repayId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_STATUS((short)1, "reqStatus"),
      REPAY_ID((short)2, "repayId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_STATUS
            return REQ_STATUS;
          case 2: // REPAY_ID
            return REPAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQSTATUS_ISSET_ID = 0;
    private static final int __REPAYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reqStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeReqstFeewdel_args.class, metaDataMap);
    }

    public changeReqstFeewdel_args() {
    }

    public changeReqstFeewdel_args(
      int reqStatus,
      int repayId)
    {
      this();
      this.reqStatus = reqStatus;
      setReqStatusIsSet(true);
      this.repayId = repayId;
      setRepayIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeReqstFeewdel_args(changeReqstFeewdel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reqStatus = other.reqStatus;
      this.repayId = other.repayId;
    }

    public changeReqstFeewdel_args deepCopy() {
      return new changeReqstFeewdel_args(this);
    }

    @Override
    public void clear() {
      setReqStatusIsSet(false);
      this.reqStatus = 0;
      setRepayIdIsSet(false);
      this.repayId = 0;
    }

    public int getReqStatus() {
      return this.reqStatus;
    }

    public changeReqstFeewdel_args setReqStatus(int reqStatus) {
      this.reqStatus = reqStatus;
      setReqStatusIsSet(true);
      return this;
    }

    public void unsetReqStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQSTATUS_ISSET_ID);
    }

    /** Returns true if field reqStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetReqStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __REQSTATUS_ISSET_ID);
    }

    public void setReqStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQSTATUS_ISSET_ID, value);
    }

    public int getRepayId() {
      return this.repayId;
    }

    public changeReqstFeewdel_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_STATUS:
        if (value == null) {
          unsetReqStatus();
        } else {
          setReqStatus((Integer)value);
        }
        break;

      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_STATUS:
        return Integer.valueOf(getReqStatus());

      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_STATUS:
        return isSetReqStatus();
      case REPAY_ID:
        return isSetRepayId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeReqstFeewdel_args)
        return this.equals((changeReqstFeewdel_args)that);
      return false;
    }

    public boolean equals(changeReqstFeewdel_args that) {
      if (that == null)
        return false;

      boolean this_present_reqStatus = true;
      boolean that_present_reqStatus = true;
      if (this_present_reqStatus || that_present_reqStatus) {
        if (!(this_present_reqStatus && that_present_reqStatus))
          return false;
        if (this.reqStatus != that.reqStatus)
          return false;
      }

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqStatus = true;
      list.add(present_reqStatus);
      if (present_reqStatus)
        list.add(reqStatus);

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeReqstFeewdel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqStatus()).compareTo(other.isSetReqStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqStatus, other.reqStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeReqstFeewdel_args(");
      boolean first = true;

      sb.append("reqStatus:");
      sb.append(this.reqStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeReqstFeewdel_argsStandardSchemeFactory implements SchemeFactory {
      public changeReqstFeewdel_argsStandardScheme getScheme() {
        return new changeReqstFeewdel_argsStandardScheme();
      }
    }

    private static class changeReqstFeewdel_argsStandardScheme extends StandardScheme<changeReqstFeewdel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeReqstFeewdel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reqStatus = iprot.readI32();
                struct.setReqStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeReqstFeewdel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQ_STATUS_FIELD_DESC);
        oprot.writeI32(struct.reqStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeReqstFeewdel_argsTupleSchemeFactory implements SchemeFactory {
      public changeReqstFeewdel_argsTupleScheme getScheme() {
        return new changeReqstFeewdel_argsTupleScheme();
      }
    }

    private static class changeReqstFeewdel_argsTupleScheme extends TupleScheme<changeReqstFeewdel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeReqstFeewdel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqStatus()) {
          optionals.set(0);
        }
        if (struct.isSetRepayId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqStatus()) {
          oprot.writeI32(struct.reqStatus);
        }
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeReqstFeewdel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqStatus = iprot.readI32();
          struct.setReqStatusIsSet(true);
        }
        if (incoming.get(1)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
      }
    }

  }

  public static class changeReqstFeewdel_result implements org.apache.thrift.TBase<changeReqstFeewdel_result, changeReqstFeewdel_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeReqstFeewdel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeReqstFeewdel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeReqstFeewdel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeReqstFeewdel_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeReqstFeewdel_result.class, metaDataMap);
    }

    public changeReqstFeewdel_result() {
    }

    public changeReqstFeewdel_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeReqstFeewdel_result(changeReqstFeewdel_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public changeReqstFeewdel_result deepCopy() {
      return new changeReqstFeewdel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public changeReqstFeewdel_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public changeReqstFeewdel_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeReqstFeewdel_result)
        return this.equals((changeReqstFeewdel_result)that);
      return false;
    }

    public boolean equals(changeReqstFeewdel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeReqstFeewdel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeReqstFeewdel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeReqstFeewdel_resultStandardSchemeFactory implements SchemeFactory {
      public changeReqstFeewdel_resultStandardScheme getScheme() {
        return new changeReqstFeewdel_resultStandardScheme();
      }
    }

    private static class changeReqstFeewdel_resultStandardScheme extends StandardScheme<changeReqstFeewdel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeReqstFeewdel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeReqstFeewdel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeReqstFeewdel_resultTupleSchemeFactory implements SchemeFactory {
      public changeReqstFeewdel_resultTupleScheme getScheme() {
        return new changeReqstFeewdel_resultTupleScheme();
      }
    }

    private static class changeReqstFeewdel_resultTupleScheme extends TupleScheme<changeReqstFeewdel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeReqstFeewdel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeReqstFeewdel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteProjectbyFeewDealList_args implements org.apache.thrift.TBase<deleteProjectbyFeewDealList_args, deleteProjectbyFeewDealList_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProjectbyFeewDealList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProjectbyFeewDealList_args");

    private static final org.apache.thrift.protocol.TField REPAY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("repayIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProjectbyFeewDealList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProjectbyFeewDealList_argsTupleSchemeFactory());
    }

    public List<Integer> repayIds; // required
    public List<Integer> projectIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_IDS((short)1, "repayIds"),
      PROJECT_IDS((short)2, "projectIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_IDS
            return REPAY_IDS;
          case 2: // PROJECT_IDS
            return PROJECT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_IDS, new org.apache.thrift.meta_data.FieldMetaData("repayIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.PROJECT_IDS, new org.apache.thrift.meta_data.FieldMetaData("projectIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProjectbyFeewDealList_args.class, metaDataMap);
    }

    public deleteProjectbyFeewDealList_args() {
    }

    public deleteProjectbyFeewDealList_args(
      List<Integer> repayIds,
      List<Integer> projectIds)
    {
      this();
      this.repayIds = repayIds;
      this.projectIds = projectIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProjectbyFeewDealList_args(deleteProjectbyFeewDealList_args other) {
      if (other.isSetRepayIds()) {
        List<Integer> __this__repayIds = new ArrayList<Integer>(other.repayIds);
        this.repayIds = __this__repayIds;
      }
      if (other.isSetProjectIds()) {
        List<Integer> __this__projectIds = new ArrayList<Integer>(other.projectIds);
        this.projectIds = __this__projectIds;
      }
    }

    public deleteProjectbyFeewDealList_args deepCopy() {
      return new deleteProjectbyFeewDealList_args(this);
    }

    @Override
    public void clear() {
      this.repayIds = null;
      this.projectIds = null;
    }

    public int getRepayIdsSize() {
      return (this.repayIds == null) ? 0 : this.repayIds.size();
    }

    public java.util.Iterator<Integer> getRepayIdsIterator() {
      return (this.repayIds == null) ? null : this.repayIds.iterator();
    }

    public void addToRepayIds(int elem) {
      if (this.repayIds == null) {
        this.repayIds = new ArrayList<Integer>();
      }
      this.repayIds.add(elem);
    }

    public List<Integer> getRepayIds() {
      return this.repayIds;
    }

    public deleteProjectbyFeewDealList_args setRepayIds(List<Integer> repayIds) {
      this.repayIds = repayIds;
      return this;
    }

    public void unsetRepayIds() {
      this.repayIds = null;
    }

    /** Returns true if field repayIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayIds() {
      return this.repayIds != null;
    }

    public void setRepayIdsIsSet(boolean value) {
      if (!value) {
        this.repayIds = null;
      }
    }

    public int getProjectIdsSize() {
      return (this.projectIds == null) ? 0 : this.projectIds.size();
    }

    public java.util.Iterator<Integer> getProjectIdsIterator() {
      return (this.projectIds == null) ? null : this.projectIds.iterator();
    }

    public void addToProjectIds(int elem) {
      if (this.projectIds == null) {
        this.projectIds = new ArrayList<Integer>();
      }
      this.projectIds.add(elem);
    }

    public List<Integer> getProjectIds() {
      return this.projectIds;
    }

    public deleteProjectbyFeewDealList_args setProjectIds(List<Integer> projectIds) {
      this.projectIds = projectIds;
      return this;
    }

    public void unsetProjectIds() {
      this.projectIds = null;
    }

    /** Returns true if field projectIds is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectIds() {
      return this.projectIds != null;
    }

    public void setProjectIdsIsSet(boolean value) {
      if (!value) {
        this.projectIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_IDS:
        if (value == null) {
          unsetRepayIds();
        } else {
          setRepayIds((List<Integer>)value);
        }
        break;

      case PROJECT_IDS:
        if (value == null) {
          unsetProjectIds();
        } else {
          setProjectIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_IDS:
        return getRepayIds();

      case PROJECT_IDS:
        return getProjectIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_IDS:
        return isSetRepayIds();
      case PROJECT_IDS:
        return isSetProjectIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProjectbyFeewDealList_args)
        return this.equals((deleteProjectbyFeewDealList_args)that);
      return false;
    }

    public boolean equals(deleteProjectbyFeewDealList_args that) {
      if (that == null)
        return false;

      boolean this_present_repayIds = true && this.isSetRepayIds();
      boolean that_present_repayIds = true && that.isSetRepayIds();
      if (this_present_repayIds || that_present_repayIds) {
        if (!(this_present_repayIds && that_present_repayIds))
          return false;
        if (!this.repayIds.equals(that.repayIds))
          return false;
      }

      boolean this_present_projectIds = true && this.isSetProjectIds();
      boolean that_present_projectIds = true && that.isSetProjectIds();
      if (this_present_projectIds || that_present_projectIds) {
        if (!(this_present_projectIds && that_present_projectIds))
          return false;
        if (!this.projectIds.equals(that.projectIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayIds = true && (isSetRepayIds());
      list.add(present_repayIds);
      if (present_repayIds)
        list.add(repayIds);

      boolean present_projectIds = true && (isSetProjectIds());
      list.add(present_projectIds);
      if (present_projectIds)
        list.add(projectIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProjectbyFeewDealList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayIds()).compareTo(other.isSetRepayIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayIds, other.repayIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectIds()).compareTo(other.isSetProjectIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectIds, other.projectIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProjectbyFeewDealList_args(");
      boolean first = true;

      sb.append("repayIds:");
      if (this.repayIds == null) {
        sb.append("null");
      } else {
        sb.append(this.repayIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectIds:");
      if (this.projectIds == null) {
        sb.append("null");
      } else {
        sb.append(this.projectIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProjectbyFeewDealList_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProjectbyFeewDealList_argsStandardScheme getScheme() {
        return new deleteProjectbyFeewDealList_argsStandardScheme();
      }
    }

    private static class deleteProjectbyFeewDealList_argsStandardScheme extends StandardScheme<deleteProjectbyFeewDealList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProjectbyFeewDealList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.repayIds = new ArrayList<Integer>(_list272.size);
                  int _elem273;
                  for (int _i274 = 0; _i274 < _list272.size; ++_i274)
                  {
                    _elem273 = iprot.readI32();
                    struct.repayIds.add(_elem273);
                  }
                  iprot.readListEnd();
                }
                struct.setRepayIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list275 = iprot.readListBegin();
                  struct.projectIds = new ArrayList<Integer>(_list275.size);
                  int _elem276;
                  for (int _i277 = 0; _i277 < _list275.size; ++_i277)
                  {
                    _elem276 = iprot.readI32();
                    struct.projectIds.add(_elem276);
                  }
                  iprot.readListEnd();
                }
                struct.setProjectIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProjectbyFeewDealList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayIds != null) {
          oprot.writeFieldBegin(REPAY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.repayIds.size()));
            for (int _iter278 : struct.repayIds)
            {
              oprot.writeI32(_iter278);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.projectIds != null) {
          oprot.writeFieldBegin(PROJECT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.projectIds.size()));
            for (int _iter279 : struct.projectIds)
            {
              oprot.writeI32(_iter279);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProjectbyFeewDealList_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProjectbyFeewDealList_argsTupleScheme getScheme() {
        return new deleteProjectbyFeewDealList_argsTupleScheme();
      }
    }

    private static class deleteProjectbyFeewDealList_argsTupleScheme extends TupleScheme<deleteProjectbyFeewDealList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyFeewDealList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayIds()) {
          optionals.set(0);
        }
        if (struct.isSetProjectIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRepayIds()) {
          {
            oprot.writeI32(struct.repayIds.size());
            for (int _iter280 : struct.repayIds)
            {
              oprot.writeI32(_iter280);
            }
          }
        }
        if (struct.isSetProjectIds()) {
          {
            oprot.writeI32(struct.projectIds.size());
            for (int _iter281 : struct.projectIds)
            {
              oprot.writeI32(_iter281);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyFeewDealList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list282 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.repayIds = new ArrayList<Integer>(_list282.size);
            int _elem283;
            for (int _i284 = 0; _i284 < _list282.size; ++_i284)
            {
              _elem283 = iprot.readI32();
              struct.repayIds.add(_elem283);
            }
          }
          struct.setRepayIdsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.projectIds = new ArrayList<Integer>(_list285.size);
            int _elem286;
            for (int _i287 = 0; _i287 < _list285.size; ++_i287)
            {
              _elem286 = iprot.readI32();
              struct.projectIds.add(_elem286);
            }
          }
          struct.setProjectIdsIsSet(true);
        }
      }
    }

  }

  public static class deleteProjectbyFeewDealList_result implements org.apache.thrift.TBase<deleteProjectbyFeewDealList_result, deleteProjectbyFeewDealList_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProjectbyFeewDealList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProjectbyFeewDealList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProjectbyFeewDealList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProjectbyFeewDealList_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProjectbyFeewDealList_result.class, metaDataMap);
    }

    public deleteProjectbyFeewDealList_result() {
    }

    public deleteProjectbyFeewDealList_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProjectbyFeewDealList_result(deleteProjectbyFeewDealList_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteProjectbyFeewDealList_result deepCopy() {
      return new deleteProjectbyFeewDealList_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteProjectbyFeewDealList_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteProjectbyFeewDealList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProjectbyFeewDealList_result)
        return this.equals((deleteProjectbyFeewDealList_result)that);
      return false;
    }

    public boolean equals(deleteProjectbyFeewDealList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProjectbyFeewDealList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProjectbyFeewDealList_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProjectbyFeewDealList_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProjectbyFeewDealList_resultStandardScheme getScheme() {
        return new deleteProjectbyFeewDealList_resultStandardScheme();
      }
    }

    private static class deleteProjectbyFeewDealList_resultStandardScheme extends StandardScheme<deleteProjectbyFeewDealList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProjectbyFeewDealList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProjectbyFeewDealList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProjectbyFeewDealList_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProjectbyFeewDealList_resultTupleScheme getScheme() {
        return new deleteProjectbyFeewDealList_resultTupleScheme();
      }
    }

    private static class deleteProjectbyFeewDealList_resultTupleScheme extends TupleScheme<deleteProjectbyFeewDealList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyFeewDealList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyFeewDealList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteProjectbyFeewDeal_args implements org.apache.thrift.TBase<deleteProjectbyFeewDeal_args, deleteProjectbyFeewDeal_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProjectbyFeewDeal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProjectbyFeewDeal_args");

    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProjectbyFeewDeal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProjectbyFeewDeal_argsTupleSchemeFactory());
    }

    public int repayId; // required
    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_ID((short)1, "repayId"),
      PROJECT_ID((short)2, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_ID
            return REPAY_ID;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYID_ISSET_ID = 0;
    private static final int __PROJECTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProjectbyFeewDeal_args.class, metaDataMap);
    }

    public deleteProjectbyFeewDeal_args() {
    }

    public deleteProjectbyFeewDeal_args(
      int repayId,
      int projectId)
    {
      this();
      this.repayId = repayId;
      setRepayIdIsSet(true);
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProjectbyFeewDeal_args(deleteProjectbyFeewDeal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.repayId = other.repayId;
      this.projectId = other.projectId;
    }

    public deleteProjectbyFeewDeal_args deepCopy() {
      return new deleteProjectbyFeewDeal_args(this);
    }

    @Override
    public void clear() {
      setRepayIdIsSet(false);
      this.repayId = 0;
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getRepayId() {
      return this.repayId;
    }

    public deleteProjectbyFeewDeal_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public int getProjectId() {
      return this.projectId;
    }

    public deleteProjectbyFeewDeal_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_ID:
        return isSetRepayId();
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProjectbyFeewDeal_args)
        return this.equals((deleteProjectbyFeewDeal_args)that);
      return false;
    }

    public boolean equals(deleteProjectbyFeewDeal_args that) {
      if (that == null)
        return false;

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProjectbyFeewDeal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProjectbyFeewDeal_args(");
      boolean first = true;

      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProjectbyFeewDeal_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProjectbyFeewDeal_argsStandardScheme getScheme() {
        return new deleteProjectbyFeewDeal_argsStandardScheme();
      }
    }

    private static class deleteProjectbyFeewDeal_argsStandardScheme extends StandardScheme<deleteProjectbyFeewDeal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProjectbyFeewDeal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProjectbyFeewDeal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProjectbyFeewDeal_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProjectbyFeewDeal_argsTupleScheme getScheme() {
        return new deleteProjectbyFeewDeal_argsTupleScheme();
      }
    }

    private static class deleteProjectbyFeewDeal_argsTupleScheme extends TupleScheme<deleteProjectbyFeewDeal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyFeewDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayId()) {
          optionals.set(0);
        }
        if (struct.isSetProjectId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyFeewDeal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class deleteProjectbyFeewDeal_result implements org.apache.thrift.TBase<deleteProjectbyFeewDeal_result, deleteProjectbyFeewDeal_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProjectbyFeewDeal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProjectbyFeewDeal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProjectbyFeewDeal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProjectbyFeewDeal_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProjectbyFeewDeal_result.class, metaDataMap);
    }

    public deleteProjectbyFeewDeal_result() {
    }

    public deleteProjectbyFeewDeal_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProjectbyFeewDeal_result(deleteProjectbyFeewDeal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteProjectbyFeewDeal_result deepCopy() {
      return new deleteProjectbyFeewDeal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteProjectbyFeewDeal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteProjectbyFeewDeal_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProjectbyFeewDeal_result)
        return this.equals((deleteProjectbyFeewDeal_result)that);
      return false;
    }

    public boolean equals(deleteProjectbyFeewDeal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProjectbyFeewDeal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProjectbyFeewDeal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProjectbyFeewDeal_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProjectbyFeewDeal_resultStandardScheme getScheme() {
        return new deleteProjectbyFeewDeal_resultStandardScheme();
      }
    }

    private static class deleteProjectbyFeewDeal_resultStandardScheme extends StandardScheme<deleteProjectbyFeewDeal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProjectbyFeewDeal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProjectbyFeewDeal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProjectbyFeewDeal_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProjectbyFeewDeal_resultTupleScheme getScheme() {
        return new deleteProjectbyFeewDeal_resultTupleScheme();
      }
    }

    private static class deleteProjectbyFeewDeal_resultTupleScheme extends TupleScheme<deleteProjectbyFeewDeal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyFeewDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyFeewDeal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class checkFeewDealByProjectId_args implements org.apache.thrift.TBase<checkFeewDealByProjectId_args, checkFeewDealByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkFeewDealByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkFeewDealByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkFeewDealByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkFeewDealByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkFeewDealByProjectId_args.class, metaDataMap);
    }

    public checkFeewDealByProjectId_args() {
    }

    public checkFeewDealByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkFeewDealByProjectId_args(checkFeewDealByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public checkFeewDealByProjectId_args deepCopy() {
      return new checkFeewDealByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public checkFeewDealByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkFeewDealByProjectId_args)
        return this.equals((checkFeewDealByProjectId_args)that);
      return false;
    }

    public boolean equals(checkFeewDealByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkFeewDealByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkFeewDealByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkFeewDealByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public checkFeewDealByProjectId_argsStandardScheme getScheme() {
        return new checkFeewDealByProjectId_argsStandardScheme();
      }
    }

    private static class checkFeewDealByProjectId_argsStandardScheme extends StandardScheme<checkFeewDealByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkFeewDealByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkFeewDealByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkFeewDealByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public checkFeewDealByProjectId_argsTupleScheme getScheme() {
        return new checkFeewDealByProjectId_argsTupleScheme();
      }
    }

    private static class checkFeewDealByProjectId_argsTupleScheme extends TupleScheme<checkFeewDealByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkFeewDealByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkFeewDealByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class checkFeewDealByProjectId_result implements org.apache.thrift.TBase<checkFeewDealByProjectId_result, checkFeewDealByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkFeewDealByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkFeewDealByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkFeewDealByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkFeewDealByProjectId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkFeewDealByProjectId_result.class, metaDataMap);
    }

    public checkFeewDealByProjectId_result() {
    }

    public checkFeewDealByProjectId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkFeewDealByProjectId_result(checkFeewDealByProjectId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public checkFeewDealByProjectId_result deepCopy() {
      return new checkFeewDealByProjectId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkFeewDealByProjectId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public checkFeewDealByProjectId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkFeewDealByProjectId_result)
        return this.equals((checkFeewDealByProjectId_result)that);
      return false;
    }

    public boolean equals(checkFeewDealByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkFeewDealByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkFeewDealByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkFeewDealByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public checkFeewDealByProjectId_resultStandardScheme getScheme() {
        return new checkFeewDealByProjectId_resultStandardScheme();
      }
    }

    private static class checkFeewDealByProjectId_resultStandardScheme extends StandardScheme<checkFeewDealByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkFeewDealByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkFeewDealByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkFeewDealByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public checkFeewDealByProjectId_resultTupleScheme getScheme() {
        return new checkFeewDealByProjectId_resultTupleScheme();
      }
    }

    private static class checkFeewDealByProjectId_resultTupleScheme extends TupleScheme<checkFeewDealByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkFeewDealByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkFeewDealByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateInsertRegFeewDealbyprocess_args implements org.apache.thrift.TBase<updateInsertRegFeewDealbyprocess_args, updateInsertRegFeewDealbyprocess_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateInsertRegFeewDealbyprocess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInsertRegFeewDealbyprocess_args");

    private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEEWDEL_FIELD_DESC = new org.apache.thrift.protocol.TField("feewdel", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInsertRegFeewDealbyprocess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInsertRegFeewDealbyprocess_argsTupleSchemeFactory());
    }

    public String reason; // required
    public String feewdel; // required
    public int repayId; // required
    public int projectId; // required
    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REASON((short)1, "reason"),
      FEEWDEL((short)2, "feewdel"),
      REPAY_ID((short)3, "repayId"),
      PROJECT_ID((short)4, "projectId"),
      LOAN_ID((short)5, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REASON
            return REASON;
          case 2: // FEEWDEL
            return FEEWDEL;
          case 3: // REPAY_ID
            return REPAY_ID;
          case 4: // PROJECT_ID
            return PROJECT_ID;
          case 5: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPAYID_ISSET_ID = 0;
    private static final int __PROJECTID_ISSET_ID = 1;
    private static final int __LOANID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEEWDEL, new org.apache.thrift.meta_data.FieldMetaData("feewdel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInsertRegFeewDealbyprocess_args.class, metaDataMap);
    }

    public updateInsertRegFeewDealbyprocess_args() {
    }

    public updateInsertRegFeewDealbyprocess_args(
      String reason,
      String feewdel,
      int repayId,
      int projectId,
      int loanId)
    {
      this();
      this.reason = reason;
      this.feewdel = feewdel;
      this.repayId = repayId;
      setRepayIdIsSet(true);
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInsertRegFeewDealbyprocess_args(updateInsertRegFeewDealbyprocess_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
      if (other.isSetFeewdel()) {
        this.feewdel = other.feewdel;
      }
      this.repayId = other.repayId;
      this.projectId = other.projectId;
      this.loanId = other.loanId;
    }

    public updateInsertRegFeewDealbyprocess_args deepCopy() {
      return new updateInsertRegFeewDealbyprocess_args(this);
    }

    @Override
    public void clear() {
      this.reason = null;
      this.feewdel = null;
      setRepayIdIsSet(false);
      this.repayId = 0;
      setProjectIdIsSet(false);
      this.projectId = 0;
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public String getReason() {
      return this.reason;
    }

    public updateInsertRegFeewDealbyprocess_args setReason(String reason) {
      this.reason = reason;
      return this;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been assigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public String getFeewdel() {
      return this.feewdel;
    }

    public updateInsertRegFeewDealbyprocess_args setFeewdel(String feewdel) {
      this.feewdel = feewdel;
      return this;
    }

    public void unsetFeewdel() {
      this.feewdel = null;
    }

    /** Returns true if field feewdel is set (has been assigned a value) and false otherwise */
    public boolean isSetFeewdel() {
      return this.feewdel != null;
    }

    public void setFeewdelIsSet(boolean value) {
      if (!value) {
        this.feewdel = null;
      }
    }

    public int getRepayId() {
      return this.repayId;
    }

    public updateInsertRegFeewDealbyprocess_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public int getProjectId() {
      return this.projectId;
    }

    public updateInsertRegFeewDealbyprocess_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getLoanId() {
      return this.loanId;
    }

    public updateInsertRegFeewDealbyprocess_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((String)value);
        }
        break;

      case FEEWDEL:
        if (value == null) {
          unsetFeewdel();
        } else {
          setFeewdel((String)value);
        }
        break;

      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REASON:
        return getReason();

      case FEEWDEL:
        return getFeewdel();

      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REASON:
        return isSetReason();
      case FEEWDEL:
        return isSetFeewdel();
      case REPAY_ID:
        return isSetRepayId();
      case PROJECT_ID:
        return isSetProjectId();
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInsertRegFeewDealbyprocess_args)
        return this.equals((updateInsertRegFeewDealbyprocess_args)that);
      return false;
    }

    public boolean equals(updateInsertRegFeewDealbyprocess_args that) {
      if (that == null)
        return false;

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      boolean this_present_feewdel = true && this.isSetFeewdel();
      boolean that_present_feewdel = true && that.isSetFeewdel();
      if (this_present_feewdel || that_present_feewdel) {
        if (!(this_present_feewdel && that_present_feewdel))
          return false;
        if (!this.feewdel.equals(that.feewdel))
          return false;
      }

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reason = true && (isSetReason());
      list.add(present_reason);
      if (present_reason)
        list.add(reason);

      boolean present_feewdel = true && (isSetFeewdel());
      list.add(present_feewdel);
      if (present_feewdel)
        list.add(feewdel);

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateInsertRegFeewDealbyprocess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFeewdel()).compareTo(other.isSetFeewdel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeewdel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feewdel, other.feewdel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInsertRegFeewDealbyprocess_args(");
      boolean first = true;

      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feewdel:");
      if (this.feewdel == null) {
        sb.append("null");
      } else {
        sb.append(this.feewdel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInsertRegFeewDealbyprocess_argsStandardSchemeFactory implements SchemeFactory {
      public updateInsertRegFeewDealbyprocess_argsStandardScheme getScheme() {
        return new updateInsertRegFeewDealbyprocess_argsStandardScheme();
      }
    }

    private static class updateInsertRegFeewDealbyprocess_argsStandardScheme extends StandardScheme<updateInsertRegFeewDealbyprocess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInsertRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reason = iprot.readString();
                struct.setReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEEWDEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feewdel = iprot.readString();
                struct.setFeewdelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInsertRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reason != null) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
        if (struct.feewdel != null) {
          oprot.writeFieldBegin(FEEWDEL_FIELD_DESC);
          oprot.writeString(struct.feewdel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInsertRegFeewDealbyprocess_argsTupleSchemeFactory implements SchemeFactory {
      public updateInsertRegFeewDealbyprocess_argsTupleScheme getScheme() {
        return new updateInsertRegFeewDealbyprocess_argsTupleScheme();
      }
    }

    private static class updateInsertRegFeewDealbyprocess_argsTupleScheme extends TupleScheme<updateInsertRegFeewDealbyprocess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInsertRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReason()) {
          optionals.set(0);
        }
        if (struct.isSetFeewdel()) {
          optionals.set(1);
        }
        if (struct.isSetRepayId()) {
          optionals.set(2);
        }
        if (struct.isSetProjectId()) {
          optionals.set(3);
        }
        if (struct.isSetLoanId()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetReason()) {
          oprot.writeString(struct.reason);
        }
        if (struct.isSetFeewdel()) {
          oprot.writeString(struct.feewdel);
        }
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInsertRegFeewDealbyprocess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.reason = iprot.readString();
          struct.setReasonIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feewdel = iprot.readString();
          struct.setFeewdelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class updateInsertRegFeewDealbyprocess_result implements org.apache.thrift.TBase<updateInsertRegFeewDealbyprocess_result, updateInsertRegFeewDealbyprocess_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateInsertRegFeewDealbyprocess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInsertRegFeewDealbyprocess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInsertRegFeewDealbyprocess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInsertRegFeewDealbyprocess_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInsertRegFeewDealbyprocess_result.class, metaDataMap);
    }

    public updateInsertRegFeewDealbyprocess_result() {
    }

    public updateInsertRegFeewDealbyprocess_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInsertRegFeewDealbyprocess_result(updateInsertRegFeewDealbyprocess_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateInsertRegFeewDealbyprocess_result deepCopy() {
      return new updateInsertRegFeewDealbyprocess_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateInsertRegFeewDealbyprocess_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateInsertRegFeewDealbyprocess_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInsertRegFeewDealbyprocess_result)
        return this.equals((updateInsertRegFeewDealbyprocess_result)that);
      return false;
    }

    public boolean equals(updateInsertRegFeewDealbyprocess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateInsertRegFeewDealbyprocess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInsertRegFeewDealbyprocess_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInsertRegFeewDealbyprocess_resultStandardSchemeFactory implements SchemeFactory {
      public updateInsertRegFeewDealbyprocess_resultStandardScheme getScheme() {
        return new updateInsertRegFeewDealbyprocess_resultStandardScheme();
      }
    }

    private static class updateInsertRegFeewDealbyprocess_resultStandardScheme extends StandardScheme<updateInsertRegFeewDealbyprocess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInsertRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInsertRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInsertRegFeewDealbyprocess_resultTupleSchemeFactory implements SchemeFactory {
      public updateInsertRegFeewDealbyprocess_resultTupleScheme getScheme() {
        return new updateInsertRegFeewDealbyprocess_resultTupleScheme();
      }
    }

    private static class updateInsertRegFeewDealbyprocess_resultTupleScheme extends TupleScheme<updateInsertRegFeewDealbyprocess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInsertRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInsertRegFeewDealbyprocess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class findFeeWaiverApplication_args implements org.apache.thrift.TBase<findFeeWaiverApplication_args, findFeeWaiverApplication_args._Fields>, java.io.Serializable, Cloneable, Comparable<findFeeWaiverApplication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFeeWaiverApplication_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repayId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFeeWaiverApplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFeeWaiverApplication_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int repayId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      REPAY_ID((short)2, "repayId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // REPAY_ID
            return REPAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __REPAYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("repayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFeeWaiverApplication_args.class, metaDataMap);
    }

    public findFeeWaiverApplication_args() {
    }

    public findFeeWaiverApplication_args(
      int userId,
      int repayId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.repayId = repayId;
      setRepayIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFeeWaiverApplication_args(findFeeWaiverApplication_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.repayId = other.repayId;
    }

    public findFeeWaiverApplication_args deepCopy() {
      return new findFeeWaiverApplication_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setRepayIdIsSet(false);
      this.repayId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public findFeeWaiverApplication_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getRepayId() {
      return this.repayId;
    }

    public findFeeWaiverApplication_args setRepayId(int repayId) {
      this.repayId = repayId;
      setRepayIdIsSet(true);
      return this;
    }

    public void unsetRepayId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    /** Returns true if field repayId is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPAYID_ISSET_ID);
    }

    public void setRepayIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case REPAY_ID:
        if (value == null) {
          unsetRepayId();
        } else {
          setRepayId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Integer.valueOf(getUserId());

      case REPAY_ID:
        return Integer.valueOf(getRepayId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case REPAY_ID:
        return isSetRepayId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFeeWaiverApplication_args)
        return this.equals((findFeeWaiverApplication_args)that);
      return false;
    }

    public boolean equals(findFeeWaiverApplication_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_repayId = true;
      boolean that_present_repayId = true;
      if (this_present_repayId || that_present_repayId) {
        if (!(this_present_repayId && that_present_repayId))
          return false;
        if (this.repayId != that.repayId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_repayId = true;
      list.add(present_repayId);
      if (present_repayId)
        list.add(repayId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFeeWaiverApplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRepayId()).compareTo(other.isSetRepayId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayId, other.repayId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFeeWaiverApplication_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("repayId:");
      sb.append(this.repayId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFeeWaiverApplication_argsStandardSchemeFactory implements SchemeFactory {
      public findFeeWaiverApplication_argsStandardScheme getScheme() {
        return new findFeeWaiverApplication_argsStandardScheme();
      }
    }

    private static class findFeeWaiverApplication_argsStandardScheme extends StandardScheme<findFeeWaiverApplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFeeWaiverApplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.repayId = iprot.readI32();
                struct.setRepayIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFeeWaiverApplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPAY_ID_FIELD_DESC);
        oprot.writeI32(struct.repayId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFeeWaiverApplication_argsTupleSchemeFactory implements SchemeFactory {
      public findFeeWaiverApplication_argsTupleScheme getScheme() {
        return new findFeeWaiverApplication_argsTupleScheme();
      }
    }

    private static class findFeeWaiverApplication_argsTupleScheme extends TupleScheme<findFeeWaiverApplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFeeWaiverApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetRepayId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetRepayId()) {
          oprot.writeI32(struct.repayId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFeeWaiverApplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.repayId = iprot.readI32();
          struct.setRepayIdIsSet(true);
        }
      }
    }

  }

  public static class findFeeWaiverApplication_result implements org.apache.thrift.TBase<findFeeWaiverApplication_result, findFeeWaiverApplication_result._Fields>, java.io.Serializable, Cloneable, Comparable<findFeeWaiverApplication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFeeWaiverApplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFeeWaiverApplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFeeWaiverApplication_resultTupleSchemeFactory());
    }

    public FeeWaiverApplicationDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FeeWaiverApplicationDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFeeWaiverApplication_result.class, metaDataMap);
    }

    public findFeeWaiverApplication_result() {
    }

    public findFeeWaiverApplication_result(
      FeeWaiverApplicationDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFeeWaiverApplication_result(findFeeWaiverApplication_result other) {
      if (other.isSetSuccess()) {
        this.success = new FeeWaiverApplicationDTO(other.success);
      }
    }

    public findFeeWaiverApplication_result deepCopy() {
      return new findFeeWaiverApplication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FeeWaiverApplicationDTO getSuccess() {
      return this.success;
    }

    public findFeeWaiverApplication_result setSuccess(FeeWaiverApplicationDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FeeWaiverApplicationDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFeeWaiverApplication_result)
        return this.equals((findFeeWaiverApplication_result)that);
      return false;
    }

    public boolean equals(findFeeWaiverApplication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFeeWaiverApplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFeeWaiverApplication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFeeWaiverApplication_resultStandardSchemeFactory implements SchemeFactory {
      public findFeeWaiverApplication_resultStandardScheme getScheme() {
        return new findFeeWaiverApplication_resultStandardScheme();
      }
    }

    private static class findFeeWaiverApplication_resultStandardScheme extends StandardScheme<findFeeWaiverApplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFeeWaiverApplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FeeWaiverApplicationDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFeeWaiverApplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFeeWaiverApplication_resultTupleSchemeFactory implements SchemeFactory {
      public findFeeWaiverApplication_resultTupleScheme getScheme() {
        return new findFeeWaiverApplication_resultTupleScheme();
      }
    }

    private static class findFeeWaiverApplication_resultTupleScheme extends TupleScheme<findFeeWaiverApplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFeeWaiverApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFeeWaiverApplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FeeWaiverApplicationDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

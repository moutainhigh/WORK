/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class CreditsDTO implements org.apache.thrift.TBase<CreditsDTO, CreditsDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CreditsDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreditsDTO");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_HOOP_FIELD_DESC = new org.apache.thrift.protocol.TField("isHoop", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_HOOP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("isHoopVal", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREDTI_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("credtiStartDt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREDTI_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("credtiEndDt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BEGIN_REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("beginRequestDttm", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField END_REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("endRequestDttm", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField EXTRACTION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("extractionAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField FREEZE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("freezeAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField AVAILABLE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField CREDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creditId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField DATA_OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataObject", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField PM_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUser", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField RELATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("relationType", org.apache.thrift.protocol.TType.I32, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreditsDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreditsDTOTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public String acctName; // required
  public int ecoTrade; // required
  public int acctType; // required
  public int isHoop; // required
  public String isHoopVal; // required
  public String credtiStartDt; // required
  public String credtiEndDt; // required
  public String beginRequestDttm; // required
  public String endRequestDttm; // required
  public double creditAmt; // required
  public double extractionAmt; // required
  public double freezeAmt; // required
  public double availableAmt; // required
  public int page; // required
  public int rows; // required
  public int creditId; // required
  public int refId; // required
  public int cusType; // required
  public String dataObject; // required
  public int pmUserId; // required
  public String pmUser; // required
  public String requestDttm; // required
  public int relationType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NUMBER((short)2, "projectNumber"),
    PROJECT_NAME((short)3, "projectName"),
    ACCT_NAME((short)4, "acctName"),
    ECO_TRADE((short)5, "ecoTrade"),
    ACCT_TYPE((short)6, "acctType"),
    IS_HOOP((short)7, "isHoop"),
    IS_HOOP_VAL((short)8, "isHoopVal"),
    CREDTI_START_DT((short)9, "credtiStartDt"),
    CREDTI_END_DT((short)10, "credtiEndDt"),
    BEGIN_REQUEST_DTTM((short)11, "beginRequestDttm"),
    END_REQUEST_DTTM((short)12, "endRequestDttm"),
    CREDIT_AMT((short)13, "creditAmt"),
    EXTRACTION_AMT((short)14, "extractionAmt"),
    FREEZE_AMT((short)15, "freezeAmt"),
    AVAILABLE_AMT((short)16, "availableAmt"),
    PAGE((short)17, "page"),
    ROWS((short)18, "rows"),
    CREDIT_ID((short)19, "creditId"),
    REF_ID((short)20, "refId"),
    CUS_TYPE((short)21, "cusType"),
    DATA_OBJECT((short)22, "dataObject"),
    PM_USER_ID((short)23, "pmUserId"),
    PM_USER((short)24, "pmUser"),
    REQUEST_DTTM((short)25, "requestDttm"),
    RELATION_TYPE((short)26, "relationType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 3: // PROJECT_NAME
          return PROJECT_NAME;
        case 4: // ACCT_NAME
          return ACCT_NAME;
        case 5: // ECO_TRADE
          return ECO_TRADE;
        case 6: // ACCT_TYPE
          return ACCT_TYPE;
        case 7: // IS_HOOP
          return IS_HOOP;
        case 8: // IS_HOOP_VAL
          return IS_HOOP_VAL;
        case 9: // CREDTI_START_DT
          return CREDTI_START_DT;
        case 10: // CREDTI_END_DT
          return CREDTI_END_DT;
        case 11: // BEGIN_REQUEST_DTTM
          return BEGIN_REQUEST_DTTM;
        case 12: // END_REQUEST_DTTM
          return END_REQUEST_DTTM;
        case 13: // CREDIT_AMT
          return CREDIT_AMT;
        case 14: // EXTRACTION_AMT
          return EXTRACTION_AMT;
        case 15: // FREEZE_AMT
          return FREEZE_AMT;
        case 16: // AVAILABLE_AMT
          return AVAILABLE_AMT;
        case 17: // PAGE
          return PAGE;
        case 18: // ROWS
          return ROWS;
        case 19: // CREDIT_ID
          return CREDIT_ID;
        case 20: // REF_ID
          return REF_ID;
        case 21: // CUS_TYPE
          return CUS_TYPE;
        case 22: // DATA_OBJECT
          return DATA_OBJECT;
        case 23: // PM_USER_ID
          return PM_USER_ID;
        case 24: // PM_USER
          return PM_USER;
        case 25: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 26: // RELATION_TYPE
          return RELATION_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __ECOTRADE_ISSET_ID = 1;
  private static final int __ACCTTYPE_ISSET_ID = 2;
  private static final int __ISHOOP_ISSET_ID = 3;
  private static final int __CREDITAMT_ISSET_ID = 4;
  private static final int __EXTRACTIONAMT_ISSET_ID = 5;
  private static final int __FREEZEAMT_ISSET_ID = 6;
  private static final int __AVAILABLEAMT_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private static final int __CREDITID_ISSET_ID = 10;
  private static final int __REFID_ISSET_ID = 11;
  private static final int __CUSTYPE_ISSET_ID = 12;
  private static final int __PMUSERID_ISSET_ID = 13;
  private static final int __RELATIONTYPE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_HOOP, new org.apache.thrift.meta_data.FieldMetaData("isHoop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_HOOP_VAL, new org.apache.thrift.meta_data.FieldMetaData("isHoopVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDTI_START_DT, new org.apache.thrift.meta_data.FieldMetaData("credtiStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDTI_END_DT, new org.apache.thrift.meta_data.FieldMetaData("credtiEndDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("beginRequestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("endRequestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTRACTION_AMT, new org.apache.thrift.meta_data.FieldMetaData("extractionAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FREEZE_AMT, new org.apache.thrift.meta_data.FieldMetaData("freezeAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_AMT, new org.apache.thrift.meta_data.FieldMetaData("availableAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("creditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA_OBJECT, new org.apache.thrift.meta_data.FieldMetaData("dataObject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER, new org.apache.thrift.meta_data.FieldMetaData("pmUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("relationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreditsDTO.class, metaDataMap);
  }

  public CreditsDTO() {
  }

  public CreditsDTO(
    int projectId,
    String projectNumber,
    String projectName,
    String acctName,
    int ecoTrade,
    int acctType,
    int isHoop,
    String isHoopVal,
    String credtiStartDt,
    String credtiEndDt,
    String beginRequestDttm,
    String endRequestDttm,
    double creditAmt,
    double extractionAmt,
    double freezeAmt,
    double availableAmt,
    int page,
    int rows,
    int creditId,
    int refId,
    int cusType,
    String dataObject,
    int pmUserId,
    String pmUser,
    String requestDttm,
    int relationType)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.acctName = acctName;
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    this.isHoop = isHoop;
    setIsHoopIsSet(true);
    this.isHoopVal = isHoopVal;
    this.credtiStartDt = credtiStartDt;
    this.credtiEndDt = credtiEndDt;
    this.beginRequestDttm = beginRequestDttm;
    this.endRequestDttm = endRequestDttm;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.extractionAmt = extractionAmt;
    setExtractionAmtIsSet(true);
    this.freezeAmt = freezeAmt;
    setFreezeAmtIsSet(true);
    this.availableAmt = availableAmt;
    setAvailableAmtIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.creditId = creditId;
    setCreditIdIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.dataObject = dataObject;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.pmUser = pmUser;
    this.requestDttm = requestDttm;
    this.relationType = relationType;
    setRelationTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreditsDTO(CreditsDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    this.ecoTrade = other.ecoTrade;
    this.acctType = other.acctType;
    this.isHoop = other.isHoop;
    if (other.isSetIsHoopVal()) {
      this.isHoopVal = other.isHoopVal;
    }
    if (other.isSetCredtiStartDt()) {
      this.credtiStartDt = other.credtiStartDt;
    }
    if (other.isSetCredtiEndDt()) {
      this.credtiEndDt = other.credtiEndDt;
    }
    if (other.isSetBeginRequestDttm()) {
      this.beginRequestDttm = other.beginRequestDttm;
    }
    if (other.isSetEndRequestDttm()) {
      this.endRequestDttm = other.endRequestDttm;
    }
    this.creditAmt = other.creditAmt;
    this.extractionAmt = other.extractionAmt;
    this.freezeAmt = other.freezeAmt;
    this.availableAmt = other.availableAmt;
    this.page = other.page;
    this.rows = other.rows;
    this.creditId = other.creditId;
    this.refId = other.refId;
    this.cusType = other.cusType;
    if (other.isSetDataObject()) {
      this.dataObject = other.dataObject;
    }
    this.pmUserId = other.pmUserId;
    if (other.isSetPmUser()) {
      this.pmUser = other.pmUser;
    }
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    this.relationType = other.relationType;
  }

  public CreditsDTO deepCopy() {
    return new CreditsDTO(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    this.acctName = null;
    setEcoTradeIsSet(false);
    this.ecoTrade = 0;
    setAcctTypeIsSet(false);
    this.acctType = 0;
    setIsHoopIsSet(false);
    this.isHoop = 0;
    this.isHoopVal = null;
    this.credtiStartDt = null;
    this.credtiEndDt = null;
    this.beginRequestDttm = null;
    this.endRequestDttm = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setExtractionAmtIsSet(false);
    this.extractionAmt = 0.0;
    setFreezeAmtIsSet(false);
    this.freezeAmt = 0.0;
    setAvailableAmtIsSet(false);
    this.availableAmt = 0.0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setCreditIdIsSet(false);
    this.creditId = 0;
    setRefIdIsSet(false);
    this.refId = 0;
    setCusTypeIsSet(false);
    this.cusType = 0;
    this.dataObject = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.pmUser = null;
    this.requestDttm = null;
    setRelationTypeIsSet(false);
    this.relationType = 0;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CreditsDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public CreditsDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public CreditsDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public CreditsDTO setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public int getEcoTrade() {
    return this.ecoTrade;
  }

  public CreditsDTO setEcoTrade(int ecoTrade) {
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    return this;
  }

  public void unsetEcoTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  public void setEcoTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECOTRADE_ISSET_ID, value);
  }

  public int getAcctType() {
    return this.acctType;
  }

  public CreditsDTO setAcctType(int acctType) {
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    return this;
  }

  public void unsetAcctType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  public void setAcctTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTTYPE_ISSET_ID, value);
  }

  public int getIsHoop() {
    return this.isHoop;
  }

  public CreditsDTO setIsHoop(int isHoop) {
    this.isHoop = isHoop;
    setIsHoopIsSet(true);
    return this;
  }

  public void unsetIsHoop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHOOP_ISSET_ID);
  }

  /** Returns true if field isHoop is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHoop() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHOOP_ISSET_ID);
  }

  public void setIsHoopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHOOP_ISSET_ID, value);
  }

  public String getIsHoopVal() {
    return this.isHoopVal;
  }

  public CreditsDTO setIsHoopVal(String isHoopVal) {
    this.isHoopVal = isHoopVal;
    return this;
  }

  public void unsetIsHoopVal() {
    this.isHoopVal = null;
  }

  /** Returns true if field isHoopVal is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHoopVal() {
    return this.isHoopVal != null;
  }

  public void setIsHoopValIsSet(boolean value) {
    if (!value) {
      this.isHoopVal = null;
    }
  }

  public String getCredtiStartDt() {
    return this.credtiStartDt;
  }

  public CreditsDTO setCredtiStartDt(String credtiStartDt) {
    this.credtiStartDt = credtiStartDt;
    return this;
  }

  public void unsetCredtiStartDt() {
    this.credtiStartDt = null;
  }

  /** Returns true if field credtiStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetCredtiStartDt() {
    return this.credtiStartDt != null;
  }

  public void setCredtiStartDtIsSet(boolean value) {
    if (!value) {
      this.credtiStartDt = null;
    }
  }

  public String getCredtiEndDt() {
    return this.credtiEndDt;
  }

  public CreditsDTO setCredtiEndDt(String credtiEndDt) {
    this.credtiEndDt = credtiEndDt;
    return this;
  }

  public void unsetCredtiEndDt() {
    this.credtiEndDt = null;
  }

  /** Returns true if field credtiEndDt is set (has been assigned a value) and false otherwise */
  public boolean isSetCredtiEndDt() {
    return this.credtiEndDt != null;
  }

  public void setCredtiEndDtIsSet(boolean value) {
    if (!value) {
      this.credtiEndDt = null;
    }
  }

  public String getBeginRequestDttm() {
    return this.beginRequestDttm;
  }

  public CreditsDTO setBeginRequestDttm(String beginRequestDttm) {
    this.beginRequestDttm = beginRequestDttm;
    return this;
  }

  public void unsetBeginRequestDttm() {
    this.beginRequestDttm = null;
  }

  /** Returns true if field beginRequestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginRequestDttm() {
    return this.beginRequestDttm != null;
  }

  public void setBeginRequestDttmIsSet(boolean value) {
    if (!value) {
      this.beginRequestDttm = null;
    }
  }

  public String getEndRequestDttm() {
    return this.endRequestDttm;
  }

  public CreditsDTO setEndRequestDttm(String endRequestDttm) {
    this.endRequestDttm = endRequestDttm;
    return this;
  }

  public void unsetEndRequestDttm() {
    this.endRequestDttm = null;
  }

  /** Returns true if field endRequestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetEndRequestDttm() {
    return this.endRequestDttm != null;
  }

  public void setEndRequestDttmIsSet(boolean value) {
    if (!value) {
      this.endRequestDttm = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public CreditsDTO setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getExtractionAmt() {
    return this.extractionAmt;
  }

  public CreditsDTO setExtractionAmt(double extractionAmt) {
    this.extractionAmt = extractionAmt;
    setExtractionAmtIsSet(true);
    return this;
  }

  public void unsetExtractionAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTRACTIONAMT_ISSET_ID);
  }

  /** Returns true if field extractionAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetExtractionAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTRACTIONAMT_ISSET_ID);
  }

  public void setExtractionAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTRACTIONAMT_ISSET_ID, value);
  }

  public double getFreezeAmt() {
    return this.freezeAmt;
  }

  public CreditsDTO setFreezeAmt(double freezeAmt) {
    this.freezeAmt = freezeAmt;
    setFreezeAmtIsSet(true);
    return this;
  }

  public void unsetFreezeAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEZEAMT_ISSET_ID);
  }

  /** Returns true if field freezeAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFreezeAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEZEAMT_ISSET_ID);
  }

  public void setFreezeAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEZEAMT_ISSET_ID, value);
  }

  public double getAvailableAmt() {
    return this.availableAmt;
  }

  public CreditsDTO setAvailableAmt(double availableAmt) {
    this.availableAmt = availableAmt;
    setAvailableAmtIsSet(true);
    return this;
  }

  public void unsetAvailableAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEAMT_ISSET_ID);
  }

  /** Returns true if field availableAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEAMT_ISSET_ID);
  }

  public void setAvailableAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEAMT_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CreditsDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CreditsDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getCreditId() {
    return this.creditId;
  }

  public CreditsDTO setCreditId(int creditId) {
    this.creditId = creditId;
    setCreditIdIsSet(true);
    return this;
  }

  public void unsetCreditId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITID_ISSET_ID);
  }

  /** Returns true if field creditId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITID_ISSET_ID);
  }

  public void setCreditIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITID_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public CreditsDTO setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getCusType() {
    return this.cusType;
  }

  public CreditsDTO setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public String getDataObject() {
    return this.dataObject;
  }

  public CreditsDTO setDataObject(String dataObject) {
    this.dataObject = dataObject;
    return this;
  }

  public void unsetDataObject() {
    this.dataObject = null;
  }

  /** Returns true if field dataObject is set (has been assigned a value) and false otherwise */
  public boolean isSetDataObject() {
    return this.dataObject != null;
  }

  public void setDataObjectIsSet(boolean value) {
    if (!value) {
      this.dataObject = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public CreditsDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public String getPmUser() {
    return this.pmUser;
  }

  public CreditsDTO setPmUser(String pmUser) {
    this.pmUser = pmUser;
    return this;
  }

  public void unsetPmUser() {
    this.pmUser = null;
  }

  /** Returns true if field pmUser is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUser() {
    return this.pmUser != null;
  }

  public void setPmUserIsSet(boolean value) {
    if (!value) {
      this.pmUser = null;
    }
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public CreditsDTO setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public int getRelationType() {
    return this.relationType;
  }

  public CreditsDTO setRelationType(int relationType) {
    this.relationType = relationType;
    setRelationTypeIsSet(true);
    return this;
  }

  public void unsetRelationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  /** Returns true if field relationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationType() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID);
  }

  public void setRelationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((Integer)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((Integer)value);
      }
      break;

    case IS_HOOP:
      if (value == null) {
        unsetIsHoop();
      } else {
        setIsHoop((Integer)value);
      }
      break;

    case IS_HOOP_VAL:
      if (value == null) {
        unsetIsHoopVal();
      } else {
        setIsHoopVal((String)value);
      }
      break;

    case CREDTI_START_DT:
      if (value == null) {
        unsetCredtiStartDt();
      } else {
        setCredtiStartDt((String)value);
      }
      break;

    case CREDTI_END_DT:
      if (value == null) {
        unsetCredtiEndDt();
      } else {
        setCredtiEndDt((String)value);
      }
      break;

    case BEGIN_REQUEST_DTTM:
      if (value == null) {
        unsetBeginRequestDttm();
      } else {
        setBeginRequestDttm((String)value);
      }
      break;

    case END_REQUEST_DTTM:
      if (value == null) {
        unsetEndRequestDttm();
      } else {
        setEndRequestDttm((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case EXTRACTION_AMT:
      if (value == null) {
        unsetExtractionAmt();
      } else {
        setExtractionAmt((Double)value);
      }
      break;

    case FREEZE_AMT:
      if (value == null) {
        unsetFreezeAmt();
      } else {
        setFreezeAmt((Double)value);
      }
      break;

    case AVAILABLE_AMT:
      if (value == null) {
        unsetAvailableAmt();
      } else {
        setAvailableAmt((Double)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREDIT_ID:
      if (value == null) {
        unsetCreditId();
      } else {
        setCreditId((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case DATA_OBJECT:
      if (value == null) {
        unsetDataObject();
      } else {
        setDataObject((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case PM_USER:
      if (value == null) {
        unsetPmUser();
      } else {
        setPmUser((String)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case RELATION_TYPE:
      if (value == null) {
        unsetRelationType();
      } else {
        setRelationType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case ACCT_NAME:
      return getAcctName();

    case ECO_TRADE:
      return Integer.valueOf(getEcoTrade());

    case ACCT_TYPE:
      return Integer.valueOf(getAcctType());

    case IS_HOOP:
      return Integer.valueOf(getIsHoop());

    case IS_HOOP_VAL:
      return getIsHoopVal();

    case CREDTI_START_DT:
      return getCredtiStartDt();

    case CREDTI_END_DT:
      return getCredtiEndDt();

    case BEGIN_REQUEST_DTTM:
      return getBeginRequestDttm();

    case END_REQUEST_DTTM:
      return getEndRequestDttm();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case EXTRACTION_AMT:
      return Double.valueOf(getExtractionAmt());

    case FREEZE_AMT:
      return Double.valueOf(getFreezeAmt());

    case AVAILABLE_AMT:
      return Double.valueOf(getAvailableAmt());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREDIT_ID:
      return Integer.valueOf(getCreditId());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case DATA_OBJECT:
      return getDataObject();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case PM_USER:
      return getPmUser();

    case REQUEST_DTTM:
      return getRequestDttm();

    case RELATION_TYPE:
      return Integer.valueOf(getRelationType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case ACCT_NAME:
      return isSetAcctName();
    case ECO_TRADE:
      return isSetEcoTrade();
    case ACCT_TYPE:
      return isSetAcctType();
    case IS_HOOP:
      return isSetIsHoop();
    case IS_HOOP_VAL:
      return isSetIsHoopVal();
    case CREDTI_START_DT:
      return isSetCredtiStartDt();
    case CREDTI_END_DT:
      return isSetCredtiEndDt();
    case BEGIN_REQUEST_DTTM:
      return isSetBeginRequestDttm();
    case END_REQUEST_DTTM:
      return isSetEndRequestDttm();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case EXTRACTION_AMT:
      return isSetExtractionAmt();
    case FREEZE_AMT:
      return isSetFreezeAmt();
    case AVAILABLE_AMT:
      return isSetAvailableAmt();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREDIT_ID:
      return isSetCreditId();
    case REF_ID:
      return isSetRefId();
    case CUS_TYPE:
      return isSetCusType();
    case DATA_OBJECT:
      return isSetDataObject();
    case PM_USER_ID:
      return isSetPmUserId();
    case PM_USER:
      return isSetPmUser();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case RELATION_TYPE:
      return isSetRelationType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreditsDTO)
      return this.equals((CreditsDTO)that);
    return false;
  }

  public boolean equals(CreditsDTO that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_ecoTrade = true;
    boolean that_present_ecoTrade = true;
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (this.ecoTrade != that.ecoTrade)
        return false;
    }

    boolean this_present_acctType = true;
    boolean that_present_acctType = true;
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (this.acctType != that.acctType)
        return false;
    }

    boolean this_present_isHoop = true;
    boolean that_present_isHoop = true;
    if (this_present_isHoop || that_present_isHoop) {
      if (!(this_present_isHoop && that_present_isHoop))
        return false;
      if (this.isHoop != that.isHoop)
        return false;
    }

    boolean this_present_isHoopVal = true && this.isSetIsHoopVal();
    boolean that_present_isHoopVal = true && that.isSetIsHoopVal();
    if (this_present_isHoopVal || that_present_isHoopVal) {
      if (!(this_present_isHoopVal && that_present_isHoopVal))
        return false;
      if (!this.isHoopVal.equals(that.isHoopVal))
        return false;
    }

    boolean this_present_credtiStartDt = true && this.isSetCredtiStartDt();
    boolean that_present_credtiStartDt = true && that.isSetCredtiStartDt();
    if (this_present_credtiStartDt || that_present_credtiStartDt) {
      if (!(this_present_credtiStartDt && that_present_credtiStartDt))
        return false;
      if (!this.credtiStartDt.equals(that.credtiStartDt))
        return false;
    }

    boolean this_present_credtiEndDt = true && this.isSetCredtiEndDt();
    boolean that_present_credtiEndDt = true && that.isSetCredtiEndDt();
    if (this_present_credtiEndDt || that_present_credtiEndDt) {
      if (!(this_present_credtiEndDt && that_present_credtiEndDt))
        return false;
      if (!this.credtiEndDt.equals(that.credtiEndDt))
        return false;
    }

    boolean this_present_beginRequestDttm = true && this.isSetBeginRequestDttm();
    boolean that_present_beginRequestDttm = true && that.isSetBeginRequestDttm();
    if (this_present_beginRequestDttm || that_present_beginRequestDttm) {
      if (!(this_present_beginRequestDttm && that_present_beginRequestDttm))
        return false;
      if (!this.beginRequestDttm.equals(that.beginRequestDttm))
        return false;
    }

    boolean this_present_endRequestDttm = true && this.isSetEndRequestDttm();
    boolean that_present_endRequestDttm = true && that.isSetEndRequestDttm();
    if (this_present_endRequestDttm || that_present_endRequestDttm) {
      if (!(this_present_endRequestDttm && that_present_endRequestDttm))
        return false;
      if (!this.endRequestDttm.equals(that.endRequestDttm))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_extractionAmt = true;
    boolean that_present_extractionAmt = true;
    if (this_present_extractionAmt || that_present_extractionAmt) {
      if (!(this_present_extractionAmt && that_present_extractionAmt))
        return false;
      if (this.extractionAmt != that.extractionAmt)
        return false;
    }

    boolean this_present_freezeAmt = true;
    boolean that_present_freezeAmt = true;
    if (this_present_freezeAmt || that_present_freezeAmt) {
      if (!(this_present_freezeAmt && that_present_freezeAmt))
        return false;
      if (this.freezeAmt != that.freezeAmt)
        return false;
    }

    boolean this_present_availableAmt = true;
    boolean that_present_availableAmt = true;
    if (this_present_availableAmt || that_present_availableAmt) {
      if (!(this_present_availableAmt && that_present_availableAmt))
        return false;
      if (this.availableAmt != that.availableAmt)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_creditId = true;
    boolean that_present_creditId = true;
    if (this_present_creditId || that_present_creditId) {
      if (!(this_present_creditId && that_present_creditId))
        return false;
      if (this.creditId != that.creditId)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_dataObject = true && this.isSetDataObject();
    boolean that_present_dataObject = true && that.isSetDataObject();
    if (this_present_dataObject || that_present_dataObject) {
      if (!(this_present_dataObject && that_present_dataObject))
        return false;
      if (!this.dataObject.equals(that.dataObject))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_pmUser = true && this.isSetPmUser();
    boolean that_present_pmUser = true && that.isSetPmUser();
    if (this_present_pmUser || that_present_pmUser) {
      if (!(this_present_pmUser && that_present_pmUser))
        return false;
      if (!this.pmUser.equals(that.pmUser))
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_relationType = true;
    boolean that_present_relationType = true;
    if (this_present_relationType || that_present_relationType) {
      if (!(this_present_relationType && that_present_relationType))
        return false;
      if (this.relationType != that.relationType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_ecoTrade = true;
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_acctType = true;
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_isHoop = true;
    list.add(present_isHoop);
    if (present_isHoop)
      list.add(isHoop);

    boolean present_isHoopVal = true && (isSetIsHoopVal());
    list.add(present_isHoopVal);
    if (present_isHoopVal)
      list.add(isHoopVal);

    boolean present_credtiStartDt = true && (isSetCredtiStartDt());
    list.add(present_credtiStartDt);
    if (present_credtiStartDt)
      list.add(credtiStartDt);

    boolean present_credtiEndDt = true && (isSetCredtiEndDt());
    list.add(present_credtiEndDt);
    if (present_credtiEndDt)
      list.add(credtiEndDt);

    boolean present_beginRequestDttm = true && (isSetBeginRequestDttm());
    list.add(present_beginRequestDttm);
    if (present_beginRequestDttm)
      list.add(beginRequestDttm);

    boolean present_endRequestDttm = true && (isSetEndRequestDttm());
    list.add(present_endRequestDttm);
    if (present_endRequestDttm)
      list.add(endRequestDttm);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_extractionAmt = true;
    list.add(present_extractionAmt);
    if (present_extractionAmt)
      list.add(extractionAmt);

    boolean present_freezeAmt = true;
    list.add(present_freezeAmt);
    if (present_freezeAmt)
      list.add(freezeAmt);

    boolean present_availableAmt = true;
    list.add(present_availableAmt);
    if (present_availableAmt)
      list.add(availableAmt);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_creditId = true;
    list.add(present_creditId);
    if (present_creditId)
      list.add(creditId);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_dataObject = true && (isSetDataObject());
    list.add(present_dataObject);
    if (present_dataObject)
      list.add(dataObject);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_pmUser = true && (isSetPmUser());
    list.add(present_pmUser);
    if (present_pmUser)
      list.add(pmUser);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_relationType = true;
    list.add(present_relationType);
    if (present_relationType)
      list.add(relationType);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreditsDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHoop()).compareTo(other.isSetIsHoop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHoop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHoop, other.isHoop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHoopVal()).compareTo(other.isSetIsHoopVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHoopVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHoopVal, other.isHoopVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredtiStartDt()).compareTo(other.isSetCredtiStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredtiStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credtiStartDt, other.credtiStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredtiEndDt()).compareTo(other.isSetCredtiEndDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredtiEndDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credtiEndDt, other.credtiEndDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginRequestDttm()).compareTo(other.isSetBeginRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginRequestDttm, other.beginRequestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndRequestDttm()).compareTo(other.isSetEndRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRequestDttm, other.endRequestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtractionAmt()).compareTo(other.isSetExtractionAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtractionAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extractionAmt, other.extractionAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreezeAmt()).compareTo(other.isSetFreezeAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreezeAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezeAmt, other.freezeAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableAmt()).compareTo(other.isSetAvailableAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableAmt, other.availableAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditId()).compareTo(other.isSetCreditId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditId, other.creditId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataObject()).compareTo(other.isSetDataObject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataObject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataObject, other.dataObject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUser()).compareTo(other.isSetPmUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUser, other.pmUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationType()).compareTo(other.isSetRelationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationType, other.relationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreditsDTO(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    sb.append(this.ecoTrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    sb.append(this.acctType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHoop:");
    sb.append(this.isHoop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHoopVal:");
    if (this.isHoopVal == null) {
      sb.append("null");
    } else {
      sb.append(this.isHoopVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("credtiStartDt:");
    if (this.credtiStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.credtiStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("credtiEndDt:");
    if (this.credtiEndDt == null) {
      sb.append("null");
    } else {
      sb.append(this.credtiEndDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginRequestDttm:");
    if (this.beginRequestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.beginRequestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endRequestDttm:");
    if (this.endRequestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.endRequestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extractionAmt:");
    sb.append(this.extractionAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freezeAmt:");
    sb.append(this.freezeAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableAmt:");
    sb.append(this.availableAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditId:");
    sb.append(this.creditId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataObject:");
    if (this.dataObject == null) {
      sb.append("null");
    } else {
      sb.append(this.dataObject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUser:");
    if (this.pmUser == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationType:");
    sb.append(this.relationType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditsDTOStandardSchemeFactory implements SchemeFactory {
    public CreditsDTOStandardScheme getScheme() {
      return new CreditsDTOStandardScheme();
    }
  }

  private static class CreditsDTOStandardScheme extends StandardScheme<CreditsDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreditsDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecoTrade = iprot.readI32();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctType = iprot.readI32();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_HOOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isHoop = iprot.readI32();
              struct.setIsHoopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_HOOP_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isHoopVal = iprot.readString();
              struct.setIsHoopValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREDTI_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.credtiStartDt = iprot.readString();
              struct.setCredtiStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREDTI_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.credtiEndDt = iprot.readString();
              struct.setCredtiEndDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BEGIN_REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginRequestDttm = iprot.readString();
              struct.setBeginRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endRequestDttm = iprot.readString();
              struct.setEndRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXTRACTION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extractionAmt = iprot.readDouble();
              struct.setExtractionAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FREEZE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.freezeAmt = iprot.readDouble();
              struct.setFreezeAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AVAILABLE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableAmt = iprot.readDouble();
              struct.setAvailableAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREDIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditId = iprot.readI32();
              struct.setCreditIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DATA_OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataObject = iprot.readString();
              struct.setDataObjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PM_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUser = iprot.readString();
              struct.setPmUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // RELATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relationType = iprot.readI32();
              struct.setRelationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreditsDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
      oprot.writeI32(struct.ecoTrade);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.acctType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_HOOP_FIELD_DESC);
      oprot.writeI32(struct.isHoop);
      oprot.writeFieldEnd();
      if (struct.isHoopVal != null) {
        oprot.writeFieldBegin(IS_HOOP_VAL_FIELD_DESC);
        oprot.writeString(struct.isHoopVal);
        oprot.writeFieldEnd();
      }
      if (struct.credtiStartDt != null) {
        oprot.writeFieldBegin(CREDTI_START_DT_FIELD_DESC);
        oprot.writeString(struct.credtiStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.credtiEndDt != null) {
        oprot.writeFieldBegin(CREDTI_END_DT_FIELD_DESC);
        oprot.writeString(struct.credtiEndDt);
        oprot.writeFieldEnd();
      }
      if (struct.beginRequestDttm != null) {
        oprot.writeFieldBegin(BEGIN_REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.beginRequestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.endRequestDttm != null) {
        oprot.writeFieldBegin(END_REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.endRequestDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTRACTION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.extractionAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREEZE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.freezeAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.availableAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_ID_FIELD_DESC);
      oprot.writeI32(struct.creditId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      if (struct.dataObject != null) {
        oprot.writeFieldBegin(DATA_OBJECT_FIELD_DESC);
        oprot.writeString(struct.dataObject);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.pmUser != null) {
        oprot.writeFieldBegin(PM_USER_FIELD_DESC);
        oprot.writeString(struct.pmUser);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELATION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.relationType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditsDTOTupleSchemeFactory implements SchemeFactory {
    public CreditsDTOTupleScheme getScheme() {
      return new CreditsDTOTupleScheme();
    }
  }

  private static class CreditsDTOTupleScheme extends TupleScheme<CreditsDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreditsDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(1);
      }
      if (struct.isSetProjectName()) {
        optionals.set(2);
      }
      if (struct.isSetAcctName()) {
        optionals.set(3);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(4);
      }
      if (struct.isSetAcctType()) {
        optionals.set(5);
      }
      if (struct.isSetIsHoop()) {
        optionals.set(6);
      }
      if (struct.isSetIsHoopVal()) {
        optionals.set(7);
      }
      if (struct.isSetCredtiStartDt()) {
        optionals.set(8);
      }
      if (struct.isSetCredtiEndDt()) {
        optionals.set(9);
      }
      if (struct.isSetBeginRequestDttm()) {
        optionals.set(10);
      }
      if (struct.isSetEndRequestDttm()) {
        optionals.set(11);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(12);
      }
      if (struct.isSetExtractionAmt()) {
        optionals.set(13);
      }
      if (struct.isSetFreezeAmt()) {
        optionals.set(14);
      }
      if (struct.isSetAvailableAmt()) {
        optionals.set(15);
      }
      if (struct.isSetPage()) {
        optionals.set(16);
      }
      if (struct.isSetRows()) {
        optionals.set(17);
      }
      if (struct.isSetCreditId()) {
        optionals.set(18);
      }
      if (struct.isSetRefId()) {
        optionals.set(19);
      }
      if (struct.isSetCusType()) {
        optionals.set(20);
      }
      if (struct.isSetDataObject()) {
        optionals.set(21);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(22);
      }
      if (struct.isSetPmUser()) {
        optionals.set(23);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(24);
      }
      if (struct.isSetRelationType()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeI32(struct.ecoTrade);
      }
      if (struct.isSetAcctType()) {
        oprot.writeI32(struct.acctType);
      }
      if (struct.isSetIsHoop()) {
        oprot.writeI32(struct.isHoop);
      }
      if (struct.isSetIsHoopVal()) {
        oprot.writeString(struct.isHoopVal);
      }
      if (struct.isSetCredtiStartDt()) {
        oprot.writeString(struct.credtiStartDt);
      }
      if (struct.isSetCredtiEndDt()) {
        oprot.writeString(struct.credtiEndDt);
      }
      if (struct.isSetBeginRequestDttm()) {
        oprot.writeString(struct.beginRequestDttm);
      }
      if (struct.isSetEndRequestDttm()) {
        oprot.writeString(struct.endRequestDttm);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetExtractionAmt()) {
        oprot.writeDouble(struct.extractionAmt);
      }
      if (struct.isSetFreezeAmt()) {
        oprot.writeDouble(struct.freezeAmt);
      }
      if (struct.isSetAvailableAmt()) {
        oprot.writeDouble(struct.availableAmt);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreditId()) {
        oprot.writeI32(struct.creditId);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetDataObject()) {
        oprot.writeString(struct.dataObject);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetPmUser()) {
        oprot.writeString(struct.pmUser);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetRelationType()) {
        oprot.writeI32(struct.relationType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreditsDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ecoTrade = iprot.readI32();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.acctType = iprot.readI32();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isHoop = iprot.readI32();
        struct.setIsHoopIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isHoopVal = iprot.readString();
        struct.setIsHoopValIsSet(true);
      }
      if (incoming.get(8)) {
        struct.credtiStartDt = iprot.readString();
        struct.setCredtiStartDtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.credtiEndDt = iprot.readString();
        struct.setCredtiEndDtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.beginRequestDttm = iprot.readString();
        struct.setBeginRequestDttmIsSet(true);
      }
      if (incoming.get(11)) {
        struct.endRequestDttm = iprot.readString();
        struct.setEndRequestDttmIsSet(true);
      }
      if (incoming.get(12)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.extractionAmt = iprot.readDouble();
        struct.setExtractionAmtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.freezeAmt = iprot.readDouble();
        struct.setFreezeAmtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.availableAmt = iprot.readDouble();
        struct.setAvailableAmtIsSet(true);
      }
      if (incoming.get(16)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.creditId = iprot.readI32();
        struct.setCreditIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.dataObject = iprot.readString();
        struct.setDataObjectIsSet(true);
      }
      if (incoming.get(22)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(23)) {
        struct.pmUser = iprot.readString();
        struct.setPmUserIsSet(true);
      }
      if (incoming.get(24)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(25)) {
        struct.relationType = iprot.readI32();
        struct.setRelationTypeIsSet(true);
      }
    }
  }

}


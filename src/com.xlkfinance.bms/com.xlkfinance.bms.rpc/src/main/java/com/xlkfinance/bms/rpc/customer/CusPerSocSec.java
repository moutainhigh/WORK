/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerSocSec implements org.apache.thrift.TBase<CusPerSocSec, CusPerSocSec._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerSocSec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerSocSec");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_PER_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SAFE_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("safeUnit", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SAFE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("safeTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MED_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("medMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SAFE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("safeNum", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PEN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("penMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SUSPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("suspend", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_SAFE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSafeTime", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerSocSecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerSocSecTupleSchemeFactory());
  }

  public int pid; // required
  public CusPerBase cusPerBase; // required
  public String safeUnit; // required
  public String safeTime; // required
  public double medMoney; // required
  public double safeNum; // required
  public double penMoney; // required
  public int suspend; // required
  public int status; // required
  public int totalSafeTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_PER_BASE((short)2, "cusPerBase"),
    SAFE_UNIT((short)3, "safeUnit"),
    SAFE_TIME((short)4, "safeTime"),
    MED_MONEY((short)5, "medMoney"),
    SAFE_NUM((short)6, "safeNum"),
    PEN_MONEY((short)7, "penMoney"),
    SUSPEND((short)8, "suspend"),
    STATUS((short)9, "status"),
    TOTAL_SAFE_TIME((short)10, "totalSafeTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_PER_BASE
          return CUS_PER_BASE;
        case 3: // SAFE_UNIT
          return SAFE_UNIT;
        case 4: // SAFE_TIME
          return SAFE_TIME;
        case 5: // MED_MONEY
          return MED_MONEY;
        case 6: // SAFE_NUM
          return SAFE_NUM;
        case 7: // PEN_MONEY
          return PEN_MONEY;
        case 8: // SUSPEND
          return SUSPEND;
        case 9: // STATUS
          return STATUS;
        case 10: // TOTAL_SAFE_TIME
          return TOTAL_SAFE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __MEDMONEY_ISSET_ID = 1;
  private static final int __SAFENUM_ISSET_ID = 2;
  private static final int __PENMONEY_ISSET_ID = 3;
  private static final int __SUSPEND_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __TOTALSAFETIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_PER_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusPerBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerBase.class)));
    tmpMap.put(_Fields.SAFE_UNIT, new org.apache.thrift.meta_data.FieldMetaData("safeUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAFE_TIME, new org.apache.thrift.meta_data.FieldMetaData("safeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MED_MONEY, new org.apache.thrift.meta_data.FieldMetaData("medMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SAFE_NUM, new org.apache.thrift.meta_data.FieldMetaData("safeNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PEN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("penMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUSPEND, new org.apache.thrift.meta_data.FieldMetaData("suspend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_SAFE_TIME, new org.apache.thrift.meta_data.FieldMetaData("totalSafeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerSocSec.class, metaDataMap);
  }

  public CusPerSocSec() {
  }

  public CusPerSocSec(
    int pid,
    CusPerBase cusPerBase,
    String safeUnit,
    String safeTime,
    double medMoney,
    double safeNum,
    double penMoney,
    int suspend,
    int status,
    int totalSafeTime)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusPerBase = cusPerBase;
    this.safeUnit = safeUnit;
    this.safeTime = safeTime;
    this.medMoney = medMoney;
    setMedMoneyIsSet(true);
    this.safeNum = safeNum;
    setSafeNumIsSet(true);
    this.penMoney = penMoney;
    setPenMoneyIsSet(true);
    this.suspend = suspend;
    setSuspendIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.totalSafeTime = totalSafeTime;
    setTotalSafeTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerSocSec(CusPerSocSec other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusPerBase()) {
      this.cusPerBase = new CusPerBase(other.cusPerBase);
    }
    if (other.isSetSafeUnit()) {
      this.safeUnit = other.safeUnit;
    }
    if (other.isSetSafeTime()) {
      this.safeTime = other.safeTime;
    }
    this.medMoney = other.medMoney;
    this.safeNum = other.safeNum;
    this.penMoney = other.penMoney;
    this.suspend = other.suspend;
    this.status = other.status;
    this.totalSafeTime = other.totalSafeTime;
  }

  public CusPerSocSec deepCopy() {
    return new CusPerSocSec(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusPerBase = null;
    this.safeUnit = null;
    this.safeTime = null;
    setMedMoneyIsSet(false);
    this.medMoney = 0.0;
    setSafeNumIsSet(false);
    this.safeNum = 0.0;
    setPenMoneyIsSet(false);
    this.penMoney = 0.0;
    setSuspendIsSet(false);
    this.suspend = 0;
    setStatusIsSet(false);
    this.status = 0;
    setTotalSafeTimeIsSet(false);
    this.totalSafeTime = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusPerSocSec setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusPerBase getCusPerBase() {
    return this.cusPerBase;
  }

  public CusPerSocSec setCusPerBase(CusPerBase cusPerBase) {
    this.cusPerBase = cusPerBase;
    return this;
  }

  public void unsetCusPerBase() {
    this.cusPerBase = null;
  }

  /** Returns true if field cusPerBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerBase() {
    return this.cusPerBase != null;
  }

  public void setCusPerBaseIsSet(boolean value) {
    if (!value) {
      this.cusPerBase = null;
    }
  }

  public String getSafeUnit() {
    return this.safeUnit;
  }

  public CusPerSocSec setSafeUnit(String safeUnit) {
    this.safeUnit = safeUnit;
    return this;
  }

  public void unsetSafeUnit() {
    this.safeUnit = null;
  }

  /** Returns true if field safeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetSafeUnit() {
    return this.safeUnit != null;
  }

  public void setSafeUnitIsSet(boolean value) {
    if (!value) {
      this.safeUnit = null;
    }
  }

  public String getSafeTime() {
    return this.safeTime;
  }

  public CusPerSocSec setSafeTime(String safeTime) {
    this.safeTime = safeTime;
    return this;
  }

  public void unsetSafeTime() {
    this.safeTime = null;
  }

  /** Returns true if field safeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSafeTime() {
    return this.safeTime != null;
  }

  public void setSafeTimeIsSet(boolean value) {
    if (!value) {
      this.safeTime = null;
    }
  }

  public double getMedMoney() {
    return this.medMoney;
  }

  public CusPerSocSec setMedMoney(double medMoney) {
    this.medMoney = medMoney;
    setMedMoneyIsSet(true);
    return this;
  }

  public void unsetMedMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDMONEY_ISSET_ID);
  }

  /** Returns true if field medMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMedMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDMONEY_ISSET_ID);
  }

  public void setMedMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDMONEY_ISSET_ID, value);
  }

  public double getSafeNum() {
    return this.safeNum;
  }

  public CusPerSocSec setSafeNum(double safeNum) {
    this.safeNum = safeNum;
    setSafeNumIsSet(true);
    return this;
  }

  public void unsetSafeNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAFENUM_ISSET_ID);
  }

  /** Returns true if field safeNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSafeNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SAFENUM_ISSET_ID);
  }

  public void setSafeNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAFENUM_ISSET_ID, value);
  }

  public double getPenMoney() {
    return this.penMoney;
  }

  public CusPerSocSec setPenMoney(double penMoney) {
    this.penMoney = penMoney;
    setPenMoneyIsSet(true);
    return this;
  }

  public void unsetPenMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PENMONEY_ISSET_ID);
  }

  /** Returns true if field penMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPenMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PENMONEY_ISSET_ID);
  }

  public void setPenMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PENMONEY_ISSET_ID, value);
  }

  public int getSuspend() {
    return this.suspend;
  }

  public CusPerSocSec setSuspend(int suspend) {
    this.suspend = suspend;
    setSuspendIsSet(true);
    return this;
  }

  public void unsetSuspend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUSPEND_ISSET_ID);
  }

  /** Returns true if field suspend is set (has been assigned a value) and false otherwise */
  public boolean isSetSuspend() {
    return EncodingUtils.testBit(__isset_bitfield, __SUSPEND_ISSET_ID);
  }

  public void setSuspendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUSPEND_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CusPerSocSec setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getTotalSafeTime() {
    return this.totalSafeTime;
  }

  public CusPerSocSec setTotalSafeTime(int totalSafeTime) {
    this.totalSafeTime = totalSafeTime;
    setTotalSafeTimeIsSet(true);
    return this;
  }

  public void unsetTotalSafeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSAFETIME_ISSET_ID);
  }

  /** Returns true if field totalSafeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSafeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSAFETIME_ISSET_ID);
  }

  public void setTotalSafeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSAFETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_PER_BASE:
      if (value == null) {
        unsetCusPerBase();
      } else {
        setCusPerBase((CusPerBase)value);
      }
      break;

    case SAFE_UNIT:
      if (value == null) {
        unsetSafeUnit();
      } else {
        setSafeUnit((String)value);
      }
      break;

    case SAFE_TIME:
      if (value == null) {
        unsetSafeTime();
      } else {
        setSafeTime((String)value);
      }
      break;

    case MED_MONEY:
      if (value == null) {
        unsetMedMoney();
      } else {
        setMedMoney((Double)value);
      }
      break;

    case SAFE_NUM:
      if (value == null) {
        unsetSafeNum();
      } else {
        setSafeNum((Double)value);
      }
      break;

    case PEN_MONEY:
      if (value == null) {
        unsetPenMoney();
      } else {
        setPenMoney((Double)value);
      }
      break;

    case SUSPEND:
      if (value == null) {
        unsetSuspend();
      } else {
        setSuspend((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case TOTAL_SAFE_TIME:
      if (value == null) {
        unsetTotalSafeTime();
      } else {
        setTotalSafeTime((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_PER_BASE:
      return getCusPerBase();

    case SAFE_UNIT:
      return getSafeUnit();

    case SAFE_TIME:
      return getSafeTime();

    case MED_MONEY:
      return Double.valueOf(getMedMoney());

    case SAFE_NUM:
      return Double.valueOf(getSafeNum());

    case PEN_MONEY:
      return Double.valueOf(getPenMoney());

    case SUSPEND:
      return Integer.valueOf(getSuspend());

    case STATUS:
      return Integer.valueOf(getStatus());

    case TOTAL_SAFE_TIME:
      return Integer.valueOf(getTotalSafeTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_PER_BASE:
      return isSetCusPerBase();
    case SAFE_UNIT:
      return isSetSafeUnit();
    case SAFE_TIME:
      return isSetSafeTime();
    case MED_MONEY:
      return isSetMedMoney();
    case SAFE_NUM:
      return isSetSafeNum();
    case PEN_MONEY:
      return isSetPenMoney();
    case SUSPEND:
      return isSetSuspend();
    case STATUS:
      return isSetStatus();
    case TOTAL_SAFE_TIME:
      return isSetTotalSafeTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerSocSec)
      return this.equals((CusPerSocSec)that);
    return false;
  }

  public boolean equals(CusPerSocSec that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusPerBase = true && this.isSetCusPerBase();
    boolean that_present_cusPerBase = true && that.isSetCusPerBase();
    if (this_present_cusPerBase || that_present_cusPerBase) {
      if (!(this_present_cusPerBase && that_present_cusPerBase))
        return false;
      if (!this.cusPerBase.equals(that.cusPerBase))
        return false;
    }

    boolean this_present_safeUnit = true && this.isSetSafeUnit();
    boolean that_present_safeUnit = true && that.isSetSafeUnit();
    if (this_present_safeUnit || that_present_safeUnit) {
      if (!(this_present_safeUnit && that_present_safeUnit))
        return false;
      if (!this.safeUnit.equals(that.safeUnit))
        return false;
    }

    boolean this_present_safeTime = true && this.isSetSafeTime();
    boolean that_present_safeTime = true && that.isSetSafeTime();
    if (this_present_safeTime || that_present_safeTime) {
      if (!(this_present_safeTime && that_present_safeTime))
        return false;
      if (!this.safeTime.equals(that.safeTime))
        return false;
    }

    boolean this_present_medMoney = true;
    boolean that_present_medMoney = true;
    if (this_present_medMoney || that_present_medMoney) {
      if (!(this_present_medMoney && that_present_medMoney))
        return false;
      if (this.medMoney != that.medMoney)
        return false;
    }

    boolean this_present_safeNum = true;
    boolean that_present_safeNum = true;
    if (this_present_safeNum || that_present_safeNum) {
      if (!(this_present_safeNum && that_present_safeNum))
        return false;
      if (this.safeNum != that.safeNum)
        return false;
    }

    boolean this_present_penMoney = true;
    boolean that_present_penMoney = true;
    if (this_present_penMoney || that_present_penMoney) {
      if (!(this_present_penMoney && that_present_penMoney))
        return false;
      if (this.penMoney != that.penMoney)
        return false;
    }

    boolean this_present_suspend = true;
    boolean that_present_suspend = true;
    if (this_present_suspend || that_present_suspend) {
      if (!(this_present_suspend && that_present_suspend))
        return false;
      if (this.suspend != that.suspend)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_totalSafeTime = true;
    boolean that_present_totalSafeTime = true;
    if (this_present_totalSafeTime || that_present_totalSafeTime) {
      if (!(this_present_totalSafeTime && that_present_totalSafeTime))
        return false;
      if (this.totalSafeTime != that.totalSafeTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusPerBase = true && (isSetCusPerBase());
    list.add(present_cusPerBase);
    if (present_cusPerBase)
      list.add(cusPerBase);

    boolean present_safeUnit = true && (isSetSafeUnit());
    list.add(present_safeUnit);
    if (present_safeUnit)
      list.add(safeUnit);

    boolean present_safeTime = true && (isSetSafeTime());
    list.add(present_safeTime);
    if (present_safeTime)
      list.add(safeTime);

    boolean present_medMoney = true;
    list.add(present_medMoney);
    if (present_medMoney)
      list.add(medMoney);

    boolean present_safeNum = true;
    list.add(present_safeNum);
    if (present_safeNum)
      list.add(safeNum);

    boolean present_penMoney = true;
    list.add(present_penMoney);
    if (present_penMoney)
      list.add(penMoney);

    boolean present_suspend = true;
    list.add(present_suspend);
    if (present_suspend)
      list.add(suspend);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_totalSafeTime = true;
    list.add(present_totalSafeTime);
    if (present_totalSafeTime)
      list.add(totalSafeTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerSocSec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerBase()).compareTo(other.isSetCusPerBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerBase, other.cusPerBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSafeUnit()).compareTo(other.isSetSafeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSafeUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.safeUnit, other.safeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSafeTime()).compareTo(other.isSetSafeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSafeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.safeTime, other.safeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedMoney()).compareTo(other.isSetMedMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medMoney, other.medMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSafeNum()).compareTo(other.isSetSafeNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSafeNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.safeNum, other.safeNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPenMoney()).compareTo(other.isSetPenMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penMoney, other.penMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuspend()).compareTo(other.isSetSuspend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuspend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suspend, other.suspend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSafeTime()).compareTo(other.isSetTotalSafeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSafeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSafeTime, other.totalSafeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerSocSec(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerBase:");
    if (this.cusPerBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("safeUnit:");
    if (this.safeUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.safeUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("safeTime:");
    if (this.safeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.safeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("medMoney:");
    sb.append(this.medMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("safeNum:");
    sb.append(this.safeNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("penMoney:");
    sb.append(this.penMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("suspend:");
    sb.append(this.suspend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSafeTime:");
    sb.append(this.totalSafeTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusPerBase != null) {
      cusPerBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerSocSecStandardSchemeFactory implements SchemeFactory {
    public CusPerSocSecStandardScheme getScheme() {
      return new CusPerSocSecStandardScheme();
    }
  }

  private static class CusPerSocSecStandardScheme extends StandardScheme<CusPerSocSec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerSocSec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_PER_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerBase = new CusPerBase();
              struct.cusPerBase.read(iprot);
              struct.setCusPerBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SAFE_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.safeUnit = iprot.readString();
              struct.setSafeUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SAFE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.safeTime = iprot.readString();
              struct.setSafeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MED_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.medMoney = iprot.readDouble();
              struct.setMedMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SAFE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.safeNum = iprot.readDouble();
              struct.setSafeNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PEN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.penMoney = iprot.readDouble();
              struct.setPenMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUSPEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.suspend = iprot.readI32();
              struct.setSuspendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_SAFE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalSafeTime = iprot.readI32();
              struct.setTotalSafeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerSocSec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusPerBase != null) {
        oprot.writeFieldBegin(CUS_PER_BASE_FIELD_DESC);
        struct.cusPerBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.safeUnit != null) {
        oprot.writeFieldBegin(SAFE_UNIT_FIELD_DESC);
        oprot.writeString(struct.safeUnit);
        oprot.writeFieldEnd();
      }
      if (struct.safeTime != null) {
        oprot.writeFieldBegin(SAFE_TIME_FIELD_DESC);
        oprot.writeString(struct.safeTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MED_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.medMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAFE_NUM_FIELD_DESC);
      oprot.writeDouble(struct.safeNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PEN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.penMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUSPEND_FIELD_DESC);
      oprot.writeI32(struct.suspend);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_SAFE_TIME_FIELD_DESC);
      oprot.writeI32(struct.totalSafeTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerSocSecTupleSchemeFactory implements SchemeFactory {
    public CusPerSocSecTupleScheme getScheme() {
      return new CusPerSocSecTupleScheme();
    }
  }

  private static class CusPerSocSecTupleScheme extends TupleScheme<CusPerSocSec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerSocSec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusPerBase()) {
        optionals.set(1);
      }
      if (struct.isSetSafeUnit()) {
        optionals.set(2);
      }
      if (struct.isSetSafeTime()) {
        optionals.set(3);
      }
      if (struct.isSetMedMoney()) {
        optionals.set(4);
      }
      if (struct.isSetSafeNum()) {
        optionals.set(5);
      }
      if (struct.isSetPenMoney()) {
        optionals.set(6);
      }
      if (struct.isSetSuspend()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetTotalSafeTime()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusPerBase()) {
        struct.cusPerBase.write(oprot);
      }
      if (struct.isSetSafeUnit()) {
        oprot.writeString(struct.safeUnit);
      }
      if (struct.isSetSafeTime()) {
        oprot.writeString(struct.safeTime);
      }
      if (struct.isSetMedMoney()) {
        oprot.writeDouble(struct.medMoney);
      }
      if (struct.isSetSafeNum()) {
        oprot.writeDouble(struct.safeNum);
      }
      if (struct.isSetPenMoney()) {
        oprot.writeDouble(struct.penMoney);
      }
      if (struct.isSetSuspend()) {
        oprot.writeI32(struct.suspend);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetTotalSafeTime()) {
        oprot.writeI32(struct.totalSafeTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerSocSec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusPerBase = new CusPerBase();
        struct.cusPerBase.read(iprot);
        struct.setCusPerBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.safeUnit = iprot.readString();
        struct.setSafeUnitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.safeTime = iprot.readString();
        struct.setSafeTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.medMoney = iprot.readDouble();
        struct.setMedMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.safeNum = iprot.readDouble();
        struct.setSafeNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.penMoney = iprot.readDouble();
        struct.setPenMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.suspend = iprot.readI32();
        struct.setSuspendIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.totalSafeTime = iprot.readI32();
        struct.setTotalSafeTimeIsSet(true);
      }
    }
  }

}


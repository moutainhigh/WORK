/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepayOverduePartView implements org.apache.thrift.TBase<RepayOverduePartView, RepayOverduePartView._Fields>, java.io.Serializable, Cloneable, Comparable<RepayOverduePartView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepayOverduePartView");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField SHOULD_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SHOULD_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SHOULD_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_INTEREST_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFineInterestAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField OVERDUE_LOAN_INTEREST_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueLoanInterestAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleNum", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFineInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField OVERDUE_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepayOverduePartViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepayOverduePartViewTupleSchemeFactory());
  }

  public int pId; // required
  public double shouldPrincipal; // required
  public double shouldInterest; // required
  public double shouldMangCost; // required
  public double shouldOtherCost; // required
  public double overdueFineInterestAmt; // required
  public double overdueLoanInterestAmt; // required
  public int projectId; // required
  public int planCycleNum; // required
  public double overdueFineInterest; // required
  public double overdueLoanInterest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    SHOULD_PRINCIPAL((short)2, "shouldPrincipal"),
    SHOULD_INTEREST((short)3, "shouldInterest"),
    SHOULD_MANG_COST((short)4, "shouldMangCost"),
    SHOULD_OTHER_COST((short)5, "shouldOtherCost"),
    OVERDUE_FINE_INTEREST_AMT((short)6, "overdueFineInterestAmt"),
    OVERDUE_LOAN_INTEREST_AMT((short)7, "overdueLoanInterestAmt"),
    PROJECT_ID((short)8, "projectId"),
    PLAN_CYCLE_NUM((short)9, "planCycleNum"),
    OVERDUE_FINE_INTEREST((short)10, "overdueFineInterest"),
    OVERDUE_LOAN_INTEREST((short)11, "overdueLoanInterest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // SHOULD_PRINCIPAL
          return SHOULD_PRINCIPAL;
        case 3: // SHOULD_INTEREST
          return SHOULD_INTEREST;
        case 4: // SHOULD_MANG_COST
          return SHOULD_MANG_COST;
        case 5: // SHOULD_OTHER_COST
          return SHOULD_OTHER_COST;
        case 6: // OVERDUE_FINE_INTEREST_AMT
          return OVERDUE_FINE_INTEREST_AMT;
        case 7: // OVERDUE_LOAN_INTEREST_AMT
          return OVERDUE_LOAN_INTEREST_AMT;
        case 8: // PROJECT_ID
          return PROJECT_ID;
        case 9: // PLAN_CYCLE_NUM
          return PLAN_CYCLE_NUM;
        case 10: // OVERDUE_FINE_INTEREST
          return OVERDUE_FINE_INTEREST;
        case 11: // OVERDUE_LOAN_INTEREST
          return OVERDUE_LOAN_INTEREST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __SHOULDPRINCIPAL_ISSET_ID = 1;
  private static final int __SHOULDINTEREST_ISSET_ID = 2;
  private static final int __SHOULDMANGCOST_ISSET_ID = 3;
  private static final int __SHOULDOTHERCOST_ISSET_ID = 4;
  private static final int __OVERDUEFINEINTERESTAMT_ISSET_ID = 5;
  private static final int __OVERDUELOANINTERESTAMT_ISSET_ID = 6;
  private static final int __PROJECTID_ISSET_ID = 7;
  private static final int __PLANCYCLENUM_ISSET_ID = 8;
  private static final int __OVERDUEFINEINTEREST_ISSET_ID = 9;
  private static final int __OVERDUELOANINTEREST_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("shouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("shouldInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FINE_INTEREST_AMT, new org.apache.thrift.meta_data.FieldMetaData("overdueFineInterestAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_LOAN_INTEREST_AMT, new org.apache.thrift.meta_data.FieldMetaData("overdueLoanInterestAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("planCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_FINE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueFineInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepayOverduePartView.class, metaDataMap);
  }

  public RepayOverduePartView() {
  }

  public RepayOverduePartView(
    int pId,
    double shouldPrincipal,
    double shouldInterest,
    double shouldMangCost,
    double shouldOtherCost,
    double overdueFineInterestAmt,
    double overdueLoanInterestAmt,
    int projectId,
    int planCycleNum,
    double overdueFineInterest,
    double overdueLoanInterest)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    this.overdueFineInterestAmt = overdueFineInterestAmt;
    setOverdueFineInterestAmtIsSet(true);
    this.overdueLoanInterestAmt = overdueLoanInterestAmt;
    setOverdueLoanInterestAmtIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepayOverduePartView(RepayOverduePartView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    this.shouldPrincipal = other.shouldPrincipal;
    this.shouldInterest = other.shouldInterest;
    this.shouldMangCost = other.shouldMangCost;
    this.shouldOtherCost = other.shouldOtherCost;
    this.overdueFineInterestAmt = other.overdueFineInterestAmt;
    this.overdueLoanInterestAmt = other.overdueLoanInterestAmt;
    this.projectId = other.projectId;
    this.planCycleNum = other.planCycleNum;
    this.overdueFineInterest = other.overdueFineInterest;
    this.overdueLoanInterest = other.overdueLoanInterest;
  }

  public RepayOverduePartView deepCopy() {
    return new RepayOverduePartView(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    setShouldPrincipalIsSet(false);
    this.shouldPrincipal = 0.0;
    setShouldInterestIsSet(false);
    this.shouldInterest = 0.0;
    setShouldMangCostIsSet(false);
    this.shouldMangCost = 0.0;
    setShouldOtherCostIsSet(false);
    this.shouldOtherCost = 0.0;
    setOverdueFineInterestAmtIsSet(false);
    this.overdueFineInterestAmt = 0.0;
    setOverdueLoanInterestAmtIsSet(false);
    this.overdueLoanInterestAmt = 0.0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setPlanCycleNumIsSet(false);
    this.planCycleNum = 0;
    setOverdueFineInterestIsSet(false);
    this.overdueFineInterest = 0.0;
    setOverdueLoanInterestIsSet(false);
    this.overdueLoanInterest = 0.0;
  }

  public int getPId() {
    return this.pId;
  }

  public RepayOverduePartView setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public double getShouldPrincipal() {
    return this.shouldPrincipal;
  }

  public RepayOverduePartView setShouldPrincipal(double shouldPrincipal) {
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    return this;
  }

  public void unsetShouldPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field shouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  public void setShouldPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID, value);
  }

  public double getShouldInterest() {
    return this.shouldInterest;
  }

  public RepayOverduePartView setShouldInterest(double shouldInterest) {
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    return this;
  }

  public void unsetShouldInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  /** Returns true if field shouldInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  public void setShouldInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID, value);
  }

  public double getShouldMangCost() {
    return this.shouldMangCost;
  }

  public RepayOverduePartView setShouldMangCost(double shouldMangCost) {
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    return this;
  }

  public void unsetShouldMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  /** Returns true if field shouldMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  public void setShouldMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID, value);
  }

  public double getShouldOtherCost() {
    return this.shouldOtherCost;
  }

  public RepayOverduePartView setShouldOtherCost(double shouldOtherCost) {
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    return this;
  }

  public void unsetShouldOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field shouldOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  public void setShouldOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID, value);
  }

  public double getOverdueFineInterestAmt() {
    return this.overdueFineInterestAmt;
  }

  public RepayOverduePartView setOverdueFineInterestAmt(double overdueFineInterestAmt) {
    this.overdueFineInterestAmt = overdueFineInterestAmt;
    setOverdueFineInterestAmtIsSet(true);
    return this;
  }

  public void unsetOverdueFineInterestAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFINEINTERESTAMT_ISSET_ID);
  }

  /** Returns true if field overdueFineInterestAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFineInterestAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFINEINTERESTAMT_ISSET_ID);
  }

  public void setOverdueFineInterestAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFINEINTERESTAMT_ISSET_ID, value);
  }

  public double getOverdueLoanInterestAmt() {
    return this.overdueLoanInterestAmt;
  }

  public RepayOverduePartView setOverdueLoanInterestAmt(double overdueLoanInterestAmt) {
    this.overdueLoanInterestAmt = overdueLoanInterestAmt;
    setOverdueLoanInterestAmtIsSet(true);
    return this;
  }

  public void unsetOverdueLoanInterestAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUELOANINTERESTAMT_ISSET_ID);
  }

  /** Returns true if field overdueLoanInterestAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueLoanInterestAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUELOANINTERESTAMT_ISSET_ID);
  }

  public void setOverdueLoanInterestAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUELOANINTERESTAMT_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepayOverduePartView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getPlanCycleNum() {
    return this.planCycleNum;
  }

  public RepayOverduePartView setPlanCycleNum(int planCycleNum) {
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    return this;
  }

  public void unsetPlanCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  /** Returns true if field planCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  public void setPlanCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID, value);
  }

  public double getOverdueFineInterest() {
    return this.overdueFineInterest;
  }

  public RepayOverduePartView setOverdueFineInterest(double overdueFineInterest) {
    this.overdueFineInterest = overdueFineInterest;
    setOverdueFineInterestIsSet(true);
    return this;
  }

  public void unsetOverdueFineInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueFineInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFineInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID);
  }

  public void setOverdueFineInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFINEINTEREST_ISSET_ID, value);
  }

  public double getOverdueLoanInterest() {
    return this.overdueLoanInterest;
  }

  public RepayOverduePartView setOverdueLoanInterest(double overdueLoanInterest) {
    this.overdueLoanInterest = overdueLoanInterest;
    setOverdueLoanInterestIsSet(true);
    return this;
  }

  public void unsetOverdueLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID);
  }

  public void setOverdueLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUELOANINTEREST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case SHOULD_PRINCIPAL:
      if (value == null) {
        unsetShouldPrincipal();
      } else {
        setShouldPrincipal((Double)value);
      }
      break;

    case SHOULD_INTEREST:
      if (value == null) {
        unsetShouldInterest();
      } else {
        setShouldInterest((Double)value);
      }
      break;

    case SHOULD_MANG_COST:
      if (value == null) {
        unsetShouldMangCost();
      } else {
        setShouldMangCost((Double)value);
      }
      break;

    case SHOULD_OTHER_COST:
      if (value == null) {
        unsetShouldOtherCost();
      } else {
        setShouldOtherCost((Double)value);
      }
      break;

    case OVERDUE_FINE_INTEREST_AMT:
      if (value == null) {
        unsetOverdueFineInterestAmt();
      } else {
        setOverdueFineInterestAmt((Double)value);
      }
      break;

    case OVERDUE_LOAN_INTEREST_AMT:
      if (value == null) {
        unsetOverdueLoanInterestAmt();
      } else {
        setOverdueLoanInterestAmt((Double)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PLAN_CYCLE_NUM:
      if (value == null) {
        unsetPlanCycleNum();
      } else {
        setPlanCycleNum((Integer)value);
      }
      break;

    case OVERDUE_FINE_INTEREST:
      if (value == null) {
        unsetOverdueFineInterest();
      } else {
        setOverdueFineInterest((Double)value);
      }
      break;

    case OVERDUE_LOAN_INTEREST:
      if (value == null) {
        unsetOverdueLoanInterest();
      } else {
        setOverdueLoanInterest((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case SHOULD_PRINCIPAL:
      return Double.valueOf(getShouldPrincipal());

    case SHOULD_INTEREST:
      return Double.valueOf(getShouldInterest());

    case SHOULD_MANG_COST:
      return Double.valueOf(getShouldMangCost());

    case SHOULD_OTHER_COST:
      return Double.valueOf(getShouldOtherCost());

    case OVERDUE_FINE_INTEREST_AMT:
      return Double.valueOf(getOverdueFineInterestAmt());

    case OVERDUE_LOAN_INTEREST_AMT:
      return Double.valueOf(getOverdueLoanInterestAmt());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PLAN_CYCLE_NUM:
      return Integer.valueOf(getPlanCycleNum());

    case OVERDUE_FINE_INTEREST:
      return Double.valueOf(getOverdueFineInterest());

    case OVERDUE_LOAN_INTEREST:
      return Double.valueOf(getOverdueLoanInterest());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case SHOULD_PRINCIPAL:
      return isSetShouldPrincipal();
    case SHOULD_INTEREST:
      return isSetShouldInterest();
    case SHOULD_MANG_COST:
      return isSetShouldMangCost();
    case SHOULD_OTHER_COST:
      return isSetShouldOtherCost();
    case OVERDUE_FINE_INTEREST_AMT:
      return isSetOverdueFineInterestAmt();
    case OVERDUE_LOAN_INTEREST_AMT:
      return isSetOverdueLoanInterestAmt();
    case PROJECT_ID:
      return isSetProjectId();
    case PLAN_CYCLE_NUM:
      return isSetPlanCycleNum();
    case OVERDUE_FINE_INTEREST:
      return isSetOverdueFineInterest();
    case OVERDUE_LOAN_INTEREST:
      return isSetOverdueLoanInterest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepayOverduePartView)
      return this.equals((RepayOverduePartView)that);
    return false;
  }

  public boolean equals(RepayOverduePartView that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_shouldPrincipal = true;
    boolean that_present_shouldPrincipal = true;
    if (this_present_shouldPrincipal || that_present_shouldPrincipal) {
      if (!(this_present_shouldPrincipal && that_present_shouldPrincipal))
        return false;
      if (this.shouldPrincipal != that.shouldPrincipal)
        return false;
    }

    boolean this_present_shouldInterest = true;
    boolean that_present_shouldInterest = true;
    if (this_present_shouldInterest || that_present_shouldInterest) {
      if (!(this_present_shouldInterest && that_present_shouldInterest))
        return false;
      if (this.shouldInterest != that.shouldInterest)
        return false;
    }

    boolean this_present_shouldMangCost = true;
    boolean that_present_shouldMangCost = true;
    if (this_present_shouldMangCost || that_present_shouldMangCost) {
      if (!(this_present_shouldMangCost && that_present_shouldMangCost))
        return false;
      if (this.shouldMangCost != that.shouldMangCost)
        return false;
    }

    boolean this_present_shouldOtherCost = true;
    boolean that_present_shouldOtherCost = true;
    if (this_present_shouldOtherCost || that_present_shouldOtherCost) {
      if (!(this_present_shouldOtherCost && that_present_shouldOtherCost))
        return false;
      if (this.shouldOtherCost != that.shouldOtherCost)
        return false;
    }

    boolean this_present_overdueFineInterestAmt = true;
    boolean that_present_overdueFineInterestAmt = true;
    if (this_present_overdueFineInterestAmt || that_present_overdueFineInterestAmt) {
      if (!(this_present_overdueFineInterestAmt && that_present_overdueFineInterestAmt))
        return false;
      if (this.overdueFineInterestAmt != that.overdueFineInterestAmt)
        return false;
    }

    boolean this_present_overdueLoanInterestAmt = true;
    boolean that_present_overdueLoanInterestAmt = true;
    if (this_present_overdueLoanInterestAmt || that_present_overdueLoanInterestAmt) {
      if (!(this_present_overdueLoanInterestAmt && that_present_overdueLoanInterestAmt))
        return false;
      if (this.overdueLoanInterestAmt != that.overdueLoanInterestAmt)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_planCycleNum = true;
    boolean that_present_planCycleNum = true;
    if (this_present_planCycleNum || that_present_planCycleNum) {
      if (!(this_present_planCycleNum && that_present_planCycleNum))
        return false;
      if (this.planCycleNum != that.planCycleNum)
        return false;
    }

    boolean this_present_overdueFineInterest = true;
    boolean that_present_overdueFineInterest = true;
    if (this_present_overdueFineInterest || that_present_overdueFineInterest) {
      if (!(this_present_overdueFineInterest && that_present_overdueFineInterest))
        return false;
      if (this.overdueFineInterest != that.overdueFineInterest)
        return false;
    }

    boolean this_present_overdueLoanInterest = true;
    boolean that_present_overdueLoanInterest = true;
    if (this_present_overdueLoanInterest || that_present_overdueLoanInterest) {
      if (!(this_present_overdueLoanInterest && that_present_overdueLoanInterest))
        return false;
      if (this.overdueLoanInterest != that.overdueLoanInterest)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_shouldPrincipal = true;
    list.add(present_shouldPrincipal);
    if (present_shouldPrincipal)
      list.add(shouldPrincipal);

    boolean present_shouldInterest = true;
    list.add(present_shouldInterest);
    if (present_shouldInterest)
      list.add(shouldInterest);

    boolean present_shouldMangCost = true;
    list.add(present_shouldMangCost);
    if (present_shouldMangCost)
      list.add(shouldMangCost);

    boolean present_shouldOtherCost = true;
    list.add(present_shouldOtherCost);
    if (present_shouldOtherCost)
      list.add(shouldOtherCost);

    boolean present_overdueFineInterestAmt = true;
    list.add(present_overdueFineInterestAmt);
    if (present_overdueFineInterestAmt)
      list.add(overdueFineInterestAmt);

    boolean present_overdueLoanInterestAmt = true;
    list.add(present_overdueLoanInterestAmt);
    if (present_overdueLoanInterestAmt)
      list.add(overdueLoanInterestAmt);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_planCycleNum = true;
    list.add(present_planCycleNum);
    if (present_planCycleNum)
      list.add(planCycleNum);

    boolean present_overdueFineInterest = true;
    list.add(present_overdueFineInterest);
    if (present_overdueFineInterest)
      list.add(overdueFineInterest);

    boolean present_overdueLoanInterest = true;
    list.add(present_overdueLoanInterest);
    if (present_overdueLoanInterest)
      list.add(overdueLoanInterest);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepayOverduePartView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrincipal()).compareTo(other.isSetShouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrincipal, other.shouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldInterest()).compareTo(other.isSetShouldInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldInterest, other.shouldInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldMangCost()).compareTo(other.isSetShouldMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldMangCost, other.shouldMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOtherCost()).compareTo(other.isSetShouldOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOtherCost, other.shouldOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFineInterestAmt()).compareTo(other.isSetOverdueFineInterestAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFineInterestAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFineInterestAmt, other.overdueFineInterestAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueLoanInterestAmt()).compareTo(other.isSetOverdueLoanInterestAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueLoanInterestAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueLoanInterestAmt, other.overdueLoanInterestAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleNum()).compareTo(other.isSetPlanCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleNum, other.planCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFineInterest()).compareTo(other.isSetOverdueFineInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFineInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFineInterest, other.overdueFineInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueLoanInterest()).compareTo(other.isSetOverdueLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueLoanInterest, other.overdueLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepayOverduePartView(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrincipal:");
    sb.append(this.shouldPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldInterest:");
    sb.append(this.shouldInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldMangCost:");
    sb.append(this.shouldMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOtherCost:");
    sb.append(this.shouldOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFineInterestAmt:");
    sb.append(this.overdueFineInterestAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueLoanInterestAmt:");
    sb.append(this.overdueLoanInterestAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleNum:");
    sb.append(this.planCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFineInterest:");
    sb.append(this.overdueFineInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueLoanInterest:");
    sb.append(this.overdueLoanInterest);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepayOverduePartViewStandardSchemeFactory implements SchemeFactory {
    public RepayOverduePartViewStandardScheme getScheme() {
      return new RepayOverduePartViewStandardScheme();
    }
  }

  private static class RepayOverduePartViewStandardScheme extends StandardScheme<RepayOverduePartView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepayOverduePartView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPrincipal = iprot.readDouble();
              struct.setShouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOULD_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldInterest = iprot.readDouble();
              struct.setShouldInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOULD_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldMangCost = iprot.readDouble();
              struct.setShouldMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOULD_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldOtherCost = iprot.readDouble();
              struct.setShouldOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OVERDUE_FINE_INTEREST_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFineInterestAmt = iprot.readDouble();
              struct.setOverdueFineInterestAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OVERDUE_LOAN_INTEREST_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueLoanInterestAmt = iprot.readDouble();
              struct.setOverdueLoanInterestAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PLAN_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planCycleNum = iprot.readI32();
              struct.setPlanCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OVERDUE_FINE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFineInterest = iprot.readDouble();
              struct.setOverdueFineInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OVERDUE_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueLoanInterest = iprot.readDouble();
              struct.setOverdueLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepayOverduePartView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.shouldPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.shouldInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldOtherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_INTEREST_AMT_FIELD_DESC);
      oprot.writeDouble(struct.overdueFineInterestAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_LOAN_INTEREST_AMT_FIELD_DESC);
      oprot.writeDouble(struct.overdueLoanInterestAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.planCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueFineInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepayOverduePartViewTupleSchemeFactory implements SchemeFactory {
    public RepayOverduePartViewTupleScheme getScheme() {
      return new RepayOverduePartViewTupleScheme();
    }
  }

  private static class RepayOverduePartViewTupleScheme extends TupleScheme<RepayOverduePartView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepayOverduePartView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetShouldPrincipal()) {
        optionals.set(1);
      }
      if (struct.isSetShouldInterest()) {
        optionals.set(2);
      }
      if (struct.isSetShouldMangCost()) {
        optionals.set(3);
      }
      if (struct.isSetShouldOtherCost()) {
        optionals.set(4);
      }
      if (struct.isSetOverdueFineInterestAmt()) {
        optionals.set(5);
      }
      if (struct.isSetOverdueLoanInterestAmt()) {
        optionals.set(6);
      }
      if (struct.isSetProjectId()) {
        optionals.set(7);
      }
      if (struct.isSetPlanCycleNum()) {
        optionals.set(8);
      }
      if (struct.isSetOverdueFineInterest()) {
        optionals.set(9);
      }
      if (struct.isSetOverdueLoanInterest()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetShouldPrincipal()) {
        oprot.writeDouble(struct.shouldPrincipal);
      }
      if (struct.isSetShouldInterest()) {
        oprot.writeDouble(struct.shouldInterest);
      }
      if (struct.isSetShouldMangCost()) {
        oprot.writeDouble(struct.shouldMangCost);
      }
      if (struct.isSetShouldOtherCost()) {
        oprot.writeDouble(struct.shouldOtherCost);
      }
      if (struct.isSetOverdueFineInterestAmt()) {
        oprot.writeDouble(struct.overdueFineInterestAmt);
      }
      if (struct.isSetOverdueLoanInterestAmt()) {
        oprot.writeDouble(struct.overdueLoanInterestAmt);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetPlanCycleNum()) {
        oprot.writeI32(struct.planCycleNum);
      }
      if (struct.isSetOverdueFineInterest()) {
        oprot.writeDouble(struct.overdueFineInterest);
      }
      if (struct.isSetOverdueLoanInterest()) {
        oprot.writeDouble(struct.overdueLoanInterest);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepayOverduePartView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shouldPrincipal = iprot.readDouble();
        struct.setShouldPrincipalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shouldInterest = iprot.readDouble();
        struct.setShouldInterestIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shouldMangCost = iprot.readDouble();
        struct.setShouldMangCostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shouldOtherCost = iprot.readDouble();
        struct.setShouldOtherCostIsSet(true);
      }
      if (incoming.get(5)) {
        struct.overdueFineInterestAmt = iprot.readDouble();
        struct.setOverdueFineInterestAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.overdueLoanInterestAmt = iprot.readDouble();
        struct.setOverdueLoanInterestAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.planCycleNum = iprot.readI32();
        struct.setPlanCycleNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.overdueFineInterest = iprot.readDouble();
        struct.setOverdueFineInterestIsSet(true);
      }
      if (incoming.get(10)) {
        struct.overdueLoanInterest = iprot.readDouble();
        struct.setOverdueLoanInterestIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusAcctBank implements org.apache.thrift.TBase<CusAcctBank, CusAcctBank._Fields>, java.io.Serializable, Cloneable, Comparable<CusAcctBank> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusAcctBank");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_ACCT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusAcct", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BRANCH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("branchName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ACC_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("accArea", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOAN_CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanCardId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_ACC_CATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAccCate", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ACC_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("accUse", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField USEEXPLAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useexplain", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusAcctBankStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusAcctBankTupleSchemeFactory());
  }

  public int pid; // required
  public CusAcct cusAcct; // required
  public String bankName; // required
  public String branchName; // required
  public String accArea; // required
  public String accName; // required
  public String loanCardId; // required
  public int accType; // required
  public int bankAccCate; // required
  public int accUse; // required
  public String useexplain; // required
  public String remark; // required
  public int status; // required
  public int cusType; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_ACCT((short)2, "cusAcct"),
    BANK_NAME((short)3, "bankName"),
    BRANCH_NAME((short)4, "branchName"),
    ACC_AREA((short)5, "accArea"),
    ACC_NAME((short)6, "accName"),
    LOAN_CARD_ID((short)7, "loanCardId"),
    ACC_TYPE((short)8, "accType"),
    BANK_ACC_CATE((short)9, "bankAccCate"),
    ACC_USE((short)10, "accUse"),
    USEEXPLAIN((short)11, "useexplain"),
    REMARK((short)12, "remark"),
    STATUS((short)13, "status"),
    CUS_TYPE((short)14, "cusType"),
    PAGE((short)15, "page"),
    ROWS((short)16, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_ACCT
          return CUS_ACCT;
        case 3: // BANK_NAME
          return BANK_NAME;
        case 4: // BRANCH_NAME
          return BRANCH_NAME;
        case 5: // ACC_AREA
          return ACC_AREA;
        case 6: // ACC_NAME
          return ACC_NAME;
        case 7: // LOAN_CARD_ID
          return LOAN_CARD_ID;
        case 8: // ACC_TYPE
          return ACC_TYPE;
        case 9: // BANK_ACC_CATE
          return BANK_ACC_CATE;
        case 10: // ACC_USE
          return ACC_USE;
        case 11: // USEEXPLAIN
          return USEEXPLAIN;
        case 12: // REMARK
          return REMARK;
        case 13: // STATUS
          return STATUS;
        case 14: // CUS_TYPE
          return CUS_TYPE;
        case 15: // PAGE
          return PAGE;
        case 16: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCTYPE_ISSET_ID = 1;
  private static final int __BANKACCCATE_ISSET_ID = 2;
  private static final int __ACCUSE_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __CUSTYPE_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_ACCT, new org.apache.thrift.meta_data.FieldMetaData("cusAcct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusAcct.class)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRANCH_NAME, new org.apache.thrift.meta_data.FieldMetaData("branchName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_AREA, new org.apache.thrift.meta_data.FieldMetaData("accArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_NAME, new org.apache.thrift.meta_data.FieldMetaData("accName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("loanCardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_ACC_CATE, new org.apache.thrift.meta_data.FieldMetaData("bankAccCate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACC_USE, new org.apache.thrift.meta_data.FieldMetaData("accUse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USEEXPLAIN, new org.apache.thrift.meta_data.FieldMetaData("useexplain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusAcctBank.class, metaDataMap);
  }

  public CusAcctBank() {
  }

  public CusAcctBank(
    int pid,
    CusAcct cusAcct,
    String bankName,
    String branchName,
    String accArea,
    String accName,
    String loanCardId,
    int accType,
    int bankAccCate,
    int accUse,
    String useexplain,
    String remark,
    int status,
    int cusType,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusAcct = cusAcct;
    this.bankName = bankName;
    this.branchName = branchName;
    this.accArea = accArea;
    this.accName = accName;
    this.loanCardId = loanCardId;
    this.accType = accType;
    setAccTypeIsSet(true);
    this.bankAccCate = bankAccCate;
    setBankAccCateIsSet(true);
    this.accUse = accUse;
    setAccUseIsSet(true);
    this.useexplain = useexplain;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusAcctBank(CusAcctBank other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusAcct()) {
      this.cusAcct = new CusAcct(other.cusAcct);
    }
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    if (other.isSetBranchName()) {
      this.branchName = other.branchName;
    }
    if (other.isSetAccArea()) {
      this.accArea = other.accArea;
    }
    if (other.isSetAccName()) {
      this.accName = other.accName;
    }
    if (other.isSetLoanCardId()) {
      this.loanCardId = other.loanCardId;
    }
    this.accType = other.accType;
    this.bankAccCate = other.bankAccCate;
    this.accUse = other.accUse;
    if (other.isSetUseexplain()) {
      this.useexplain = other.useexplain;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    this.cusType = other.cusType;
    this.page = other.page;
    this.rows = other.rows;
  }

  public CusAcctBank deepCopy() {
    return new CusAcctBank(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusAcct = null;
    this.bankName = null;
    this.branchName = null;
    this.accArea = null;
    this.accName = null;
    this.loanCardId = null;
    setAccTypeIsSet(false);
    this.accType = 0;
    setBankAccCateIsSet(false);
    this.bankAccCate = 0;
    setAccUseIsSet(false);
    this.accUse = 0;
    this.useexplain = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    setCusTypeIsSet(false);
    this.cusType = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusAcctBank setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusAcct getCusAcct() {
    return this.cusAcct;
  }

  public CusAcctBank setCusAcct(CusAcct cusAcct) {
    this.cusAcct = cusAcct;
    return this;
  }

  public void unsetCusAcct() {
    this.cusAcct = null;
  }

  /** Returns true if field cusAcct is set (has been assigned a value) and false otherwise */
  public boolean isSetCusAcct() {
    return this.cusAcct != null;
  }

  public void setCusAcctIsSet(boolean value) {
    if (!value) {
      this.cusAcct = null;
    }
  }

  public String getBankName() {
    return this.bankName;
  }

  public CusAcctBank setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public String getBranchName() {
    return this.branchName;
  }

  public CusAcctBank setBranchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

  public void unsetBranchName() {
    this.branchName = null;
  }

  /** Returns true if field branchName is set (has been assigned a value) and false otherwise */
  public boolean isSetBranchName() {
    return this.branchName != null;
  }

  public void setBranchNameIsSet(boolean value) {
    if (!value) {
      this.branchName = null;
    }
  }

  public String getAccArea() {
    return this.accArea;
  }

  public CusAcctBank setAccArea(String accArea) {
    this.accArea = accArea;
    return this;
  }

  public void unsetAccArea() {
    this.accArea = null;
  }

  /** Returns true if field accArea is set (has been assigned a value) and false otherwise */
  public boolean isSetAccArea() {
    return this.accArea != null;
  }

  public void setAccAreaIsSet(boolean value) {
    if (!value) {
      this.accArea = null;
    }
  }

  public String getAccName() {
    return this.accName;
  }

  public CusAcctBank setAccName(String accName) {
    this.accName = accName;
    return this;
  }

  public void unsetAccName() {
    this.accName = null;
  }

  /** Returns true if field accName is set (has been assigned a value) and false otherwise */
  public boolean isSetAccName() {
    return this.accName != null;
  }

  public void setAccNameIsSet(boolean value) {
    if (!value) {
      this.accName = null;
    }
  }

  public String getLoanCardId() {
    return this.loanCardId;
  }

  public CusAcctBank setLoanCardId(String loanCardId) {
    this.loanCardId = loanCardId;
    return this;
  }

  public void unsetLoanCardId() {
    this.loanCardId = null;
  }

  /** Returns true if field loanCardId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanCardId() {
    return this.loanCardId != null;
  }

  public void setLoanCardIdIsSet(boolean value) {
    if (!value) {
      this.loanCardId = null;
    }
  }

  public int getAccType() {
    return this.accType;
  }

  public CusAcctBank setAccType(int accType) {
    this.accType = accType;
    setAccTypeIsSet(true);
    return this;
  }

  public void unsetAccType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTYPE_ISSET_ID);
  }

  /** Returns true if field accType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTYPE_ISSET_ID);
  }

  public void setAccTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTYPE_ISSET_ID, value);
  }

  public int getBankAccCate() {
    return this.bankAccCate;
  }

  public CusAcctBank setBankAccCate(int bankAccCate) {
    this.bankAccCate = bankAccCate;
    setBankAccCateIsSet(true);
    return this;
  }

  public void unsetBankAccCate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKACCCATE_ISSET_ID);
  }

  /** Returns true if field bankAccCate is set (has been assigned a value) and false otherwise */
  public boolean isSetBankAccCate() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKACCCATE_ISSET_ID);
  }

  public void setBankAccCateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKACCCATE_ISSET_ID, value);
  }

  public int getAccUse() {
    return this.accUse;
  }

  public CusAcctBank setAccUse(int accUse) {
    this.accUse = accUse;
    setAccUseIsSet(true);
    return this;
  }

  public void unsetAccUse() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCUSE_ISSET_ID);
  }

  /** Returns true if field accUse is set (has been assigned a value) and false otherwise */
  public boolean isSetAccUse() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCUSE_ISSET_ID);
  }

  public void setAccUseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCUSE_ISSET_ID, value);
  }

  public String getUseexplain() {
    return this.useexplain;
  }

  public CusAcctBank setUseexplain(String useexplain) {
    this.useexplain = useexplain;
    return this;
  }

  public void unsetUseexplain() {
    this.useexplain = null;
  }

  /** Returns true if field useexplain is set (has been assigned a value) and false otherwise */
  public boolean isSetUseexplain() {
    return this.useexplain != null;
  }

  public void setUseexplainIsSet(boolean value) {
    if (!value) {
      this.useexplain = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CusAcctBank setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusAcctBank setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getCusType() {
    return this.cusType;
  }

  public CusAcctBank setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusAcctBank setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusAcctBank setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_ACCT:
      if (value == null) {
        unsetCusAcct();
      } else {
        setCusAcct((CusAcct)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BRANCH_NAME:
      if (value == null) {
        unsetBranchName();
      } else {
        setBranchName((String)value);
      }
      break;

    case ACC_AREA:
      if (value == null) {
        unsetAccArea();
      } else {
        setAccArea((String)value);
      }
      break;

    case ACC_NAME:
      if (value == null) {
        unsetAccName();
      } else {
        setAccName((String)value);
      }
      break;

    case LOAN_CARD_ID:
      if (value == null) {
        unsetLoanCardId();
      } else {
        setLoanCardId((String)value);
      }
      break;

    case ACC_TYPE:
      if (value == null) {
        unsetAccType();
      } else {
        setAccType((Integer)value);
      }
      break;

    case BANK_ACC_CATE:
      if (value == null) {
        unsetBankAccCate();
      } else {
        setBankAccCate((Integer)value);
      }
      break;

    case ACC_USE:
      if (value == null) {
        unsetAccUse();
      } else {
        setAccUse((Integer)value);
      }
      break;

    case USEEXPLAIN:
      if (value == null) {
        unsetUseexplain();
      } else {
        setUseexplain((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_ACCT:
      return getCusAcct();

    case BANK_NAME:
      return getBankName();

    case BRANCH_NAME:
      return getBranchName();

    case ACC_AREA:
      return getAccArea();

    case ACC_NAME:
      return getAccName();

    case LOAN_CARD_ID:
      return getLoanCardId();

    case ACC_TYPE:
      return Integer.valueOf(getAccType());

    case BANK_ACC_CATE:
      return Integer.valueOf(getBankAccCate());

    case ACC_USE:
      return Integer.valueOf(getAccUse());

    case USEEXPLAIN:
      return getUseexplain();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_ACCT:
      return isSetCusAcct();
    case BANK_NAME:
      return isSetBankName();
    case BRANCH_NAME:
      return isSetBranchName();
    case ACC_AREA:
      return isSetAccArea();
    case ACC_NAME:
      return isSetAccName();
    case LOAN_CARD_ID:
      return isSetLoanCardId();
    case ACC_TYPE:
      return isSetAccType();
    case BANK_ACC_CATE:
      return isSetBankAccCate();
    case ACC_USE:
      return isSetAccUse();
    case USEEXPLAIN:
      return isSetUseexplain();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case CUS_TYPE:
      return isSetCusType();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusAcctBank)
      return this.equals((CusAcctBank)that);
    return false;
  }

  public boolean equals(CusAcctBank that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusAcct = true && this.isSetCusAcct();
    boolean that_present_cusAcct = true && that.isSetCusAcct();
    if (this_present_cusAcct || that_present_cusAcct) {
      if (!(this_present_cusAcct && that_present_cusAcct))
        return false;
      if (!this.cusAcct.equals(that.cusAcct))
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_branchName = true && this.isSetBranchName();
    boolean that_present_branchName = true && that.isSetBranchName();
    if (this_present_branchName || that_present_branchName) {
      if (!(this_present_branchName && that_present_branchName))
        return false;
      if (!this.branchName.equals(that.branchName))
        return false;
    }

    boolean this_present_accArea = true && this.isSetAccArea();
    boolean that_present_accArea = true && that.isSetAccArea();
    if (this_present_accArea || that_present_accArea) {
      if (!(this_present_accArea && that_present_accArea))
        return false;
      if (!this.accArea.equals(that.accArea))
        return false;
    }

    boolean this_present_accName = true && this.isSetAccName();
    boolean that_present_accName = true && that.isSetAccName();
    if (this_present_accName || that_present_accName) {
      if (!(this_present_accName && that_present_accName))
        return false;
      if (!this.accName.equals(that.accName))
        return false;
    }

    boolean this_present_loanCardId = true && this.isSetLoanCardId();
    boolean that_present_loanCardId = true && that.isSetLoanCardId();
    if (this_present_loanCardId || that_present_loanCardId) {
      if (!(this_present_loanCardId && that_present_loanCardId))
        return false;
      if (!this.loanCardId.equals(that.loanCardId))
        return false;
    }

    boolean this_present_accType = true;
    boolean that_present_accType = true;
    if (this_present_accType || that_present_accType) {
      if (!(this_present_accType && that_present_accType))
        return false;
      if (this.accType != that.accType)
        return false;
    }

    boolean this_present_bankAccCate = true;
    boolean that_present_bankAccCate = true;
    if (this_present_bankAccCate || that_present_bankAccCate) {
      if (!(this_present_bankAccCate && that_present_bankAccCate))
        return false;
      if (this.bankAccCate != that.bankAccCate)
        return false;
    }

    boolean this_present_accUse = true;
    boolean that_present_accUse = true;
    if (this_present_accUse || that_present_accUse) {
      if (!(this_present_accUse && that_present_accUse))
        return false;
      if (this.accUse != that.accUse)
        return false;
    }

    boolean this_present_useexplain = true && this.isSetUseexplain();
    boolean that_present_useexplain = true && that.isSetUseexplain();
    if (this_present_useexplain || that_present_useexplain) {
      if (!(this_present_useexplain && that_present_useexplain))
        return false;
      if (!this.useexplain.equals(that.useexplain))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusAcct = true && (isSetCusAcct());
    list.add(present_cusAcct);
    if (present_cusAcct)
      list.add(cusAcct);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_branchName = true && (isSetBranchName());
    list.add(present_branchName);
    if (present_branchName)
      list.add(branchName);

    boolean present_accArea = true && (isSetAccArea());
    list.add(present_accArea);
    if (present_accArea)
      list.add(accArea);

    boolean present_accName = true && (isSetAccName());
    list.add(present_accName);
    if (present_accName)
      list.add(accName);

    boolean present_loanCardId = true && (isSetLoanCardId());
    list.add(present_loanCardId);
    if (present_loanCardId)
      list.add(loanCardId);

    boolean present_accType = true;
    list.add(present_accType);
    if (present_accType)
      list.add(accType);

    boolean present_bankAccCate = true;
    list.add(present_bankAccCate);
    if (present_bankAccCate)
      list.add(bankAccCate);

    boolean present_accUse = true;
    list.add(present_accUse);
    if (present_accUse)
      list.add(accUse);

    boolean present_useexplain = true && (isSetUseexplain());
    list.add(present_useexplain);
    if (present_useexplain)
      list.add(useexplain);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusAcctBank other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusAcct()).compareTo(other.isSetCusAcct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusAcct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusAcct, other.cusAcct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBranchName()).compareTo(other.isSetBranchName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBranchName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branchName, other.branchName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccArea()).compareTo(other.isSetAccArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accArea, other.accArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccName()).compareTo(other.isSetAccName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accName, other.accName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanCardId()).compareTo(other.isSetLoanCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanCardId, other.loanCardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccType()).compareTo(other.isSetAccType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accType, other.accType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankAccCate()).compareTo(other.isSetBankAccCate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankAccCate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAccCate, other.bankAccCate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccUse()).compareTo(other.isSetAccUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accUse, other.accUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseexplain()).compareTo(other.isSetUseexplain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseexplain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useexplain, other.useexplain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusAcctBank(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusAcct:");
    if (this.cusAcct == null) {
      sb.append("null");
    } else {
      sb.append(this.cusAcct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("branchName:");
    if (this.branchName == null) {
      sb.append("null");
    } else {
      sb.append(this.branchName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accArea:");
    if (this.accArea == null) {
      sb.append("null");
    } else {
      sb.append(this.accArea);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accName:");
    if (this.accName == null) {
      sb.append("null");
    } else {
      sb.append(this.accName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanCardId:");
    if (this.loanCardId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanCardId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accType:");
    sb.append(this.accType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankAccCate:");
    sb.append(this.bankAccCate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accUse:");
    sb.append(this.accUse);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useexplain:");
    if (this.useexplain == null) {
      sb.append("null");
    } else {
      sb.append(this.useexplain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusAcct != null) {
      cusAcct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusAcctBankStandardSchemeFactory implements SchemeFactory {
    public CusAcctBankStandardScheme getScheme() {
      return new CusAcctBankStandardScheme();
    }
  }

  private static class CusAcctBankStandardScheme extends StandardScheme<CusAcctBank> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusAcctBank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_ACCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusAcct = new CusAcct();
              struct.cusAcct.read(iprot);
              struct.setCusAcctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BRANCH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.branchName = iprot.readString();
              struct.setBranchNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACC_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accArea = iprot.readString();
              struct.setAccAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accName = iprot.readString();
              struct.setAccNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAN_CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanCardId = iprot.readString();
              struct.setLoanCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accType = iprot.readI32();
              struct.setAccTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_ACC_CATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankAccCate = iprot.readI32();
              struct.setBankAccCateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACC_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accUse = iprot.readI32();
              struct.setAccUseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USEEXPLAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useexplain = iprot.readString();
              struct.setUseexplainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusAcctBank struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusAcct != null) {
        oprot.writeFieldBegin(CUS_ACCT_FIELD_DESC);
        struct.cusAcct.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      if (struct.branchName != null) {
        oprot.writeFieldBegin(BRANCH_NAME_FIELD_DESC);
        oprot.writeString(struct.branchName);
        oprot.writeFieldEnd();
      }
      if (struct.accArea != null) {
        oprot.writeFieldBegin(ACC_AREA_FIELD_DESC);
        oprot.writeString(struct.accArea);
        oprot.writeFieldEnd();
      }
      if (struct.accName != null) {
        oprot.writeFieldBegin(ACC_NAME_FIELD_DESC);
        oprot.writeString(struct.accName);
        oprot.writeFieldEnd();
      }
      if (struct.loanCardId != null) {
        oprot.writeFieldBegin(LOAN_CARD_ID_FIELD_DESC);
        oprot.writeString(struct.loanCardId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACC_TYPE_FIELD_DESC);
      oprot.writeI32(struct.accType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_ACC_CATE_FIELD_DESC);
      oprot.writeI32(struct.bankAccCate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACC_USE_FIELD_DESC);
      oprot.writeI32(struct.accUse);
      oprot.writeFieldEnd();
      if (struct.useexplain != null) {
        oprot.writeFieldBegin(USEEXPLAIN_FIELD_DESC);
        oprot.writeString(struct.useexplain);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusAcctBankTupleSchemeFactory implements SchemeFactory {
    public CusAcctBankTupleScheme getScheme() {
      return new CusAcctBankTupleScheme();
    }
  }

  private static class CusAcctBankTupleScheme extends TupleScheme<CusAcctBank> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusAcctBank struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusAcct()) {
        optionals.set(1);
      }
      if (struct.isSetBankName()) {
        optionals.set(2);
      }
      if (struct.isSetBranchName()) {
        optionals.set(3);
      }
      if (struct.isSetAccArea()) {
        optionals.set(4);
      }
      if (struct.isSetAccName()) {
        optionals.set(5);
      }
      if (struct.isSetLoanCardId()) {
        optionals.set(6);
      }
      if (struct.isSetAccType()) {
        optionals.set(7);
      }
      if (struct.isSetBankAccCate()) {
        optionals.set(8);
      }
      if (struct.isSetAccUse()) {
        optionals.set(9);
      }
      if (struct.isSetUseexplain()) {
        optionals.set(10);
      }
      if (struct.isSetRemark()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetCusType()) {
        optionals.set(13);
      }
      if (struct.isSetPage()) {
        optionals.set(14);
      }
      if (struct.isSetRows()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusAcct()) {
        struct.cusAcct.write(oprot);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBranchName()) {
        oprot.writeString(struct.branchName);
      }
      if (struct.isSetAccArea()) {
        oprot.writeString(struct.accArea);
      }
      if (struct.isSetAccName()) {
        oprot.writeString(struct.accName);
      }
      if (struct.isSetLoanCardId()) {
        oprot.writeString(struct.loanCardId);
      }
      if (struct.isSetAccType()) {
        oprot.writeI32(struct.accType);
      }
      if (struct.isSetBankAccCate()) {
        oprot.writeI32(struct.bankAccCate);
      }
      if (struct.isSetAccUse()) {
        oprot.writeI32(struct.accUse);
      }
      if (struct.isSetUseexplain()) {
        oprot.writeString(struct.useexplain);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusAcctBank struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusAcct = new CusAcct();
        struct.cusAcct.read(iprot);
        struct.setCusAcctIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.branchName = iprot.readString();
        struct.setBranchNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accArea = iprot.readString();
        struct.setAccAreaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accName = iprot.readString();
        struct.setAccNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanCardId = iprot.readString();
        struct.setLoanCardIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.accType = iprot.readI32();
        struct.setAccTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankAccCate = iprot.readI32();
        struct.setBankAccCateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.accUse = iprot.readI32();
        struct.setAccUseIsSet(true);
      }
      if (incoming.get(10)) {
        struct.useexplain = iprot.readString();
        struct.setUseexplainIsSet(true);
      }
      if (incoming.get(11)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


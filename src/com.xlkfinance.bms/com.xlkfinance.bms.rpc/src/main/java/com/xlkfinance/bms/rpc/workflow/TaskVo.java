/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.workflow;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 任务管理*
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-18")
public class TaskVo implements org.apache.thrift.TBase<TaskVo, TaskVo._Fields>, java.io.Serializable, Cloneable, Comparable<TaskVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskVo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskUserName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_USER_REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskUserRealName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ALLOCATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("allocationType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALLOCATION_REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("allocationRefId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField WORKFLOW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ALLOCATION_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("allocationDttm", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TASK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskStatus", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField WORKFLOW_PROCESS_DEFKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowProcessDefkey", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField WORKFLOW_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowInstanceId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField WORKFLOW_TASK_DEF_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowTaskDefKey", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField WORKFLOW_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowTaskId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField NEXT_ROLE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nextRoleCode", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ALLOW_TURN_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("allowTurnDown", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField WORKFLO_PPROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("workfloPprojectName", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskVoTupleSchemeFactory());
  }

  public int pid; // required
  public String taskUserName; // required
  public String taskUserRealName; // required
  public int taskType; // required
  public String allocationType; // required
  public int allocationRefId; // required
  public String workflowName; // required
  public String taskName; // required
  public String allocationDttm; // required
  public String completeDttm; // required
  public int taskStatus; // required
  public int status; // required
  public String workflowProcessDefkey; // required
  public String workflowInstanceId; // required
  public String workflowTaskDefKey; // required
  public String workflowTaskId; // required
  public String nextRoleCode; // required
  public int refId; // required
  public String allowTurnDown; // required
  public int page; // required
  public int rows; // required
  public int projectId; // required
  public String workfloPprojectName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    TASK_USER_NAME((short)2, "taskUserName"),
    TASK_USER_REAL_NAME((short)3, "taskUserRealName"),
    TASK_TYPE((short)4, "taskType"),
    ALLOCATION_TYPE((short)5, "allocationType"),
    ALLOCATION_REF_ID((short)6, "allocationRefId"),
    WORKFLOW_NAME((short)7, "workflowName"),
    TASK_NAME((short)8, "taskName"),
    ALLOCATION_DTTM((short)9, "allocationDttm"),
    COMPLETE_DTTM((short)10, "completeDttm"),
    TASK_STATUS((short)11, "taskStatus"),
    STATUS((short)12, "status"),
    WORKFLOW_PROCESS_DEFKEY((short)13, "workflowProcessDefkey"),
    WORKFLOW_INSTANCE_ID((short)14, "workflowInstanceId"),
    WORKFLOW_TASK_DEF_KEY((short)15, "workflowTaskDefKey"),
    WORKFLOW_TASK_ID((short)16, "workflowTaskId"),
    NEXT_ROLE_CODE((short)17, "nextRoleCode"),
    REF_ID((short)18, "refId"),
    ALLOW_TURN_DOWN((short)19, "allowTurnDown"),
    PAGE((short)20, "page"),
    ROWS((short)21, "rows"),
    PROJECT_ID((short)22, "projectId"),
    WORKFLO_PPROJECT_NAME((short)23, "workfloPprojectName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // TASK_USER_NAME
          return TASK_USER_NAME;
        case 3: // TASK_USER_REAL_NAME
          return TASK_USER_REAL_NAME;
        case 4: // TASK_TYPE
          return TASK_TYPE;
        case 5: // ALLOCATION_TYPE
          return ALLOCATION_TYPE;
        case 6: // ALLOCATION_REF_ID
          return ALLOCATION_REF_ID;
        case 7: // WORKFLOW_NAME
          return WORKFLOW_NAME;
        case 8: // TASK_NAME
          return TASK_NAME;
        case 9: // ALLOCATION_DTTM
          return ALLOCATION_DTTM;
        case 10: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 11: // TASK_STATUS
          return TASK_STATUS;
        case 12: // STATUS
          return STATUS;
        case 13: // WORKFLOW_PROCESS_DEFKEY
          return WORKFLOW_PROCESS_DEFKEY;
        case 14: // WORKFLOW_INSTANCE_ID
          return WORKFLOW_INSTANCE_ID;
        case 15: // WORKFLOW_TASK_DEF_KEY
          return WORKFLOW_TASK_DEF_KEY;
        case 16: // WORKFLOW_TASK_ID
          return WORKFLOW_TASK_ID;
        case 17: // NEXT_ROLE_CODE
          return NEXT_ROLE_CODE;
        case 18: // REF_ID
          return REF_ID;
        case 19: // ALLOW_TURN_DOWN
          return ALLOW_TURN_DOWN;
        case 20: // PAGE
          return PAGE;
        case 21: // ROWS
          return ROWS;
        case 22: // PROJECT_ID
          return PROJECT_ID;
        case 23: // WORKFLO_PPROJECT_NAME
          return WORKFLO_PPROJECT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __TASKTYPE_ISSET_ID = 1;
  private static final int __ALLOCATIONREFID_ISSET_ID = 2;
  private static final int __TASKSTATUS_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __REFID_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private static final int __PROJECTID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_USER_REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskUserRealName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALLOCATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("allocationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOCATION_REF_ID, new org.apache.thrift.meta_data.FieldMetaData("allocationRefId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLOW_NAME, new org.apache.thrift.meta_data.FieldMetaData("workflowName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOCATION_DTTM, new org.apache.thrift.meta_data.FieldMetaData("allocationDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("taskStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLOW_PROCESS_DEFKEY, new org.apache.thrift.meta_data.FieldMetaData("workflowProcessDefkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_TASK_DEF_KEY, new org.apache.thrift.meta_data.FieldMetaData("workflowTaskDefKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_ROLE_CODE, new org.apache.thrift.meta_data.FieldMetaData("nextRoleCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALLOW_TURN_DOWN, new org.apache.thrift.meta_data.FieldMetaData("allowTurnDown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKFLO_PPROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("workfloPprojectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskVo.class, metaDataMap);
  }

  public TaskVo() {
  }

  public TaskVo(
    int pid,
    String taskUserName,
    String taskUserRealName,
    int taskType,
    String allocationType,
    int allocationRefId,
    String workflowName,
    String taskName,
    String allocationDttm,
    String completeDttm,
    int taskStatus,
    int status,
    String workflowProcessDefkey,
    String workflowInstanceId,
    String workflowTaskDefKey,
    String workflowTaskId,
    String nextRoleCode,
    int refId,
    String allowTurnDown,
    int page,
    int rows,
    int projectId,
    String workfloPprojectName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.taskUserName = taskUserName;
    this.taskUserRealName = taskUserRealName;
    this.taskType = taskType;
    setTaskTypeIsSet(true);
    this.allocationType = allocationType;
    this.allocationRefId = allocationRefId;
    setAllocationRefIdIsSet(true);
    this.workflowName = workflowName;
    this.taskName = taskName;
    this.allocationDttm = allocationDttm;
    this.completeDttm = completeDttm;
    this.taskStatus = taskStatus;
    setTaskStatusIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.workflowProcessDefkey = workflowProcessDefkey;
    this.workflowInstanceId = workflowInstanceId;
    this.workflowTaskDefKey = workflowTaskDefKey;
    this.workflowTaskId = workflowTaskId;
    this.nextRoleCode = nextRoleCode;
    this.refId = refId;
    setRefIdIsSet(true);
    this.allowTurnDown = allowTurnDown;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.workfloPprojectName = workfloPprojectName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskVo(TaskVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetTaskUserName()) {
      this.taskUserName = other.taskUserName;
    }
    if (other.isSetTaskUserRealName()) {
      this.taskUserRealName = other.taskUserRealName;
    }
    this.taskType = other.taskType;
    if (other.isSetAllocationType()) {
      this.allocationType = other.allocationType;
    }
    this.allocationRefId = other.allocationRefId;
    if (other.isSetWorkflowName()) {
      this.workflowName = other.workflowName;
    }
    if (other.isSetTaskName()) {
      this.taskName = other.taskName;
    }
    if (other.isSetAllocationDttm()) {
      this.allocationDttm = other.allocationDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    this.taskStatus = other.taskStatus;
    this.status = other.status;
    if (other.isSetWorkflowProcessDefkey()) {
      this.workflowProcessDefkey = other.workflowProcessDefkey;
    }
    if (other.isSetWorkflowInstanceId()) {
      this.workflowInstanceId = other.workflowInstanceId;
    }
    if (other.isSetWorkflowTaskDefKey()) {
      this.workflowTaskDefKey = other.workflowTaskDefKey;
    }
    if (other.isSetWorkflowTaskId()) {
      this.workflowTaskId = other.workflowTaskId;
    }
    if (other.isSetNextRoleCode()) {
      this.nextRoleCode = other.nextRoleCode;
    }
    this.refId = other.refId;
    if (other.isSetAllowTurnDown()) {
      this.allowTurnDown = other.allowTurnDown;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.projectId = other.projectId;
    if (other.isSetWorkfloPprojectName()) {
      this.workfloPprojectName = other.workfloPprojectName;
    }
  }

  public TaskVo deepCopy() {
    return new TaskVo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.taskUserName = null;
    this.taskUserRealName = null;
    setTaskTypeIsSet(false);
    this.taskType = 0;
    this.allocationType = null;
    setAllocationRefIdIsSet(false);
    this.allocationRefId = 0;
    this.workflowName = null;
    this.taskName = null;
    this.allocationDttm = null;
    this.completeDttm = null;
    setTaskStatusIsSet(false);
    this.taskStatus = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.workflowProcessDefkey = null;
    this.workflowInstanceId = null;
    this.workflowTaskDefKey = null;
    this.workflowTaskId = null;
    this.nextRoleCode = null;
    setRefIdIsSet(false);
    this.refId = 0;
    this.allowTurnDown = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.workfloPprojectName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public TaskVo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getTaskUserName() {
    return this.taskUserName;
  }

  public TaskVo setTaskUserName(String taskUserName) {
    this.taskUserName = taskUserName;
    return this;
  }

  public void unsetTaskUserName() {
    this.taskUserName = null;
  }

  /** Returns true if field taskUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskUserName() {
    return this.taskUserName != null;
  }

  public void setTaskUserNameIsSet(boolean value) {
    if (!value) {
      this.taskUserName = null;
    }
  }

  public String getTaskUserRealName() {
    return this.taskUserRealName;
  }

  public TaskVo setTaskUserRealName(String taskUserRealName) {
    this.taskUserRealName = taskUserRealName;
    return this;
  }

  public void unsetTaskUserRealName() {
    this.taskUserRealName = null;
  }

  /** Returns true if field taskUserRealName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskUserRealName() {
    return this.taskUserRealName != null;
  }

  public void setTaskUserRealNameIsSet(boolean value) {
    if (!value) {
      this.taskUserRealName = null;
    }
  }

  public int getTaskType() {
    return this.taskType;
  }

  public TaskVo setTaskType(int taskType) {
    this.taskType = taskType;
    setTaskTypeIsSet(true);
    return this;
  }

  public void unsetTaskType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKTYPE_ISSET_ID);
  }

  /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKTYPE_ISSET_ID);
  }

  public void setTaskTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKTYPE_ISSET_ID, value);
  }

  public String getAllocationType() {
    return this.allocationType;
  }

  public TaskVo setAllocationType(String allocationType) {
    this.allocationType = allocationType;
    return this;
  }

  public void unsetAllocationType() {
    this.allocationType = null;
  }

  /** Returns true if field allocationType is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocationType() {
    return this.allocationType != null;
  }

  public void setAllocationTypeIsSet(boolean value) {
    if (!value) {
      this.allocationType = null;
    }
  }

  public int getAllocationRefId() {
    return this.allocationRefId;
  }

  public TaskVo setAllocationRefId(int allocationRefId) {
    this.allocationRefId = allocationRefId;
    setAllocationRefIdIsSet(true);
    return this;
  }

  public void unsetAllocationRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOCATIONREFID_ISSET_ID);
  }

  /** Returns true if field allocationRefId is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocationRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOCATIONREFID_ISSET_ID);
  }

  public void setAllocationRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOCATIONREFID_ISSET_ID, value);
  }

  public String getWorkflowName() {
    return this.workflowName;
  }

  public TaskVo setWorkflowName(String workflowName) {
    this.workflowName = workflowName;
    return this;
  }

  public void unsetWorkflowName() {
    this.workflowName = null;
  }

  /** Returns true if field workflowName is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowName() {
    return this.workflowName != null;
  }

  public void setWorkflowNameIsSet(boolean value) {
    if (!value) {
      this.workflowName = null;
    }
  }

  public String getTaskName() {
    return this.taskName;
  }

  public TaskVo setTaskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

  public void unsetTaskName() {
    this.taskName = null;
  }

  /** Returns true if field taskName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskName() {
    return this.taskName != null;
  }

  public void setTaskNameIsSet(boolean value) {
    if (!value) {
      this.taskName = null;
    }
  }

  public String getAllocationDttm() {
    return this.allocationDttm;
  }

  public TaskVo setAllocationDttm(String allocationDttm) {
    this.allocationDttm = allocationDttm;
    return this;
  }

  public void unsetAllocationDttm() {
    this.allocationDttm = null;
  }

  /** Returns true if field allocationDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetAllocationDttm() {
    return this.allocationDttm != null;
  }

  public void setAllocationDttmIsSet(boolean value) {
    if (!value) {
      this.allocationDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public TaskVo setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public int getTaskStatus() {
    return this.taskStatus;
  }

  public TaskVo setTaskStatus(int taskStatus) {
    this.taskStatus = taskStatus;
    setTaskStatusIsSet(true);
    return this;
  }

  public void unsetTaskStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKSTATUS_ISSET_ID);
  }

  /** Returns true if field taskStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKSTATUS_ISSET_ID);
  }

  public void setTaskStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKSTATUS_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TaskVo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getWorkflowProcessDefkey() {
    return this.workflowProcessDefkey;
  }

  public TaskVo setWorkflowProcessDefkey(String workflowProcessDefkey) {
    this.workflowProcessDefkey = workflowProcessDefkey;
    return this;
  }

  public void unsetWorkflowProcessDefkey() {
    this.workflowProcessDefkey = null;
  }

  /** Returns true if field workflowProcessDefkey is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowProcessDefkey() {
    return this.workflowProcessDefkey != null;
  }

  public void setWorkflowProcessDefkeyIsSet(boolean value) {
    if (!value) {
      this.workflowProcessDefkey = null;
    }
  }

  public String getWorkflowInstanceId() {
    return this.workflowInstanceId;
  }

  public TaskVo setWorkflowInstanceId(String workflowInstanceId) {
    this.workflowInstanceId = workflowInstanceId;
    return this;
  }

  public void unsetWorkflowInstanceId() {
    this.workflowInstanceId = null;
  }

  /** Returns true if field workflowInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowInstanceId() {
    return this.workflowInstanceId != null;
  }

  public void setWorkflowInstanceIdIsSet(boolean value) {
    if (!value) {
      this.workflowInstanceId = null;
    }
  }

  public String getWorkflowTaskDefKey() {
    return this.workflowTaskDefKey;
  }

  public TaskVo setWorkflowTaskDefKey(String workflowTaskDefKey) {
    this.workflowTaskDefKey = workflowTaskDefKey;
    return this;
  }

  public void unsetWorkflowTaskDefKey() {
    this.workflowTaskDefKey = null;
  }

  /** Returns true if field workflowTaskDefKey is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowTaskDefKey() {
    return this.workflowTaskDefKey != null;
  }

  public void setWorkflowTaskDefKeyIsSet(boolean value) {
    if (!value) {
      this.workflowTaskDefKey = null;
    }
  }

  public String getWorkflowTaskId() {
    return this.workflowTaskId;
  }

  public TaskVo setWorkflowTaskId(String workflowTaskId) {
    this.workflowTaskId = workflowTaskId;
    return this;
  }

  public void unsetWorkflowTaskId() {
    this.workflowTaskId = null;
  }

  /** Returns true if field workflowTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowTaskId() {
    return this.workflowTaskId != null;
  }

  public void setWorkflowTaskIdIsSet(boolean value) {
    if (!value) {
      this.workflowTaskId = null;
    }
  }

  public String getNextRoleCode() {
    return this.nextRoleCode;
  }

  public TaskVo setNextRoleCode(String nextRoleCode) {
    this.nextRoleCode = nextRoleCode;
    return this;
  }

  public void unsetNextRoleCode() {
    this.nextRoleCode = null;
  }

  /** Returns true if field nextRoleCode is set (has been assigned a value) and false otherwise */
  public boolean isSetNextRoleCode() {
    return this.nextRoleCode != null;
  }

  public void setNextRoleCodeIsSet(boolean value) {
    if (!value) {
      this.nextRoleCode = null;
    }
  }

  public int getRefId() {
    return this.refId;
  }

  public TaskVo setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public String getAllowTurnDown() {
    return this.allowTurnDown;
  }

  public TaskVo setAllowTurnDown(String allowTurnDown) {
    this.allowTurnDown = allowTurnDown;
    return this;
  }

  public void unsetAllowTurnDown() {
    this.allowTurnDown = null;
  }

  /** Returns true if field allowTurnDown is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowTurnDown() {
    return this.allowTurnDown != null;
  }

  public void setAllowTurnDownIsSet(boolean value) {
    if (!value) {
      this.allowTurnDown = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public TaskVo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public TaskVo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public TaskVo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getWorkfloPprojectName() {
    return this.workfloPprojectName;
  }

  public TaskVo setWorkfloPprojectName(String workfloPprojectName) {
    this.workfloPprojectName = workfloPprojectName;
    return this;
  }

  public void unsetWorkfloPprojectName() {
    this.workfloPprojectName = null;
  }

  /** Returns true if field workfloPprojectName is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkfloPprojectName() {
    return this.workfloPprojectName != null;
  }

  public void setWorkfloPprojectNameIsSet(boolean value) {
    if (!value) {
      this.workfloPprojectName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case TASK_USER_NAME:
      if (value == null) {
        unsetTaskUserName();
      } else {
        setTaskUserName((String)value);
      }
      break;

    case TASK_USER_REAL_NAME:
      if (value == null) {
        unsetTaskUserRealName();
      } else {
        setTaskUserRealName((String)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((Integer)value);
      }
      break;

    case ALLOCATION_TYPE:
      if (value == null) {
        unsetAllocationType();
      } else {
        setAllocationType((String)value);
      }
      break;

    case ALLOCATION_REF_ID:
      if (value == null) {
        unsetAllocationRefId();
      } else {
        setAllocationRefId((Integer)value);
      }
      break;

    case WORKFLOW_NAME:
      if (value == null) {
        unsetWorkflowName();
      } else {
        setWorkflowName((String)value);
      }
      break;

    case TASK_NAME:
      if (value == null) {
        unsetTaskName();
      } else {
        setTaskName((String)value);
      }
      break;

    case ALLOCATION_DTTM:
      if (value == null) {
        unsetAllocationDttm();
      } else {
        setAllocationDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case TASK_STATUS:
      if (value == null) {
        unsetTaskStatus();
      } else {
        setTaskStatus((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case WORKFLOW_PROCESS_DEFKEY:
      if (value == null) {
        unsetWorkflowProcessDefkey();
      } else {
        setWorkflowProcessDefkey((String)value);
      }
      break;

    case WORKFLOW_INSTANCE_ID:
      if (value == null) {
        unsetWorkflowInstanceId();
      } else {
        setWorkflowInstanceId((String)value);
      }
      break;

    case WORKFLOW_TASK_DEF_KEY:
      if (value == null) {
        unsetWorkflowTaskDefKey();
      } else {
        setWorkflowTaskDefKey((String)value);
      }
      break;

    case WORKFLOW_TASK_ID:
      if (value == null) {
        unsetWorkflowTaskId();
      } else {
        setWorkflowTaskId((String)value);
      }
      break;

    case NEXT_ROLE_CODE:
      if (value == null) {
        unsetNextRoleCode();
      } else {
        setNextRoleCode((String)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case ALLOW_TURN_DOWN:
      if (value == null) {
        unsetAllowTurnDown();
      } else {
        setAllowTurnDown((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case WORKFLO_PPROJECT_NAME:
      if (value == null) {
        unsetWorkfloPprojectName();
      } else {
        setWorkfloPprojectName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case TASK_USER_NAME:
      return getTaskUserName();

    case TASK_USER_REAL_NAME:
      return getTaskUserRealName();

    case TASK_TYPE:
      return Integer.valueOf(getTaskType());

    case ALLOCATION_TYPE:
      return getAllocationType();

    case ALLOCATION_REF_ID:
      return Integer.valueOf(getAllocationRefId());

    case WORKFLOW_NAME:
      return getWorkflowName();

    case TASK_NAME:
      return getTaskName();

    case ALLOCATION_DTTM:
      return getAllocationDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case TASK_STATUS:
      return Integer.valueOf(getTaskStatus());

    case STATUS:
      return Integer.valueOf(getStatus());

    case WORKFLOW_PROCESS_DEFKEY:
      return getWorkflowProcessDefkey();

    case WORKFLOW_INSTANCE_ID:
      return getWorkflowInstanceId();

    case WORKFLOW_TASK_DEF_KEY:
      return getWorkflowTaskDefKey();

    case WORKFLOW_TASK_ID:
      return getWorkflowTaskId();

    case NEXT_ROLE_CODE:
      return getNextRoleCode();

    case REF_ID:
      return Integer.valueOf(getRefId());

    case ALLOW_TURN_DOWN:
      return getAllowTurnDown();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case WORKFLO_PPROJECT_NAME:
      return getWorkfloPprojectName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case TASK_USER_NAME:
      return isSetTaskUserName();
    case TASK_USER_REAL_NAME:
      return isSetTaskUserRealName();
    case TASK_TYPE:
      return isSetTaskType();
    case ALLOCATION_TYPE:
      return isSetAllocationType();
    case ALLOCATION_REF_ID:
      return isSetAllocationRefId();
    case WORKFLOW_NAME:
      return isSetWorkflowName();
    case TASK_NAME:
      return isSetTaskName();
    case ALLOCATION_DTTM:
      return isSetAllocationDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case TASK_STATUS:
      return isSetTaskStatus();
    case STATUS:
      return isSetStatus();
    case WORKFLOW_PROCESS_DEFKEY:
      return isSetWorkflowProcessDefkey();
    case WORKFLOW_INSTANCE_ID:
      return isSetWorkflowInstanceId();
    case WORKFLOW_TASK_DEF_KEY:
      return isSetWorkflowTaskDefKey();
    case WORKFLOW_TASK_ID:
      return isSetWorkflowTaskId();
    case NEXT_ROLE_CODE:
      return isSetNextRoleCode();
    case REF_ID:
      return isSetRefId();
    case ALLOW_TURN_DOWN:
      return isSetAllowTurnDown();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PROJECT_ID:
      return isSetProjectId();
    case WORKFLO_PPROJECT_NAME:
      return isSetWorkfloPprojectName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskVo)
      return this.equals((TaskVo)that);
    return false;
  }

  public boolean equals(TaskVo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_taskUserName = true && this.isSetTaskUserName();
    boolean that_present_taskUserName = true && that.isSetTaskUserName();
    if (this_present_taskUserName || that_present_taskUserName) {
      if (!(this_present_taskUserName && that_present_taskUserName))
        return false;
      if (!this.taskUserName.equals(that.taskUserName))
        return false;
    }

    boolean this_present_taskUserRealName = true && this.isSetTaskUserRealName();
    boolean that_present_taskUserRealName = true && that.isSetTaskUserRealName();
    if (this_present_taskUserRealName || that_present_taskUserRealName) {
      if (!(this_present_taskUserRealName && that_present_taskUserRealName))
        return false;
      if (!this.taskUserRealName.equals(that.taskUserRealName))
        return false;
    }

    boolean this_present_taskType = true;
    boolean that_present_taskType = true;
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (this.taskType != that.taskType)
        return false;
    }

    boolean this_present_allocationType = true && this.isSetAllocationType();
    boolean that_present_allocationType = true && that.isSetAllocationType();
    if (this_present_allocationType || that_present_allocationType) {
      if (!(this_present_allocationType && that_present_allocationType))
        return false;
      if (!this.allocationType.equals(that.allocationType))
        return false;
    }

    boolean this_present_allocationRefId = true;
    boolean that_present_allocationRefId = true;
    if (this_present_allocationRefId || that_present_allocationRefId) {
      if (!(this_present_allocationRefId && that_present_allocationRefId))
        return false;
      if (this.allocationRefId != that.allocationRefId)
        return false;
    }

    boolean this_present_workflowName = true && this.isSetWorkflowName();
    boolean that_present_workflowName = true && that.isSetWorkflowName();
    if (this_present_workflowName || that_present_workflowName) {
      if (!(this_present_workflowName && that_present_workflowName))
        return false;
      if (!this.workflowName.equals(that.workflowName))
        return false;
    }

    boolean this_present_taskName = true && this.isSetTaskName();
    boolean that_present_taskName = true && that.isSetTaskName();
    if (this_present_taskName || that_present_taskName) {
      if (!(this_present_taskName && that_present_taskName))
        return false;
      if (!this.taskName.equals(that.taskName))
        return false;
    }

    boolean this_present_allocationDttm = true && this.isSetAllocationDttm();
    boolean that_present_allocationDttm = true && that.isSetAllocationDttm();
    if (this_present_allocationDttm || that_present_allocationDttm) {
      if (!(this_present_allocationDttm && that_present_allocationDttm))
        return false;
      if (!this.allocationDttm.equals(that.allocationDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_taskStatus = true;
    boolean that_present_taskStatus = true;
    if (this_present_taskStatus || that_present_taskStatus) {
      if (!(this_present_taskStatus && that_present_taskStatus))
        return false;
      if (this.taskStatus != that.taskStatus)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_workflowProcessDefkey = true && this.isSetWorkflowProcessDefkey();
    boolean that_present_workflowProcessDefkey = true && that.isSetWorkflowProcessDefkey();
    if (this_present_workflowProcessDefkey || that_present_workflowProcessDefkey) {
      if (!(this_present_workflowProcessDefkey && that_present_workflowProcessDefkey))
        return false;
      if (!this.workflowProcessDefkey.equals(that.workflowProcessDefkey))
        return false;
    }

    boolean this_present_workflowInstanceId = true && this.isSetWorkflowInstanceId();
    boolean that_present_workflowInstanceId = true && that.isSetWorkflowInstanceId();
    if (this_present_workflowInstanceId || that_present_workflowInstanceId) {
      if (!(this_present_workflowInstanceId && that_present_workflowInstanceId))
        return false;
      if (!this.workflowInstanceId.equals(that.workflowInstanceId))
        return false;
    }

    boolean this_present_workflowTaskDefKey = true && this.isSetWorkflowTaskDefKey();
    boolean that_present_workflowTaskDefKey = true && that.isSetWorkflowTaskDefKey();
    if (this_present_workflowTaskDefKey || that_present_workflowTaskDefKey) {
      if (!(this_present_workflowTaskDefKey && that_present_workflowTaskDefKey))
        return false;
      if (!this.workflowTaskDefKey.equals(that.workflowTaskDefKey))
        return false;
    }

    boolean this_present_workflowTaskId = true && this.isSetWorkflowTaskId();
    boolean that_present_workflowTaskId = true && that.isSetWorkflowTaskId();
    if (this_present_workflowTaskId || that_present_workflowTaskId) {
      if (!(this_present_workflowTaskId && that_present_workflowTaskId))
        return false;
      if (!this.workflowTaskId.equals(that.workflowTaskId))
        return false;
    }

    boolean this_present_nextRoleCode = true && this.isSetNextRoleCode();
    boolean that_present_nextRoleCode = true && that.isSetNextRoleCode();
    if (this_present_nextRoleCode || that_present_nextRoleCode) {
      if (!(this_present_nextRoleCode && that_present_nextRoleCode))
        return false;
      if (!this.nextRoleCode.equals(that.nextRoleCode))
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_allowTurnDown = true && this.isSetAllowTurnDown();
    boolean that_present_allowTurnDown = true && that.isSetAllowTurnDown();
    if (this_present_allowTurnDown || that_present_allowTurnDown) {
      if (!(this_present_allowTurnDown && that_present_allowTurnDown))
        return false;
      if (!this.allowTurnDown.equals(that.allowTurnDown))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_workfloPprojectName = true && this.isSetWorkfloPprojectName();
    boolean that_present_workfloPprojectName = true && that.isSetWorkfloPprojectName();
    if (this_present_workfloPprojectName || that_present_workfloPprojectName) {
      if (!(this_present_workfloPprojectName && that_present_workfloPprojectName))
        return false;
      if (!this.workfloPprojectName.equals(that.workfloPprojectName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_taskUserName = true && (isSetTaskUserName());
    list.add(present_taskUserName);
    if (present_taskUserName)
      list.add(taskUserName);

    boolean present_taskUserRealName = true && (isSetTaskUserRealName());
    list.add(present_taskUserRealName);
    if (present_taskUserRealName)
      list.add(taskUserRealName);

    boolean present_taskType = true;
    list.add(present_taskType);
    if (present_taskType)
      list.add(taskType);

    boolean present_allocationType = true && (isSetAllocationType());
    list.add(present_allocationType);
    if (present_allocationType)
      list.add(allocationType);

    boolean present_allocationRefId = true;
    list.add(present_allocationRefId);
    if (present_allocationRefId)
      list.add(allocationRefId);

    boolean present_workflowName = true && (isSetWorkflowName());
    list.add(present_workflowName);
    if (present_workflowName)
      list.add(workflowName);

    boolean present_taskName = true && (isSetTaskName());
    list.add(present_taskName);
    if (present_taskName)
      list.add(taskName);

    boolean present_allocationDttm = true && (isSetAllocationDttm());
    list.add(present_allocationDttm);
    if (present_allocationDttm)
      list.add(allocationDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_taskStatus = true;
    list.add(present_taskStatus);
    if (present_taskStatus)
      list.add(taskStatus);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_workflowProcessDefkey = true && (isSetWorkflowProcessDefkey());
    list.add(present_workflowProcessDefkey);
    if (present_workflowProcessDefkey)
      list.add(workflowProcessDefkey);

    boolean present_workflowInstanceId = true && (isSetWorkflowInstanceId());
    list.add(present_workflowInstanceId);
    if (present_workflowInstanceId)
      list.add(workflowInstanceId);

    boolean present_workflowTaskDefKey = true && (isSetWorkflowTaskDefKey());
    list.add(present_workflowTaskDefKey);
    if (present_workflowTaskDefKey)
      list.add(workflowTaskDefKey);

    boolean present_workflowTaskId = true && (isSetWorkflowTaskId());
    list.add(present_workflowTaskId);
    if (present_workflowTaskId)
      list.add(workflowTaskId);

    boolean present_nextRoleCode = true && (isSetNextRoleCode());
    list.add(present_nextRoleCode);
    if (present_nextRoleCode)
      list.add(nextRoleCode);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_allowTurnDown = true && (isSetAllowTurnDown());
    list.add(present_allowTurnDown);
    if (present_allowTurnDown)
      list.add(allowTurnDown);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_workfloPprojectName = true && (isSetWorkfloPprojectName());
    list.add(present_workfloPprojectName);
    if (present_workfloPprojectName)
      list.add(workfloPprojectName);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskUserName()).compareTo(other.isSetTaskUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskUserName, other.taskUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskUserRealName()).compareTo(other.isSetTaskUserRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskUserRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskUserRealName, other.taskUserRealName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllocationType()).compareTo(other.isSetAllocationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocationType, other.allocationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllocationRefId()).compareTo(other.isSetAllocationRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocationRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocationRefId, other.allocationRefId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowName()).compareTo(other.isSetWorkflowName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowName, other.workflowName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskName()).compareTo(other.isSetTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskName, other.taskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllocationDttm()).compareTo(other.isSetAllocationDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllocationDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocationDttm, other.allocationDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskStatus()).compareTo(other.isSetTaskStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskStatus, other.taskStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowProcessDefkey()).compareTo(other.isSetWorkflowProcessDefkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowProcessDefkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowProcessDefkey, other.workflowProcessDefkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowInstanceId()).compareTo(other.isSetWorkflowInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowInstanceId, other.workflowInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowTaskDefKey()).compareTo(other.isSetWorkflowTaskDefKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowTaskDefKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowTaskDefKey, other.workflowTaskDefKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowTaskId()).compareTo(other.isSetWorkflowTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowTaskId, other.workflowTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextRoleCode()).compareTo(other.isSetNextRoleCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextRoleCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextRoleCode, other.nextRoleCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowTurnDown()).compareTo(other.isSetAllowTurnDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowTurnDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowTurnDown, other.allowTurnDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkfloPprojectName()).compareTo(other.isSetWorkfloPprojectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkfloPprojectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workfloPprojectName, other.workfloPprojectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskVo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskUserName:");
    if (this.taskUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskUserRealName:");
    if (this.taskUserRealName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskUserRealName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskType:");
    sb.append(this.taskType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allocationType:");
    if (this.allocationType == null) {
      sb.append("null");
    } else {
      sb.append(this.allocationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allocationRefId:");
    sb.append(this.allocationRefId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowName:");
    if (this.workflowName == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskName:");
    if (this.taskName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allocationDttm:");
    if (this.allocationDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.allocationDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskStatus:");
    sb.append(this.taskStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowProcessDefkey:");
    if (this.workflowProcessDefkey == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowProcessDefkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowInstanceId:");
    if (this.workflowInstanceId == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowInstanceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowTaskDefKey:");
    if (this.workflowTaskDefKey == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowTaskDefKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowTaskId:");
    if (this.workflowTaskId == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowTaskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextRoleCode:");
    if (this.nextRoleCode == null) {
      sb.append("null");
    } else {
      sb.append(this.nextRoleCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowTurnDown:");
    if (this.allowTurnDown == null) {
      sb.append("null");
    } else {
      sb.append(this.allowTurnDown);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workfloPprojectName:");
    if (this.workfloPprojectName == null) {
      sb.append("null");
    } else {
      sb.append(this.workfloPprojectName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskVoStandardSchemeFactory implements SchemeFactory {
    public TaskVoStandardScheme getScheme() {
      return new TaskVoStandardScheme();
    }
  }

  private static class TaskVoStandardScheme extends StandardScheme<TaskVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskUserName = iprot.readString();
              struct.setTaskUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_USER_REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskUserRealName = iprot.readString();
              struct.setTaskUserRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskType = iprot.readI32();
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALLOCATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allocationType = iprot.readString();
              struct.setAllocationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALLOCATION_REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.allocationRefId = iprot.readI32();
              struct.setAllocationRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WORKFLOW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowName = iprot.readString();
              struct.setWorkflowNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskName = iprot.readString();
              struct.setTaskNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALLOCATION_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allocationDttm = iprot.readString();
              struct.setAllocationDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TASK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskStatus = iprot.readI32();
              struct.setTaskStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WORKFLOW_PROCESS_DEFKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowProcessDefkey = iprot.readString();
              struct.setWorkflowProcessDefkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WORKFLOW_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowInstanceId = iprot.readString();
              struct.setWorkflowInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORKFLOW_TASK_DEF_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowTaskDefKey = iprot.readString();
              struct.setWorkflowTaskDefKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // WORKFLOW_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowTaskId = iprot.readString();
              struct.setWorkflowTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NEXT_ROLE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextRoleCode = iprot.readString();
              struct.setNextRoleCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ALLOW_TURN_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allowTurnDown = iprot.readString();
              struct.setAllowTurnDownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // WORKFLO_PPROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workfloPprojectName = iprot.readString();
              struct.setWorkfloPprojectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.taskUserName != null) {
        oprot.writeFieldBegin(TASK_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.taskUserName);
        oprot.writeFieldEnd();
      }
      if (struct.taskUserRealName != null) {
        oprot.writeFieldBegin(TASK_USER_REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.taskUserRealName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
      oprot.writeI32(struct.taskType);
      oprot.writeFieldEnd();
      if (struct.allocationType != null) {
        oprot.writeFieldBegin(ALLOCATION_TYPE_FIELD_DESC);
        oprot.writeString(struct.allocationType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALLOCATION_REF_ID_FIELD_DESC);
      oprot.writeI32(struct.allocationRefId);
      oprot.writeFieldEnd();
      if (struct.workflowName != null) {
        oprot.writeFieldBegin(WORKFLOW_NAME_FIELD_DESC);
        oprot.writeString(struct.workflowName);
        oprot.writeFieldEnd();
      }
      if (struct.taskName != null) {
        oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
        oprot.writeString(struct.taskName);
        oprot.writeFieldEnd();
      }
      if (struct.allocationDttm != null) {
        oprot.writeFieldBegin(ALLOCATION_DTTM_FIELD_DESC);
        oprot.writeString(struct.allocationDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASK_STATUS_FIELD_DESC);
      oprot.writeI32(struct.taskStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.workflowProcessDefkey != null) {
        oprot.writeFieldBegin(WORKFLOW_PROCESS_DEFKEY_FIELD_DESC);
        oprot.writeString(struct.workflowProcessDefkey);
        oprot.writeFieldEnd();
      }
      if (struct.workflowInstanceId != null) {
        oprot.writeFieldBegin(WORKFLOW_INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.workflowInstanceId);
        oprot.writeFieldEnd();
      }
      if (struct.workflowTaskDefKey != null) {
        oprot.writeFieldBegin(WORKFLOW_TASK_DEF_KEY_FIELD_DESC);
        oprot.writeString(struct.workflowTaskDefKey);
        oprot.writeFieldEnd();
      }
      if (struct.workflowTaskId != null) {
        oprot.writeFieldBegin(WORKFLOW_TASK_ID_FIELD_DESC);
        oprot.writeString(struct.workflowTaskId);
        oprot.writeFieldEnd();
      }
      if (struct.nextRoleCode != null) {
        oprot.writeFieldBegin(NEXT_ROLE_CODE_FIELD_DESC);
        oprot.writeString(struct.nextRoleCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      if (struct.allowTurnDown != null) {
        oprot.writeFieldBegin(ALLOW_TURN_DOWN_FIELD_DESC);
        oprot.writeString(struct.allowTurnDown);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.workfloPprojectName != null) {
        oprot.writeFieldBegin(WORKFLO_PPROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.workfloPprojectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskVoTupleSchemeFactory implements SchemeFactory {
    public TaskVoTupleScheme getScheme() {
      return new TaskVoTupleScheme();
    }
  }

  private static class TaskVoTupleScheme extends TupleScheme<TaskVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetTaskUserName()) {
        optionals.set(1);
      }
      if (struct.isSetTaskUserRealName()) {
        optionals.set(2);
      }
      if (struct.isSetTaskType()) {
        optionals.set(3);
      }
      if (struct.isSetAllocationType()) {
        optionals.set(4);
      }
      if (struct.isSetAllocationRefId()) {
        optionals.set(5);
      }
      if (struct.isSetWorkflowName()) {
        optionals.set(6);
      }
      if (struct.isSetTaskName()) {
        optionals.set(7);
      }
      if (struct.isSetAllocationDttm()) {
        optionals.set(8);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(9);
      }
      if (struct.isSetTaskStatus()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetWorkflowProcessDefkey()) {
        optionals.set(12);
      }
      if (struct.isSetWorkflowInstanceId()) {
        optionals.set(13);
      }
      if (struct.isSetWorkflowTaskDefKey()) {
        optionals.set(14);
      }
      if (struct.isSetWorkflowTaskId()) {
        optionals.set(15);
      }
      if (struct.isSetNextRoleCode()) {
        optionals.set(16);
      }
      if (struct.isSetRefId()) {
        optionals.set(17);
      }
      if (struct.isSetAllowTurnDown()) {
        optionals.set(18);
      }
      if (struct.isSetPage()) {
        optionals.set(19);
      }
      if (struct.isSetRows()) {
        optionals.set(20);
      }
      if (struct.isSetProjectId()) {
        optionals.set(21);
      }
      if (struct.isSetWorkfloPprojectName()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetTaskUserName()) {
        oprot.writeString(struct.taskUserName);
      }
      if (struct.isSetTaskUserRealName()) {
        oprot.writeString(struct.taskUserRealName);
      }
      if (struct.isSetTaskType()) {
        oprot.writeI32(struct.taskType);
      }
      if (struct.isSetAllocationType()) {
        oprot.writeString(struct.allocationType);
      }
      if (struct.isSetAllocationRefId()) {
        oprot.writeI32(struct.allocationRefId);
      }
      if (struct.isSetWorkflowName()) {
        oprot.writeString(struct.workflowName);
      }
      if (struct.isSetTaskName()) {
        oprot.writeString(struct.taskName);
      }
      if (struct.isSetAllocationDttm()) {
        oprot.writeString(struct.allocationDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetTaskStatus()) {
        oprot.writeI32(struct.taskStatus);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetWorkflowProcessDefkey()) {
        oprot.writeString(struct.workflowProcessDefkey);
      }
      if (struct.isSetWorkflowInstanceId()) {
        oprot.writeString(struct.workflowInstanceId);
      }
      if (struct.isSetWorkflowTaskDefKey()) {
        oprot.writeString(struct.workflowTaskDefKey);
      }
      if (struct.isSetWorkflowTaskId()) {
        oprot.writeString(struct.workflowTaskId);
      }
      if (struct.isSetNextRoleCode()) {
        oprot.writeString(struct.nextRoleCode);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetAllowTurnDown()) {
        oprot.writeString(struct.allowTurnDown);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetWorkfloPprojectName()) {
        oprot.writeString(struct.workfloPprojectName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskUserName = iprot.readString();
        struct.setTaskUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.taskUserRealName = iprot.readString();
        struct.setTaskUserRealNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.taskType = iprot.readI32();
        struct.setTaskTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.allocationType = iprot.readString();
        struct.setAllocationTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.allocationRefId = iprot.readI32();
        struct.setAllocationRefIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.workflowName = iprot.readString();
        struct.setWorkflowNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.taskName = iprot.readString();
        struct.setTaskNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.allocationDttm = iprot.readString();
        struct.setAllocationDttmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(10)) {
        struct.taskStatus = iprot.readI32();
        struct.setTaskStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.workflowProcessDefkey = iprot.readString();
        struct.setWorkflowProcessDefkeyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.workflowInstanceId = iprot.readString();
        struct.setWorkflowInstanceIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.workflowTaskDefKey = iprot.readString();
        struct.setWorkflowTaskDefKeyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.workflowTaskId = iprot.readString();
        struct.setWorkflowTaskIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.nextRoleCode = iprot.readString();
        struct.setNextRoleCodeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.allowTurnDown = iprot.readString();
        struct.setAllowTurnDownIsSet(true);
      }
      if (incoming.get(19)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(20)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.workfloPprojectName = iprot.readString();
        struct.setWorkfloPprojectNameIsSet(true);
      }
    }
  }

}


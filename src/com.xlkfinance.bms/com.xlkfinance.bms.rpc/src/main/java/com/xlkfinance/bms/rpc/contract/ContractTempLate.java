/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class ContractTempLate implements org.apache.thrift.TBase<ContractTempLate, ContractTempLate._Fields>, java.io.Serializable, Cloneable, Comparable<ContractTempLate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractTempLate");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("templateCatelog", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("templateType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TEMPLATE_OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("templateOwner", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TEMPLATE_USE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("templateUseMode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TEMPLATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("templateName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TEMPLATE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("templateUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTRACT_NUMBER_FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNumberFun", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TEMPLATE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("templateDesc", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDttm", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UPLOAD_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadUserId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("templateTypeText", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField TEMPLATE_CATELOG_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("templateCatelogText", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TEMPLATE_PAR_FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("templateParFun", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField TEMPLATE_PAR_FUN_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("templateParFunText", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CONTRACT_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTypeCode", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COMBOBOX_TEMPLATE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("comboboxTemplateText", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField APPLY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("applyType", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField CYCLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cycleType", org.apache.thrift.protocol.TType.I32, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractTempLateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractTempLateTupleSchemeFactory());
  }

  public int pid; // required
  public int templateCatelog; // required
  public int templateType; // required
  public int templateOwner; // required
  public int templateUseMode; // required
  public String templateName; // required
  public String templateUrl; // required
  public String contractNumberFun; // required
  public String templateDesc; // required
  public String updateDttm; // required
  public int status; // required
  public int uploadUserId; // required
  public int page; // required
  public int rows; // required
  public int total; // required
  public String templateTypeText; // required
  public String templateCatelogText; // required
  public int templateParFun; // required
  public String templateParFunText; // required
  public String contractTypeCode; // required
  public String comboboxTemplateText; // required
  public int applyType; // required
  public int cycleType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    TEMPLATE_CATELOG((short)2, "templateCatelog"),
    TEMPLATE_TYPE((short)3, "templateType"),
    TEMPLATE_OWNER((short)4, "templateOwner"),
    TEMPLATE_USE_MODE((short)5, "templateUseMode"),
    TEMPLATE_NAME((short)6, "templateName"),
    TEMPLATE_URL((short)7, "templateUrl"),
    CONTRACT_NUMBER_FUN((short)8, "contractNumberFun"),
    TEMPLATE_DESC((short)9, "templateDesc"),
    UPDATE_DTTM((short)10, "updateDttm"),
    STATUS((short)11, "status"),
    UPLOAD_USER_ID((short)12, "uploadUserId"),
    PAGE((short)13, "page"),
    ROWS((short)14, "rows"),
    TOTAL((short)15, "total"),
    TEMPLATE_TYPE_TEXT((short)16, "templateTypeText"),
    TEMPLATE_CATELOG_TEXT((short)17, "templateCatelogText"),
    TEMPLATE_PAR_FUN((short)18, "templateParFun"),
    TEMPLATE_PAR_FUN_TEXT((short)19, "templateParFunText"),
    CONTRACT_TYPE_CODE((short)20, "contractTypeCode"),
    COMBOBOX_TEMPLATE_TEXT((short)21, "comboboxTemplateText"),
    APPLY_TYPE((short)22, "applyType"),
    CYCLE_TYPE((short)23, "cycleType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // TEMPLATE_CATELOG
          return TEMPLATE_CATELOG;
        case 3: // TEMPLATE_TYPE
          return TEMPLATE_TYPE;
        case 4: // TEMPLATE_OWNER
          return TEMPLATE_OWNER;
        case 5: // TEMPLATE_USE_MODE
          return TEMPLATE_USE_MODE;
        case 6: // TEMPLATE_NAME
          return TEMPLATE_NAME;
        case 7: // TEMPLATE_URL
          return TEMPLATE_URL;
        case 8: // CONTRACT_NUMBER_FUN
          return CONTRACT_NUMBER_FUN;
        case 9: // TEMPLATE_DESC
          return TEMPLATE_DESC;
        case 10: // UPDATE_DTTM
          return UPDATE_DTTM;
        case 11: // STATUS
          return STATUS;
        case 12: // UPLOAD_USER_ID
          return UPLOAD_USER_ID;
        case 13: // PAGE
          return PAGE;
        case 14: // ROWS
          return ROWS;
        case 15: // TOTAL
          return TOTAL;
        case 16: // TEMPLATE_TYPE_TEXT
          return TEMPLATE_TYPE_TEXT;
        case 17: // TEMPLATE_CATELOG_TEXT
          return TEMPLATE_CATELOG_TEXT;
        case 18: // TEMPLATE_PAR_FUN
          return TEMPLATE_PAR_FUN;
        case 19: // TEMPLATE_PAR_FUN_TEXT
          return TEMPLATE_PAR_FUN_TEXT;
        case 20: // CONTRACT_TYPE_CODE
          return CONTRACT_TYPE_CODE;
        case 21: // COMBOBOX_TEMPLATE_TEXT
          return COMBOBOX_TEMPLATE_TEXT;
        case 22: // APPLY_TYPE
          return APPLY_TYPE;
        case 23: // CYCLE_TYPE
          return CYCLE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __TEMPLATECATELOG_ISSET_ID = 1;
  private static final int __TEMPLATETYPE_ISSET_ID = 2;
  private static final int __TEMPLATEOWNER_ISSET_ID = 3;
  private static final int __TEMPLATEUSEMODE_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __UPLOADUSERID_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private static final int __TOTAL_ISSET_ID = 9;
  private static final int __TEMPLATEPARFUN_ISSET_ID = 10;
  private static final int __APPLYTYPE_ISSET_ID = 11;
  private static final int __CYCLETYPE_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("templateCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("templateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_OWNER, new org.apache.thrift.meta_data.FieldMetaData("templateOwner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_USE_MODE, new org.apache.thrift.meta_data.FieldMetaData("templateUseMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("templateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_URL, new org.apache.thrift.meta_data.FieldMetaData("templateUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NUMBER_FUN, new org.apache.thrift.meta_data.FieldMetaData("contractNumberFun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_DESC, new org.apache.thrift.meta_data.FieldMetaData("templateDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("updateDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPLOAD_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("uploadUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("templateTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_CATELOG_TEXT, new org.apache.thrift.meta_data.FieldMetaData("templateCatelogText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_PAR_FUN, new org.apache.thrift.meta_data.FieldMetaData("templateParFun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_PAR_FUN_TEXT, new org.apache.thrift.meta_data.FieldMetaData("templateParFunText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("contractTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMBOBOX_TEMPLATE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("comboboxTemplateText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("applyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CYCLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cycleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractTempLate.class, metaDataMap);
  }

  public ContractTempLate() {
  }

  public ContractTempLate(
    int pid,
    int templateCatelog,
    int templateType,
    int templateOwner,
    int templateUseMode,
    String templateName,
    String templateUrl,
    String contractNumberFun,
    String templateDesc,
    String updateDttm,
    int status,
    int uploadUserId,
    int page,
    int rows,
    int total,
    String templateTypeText,
    String templateCatelogText,
    int templateParFun,
    String templateParFunText,
    String contractTypeCode,
    String comboboxTemplateText,
    int applyType,
    int cycleType)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.templateCatelog = templateCatelog;
    setTemplateCatelogIsSet(true);
    this.templateType = templateType;
    setTemplateTypeIsSet(true);
    this.templateOwner = templateOwner;
    setTemplateOwnerIsSet(true);
    this.templateUseMode = templateUseMode;
    setTemplateUseModeIsSet(true);
    this.templateName = templateName;
    this.templateUrl = templateUrl;
    this.contractNumberFun = contractNumberFun;
    this.templateDesc = templateDesc;
    this.updateDttm = updateDttm;
    this.status = status;
    setStatusIsSet(true);
    this.uploadUserId = uploadUserId;
    setUploadUserIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.templateTypeText = templateTypeText;
    this.templateCatelogText = templateCatelogText;
    this.templateParFun = templateParFun;
    setTemplateParFunIsSet(true);
    this.templateParFunText = templateParFunText;
    this.contractTypeCode = contractTypeCode;
    this.comboboxTemplateText = comboboxTemplateText;
    this.applyType = applyType;
    setApplyTypeIsSet(true);
    this.cycleType = cycleType;
    setCycleTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractTempLate(ContractTempLate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.templateCatelog = other.templateCatelog;
    this.templateType = other.templateType;
    this.templateOwner = other.templateOwner;
    this.templateUseMode = other.templateUseMode;
    if (other.isSetTemplateName()) {
      this.templateName = other.templateName;
    }
    if (other.isSetTemplateUrl()) {
      this.templateUrl = other.templateUrl;
    }
    if (other.isSetContractNumberFun()) {
      this.contractNumberFun = other.contractNumberFun;
    }
    if (other.isSetTemplateDesc()) {
      this.templateDesc = other.templateDesc;
    }
    if (other.isSetUpdateDttm()) {
      this.updateDttm = other.updateDttm;
    }
    this.status = other.status;
    this.uploadUserId = other.uploadUserId;
    this.page = other.page;
    this.rows = other.rows;
    this.total = other.total;
    if (other.isSetTemplateTypeText()) {
      this.templateTypeText = other.templateTypeText;
    }
    if (other.isSetTemplateCatelogText()) {
      this.templateCatelogText = other.templateCatelogText;
    }
    this.templateParFun = other.templateParFun;
    if (other.isSetTemplateParFunText()) {
      this.templateParFunText = other.templateParFunText;
    }
    if (other.isSetContractTypeCode()) {
      this.contractTypeCode = other.contractTypeCode;
    }
    if (other.isSetComboboxTemplateText()) {
      this.comboboxTemplateText = other.comboboxTemplateText;
    }
    this.applyType = other.applyType;
    this.cycleType = other.cycleType;
  }

  public ContractTempLate deepCopy() {
    return new ContractTempLate(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setTemplateCatelogIsSet(false);
    this.templateCatelog = 0;
    setTemplateTypeIsSet(false);
    this.templateType = 0;
    setTemplateOwnerIsSet(false);
    this.templateOwner = 0;
    setTemplateUseModeIsSet(false);
    this.templateUseMode = 0;
    this.templateName = null;
    this.templateUrl = null;
    this.contractNumberFun = null;
    this.templateDesc = null;
    this.updateDttm = null;
    setStatusIsSet(false);
    this.status = 0;
    setUploadUserIdIsSet(false);
    this.uploadUserId = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setTotalIsSet(false);
    this.total = 0;
    this.templateTypeText = null;
    this.templateCatelogText = null;
    setTemplateParFunIsSet(false);
    this.templateParFun = 0;
    this.templateParFunText = null;
    this.contractTypeCode = null;
    this.comboboxTemplateText = null;
    setApplyTypeIsSet(false);
    this.applyType = 0;
    setCycleTypeIsSet(false);
    this.cycleType = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ContractTempLate setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getTemplateCatelog() {
    return this.templateCatelog;
  }

  public ContractTempLate setTemplateCatelog(int templateCatelog) {
    this.templateCatelog = templateCatelog;
    setTemplateCatelogIsSet(true);
    return this;
  }

  public void unsetTemplateCatelog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATECATELOG_ISSET_ID);
  }

  /** Returns true if field templateCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateCatelog() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATECATELOG_ISSET_ID);
  }

  public void setTemplateCatelogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATECATELOG_ISSET_ID, value);
  }

  public int getTemplateType() {
    return this.templateType;
  }

  public ContractTempLate setTemplateType(int templateType) {
    this.templateType = templateType;
    setTemplateTypeIsSet(true);
    return this;
  }

  public void unsetTemplateType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATETYPE_ISSET_ID);
  }

  /** Returns true if field templateType is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateType() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATETYPE_ISSET_ID);
  }

  public void setTemplateTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATETYPE_ISSET_ID, value);
  }

  public int getTemplateOwner() {
    return this.templateOwner;
  }

  public ContractTempLate setTemplateOwner(int templateOwner) {
    this.templateOwner = templateOwner;
    setTemplateOwnerIsSet(true);
    return this;
  }

  public void unsetTemplateOwner() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEOWNER_ISSET_ID);
  }

  /** Returns true if field templateOwner is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateOwner() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEOWNER_ISSET_ID);
  }

  public void setTemplateOwnerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEOWNER_ISSET_ID, value);
  }

  public int getTemplateUseMode() {
    return this.templateUseMode;
  }

  public ContractTempLate setTemplateUseMode(int templateUseMode) {
    this.templateUseMode = templateUseMode;
    setTemplateUseModeIsSet(true);
    return this;
  }

  public void unsetTemplateUseMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEUSEMODE_ISSET_ID);
  }

  /** Returns true if field templateUseMode is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateUseMode() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEUSEMODE_ISSET_ID);
  }

  public void setTemplateUseModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEUSEMODE_ISSET_ID, value);
  }

  public String getTemplateName() {
    return this.templateName;
  }

  public ContractTempLate setTemplateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  public void unsetTemplateName() {
    this.templateName = null;
  }

  /** Returns true if field templateName is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateName() {
    return this.templateName != null;
  }

  public void setTemplateNameIsSet(boolean value) {
    if (!value) {
      this.templateName = null;
    }
  }

  public String getTemplateUrl() {
    return this.templateUrl;
  }

  public ContractTempLate setTemplateUrl(String templateUrl) {
    this.templateUrl = templateUrl;
    return this;
  }

  public void unsetTemplateUrl() {
    this.templateUrl = null;
  }

  /** Returns true if field templateUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateUrl() {
    return this.templateUrl != null;
  }

  public void setTemplateUrlIsSet(boolean value) {
    if (!value) {
      this.templateUrl = null;
    }
  }

  public String getContractNumberFun() {
    return this.contractNumberFun;
  }

  public ContractTempLate setContractNumberFun(String contractNumberFun) {
    this.contractNumberFun = contractNumberFun;
    return this;
  }

  public void unsetContractNumberFun() {
    this.contractNumberFun = null;
  }

  /** Returns true if field contractNumberFun is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNumberFun() {
    return this.contractNumberFun != null;
  }

  public void setContractNumberFunIsSet(boolean value) {
    if (!value) {
      this.contractNumberFun = null;
    }
  }

  public String getTemplateDesc() {
    return this.templateDesc;
  }

  public ContractTempLate setTemplateDesc(String templateDesc) {
    this.templateDesc = templateDesc;
    return this;
  }

  public void unsetTemplateDesc() {
    this.templateDesc = null;
  }

  /** Returns true if field templateDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateDesc() {
    return this.templateDesc != null;
  }

  public void setTemplateDescIsSet(boolean value) {
    if (!value) {
      this.templateDesc = null;
    }
  }

  public String getUpdateDttm() {
    return this.updateDttm;
  }

  public ContractTempLate setUpdateDttm(String updateDttm) {
    this.updateDttm = updateDttm;
    return this;
  }

  public void unsetUpdateDttm() {
    this.updateDttm = null;
  }

  /** Returns true if field updateDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDttm() {
    return this.updateDttm != null;
  }

  public void setUpdateDttmIsSet(boolean value) {
    if (!value) {
      this.updateDttm = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ContractTempLate setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getUploadUserId() {
    return this.uploadUserId;
  }

  public ContractTempLate setUploadUserId(int uploadUserId) {
    this.uploadUserId = uploadUserId;
    setUploadUserIdIsSet(true);
    return this;
  }

  public void unsetUploadUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADUSERID_ISSET_ID);
  }

  /** Returns true if field uploadUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADUSERID_ISSET_ID);
  }

  public void setUploadUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADUSERID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public ContractTempLate setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ContractTempLate setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public ContractTempLate setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public String getTemplateTypeText() {
    return this.templateTypeText;
  }

  public ContractTempLate setTemplateTypeText(String templateTypeText) {
    this.templateTypeText = templateTypeText;
    return this;
  }

  public void unsetTemplateTypeText() {
    this.templateTypeText = null;
  }

  /** Returns true if field templateTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateTypeText() {
    return this.templateTypeText != null;
  }

  public void setTemplateTypeTextIsSet(boolean value) {
    if (!value) {
      this.templateTypeText = null;
    }
  }

  public String getTemplateCatelogText() {
    return this.templateCatelogText;
  }

  public ContractTempLate setTemplateCatelogText(String templateCatelogText) {
    this.templateCatelogText = templateCatelogText;
    return this;
  }

  public void unsetTemplateCatelogText() {
    this.templateCatelogText = null;
  }

  /** Returns true if field templateCatelogText is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateCatelogText() {
    return this.templateCatelogText != null;
  }

  public void setTemplateCatelogTextIsSet(boolean value) {
    if (!value) {
      this.templateCatelogText = null;
    }
  }

  public int getTemplateParFun() {
    return this.templateParFun;
  }

  public ContractTempLate setTemplateParFun(int templateParFun) {
    this.templateParFun = templateParFun;
    setTemplateParFunIsSet(true);
    return this;
  }

  public void unsetTemplateParFun() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEPARFUN_ISSET_ID);
  }

  /** Returns true if field templateParFun is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateParFun() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEPARFUN_ISSET_ID);
  }

  public void setTemplateParFunIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEPARFUN_ISSET_ID, value);
  }

  public String getTemplateParFunText() {
    return this.templateParFunText;
  }

  public ContractTempLate setTemplateParFunText(String templateParFunText) {
    this.templateParFunText = templateParFunText;
    return this;
  }

  public void unsetTemplateParFunText() {
    this.templateParFunText = null;
  }

  /** Returns true if field templateParFunText is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateParFunText() {
    return this.templateParFunText != null;
  }

  public void setTemplateParFunTextIsSet(boolean value) {
    if (!value) {
      this.templateParFunText = null;
    }
  }

  public String getContractTypeCode() {
    return this.contractTypeCode;
  }

  public ContractTempLate setContractTypeCode(String contractTypeCode) {
    this.contractTypeCode = contractTypeCode;
    return this;
  }

  public void unsetContractTypeCode() {
    this.contractTypeCode = null;
  }

  /** Returns true if field contractTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTypeCode() {
    return this.contractTypeCode != null;
  }

  public void setContractTypeCodeIsSet(boolean value) {
    if (!value) {
      this.contractTypeCode = null;
    }
  }

  public String getComboboxTemplateText() {
    return this.comboboxTemplateText;
  }

  public ContractTempLate setComboboxTemplateText(String comboboxTemplateText) {
    this.comboboxTemplateText = comboboxTemplateText;
    return this;
  }

  public void unsetComboboxTemplateText() {
    this.comboboxTemplateText = null;
  }

  /** Returns true if field comboboxTemplateText is set (has been assigned a value) and false otherwise */
  public boolean isSetComboboxTemplateText() {
    return this.comboboxTemplateText != null;
  }

  public void setComboboxTemplateTextIsSet(boolean value) {
    if (!value) {
      this.comboboxTemplateText = null;
    }
  }

  public int getApplyType() {
    return this.applyType;
  }

  public ContractTempLate setApplyType(int applyType) {
    this.applyType = applyType;
    setApplyTypeIsSet(true);
    return this;
  }

  public void unsetApplyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYTYPE_ISSET_ID);
  }

  /** Returns true if field applyType is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyType() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYTYPE_ISSET_ID);
  }

  public void setApplyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYTYPE_ISSET_ID, value);
  }

  public int getCycleType() {
    return this.cycleType;
  }

  public ContractTempLate setCycleType(int cycleType) {
    this.cycleType = cycleType;
    setCycleTypeIsSet(true);
    return this;
  }

  public void unsetCycleType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CYCLETYPE_ISSET_ID);
  }

  /** Returns true if field cycleType is set (has been assigned a value) and false otherwise */
  public boolean isSetCycleType() {
    return EncodingUtils.testBit(__isset_bitfield, __CYCLETYPE_ISSET_ID);
  }

  public void setCycleTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CYCLETYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case TEMPLATE_CATELOG:
      if (value == null) {
        unsetTemplateCatelog();
      } else {
        setTemplateCatelog((Integer)value);
      }
      break;

    case TEMPLATE_TYPE:
      if (value == null) {
        unsetTemplateType();
      } else {
        setTemplateType((Integer)value);
      }
      break;

    case TEMPLATE_OWNER:
      if (value == null) {
        unsetTemplateOwner();
      } else {
        setTemplateOwner((Integer)value);
      }
      break;

    case TEMPLATE_USE_MODE:
      if (value == null) {
        unsetTemplateUseMode();
      } else {
        setTemplateUseMode((Integer)value);
      }
      break;

    case TEMPLATE_NAME:
      if (value == null) {
        unsetTemplateName();
      } else {
        setTemplateName((String)value);
      }
      break;

    case TEMPLATE_URL:
      if (value == null) {
        unsetTemplateUrl();
      } else {
        setTemplateUrl((String)value);
      }
      break;

    case CONTRACT_NUMBER_FUN:
      if (value == null) {
        unsetContractNumberFun();
      } else {
        setContractNumberFun((String)value);
      }
      break;

    case TEMPLATE_DESC:
      if (value == null) {
        unsetTemplateDesc();
      } else {
        setTemplateDesc((String)value);
      }
      break;

    case UPDATE_DTTM:
      if (value == null) {
        unsetUpdateDttm();
      } else {
        setUpdateDttm((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case UPLOAD_USER_ID:
      if (value == null) {
        unsetUploadUserId();
      } else {
        setUploadUserId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case TEMPLATE_TYPE_TEXT:
      if (value == null) {
        unsetTemplateTypeText();
      } else {
        setTemplateTypeText((String)value);
      }
      break;

    case TEMPLATE_CATELOG_TEXT:
      if (value == null) {
        unsetTemplateCatelogText();
      } else {
        setTemplateCatelogText((String)value);
      }
      break;

    case TEMPLATE_PAR_FUN:
      if (value == null) {
        unsetTemplateParFun();
      } else {
        setTemplateParFun((Integer)value);
      }
      break;

    case TEMPLATE_PAR_FUN_TEXT:
      if (value == null) {
        unsetTemplateParFunText();
      } else {
        setTemplateParFunText((String)value);
      }
      break;

    case CONTRACT_TYPE_CODE:
      if (value == null) {
        unsetContractTypeCode();
      } else {
        setContractTypeCode((String)value);
      }
      break;

    case COMBOBOX_TEMPLATE_TEXT:
      if (value == null) {
        unsetComboboxTemplateText();
      } else {
        setComboboxTemplateText((String)value);
      }
      break;

    case APPLY_TYPE:
      if (value == null) {
        unsetApplyType();
      } else {
        setApplyType((Integer)value);
      }
      break;

    case CYCLE_TYPE:
      if (value == null) {
        unsetCycleType();
      } else {
        setCycleType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case TEMPLATE_CATELOG:
      return Integer.valueOf(getTemplateCatelog());

    case TEMPLATE_TYPE:
      return Integer.valueOf(getTemplateType());

    case TEMPLATE_OWNER:
      return Integer.valueOf(getTemplateOwner());

    case TEMPLATE_USE_MODE:
      return Integer.valueOf(getTemplateUseMode());

    case TEMPLATE_NAME:
      return getTemplateName();

    case TEMPLATE_URL:
      return getTemplateUrl();

    case CONTRACT_NUMBER_FUN:
      return getContractNumberFun();

    case TEMPLATE_DESC:
      return getTemplateDesc();

    case UPDATE_DTTM:
      return getUpdateDttm();

    case STATUS:
      return Integer.valueOf(getStatus());

    case UPLOAD_USER_ID:
      return Integer.valueOf(getUploadUserId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case TOTAL:
      return Integer.valueOf(getTotal());

    case TEMPLATE_TYPE_TEXT:
      return getTemplateTypeText();

    case TEMPLATE_CATELOG_TEXT:
      return getTemplateCatelogText();

    case TEMPLATE_PAR_FUN:
      return Integer.valueOf(getTemplateParFun());

    case TEMPLATE_PAR_FUN_TEXT:
      return getTemplateParFunText();

    case CONTRACT_TYPE_CODE:
      return getContractTypeCode();

    case COMBOBOX_TEMPLATE_TEXT:
      return getComboboxTemplateText();

    case APPLY_TYPE:
      return Integer.valueOf(getApplyType());

    case CYCLE_TYPE:
      return Integer.valueOf(getCycleType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case TEMPLATE_CATELOG:
      return isSetTemplateCatelog();
    case TEMPLATE_TYPE:
      return isSetTemplateType();
    case TEMPLATE_OWNER:
      return isSetTemplateOwner();
    case TEMPLATE_USE_MODE:
      return isSetTemplateUseMode();
    case TEMPLATE_NAME:
      return isSetTemplateName();
    case TEMPLATE_URL:
      return isSetTemplateUrl();
    case CONTRACT_NUMBER_FUN:
      return isSetContractNumberFun();
    case TEMPLATE_DESC:
      return isSetTemplateDesc();
    case UPDATE_DTTM:
      return isSetUpdateDttm();
    case STATUS:
      return isSetStatus();
    case UPLOAD_USER_ID:
      return isSetUploadUserId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case TOTAL:
      return isSetTotal();
    case TEMPLATE_TYPE_TEXT:
      return isSetTemplateTypeText();
    case TEMPLATE_CATELOG_TEXT:
      return isSetTemplateCatelogText();
    case TEMPLATE_PAR_FUN:
      return isSetTemplateParFun();
    case TEMPLATE_PAR_FUN_TEXT:
      return isSetTemplateParFunText();
    case CONTRACT_TYPE_CODE:
      return isSetContractTypeCode();
    case COMBOBOX_TEMPLATE_TEXT:
      return isSetComboboxTemplateText();
    case APPLY_TYPE:
      return isSetApplyType();
    case CYCLE_TYPE:
      return isSetCycleType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractTempLate)
      return this.equals((ContractTempLate)that);
    return false;
  }

  public boolean equals(ContractTempLate that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_templateCatelog = true;
    boolean that_present_templateCatelog = true;
    if (this_present_templateCatelog || that_present_templateCatelog) {
      if (!(this_present_templateCatelog && that_present_templateCatelog))
        return false;
      if (this.templateCatelog != that.templateCatelog)
        return false;
    }

    boolean this_present_templateType = true;
    boolean that_present_templateType = true;
    if (this_present_templateType || that_present_templateType) {
      if (!(this_present_templateType && that_present_templateType))
        return false;
      if (this.templateType != that.templateType)
        return false;
    }

    boolean this_present_templateOwner = true;
    boolean that_present_templateOwner = true;
    if (this_present_templateOwner || that_present_templateOwner) {
      if (!(this_present_templateOwner && that_present_templateOwner))
        return false;
      if (this.templateOwner != that.templateOwner)
        return false;
    }

    boolean this_present_templateUseMode = true;
    boolean that_present_templateUseMode = true;
    if (this_present_templateUseMode || that_present_templateUseMode) {
      if (!(this_present_templateUseMode && that_present_templateUseMode))
        return false;
      if (this.templateUseMode != that.templateUseMode)
        return false;
    }

    boolean this_present_templateName = true && this.isSetTemplateName();
    boolean that_present_templateName = true && that.isSetTemplateName();
    if (this_present_templateName || that_present_templateName) {
      if (!(this_present_templateName && that_present_templateName))
        return false;
      if (!this.templateName.equals(that.templateName))
        return false;
    }

    boolean this_present_templateUrl = true && this.isSetTemplateUrl();
    boolean that_present_templateUrl = true && that.isSetTemplateUrl();
    if (this_present_templateUrl || that_present_templateUrl) {
      if (!(this_present_templateUrl && that_present_templateUrl))
        return false;
      if (!this.templateUrl.equals(that.templateUrl))
        return false;
    }

    boolean this_present_contractNumberFun = true && this.isSetContractNumberFun();
    boolean that_present_contractNumberFun = true && that.isSetContractNumberFun();
    if (this_present_contractNumberFun || that_present_contractNumberFun) {
      if (!(this_present_contractNumberFun && that_present_contractNumberFun))
        return false;
      if (!this.contractNumberFun.equals(that.contractNumberFun))
        return false;
    }

    boolean this_present_templateDesc = true && this.isSetTemplateDesc();
    boolean that_present_templateDesc = true && that.isSetTemplateDesc();
    if (this_present_templateDesc || that_present_templateDesc) {
      if (!(this_present_templateDesc && that_present_templateDesc))
        return false;
      if (!this.templateDesc.equals(that.templateDesc))
        return false;
    }

    boolean this_present_updateDttm = true && this.isSetUpdateDttm();
    boolean that_present_updateDttm = true && that.isSetUpdateDttm();
    if (this_present_updateDttm || that_present_updateDttm) {
      if (!(this_present_updateDttm && that_present_updateDttm))
        return false;
      if (!this.updateDttm.equals(that.updateDttm))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_uploadUserId = true;
    boolean that_present_uploadUserId = true;
    if (this_present_uploadUserId || that_present_uploadUserId) {
      if (!(this_present_uploadUserId && that_present_uploadUserId))
        return false;
      if (this.uploadUserId != that.uploadUserId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_templateTypeText = true && this.isSetTemplateTypeText();
    boolean that_present_templateTypeText = true && that.isSetTemplateTypeText();
    if (this_present_templateTypeText || that_present_templateTypeText) {
      if (!(this_present_templateTypeText && that_present_templateTypeText))
        return false;
      if (!this.templateTypeText.equals(that.templateTypeText))
        return false;
    }

    boolean this_present_templateCatelogText = true && this.isSetTemplateCatelogText();
    boolean that_present_templateCatelogText = true && that.isSetTemplateCatelogText();
    if (this_present_templateCatelogText || that_present_templateCatelogText) {
      if (!(this_present_templateCatelogText && that_present_templateCatelogText))
        return false;
      if (!this.templateCatelogText.equals(that.templateCatelogText))
        return false;
    }

    boolean this_present_templateParFun = true;
    boolean that_present_templateParFun = true;
    if (this_present_templateParFun || that_present_templateParFun) {
      if (!(this_present_templateParFun && that_present_templateParFun))
        return false;
      if (this.templateParFun != that.templateParFun)
        return false;
    }

    boolean this_present_templateParFunText = true && this.isSetTemplateParFunText();
    boolean that_present_templateParFunText = true && that.isSetTemplateParFunText();
    if (this_present_templateParFunText || that_present_templateParFunText) {
      if (!(this_present_templateParFunText && that_present_templateParFunText))
        return false;
      if (!this.templateParFunText.equals(that.templateParFunText))
        return false;
    }

    boolean this_present_contractTypeCode = true && this.isSetContractTypeCode();
    boolean that_present_contractTypeCode = true && that.isSetContractTypeCode();
    if (this_present_contractTypeCode || that_present_contractTypeCode) {
      if (!(this_present_contractTypeCode && that_present_contractTypeCode))
        return false;
      if (!this.contractTypeCode.equals(that.contractTypeCode))
        return false;
    }

    boolean this_present_comboboxTemplateText = true && this.isSetComboboxTemplateText();
    boolean that_present_comboboxTemplateText = true && that.isSetComboboxTemplateText();
    if (this_present_comboboxTemplateText || that_present_comboboxTemplateText) {
      if (!(this_present_comboboxTemplateText && that_present_comboboxTemplateText))
        return false;
      if (!this.comboboxTemplateText.equals(that.comboboxTemplateText))
        return false;
    }

    boolean this_present_applyType = true;
    boolean that_present_applyType = true;
    if (this_present_applyType || that_present_applyType) {
      if (!(this_present_applyType && that_present_applyType))
        return false;
      if (this.applyType != that.applyType)
        return false;
    }

    boolean this_present_cycleType = true;
    boolean that_present_cycleType = true;
    if (this_present_cycleType || that_present_cycleType) {
      if (!(this_present_cycleType && that_present_cycleType))
        return false;
      if (this.cycleType != that.cycleType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_templateCatelog = true;
    list.add(present_templateCatelog);
    if (present_templateCatelog)
      list.add(templateCatelog);

    boolean present_templateType = true;
    list.add(present_templateType);
    if (present_templateType)
      list.add(templateType);

    boolean present_templateOwner = true;
    list.add(present_templateOwner);
    if (present_templateOwner)
      list.add(templateOwner);

    boolean present_templateUseMode = true;
    list.add(present_templateUseMode);
    if (present_templateUseMode)
      list.add(templateUseMode);

    boolean present_templateName = true && (isSetTemplateName());
    list.add(present_templateName);
    if (present_templateName)
      list.add(templateName);

    boolean present_templateUrl = true && (isSetTemplateUrl());
    list.add(present_templateUrl);
    if (present_templateUrl)
      list.add(templateUrl);

    boolean present_contractNumberFun = true && (isSetContractNumberFun());
    list.add(present_contractNumberFun);
    if (present_contractNumberFun)
      list.add(contractNumberFun);

    boolean present_templateDesc = true && (isSetTemplateDesc());
    list.add(present_templateDesc);
    if (present_templateDesc)
      list.add(templateDesc);

    boolean present_updateDttm = true && (isSetUpdateDttm());
    list.add(present_updateDttm);
    if (present_updateDttm)
      list.add(updateDttm);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_uploadUserId = true;
    list.add(present_uploadUserId);
    if (present_uploadUserId)
      list.add(uploadUserId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_templateTypeText = true && (isSetTemplateTypeText());
    list.add(present_templateTypeText);
    if (present_templateTypeText)
      list.add(templateTypeText);

    boolean present_templateCatelogText = true && (isSetTemplateCatelogText());
    list.add(present_templateCatelogText);
    if (present_templateCatelogText)
      list.add(templateCatelogText);

    boolean present_templateParFun = true;
    list.add(present_templateParFun);
    if (present_templateParFun)
      list.add(templateParFun);

    boolean present_templateParFunText = true && (isSetTemplateParFunText());
    list.add(present_templateParFunText);
    if (present_templateParFunText)
      list.add(templateParFunText);

    boolean present_contractTypeCode = true && (isSetContractTypeCode());
    list.add(present_contractTypeCode);
    if (present_contractTypeCode)
      list.add(contractTypeCode);

    boolean present_comboboxTemplateText = true && (isSetComboboxTemplateText());
    list.add(present_comboboxTemplateText);
    if (present_comboboxTemplateText)
      list.add(comboboxTemplateText);

    boolean present_applyType = true;
    list.add(present_applyType);
    if (present_applyType)
      list.add(applyType);

    boolean present_cycleType = true;
    list.add(present_cycleType);
    if (present_cycleType)
      list.add(cycleType);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContractTempLate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateCatelog()).compareTo(other.isSetTemplateCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateCatelog, other.templateCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateType()).compareTo(other.isSetTemplateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateType, other.templateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateOwner()).compareTo(other.isSetTemplateOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateOwner, other.templateOwner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateUseMode()).compareTo(other.isSetTemplateUseMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateUseMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateUseMode, other.templateUseMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateName()).compareTo(other.isSetTemplateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateName, other.templateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateUrl()).compareTo(other.isSetTemplateUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateUrl, other.templateUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNumberFun()).compareTo(other.isSetContractNumberFun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNumberFun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNumberFun, other.contractNumberFun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateDesc()).compareTo(other.isSetTemplateDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateDesc, other.templateDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDttm()).compareTo(other.isSetUpdateDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDttm, other.updateDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadUserId()).compareTo(other.isSetUploadUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadUserId, other.uploadUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateTypeText()).compareTo(other.isSetTemplateTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateTypeText, other.templateTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateCatelogText()).compareTo(other.isSetTemplateCatelogText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateCatelogText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateCatelogText, other.templateCatelogText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateParFun()).compareTo(other.isSetTemplateParFun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateParFun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateParFun, other.templateParFun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateParFunText()).compareTo(other.isSetTemplateParFunText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateParFunText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateParFunText, other.templateParFunText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTypeCode()).compareTo(other.isSetContractTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTypeCode, other.contractTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComboboxTemplateText()).compareTo(other.isSetComboboxTemplateText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComboboxTemplateText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comboboxTemplateText, other.comboboxTemplateText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyType()).compareTo(other.isSetApplyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyType, other.applyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycleType()).compareTo(other.isSetCycleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycleType, other.cycleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractTempLate(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateCatelog:");
    sb.append(this.templateCatelog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateType:");
    sb.append(this.templateType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateOwner:");
    sb.append(this.templateOwner);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateUseMode:");
    sb.append(this.templateUseMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateName:");
    if (this.templateName == null) {
      sb.append("null");
    } else {
      sb.append(this.templateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateUrl:");
    if (this.templateUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.templateUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNumberFun:");
    if (this.contractNumberFun == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNumberFun);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateDesc:");
    if (this.templateDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.templateDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDttm:");
    if (this.updateDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadUserId:");
    sb.append(this.uploadUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateTypeText:");
    if (this.templateTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.templateTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateCatelogText:");
    if (this.templateCatelogText == null) {
      sb.append("null");
    } else {
      sb.append(this.templateCatelogText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateParFun:");
    sb.append(this.templateParFun);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateParFunText:");
    if (this.templateParFunText == null) {
      sb.append("null");
    } else {
      sb.append(this.templateParFunText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractTypeCode:");
    if (this.contractTypeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.contractTypeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comboboxTemplateText:");
    if (this.comboboxTemplateText == null) {
      sb.append("null");
    } else {
      sb.append(this.comboboxTemplateText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyType:");
    sb.append(this.applyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycleType:");
    sb.append(this.cycleType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractTempLateStandardSchemeFactory implements SchemeFactory {
    public ContractTempLateStandardScheme getScheme() {
      return new ContractTempLateStandardScheme();
    }
  }

  private static class ContractTempLateStandardScheme extends StandardScheme<ContractTempLate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractTempLate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateCatelog = iprot.readI32();
              struct.setTemplateCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMPLATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateType = iprot.readI32();
              struct.setTemplateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEMPLATE_OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateOwner = iprot.readI32();
              struct.setTemplateOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEMPLATE_USE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateUseMode = iprot.readI32();
              struct.setTemplateUseModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEMPLATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateName = iprot.readString();
              struct.setTemplateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEMPLATE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateUrl = iprot.readString();
              struct.setTemplateUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTRACT_NUMBER_FUN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNumberFun = iprot.readString();
              struct.setContractNumberFunIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEMPLATE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateDesc = iprot.readString();
              struct.setTemplateDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDttm = iprot.readString();
              struct.setUpdateDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPLOAD_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uploadUserId = iprot.readI32();
              struct.setUploadUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TEMPLATE_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateTypeText = iprot.readString();
              struct.setTemplateTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TEMPLATE_CATELOG_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateCatelogText = iprot.readString();
              struct.setTemplateCatelogTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TEMPLATE_PAR_FUN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateParFun = iprot.readI32();
              struct.setTemplateParFunIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TEMPLATE_PAR_FUN_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateParFunText = iprot.readString();
              struct.setTemplateParFunTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CONTRACT_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractTypeCode = iprot.readString();
              struct.setContractTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COMBOBOX_TEMPLATE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comboboxTemplateText = iprot.readString();
              struct.setComboboxTemplateTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // APPLY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyType = iprot.readI32();
              struct.setApplyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CYCLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cycleType = iprot.readI32();
              struct.setCycleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractTempLate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPLATE_CATELOG_FIELD_DESC);
      oprot.writeI32(struct.templateCatelog);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPLATE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.templateType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPLATE_OWNER_FIELD_DESC);
      oprot.writeI32(struct.templateOwner);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPLATE_USE_MODE_FIELD_DESC);
      oprot.writeI32(struct.templateUseMode);
      oprot.writeFieldEnd();
      if (struct.templateName != null) {
        oprot.writeFieldBegin(TEMPLATE_NAME_FIELD_DESC);
        oprot.writeString(struct.templateName);
        oprot.writeFieldEnd();
      }
      if (struct.templateUrl != null) {
        oprot.writeFieldBegin(TEMPLATE_URL_FIELD_DESC);
        oprot.writeString(struct.templateUrl);
        oprot.writeFieldEnd();
      }
      if (struct.contractNumberFun != null) {
        oprot.writeFieldBegin(CONTRACT_NUMBER_FUN_FIELD_DESC);
        oprot.writeString(struct.contractNumberFun);
        oprot.writeFieldEnd();
      }
      if (struct.templateDesc != null) {
        oprot.writeFieldBegin(TEMPLATE_DESC_FIELD_DESC);
        oprot.writeString(struct.templateDesc);
        oprot.writeFieldEnd();
      }
      if (struct.updateDttm != null) {
        oprot.writeFieldBegin(UPDATE_DTTM_FIELD_DESC);
        oprot.writeString(struct.updateDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPLOAD_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.uploadUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      if (struct.templateTypeText != null) {
        oprot.writeFieldBegin(TEMPLATE_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.templateTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.templateCatelogText != null) {
        oprot.writeFieldBegin(TEMPLATE_CATELOG_TEXT_FIELD_DESC);
        oprot.writeString(struct.templateCatelogText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEMPLATE_PAR_FUN_FIELD_DESC);
      oprot.writeI32(struct.templateParFun);
      oprot.writeFieldEnd();
      if (struct.templateParFunText != null) {
        oprot.writeFieldBegin(TEMPLATE_PAR_FUN_TEXT_FIELD_DESC);
        oprot.writeString(struct.templateParFunText);
        oprot.writeFieldEnd();
      }
      if (struct.contractTypeCode != null) {
        oprot.writeFieldBegin(CONTRACT_TYPE_CODE_FIELD_DESC);
        oprot.writeString(struct.contractTypeCode);
        oprot.writeFieldEnd();
      }
      if (struct.comboboxTemplateText != null) {
        oprot.writeFieldBegin(COMBOBOX_TEMPLATE_TEXT_FIELD_DESC);
        oprot.writeString(struct.comboboxTemplateText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.applyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CYCLE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cycleType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractTempLateTupleSchemeFactory implements SchemeFactory {
    public ContractTempLateTupleScheme getScheme() {
      return new ContractTempLateTupleScheme();
    }
  }

  private static class ContractTempLateTupleScheme extends TupleScheme<ContractTempLate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractTempLate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateCatelog()) {
        optionals.set(1);
      }
      if (struct.isSetTemplateType()) {
        optionals.set(2);
      }
      if (struct.isSetTemplateOwner()) {
        optionals.set(3);
      }
      if (struct.isSetTemplateUseMode()) {
        optionals.set(4);
      }
      if (struct.isSetTemplateName()) {
        optionals.set(5);
      }
      if (struct.isSetTemplateUrl()) {
        optionals.set(6);
      }
      if (struct.isSetContractNumberFun()) {
        optionals.set(7);
      }
      if (struct.isSetTemplateDesc()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateDttm()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetUploadUserId()) {
        optionals.set(11);
      }
      if (struct.isSetPage()) {
        optionals.set(12);
      }
      if (struct.isSetRows()) {
        optionals.set(13);
      }
      if (struct.isSetTotal()) {
        optionals.set(14);
      }
      if (struct.isSetTemplateTypeText()) {
        optionals.set(15);
      }
      if (struct.isSetTemplateCatelogText()) {
        optionals.set(16);
      }
      if (struct.isSetTemplateParFun()) {
        optionals.set(17);
      }
      if (struct.isSetTemplateParFunText()) {
        optionals.set(18);
      }
      if (struct.isSetContractTypeCode()) {
        optionals.set(19);
      }
      if (struct.isSetComboboxTemplateText()) {
        optionals.set(20);
      }
      if (struct.isSetApplyType()) {
        optionals.set(21);
      }
      if (struct.isSetCycleType()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetTemplateCatelog()) {
        oprot.writeI32(struct.templateCatelog);
      }
      if (struct.isSetTemplateType()) {
        oprot.writeI32(struct.templateType);
      }
      if (struct.isSetTemplateOwner()) {
        oprot.writeI32(struct.templateOwner);
      }
      if (struct.isSetTemplateUseMode()) {
        oprot.writeI32(struct.templateUseMode);
      }
      if (struct.isSetTemplateName()) {
        oprot.writeString(struct.templateName);
      }
      if (struct.isSetTemplateUrl()) {
        oprot.writeString(struct.templateUrl);
      }
      if (struct.isSetContractNumberFun()) {
        oprot.writeString(struct.contractNumberFun);
      }
      if (struct.isSetTemplateDesc()) {
        oprot.writeString(struct.templateDesc);
      }
      if (struct.isSetUpdateDttm()) {
        oprot.writeString(struct.updateDttm);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetUploadUserId()) {
        oprot.writeI32(struct.uploadUserId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetTemplateTypeText()) {
        oprot.writeString(struct.templateTypeText);
      }
      if (struct.isSetTemplateCatelogText()) {
        oprot.writeString(struct.templateCatelogText);
      }
      if (struct.isSetTemplateParFun()) {
        oprot.writeI32(struct.templateParFun);
      }
      if (struct.isSetTemplateParFunText()) {
        oprot.writeString(struct.templateParFunText);
      }
      if (struct.isSetContractTypeCode()) {
        oprot.writeString(struct.contractTypeCode);
      }
      if (struct.isSetComboboxTemplateText()) {
        oprot.writeString(struct.comboboxTemplateText);
      }
      if (struct.isSetApplyType()) {
        oprot.writeI32(struct.applyType);
      }
      if (struct.isSetCycleType()) {
        oprot.writeI32(struct.cycleType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractTempLate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.templateCatelog = iprot.readI32();
        struct.setTemplateCatelogIsSet(true);
      }
      if (incoming.get(2)) {
        struct.templateType = iprot.readI32();
        struct.setTemplateTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.templateOwner = iprot.readI32();
        struct.setTemplateOwnerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.templateUseMode = iprot.readI32();
        struct.setTemplateUseModeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.templateName = iprot.readString();
        struct.setTemplateNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.templateUrl = iprot.readString();
        struct.setTemplateUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.contractNumberFun = iprot.readString();
        struct.setContractNumberFunIsSet(true);
      }
      if (incoming.get(8)) {
        struct.templateDesc = iprot.readString();
        struct.setTemplateDescIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateDttm = iprot.readString();
        struct.setUpdateDttmIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.uploadUserId = iprot.readI32();
        struct.setUploadUserIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(15)) {
        struct.templateTypeText = iprot.readString();
        struct.setTemplateTypeTextIsSet(true);
      }
      if (incoming.get(16)) {
        struct.templateCatelogText = iprot.readString();
        struct.setTemplateCatelogTextIsSet(true);
      }
      if (incoming.get(17)) {
        struct.templateParFun = iprot.readI32();
        struct.setTemplateParFunIsSet(true);
      }
      if (incoming.get(18)) {
        struct.templateParFunText = iprot.readString();
        struct.setTemplateParFunTextIsSet(true);
      }
      if (incoming.get(19)) {
        struct.contractTypeCode = iprot.readString();
        struct.setContractTypeCodeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.comboboxTemplateText = iprot.readString();
        struct.setComboboxTemplateTextIsSet(true);
      }
      if (incoming.get(21)) {
        struct.applyType = iprot.readI32();
        struct.setApplyTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.cycleType = iprot.readI32();
        struct.setCycleTypeIsSet(true);
      }
    }
  }

}


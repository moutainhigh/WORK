/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-28")
public class BusinessApprovalBill implements org.apache.thrift.TBase<BusinessApprovalBill, BusinessApprovalBill._Fields>, java.io.Serializable, Cloneable, Comparable<BusinessApprovalBill> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusinessApprovalBill");

  private static final org.apache.thrift.protocol.TField DATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dateId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPROVAL_STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalStep", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APPROVAL_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalPerson", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CHOOSE_MONTH_OR_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("chooseMonthOrWeek", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCatelog", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField APPROVAL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REAL_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("realLoan", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField INCLUDE_WT_FIELD_DESC = new org.apache.thrift.protocol.TField("includeWt", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusinessApprovalBillStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusinessApprovalBillTupleSchemeFactory());
  }

  public String dateId; // required
  public String approvalStep; // required
  public String department; // required
  public String approvalPerson; // required
  public int totalCount; // required
  public double totalMoney; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public String fromDate; // required
  public String endDate; // required
  public int chooseMonthOrWeek; // required
  public int businessSource; // required
  public String businessSourceStr; // required
  public int projectId; // required
  public String projectName; // required
  public String customerName; // required
  public String businessCatelog; // required
  public String approvalDate; // required
  public double realLoan; // required
  public int includeWt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE_ID((short)1, "dateId"),
    APPROVAL_STEP((short)2, "approvalStep"),
    DEPARTMENT((short)3, "department"),
    APPROVAL_PERSON((short)4, "approvalPerson"),
    TOTAL_COUNT((short)5, "totalCount"),
    TOTAL_MONEY((short)6, "totalMoney"),
    PAGE((short)7, "page"),
    ROWS((short)8, "rows"),
    USER_IDS((short)9, "userIds"),
    FROM_DATE((short)10, "fromDate"),
    END_DATE((short)11, "endDate"),
    CHOOSE_MONTH_OR_WEEK((short)12, "chooseMonthOrWeek"),
    BUSINESS_SOURCE((short)13, "businessSource"),
    BUSINESS_SOURCE_STR((short)14, "businessSourceStr"),
    PROJECT_ID((short)15, "projectId"),
    PROJECT_NAME((short)16, "projectName"),
    CUSTOMER_NAME((short)17, "customerName"),
    BUSINESS_CATELOG((short)18, "businessCatelog"),
    APPROVAL_DATE((short)19, "approvalDate"),
    REAL_LOAN((short)20, "realLoan"),
    INCLUDE_WT((short)21, "includeWt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE_ID
          return DATE_ID;
        case 2: // APPROVAL_STEP
          return APPROVAL_STEP;
        case 3: // DEPARTMENT
          return DEPARTMENT;
        case 4: // APPROVAL_PERSON
          return APPROVAL_PERSON;
        case 5: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 6: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 7: // PAGE
          return PAGE;
        case 8: // ROWS
          return ROWS;
        case 9: // USER_IDS
          return USER_IDS;
        case 10: // FROM_DATE
          return FROM_DATE;
        case 11: // END_DATE
          return END_DATE;
        case 12: // CHOOSE_MONTH_OR_WEEK
          return CHOOSE_MONTH_OR_WEEK;
        case 13: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 14: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 15: // PROJECT_ID
          return PROJECT_ID;
        case 16: // PROJECT_NAME
          return PROJECT_NAME;
        case 17: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 18: // BUSINESS_CATELOG
          return BUSINESS_CATELOG;
        case 19: // APPROVAL_DATE
          return APPROVAL_DATE;
        case 20: // REAL_LOAN
          return REAL_LOAN;
        case 21: // INCLUDE_WT
          return INCLUDE_WT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALCOUNT_ISSET_ID = 0;
  private static final int __TOTALMONEY_ISSET_ID = 1;
  private static final int __PAGE_ISSET_ID = 2;
  private static final int __ROWS_ISSET_ID = 3;
  private static final int __CHOOSEMONTHORWEEK_ISSET_ID = 4;
  private static final int __BUSINESSSOURCE_ISSET_ID = 5;
  private static final int __PROJECTID_ISSET_ID = 6;
  private static final int __REALLOAN_ISSET_ID = 7;
  private static final int __INCLUDEWT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE_ID, new org.apache.thrift.meta_data.FieldMetaData("dateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_STEP, new org.apache.thrift.meta_data.FieldMetaData("approvalStep", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_PERSON, new org.apache.thrift.meta_data.FieldMetaData("approvalPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHOOSE_MONTH_OR_WEEK, new org.apache.thrift.meta_data.FieldMetaData("chooseMonthOrWeek", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("businessCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_DATE, new org.apache.thrift.meta_data.FieldMetaData("approvalDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_LOAN, new org.apache.thrift.meta_data.FieldMetaData("realLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCLUDE_WT, new org.apache.thrift.meta_data.FieldMetaData("includeWt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusinessApprovalBill.class, metaDataMap);
  }

  public BusinessApprovalBill() {
    this.page = 1;

    this.rows = 10;

  }

  public BusinessApprovalBill(
    String dateId,
    String approvalStep,
    String department,
    String approvalPerson,
    int totalCount,
    double totalMoney,
    int page,
    int rows,
    List<Integer> userIds,
    String fromDate,
    String endDate,
    int chooseMonthOrWeek,
    int businessSource,
    String businessSourceStr,
    int projectId,
    String projectName,
    String customerName,
    String businessCatelog,
    String approvalDate,
    double realLoan,
    int includeWt)
  {
    this();
    this.dateId = dateId;
    this.approvalStep = approvalStep;
    this.department = department;
    this.approvalPerson = approvalPerson;
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.fromDate = fromDate;
    this.endDate = endDate;
    this.chooseMonthOrWeek = chooseMonthOrWeek;
    setChooseMonthOrWeekIsSet(true);
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.businessSourceStr = businessSourceStr;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.customerName = customerName;
    this.businessCatelog = businessCatelog;
    this.approvalDate = approvalDate;
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    this.includeWt = includeWt;
    setIncludeWtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusinessApprovalBill(BusinessApprovalBill other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDateId()) {
      this.dateId = other.dateId;
    }
    if (other.isSetApprovalStep()) {
      this.approvalStep = other.approvalStep;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    if (other.isSetApprovalPerson()) {
      this.approvalPerson = other.approvalPerson;
    }
    this.totalCount = other.totalCount;
    this.totalMoney = other.totalMoney;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetFromDate()) {
      this.fromDate = other.fromDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    this.chooseMonthOrWeek = other.chooseMonthOrWeek;
    this.businessSource = other.businessSource;
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetBusinessCatelog()) {
      this.businessCatelog = other.businessCatelog;
    }
    if (other.isSetApprovalDate()) {
      this.approvalDate = other.approvalDate;
    }
    this.realLoan = other.realLoan;
    this.includeWt = other.includeWt;
  }

  public BusinessApprovalBill deepCopy() {
    return new BusinessApprovalBill(this);
  }

  @Override
  public void clear() {
    this.dateId = null;
    this.approvalStep = null;
    this.department = null;
    this.approvalPerson = null;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0.0;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    this.fromDate = null;
    this.endDate = null;
    setChooseMonthOrWeekIsSet(false);
    this.chooseMonthOrWeek = 0;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    this.businessSourceStr = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.customerName = null;
    this.businessCatelog = null;
    this.approvalDate = null;
    setRealLoanIsSet(false);
    this.realLoan = 0.0;
    setIncludeWtIsSet(false);
    this.includeWt = 0;
  }

  public String getDateId() {
    return this.dateId;
  }

  public BusinessApprovalBill setDateId(String dateId) {
    this.dateId = dateId;
    return this;
  }

  public void unsetDateId() {
    this.dateId = null;
  }

  /** Returns true if field dateId is set (has been assigned a value) and false otherwise */
  public boolean isSetDateId() {
    return this.dateId != null;
  }

  public void setDateIdIsSet(boolean value) {
    if (!value) {
      this.dateId = null;
    }
  }

  public String getApprovalStep() {
    return this.approvalStep;
  }

  public BusinessApprovalBill setApprovalStep(String approvalStep) {
    this.approvalStep = approvalStep;
    return this;
  }

  public void unsetApprovalStep() {
    this.approvalStep = null;
  }

  /** Returns true if field approvalStep is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalStep() {
    return this.approvalStep != null;
  }

  public void setApprovalStepIsSet(boolean value) {
    if (!value) {
      this.approvalStep = null;
    }
  }

  public String getDepartment() {
    return this.department;
  }

  public BusinessApprovalBill setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public String getApprovalPerson() {
    return this.approvalPerson;
  }

  public BusinessApprovalBill setApprovalPerson(String approvalPerson) {
    this.approvalPerson = approvalPerson;
    return this;
  }

  public void unsetApprovalPerson() {
    this.approvalPerson = null;
  }

  /** Returns true if field approvalPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalPerson() {
    return this.approvalPerson != null;
  }

  public void setApprovalPersonIsSet(boolean value) {
    if (!value) {
      this.approvalPerson = null;
    }
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public BusinessApprovalBill setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public double getTotalMoney() {
    return this.totalMoney;
  }

  public BusinessApprovalBill setTotalMoney(double totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public BusinessApprovalBill setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public BusinessApprovalBill setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public BusinessApprovalBill setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getFromDate() {
    return this.fromDate;
  }

  public BusinessApprovalBill setFromDate(String fromDate) {
    this.fromDate = fromDate;
    return this;
  }

  public void unsetFromDate() {
    this.fromDate = null;
  }

  /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromDate() {
    return this.fromDate != null;
  }

  public void setFromDateIsSet(boolean value) {
    if (!value) {
      this.fromDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public BusinessApprovalBill setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public int getChooseMonthOrWeek() {
    return this.chooseMonthOrWeek;
  }

  public BusinessApprovalBill setChooseMonthOrWeek(int chooseMonthOrWeek) {
    this.chooseMonthOrWeek = chooseMonthOrWeek;
    setChooseMonthOrWeekIsSet(true);
    return this;
  }

  public void unsetChooseMonthOrWeek() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID);
  }

  /** Returns true if field chooseMonthOrWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetChooseMonthOrWeek() {
    return EncodingUtils.testBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID);
  }

  public void setChooseMonthOrWeekIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID, value);
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public BusinessApprovalBill setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID, value);
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public BusinessApprovalBill setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BusinessApprovalBill setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public BusinessApprovalBill setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public BusinessApprovalBill setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getBusinessCatelog() {
    return this.businessCatelog;
  }

  public BusinessApprovalBill setBusinessCatelog(String businessCatelog) {
    this.businessCatelog = businessCatelog;
    return this;
  }

  public void unsetBusinessCatelog() {
    this.businessCatelog = null;
  }

  /** Returns true if field businessCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCatelog() {
    return this.businessCatelog != null;
  }

  public void setBusinessCatelogIsSet(boolean value) {
    if (!value) {
      this.businessCatelog = null;
    }
  }

  public String getApprovalDate() {
    return this.approvalDate;
  }

  public BusinessApprovalBill setApprovalDate(String approvalDate) {
    this.approvalDate = approvalDate;
    return this;
  }

  public void unsetApprovalDate() {
    this.approvalDate = null;
  }

  /** Returns true if field approvalDate is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalDate() {
    return this.approvalDate != null;
  }

  public void setApprovalDateIsSet(boolean value) {
    if (!value) {
      this.approvalDate = null;
    }
  }

  public double getRealLoan() {
    return this.realLoan;
  }

  public BusinessApprovalBill setRealLoan(double realLoan) {
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    return this;
  }

  public void unsetRealLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  /** Returns true if field realLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetRealLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  public void setRealLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALLOAN_ISSET_ID, value);
  }

  public int getIncludeWt() {
    return this.includeWt;
  }

  public BusinessApprovalBill setIncludeWt(int includeWt) {
    this.includeWt = includeWt;
    setIncludeWtIsSet(true);
    return this;
  }

  public void unsetIncludeWt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEWT_ISSET_ID);
  }

  /** Returns true if field includeWt is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeWt() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEWT_ISSET_ID);
  }

  public void setIncludeWtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEWT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE_ID:
      if (value == null) {
        unsetDateId();
      } else {
        setDateId((String)value);
      }
      break;

    case APPROVAL_STEP:
      if (value == null) {
        unsetApprovalStep();
      } else {
        setApprovalStep((String)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case APPROVAL_PERSON:
      if (value == null) {
        unsetApprovalPerson();
      } else {
        setApprovalPerson((String)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Double)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case FROM_DATE:
      if (value == null) {
        unsetFromDate();
      } else {
        setFromDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case CHOOSE_MONTH_OR_WEEK:
      if (value == null) {
        unsetChooseMonthOrWeek();
      } else {
        setChooseMonthOrWeek((Integer)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case BUSINESS_CATELOG:
      if (value == null) {
        unsetBusinessCatelog();
      } else {
        setBusinessCatelog((String)value);
      }
      break;

    case APPROVAL_DATE:
      if (value == null) {
        unsetApprovalDate();
      } else {
        setApprovalDate((String)value);
      }
      break;

    case REAL_LOAN:
      if (value == null) {
        unsetRealLoan();
      } else {
        setRealLoan((Double)value);
      }
      break;

    case INCLUDE_WT:
      if (value == null) {
        unsetIncludeWt();
      } else {
        setIncludeWt((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE_ID:
      return getDateId();

    case APPROVAL_STEP:
      return getApprovalStep();

    case DEPARTMENT:
      return getDepartment();

    case APPROVAL_PERSON:
      return getApprovalPerson();

    case TOTAL_COUNT:
      return Integer.valueOf(getTotalCount());

    case TOTAL_MONEY:
      return Double.valueOf(getTotalMoney());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case FROM_DATE:
      return getFromDate();

    case END_DATE:
      return getEndDate();

    case CHOOSE_MONTH_OR_WEEK:
      return Integer.valueOf(getChooseMonthOrWeek());

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case CUSTOMER_NAME:
      return getCustomerName();

    case BUSINESS_CATELOG:
      return getBusinessCatelog();

    case APPROVAL_DATE:
      return getApprovalDate();

    case REAL_LOAN:
      return Double.valueOf(getRealLoan());

    case INCLUDE_WT:
      return Integer.valueOf(getIncludeWt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE_ID:
      return isSetDateId();
    case APPROVAL_STEP:
      return isSetApprovalStep();
    case DEPARTMENT:
      return isSetDepartment();
    case APPROVAL_PERSON:
      return isSetApprovalPerson();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case FROM_DATE:
      return isSetFromDate();
    case END_DATE:
      return isSetEndDate();
    case CHOOSE_MONTH_OR_WEEK:
      return isSetChooseMonthOrWeek();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case BUSINESS_CATELOG:
      return isSetBusinessCatelog();
    case APPROVAL_DATE:
      return isSetApprovalDate();
    case REAL_LOAN:
      return isSetRealLoan();
    case INCLUDE_WT:
      return isSetIncludeWt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusinessApprovalBill)
      return this.equals((BusinessApprovalBill)that);
    return false;
  }

  public boolean equals(BusinessApprovalBill that) {
    if (that == null)
      return false;

    boolean this_present_dateId = true && this.isSetDateId();
    boolean that_present_dateId = true && that.isSetDateId();
    if (this_present_dateId || that_present_dateId) {
      if (!(this_present_dateId && that_present_dateId))
        return false;
      if (!this.dateId.equals(that.dateId))
        return false;
    }

    boolean this_present_approvalStep = true && this.isSetApprovalStep();
    boolean that_present_approvalStep = true && that.isSetApprovalStep();
    if (this_present_approvalStep || that_present_approvalStep) {
      if (!(this_present_approvalStep && that_present_approvalStep))
        return false;
      if (!this.approvalStep.equals(that.approvalStep))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_approvalPerson = true && this.isSetApprovalPerson();
    boolean that_present_approvalPerson = true && that.isSetApprovalPerson();
    if (this_present_approvalPerson || that_present_approvalPerson) {
      if (!(this_present_approvalPerson && that_present_approvalPerson))
        return false;
      if (!this.approvalPerson.equals(that.approvalPerson))
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_totalMoney = true;
    boolean that_present_totalMoney = true;
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_fromDate = true && this.isSetFromDate();
    boolean that_present_fromDate = true && that.isSetFromDate();
    if (this_present_fromDate || that_present_fromDate) {
      if (!(this_present_fromDate && that_present_fromDate))
        return false;
      if (!this.fromDate.equals(that.fromDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_chooseMonthOrWeek = true;
    boolean that_present_chooseMonthOrWeek = true;
    if (this_present_chooseMonthOrWeek || that_present_chooseMonthOrWeek) {
      if (!(this_present_chooseMonthOrWeek && that_present_chooseMonthOrWeek))
        return false;
      if (this.chooseMonthOrWeek != that.chooseMonthOrWeek)
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_businessCatelog = true && this.isSetBusinessCatelog();
    boolean that_present_businessCatelog = true && that.isSetBusinessCatelog();
    if (this_present_businessCatelog || that_present_businessCatelog) {
      if (!(this_present_businessCatelog && that_present_businessCatelog))
        return false;
      if (!this.businessCatelog.equals(that.businessCatelog))
        return false;
    }

    boolean this_present_approvalDate = true && this.isSetApprovalDate();
    boolean that_present_approvalDate = true && that.isSetApprovalDate();
    if (this_present_approvalDate || that_present_approvalDate) {
      if (!(this_present_approvalDate && that_present_approvalDate))
        return false;
      if (!this.approvalDate.equals(that.approvalDate))
        return false;
    }

    boolean this_present_realLoan = true;
    boolean that_present_realLoan = true;
    if (this_present_realLoan || that_present_realLoan) {
      if (!(this_present_realLoan && that_present_realLoan))
        return false;
      if (this.realLoan != that.realLoan)
        return false;
    }

    boolean this_present_includeWt = true;
    boolean that_present_includeWt = true;
    if (this_present_includeWt || that_present_includeWt) {
      if (!(this_present_includeWt && that_present_includeWt))
        return false;
      if (this.includeWt != that.includeWt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dateId = true && (isSetDateId());
    list.add(present_dateId);
    if (present_dateId)
      list.add(dateId);

    boolean present_approvalStep = true && (isSetApprovalStep());
    list.add(present_approvalStep);
    if (present_approvalStep)
      list.add(approvalStep);

    boolean present_department = true && (isSetDepartment());
    list.add(present_department);
    if (present_department)
      list.add(department);

    boolean present_approvalPerson = true && (isSetApprovalPerson());
    list.add(present_approvalPerson);
    if (present_approvalPerson)
      list.add(approvalPerson);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_totalMoney = true;
    list.add(present_totalMoney);
    if (present_totalMoney)
      list.add(totalMoney);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_fromDate = true && (isSetFromDate());
    list.add(present_fromDate);
    if (present_fromDate)
      list.add(fromDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_chooseMonthOrWeek = true;
    list.add(present_chooseMonthOrWeek);
    if (present_chooseMonthOrWeek)
      list.add(chooseMonthOrWeek);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_customerName = true && (isSetCustomerName());
    list.add(present_customerName);
    if (present_customerName)
      list.add(customerName);

    boolean present_businessCatelog = true && (isSetBusinessCatelog());
    list.add(present_businessCatelog);
    if (present_businessCatelog)
      list.add(businessCatelog);

    boolean present_approvalDate = true && (isSetApprovalDate());
    list.add(present_approvalDate);
    if (present_approvalDate)
      list.add(approvalDate);

    boolean present_realLoan = true;
    list.add(present_realLoan);
    if (present_realLoan)
      list.add(realLoan);

    boolean present_includeWt = true;
    list.add(present_includeWt);
    if (present_includeWt)
      list.add(includeWt);

    return list.hashCode();
  }

  @Override
  public int compareTo(BusinessApprovalBill other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDateId()).compareTo(other.isSetDateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateId, other.dateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalStep()).compareTo(other.isSetApprovalStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalStep, other.approvalStep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalPerson()).compareTo(other.isSetApprovalPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalPerson, other.approvalPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromDate()).compareTo(other.isSetFromDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, other.fromDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChooseMonthOrWeek()).compareTo(other.isSetChooseMonthOrWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChooseMonthOrWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chooseMonthOrWeek, other.chooseMonthOrWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCatelog()).compareTo(other.isSetBusinessCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCatelog, other.businessCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalDate()).compareTo(other.isSetApprovalDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalDate, other.approvalDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealLoan()).compareTo(other.isSetRealLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realLoan, other.realLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeWt()).compareTo(other.isSetIncludeWt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeWt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeWt, other.includeWt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusinessApprovalBill(");
    boolean first = true;

    sb.append("dateId:");
    if (this.dateId == null) {
      sb.append("null");
    } else {
      sb.append(this.dateId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalStep:");
    if (this.approvalStep == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalStep);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("department:");
    if (this.department == null) {
      sb.append("null");
    } else {
      sb.append(this.department);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalPerson:");
    if (this.approvalPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalMoney:");
    sb.append(this.totalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromDate:");
    if (this.fromDate == null) {
      sb.append("null");
    } else {
      sb.append(this.fromDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chooseMonthOrWeek:");
    sb.append(this.chooseMonthOrWeek);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCatelog:");
    if (this.businessCatelog == null) {
      sb.append("null");
    } else {
      sb.append(this.businessCatelog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalDate:");
    if (this.approvalDate == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realLoan:");
    sb.append(this.realLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeWt:");
    sb.append(this.includeWt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusinessApprovalBillStandardSchemeFactory implements SchemeFactory {
    public BusinessApprovalBillStandardScheme getScheme() {
      return new BusinessApprovalBillStandardScheme();
    }
  }

  private static class BusinessApprovalBillStandardScheme extends StandardScheme<BusinessApprovalBill> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusinessApprovalBill struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateId = iprot.readString();
              struct.setDateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPROVAL_STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalStep = iprot.readString();
              struct.setApprovalStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPROVAL_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalPerson = iprot.readString();
              struct.setApprovalPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalMoney = iprot.readDouble();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list88.size);
                int _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = iprot.readI32();
                  struct.userIds.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FROM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromDate = iprot.readString();
              struct.setFromDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHOOSE_MONTH_OR_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chooseMonthOrWeek = iprot.readI32();
              struct.setChooseMonthOrWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BUSINESS_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessCatelog = iprot.readString();
              struct.setBusinessCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // APPROVAL_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalDate = iprot.readString();
              struct.setApprovalDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REAL_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realLoan = iprot.readDouble();
              struct.setRealLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // INCLUDE_WT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.includeWt = iprot.readI32();
              struct.setIncludeWtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusinessApprovalBill struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dateId != null) {
        oprot.writeFieldBegin(DATE_ID_FIELD_DESC);
        oprot.writeString(struct.dateId);
        oprot.writeFieldEnd();
      }
      if (struct.approvalStep != null) {
        oprot.writeFieldBegin(APPROVAL_STEP_FIELD_DESC);
        oprot.writeString(struct.approvalStep);
        oprot.writeFieldEnd();
      }
      if (struct.department != null) {
        oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
        oprot.writeString(struct.department);
        oprot.writeFieldEnd();
      }
      if (struct.approvalPerson != null) {
        oprot.writeFieldBegin(APPROVAL_PERSON_FIELD_DESC);
        oprot.writeString(struct.approvalPerson);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.totalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter91 : struct.userIds)
          {
            oprot.writeI32(_iter91);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fromDate != null) {
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        oprot.writeString(struct.fromDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHOOSE_MONTH_OR_WEEK_FIELD_DESC);
      oprot.writeI32(struct.chooseMonthOrWeek);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.businessCatelog != null) {
        oprot.writeFieldBegin(BUSINESS_CATELOG_FIELD_DESC);
        oprot.writeString(struct.businessCatelog);
        oprot.writeFieldEnd();
      }
      if (struct.approvalDate != null) {
        oprot.writeFieldBegin(APPROVAL_DATE_FIELD_DESC);
        oprot.writeString(struct.approvalDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_LOAN_FIELD_DESC);
      oprot.writeDouble(struct.realLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_WT_FIELD_DESC);
      oprot.writeI32(struct.includeWt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusinessApprovalBillTupleSchemeFactory implements SchemeFactory {
    public BusinessApprovalBillTupleScheme getScheme() {
      return new BusinessApprovalBillTupleScheme();
    }
  }

  private static class BusinessApprovalBillTupleScheme extends TupleScheme<BusinessApprovalBill> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusinessApprovalBill struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDateId()) {
        optionals.set(0);
      }
      if (struct.isSetApprovalStep()) {
        optionals.set(1);
      }
      if (struct.isSetDepartment()) {
        optionals.set(2);
      }
      if (struct.isSetApprovalPerson()) {
        optionals.set(3);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(4);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(5);
      }
      if (struct.isSetPage()) {
        optionals.set(6);
      }
      if (struct.isSetRows()) {
        optionals.set(7);
      }
      if (struct.isSetUserIds()) {
        optionals.set(8);
      }
      if (struct.isSetFromDate()) {
        optionals.set(9);
      }
      if (struct.isSetEndDate()) {
        optionals.set(10);
      }
      if (struct.isSetChooseMonthOrWeek()) {
        optionals.set(11);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(12);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(13);
      }
      if (struct.isSetProjectId()) {
        optionals.set(14);
      }
      if (struct.isSetProjectName()) {
        optionals.set(15);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(16);
      }
      if (struct.isSetBusinessCatelog()) {
        optionals.set(17);
      }
      if (struct.isSetApprovalDate()) {
        optionals.set(18);
      }
      if (struct.isSetRealLoan()) {
        optionals.set(19);
      }
      if (struct.isSetIncludeWt()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetDateId()) {
        oprot.writeString(struct.dateId);
      }
      if (struct.isSetApprovalStep()) {
        oprot.writeString(struct.approvalStep);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetApprovalPerson()) {
        oprot.writeString(struct.approvalPerson);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeDouble(struct.totalMoney);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter92 : struct.userIds)
          {
            oprot.writeI32(_iter92);
          }
        }
      }
      if (struct.isSetFromDate()) {
        oprot.writeString(struct.fromDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetChooseMonthOrWeek()) {
        oprot.writeI32(struct.chooseMonthOrWeek);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetBusinessCatelog()) {
        oprot.writeString(struct.businessCatelog);
      }
      if (struct.isSetApprovalDate()) {
        oprot.writeString(struct.approvalDate);
      }
      if (struct.isSetRealLoan()) {
        oprot.writeDouble(struct.realLoan);
      }
      if (struct.isSetIncludeWt()) {
        oprot.writeI32(struct.includeWt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusinessApprovalBill struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.dateId = iprot.readString();
        struct.setDateIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.approvalStep = iprot.readString();
        struct.setApprovalStepIsSet(true);
      }
      if (incoming.get(2)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.approvalPerson = iprot.readString();
        struct.setApprovalPersonIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalMoney = iprot.readDouble();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list93.size);
          int _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = iprot.readI32();
            struct.userIds.add(_elem94);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fromDate = iprot.readString();
        struct.setFromDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.chooseMonthOrWeek = iprot.readI32();
        struct.setChooseMonthOrWeekIsSet(true);
      }
      if (incoming.get(12)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(14)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.businessCatelog = iprot.readString();
        struct.setBusinessCatelogIsSet(true);
      }
      if (incoming.get(18)) {
        struct.approvalDate = iprot.readString();
        struct.setApprovalDateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.realLoan = iprot.readDouble();
        struct.setRealLoanIsSet(true);
      }
      if (incoming.get(20)) {
        struct.includeWt = iprot.readI32();
        struct.setIncludeWtIsSet(true);
      }
    }
  }

}


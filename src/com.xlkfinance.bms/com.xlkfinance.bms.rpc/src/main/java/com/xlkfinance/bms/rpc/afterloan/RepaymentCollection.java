/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class RepaymentCollection implements org.apache.thrift.TBase<RepaymentCollection, RepaymentCollection._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentCollection> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentCollection");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField APP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("appDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField BALANCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FACT_REMINDER_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("factReminderUser", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FACT_PLAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("factPlanDt", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("planId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentCollectionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentCollectionTupleSchemeFactory());
  }

  public int pid; // required
  public String projectName; // required
  public String projectId; // required
  public String acctType; // required
  public String appDate; // required
  public String telephone; // required
  public double creditAmt; // required
  public double balanceAmt; // required
  public String realName; // required
  public String planOutLoanDt; // required
  public String factReminderUser; // required
  public String factPlanDt; // required
  public int planId; // required
  public int loanId; // required
  public int total; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_ID((short)3, "projectId"),
    ACCT_TYPE((short)4, "acctType"),
    APP_DATE((short)5, "appDate"),
    TELEPHONE((short)6, "telephone"),
    CREDIT_AMT((short)7, "creditAmt"),
    BALANCE_AMT((short)8, "balanceAmt"),
    REAL_NAME((short)9, "realName"),
    PLAN_OUT_LOAN_DT((short)10, "planOutLoanDt"),
    FACT_REMINDER_USER((short)11, "factReminderUser"),
    FACT_PLAN_DT((short)12, "factPlanDt"),
    PLAN_ID((short)13, "planId"),
    LOAN_ID((short)14, "loanId"),
    TOTAL((short)15, "total");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // ACCT_TYPE
          return ACCT_TYPE;
        case 5: // APP_DATE
          return APP_DATE;
        case 6: // TELEPHONE
          return TELEPHONE;
        case 7: // CREDIT_AMT
          return CREDIT_AMT;
        case 8: // BALANCE_AMT
          return BALANCE_AMT;
        case 9: // REAL_NAME
          return REAL_NAME;
        case 10: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 11: // FACT_REMINDER_USER
          return FACT_REMINDER_USER;
        case 12: // FACT_PLAN_DT
          return FACT_PLAN_DT;
        case 13: // PLAN_ID
          return PLAN_ID;
        case 14: // LOAN_ID
          return LOAN_ID;
        case 15: // TOTAL
          return TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CREDITAMT_ISSET_ID = 1;
  private static final int __BALANCEAMT_ISSET_ID = 2;
  private static final int __PLANID_ISSET_ID = 3;
  private static final int __LOANID_ISSET_ID = 4;
  private static final int __TOTAL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_DATE, new org.apache.thrift.meta_data.FieldMetaData("appDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("balanceAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACT_REMINDER_USER, new org.apache.thrift.meta_data.FieldMetaData("factReminderUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACT_PLAN_DT, new org.apache.thrift.meta_data.FieldMetaData("factPlanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("planId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentCollection.class, metaDataMap);
  }

  public RepaymentCollection() {
  }

  public RepaymentCollection(
    int pid,
    String projectName,
    String projectId,
    String acctType,
    String appDate,
    String telephone,
    double creditAmt,
    double balanceAmt,
    String realName,
    String planOutLoanDt,
    String factReminderUser,
    String factPlanDt,
    int planId,
    int loanId,
    int total)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectName = projectName;
    this.projectId = projectId;
    this.acctType = acctType;
    this.appDate = appDate;
    this.telephone = telephone;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.balanceAmt = balanceAmt;
    setBalanceAmtIsSet(true);
    this.realName = realName;
    this.planOutLoanDt = planOutLoanDt;
    this.factReminderUser = factReminderUser;
    this.factPlanDt = factPlanDt;
    this.planId = planId;
    setPlanIdIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.total = total;
    setTotalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentCollection(RepaymentCollection other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetAcctType()) {
      this.acctType = other.acctType;
    }
    if (other.isSetAppDate()) {
      this.appDate = other.appDate;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    this.creditAmt = other.creditAmt;
    this.balanceAmt = other.balanceAmt;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
    if (other.isSetFactReminderUser()) {
      this.factReminderUser = other.factReminderUser;
    }
    if (other.isSetFactPlanDt()) {
      this.factPlanDt = other.factPlanDt;
    }
    this.planId = other.planId;
    this.loanId = other.loanId;
    this.total = other.total;
  }

  public RepaymentCollection deepCopy() {
    return new RepaymentCollection(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.projectName = null;
    this.projectId = null;
    this.acctType = null;
    this.appDate = null;
    this.telephone = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setBalanceAmtIsSet(false);
    this.balanceAmt = 0.0;
    this.realName = null;
    this.planOutLoanDt = null;
    this.factReminderUser = null;
    this.factPlanDt = null;
    setPlanIdIsSet(false);
    this.planId = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setTotalIsSet(false);
    this.total = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public RepaymentCollection setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RepaymentCollection setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public RepaymentCollection setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getAcctType() {
    return this.acctType;
  }

  public RepaymentCollection setAcctType(String acctType) {
    this.acctType = acctType;
    return this;
  }

  public void unsetAcctType() {
    this.acctType = null;
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return this.acctType != null;
  }

  public void setAcctTypeIsSet(boolean value) {
    if (!value) {
      this.acctType = null;
    }
  }

  public String getAppDate() {
    return this.appDate;
  }

  public RepaymentCollection setAppDate(String appDate) {
    this.appDate = appDate;
    return this;
  }

  public void unsetAppDate() {
    this.appDate = null;
  }

  /** Returns true if field appDate is set (has been assigned a value) and false otherwise */
  public boolean isSetAppDate() {
    return this.appDate != null;
  }

  public void setAppDateIsSet(boolean value) {
    if (!value) {
      this.appDate = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public RepaymentCollection setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public RepaymentCollection setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getBalanceAmt() {
    return this.balanceAmt;
  }

  public RepaymentCollection setBalanceAmt(double balanceAmt) {
    this.balanceAmt = balanceAmt;
    setBalanceAmtIsSet(true);
    return this;
  }

  public void unsetBalanceAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEAMT_ISSET_ID);
  }

  /** Returns true if field balanceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCEAMT_ISSET_ID);
  }

  public void setBalanceAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEAMT_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public RepaymentCollection setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public RepaymentCollection setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public String getFactReminderUser() {
    return this.factReminderUser;
  }

  public RepaymentCollection setFactReminderUser(String factReminderUser) {
    this.factReminderUser = factReminderUser;
    return this;
  }

  public void unsetFactReminderUser() {
    this.factReminderUser = null;
  }

  /** Returns true if field factReminderUser is set (has been assigned a value) and false otherwise */
  public boolean isSetFactReminderUser() {
    return this.factReminderUser != null;
  }

  public void setFactReminderUserIsSet(boolean value) {
    if (!value) {
      this.factReminderUser = null;
    }
  }

  public String getFactPlanDt() {
    return this.factPlanDt;
  }

  public RepaymentCollection setFactPlanDt(String factPlanDt) {
    this.factPlanDt = factPlanDt;
    return this;
  }

  public void unsetFactPlanDt() {
    this.factPlanDt = null;
  }

  /** Returns true if field factPlanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetFactPlanDt() {
    return this.factPlanDt != null;
  }

  public void setFactPlanDtIsSet(boolean value) {
    if (!value) {
      this.factPlanDt = null;
    }
  }

  public int getPlanId() {
    return this.planId;
  }

  public RepaymentCollection setPlanId(int planId) {
    this.planId = planId;
    setPlanIdIsSet(true);
    return this;
  }

  public void unsetPlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANID_ISSET_ID);
  }

  /** Returns true if field planId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANID_ISSET_ID);
  }

  public void setPlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public RepaymentCollection setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public RepaymentCollection setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((String)value);
      }
      break;

    case APP_DATE:
      if (value == null) {
        unsetAppDate();
      } else {
        setAppDate((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case BALANCE_AMT:
      if (value == null) {
        unsetBalanceAmt();
      } else {
        setBalanceAmt((Double)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    case FACT_REMINDER_USER:
      if (value == null) {
        unsetFactReminderUser();
      } else {
        setFactReminderUser((String)value);
      }
      break;

    case FACT_PLAN_DT:
      if (value == null) {
        unsetFactPlanDt();
      } else {
        setFactPlanDt((String)value);
      }
      break;

    case PLAN_ID:
      if (value == null) {
        unsetPlanId();
      } else {
        setPlanId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_ID:
      return getProjectId();

    case ACCT_TYPE:
      return getAcctType();

    case APP_DATE:
      return getAppDate();

    case TELEPHONE:
      return getTelephone();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case BALANCE_AMT:
      return Double.valueOf(getBalanceAmt());

    case REAL_NAME:
      return getRealName();

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    case FACT_REMINDER_USER:
      return getFactReminderUser();

    case FACT_PLAN_DT:
      return getFactPlanDt();

    case PLAN_ID:
      return Integer.valueOf(getPlanId());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case TOTAL:
      return Integer.valueOf(getTotal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_ID:
      return isSetProjectId();
    case ACCT_TYPE:
      return isSetAcctType();
    case APP_DATE:
      return isSetAppDate();
    case TELEPHONE:
      return isSetTelephone();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case BALANCE_AMT:
      return isSetBalanceAmt();
    case REAL_NAME:
      return isSetRealName();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    case FACT_REMINDER_USER:
      return isSetFactReminderUser();
    case FACT_PLAN_DT:
      return isSetFactPlanDt();
    case PLAN_ID:
      return isSetPlanId();
    case LOAN_ID:
      return isSetLoanId();
    case TOTAL:
      return isSetTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentCollection)
      return this.equals((RepaymentCollection)that);
    return false;
  }

  public boolean equals(RepaymentCollection that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_acctType = true && this.isSetAcctType();
    boolean that_present_acctType = true && that.isSetAcctType();
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (!this.acctType.equals(that.acctType))
        return false;
    }

    boolean this_present_appDate = true && this.isSetAppDate();
    boolean that_present_appDate = true && that.isSetAppDate();
    if (this_present_appDate || that_present_appDate) {
      if (!(this_present_appDate && that_present_appDate))
        return false;
      if (!this.appDate.equals(that.appDate))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_balanceAmt = true;
    boolean that_present_balanceAmt = true;
    if (this_present_balanceAmt || that_present_balanceAmt) {
      if (!(this_present_balanceAmt && that_present_balanceAmt))
        return false;
      if (this.balanceAmt != that.balanceAmt)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    boolean this_present_factReminderUser = true && this.isSetFactReminderUser();
    boolean that_present_factReminderUser = true && that.isSetFactReminderUser();
    if (this_present_factReminderUser || that_present_factReminderUser) {
      if (!(this_present_factReminderUser && that_present_factReminderUser))
        return false;
      if (!this.factReminderUser.equals(that.factReminderUser))
        return false;
    }

    boolean this_present_factPlanDt = true && this.isSetFactPlanDt();
    boolean that_present_factPlanDt = true && that.isSetFactPlanDt();
    if (this_present_factPlanDt || that_present_factPlanDt) {
      if (!(this_present_factPlanDt && that_present_factPlanDt))
        return false;
      if (!this.factPlanDt.equals(that.factPlanDt))
        return false;
    }

    boolean this_present_planId = true;
    boolean that_present_planId = true;
    if (this_present_planId || that_present_planId) {
      if (!(this_present_planId && that_present_planId))
        return false;
      if (this.planId != that.planId)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_acctType = true && (isSetAcctType());
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_appDate = true && (isSetAppDate());
    list.add(present_appDate);
    if (present_appDate)
      list.add(appDate);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_balanceAmt = true;
    list.add(present_balanceAmt);
    if (present_balanceAmt)
      list.add(balanceAmt);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    boolean present_factReminderUser = true && (isSetFactReminderUser());
    list.add(present_factReminderUser);
    if (present_factReminderUser)
      list.add(factReminderUser);

    boolean present_factPlanDt = true && (isSetFactPlanDt());
    list.add(present_factPlanDt);
    if (present_factPlanDt)
      list.add(factPlanDt);

    boolean present_planId = true;
    list.add(present_planId);
    if (present_planId)
      list.add(planId);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentCollection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppDate()).compareTo(other.isSetAppDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appDate, other.appDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceAmt()).compareTo(other.isSetBalanceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceAmt, other.balanceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFactReminderUser()).compareTo(other.isSetFactReminderUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFactReminderUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factReminderUser, other.factReminderUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFactPlanDt()).compareTo(other.isSetFactPlanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFactPlanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factPlanDt, other.factPlanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanId()).compareTo(other.isSetPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planId, other.planId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentCollection(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    if (this.acctType == null) {
      sb.append("null");
    } else {
      sb.append(this.acctType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appDate:");
    if (this.appDate == null) {
      sb.append("null");
    } else {
      sb.append(this.appDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceAmt:");
    sb.append(this.balanceAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("factReminderUser:");
    if (this.factReminderUser == null) {
      sb.append("null");
    } else {
      sb.append(this.factReminderUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("factPlanDt:");
    if (this.factPlanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.factPlanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planId:");
    sb.append(this.planId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentCollectionStandardSchemeFactory implements SchemeFactory {
    public RepaymentCollectionStandardScheme getScheme() {
      return new RepaymentCollectionStandardScheme();
    }
  }

  private static class RepaymentCollectionStandardScheme extends StandardScheme<RepaymentCollection> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentCollection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctType = iprot.readString();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appDate = iprot.readString();
              struct.setAppDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BALANCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balanceAmt = iprot.readDouble();
              struct.setBalanceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FACT_REMINDER_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.factReminderUser = iprot.readString();
              struct.setFactReminderUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FACT_PLAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.factPlanDt = iprot.readString();
              struct.setFactPlanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planId = iprot.readI32();
              struct.setPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentCollection struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.acctType != null) {
        oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
        oprot.writeString(struct.acctType);
        oprot.writeFieldEnd();
      }
      if (struct.appDate != null) {
        oprot.writeFieldBegin(APP_DATE_FIELD_DESC);
        oprot.writeString(struct.appDate);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_AMT_FIELD_DESC);
      oprot.writeDouble(struct.balanceAmt);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.factReminderUser != null) {
        oprot.writeFieldBegin(FACT_REMINDER_USER_FIELD_DESC);
        oprot.writeString(struct.factReminderUser);
        oprot.writeFieldEnd();
      }
      if (struct.factPlanDt != null) {
        oprot.writeFieldBegin(FACT_PLAN_DT_FIELD_DESC);
        oprot.writeString(struct.factPlanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.planId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentCollectionTupleSchemeFactory implements SchemeFactory {
    public RepaymentCollectionTupleScheme getScheme() {
      return new RepaymentCollectionTupleScheme();
    }
  }

  private static class RepaymentCollectionTupleScheme extends TupleScheme<RepaymentCollection> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentCollection struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetAcctType()) {
        optionals.set(3);
      }
      if (struct.isSetAppDate()) {
        optionals.set(4);
      }
      if (struct.isSetTelephone()) {
        optionals.set(5);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(6);
      }
      if (struct.isSetBalanceAmt()) {
        optionals.set(7);
      }
      if (struct.isSetRealName()) {
        optionals.set(8);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(9);
      }
      if (struct.isSetFactReminderUser()) {
        optionals.set(10);
      }
      if (struct.isSetFactPlanDt()) {
        optionals.set(11);
      }
      if (struct.isSetPlanId()) {
        optionals.set(12);
      }
      if (struct.isSetLoanId()) {
        optionals.set(13);
      }
      if (struct.isSetTotal()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetAcctType()) {
        oprot.writeString(struct.acctType);
      }
      if (struct.isSetAppDate()) {
        oprot.writeString(struct.appDate);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetBalanceAmt()) {
        oprot.writeDouble(struct.balanceAmt);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
      if (struct.isSetFactReminderUser()) {
        oprot.writeString(struct.factReminderUser);
      }
      if (struct.isSetFactPlanDt()) {
        oprot.writeString(struct.factPlanDt);
      }
      if (struct.isSetPlanId()) {
        oprot.writeI32(struct.planId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentCollection struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.acctType = iprot.readString();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.appDate = iprot.readString();
        struct.setAppDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.balanceAmt = iprot.readDouble();
        struct.setBalanceAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.factReminderUser = iprot.readString();
        struct.setFactReminderUserIsSet(true);
      }
      if (incoming.get(11)) {
        struct.factPlanDt = iprot.readString();
        struct.setFactPlanDtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.planId = iprot.readI32();
        struct.setPlanIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
    }
  }

}


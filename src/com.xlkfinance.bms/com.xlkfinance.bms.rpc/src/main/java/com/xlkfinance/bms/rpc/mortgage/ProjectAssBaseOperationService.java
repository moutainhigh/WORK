/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.mortgage;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-10")
public class ProjectAssBaseOperationService {

  public interface Iface {

    public List<ProjectAssKeeping> getAllProjectAssKeeping(ProjectAssKeeping projectAssKeeping) throws org.apache.thrift.TException;

    public int getAllProjectAssKeepingCount(ProjectAssKeeping projectAssKeeping) throws org.apache.thrift.TException;

    public int batchDeleteProjectAssKeeping(String pids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public ProjectAssKeeping getProjectAssKeepingByBaseId(int baseId) throws org.apache.thrift.TException;

    public List<ProjectAssKeeping> getListProjectAssKeepingByBaseId(int baseId) throws org.apache.thrift.TException;

    public List<ProjectAssExtraction> getAllProjectAssExtraction(ProjectAssExtraction projectAssExtraction) throws org.apache.thrift.TException;

    public int getAllProjectAssExtractionCount(ProjectAssExtraction projectAssExtraction) throws org.apache.thrift.TException;

    public List<ProjectAssExtraction> getListProjectAssExtractionByBaseId(int baseId) throws org.apache.thrift.TException;

    public int batchDeleteProjectAssExtraction(String pids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<ProjectAssHandle> getAllProjectAssHandle(ProjectAssHandle projectAssHandle) throws org.apache.thrift.TException;

    public int getAllProjectAssHandleCount(ProjectAssHandle projectAssHandle) throws org.apache.thrift.TException;

    public int batchDeleteProjectAssHandle(String pids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllProjectAssKeeping(ProjectAssKeeping projectAssKeeping, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllProjectAssKeepingCount(ProjectAssKeeping projectAssKeeping, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchDeleteProjectAssKeeping(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProjectAssKeepingByBaseId(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getListProjectAssKeepingByBaseId(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllProjectAssExtraction(ProjectAssExtraction projectAssExtraction, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllProjectAssExtractionCount(ProjectAssExtraction projectAssExtraction, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getListProjectAssExtractionByBaseId(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchDeleteProjectAssExtraction(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllProjectAssHandle(ProjectAssHandle projectAssHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllProjectAssHandleCount(ProjectAssHandle projectAssHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchDeleteProjectAssHandle(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<ProjectAssKeeping> getAllProjectAssKeeping(ProjectAssKeeping projectAssKeeping) throws org.apache.thrift.TException
    {
      send_getAllProjectAssKeeping(projectAssKeeping);
      return recv_getAllProjectAssKeeping();
    }

    public void send_getAllProjectAssKeeping(ProjectAssKeeping projectAssKeeping) throws org.apache.thrift.TException
    {
      getAllProjectAssKeeping_args args = new getAllProjectAssKeeping_args();
      args.setProjectAssKeeping(projectAssKeeping);
      sendBase("getAllProjectAssKeeping", args);
    }

    public List<ProjectAssKeeping> recv_getAllProjectAssKeeping() throws org.apache.thrift.TException
    {
      getAllProjectAssKeeping_result result = new getAllProjectAssKeeping_result();
      receiveBase(result, "getAllProjectAssKeeping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllProjectAssKeeping failed: unknown result");
    }

    public int getAllProjectAssKeepingCount(ProjectAssKeeping projectAssKeeping) throws org.apache.thrift.TException
    {
      send_getAllProjectAssKeepingCount(projectAssKeeping);
      return recv_getAllProjectAssKeepingCount();
    }

    public void send_getAllProjectAssKeepingCount(ProjectAssKeeping projectAssKeeping) throws org.apache.thrift.TException
    {
      getAllProjectAssKeepingCount_args args = new getAllProjectAssKeepingCount_args();
      args.setProjectAssKeeping(projectAssKeeping);
      sendBase("getAllProjectAssKeepingCount", args);
    }

    public int recv_getAllProjectAssKeepingCount() throws org.apache.thrift.TException
    {
      getAllProjectAssKeepingCount_result result = new getAllProjectAssKeepingCount_result();
      receiveBase(result, "getAllProjectAssKeepingCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllProjectAssKeepingCount failed: unknown result");
    }

    public int batchDeleteProjectAssKeeping(String pids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_batchDeleteProjectAssKeeping(pids);
      return recv_batchDeleteProjectAssKeeping();
    }

    public void send_batchDeleteProjectAssKeeping(String pids) throws org.apache.thrift.TException
    {
      batchDeleteProjectAssKeeping_args args = new batchDeleteProjectAssKeeping_args();
      args.setPids(pids);
      sendBase("batchDeleteProjectAssKeeping", args);
    }

    public int recv_batchDeleteProjectAssKeeping() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      batchDeleteProjectAssKeeping_result result = new batchDeleteProjectAssKeeping_result();
      receiveBase(result, "batchDeleteProjectAssKeeping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchDeleteProjectAssKeeping failed: unknown result");
    }

    public ProjectAssKeeping getProjectAssKeepingByBaseId(int baseId) throws org.apache.thrift.TException
    {
      send_getProjectAssKeepingByBaseId(baseId);
      return recv_getProjectAssKeepingByBaseId();
    }

    public void send_getProjectAssKeepingByBaseId(int baseId) throws org.apache.thrift.TException
    {
      getProjectAssKeepingByBaseId_args args = new getProjectAssKeepingByBaseId_args();
      args.setBaseId(baseId);
      sendBase("getProjectAssKeepingByBaseId", args);
    }

    public ProjectAssKeeping recv_getProjectAssKeepingByBaseId() throws org.apache.thrift.TException
    {
      getProjectAssKeepingByBaseId_result result = new getProjectAssKeepingByBaseId_result();
      receiveBase(result, "getProjectAssKeepingByBaseId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectAssKeepingByBaseId failed: unknown result");
    }

    public List<ProjectAssKeeping> getListProjectAssKeepingByBaseId(int baseId) throws org.apache.thrift.TException
    {
      send_getListProjectAssKeepingByBaseId(baseId);
      return recv_getListProjectAssKeepingByBaseId();
    }

    public void send_getListProjectAssKeepingByBaseId(int baseId) throws org.apache.thrift.TException
    {
      getListProjectAssKeepingByBaseId_args args = new getListProjectAssKeepingByBaseId_args();
      args.setBaseId(baseId);
      sendBase("getListProjectAssKeepingByBaseId", args);
    }

    public List<ProjectAssKeeping> recv_getListProjectAssKeepingByBaseId() throws org.apache.thrift.TException
    {
      getListProjectAssKeepingByBaseId_result result = new getListProjectAssKeepingByBaseId_result();
      receiveBase(result, "getListProjectAssKeepingByBaseId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListProjectAssKeepingByBaseId failed: unknown result");
    }

    public List<ProjectAssExtraction> getAllProjectAssExtraction(ProjectAssExtraction projectAssExtraction) throws org.apache.thrift.TException
    {
      send_getAllProjectAssExtraction(projectAssExtraction);
      return recv_getAllProjectAssExtraction();
    }

    public void send_getAllProjectAssExtraction(ProjectAssExtraction projectAssExtraction) throws org.apache.thrift.TException
    {
      getAllProjectAssExtraction_args args = new getAllProjectAssExtraction_args();
      args.setProjectAssExtraction(projectAssExtraction);
      sendBase("getAllProjectAssExtraction", args);
    }

    public List<ProjectAssExtraction> recv_getAllProjectAssExtraction() throws org.apache.thrift.TException
    {
      getAllProjectAssExtraction_result result = new getAllProjectAssExtraction_result();
      receiveBase(result, "getAllProjectAssExtraction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllProjectAssExtraction failed: unknown result");
    }

    public int getAllProjectAssExtractionCount(ProjectAssExtraction projectAssExtraction) throws org.apache.thrift.TException
    {
      send_getAllProjectAssExtractionCount(projectAssExtraction);
      return recv_getAllProjectAssExtractionCount();
    }

    public void send_getAllProjectAssExtractionCount(ProjectAssExtraction projectAssExtraction) throws org.apache.thrift.TException
    {
      getAllProjectAssExtractionCount_args args = new getAllProjectAssExtractionCount_args();
      args.setProjectAssExtraction(projectAssExtraction);
      sendBase("getAllProjectAssExtractionCount", args);
    }

    public int recv_getAllProjectAssExtractionCount() throws org.apache.thrift.TException
    {
      getAllProjectAssExtractionCount_result result = new getAllProjectAssExtractionCount_result();
      receiveBase(result, "getAllProjectAssExtractionCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllProjectAssExtractionCount failed: unknown result");
    }

    public List<ProjectAssExtraction> getListProjectAssExtractionByBaseId(int baseId) throws org.apache.thrift.TException
    {
      send_getListProjectAssExtractionByBaseId(baseId);
      return recv_getListProjectAssExtractionByBaseId();
    }

    public void send_getListProjectAssExtractionByBaseId(int baseId) throws org.apache.thrift.TException
    {
      getListProjectAssExtractionByBaseId_args args = new getListProjectAssExtractionByBaseId_args();
      args.setBaseId(baseId);
      sendBase("getListProjectAssExtractionByBaseId", args);
    }

    public List<ProjectAssExtraction> recv_getListProjectAssExtractionByBaseId() throws org.apache.thrift.TException
    {
      getListProjectAssExtractionByBaseId_result result = new getListProjectAssExtractionByBaseId_result();
      receiveBase(result, "getListProjectAssExtractionByBaseId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListProjectAssExtractionByBaseId failed: unknown result");
    }

    public int batchDeleteProjectAssExtraction(String pids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_batchDeleteProjectAssExtraction(pids);
      return recv_batchDeleteProjectAssExtraction();
    }

    public void send_batchDeleteProjectAssExtraction(String pids) throws org.apache.thrift.TException
    {
      batchDeleteProjectAssExtraction_args args = new batchDeleteProjectAssExtraction_args();
      args.setPids(pids);
      sendBase("batchDeleteProjectAssExtraction", args);
    }

    public int recv_batchDeleteProjectAssExtraction() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      batchDeleteProjectAssExtraction_result result = new batchDeleteProjectAssExtraction_result();
      receiveBase(result, "batchDeleteProjectAssExtraction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchDeleteProjectAssExtraction failed: unknown result");
    }

    public List<ProjectAssHandle> getAllProjectAssHandle(ProjectAssHandle projectAssHandle) throws org.apache.thrift.TException
    {
      send_getAllProjectAssHandle(projectAssHandle);
      return recv_getAllProjectAssHandle();
    }

    public void send_getAllProjectAssHandle(ProjectAssHandle projectAssHandle) throws org.apache.thrift.TException
    {
      getAllProjectAssHandle_args args = new getAllProjectAssHandle_args();
      args.setProjectAssHandle(projectAssHandle);
      sendBase("getAllProjectAssHandle", args);
    }

    public List<ProjectAssHandle> recv_getAllProjectAssHandle() throws org.apache.thrift.TException
    {
      getAllProjectAssHandle_result result = new getAllProjectAssHandle_result();
      receiveBase(result, "getAllProjectAssHandle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllProjectAssHandle failed: unknown result");
    }

    public int getAllProjectAssHandleCount(ProjectAssHandle projectAssHandle) throws org.apache.thrift.TException
    {
      send_getAllProjectAssHandleCount(projectAssHandle);
      return recv_getAllProjectAssHandleCount();
    }

    public void send_getAllProjectAssHandleCount(ProjectAssHandle projectAssHandle) throws org.apache.thrift.TException
    {
      getAllProjectAssHandleCount_args args = new getAllProjectAssHandleCount_args();
      args.setProjectAssHandle(projectAssHandle);
      sendBase("getAllProjectAssHandleCount", args);
    }

    public int recv_getAllProjectAssHandleCount() throws org.apache.thrift.TException
    {
      getAllProjectAssHandleCount_result result = new getAllProjectAssHandleCount_result();
      receiveBase(result, "getAllProjectAssHandleCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllProjectAssHandleCount failed: unknown result");
    }

    public int batchDeleteProjectAssHandle(String pids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_batchDeleteProjectAssHandle(pids);
      return recv_batchDeleteProjectAssHandle();
    }

    public void send_batchDeleteProjectAssHandle(String pids) throws org.apache.thrift.TException
    {
      batchDeleteProjectAssHandle_args args = new batchDeleteProjectAssHandle_args();
      args.setPids(pids);
      sendBase("batchDeleteProjectAssHandle", args);
    }

    public int recv_batchDeleteProjectAssHandle() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      batchDeleteProjectAssHandle_result result = new batchDeleteProjectAssHandle_result();
      receiveBase(result, "batchDeleteProjectAssHandle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchDeleteProjectAssHandle failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllProjectAssKeeping(ProjectAssKeeping projectAssKeeping, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllProjectAssKeeping_call method_call = new getAllProjectAssKeeping_call(projectAssKeeping, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllProjectAssKeeping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectAssKeeping projectAssKeeping;
      public getAllProjectAssKeeping_call(ProjectAssKeeping projectAssKeeping, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectAssKeeping = projectAssKeeping;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllProjectAssKeeping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllProjectAssKeeping_args args = new getAllProjectAssKeeping_args();
        args.setProjectAssKeeping(projectAssKeeping);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProjectAssKeeping> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllProjectAssKeeping();
      }
    }

    public void getAllProjectAssKeepingCount(ProjectAssKeeping projectAssKeeping, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllProjectAssKeepingCount_call method_call = new getAllProjectAssKeepingCount_call(projectAssKeeping, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllProjectAssKeepingCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectAssKeeping projectAssKeeping;
      public getAllProjectAssKeepingCount_call(ProjectAssKeeping projectAssKeeping, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectAssKeeping = projectAssKeeping;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllProjectAssKeepingCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllProjectAssKeepingCount_args args = new getAllProjectAssKeepingCount_args();
        args.setProjectAssKeeping(projectAssKeeping);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllProjectAssKeepingCount();
      }
    }

    public void batchDeleteProjectAssKeeping(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchDeleteProjectAssKeeping_call method_call = new batchDeleteProjectAssKeeping_call(pids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchDeleteProjectAssKeeping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pids;
      public batchDeleteProjectAssKeeping_call(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pids = pids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchDeleteProjectAssKeeping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchDeleteProjectAssKeeping_args args = new batchDeleteProjectAssKeeping_args();
        args.setPids(pids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchDeleteProjectAssKeeping();
      }
    }

    public void getProjectAssKeepingByBaseId(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectAssKeepingByBaseId_call method_call = new getProjectAssKeepingByBaseId_call(baseId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectAssKeepingByBaseId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int baseId;
      public getProjectAssKeepingByBaseId_call(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.baseId = baseId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectAssKeepingByBaseId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectAssKeepingByBaseId_args args = new getProjectAssKeepingByBaseId_args();
        args.setBaseId(baseId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProjectAssKeeping getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectAssKeepingByBaseId();
      }
    }

    public void getListProjectAssKeepingByBaseId(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListProjectAssKeepingByBaseId_call method_call = new getListProjectAssKeepingByBaseId_call(baseId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListProjectAssKeepingByBaseId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int baseId;
      public getListProjectAssKeepingByBaseId_call(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.baseId = baseId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListProjectAssKeepingByBaseId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListProjectAssKeepingByBaseId_args args = new getListProjectAssKeepingByBaseId_args();
        args.setBaseId(baseId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProjectAssKeeping> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListProjectAssKeepingByBaseId();
      }
    }

    public void getAllProjectAssExtraction(ProjectAssExtraction projectAssExtraction, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllProjectAssExtraction_call method_call = new getAllProjectAssExtraction_call(projectAssExtraction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllProjectAssExtraction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectAssExtraction projectAssExtraction;
      public getAllProjectAssExtraction_call(ProjectAssExtraction projectAssExtraction, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectAssExtraction = projectAssExtraction;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllProjectAssExtraction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllProjectAssExtraction_args args = new getAllProjectAssExtraction_args();
        args.setProjectAssExtraction(projectAssExtraction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProjectAssExtraction> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllProjectAssExtraction();
      }
    }

    public void getAllProjectAssExtractionCount(ProjectAssExtraction projectAssExtraction, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllProjectAssExtractionCount_call method_call = new getAllProjectAssExtractionCount_call(projectAssExtraction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllProjectAssExtractionCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectAssExtraction projectAssExtraction;
      public getAllProjectAssExtractionCount_call(ProjectAssExtraction projectAssExtraction, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectAssExtraction = projectAssExtraction;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllProjectAssExtractionCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllProjectAssExtractionCount_args args = new getAllProjectAssExtractionCount_args();
        args.setProjectAssExtraction(projectAssExtraction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllProjectAssExtractionCount();
      }
    }

    public void getListProjectAssExtractionByBaseId(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListProjectAssExtractionByBaseId_call method_call = new getListProjectAssExtractionByBaseId_call(baseId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListProjectAssExtractionByBaseId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int baseId;
      public getListProjectAssExtractionByBaseId_call(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.baseId = baseId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListProjectAssExtractionByBaseId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListProjectAssExtractionByBaseId_args args = new getListProjectAssExtractionByBaseId_args();
        args.setBaseId(baseId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProjectAssExtraction> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListProjectAssExtractionByBaseId();
      }
    }

    public void batchDeleteProjectAssExtraction(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchDeleteProjectAssExtraction_call method_call = new batchDeleteProjectAssExtraction_call(pids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchDeleteProjectAssExtraction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pids;
      public batchDeleteProjectAssExtraction_call(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pids = pids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchDeleteProjectAssExtraction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchDeleteProjectAssExtraction_args args = new batchDeleteProjectAssExtraction_args();
        args.setPids(pids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchDeleteProjectAssExtraction();
      }
    }

    public void getAllProjectAssHandle(ProjectAssHandle projectAssHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllProjectAssHandle_call method_call = new getAllProjectAssHandle_call(projectAssHandle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllProjectAssHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectAssHandle projectAssHandle;
      public getAllProjectAssHandle_call(ProjectAssHandle projectAssHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectAssHandle = projectAssHandle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllProjectAssHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllProjectAssHandle_args args = new getAllProjectAssHandle_args();
        args.setProjectAssHandle(projectAssHandle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProjectAssHandle> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllProjectAssHandle();
      }
    }

    public void getAllProjectAssHandleCount(ProjectAssHandle projectAssHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllProjectAssHandleCount_call method_call = new getAllProjectAssHandleCount_call(projectAssHandle, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllProjectAssHandleCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectAssHandle projectAssHandle;
      public getAllProjectAssHandleCount_call(ProjectAssHandle projectAssHandle, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectAssHandle = projectAssHandle;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllProjectAssHandleCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllProjectAssHandleCount_args args = new getAllProjectAssHandleCount_args();
        args.setProjectAssHandle(projectAssHandle);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllProjectAssHandleCount();
      }
    }

    public void batchDeleteProjectAssHandle(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchDeleteProjectAssHandle_call method_call = new batchDeleteProjectAssHandle_call(pids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchDeleteProjectAssHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pids;
      public batchDeleteProjectAssHandle_call(String pids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pids = pids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchDeleteProjectAssHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchDeleteProjectAssHandle_args args = new batchDeleteProjectAssHandle_args();
        args.setPids(pids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchDeleteProjectAssHandle();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllProjectAssKeeping", new getAllProjectAssKeeping());
      processMap.put("getAllProjectAssKeepingCount", new getAllProjectAssKeepingCount());
      processMap.put("batchDeleteProjectAssKeeping", new batchDeleteProjectAssKeeping());
      processMap.put("getProjectAssKeepingByBaseId", new getProjectAssKeepingByBaseId());
      processMap.put("getListProjectAssKeepingByBaseId", new getListProjectAssKeepingByBaseId());
      processMap.put("getAllProjectAssExtraction", new getAllProjectAssExtraction());
      processMap.put("getAllProjectAssExtractionCount", new getAllProjectAssExtractionCount());
      processMap.put("getListProjectAssExtractionByBaseId", new getListProjectAssExtractionByBaseId());
      processMap.put("batchDeleteProjectAssExtraction", new batchDeleteProjectAssExtraction());
      processMap.put("getAllProjectAssHandle", new getAllProjectAssHandle());
      processMap.put("getAllProjectAssHandleCount", new getAllProjectAssHandleCount());
      processMap.put("batchDeleteProjectAssHandle", new batchDeleteProjectAssHandle());
      return processMap;
    }

    public static class getAllProjectAssKeeping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllProjectAssKeeping_args> {
      public getAllProjectAssKeeping() {
        super("getAllProjectAssKeeping");
      }

      public getAllProjectAssKeeping_args getEmptyArgsInstance() {
        return new getAllProjectAssKeeping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllProjectAssKeeping_result getResult(I iface, getAllProjectAssKeeping_args args) throws org.apache.thrift.TException {
        getAllProjectAssKeeping_result result = new getAllProjectAssKeeping_result();
        result.success = iface.getAllProjectAssKeeping(args.projectAssKeeping);
        return result;
      }
    }

    public static class getAllProjectAssKeepingCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllProjectAssKeepingCount_args> {
      public getAllProjectAssKeepingCount() {
        super("getAllProjectAssKeepingCount");
      }

      public getAllProjectAssKeepingCount_args getEmptyArgsInstance() {
        return new getAllProjectAssKeepingCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllProjectAssKeepingCount_result getResult(I iface, getAllProjectAssKeepingCount_args args) throws org.apache.thrift.TException {
        getAllProjectAssKeepingCount_result result = new getAllProjectAssKeepingCount_result();
        result.success = iface.getAllProjectAssKeepingCount(args.projectAssKeeping);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class batchDeleteProjectAssKeeping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchDeleteProjectAssKeeping_args> {
      public batchDeleteProjectAssKeeping() {
        super("batchDeleteProjectAssKeeping");
      }

      public batchDeleteProjectAssKeeping_args getEmptyArgsInstance() {
        return new batchDeleteProjectAssKeeping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchDeleteProjectAssKeeping_result getResult(I iface, batchDeleteProjectAssKeeping_args args) throws org.apache.thrift.TException {
        batchDeleteProjectAssKeeping_result result = new batchDeleteProjectAssKeeping_result();
        try {
          result.success = iface.batchDeleteProjectAssKeeping(args.pids);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getProjectAssKeepingByBaseId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectAssKeepingByBaseId_args> {
      public getProjectAssKeepingByBaseId() {
        super("getProjectAssKeepingByBaseId");
      }

      public getProjectAssKeepingByBaseId_args getEmptyArgsInstance() {
        return new getProjectAssKeepingByBaseId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProjectAssKeepingByBaseId_result getResult(I iface, getProjectAssKeepingByBaseId_args args) throws org.apache.thrift.TException {
        getProjectAssKeepingByBaseId_result result = new getProjectAssKeepingByBaseId_result();
        result.success = iface.getProjectAssKeepingByBaseId(args.baseId);
        return result;
      }
    }

    public static class getListProjectAssKeepingByBaseId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListProjectAssKeepingByBaseId_args> {
      public getListProjectAssKeepingByBaseId() {
        super("getListProjectAssKeepingByBaseId");
      }

      public getListProjectAssKeepingByBaseId_args getEmptyArgsInstance() {
        return new getListProjectAssKeepingByBaseId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListProjectAssKeepingByBaseId_result getResult(I iface, getListProjectAssKeepingByBaseId_args args) throws org.apache.thrift.TException {
        getListProjectAssKeepingByBaseId_result result = new getListProjectAssKeepingByBaseId_result();
        result.success = iface.getListProjectAssKeepingByBaseId(args.baseId);
        return result;
      }
    }

    public static class getAllProjectAssExtraction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllProjectAssExtraction_args> {
      public getAllProjectAssExtraction() {
        super("getAllProjectAssExtraction");
      }

      public getAllProjectAssExtraction_args getEmptyArgsInstance() {
        return new getAllProjectAssExtraction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllProjectAssExtraction_result getResult(I iface, getAllProjectAssExtraction_args args) throws org.apache.thrift.TException {
        getAllProjectAssExtraction_result result = new getAllProjectAssExtraction_result();
        result.success = iface.getAllProjectAssExtraction(args.projectAssExtraction);
        return result;
      }
    }

    public static class getAllProjectAssExtractionCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllProjectAssExtractionCount_args> {
      public getAllProjectAssExtractionCount() {
        super("getAllProjectAssExtractionCount");
      }

      public getAllProjectAssExtractionCount_args getEmptyArgsInstance() {
        return new getAllProjectAssExtractionCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllProjectAssExtractionCount_result getResult(I iface, getAllProjectAssExtractionCount_args args) throws org.apache.thrift.TException {
        getAllProjectAssExtractionCount_result result = new getAllProjectAssExtractionCount_result();
        result.success = iface.getAllProjectAssExtractionCount(args.projectAssExtraction);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getListProjectAssExtractionByBaseId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListProjectAssExtractionByBaseId_args> {
      public getListProjectAssExtractionByBaseId() {
        super("getListProjectAssExtractionByBaseId");
      }

      public getListProjectAssExtractionByBaseId_args getEmptyArgsInstance() {
        return new getListProjectAssExtractionByBaseId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListProjectAssExtractionByBaseId_result getResult(I iface, getListProjectAssExtractionByBaseId_args args) throws org.apache.thrift.TException {
        getListProjectAssExtractionByBaseId_result result = new getListProjectAssExtractionByBaseId_result();
        result.success = iface.getListProjectAssExtractionByBaseId(args.baseId);
        return result;
      }
    }

    public static class batchDeleteProjectAssExtraction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchDeleteProjectAssExtraction_args> {
      public batchDeleteProjectAssExtraction() {
        super("batchDeleteProjectAssExtraction");
      }

      public batchDeleteProjectAssExtraction_args getEmptyArgsInstance() {
        return new batchDeleteProjectAssExtraction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchDeleteProjectAssExtraction_result getResult(I iface, batchDeleteProjectAssExtraction_args args) throws org.apache.thrift.TException {
        batchDeleteProjectAssExtraction_result result = new batchDeleteProjectAssExtraction_result();
        try {
          result.success = iface.batchDeleteProjectAssExtraction(args.pids);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getAllProjectAssHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllProjectAssHandle_args> {
      public getAllProjectAssHandle() {
        super("getAllProjectAssHandle");
      }

      public getAllProjectAssHandle_args getEmptyArgsInstance() {
        return new getAllProjectAssHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllProjectAssHandle_result getResult(I iface, getAllProjectAssHandle_args args) throws org.apache.thrift.TException {
        getAllProjectAssHandle_result result = new getAllProjectAssHandle_result();
        result.success = iface.getAllProjectAssHandle(args.projectAssHandle);
        return result;
      }
    }

    public static class getAllProjectAssHandleCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllProjectAssHandleCount_args> {
      public getAllProjectAssHandleCount() {
        super("getAllProjectAssHandleCount");
      }

      public getAllProjectAssHandleCount_args getEmptyArgsInstance() {
        return new getAllProjectAssHandleCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllProjectAssHandleCount_result getResult(I iface, getAllProjectAssHandleCount_args args) throws org.apache.thrift.TException {
        getAllProjectAssHandleCount_result result = new getAllProjectAssHandleCount_result();
        result.success = iface.getAllProjectAssHandleCount(args.projectAssHandle);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class batchDeleteProjectAssHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchDeleteProjectAssHandle_args> {
      public batchDeleteProjectAssHandle() {
        super("batchDeleteProjectAssHandle");
      }

      public batchDeleteProjectAssHandle_args getEmptyArgsInstance() {
        return new batchDeleteProjectAssHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchDeleteProjectAssHandle_result getResult(I iface, batchDeleteProjectAssHandle_args args) throws org.apache.thrift.TException {
        batchDeleteProjectAssHandle_result result = new batchDeleteProjectAssHandle_result();
        try {
          result.success = iface.batchDeleteProjectAssHandle(args.pids);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllProjectAssKeeping", new getAllProjectAssKeeping());
      processMap.put("getAllProjectAssKeepingCount", new getAllProjectAssKeepingCount());
      processMap.put("batchDeleteProjectAssKeeping", new batchDeleteProjectAssKeeping());
      processMap.put("getProjectAssKeepingByBaseId", new getProjectAssKeepingByBaseId());
      processMap.put("getListProjectAssKeepingByBaseId", new getListProjectAssKeepingByBaseId());
      processMap.put("getAllProjectAssExtraction", new getAllProjectAssExtraction());
      processMap.put("getAllProjectAssExtractionCount", new getAllProjectAssExtractionCount());
      processMap.put("getListProjectAssExtractionByBaseId", new getListProjectAssExtractionByBaseId());
      processMap.put("batchDeleteProjectAssExtraction", new batchDeleteProjectAssExtraction());
      processMap.put("getAllProjectAssHandle", new getAllProjectAssHandle());
      processMap.put("getAllProjectAssHandleCount", new getAllProjectAssHandleCount());
      processMap.put("batchDeleteProjectAssHandle", new batchDeleteProjectAssHandle());
      return processMap;
    }

    public static class getAllProjectAssKeeping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllProjectAssKeeping_args, List<ProjectAssKeeping>> {
      public getAllProjectAssKeeping() {
        super("getAllProjectAssKeeping");
      }

      public getAllProjectAssKeeping_args getEmptyArgsInstance() {
        return new getAllProjectAssKeeping_args();
      }

      public AsyncMethodCallback<List<ProjectAssKeeping>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProjectAssKeeping>>() { 
          public void onComplete(List<ProjectAssKeeping> o) {
            getAllProjectAssKeeping_result result = new getAllProjectAssKeeping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllProjectAssKeeping_result result = new getAllProjectAssKeeping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllProjectAssKeeping_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProjectAssKeeping>> resultHandler) throws TException {
        iface.getAllProjectAssKeeping(args.projectAssKeeping,resultHandler);
      }
    }

    public static class getAllProjectAssKeepingCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllProjectAssKeepingCount_args, Integer> {
      public getAllProjectAssKeepingCount() {
        super("getAllProjectAssKeepingCount");
      }

      public getAllProjectAssKeepingCount_args getEmptyArgsInstance() {
        return new getAllProjectAssKeepingCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getAllProjectAssKeepingCount_result result = new getAllProjectAssKeepingCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllProjectAssKeepingCount_result result = new getAllProjectAssKeepingCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllProjectAssKeepingCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getAllProjectAssKeepingCount(args.projectAssKeeping,resultHandler);
      }
    }

    public static class batchDeleteProjectAssKeeping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchDeleteProjectAssKeeping_args, Integer> {
      public batchDeleteProjectAssKeeping() {
        super("batchDeleteProjectAssKeeping");
      }

      public batchDeleteProjectAssKeeping_args getEmptyArgsInstance() {
        return new batchDeleteProjectAssKeeping_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchDeleteProjectAssKeeping_result result = new batchDeleteProjectAssKeeping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchDeleteProjectAssKeeping_result result = new batchDeleteProjectAssKeeping_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchDeleteProjectAssKeeping_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchDeleteProjectAssKeeping(args.pids,resultHandler);
      }
    }

    public static class getProjectAssKeepingByBaseId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProjectAssKeepingByBaseId_args, ProjectAssKeeping> {
      public getProjectAssKeepingByBaseId() {
        super("getProjectAssKeepingByBaseId");
      }

      public getProjectAssKeepingByBaseId_args getEmptyArgsInstance() {
        return new getProjectAssKeepingByBaseId_args();
      }

      public AsyncMethodCallback<ProjectAssKeeping> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProjectAssKeeping>() { 
          public void onComplete(ProjectAssKeeping o) {
            getProjectAssKeepingByBaseId_result result = new getProjectAssKeepingByBaseId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProjectAssKeepingByBaseId_result result = new getProjectAssKeepingByBaseId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProjectAssKeepingByBaseId_args args, org.apache.thrift.async.AsyncMethodCallback<ProjectAssKeeping> resultHandler) throws TException {
        iface.getProjectAssKeepingByBaseId(args.baseId,resultHandler);
      }
    }

    public static class getListProjectAssKeepingByBaseId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getListProjectAssKeepingByBaseId_args, List<ProjectAssKeeping>> {
      public getListProjectAssKeepingByBaseId() {
        super("getListProjectAssKeepingByBaseId");
      }

      public getListProjectAssKeepingByBaseId_args getEmptyArgsInstance() {
        return new getListProjectAssKeepingByBaseId_args();
      }

      public AsyncMethodCallback<List<ProjectAssKeeping>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProjectAssKeeping>>() { 
          public void onComplete(List<ProjectAssKeeping> o) {
            getListProjectAssKeepingByBaseId_result result = new getListProjectAssKeepingByBaseId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getListProjectAssKeepingByBaseId_result result = new getListProjectAssKeepingByBaseId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getListProjectAssKeepingByBaseId_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProjectAssKeeping>> resultHandler) throws TException {
        iface.getListProjectAssKeepingByBaseId(args.baseId,resultHandler);
      }
    }

    public static class getAllProjectAssExtraction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllProjectAssExtraction_args, List<ProjectAssExtraction>> {
      public getAllProjectAssExtraction() {
        super("getAllProjectAssExtraction");
      }

      public getAllProjectAssExtraction_args getEmptyArgsInstance() {
        return new getAllProjectAssExtraction_args();
      }

      public AsyncMethodCallback<List<ProjectAssExtraction>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProjectAssExtraction>>() { 
          public void onComplete(List<ProjectAssExtraction> o) {
            getAllProjectAssExtraction_result result = new getAllProjectAssExtraction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllProjectAssExtraction_result result = new getAllProjectAssExtraction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllProjectAssExtraction_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProjectAssExtraction>> resultHandler) throws TException {
        iface.getAllProjectAssExtraction(args.projectAssExtraction,resultHandler);
      }
    }

    public static class getAllProjectAssExtractionCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllProjectAssExtractionCount_args, Integer> {
      public getAllProjectAssExtractionCount() {
        super("getAllProjectAssExtractionCount");
      }

      public getAllProjectAssExtractionCount_args getEmptyArgsInstance() {
        return new getAllProjectAssExtractionCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getAllProjectAssExtractionCount_result result = new getAllProjectAssExtractionCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllProjectAssExtractionCount_result result = new getAllProjectAssExtractionCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllProjectAssExtractionCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getAllProjectAssExtractionCount(args.projectAssExtraction,resultHandler);
      }
    }

    public static class getListProjectAssExtractionByBaseId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getListProjectAssExtractionByBaseId_args, List<ProjectAssExtraction>> {
      public getListProjectAssExtractionByBaseId() {
        super("getListProjectAssExtractionByBaseId");
      }

      public getListProjectAssExtractionByBaseId_args getEmptyArgsInstance() {
        return new getListProjectAssExtractionByBaseId_args();
      }

      public AsyncMethodCallback<List<ProjectAssExtraction>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProjectAssExtraction>>() { 
          public void onComplete(List<ProjectAssExtraction> o) {
            getListProjectAssExtractionByBaseId_result result = new getListProjectAssExtractionByBaseId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getListProjectAssExtractionByBaseId_result result = new getListProjectAssExtractionByBaseId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getListProjectAssExtractionByBaseId_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProjectAssExtraction>> resultHandler) throws TException {
        iface.getListProjectAssExtractionByBaseId(args.baseId,resultHandler);
      }
    }

    public static class batchDeleteProjectAssExtraction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchDeleteProjectAssExtraction_args, Integer> {
      public batchDeleteProjectAssExtraction() {
        super("batchDeleteProjectAssExtraction");
      }

      public batchDeleteProjectAssExtraction_args getEmptyArgsInstance() {
        return new batchDeleteProjectAssExtraction_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchDeleteProjectAssExtraction_result result = new batchDeleteProjectAssExtraction_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchDeleteProjectAssExtraction_result result = new batchDeleteProjectAssExtraction_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchDeleteProjectAssExtraction_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchDeleteProjectAssExtraction(args.pids,resultHandler);
      }
    }

    public static class getAllProjectAssHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllProjectAssHandle_args, List<ProjectAssHandle>> {
      public getAllProjectAssHandle() {
        super("getAllProjectAssHandle");
      }

      public getAllProjectAssHandle_args getEmptyArgsInstance() {
        return new getAllProjectAssHandle_args();
      }

      public AsyncMethodCallback<List<ProjectAssHandle>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProjectAssHandle>>() { 
          public void onComplete(List<ProjectAssHandle> o) {
            getAllProjectAssHandle_result result = new getAllProjectAssHandle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllProjectAssHandle_result result = new getAllProjectAssHandle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllProjectAssHandle_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProjectAssHandle>> resultHandler) throws TException {
        iface.getAllProjectAssHandle(args.projectAssHandle,resultHandler);
      }
    }

    public static class getAllProjectAssHandleCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllProjectAssHandleCount_args, Integer> {
      public getAllProjectAssHandleCount() {
        super("getAllProjectAssHandleCount");
      }

      public getAllProjectAssHandleCount_args getEmptyArgsInstance() {
        return new getAllProjectAssHandleCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getAllProjectAssHandleCount_result result = new getAllProjectAssHandleCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllProjectAssHandleCount_result result = new getAllProjectAssHandleCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllProjectAssHandleCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getAllProjectAssHandleCount(args.projectAssHandle,resultHandler);
      }
    }

    public static class batchDeleteProjectAssHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchDeleteProjectAssHandle_args, Integer> {
      public batchDeleteProjectAssHandle() {
        super("batchDeleteProjectAssHandle");
      }

      public batchDeleteProjectAssHandle_args getEmptyArgsInstance() {
        return new batchDeleteProjectAssHandle_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            batchDeleteProjectAssHandle_result result = new batchDeleteProjectAssHandle_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchDeleteProjectAssHandle_result result = new batchDeleteProjectAssHandle_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchDeleteProjectAssHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.batchDeleteProjectAssHandle(args.pids,resultHandler);
      }
    }

  }

  public static class getAllProjectAssKeeping_args implements org.apache.thrift.TBase<getAllProjectAssKeeping_args, getAllProjectAssKeeping_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssKeeping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssKeeping_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ASS_KEEPING_FIELD_DESC = new org.apache.thrift.protocol.TField("projectAssKeeping", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssKeeping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssKeeping_argsTupleSchemeFactory());
    }

    public ProjectAssKeeping projectAssKeeping; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ASS_KEEPING((short)1, "projectAssKeeping");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ASS_KEEPING
            return PROJECT_ASS_KEEPING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ASS_KEEPING, new org.apache.thrift.meta_data.FieldMetaData("projectAssKeeping", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssKeeping.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssKeeping_args.class, metaDataMap);
    }

    public getAllProjectAssKeeping_args() {
    }

    public getAllProjectAssKeeping_args(
      ProjectAssKeeping projectAssKeeping)
    {
      this();
      this.projectAssKeeping = projectAssKeeping;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssKeeping_args(getAllProjectAssKeeping_args other) {
      if (other.isSetProjectAssKeeping()) {
        this.projectAssKeeping = new ProjectAssKeeping(other.projectAssKeeping);
      }
    }

    public getAllProjectAssKeeping_args deepCopy() {
      return new getAllProjectAssKeeping_args(this);
    }

    @Override
    public void clear() {
      this.projectAssKeeping = null;
    }

    public ProjectAssKeeping getProjectAssKeeping() {
      return this.projectAssKeeping;
    }

    public getAllProjectAssKeeping_args setProjectAssKeeping(ProjectAssKeeping projectAssKeeping) {
      this.projectAssKeeping = projectAssKeeping;
      return this;
    }

    public void unsetProjectAssKeeping() {
      this.projectAssKeeping = null;
    }

    /** Returns true if field projectAssKeeping is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectAssKeeping() {
      return this.projectAssKeeping != null;
    }

    public void setProjectAssKeepingIsSet(boolean value) {
      if (!value) {
        this.projectAssKeeping = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ASS_KEEPING:
        if (value == null) {
          unsetProjectAssKeeping();
        } else {
          setProjectAssKeeping((ProjectAssKeeping)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ASS_KEEPING:
        return getProjectAssKeeping();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ASS_KEEPING:
        return isSetProjectAssKeeping();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssKeeping_args)
        return this.equals((getAllProjectAssKeeping_args)that);
      return false;
    }

    public boolean equals(getAllProjectAssKeeping_args that) {
      if (that == null)
        return false;

      boolean this_present_projectAssKeeping = true && this.isSetProjectAssKeeping();
      boolean that_present_projectAssKeeping = true && that.isSetProjectAssKeeping();
      if (this_present_projectAssKeeping || that_present_projectAssKeeping) {
        if (!(this_present_projectAssKeeping && that_present_projectAssKeeping))
          return false;
        if (!this.projectAssKeeping.equals(that.projectAssKeeping))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectAssKeeping = true && (isSetProjectAssKeeping());
      list.add(present_projectAssKeeping);
      if (present_projectAssKeeping)
        list.add(projectAssKeeping);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssKeeping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectAssKeeping()).compareTo(other.isSetProjectAssKeeping());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectAssKeeping()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectAssKeeping, other.projectAssKeeping);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssKeeping_args(");
      boolean first = true;

      sb.append("projectAssKeeping:");
      if (this.projectAssKeeping == null) {
        sb.append("null");
      } else {
        sb.append(this.projectAssKeeping);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectAssKeeping != null) {
        projectAssKeeping.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssKeeping_argsStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssKeeping_argsStandardScheme getScheme() {
        return new getAllProjectAssKeeping_argsStandardScheme();
      }
    }

    private static class getAllProjectAssKeeping_argsStandardScheme extends StandardScheme<getAllProjectAssKeeping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssKeeping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ASS_KEEPING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectAssKeeping = new ProjectAssKeeping();
                struct.projectAssKeeping.read(iprot);
                struct.setProjectAssKeepingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssKeeping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectAssKeeping != null) {
          oprot.writeFieldBegin(PROJECT_ASS_KEEPING_FIELD_DESC);
          struct.projectAssKeeping.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssKeeping_argsTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssKeeping_argsTupleScheme getScheme() {
        return new getAllProjectAssKeeping_argsTupleScheme();
      }
    }

    private static class getAllProjectAssKeeping_argsTupleScheme extends TupleScheme<getAllProjectAssKeeping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssKeeping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectAssKeeping()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectAssKeeping()) {
          struct.projectAssKeeping.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssKeeping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectAssKeeping = new ProjectAssKeeping();
          struct.projectAssKeeping.read(iprot);
          struct.setProjectAssKeepingIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssKeeping_result implements org.apache.thrift.TBase<getAllProjectAssKeeping_result, getAllProjectAssKeeping_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssKeeping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssKeeping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssKeeping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssKeeping_resultTupleSchemeFactory());
    }

    public List<ProjectAssKeeping> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssKeeping.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssKeeping_result.class, metaDataMap);
    }

    public getAllProjectAssKeeping_result() {
    }

    public getAllProjectAssKeeping_result(
      List<ProjectAssKeeping> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssKeeping_result(getAllProjectAssKeeping_result other) {
      if (other.isSetSuccess()) {
        List<ProjectAssKeeping> __this__success = new ArrayList<ProjectAssKeeping>(other.success.size());
        for (ProjectAssKeeping other_element : other.success) {
          __this__success.add(new ProjectAssKeeping(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllProjectAssKeeping_result deepCopy() {
      return new getAllProjectAssKeeping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProjectAssKeeping> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProjectAssKeeping elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProjectAssKeeping>();
      }
      this.success.add(elem);
    }

    public List<ProjectAssKeeping> getSuccess() {
      return this.success;
    }

    public getAllProjectAssKeeping_result setSuccess(List<ProjectAssKeeping> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProjectAssKeeping>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssKeeping_result)
        return this.equals((getAllProjectAssKeeping_result)that);
      return false;
    }

    public boolean equals(getAllProjectAssKeeping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssKeeping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssKeeping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssKeeping_resultStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssKeeping_resultStandardScheme getScheme() {
        return new getAllProjectAssKeeping_resultStandardScheme();
      }
    }

    private static class getAllProjectAssKeeping_resultStandardScheme extends StandardScheme<getAllProjectAssKeeping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssKeeping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<ProjectAssKeeping>(_list64.size);
                  ProjectAssKeeping _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new ProjectAssKeeping();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssKeeping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProjectAssKeeping _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssKeeping_resultTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssKeeping_resultTupleScheme getScheme() {
        return new getAllProjectAssKeeping_resultTupleScheme();
      }
    }

    private static class getAllProjectAssKeeping_resultTupleScheme extends TupleScheme<getAllProjectAssKeeping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssKeeping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProjectAssKeeping _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssKeeping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProjectAssKeeping>(_list69.size);
            ProjectAssKeeping _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new ProjectAssKeeping();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssKeepingCount_args implements org.apache.thrift.TBase<getAllProjectAssKeepingCount_args, getAllProjectAssKeepingCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssKeepingCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssKeepingCount_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ASS_KEEPING_FIELD_DESC = new org.apache.thrift.protocol.TField("projectAssKeeping", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssKeepingCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssKeepingCount_argsTupleSchemeFactory());
    }

    public ProjectAssKeeping projectAssKeeping; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ASS_KEEPING((short)1, "projectAssKeeping");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ASS_KEEPING
            return PROJECT_ASS_KEEPING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ASS_KEEPING, new org.apache.thrift.meta_data.FieldMetaData("projectAssKeeping", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssKeeping.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssKeepingCount_args.class, metaDataMap);
    }

    public getAllProjectAssKeepingCount_args() {
    }

    public getAllProjectAssKeepingCount_args(
      ProjectAssKeeping projectAssKeeping)
    {
      this();
      this.projectAssKeeping = projectAssKeeping;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssKeepingCount_args(getAllProjectAssKeepingCount_args other) {
      if (other.isSetProjectAssKeeping()) {
        this.projectAssKeeping = new ProjectAssKeeping(other.projectAssKeeping);
      }
    }

    public getAllProjectAssKeepingCount_args deepCopy() {
      return new getAllProjectAssKeepingCount_args(this);
    }

    @Override
    public void clear() {
      this.projectAssKeeping = null;
    }

    public ProjectAssKeeping getProjectAssKeeping() {
      return this.projectAssKeeping;
    }

    public getAllProjectAssKeepingCount_args setProjectAssKeeping(ProjectAssKeeping projectAssKeeping) {
      this.projectAssKeeping = projectAssKeeping;
      return this;
    }

    public void unsetProjectAssKeeping() {
      this.projectAssKeeping = null;
    }

    /** Returns true if field projectAssKeeping is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectAssKeeping() {
      return this.projectAssKeeping != null;
    }

    public void setProjectAssKeepingIsSet(boolean value) {
      if (!value) {
        this.projectAssKeeping = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ASS_KEEPING:
        if (value == null) {
          unsetProjectAssKeeping();
        } else {
          setProjectAssKeeping((ProjectAssKeeping)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ASS_KEEPING:
        return getProjectAssKeeping();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ASS_KEEPING:
        return isSetProjectAssKeeping();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssKeepingCount_args)
        return this.equals((getAllProjectAssKeepingCount_args)that);
      return false;
    }

    public boolean equals(getAllProjectAssKeepingCount_args that) {
      if (that == null)
        return false;

      boolean this_present_projectAssKeeping = true && this.isSetProjectAssKeeping();
      boolean that_present_projectAssKeeping = true && that.isSetProjectAssKeeping();
      if (this_present_projectAssKeeping || that_present_projectAssKeeping) {
        if (!(this_present_projectAssKeeping && that_present_projectAssKeeping))
          return false;
        if (!this.projectAssKeeping.equals(that.projectAssKeeping))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectAssKeeping = true && (isSetProjectAssKeeping());
      list.add(present_projectAssKeeping);
      if (present_projectAssKeeping)
        list.add(projectAssKeeping);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssKeepingCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectAssKeeping()).compareTo(other.isSetProjectAssKeeping());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectAssKeeping()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectAssKeeping, other.projectAssKeeping);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssKeepingCount_args(");
      boolean first = true;

      sb.append("projectAssKeeping:");
      if (this.projectAssKeeping == null) {
        sb.append("null");
      } else {
        sb.append(this.projectAssKeeping);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectAssKeeping != null) {
        projectAssKeeping.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssKeepingCount_argsStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssKeepingCount_argsStandardScheme getScheme() {
        return new getAllProjectAssKeepingCount_argsStandardScheme();
      }
    }

    private static class getAllProjectAssKeepingCount_argsStandardScheme extends StandardScheme<getAllProjectAssKeepingCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssKeepingCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ASS_KEEPING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectAssKeeping = new ProjectAssKeeping();
                struct.projectAssKeeping.read(iprot);
                struct.setProjectAssKeepingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssKeepingCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectAssKeeping != null) {
          oprot.writeFieldBegin(PROJECT_ASS_KEEPING_FIELD_DESC);
          struct.projectAssKeeping.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssKeepingCount_argsTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssKeepingCount_argsTupleScheme getScheme() {
        return new getAllProjectAssKeepingCount_argsTupleScheme();
      }
    }

    private static class getAllProjectAssKeepingCount_argsTupleScheme extends TupleScheme<getAllProjectAssKeepingCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssKeepingCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectAssKeeping()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectAssKeeping()) {
          struct.projectAssKeeping.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssKeepingCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectAssKeeping = new ProjectAssKeeping();
          struct.projectAssKeeping.read(iprot);
          struct.setProjectAssKeepingIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssKeepingCount_result implements org.apache.thrift.TBase<getAllProjectAssKeepingCount_result, getAllProjectAssKeepingCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssKeepingCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssKeepingCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssKeepingCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssKeepingCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssKeepingCount_result.class, metaDataMap);
    }

    public getAllProjectAssKeepingCount_result() {
    }

    public getAllProjectAssKeepingCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssKeepingCount_result(getAllProjectAssKeepingCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getAllProjectAssKeepingCount_result deepCopy() {
      return new getAllProjectAssKeepingCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAllProjectAssKeepingCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssKeepingCount_result)
        return this.equals((getAllProjectAssKeepingCount_result)that);
      return false;
    }

    public boolean equals(getAllProjectAssKeepingCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssKeepingCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssKeepingCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssKeepingCount_resultStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssKeepingCount_resultStandardScheme getScheme() {
        return new getAllProjectAssKeepingCount_resultStandardScheme();
      }
    }

    private static class getAllProjectAssKeepingCount_resultStandardScheme extends StandardScheme<getAllProjectAssKeepingCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssKeepingCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssKeepingCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssKeepingCount_resultTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssKeepingCount_resultTupleScheme getScheme() {
        return new getAllProjectAssKeepingCount_resultTupleScheme();
      }
    }

    private static class getAllProjectAssKeepingCount_resultTupleScheme extends TupleScheme<getAllProjectAssKeepingCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssKeepingCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssKeepingCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchDeleteProjectAssKeeping_args implements org.apache.thrift.TBase<batchDeleteProjectAssKeeping_args, batchDeleteProjectAssKeeping_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteProjectAssKeeping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteProjectAssKeeping_args");

    private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDeleteProjectAssKeeping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDeleteProjectAssKeeping_argsTupleSchemeFactory());
    }

    public String pids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIDS((short)1, "pids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIDS
            return PIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteProjectAssKeeping_args.class, metaDataMap);
    }

    public batchDeleteProjectAssKeeping_args() {
    }

    public batchDeleteProjectAssKeeping_args(
      String pids)
    {
      this();
      this.pids = pids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDeleteProjectAssKeeping_args(batchDeleteProjectAssKeeping_args other) {
      if (other.isSetPids()) {
        this.pids = other.pids;
      }
    }

    public batchDeleteProjectAssKeeping_args deepCopy() {
      return new batchDeleteProjectAssKeeping_args(this);
    }

    @Override
    public void clear() {
      this.pids = null;
    }

    public String getPids() {
      return this.pids;
    }

    public batchDeleteProjectAssKeeping_args setPids(String pids) {
      this.pids = pids;
      return this;
    }

    public void unsetPids() {
      this.pids = null;
    }

    /** Returns true if field pids is set (has been assigned a value) and false otherwise */
    public boolean isSetPids() {
      return this.pids != null;
    }

    public void setPidsIsSet(boolean value) {
      if (!value) {
        this.pids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIDS:
        if (value == null) {
          unsetPids();
        } else {
          setPids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIDS:
        return getPids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIDS:
        return isSetPids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDeleteProjectAssKeeping_args)
        return this.equals((batchDeleteProjectAssKeeping_args)that);
      return false;
    }

    public boolean equals(batchDeleteProjectAssKeeping_args that) {
      if (that == null)
        return false;

      boolean this_present_pids = true && this.isSetPids();
      boolean that_present_pids = true && that.isSetPids();
      if (this_present_pids || that_present_pids) {
        if (!(this_present_pids && that_present_pids))
          return false;
        if (!this.pids.equals(that.pids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pids = true && (isSetPids());
      list.add(present_pids);
      if (present_pids)
        list.add(pids);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDeleteProjectAssKeeping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDeleteProjectAssKeeping_args(");
      boolean first = true;

      sb.append("pids:");
      if (this.pids == null) {
        sb.append("null");
      } else {
        sb.append(this.pids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDeleteProjectAssKeeping_argsStandardSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssKeeping_argsStandardScheme getScheme() {
        return new batchDeleteProjectAssKeeping_argsStandardScheme();
      }
    }

    private static class batchDeleteProjectAssKeeping_argsStandardScheme extends StandardScheme<batchDeleteProjectAssKeeping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteProjectAssKeeping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pids = iprot.readString();
                struct.setPidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteProjectAssKeeping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pids != null) {
          oprot.writeFieldBegin(PIDS_FIELD_DESC);
          oprot.writeString(struct.pids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDeleteProjectAssKeeping_argsTupleSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssKeeping_argsTupleScheme getScheme() {
        return new batchDeleteProjectAssKeeping_argsTupleScheme();
      }
    }

    private static class batchDeleteProjectAssKeeping_argsTupleScheme extends TupleScheme<batchDeleteProjectAssKeeping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssKeeping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPids()) {
          oprot.writeString(struct.pids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssKeeping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pids = iprot.readString();
          struct.setPidsIsSet(true);
        }
      }
    }

  }

  public static class batchDeleteProjectAssKeeping_result implements org.apache.thrift.TBase<batchDeleteProjectAssKeeping_result, batchDeleteProjectAssKeeping_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteProjectAssKeeping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteProjectAssKeeping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDeleteProjectAssKeeping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDeleteProjectAssKeeping_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteProjectAssKeeping_result.class, metaDataMap);
    }

    public batchDeleteProjectAssKeeping_result() {
    }

    public batchDeleteProjectAssKeeping_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDeleteProjectAssKeeping_result(batchDeleteProjectAssKeeping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public batchDeleteProjectAssKeeping_result deepCopy() {
      return new batchDeleteProjectAssKeeping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchDeleteProjectAssKeeping_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public batchDeleteProjectAssKeeping_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDeleteProjectAssKeeping_result)
        return this.equals((batchDeleteProjectAssKeeping_result)that);
      return false;
    }

    public boolean equals(batchDeleteProjectAssKeeping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDeleteProjectAssKeeping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDeleteProjectAssKeeping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDeleteProjectAssKeeping_resultStandardSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssKeeping_resultStandardScheme getScheme() {
        return new batchDeleteProjectAssKeeping_resultStandardScheme();
      }
    }

    private static class batchDeleteProjectAssKeeping_resultStandardScheme extends StandardScheme<batchDeleteProjectAssKeeping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteProjectAssKeeping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteProjectAssKeeping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDeleteProjectAssKeeping_resultTupleSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssKeeping_resultTupleScheme getScheme() {
        return new batchDeleteProjectAssKeeping_resultTupleScheme();
      }
    }

    private static class batchDeleteProjectAssKeeping_resultTupleScheme extends TupleScheme<batchDeleteProjectAssKeeping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssKeeping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssKeeping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getProjectAssKeepingByBaseId_args implements org.apache.thrift.TBase<getProjectAssKeepingByBaseId_args, getProjectAssKeepingByBaseId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectAssKeepingByBaseId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectAssKeepingByBaseId_args");

    private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("baseId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectAssKeepingByBaseId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectAssKeepingByBaseId_argsTupleSchemeFactory());
    }

    public int baseId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASE_ID((short)1, "baseId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASE_ID
            return BASE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BASEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("baseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectAssKeepingByBaseId_args.class, metaDataMap);
    }

    public getProjectAssKeepingByBaseId_args() {
    }

    public getProjectAssKeepingByBaseId_args(
      int baseId)
    {
      this();
      this.baseId = baseId;
      setBaseIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectAssKeepingByBaseId_args(getProjectAssKeepingByBaseId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.baseId = other.baseId;
    }

    public getProjectAssKeepingByBaseId_args deepCopy() {
      return new getProjectAssKeepingByBaseId_args(this);
    }

    @Override
    public void clear() {
      setBaseIdIsSet(false);
      this.baseId = 0;
    }

    public int getBaseId() {
      return this.baseId;
    }

    public getProjectAssKeepingByBaseId_args setBaseId(int baseId) {
      this.baseId = baseId;
      setBaseIdIsSet(true);
      return this;
    }

    public void unsetBaseId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEID_ISSET_ID);
    }

    /** Returns true if field baseId is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseId() {
      return EncodingUtils.testBit(__isset_bitfield, __BASEID_ISSET_ID);
    }

    public void setBaseIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BASE_ID:
        if (value == null) {
          unsetBaseId();
        } else {
          setBaseId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BASE_ID:
        return Integer.valueOf(getBaseId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BASE_ID:
        return isSetBaseId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectAssKeepingByBaseId_args)
        return this.equals((getProjectAssKeepingByBaseId_args)that);
      return false;
    }

    public boolean equals(getProjectAssKeepingByBaseId_args that) {
      if (that == null)
        return false;

      boolean this_present_baseId = true;
      boolean that_present_baseId = true;
      if (this_present_baseId || that_present_baseId) {
        if (!(this_present_baseId && that_present_baseId))
          return false;
        if (this.baseId != that.baseId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_baseId = true;
      list.add(present_baseId);
      if (present_baseId)
        list.add(baseId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectAssKeepingByBaseId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBaseId()).compareTo(other.isSetBaseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseId, other.baseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectAssKeepingByBaseId_args(");
      boolean first = true;

      sb.append("baseId:");
      sb.append(this.baseId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectAssKeepingByBaseId_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectAssKeepingByBaseId_argsStandardScheme getScheme() {
        return new getProjectAssKeepingByBaseId_argsStandardScheme();
      }
    }

    private static class getProjectAssKeepingByBaseId_argsStandardScheme extends StandardScheme<getProjectAssKeepingByBaseId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectAssKeepingByBaseId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.baseId = iprot.readI32();
                struct.setBaseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectAssKeepingByBaseId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
        oprot.writeI32(struct.baseId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectAssKeepingByBaseId_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectAssKeepingByBaseId_argsTupleScheme getScheme() {
        return new getProjectAssKeepingByBaseId_argsTupleScheme();
      }
    }

    private static class getProjectAssKeepingByBaseId_argsTupleScheme extends TupleScheme<getProjectAssKeepingByBaseId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectAssKeepingByBaseId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBaseId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBaseId()) {
          oprot.writeI32(struct.baseId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectAssKeepingByBaseId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.baseId = iprot.readI32();
          struct.setBaseIdIsSet(true);
        }
      }
    }

  }

  public static class getProjectAssKeepingByBaseId_result implements org.apache.thrift.TBase<getProjectAssKeepingByBaseId_result, getProjectAssKeepingByBaseId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectAssKeepingByBaseId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectAssKeepingByBaseId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectAssKeepingByBaseId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectAssKeepingByBaseId_resultTupleSchemeFactory());
    }

    public ProjectAssKeeping success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssKeeping.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectAssKeepingByBaseId_result.class, metaDataMap);
    }

    public getProjectAssKeepingByBaseId_result() {
    }

    public getProjectAssKeepingByBaseId_result(
      ProjectAssKeeping success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectAssKeepingByBaseId_result(getProjectAssKeepingByBaseId_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProjectAssKeeping(other.success);
      }
    }

    public getProjectAssKeepingByBaseId_result deepCopy() {
      return new getProjectAssKeepingByBaseId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProjectAssKeeping getSuccess() {
      return this.success;
    }

    public getProjectAssKeepingByBaseId_result setSuccess(ProjectAssKeeping success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProjectAssKeeping)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectAssKeepingByBaseId_result)
        return this.equals((getProjectAssKeepingByBaseId_result)that);
      return false;
    }

    public boolean equals(getProjectAssKeepingByBaseId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectAssKeepingByBaseId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectAssKeepingByBaseId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectAssKeepingByBaseId_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectAssKeepingByBaseId_resultStandardScheme getScheme() {
        return new getProjectAssKeepingByBaseId_resultStandardScheme();
      }
    }

    private static class getProjectAssKeepingByBaseId_resultStandardScheme extends StandardScheme<getProjectAssKeepingByBaseId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectAssKeepingByBaseId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProjectAssKeeping();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectAssKeepingByBaseId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectAssKeepingByBaseId_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectAssKeepingByBaseId_resultTupleScheme getScheme() {
        return new getProjectAssKeepingByBaseId_resultTupleScheme();
      }
    }

    private static class getProjectAssKeepingByBaseId_resultTupleScheme extends TupleScheme<getProjectAssKeepingByBaseId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectAssKeepingByBaseId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectAssKeepingByBaseId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProjectAssKeeping();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListProjectAssKeepingByBaseId_args implements org.apache.thrift.TBase<getListProjectAssKeepingByBaseId_args, getListProjectAssKeepingByBaseId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getListProjectAssKeepingByBaseId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListProjectAssKeepingByBaseId_args");

    private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("baseId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListProjectAssKeepingByBaseId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListProjectAssKeepingByBaseId_argsTupleSchemeFactory());
    }

    public int baseId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASE_ID((short)1, "baseId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASE_ID
            return BASE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BASEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("baseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListProjectAssKeepingByBaseId_args.class, metaDataMap);
    }

    public getListProjectAssKeepingByBaseId_args() {
    }

    public getListProjectAssKeepingByBaseId_args(
      int baseId)
    {
      this();
      this.baseId = baseId;
      setBaseIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListProjectAssKeepingByBaseId_args(getListProjectAssKeepingByBaseId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.baseId = other.baseId;
    }

    public getListProjectAssKeepingByBaseId_args deepCopy() {
      return new getListProjectAssKeepingByBaseId_args(this);
    }

    @Override
    public void clear() {
      setBaseIdIsSet(false);
      this.baseId = 0;
    }

    public int getBaseId() {
      return this.baseId;
    }

    public getListProjectAssKeepingByBaseId_args setBaseId(int baseId) {
      this.baseId = baseId;
      setBaseIdIsSet(true);
      return this;
    }

    public void unsetBaseId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEID_ISSET_ID);
    }

    /** Returns true if field baseId is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseId() {
      return EncodingUtils.testBit(__isset_bitfield, __BASEID_ISSET_ID);
    }

    public void setBaseIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BASE_ID:
        if (value == null) {
          unsetBaseId();
        } else {
          setBaseId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BASE_ID:
        return Integer.valueOf(getBaseId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BASE_ID:
        return isSetBaseId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListProjectAssKeepingByBaseId_args)
        return this.equals((getListProjectAssKeepingByBaseId_args)that);
      return false;
    }

    public boolean equals(getListProjectAssKeepingByBaseId_args that) {
      if (that == null)
        return false;

      boolean this_present_baseId = true;
      boolean that_present_baseId = true;
      if (this_present_baseId || that_present_baseId) {
        if (!(this_present_baseId && that_present_baseId))
          return false;
        if (this.baseId != that.baseId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_baseId = true;
      list.add(present_baseId);
      if (present_baseId)
        list.add(baseId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getListProjectAssKeepingByBaseId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBaseId()).compareTo(other.isSetBaseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseId, other.baseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListProjectAssKeepingByBaseId_args(");
      boolean first = true;

      sb.append("baseId:");
      sb.append(this.baseId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListProjectAssKeepingByBaseId_argsStandardSchemeFactory implements SchemeFactory {
      public getListProjectAssKeepingByBaseId_argsStandardScheme getScheme() {
        return new getListProjectAssKeepingByBaseId_argsStandardScheme();
      }
    }

    private static class getListProjectAssKeepingByBaseId_argsStandardScheme extends StandardScheme<getListProjectAssKeepingByBaseId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListProjectAssKeepingByBaseId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.baseId = iprot.readI32();
                struct.setBaseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListProjectAssKeepingByBaseId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
        oprot.writeI32(struct.baseId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListProjectAssKeepingByBaseId_argsTupleSchemeFactory implements SchemeFactory {
      public getListProjectAssKeepingByBaseId_argsTupleScheme getScheme() {
        return new getListProjectAssKeepingByBaseId_argsTupleScheme();
      }
    }

    private static class getListProjectAssKeepingByBaseId_argsTupleScheme extends TupleScheme<getListProjectAssKeepingByBaseId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListProjectAssKeepingByBaseId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBaseId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBaseId()) {
          oprot.writeI32(struct.baseId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListProjectAssKeepingByBaseId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.baseId = iprot.readI32();
          struct.setBaseIdIsSet(true);
        }
      }
    }

  }

  public static class getListProjectAssKeepingByBaseId_result implements org.apache.thrift.TBase<getListProjectAssKeepingByBaseId_result, getListProjectAssKeepingByBaseId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getListProjectAssKeepingByBaseId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListProjectAssKeepingByBaseId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListProjectAssKeepingByBaseId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListProjectAssKeepingByBaseId_resultTupleSchemeFactory());
    }

    public List<ProjectAssKeeping> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssKeeping.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListProjectAssKeepingByBaseId_result.class, metaDataMap);
    }

    public getListProjectAssKeepingByBaseId_result() {
    }

    public getListProjectAssKeepingByBaseId_result(
      List<ProjectAssKeeping> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListProjectAssKeepingByBaseId_result(getListProjectAssKeepingByBaseId_result other) {
      if (other.isSetSuccess()) {
        List<ProjectAssKeeping> __this__success = new ArrayList<ProjectAssKeeping>(other.success.size());
        for (ProjectAssKeeping other_element : other.success) {
          __this__success.add(new ProjectAssKeeping(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListProjectAssKeepingByBaseId_result deepCopy() {
      return new getListProjectAssKeepingByBaseId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProjectAssKeeping> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProjectAssKeeping elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProjectAssKeeping>();
      }
      this.success.add(elem);
    }

    public List<ProjectAssKeeping> getSuccess() {
      return this.success;
    }

    public getListProjectAssKeepingByBaseId_result setSuccess(List<ProjectAssKeeping> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProjectAssKeeping>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListProjectAssKeepingByBaseId_result)
        return this.equals((getListProjectAssKeepingByBaseId_result)that);
      return false;
    }

    public boolean equals(getListProjectAssKeepingByBaseId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getListProjectAssKeepingByBaseId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListProjectAssKeepingByBaseId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListProjectAssKeepingByBaseId_resultStandardSchemeFactory implements SchemeFactory {
      public getListProjectAssKeepingByBaseId_resultStandardScheme getScheme() {
        return new getListProjectAssKeepingByBaseId_resultStandardScheme();
      }
    }

    private static class getListProjectAssKeepingByBaseId_resultStandardScheme extends StandardScheme<getListProjectAssKeepingByBaseId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListProjectAssKeepingByBaseId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<ProjectAssKeeping>(_list72.size);
                  ProjectAssKeeping _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new ProjectAssKeeping();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListProjectAssKeepingByBaseId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProjectAssKeeping _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListProjectAssKeepingByBaseId_resultTupleSchemeFactory implements SchemeFactory {
      public getListProjectAssKeepingByBaseId_resultTupleScheme getScheme() {
        return new getListProjectAssKeepingByBaseId_resultTupleScheme();
      }
    }

    private static class getListProjectAssKeepingByBaseId_resultTupleScheme extends TupleScheme<getListProjectAssKeepingByBaseId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListProjectAssKeepingByBaseId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProjectAssKeeping _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListProjectAssKeepingByBaseId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProjectAssKeeping>(_list77.size);
            ProjectAssKeeping _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new ProjectAssKeeping();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssExtraction_args implements org.apache.thrift.TBase<getAllProjectAssExtraction_args, getAllProjectAssExtraction_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssExtraction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssExtraction_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ASS_EXTRACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("projectAssExtraction", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssExtraction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssExtraction_argsTupleSchemeFactory());
    }

    public ProjectAssExtraction projectAssExtraction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ASS_EXTRACTION((short)1, "projectAssExtraction");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ASS_EXTRACTION
            return PROJECT_ASS_EXTRACTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ASS_EXTRACTION, new org.apache.thrift.meta_data.FieldMetaData("projectAssExtraction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssExtraction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssExtraction_args.class, metaDataMap);
    }

    public getAllProjectAssExtraction_args() {
    }

    public getAllProjectAssExtraction_args(
      ProjectAssExtraction projectAssExtraction)
    {
      this();
      this.projectAssExtraction = projectAssExtraction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssExtraction_args(getAllProjectAssExtraction_args other) {
      if (other.isSetProjectAssExtraction()) {
        this.projectAssExtraction = new ProjectAssExtraction(other.projectAssExtraction);
      }
    }

    public getAllProjectAssExtraction_args deepCopy() {
      return new getAllProjectAssExtraction_args(this);
    }

    @Override
    public void clear() {
      this.projectAssExtraction = null;
    }

    public ProjectAssExtraction getProjectAssExtraction() {
      return this.projectAssExtraction;
    }

    public getAllProjectAssExtraction_args setProjectAssExtraction(ProjectAssExtraction projectAssExtraction) {
      this.projectAssExtraction = projectAssExtraction;
      return this;
    }

    public void unsetProjectAssExtraction() {
      this.projectAssExtraction = null;
    }

    /** Returns true if field projectAssExtraction is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectAssExtraction() {
      return this.projectAssExtraction != null;
    }

    public void setProjectAssExtractionIsSet(boolean value) {
      if (!value) {
        this.projectAssExtraction = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ASS_EXTRACTION:
        if (value == null) {
          unsetProjectAssExtraction();
        } else {
          setProjectAssExtraction((ProjectAssExtraction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ASS_EXTRACTION:
        return getProjectAssExtraction();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ASS_EXTRACTION:
        return isSetProjectAssExtraction();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssExtraction_args)
        return this.equals((getAllProjectAssExtraction_args)that);
      return false;
    }

    public boolean equals(getAllProjectAssExtraction_args that) {
      if (that == null)
        return false;

      boolean this_present_projectAssExtraction = true && this.isSetProjectAssExtraction();
      boolean that_present_projectAssExtraction = true && that.isSetProjectAssExtraction();
      if (this_present_projectAssExtraction || that_present_projectAssExtraction) {
        if (!(this_present_projectAssExtraction && that_present_projectAssExtraction))
          return false;
        if (!this.projectAssExtraction.equals(that.projectAssExtraction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectAssExtraction = true && (isSetProjectAssExtraction());
      list.add(present_projectAssExtraction);
      if (present_projectAssExtraction)
        list.add(projectAssExtraction);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssExtraction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectAssExtraction()).compareTo(other.isSetProjectAssExtraction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectAssExtraction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectAssExtraction, other.projectAssExtraction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssExtraction_args(");
      boolean first = true;

      sb.append("projectAssExtraction:");
      if (this.projectAssExtraction == null) {
        sb.append("null");
      } else {
        sb.append(this.projectAssExtraction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectAssExtraction != null) {
        projectAssExtraction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssExtraction_argsStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssExtraction_argsStandardScheme getScheme() {
        return new getAllProjectAssExtraction_argsStandardScheme();
      }
    }

    private static class getAllProjectAssExtraction_argsStandardScheme extends StandardScheme<getAllProjectAssExtraction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssExtraction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ASS_EXTRACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectAssExtraction = new ProjectAssExtraction();
                struct.projectAssExtraction.read(iprot);
                struct.setProjectAssExtractionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssExtraction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectAssExtraction != null) {
          oprot.writeFieldBegin(PROJECT_ASS_EXTRACTION_FIELD_DESC);
          struct.projectAssExtraction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssExtraction_argsTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssExtraction_argsTupleScheme getScheme() {
        return new getAllProjectAssExtraction_argsTupleScheme();
      }
    }

    private static class getAllProjectAssExtraction_argsTupleScheme extends TupleScheme<getAllProjectAssExtraction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssExtraction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectAssExtraction()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectAssExtraction()) {
          struct.projectAssExtraction.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssExtraction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectAssExtraction = new ProjectAssExtraction();
          struct.projectAssExtraction.read(iprot);
          struct.setProjectAssExtractionIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssExtraction_result implements org.apache.thrift.TBase<getAllProjectAssExtraction_result, getAllProjectAssExtraction_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssExtraction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssExtraction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssExtraction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssExtraction_resultTupleSchemeFactory());
    }

    public List<ProjectAssExtraction> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssExtraction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssExtraction_result.class, metaDataMap);
    }

    public getAllProjectAssExtraction_result() {
    }

    public getAllProjectAssExtraction_result(
      List<ProjectAssExtraction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssExtraction_result(getAllProjectAssExtraction_result other) {
      if (other.isSetSuccess()) {
        List<ProjectAssExtraction> __this__success = new ArrayList<ProjectAssExtraction>(other.success.size());
        for (ProjectAssExtraction other_element : other.success) {
          __this__success.add(new ProjectAssExtraction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllProjectAssExtraction_result deepCopy() {
      return new getAllProjectAssExtraction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProjectAssExtraction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProjectAssExtraction elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProjectAssExtraction>();
      }
      this.success.add(elem);
    }

    public List<ProjectAssExtraction> getSuccess() {
      return this.success;
    }

    public getAllProjectAssExtraction_result setSuccess(List<ProjectAssExtraction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProjectAssExtraction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssExtraction_result)
        return this.equals((getAllProjectAssExtraction_result)that);
      return false;
    }

    public boolean equals(getAllProjectAssExtraction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssExtraction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssExtraction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssExtraction_resultStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssExtraction_resultStandardScheme getScheme() {
        return new getAllProjectAssExtraction_resultStandardScheme();
      }
    }

    private static class getAllProjectAssExtraction_resultStandardScheme extends StandardScheme<getAllProjectAssExtraction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssExtraction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<ProjectAssExtraction>(_list80.size);
                  ProjectAssExtraction _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new ProjectAssExtraction();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssExtraction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProjectAssExtraction _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssExtraction_resultTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssExtraction_resultTupleScheme getScheme() {
        return new getAllProjectAssExtraction_resultTupleScheme();
      }
    }

    private static class getAllProjectAssExtraction_resultTupleScheme extends TupleScheme<getAllProjectAssExtraction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssExtraction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProjectAssExtraction _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssExtraction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProjectAssExtraction>(_list85.size);
            ProjectAssExtraction _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new ProjectAssExtraction();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssExtractionCount_args implements org.apache.thrift.TBase<getAllProjectAssExtractionCount_args, getAllProjectAssExtractionCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssExtractionCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssExtractionCount_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ASS_EXTRACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("projectAssExtraction", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssExtractionCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssExtractionCount_argsTupleSchemeFactory());
    }

    public ProjectAssExtraction projectAssExtraction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ASS_EXTRACTION((short)1, "projectAssExtraction");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ASS_EXTRACTION
            return PROJECT_ASS_EXTRACTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ASS_EXTRACTION, new org.apache.thrift.meta_data.FieldMetaData("projectAssExtraction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssExtraction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssExtractionCount_args.class, metaDataMap);
    }

    public getAllProjectAssExtractionCount_args() {
    }

    public getAllProjectAssExtractionCount_args(
      ProjectAssExtraction projectAssExtraction)
    {
      this();
      this.projectAssExtraction = projectAssExtraction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssExtractionCount_args(getAllProjectAssExtractionCount_args other) {
      if (other.isSetProjectAssExtraction()) {
        this.projectAssExtraction = new ProjectAssExtraction(other.projectAssExtraction);
      }
    }

    public getAllProjectAssExtractionCount_args deepCopy() {
      return new getAllProjectAssExtractionCount_args(this);
    }

    @Override
    public void clear() {
      this.projectAssExtraction = null;
    }

    public ProjectAssExtraction getProjectAssExtraction() {
      return this.projectAssExtraction;
    }

    public getAllProjectAssExtractionCount_args setProjectAssExtraction(ProjectAssExtraction projectAssExtraction) {
      this.projectAssExtraction = projectAssExtraction;
      return this;
    }

    public void unsetProjectAssExtraction() {
      this.projectAssExtraction = null;
    }

    /** Returns true if field projectAssExtraction is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectAssExtraction() {
      return this.projectAssExtraction != null;
    }

    public void setProjectAssExtractionIsSet(boolean value) {
      if (!value) {
        this.projectAssExtraction = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ASS_EXTRACTION:
        if (value == null) {
          unsetProjectAssExtraction();
        } else {
          setProjectAssExtraction((ProjectAssExtraction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ASS_EXTRACTION:
        return getProjectAssExtraction();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ASS_EXTRACTION:
        return isSetProjectAssExtraction();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssExtractionCount_args)
        return this.equals((getAllProjectAssExtractionCount_args)that);
      return false;
    }

    public boolean equals(getAllProjectAssExtractionCount_args that) {
      if (that == null)
        return false;

      boolean this_present_projectAssExtraction = true && this.isSetProjectAssExtraction();
      boolean that_present_projectAssExtraction = true && that.isSetProjectAssExtraction();
      if (this_present_projectAssExtraction || that_present_projectAssExtraction) {
        if (!(this_present_projectAssExtraction && that_present_projectAssExtraction))
          return false;
        if (!this.projectAssExtraction.equals(that.projectAssExtraction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectAssExtraction = true && (isSetProjectAssExtraction());
      list.add(present_projectAssExtraction);
      if (present_projectAssExtraction)
        list.add(projectAssExtraction);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssExtractionCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectAssExtraction()).compareTo(other.isSetProjectAssExtraction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectAssExtraction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectAssExtraction, other.projectAssExtraction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssExtractionCount_args(");
      boolean first = true;

      sb.append("projectAssExtraction:");
      if (this.projectAssExtraction == null) {
        sb.append("null");
      } else {
        sb.append(this.projectAssExtraction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectAssExtraction != null) {
        projectAssExtraction.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssExtractionCount_argsStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssExtractionCount_argsStandardScheme getScheme() {
        return new getAllProjectAssExtractionCount_argsStandardScheme();
      }
    }

    private static class getAllProjectAssExtractionCount_argsStandardScheme extends StandardScheme<getAllProjectAssExtractionCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssExtractionCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ASS_EXTRACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectAssExtraction = new ProjectAssExtraction();
                struct.projectAssExtraction.read(iprot);
                struct.setProjectAssExtractionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssExtractionCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectAssExtraction != null) {
          oprot.writeFieldBegin(PROJECT_ASS_EXTRACTION_FIELD_DESC);
          struct.projectAssExtraction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssExtractionCount_argsTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssExtractionCount_argsTupleScheme getScheme() {
        return new getAllProjectAssExtractionCount_argsTupleScheme();
      }
    }

    private static class getAllProjectAssExtractionCount_argsTupleScheme extends TupleScheme<getAllProjectAssExtractionCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssExtractionCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectAssExtraction()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectAssExtraction()) {
          struct.projectAssExtraction.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssExtractionCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectAssExtraction = new ProjectAssExtraction();
          struct.projectAssExtraction.read(iprot);
          struct.setProjectAssExtractionIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssExtractionCount_result implements org.apache.thrift.TBase<getAllProjectAssExtractionCount_result, getAllProjectAssExtractionCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssExtractionCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssExtractionCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssExtractionCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssExtractionCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssExtractionCount_result.class, metaDataMap);
    }

    public getAllProjectAssExtractionCount_result() {
    }

    public getAllProjectAssExtractionCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssExtractionCount_result(getAllProjectAssExtractionCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getAllProjectAssExtractionCount_result deepCopy() {
      return new getAllProjectAssExtractionCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAllProjectAssExtractionCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssExtractionCount_result)
        return this.equals((getAllProjectAssExtractionCount_result)that);
      return false;
    }

    public boolean equals(getAllProjectAssExtractionCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssExtractionCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssExtractionCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssExtractionCount_resultStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssExtractionCount_resultStandardScheme getScheme() {
        return new getAllProjectAssExtractionCount_resultStandardScheme();
      }
    }

    private static class getAllProjectAssExtractionCount_resultStandardScheme extends StandardScheme<getAllProjectAssExtractionCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssExtractionCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssExtractionCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssExtractionCount_resultTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssExtractionCount_resultTupleScheme getScheme() {
        return new getAllProjectAssExtractionCount_resultTupleScheme();
      }
    }

    private static class getAllProjectAssExtractionCount_resultTupleScheme extends TupleScheme<getAllProjectAssExtractionCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssExtractionCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssExtractionCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListProjectAssExtractionByBaseId_args implements org.apache.thrift.TBase<getListProjectAssExtractionByBaseId_args, getListProjectAssExtractionByBaseId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getListProjectAssExtractionByBaseId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListProjectAssExtractionByBaseId_args");

    private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("baseId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListProjectAssExtractionByBaseId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListProjectAssExtractionByBaseId_argsTupleSchemeFactory());
    }

    public int baseId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASE_ID((short)1, "baseId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASE_ID
            return BASE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BASEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("baseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListProjectAssExtractionByBaseId_args.class, metaDataMap);
    }

    public getListProjectAssExtractionByBaseId_args() {
    }

    public getListProjectAssExtractionByBaseId_args(
      int baseId)
    {
      this();
      this.baseId = baseId;
      setBaseIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListProjectAssExtractionByBaseId_args(getListProjectAssExtractionByBaseId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.baseId = other.baseId;
    }

    public getListProjectAssExtractionByBaseId_args deepCopy() {
      return new getListProjectAssExtractionByBaseId_args(this);
    }

    @Override
    public void clear() {
      setBaseIdIsSet(false);
      this.baseId = 0;
    }

    public int getBaseId() {
      return this.baseId;
    }

    public getListProjectAssExtractionByBaseId_args setBaseId(int baseId) {
      this.baseId = baseId;
      setBaseIdIsSet(true);
      return this;
    }

    public void unsetBaseId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEID_ISSET_ID);
    }

    /** Returns true if field baseId is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseId() {
      return EncodingUtils.testBit(__isset_bitfield, __BASEID_ISSET_ID);
    }

    public void setBaseIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BASE_ID:
        if (value == null) {
          unsetBaseId();
        } else {
          setBaseId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BASE_ID:
        return Integer.valueOf(getBaseId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BASE_ID:
        return isSetBaseId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListProjectAssExtractionByBaseId_args)
        return this.equals((getListProjectAssExtractionByBaseId_args)that);
      return false;
    }

    public boolean equals(getListProjectAssExtractionByBaseId_args that) {
      if (that == null)
        return false;

      boolean this_present_baseId = true;
      boolean that_present_baseId = true;
      if (this_present_baseId || that_present_baseId) {
        if (!(this_present_baseId && that_present_baseId))
          return false;
        if (this.baseId != that.baseId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_baseId = true;
      list.add(present_baseId);
      if (present_baseId)
        list.add(baseId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getListProjectAssExtractionByBaseId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBaseId()).compareTo(other.isSetBaseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseId, other.baseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListProjectAssExtractionByBaseId_args(");
      boolean first = true;

      sb.append("baseId:");
      sb.append(this.baseId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListProjectAssExtractionByBaseId_argsStandardSchemeFactory implements SchemeFactory {
      public getListProjectAssExtractionByBaseId_argsStandardScheme getScheme() {
        return new getListProjectAssExtractionByBaseId_argsStandardScheme();
      }
    }

    private static class getListProjectAssExtractionByBaseId_argsStandardScheme extends StandardScheme<getListProjectAssExtractionByBaseId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListProjectAssExtractionByBaseId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.baseId = iprot.readI32();
                struct.setBaseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListProjectAssExtractionByBaseId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
        oprot.writeI32(struct.baseId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListProjectAssExtractionByBaseId_argsTupleSchemeFactory implements SchemeFactory {
      public getListProjectAssExtractionByBaseId_argsTupleScheme getScheme() {
        return new getListProjectAssExtractionByBaseId_argsTupleScheme();
      }
    }

    private static class getListProjectAssExtractionByBaseId_argsTupleScheme extends TupleScheme<getListProjectAssExtractionByBaseId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListProjectAssExtractionByBaseId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBaseId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBaseId()) {
          oprot.writeI32(struct.baseId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListProjectAssExtractionByBaseId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.baseId = iprot.readI32();
          struct.setBaseIdIsSet(true);
        }
      }
    }

  }

  public static class getListProjectAssExtractionByBaseId_result implements org.apache.thrift.TBase<getListProjectAssExtractionByBaseId_result, getListProjectAssExtractionByBaseId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getListProjectAssExtractionByBaseId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListProjectAssExtractionByBaseId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListProjectAssExtractionByBaseId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListProjectAssExtractionByBaseId_resultTupleSchemeFactory());
    }

    public List<ProjectAssExtraction> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssExtraction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListProjectAssExtractionByBaseId_result.class, metaDataMap);
    }

    public getListProjectAssExtractionByBaseId_result() {
    }

    public getListProjectAssExtractionByBaseId_result(
      List<ProjectAssExtraction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListProjectAssExtractionByBaseId_result(getListProjectAssExtractionByBaseId_result other) {
      if (other.isSetSuccess()) {
        List<ProjectAssExtraction> __this__success = new ArrayList<ProjectAssExtraction>(other.success.size());
        for (ProjectAssExtraction other_element : other.success) {
          __this__success.add(new ProjectAssExtraction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListProjectAssExtractionByBaseId_result deepCopy() {
      return new getListProjectAssExtractionByBaseId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProjectAssExtraction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProjectAssExtraction elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProjectAssExtraction>();
      }
      this.success.add(elem);
    }

    public List<ProjectAssExtraction> getSuccess() {
      return this.success;
    }

    public getListProjectAssExtractionByBaseId_result setSuccess(List<ProjectAssExtraction> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProjectAssExtraction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListProjectAssExtractionByBaseId_result)
        return this.equals((getListProjectAssExtractionByBaseId_result)that);
      return false;
    }

    public boolean equals(getListProjectAssExtractionByBaseId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getListProjectAssExtractionByBaseId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListProjectAssExtractionByBaseId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListProjectAssExtractionByBaseId_resultStandardSchemeFactory implements SchemeFactory {
      public getListProjectAssExtractionByBaseId_resultStandardScheme getScheme() {
        return new getListProjectAssExtractionByBaseId_resultStandardScheme();
      }
    }

    private static class getListProjectAssExtractionByBaseId_resultStandardScheme extends StandardScheme<getListProjectAssExtractionByBaseId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListProjectAssExtractionByBaseId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<ProjectAssExtraction>(_list88.size);
                  ProjectAssExtraction _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new ProjectAssExtraction();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListProjectAssExtractionByBaseId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProjectAssExtraction _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListProjectAssExtractionByBaseId_resultTupleSchemeFactory implements SchemeFactory {
      public getListProjectAssExtractionByBaseId_resultTupleScheme getScheme() {
        return new getListProjectAssExtractionByBaseId_resultTupleScheme();
      }
    }

    private static class getListProjectAssExtractionByBaseId_resultTupleScheme extends TupleScheme<getListProjectAssExtractionByBaseId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListProjectAssExtractionByBaseId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProjectAssExtraction _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListProjectAssExtractionByBaseId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProjectAssExtraction>(_list93.size);
            ProjectAssExtraction _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new ProjectAssExtraction();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchDeleteProjectAssExtraction_args implements org.apache.thrift.TBase<batchDeleteProjectAssExtraction_args, batchDeleteProjectAssExtraction_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteProjectAssExtraction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteProjectAssExtraction_args");

    private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDeleteProjectAssExtraction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDeleteProjectAssExtraction_argsTupleSchemeFactory());
    }

    public String pids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIDS((short)1, "pids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIDS
            return PIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteProjectAssExtraction_args.class, metaDataMap);
    }

    public batchDeleteProjectAssExtraction_args() {
    }

    public batchDeleteProjectAssExtraction_args(
      String pids)
    {
      this();
      this.pids = pids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDeleteProjectAssExtraction_args(batchDeleteProjectAssExtraction_args other) {
      if (other.isSetPids()) {
        this.pids = other.pids;
      }
    }

    public batchDeleteProjectAssExtraction_args deepCopy() {
      return new batchDeleteProjectAssExtraction_args(this);
    }

    @Override
    public void clear() {
      this.pids = null;
    }

    public String getPids() {
      return this.pids;
    }

    public batchDeleteProjectAssExtraction_args setPids(String pids) {
      this.pids = pids;
      return this;
    }

    public void unsetPids() {
      this.pids = null;
    }

    /** Returns true if field pids is set (has been assigned a value) and false otherwise */
    public boolean isSetPids() {
      return this.pids != null;
    }

    public void setPidsIsSet(boolean value) {
      if (!value) {
        this.pids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIDS:
        if (value == null) {
          unsetPids();
        } else {
          setPids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIDS:
        return getPids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIDS:
        return isSetPids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDeleteProjectAssExtraction_args)
        return this.equals((batchDeleteProjectAssExtraction_args)that);
      return false;
    }

    public boolean equals(batchDeleteProjectAssExtraction_args that) {
      if (that == null)
        return false;

      boolean this_present_pids = true && this.isSetPids();
      boolean that_present_pids = true && that.isSetPids();
      if (this_present_pids || that_present_pids) {
        if (!(this_present_pids && that_present_pids))
          return false;
        if (!this.pids.equals(that.pids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pids = true && (isSetPids());
      list.add(present_pids);
      if (present_pids)
        list.add(pids);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDeleteProjectAssExtraction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDeleteProjectAssExtraction_args(");
      boolean first = true;

      sb.append("pids:");
      if (this.pids == null) {
        sb.append("null");
      } else {
        sb.append(this.pids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDeleteProjectAssExtraction_argsStandardSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssExtraction_argsStandardScheme getScheme() {
        return new batchDeleteProjectAssExtraction_argsStandardScheme();
      }
    }

    private static class batchDeleteProjectAssExtraction_argsStandardScheme extends StandardScheme<batchDeleteProjectAssExtraction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteProjectAssExtraction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pids = iprot.readString();
                struct.setPidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteProjectAssExtraction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pids != null) {
          oprot.writeFieldBegin(PIDS_FIELD_DESC);
          oprot.writeString(struct.pids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDeleteProjectAssExtraction_argsTupleSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssExtraction_argsTupleScheme getScheme() {
        return new batchDeleteProjectAssExtraction_argsTupleScheme();
      }
    }

    private static class batchDeleteProjectAssExtraction_argsTupleScheme extends TupleScheme<batchDeleteProjectAssExtraction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssExtraction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPids()) {
          oprot.writeString(struct.pids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssExtraction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pids = iprot.readString();
          struct.setPidsIsSet(true);
        }
      }
    }

  }

  public static class batchDeleteProjectAssExtraction_result implements org.apache.thrift.TBase<batchDeleteProjectAssExtraction_result, batchDeleteProjectAssExtraction_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteProjectAssExtraction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteProjectAssExtraction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDeleteProjectAssExtraction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDeleteProjectAssExtraction_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteProjectAssExtraction_result.class, metaDataMap);
    }

    public batchDeleteProjectAssExtraction_result() {
    }

    public batchDeleteProjectAssExtraction_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDeleteProjectAssExtraction_result(batchDeleteProjectAssExtraction_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public batchDeleteProjectAssExtraction_result deepCopy() {
      return new batchDeleteProjectAssExtraction_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchDeleteProjectAssExtraction_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public batchDeleteProjectAssExtraction_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDeleteProjectAssExtraction_result)
        return this.equals((batchDeleteProjectAssExtraction_result)that);
      return false;
    }

    public boolean equals(batchDeleteProjectAssExtraction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDeleteProjectAssExtraction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDeleteProjectAssExtraction_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDeleteProjectAssExtraction_resultStandardSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssExtraction_resultStandardScheme getScheme() {
        return new batchDeleteProjectAssExtraction_resultStandardScheme();
      }
    }

    private static class batchDeleteProjectAssExtraction_resultStandardScheme extends StandardScheme<batchDeleteProjectAssExtraction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteProjectAssExtraction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteProjectAssExtraction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDeleteProjectAssExtraction_resultTupleSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssExtraction_resultTupleScheme getScheme() {
        return new batchDeleteProjectAssExtraction_resultTupleScheme();
      }
    }

    private static class batchDeleteProjectAssExtraction_resultTupleScheme extends TupleScheme<batchDeleteProjectAssExtraction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssExtraction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssExtraction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssHandle_args implements org.apache.thrift.TBase<getAllProjectAssHandle_args, getAllProjectAssHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssHandle_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ASS_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectAssHandle", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssHandle_argsTupleSchemeFactory());
    }

    public ProjectAssHandle projectAssHandle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ASS_HANDLE((short)1, "projectAssHandle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ASS_HANDLE
            return PROJECT_ASS_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ASS_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("projectAssHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssHandle.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssHandle_args.class, metaDataMap);
    }

    public getAllProjectAssHandle_args() {
    }

    public getAllProjectAssHandle_args(
      ProjectAssHandle projectAssHandle)
    {
      this();
      this.projectAssHandle = projectAssHandle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssHandle_args(getAllProjectAssHandle_args other) {
      if (other.isSetProjectAssHandle()) {
        this.projectAssHandle = new ProjectAssHandle(other.projectAssHandle);
      }
    }

    public getAllProjectAssHandle_args deepCopy() {
      return new getAllProjectAssHandle_args(this);
    }

    @Override
    public void clear() {
      this.projectAssHandle = null;
    }

    public ProjectAssHandle getProjectAssHandle() {
      return this.projectAssHandle;
    }

    public getAllProjectAssHandle_args setProjectAssHandle(ProjectAssHandle projectAssHandle) {
      this.projectAssHandle = projectAssHandle;
      return this;
    }

    public void unsetProjectAssHandle() {
      this.projectAssHandle = null;
    }

    /** Returns true if field projectAssHandle is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectAssHandle() {
      return this.projectAssHandle != null;
    }

    public void setProjectAssHandleIsSet(boolean value) {
      if (!value) {
        this.projectAssHandle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ASS_HANDLE:
        if (value == null) {
          unsetProjectAssHandle();
        } else {
          setProjectAssHandle((ProjectAssHandle)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ASS_HANDLE:
        return getProjectAssHandle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ASS_HANDLE:
        return isSetProjectAssHandle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssHandle_args)
        return this.equals((getAllProjectAssHandle_args)that);
      return false;
    }

    public boolean equals(getAllProjectAssHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_projectAssHandle = true && this.isSetProjectAssHandle();
      boolean that_present_projectAssHandle = true && that.isSetProjectAssHandle();
      if (this_present_projectAssHandle || that_present_projectAssHandle) {
        if (!(this_present_projectAssHandle && that_present_projectAssHandle))
          return false;
        if (!this.projectAssHandle.equals(that.projectAssHandle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectAssHandle = true && (isSetProjectAssHandle());
      list.add(present_projectAssHandle);
      if (present_projectAssHandle)
        list.add(projectAssHandle);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectAssHandle()).compareTo(other.isSetProjectAssHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectAssHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectAssHandle, other.projectAssHandle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssHandle_args(");
      boolean first = true;

      sb.append("projectAssHandle:");
      if (this.projectAssHandle == null) {
        sb.append("null");
      } else {
        sb.append(this.projectAssHandle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectAssHandle != null) {
        projectAssHandle.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssHandle_argsStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssHandle_argsStandardScheme getScheme() {
        return new getAllProjectAssHandle_argsStandardScheme();
      }
    }

    private static class getAllProjectAssHandle_argsStandardScheme extends StandardScheme<getAllProjectAssHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ASS_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectAssHandle = new ProjectAssHandle();
                struct.projectAssHandle.read(iprot);
                struct.setProjectAssHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectAssHandle != null) {
          oprot.writeFieldBegin(PROJECT_ASS_HANDLE_FIELD_DESC);
          struct.projectAssHandle.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssHandle_argsTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssHandle_argsTupleScheme getScheme() {
        return new getAllProjectAssHandle_argsTupleScheme();
      }
    }

    private static class getAllProjectAssHandle_argsTupleScheme extends TupleScheme<getAllProjectAssHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectAssHandle()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectAssHandle()) {
          struct.projectAssHandle.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectAssHandle = new ProjectAssHandle();
          struct.projectAssHandle.read(iprot);
          struct.setProjectAssHandleIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssHandle_result implements org.apache.thrift.TBase<getAllProjectAssHandle_result, getAllProjectAssHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssHandle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssHandle_resultTupleSchemeFactory());
    }

    public List<ProjectAssHandle> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssHandle.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssHandle_result.class, metaDataMap);
    }

    public getAllProjectAssHandle_result() {
    }

    public getAllProjectAssHandle_result(
      List<ProjectAssHandle> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssHandle_result(getAllProjectAssHandle_result other) {
      if (other.isSetSuccess()) {
        List<ProjectAssHandle> __this__success = new ArrayList<ProjectAssHandle>(other.success.size());
        for (ProjectAssHandle other_element : other.success) {
          __this__success.add(new ProjectAssHandle(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllProjectAssHandle_result deepCopy() {
      return new getAllProjectAssHandle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProjectAssHandle> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProjectAssHandle elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProjectAssHandle>();
      }
      this.success.add(elem);
    }

    public List<ProjectAssHandle> getSuccess() {
      return this.success;
    }

    public getAllProjectAssHandle_result setSuccess(List<ProjectAssHandle> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProjectAssHandle>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssHandle_result)
        return this.equals((getAllProjectAssHandle_result)that);
      return false;
    }

    public boolean equals(getAllProjectAssHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssHandle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssHandle_resultStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssHandle_resultStandardScheme getScheme() {
        return new getAllProjectAssHandle_resultStandardScheme();
      }
    }

    private static class getAllProjectAssHandle_resultStandardScheme extends StandardScheme<getAllProjectAssHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<ProjectAssHandle>(_list96.size);
                  ProjectAssHandle _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new ProjectAssHandle();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProjectAssHandle _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssHandle_resultTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssHandle_resultTupleScheme getScheme() {
        return new getAllProjectAssHandle_resultTupleScheme();
      }
    }

    private static class getAllProjectAssHandle_resultTupleScheme extends TupleScheme<getAllProjectAssHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProjectAssHandle _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProjectAssHandle>(_list101.size);
            ProjectAssHandle _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new ProjectAssHandle();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssHandleCount_args implements org.apache.thrift.TBase<getAllProjectAssHandleCount_args, getAllProjectAssHandleCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssHandleCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssHandleCount_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ASS_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectAssHandle", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssHandleCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssHandleCount_argsTupleSchemeFactory());
    }

    public ProjectAssHandle projectAssHandle; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ASS_HANDLE((short)1, "projectAssHandle");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ASS_HANDLE
            return PROJECT_ASS_HANDLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ASS_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("projectAssHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectAssHandle.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssHandleCount_args.class, metaDataMap);
    }

    public getAllProjectAssHandleCount_args() {
    }

    public getAllProjectAssHandleCount_args(
      ProjectAssHandle projectAssHandle)
    {
      this();
      this.projectAssHandle = projectAssHandle;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssHandleCount_args(getAllProjectAssHandleCount_args other) {
      if (other.isSetProjectAssHandle()) {
        this.projectAssHandle = new ProjectAssHandle(other.projectAssHandle);
      }
    }

    public getAllProjectAssHandleCount_args deepCopy() {
      return new getAllProjectAssHandleCount_args(this);
    }

    @Override
    public void clear() {
      this.projectAssHandle = null;
    }

    public ProjectAssHandle getProjectAssHandle() {
      return this.projectAssHandle;
    }

    public getAllProjectAssHandleCount_args setProjectAssHandle(ProjectAssHandle projectAssHandle) {
      this.projectAssHandle = projectAssHandle;
      return this;
    }

    public void unsetProjectAssHandle() {
      this.projectAssHandle = null;
    }

    /** Returns true if field projectAssHandle is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectAssHandle() {
      return this.projectAssHandle != null;
    }

    public void setProjectAssHandleIsSet(boolean value) {
      if (!value) {
        this.projectAssHandle = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ASS_HANDLE:
        if (value == null) {
          unsetProjectAssHandle();
        } else {
          setProjectAssHandle((ProjectAssHandle)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ASS_HANDLE:
        return getProjectAssHandle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ASS_HANDLE:
        return isSetProjectAssHandle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssHandleCount_args)
        return this.equals((getAllProjectAssHandleCount_args)that);
      return false;
    }

    public boolean equals(getAllProjectAssHandleCount_args that) {
      if (that == null)
        return false;

      boolean this_present_projectAssHandle = true && this.isSetProjectAssHandle();
      boolean that_present_projectAssHandle = true && that.isSetProjectAssHandle();
      if (this_present_projectAssHandle || that_present_projectAssHandle) {
        if (!(this_present_projectAssHandle && that_present_projectAssHandle))
          return false;
        if (!this.projectAssHandle.equals(that.projectAssHandle))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectAssHandle = true && (isSetProjectAssHandle());
      list.add(present_projectAssHandle);
      if (present_projectAssHandle)
        list.add(projectAssHandle);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssHandleCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectAssHandle()).compareTo(other.isSetProjectAssHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectAssHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectAssHandle, other.projectAssHandle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssHandleCount_args(");
      boolean first = true;

      sb.append("projectAssHandle:");
      if (this.projectAssHandle == null) {
        sb.append("null");
      } else {
        sb.append(this.projectAssHandle);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (projectAssHandle != null) {
        projectAssHandle.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssHandleCount_argsStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssHandleCount_argsStandardScheme getScheme() {
        return new getAllProjectAssHandleCount_argsStandardScheme();
      }
    }

    private static class getAllProjectAssHandleCount_argsStandardScheme extends StandardScheme<getAllProjectAssHandleCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssHandleCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ASS_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.projectAssHandle = new ProjectAssHandle();
                struct.projectAssHandle.read(iprot);
                struct.setProjectAssHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssHandleCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectAssHandle != null) {
          oprot.writeFieldBegin(PROJECT_ASS_HANDLE_FIELD_DESC);
          struct.projectAssHandle.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssHandleCount_argsTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssHandleCount_argsTupleScheme getScheme() {
        return new getAllProjectAssHandleCount_argsTupleScheme();
      }
    }

    private static class getAllProjectAssHandleCount_argsTupleScheme extends TupleScheme<getAllProjectAssHandleCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssHandleCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectAssHandle()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectAssHandle()) {
          struct.projectAssHandle.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssHandleCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectAssHandle = new ProjectAssHandle();
          struct.projectAssHandle.read(iprot);
          struct.setProjectAssHandleIsSet(true);
        }
      }
    }

  }

  public static class getAllProjectAssHandleCount_result implements org.apache.thrift.TBase<getAllProjectAssHandleCount_result, getAllProjectAssHandleCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllProjectAssHandleCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllProjectAssHandleCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllProjectAssHandleCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllProjectAssHandleCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllProjectAssHandleCount_result.class, metaDataMap);
    }

    public getAllProjectAssHandleCount_result() {
    }

    public getAllProjectAssHandleCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllProjectAssHandleCount_result(getAllProjectAssHandleCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getAllProjectAssHandleCount_result deepCopy() {
      return new getAllProjectAssHandleCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAllProjectAssHandleCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllProjectAssHandleCount_result)
        return this.equals((getAllProjectAssHandleCount_result)that);
      return false;
    }

    public boolean equals(getAllProjectAssHandleCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllProjectAssHandleCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllProjectAssHandleCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllProjectAssHandleCount_resultStandardSchemeFactory implements SchemeFactory {
      public getAllProjectAssHandleCount_resultStandardScheme getScheme() {
        return new getAllProjectAssHandleCount_resultStandardScheme();
      }
    }

    private static class getAllProjectAssHandleCount_resultStandardScheme extends StandardScheme<getAllProjectAssHandleCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllProjectAssHandleCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllProjectAssHandleCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllProjectAssHandleCount_resultTupleSchemeFactory implements SchemeFactory {
      public getAllProjectAssHandleCount_resultTupleScheme getScheme() {
        return new getAllProjectAssHandleCount_resultTupleScheme();
      }
    }

    private static class getAllProjectAssHandleCount_resultTupleScheme extends TupleScheme<getAllProjectAssHandleCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssHandleCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllProjectAssHandleCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchDeleteProjectAssHandle_args implements org.apache.thrift.TBase<batchDeleteProjectAssHandle_args, batchDeleteProjectAssHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteProjectAssHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteProjectAssHandle_args");

    private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDeleteProjectAssHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDeleteProjectAssHandle_argsTupleSchemeFactory());
    }

    public String pids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIDS((short)1, "pids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIDS
            return PIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteProjectAssHandle_args.class, metaDataMap);
    }

    public batchDeleteProjectAssHandle_args() {
    }

    public batchDeleteProjectAssHandle_args(
      String pids)
    {
      this();
      this.pids = pids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDeleteProjectAssHandle_args(batchDeleteProjectAssHandle_args other) {
      if (other.isSetPids()) {
        this.pids = other.pids;
      }
    }

    public batchDeleteProjectAssHandle_args deepCopy() {
      return new batchDeleteProjectAssHandle_args(this);
    }

    @Override
    public void clear() {
      this.pids = null;
    }

    public String getPids() {
      return this.pids;
    }

    public batchDeleteProjectAssHandle_args setPids(String pids) {
      this.pids = pids;
      return this;
    }

    public void unsetPids() {
      this.pids = null;
    }

    /** Returns true if field pids is set (has been assigned a value) and false otherwise */
    public boolean isSetPids() {
      return this.pids != null;
    }

    public void setPidsIsSet(boolean value) {
      if (!value) {
        this.pids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIDS:
        if (value == null) {
          unsetPids();
        } else {
          setPids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIDS:
        return getPids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIDS:
        return isSetPids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDeleteProjectAssHandle_args)
        return this.equals((batchDeleteProjectAssHandle_args)that);
      return false;
    }

    public boolean equals(batchDeleteProjectAssHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_pids = true && this.isSetPids();
      boolean that_present_pids = true && that.isSetPids();
      if (this_present_pids || that_present_pids) {
        if (!(this_present_pids && that_present_pids))
          return false;
        if (!this.pids.equals(that.pids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pids = true && (isSetPids());
      list.add(present_pids);
      if (present_pids)
        list.add(pids);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDeleteProjectAssHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDeleteProjectAssHandle_args(");
      boolean first = true;

      sb.append("pids:");
      if (this.pids == null) {
        sb.append("null");
      } else {
        sb.append(this.pids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDeleteProjectAssHandle_argsStandardSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssHandle_argsStandardScheme getScheme() {
        return new batchDeleteProjectAssHandle_argsStandardScheme();
      }
    }

    private static class batchDeleteProjectAssHandle_argsStandardScheme extends StandardScheme<batchDeleteProjectAssHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteProjectAssHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pids = iprot.readString();
                struct.setPidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteProjectAssHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pids != null) {
          oprot.writeFieldBegin(PIDS_FIELD_DESC);
          oprot.writeString(struct.pids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDeleteProjectAssHandle_argsTupleSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssHandle_argsTupleScheme getScheme() {
        return new batchDeleteProjectAssHandle_argsTupleScheme();
      }
    }

    private static class batchDeleteProjectAssHandle_argsTupleScheme extends TupleScheme<batchDeleteProjectAssHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPids()) {
          oprot.writeString(struct.pids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pids = iprot.readString();
          struct.setPidsIsSet(true);
        }
      }
    }

  }

  public static class batchDeleteProjectAssHandle_result implements org.apache.thrift.TBase<batchDeleteProjectAssHandle_result, batchDeleteProjectAssHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchDeleteProjectAssHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteProjectAssHandle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchDeleteProjectAssHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchDeleteProjectAssHandle_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteProjectAssHandle_result.class, metaDataMap);
    }

    public batchDeleteProjectAssHandle_result() {
    }

    public batchDeleteProjectAssHandle_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchDeleteProjectAssHandle_result(batchDeleteProjectAssHandle_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public batchDeleteProjectAssHandle_result deepCopy() {
      return new batchDeleteProjectAssHandle_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public batchDeleteProjectAssHandle_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public batchDeleteProjectAssHandle_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchDeleteProjectAssHandle_result)
        return this.equals((batchDeleteProjectAssHandle_result)that);
      return false;
    }

    public boolean equals(batchDeleteProjectAssHandle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(batchDeleteProjectAssHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchDeleteProjectAssHandle_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchDeleteProjectAssHandle_resultStandardSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssHandle_resultStandardScheme getScheme() {
        return new batchDeleteProjectAssHandle_resultStandardScheme();
      }
    }

    private static class batchDeleteProjectAssHandle_resultStandardScheme extends StandardScheme<batchDeleteProjectAssHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteProjectAssHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteProjectAssHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchDeleteProjectAssHandle_resultTupleSchemeFactory implements SchemeFactory {
      public batchDeleteProjectAssHandle_resultTupleScheme getScheme() {
        return new batchDeleteProjectAssHandle_resultTupleScheme();
      }
    }

    private static class batchDeleteProjectAssHandle_resultTupleScheme extends TupleScheme<batchDeleteProjectAssHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteProjectAssHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class HandleDifferWarnIndexDTO implements org.apache.thrift.TBase<HandleDifferWarnIndexDTO, HandleDifferWarnIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<HandleDifferWarnIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HandleDifferWarnIndexDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HANDLE_DYNAMIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDynamicId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DIFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("differ", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HANDLE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HANDLE_AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("handleAuthor", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FLOW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("flowName", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField HANDLE_AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("handleAuthorName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FIX_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("fixDay", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HandleDifferWarnIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HandleDifferWarnIndexDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int handleDynamicId; // required
  public int differ; // required
  public int status; // required
  public String handleDate; // required
  public int handleAuthor; // required
  public String createDate; // required
  public String remark; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public int projectId; // required
  public String projectName; // required
  public String flowName; // required
  public String handleAuthorName; // required
  public int fixDay; // required
  public String projectNumber; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public String pmUserName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    HANDLE_DYNAMIC_ID((short)2, "handleDynamicId"),
    DIFFER((short)3, "differ"),
    STATUS((short)4, "status"),
    HANDLE_DATE((short)5, "handleDate"),
    HANDLE_AUTHOR((short)6, "handleAuthor"),
    CREATE_DATE((short)7, "createDate"),
    REMARK((short)8, "remark"),
    USER_IDS((short)9, "userIds"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    PROJECT_ID((short)12, "projectId"),
    PROJECT_NAME((short)13, "projectName"),
    FLOW_NAME((short)14, "flowName"),
    HANDLE_AUTHOR_NAME((short)15, "handleAuthorName"),
    FIX_DAY((short)16, "fixDay"),
    PROJECT_NUMBER((short)17, "projectNumber"),
    HOUSE_NAME((short)18, "houseName"),
    BUYER_NAME((short)19, "buyerName"),
    SELLER_NAME((short)20, "sellerName"),
    PM_USER_NAME((short)21, "pmUserName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // HANDLE_DYNAMIC_ID
          return HANDLE_DYNAMIC_ID;
        case 3: // DIFFER
          return DIFFER;
        case 4: // STATUS
          return STATUS;
        case 5: // HANDLE_DATE
          return HANDLE_DATE;
        case 6: // HANDLE_AUTHOR
          return HANDLE_AUTHOR;
        case 7: // CREATE_DATE
          return CREATE_DATE;
        case 8: // REMARK
          return REMARK;
        case 9: // USER_IDS
          return USER_IDS;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // PROJECT_ID
          return PROJECT_ID;
        case 13: // PROJECT_NAME
          return PROJECT_NAME;
        case 14: // FLOW_NAME
          return FLOW_NAME;
        case 15: // HANDLE_AUTHOR_NAME
          return HANDLE_AUTHOR_NAME;
        case 16: // FIX_DAY
          return FIX_DAY;
        case 17: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 18: // HOUSE_NAME
          return HOUSE_NAME;
        case 19: // BUYER_NAME
          return BUYER_NAME;
        case 20: // SELLER_NAME
          return SELLER_NAME;
        case 21: // PM_USER_NAME
          return PM_USER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __HANDLEDYNAMICID_ISSET_ID = 1;
  private static final int __DIFFER_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __HANDLEAUTHOR_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __PROJECTID_ISSET_ID = 7;
  private static final int __FIXDAY_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_DYNAMIC_ID, new org.apache.thrift.meta_data.FieldMetaData("handleDynamicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIFFER, new org.apache.thrift.meta_data.FieldMetaData("differ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_DATE, new org.apache.thrift.meta_data.FieldMetaData("handleDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("handleAuthor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_NAME, new org.apache.thrift.meta_data.FieldMetaData("flowName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("handleAuthorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIX_DAY, new org.apache.thrift.meta_data.FieldMetaData("fixDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HandleDifferWarnIndexDTO.class, metaDataMap);
  }

  public HandleDifferWarnIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public HandleDifferWarnIndexDTO(
    int pid,
    int handleDynamicId,
    int differ,
    int status,
    String handleDate,
    int handleAuthor,
    String createDate,
    String remark,
    List<Integer> userIds,
    int page,
    int rows,
    int projectId,
    String projectName,
    String flowName,
    String handleAuthorName,
    int fixDay,
    String projectNumber,
    String houseName,
    String buyerName,
    String sellerName,
    String pmUserName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.handleDynamicId = handleDynamicId;
    setHandleDynamicIdIsSet(true);
    this.differ = differ;
    setDifferIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.handleDate = handleDate;
    this.handleAuthor = handleAuthor;
    setHandleAuthorIsSet(true);
    this.createDate = createDate;
    this.remark = remark;
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.flowName = flowName;
    this.handleAuthorName = handleAuthorName;
    this.fixDay = fixDay;
    setFixDayIsSet(true);
    this.projectNumber = projectNumber;
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.pmUserName = pmUserName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HandleDifferWarnIndexDTO(HandleDifferWarnIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.handleDynamicId = other.handleDynamicId;
    this.differ = other.differ;
    this.status = other.status;
    if (other.isSetHandleDate()) {
      this.handleDate = other.handleDate;
    }
    this.handleAuthor = other.handleAuthor;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetFlowName()) {
      this.flowName = other.flowName;
    }
    if (other.isSetHandleAuthorName()) {
      this.handleAuthorName = other.handleAuthorName;
    }
    this.fixDay = other.fixDay;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
  }

  public HandleDifferWarnIndexDTO deepCopy() {
    return new HandleDifferWarnIndexDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setHandleDynamicIdIsSet(false);
    this.handleDynamicId = 0;
    setDifferIsSet(false);
    this.differ = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.handleDate = null;
    setHandleAuthorIsSet(false);
    this.handleAuthor = 0;
    this.createDate = null;
    this.remark = null;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.flowName = null;
    this.handleAuthorName = null;
    setFixDayIsSet(false);
    this.fixDay = 0;
    this.projectNumber = null;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    this.pmUserName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public HandleDifferWarnIndexDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getHandleDynamicId() {
    return this.handleDynamicId;
  }

  public HandleDifferWarnIndexDTO setHandleDynamicId(int handleDynamicId) {
    this.handleDynamicId = handleDynamicId;
    setHandleDynamicIdIsSet(true);
    return this;
  }

  public void unsetHandleDynamicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEDYNAMICID_ISSET_ID);
  }

  /** Returns true if field handleDynamicId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleDynamicId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEDYNAMICID_ISSET_ID);
  }

  public void setHandleDynamicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEDYNAMICID_ISSET_ID, value);
  }

  public int getDiffer() {
    return this.differ;
  }

  public HandleDifferWarnIndexDTO setDiffer(int differ) {
    this.differ = differ;
    setDifferIsSet(true);
    return this;
  }

  public void unsetDiffer() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFFER_ISSET_ID);
  }

  /** Returns true if field differ is set (has been assigned a value) and false otherwise */
  public boolean isSetDiffer() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFFER_ISSET_ID);
  }

  public void setDifferIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFFER_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public HandleDifferWarnIndexDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getHandleDate() {
    return this.handleDate;
  }

  public HandleDifferWarnIndexDTO setHandleDate(String handleDate) {
    this.handleDate = handleDate;
    return this;
  }

  public void unsetHandleDate() {
    this.handleDate = null;
  }

  /** Returns true if field handleDate is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleDate() {
    return this.handleDate != null;
  }

  public void setHandleDateIsSet(boolean value) {
    if (!value) {
      this.handleDate = null;
    }
  }

  public int getHandleAuthor() {
    return this.handleAuthor;
  }

  public HandleDifferWarnIndexDTO setHandleAuthor(int handleAuthor) {
    this.handleAuthor = handleAuthor;
    setHandleAuthorIsSet(true);
    return this;
  }

  public void unsetHandleAuthor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEAUTHOR_ISSET_ID);
  }

  /** Returns true if field handleAuthor is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleAuthor() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEAUTHOR_ISSET_ID);
  }

  public void setHandleAuthorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEAUTHOR_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public HandleDifferWarnIndexDTO setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public HandleDifferWarnIndexDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public HandleDifferWarnIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public HandleDifferWarnIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public HandleDifferWarnIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public HandleDifferWarnIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public HandleDifferWarnIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getFlowName() {
    return this.flowName;
  }

  public HandleDifferWarnIndexDTO setFlowName(String flowName) {
    this.flowName = flowName;
    return this;
  }

  public void unsetFlowName() {
    this.flowName = null;
  }

  /** Returns true if field flowName is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowName() {
    return this.flowName != null;
  }

  public void setFlowNameIsSet(boolean value) {
    if (!value) {
      this.flowName = null;
    }
  }

  public String getHandleAuthorName() {
    return this.handleAuthorName;
  }

  public HandleDifferWarnIndexDTO setHandleAuthorName(String handleAuthorName) {
    this.handleAuthorName = handleAuthorName;
    return this;
  }

  public void unsetHandleAuthorName() {
    this.handleAuthorName = null;
  }

  /** Returns true if field handleAuthorName is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleAuthorName() {
    return this.handleAuthorName != null;
  }

  public void setHandleAuthorNameIsSet(boolean value) {
    if (!value) {
      this.handleAuthorName = null;
    }
  }

  public int getFixDay() {
    return this.fixDay;
  }

  public HandleDifferWarnIndexDTO setFixDay(int fixDay) {
    this.fixDay = fixDay;
    setFixDayIsSet(true);
    return this;
  }

  public void unsetFixDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXDAY_ISSET_ID);
  }

  /** Returns true if field fixDay is set (has been assigned a value) and false otherwise */
  public boolean isSetFixDay() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXDAY_ISSET_ID);
  }

  public void setFixDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXDAY_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public HandleDifferWarnIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getHouseName() {
    return this.houseName;
  }

  public HandleDifferWarnIndexDTO setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public HandleDifferWarnIndexDTO setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public HandleDifferWarnIndexDTO setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public HandleDifferWarnIndexDTO setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case HANDLE_DYNAMIC_ID:
      if (value == null) {
        unsetHandleDynamicId();
      } else {
        setHandleDynamicId((Integer)value);
      }
      break;

    case DIFFER:
      if (value == null) {
        unsetDiffer();
      } else {
        setDiffer((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case HANDLE_DATE:
      if (value == null) {
        unsetHandleDate();
      } else {
        setHandleDate((String)value);
      }
      break;

    case HANDLE_AUTHOR:
      if (value == null) {
        unsetHandleAuthor();
      } else {
        setHandleAuthor((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case FLOW_NAME:
      if (value == null) {
        unsetFlowName();
      } else {
        setFlowName((String)value);
      }
      break;

    case HANDLE_AUTHOR_NAME:
      if (value == null) {
        unsetHandleAuthorName();
      } else {
        setHandleAuthorName((String)value);
      }
      break;

    case FIX_DAY:
      if (value == null) {
        unsetFixDay();
      } else {
        setFixDay((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case HANDLE_DYNAMIC_ID:
      return Integer.valueOf(getHandleDynamicId());

    case DIFFER:
      return Integer.valueOf(getDiffer());

    case STATUS:
      return Integer.valueOf(getStatus());

    case HANDLE_DATE:
      return getHandleDate();

    case HANDLE_AUTHOR:
      return Integer.valueOf(getHandleAuthor());

    case CREATE_DATE:
      return getCreateDate();

    case REMARK:
      return getRemark();

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case FLOW_NAME:
      return getFlowName();

    case HANDLE_AUTHOR_NAME:
      return getHandleAuthorName();

    case FIX_DAY:
      return Integer.valueOf(getFixDay());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case PM_USER_NAME:
      return getPmUserName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case HANDLE_DYNAMIC_ID:
      return isSetHandleDynamicId();
    case DIFFER:
      return isSetDiffer();
    case STATUS:
      return isSetStatus();
    case HANDLE_DATE:
      return isSetHandleDate();
    case HANDLE_AUTHOR:
      return isSetHandleAuthor();
    case CREATE_DATE:
      return isSetCreateDate();
    case REMARK:
      return isSetRemark();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case FLOW_NAME:
      return isSetFlowName();
    case HANDLE_AUTHOR_NAME:
      return isSetHandleAuthorName();
    case FIX_DAY:
      return isSetFixDay();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case PM_USER_NAME:
      return isSetPmUserName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HandleDifferWarnIndexDTO)
      return this.equals((HandleDifferWarnIndexDTO)that);
    return false;
  }

  public boolean equals(HandleDifferWarnIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_handleDynamicId = true;
    boolean that_present_handleDynamicId = true;
    if (this_present_handleDynamicId || that_present_handleDynamicId) {
      if (!(this_present_handleDynamicId && that_present_handleDynamicId))
        return false;
      if (this.handleDynamicId != that.handleDynamicId)
        return false;
    }

    boolean this_present_differ = true;
    boolean that_present_differ = true;
    if (this_present_differ || that_present_differ) {
      if (!(this_present_differ && that_present_differ))
        return false;
      if (this.differ != that.differ)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_handleDate = true && this.isSetHandleDate();
    boolean that_present_handleDate = true && that.isSetHandleDate();
    if (this_present_handleDate || that_present_handleDate) {
      if (!(this_present_handleDate && that_present_handleDate))
        return false;
      if (!this.handleDate.equals(that.handleDate))
        return false;
    }

    boolean this_present_handleAuthor = true;
    boolean that_present_handleAuthor = true;
    if (this_present_handleAuthor || that_present_handleAuthor) {
      if (!(this_present_handleAuthor && that_present_handleAuthor))
        return false;
      if (this.handleAuthor != that.handleAuthor)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_flowName = true && this.isSetFlowName();
    boolean that_present_flowName = true && that.isSetFlowName();
    if (this_present_flowName || that_present_flowName) {
      if (!(this_present_flowName && that_present_flowName))
        return false;
      if (!this.flowName.equals(that.flowName))
        return false;
    }

    boolean this_present_handleAuthorName = true && this.isSetHandleAuthorName();
    boolean that_present_handleAuthorName = true && that.isSetHandleAuthorName();
    if (this_present_handleAuthorName || that_present_handleAuthorName) {
      if (!(this_present_handleAuthorName && that_present_handleAuthorName))
        return false;
      if (!this.handleAuthorName.equals(that.handleAuthorName))
        return false;
    }

    boolean this_present_fixDay = true;
    boolean that_present_fixDay = true;
    if (this_present_fixDay || that_present_fixDay) {
      if (!(this_present_fixDay && that_present_fixDay))
        return false;
      if (this.fixDay != that.fixDay)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_handleDynamicId = true;
    list.add(present_handleDynamicId);
    if (present_handleDynamicId)
      list.add(handleDynamicId);

    boolean present_differ = true;
    list.add(present_differ);
    if (present_differ)
      list.add(differ);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_handleDate = true && (isSetHandleDate());
    list.add(present_handleDate);
    if (present_handleDate)
      list.add(handleDate);

    boolean present_handleAuthor = true;
    list.add(present_handleAuthor);
    if (present_handleAuthor)
      list.add(handleAuthor);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_flowName = true && (isSetFlowName());
    list.add(present_flowName);
    if (present_flowName)
      list.add(flowName);

    boolean present_handleAuthorName = true && (isSetHandleAuthorName());
    list.add(present_handleAuthorName);
    if (present_handleAuthorName)
      list.add(handleAuthorName);

    boolean present_fixDay = true;
    list.add(present_fixDay);
    if (present_fixDay)
      list.add(fixDay);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    return list.hashCode();
  }

  @Override
  public int compareTo(HandleDifferWarnIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleDynamicId()).compareTo(other.isSetHandleDynamicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleDynamicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDynamicId, other.handleDynamicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiffer()).compareTo(other.isSetDiffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.differ, other.differ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleDate()).compareTo(other.isSetHandleDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDate, other.handleDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleAuthor()).compareTo(other.isSetHandleAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleAuthor, other.handleAuthor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowName()).compareTo(other.isSetFlowName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowName, other.flowName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleAuthorName()).compareTo(other.isSetHandleAuthorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleAuthorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleAuthorName, other.handleAuthorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixDay()).compareTo(other.isSetFixDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixDay, other.fixDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HandleDifferWarnIndexDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleDynamicId:");
    sb.append(this.handleDynamicId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("differ:");
    sb.append(this.differ);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleDate:");
    if (this.handleDate == null) {
      sb.append("null");
    } else {
      sb.append(this.handleDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleAuthor:");
    sb.append(this.handleAuthor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowName:");
    if (this.flowName == null) {
      sb.append("null");
    } else {
      sb.append(this.flowName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleAuthorName:");
    if (this.handleAuthorName == null) {
      sb.append("null");
    } else {
      sb.append(this.handleAuthorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixDay:");
    sb.append(this.fixDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HandleDifferWarnIndexDTOStandardSchemeFactory implements SchemeFactory {
    public HandleDifferWarnIndexDTOStandardScheme getScheme() {
      return new HandleDifferWarnIndexDTOStandardScheme();
    }
  }

  private static class HandleDifferWarnIndexDTOStandardScheme extends StandardScheme<HandleDifferWarnIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HandleDifferWarnIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HANDLE_DYNAMIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleDynamicId = iprot.readI32();
              struct.setHandleDynamicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.differ = iprot.readI32();
              struct.setDifferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HANDLE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleDate = iprot.readString();
              struct.setHandleDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HANDLE_AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleAuthor = iprot.readI32();
              struct.setHandleAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list112.size);
                int _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = iprot.readI32();
                  struct.userIds.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FLOW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowName = iprot.readString();
              struct.setFlowNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HANDLE_AUTHOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleAuthorName = iprot.readString();
              struct.setHandleAuthorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FIX_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fixDay = iprot.readI32();
              struct.setFixDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HandleDifferWarnIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_DYNAMIC_ID_FIELD_DESC);
      oprot.writeI32(struct.handleDynamicId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIFFER_FIELD_DESC);
      oprot.writeI32(struct.differ);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.handleDate != null) {
        oprot.writeFieldBegin(HANDLE_DATE_FIELD_DESC);
        oprot.writeString(struct.handleDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HANDLE_AUTHOR_FIELD_DESC);
      oprot.writeI32(struct.handleAuthor);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter115 : struct.userIds)
          {
            oprot.writeI32(_iter115);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.flowName != null) {
        oprot.writeFieldBegin(FLOW_NAME_FIELD_DESC);
        oprot.writeString(struct.flowName);
        oprot.writeFieldEnd();
      }
      if (struct.handleAuthorName != null) {
        oprot.writeFieldBegin(HANDLE_AUTHOR_NAME_FIELD_DESC);
        oprot.writeString(struct.handleAuthorName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIX_DAY_FIELD_DESC);
      oprot.writeI32(struct.fixDay);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HandleDifferWarnIndexDTOTupleSchemeFactory implements SchemeFactory {
    public HandleDifferWarnIndexDTOTupleScheme getScheme() {
      return new HandleDifferWarnIndexDTOTupleScheme();
    }
  }

  private static class HandleDifferWarnIndexDTOTupleScheme extends TupleScheme<HandleDifferWarnIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HandleDifferWarnIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetHandleDynamicId()) {
        optionals.set(1);
      }
      if (struct.isSetDiffer()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetHandleDate()) {
        optionals.set(4);
      }
      if (struct.isSetHandleAuthor()) {
        optionals.set(5);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(6);
      }
      if (struct.isSetRemark()) {
        optionals.set(7);
      }
      if (struct.isSetUserIds()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      if (struct.isSetProjectId()) {
        optionals.set(11);
      }
      if (struct.isSetProjectName()) {
        optionals.set(12);
      }
      if (struct.isSetFlowName()) {
        optionals.set(13);
      }
      if (struct.isSetHandleAuthorName()) {
        optionals.set(14);
      }
      if (struct.isSetFixDay()) {
        optionals.set(15);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(16);
      }
      if (struct.isSetHouseName()) {
        optionals.set(17);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(18);
      }
      if (struct.isSetSellerName()) {
        optionals.set(19);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetHandleDynamicId()) {
        oprot.writeI32(struct.handleDynamicId);
      }
      if (struct.isSetDiffer()) {
        oprot.writeI32(struct.differ);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetHandleDate()) {
        oprot.writeString(struct.handleDate);
      }
      if (struct.isSetHandleAuthor()) {
        oprot.writeI32(struct.handleAuthor);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter116 : struct.userIds)
          {
            oprot.writeI32(_iter116);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetFlowName()) {
        oprot.writeString(struct.flowName);
      }
      if (struct.isSetHandleAuthorName()) {
        oprot.writeString(struct.handleAuthorName);
      }
      if (struct.isSetFixDay()) {
        oprot.writeI32(struct.fixDay);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HandleDifferWarnIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.handleDynamicId = iprot.readI32();
        struct.setHandleDynamicIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.differ = iprot.readI32();
        struct.setDifferIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.handleDate = iprot.readString();
        struct.setHandleDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.handleAuthor = iprot.readI32();
        struct.setHandleAuthorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list117.size);
          int _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = iprot.readI32();
            struct.userIds.add(_elem118);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.flowName = iprot.readString();
        struct.setFlowNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.handleAuthorName = iprot.readString();
        struct.setHandleAuthorNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.fixDay = iprot.readI32();
        struct.setFixDayIsSet(true);
      }
      if (incoming.get(16)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(17)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
    }
  }

}


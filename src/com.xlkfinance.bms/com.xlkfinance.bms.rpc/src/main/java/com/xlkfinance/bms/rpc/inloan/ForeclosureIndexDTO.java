/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class ForeclosureIndexDTO implements org.apache.thrift.TBase<ForeclosureIndexDTO, ForeclosureIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ForeclosureIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForeclosureIndexDTO");

  private static final org.apache.thrift.protocol.TField BIZ_HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bizHandleId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REC_FEE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("recFeeStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REC_FEE_STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("recFeeStatusList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField HOUSE_CLERK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("houseClerkId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField HOUSE_CLERK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseClerkName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField BALANCE_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("balanceConfirm", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REAL_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("realLoan", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_TURN_DOWN_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureTurnDownRemark", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ONE_FORECLOSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("oneForeclosureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField TWO_FORECLOSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("twoForeclosureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField ONE_REAL_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("oneRealLoan", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField TWO_REAL_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("twoRealLoan", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField ONE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("oneBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField TWO_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("twoBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payDate", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField FROM_PAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromPayDate", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField END_PAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endPayDate", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField HANDLE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("handleUserName", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)33);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ForeclosureIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ForeclosureIndexDTOTupleSchemeFactory());
  }

  public int bizHandleId; // required
  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public int recFeeStatus; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public List<Integer> recFeeStatusList; // required
  public int houseClerkId; // required
  public String houseClerkName; // required
  public int foreclosureStatus; // required
  public int balanceConfirm; // required
  public double realLoan; // required
  public double balance; // required
  public String foreclosureTurnDownRemark; // required
  public double oneForeclosureMoney; // required
  public double twoForeclosureMoney; // required
  public double foreclosureMoney; // required
  public double oneRealLoan; // required
  public double twoRealLoan; // required
  public double oneBalance; // required
  public double twoBalance; // required
  public int projectSource; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public String payDate; // required
  public String fromPayDate; // required
  public String endPayDate; // required
  public String handleUserName; // required
  public int productId; // required
  public String productName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIZ_HANDLE_ID((short)1, "bizHandleId"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    PROJECT_NAME((short)4, "projectName"),
    REC_FEE_STATUS((short)5, "recFeeStatus"),
    USER_IDS((short)6, "userIds"),
    PAGE((short)7, "page"),
    ROWS((short)8, "rows"),
    REC_FEE_STATUS_LIST((short)9, "recFeeStatusList"),
    HOUSE_CLERK_ID((short)10, "houseClerkId"),
    HOUSE_CLERK_NAME((short)11, "houseClerkName"),
    FORECLOSURE_STATUS((short)12, "foreclosureStatus"),
    BALANCE_CONFIRM((short)13, "balanceConfirm"),
    REAL_LOAN((short)14, "realLoan"),
    BALANCE((short)15, "balance"),
    FORECLOSURE_TURN_DOWN_REMARK((short)16, "foreclosureTurnDownRemark"),
    ONE_FORECLOSURE_MONEY((short)17, "oneForeclosureMoney"),
    TWO_FORECLOSURE_MONEY((short)18, "twoForeclosureMoney"),
    FORECLOSURE_MONEY((short)19, "foreclosureMoney"),
    ONE_REAL_LOAN((short)20, "oneRealLoan"),
    TWO_REAL_LOAN((short)21, "twoRealLoan"),
    ONE_BALANCE((short)22, "oneBalance"),
    TWO_BALANCE((short)23, "twoBalance"),
    PROJECT_SOURCE((short)24, "projectSource"),
    HOUSE_NAME((short)25, "houseName"),
    BUYER_NAME((short)26, "buyerName"),
    SELLER_NAME((short)27, "sellerName"),
    PAY_DATE((short)28, "payDate"),
    FROM_PAY_DATE((short)29, "fromPayDate"),
    END_PAY_DATE((short)30, "endPayDate"),
    HANDLE_USER_NAME((short)31, "handleUserName"),
    PRODUCT_ID((short)32, "productId"),
    PRODUCT_NAME((short)33, "productName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIZ_HANDLE_ID
          return BIZ_HANDLE_ID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // REC_FEE_STATUS
          return REC_FEE_STATUS;
        case 6: // USER_IDS
          return USER_IDS;
        case 7: // PAGE
          return PAGE;
        case 8: // ROWS
          return ROWS;
        case 9: // REC_FEE_STATUS_LIST
          return REC_FEE_STATUS_LIST;
        case 10: // HOUSE_CLERK_ID
          return HOUSE_CLERK_ID;
        case 11: // HOUSE_CLERK_NAME
          return HOUSE_CLERK_NAME;
        case 12: // FORECLOSURE_STATUS
          return FORECLOSURE_STATUS;
        case 13: // BALANCE_CONFIRM
          return BALANCE_CONFIRM;
        case 14: // REAL_LOAN
          return REAL_LOAN;
        case 15: // BALANCE
          return BALANCE;
        case 16: // FORECLOSURE_TURN_DOWN_REMARK
          return FORECLOSURE_TURN_DOWN_REMARK;
        case 17: // ONE_FORECLOSURE_MONEY
          return ONE_FORECLOSURE_MONEY;
        case 18: // TWO_FORECLOSURE_MONEY
          return TWO_FORECLOSURE_MONEY;
        case 19: // FORECLOSURE_MONEY
          return FORECLOSURE_MONEY;
        case 20: // ONE_REAL_LOAN
          return ONE_REAL_LOAN;
        case 21: // TWO_REAL_LOAN
          return TWO_REAL_LOAN;
        case 22: // ONE_BALANCE
          return ONE_BALANCE;
        case 23: // TWO_BALANCE
          return TWO_BALANCE;
        case 24: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 25: // HOUSE_NAME
          return HOUSE_NAME;
        case 26: // BUYER_NAME
          return BUYER_NAME;
        case 27: // SELLER_NAME
          return SELLER_NAME;
        case 28: // PAY_DATE
          return PAY_DATE;
        case 29: // FROM_PAY_DATE
          return FROM_PAY_DATE;
        case 30: // END_PAY_DATE
          return END_PAY_DATE;
        case 31: // HANDLE_USER_NAME
          return HANDLE_USER_NAME;
        case 32: // PRODUCT_ID
          return PRODUCT_ID;
        case 33: // PRODUCT_NAME
          return PRODUCT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BIZHANDLEID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __RECFEESTATUS_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __HOUSECLERKID_ISSET_ID = 5;
  private static final int __FORECLOSURESTATUS_ISSET_ID = 6;
  private static final int __BALANCECONFIRM_ISSET_ID = 7;
  private static final int __REALLOAN_ISSET_ID = 8;
  private static final int __BALANCE_ISSET_ID = 9;
  private static final int __ONEFORECLOSUREMONEY_ISSET_ID = 10;
  private static final int __TWOFORECLOSUREMONEY_ISSET_ID = 11;
  private static final int __FORECLOSUREMONEY_ISSET_ID = 12;
  private static final int __ONEREALLOAN_ISSET_ID = 13;
  private static final int __TWOREALLOAN_ISSET_ID = 14;
  private static final int __ONEBALANCE_ISSET_ID = 15;
  private static final int __TWOBALANCE_ISSET_ID = 16;
  private static final int __PROJECTSOURCE_ISSET_ID = 17;
  private static final int __PRODUCTID_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIZ_HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("bizHandleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_FEE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("recFeeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_FEE_STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("recFeeStatusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HOUSE_CLERK_ID, new org.apache.thrift.meta_data.FieldMetaData("houseClerkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_CLERK_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseClerkName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("foreclosureStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BALANCE_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("balanceConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REAL_LOAN, new org.apache.thrift.meta_data.FieldMetaData("realLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORECLOSURE_TURN_DOWN_REMARK, new org.apache.thrift.meta_data.FieldMetaData("foreclosureTurnDownRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ONE_FORECLOSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("oneForeclosureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TWO_FORECLOSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("twoForeclosureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORECLOSURE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("foreclosureMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ONE_REAL_LOAN, new org.apache.thrift.meta_data.FieldMetaData("oneRealLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TWO_REAL_LOAN, new org.apache.thrift.meta_data.FieldMetaData("twoRealLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ONE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("oneBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TWO_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("twoBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("payDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_PAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromPayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_PAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("endPayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("handleUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForeclosureIndexDTO.class, metaDataMap);
  }

  public ForeclosureIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public ForeclosureIndexDTO(
    int bizHandleId,
    int projectId,
    String projectNumber,
    String projectName,
    int recFeeStatus,
    List<Integer> userIds,
    int page,
    int rows,
    List<Integer> recFeeStatusList,
    int houseClerkId,
    String houseClerkName,
    int foreclosureStatus,
    int balanceConfirm,
    double realLoan,
    double balance,
    String foreclosureTurnDownRemark,
    double oneForeclosureMoney,
    double twoForeclosureMoney,
    double foreclosureMoney,
    double oneRealLoan,
    double twoRealLoan,
    double oneBalance,
    double twoBalance,
    int projectSource,
    String houseName,
    String buyerName,
    String sellerName,
    String payDate,
    String fromPayDate,
    String endPayDate,
    String handleUserName,
    int productId,
    String productName)
  {
    this();
    this.bizHandleId = bizHandleId;
    setBizHandleIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.recFeeStatus = recFeeStatus;
    setRecFeeStatusIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.recFeeStatusList = recFeeStatusList;
    this.houseClerkId = houseClerkId;
    setHouseClerkIdIsSet(true);
    this.houseClerkName = houseClerkName;
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    this.balanceConfirm = balanceConfirm;
    setBalanceConfirmIsSet(true);
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    this.balance = balance;
    setBalanceIsSet(true);
    this.foreclosureTurnDownRemark = foreclosureTurnDownRemark;
    this.oneForeclosureMoney = oneForeclosureMoney;
    setOneForeclosureMoneyIsSet(true);
    this.twoForeclosureMoney = twoForeclosureMoney;
    setTwoForeclosureMoneyIsSet(true);
    this.foreclosureMoney = foreclosureMoney;
    setForeclosureMoneyIsSet(true);
    this.oneRealLoan = oneRealLoan;
    setOneRealLoanIsSet(true);
    this.twoRealLoan = twoRealLoan;
    setTwoRealLoanIsSet(true);
    this.oneBalance = oneBalance;
    setOneBalanceIsSet(true);
    this.twoBalance = twoBalance;
    setTwoBalanceIsSet(true);
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.payDate = payDate;
    this.fromPayDate = fromPayDate;
    this.endPayDate = endPayDate;
    this.handleUserName = handleUserName;
    this.productId = productId;
    setProductIdIsSet(true);
    this.productName = productName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ForeclosureIndexDTO(ForeclosureIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bizHandleId = other.bizHandleId;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.recFeeStatus = other.recFeeStatus;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetRecFeeStatusList()) {
      List<Integer> __this__recFeeStatusList = new ArrayList<Integer>(other.recFeeStatusList);
      this.recFeeStatusList = __this__recFeeStatusList;
    }
    this.houseClerkId = other.houseClerkId;
    if (other.isSetHouseClerkName()) {
      this.houseClerkName = other.houseClerkName;
    }
    this.foreclosureStatus = other.foreclosureStatus;
    this.balanceConfirm = other.balanceConfirm;
    this.realLoan = other.realLoan;
    this.balance = other.balance;
    if (other.isSetForeclosureTurnDownRemark()) {
      this.foreclosureTurnDownRemark = other.foreclosureTurnDownRemark;
    }
    this.oneForeclosureMoney = other.oneForeclosureMoney;
    this.twoForeclosureMoney = other.twoForeclosureMoney;
    this.foreclosureMoney = other.foreclosureMoney;
    this.oneRealLoan = other.oneRealLoan;
    this.twoRealLoan = other.twoRealLoan;
    this.oneBalance = other.oneBalance;
    this.twoBalance = other.twoBalance;
    this.projectSource = other.projectSource;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    if (other.isSetPayDate()) {
      this.payDate = other.payDate;
    }
    if (other.isSetFromPayDate()) {
      this.fromPayDate = other.fromPayDate;
    }
    if (other.isSetEndPayDate()) {
      this.endPayDate = other.endPayDate;
    }
    if (other.isSetHandleUserName()) {
      this.handleUserName = other.handleUserName;
    }
    this.productId = other.productId;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
  }

  public ForeclosureIndexDTO deepCopy() {
    return new ForeclosureIndexDTO(this);
  }

  @Override
  public void clear() {
    setBizHandleIdIsSet(false);
    this.bizHandleId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    setRecFeeStatusIsSet(false);
    this.recFeeStatus = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    this.recFeeStatusList = null;
    setHouseClerkIdIsSet(false);
    this.houseClerkId = 0;
    this.houseClerkName = null;
    setForeclosureStatusIsSet(false);
    this.foreclosureStatus = 0;
    setBalanceConfirmIsSet(false);
    this.balanceConfirm = 0;
    setRealLoanIsSet(false);
    this.realLoan = 0.0;
    setBalanceIsSet(false);
    this.balance = 0.0;
    this.foreclosureTurnDownRemark = null;
    setOneForeclosureMoneyIsSet(false);
    this.oneForeclosureMoney = 0.0;
    setTwoForeclosureMoneyIsSet(false);
    this.twoForeclosureMoney = 0.0;
    setForeclosureMoneyIsSet(false);
    this.foreclosureMoney = 0.0;
    setOneRealLoanIsSet(false);
    this.oneRealLoan = 0.0;
    setTwoRealLoanIsSet(false);
    this.twoRealLoan = 0.0;
    setOneBalanceIsSet(false);
    this.oneBalance = 0.0;
    setTwoBalanceIsSet(false);
    this.twoBalance = 0.0;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    this.payDate = null;
    this.fromPayDate = null;
    this.endPayDate = null;
    this.handleUserName = null;
    setProductIdIsSet(false);
    this.productId = 0;
    this.productName = null;
  }

  public int getBizHandleId() {
    return this.bizHandleId;
  }

  public ForeclosureIndexDTO setBizHandleId(int bizHandleId) {
    this.bizHandleId = bizHandleId;
    setBizHandleIdIsSet(true);
    return this;
  }

  public void unsetBizHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZHANDLEID_ISSET_ID);
  }

  /** Returns true if field bizHandleId is set (has been assigned a value) and false otherwise */
  public boolean isSetBizHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __BIZHANDLEID_ISSET_ID);
  }

  public void setBizHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZHANDLEID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ForeclosureIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ForeclosureIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ForeclosureIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getRecFeeStatus() {
    return this.recFeeStatus;
  }

  public ForeclosureIndexDTO setRecFeeStatus(int recFeeStatus) {
    this.recFeeStatus = recFeeStatus;
    setRecFeeStatusIsSet(true);
    return this;
  }

  public void unsetRecFeeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID);
  }

  /** Returns true if field recFeeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRecFeeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID);
  }

  public void setRecFeeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ForeclosureIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ForeclosureIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ForeclosureIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getRecFeeStatusListSize() {
    return (this.recFeeStatusList == null) ? 0 : this.recFeeStatusList.size();
  }

  public java.util.Iterator<Integer> getRecFeeStatusListIterator() {
    return (this.recFeeStatusList == null) ? null : this.recFeeStatusList.iterator();
  }

  public void addToRecFeeStatusList(int elem) {
    if (this.recFeeStatusList == null) {
      this.recFeeStatusList = new ArrayList<Integer>();
    }
    this.recFeeStatusList.add(elem);
  }

  public List<Integer> getRecFeeStatusList() {
    return this.recFeeStatusList;
  }

  public ForeclosureIndexDTO setRecFeeStatusList(List<Integer> recFeeStatusList) {
    this.recFeeStatusList = recFeeStatusList;
    return this;
  }

  public void unsetRecFeeStatusList() {
    this.recFeeStatusList = null;
  }

  /** Returns true if field recFeeStatusList is set (has been assigned a value) and false otherwise */
  public boolean isSetRecFeeStatusList() {
    return this.recFeeStatusList != null;
  }

  public void setRecFeeStatusListIsSet(boolean value) {
    if (!value) {
      this.recFeeStatusList = null;
    }
  }

  public int getHouseClerkId() {
    return this.houseClerkId;
  }

  public ForeclosureIndexDTO setHouseClerkId(int houseClerkId) {
    this.houseClerkId = houseClerkId;
    setHouseClerkIdIsSet(true);
    return this;
  }

  public void unsetHouseClerkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID);
  }

  /** Returns true if field houseClerkId is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseClerkId() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID);
  }

  public void setHouseClerkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSECLERKID_ISSET_ID, value);
  }

  public String getHouseClerkName() {
    return this.houseClerkName;
  }

  public ForeclosureIndexDTO setHouseClerkName(String houseClerkName) {
    this.houseClerkName = houseClerkName;
    return this;
  }

  public void unsetHouseClerkName() {
    this.houseClerkName = null;
  }

  /** Returns true if field houseClerkName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseClerkName() {
    return this.houseClerkName != null;
  }

  public void setHouseClerkNameIsSet(boolean value) {
    if (!value) {
      this.houseClerkName = null;
    }
  }

  public int getForeclosureStatus() {
    return this.foreclosureStatus;
  }

  public ForeclosureIndexDTO setForeclosureStatus(int foreclosureStatus) {
    this.foreclosureStatus = foreclosureStatus;
    setForeclosureStatusIsSet(true);
    return this;
  }

  public void unsetForeclosureStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  /** Returns true if field foreclosureStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID);
  }

  public void setForeclosureStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSURESTATUS_ISSET_ID, value);
  }

  public int getBalanceConfirm() {
    return this.balanceConfirm;
  }

  public ForeclosureIndexDTO setBalanceConfirm(int balanceConfirm) {
    this.balanceConfirm = balanceConfirm;
    setBalanceConfirmIsSet(true);
    return this;
  }

  public void unsetBalanceConfirm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCECONFIRM_ISSET_ID);
  }

  /** Returns true if field balanceConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetBalanceConfirm() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCECONFIRM_ISSET_ID);
  }

  public void setBalanceConfirmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCECONFIRM_ISSET_ID, value);
  }

  public double getRealLoan() {
    return this.realLoan;
  }

  public ForeclosureIndexDTO setRealLoan(double realLoan) {
    this.realLoan = realLoan;
    setRealLoanIsSet(true);
    return this;
  }

  public void unsetRealLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  /** Returns true if field realLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetRealLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __REALLOAN_ISSET_ID);
  }

  public void setRealLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALLOAN_ISSET_ID, value);
  }

  public double getBalance() {
    return this.balance;
  }

  public ForeclosureIndexDTO setBalance(double balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public String getForeclosureTurnDownRemark() {
    return this.foreclosureTurnDownRemark;
  }

  public ForeclosureIndexDTO setForeclosureTurnDownRemark(String foreclosureTurnDownRemark) {
    this.foreclosureTurnDownRemark = foreclosureTurnDownRemark;
    return this;
  }

  public void unsetForeclosureTurnDownRemark() {
    this.foreclosureTurnDownRemark = null;
  }

  /** Returns true if field foreclosureTurnDownRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureTurnDownRemark() {
    return this.foreclosureTurnDownRemark != null;
  }

  public void setForeclosureTurnDownRemarkIsSet(boolean value) {
    if (!value) {
      this.foreclosureTurnDownRemark = null;
    }
  }

  public double getOneForeclosureMoney() {
    return this.oneForeclosureMoney;
  }

  public ForeclosureIndexDTO setOneForeclosureMoney(double oneForeclosureMoney) {
    this.oneForeclosureMoney = oneForeclosureMoney;
    setOneForeclosureMoneyIsSet(true);
    return this;
  }

  public void unsetOneForeclosureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONEFORECLOSUREMONEY_ISSET_ID);
  }

  /** Returns true if field oneForeclosureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOneForeclosureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ONEFORECLOSUREMONEY_ISSET_ID);
  }

  public void setOneForeclosureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONEFORECLOSUREMONEY_ISSET_ID, value);
  }

  public double getTwoForeclosureMoney() {
    return this.twoForeclosureMoney;
  }

  public ForeclosureIndexDTO setTwoForeclosureMoney(double twoForeclosureMoney) {
    this.twoForeclosureMoney = twoForeclosureMoney;
    setTwoForeclosureMoneyIsSet(true);
    return this;
  }

  public void unsetTwoForeclosureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TWOFORECLOSUREMONEY_ISSET_ID);
  }

  /** Returns true if field twoForeclosureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTwoForeclosureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TWOFORECLOSUREMONEY_ISSET_ID);
  }

  public void setTwoForeclosureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TWOFORECLOSUREMONEY_ISSET_ID, value);
  }

  public double getForeclosureMoney() {
    return this.foreclosureMoney;
  }

  public ForeclosureIndexDTO setForeclosureMoney(double foreclosureMoney) {
    this.foreclosureMoney = foreclosureMoney;
    setForeclosureMoneyIsSet(true);
    return this;
  }

  public void unsetForeclosureMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID);
  }

  /** Returns true if field foreclosureMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID);
  }

  public void setForeclosureMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSUREMONEY_ISSET_ID, value);
  }

  public double getOneRealLoan() {
    return this.oneRealLoan;
  }

  public ForeclosureIndexDTO setOneRealLoan(double oneRealLoan) {
    this.oneRealLoan = oneRealLoan;
    setOneRealLoanIsSet(true);
    return this;
  }

  public void unsetOneRealLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONEREALLOAN_ISSET_ID);
  }

  /** Returns true if field oneRealLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetOneRealLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __ONEREALLOAN_ISSET_ID);
  }

  public void setOneRealLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONEREALLOAN_ISSET_ID, value);
  }

  public double getTwoRealLoan() {
    return this.twoRealLoan;
  }

  public ForeclosureIndexDTO setTwoRealLoan(double twoRealLoan) {
    this.twoRealLoan = twoRealLoan;
    setTwoRealLoanIsSet(true);
    return this;
  }

  public void unsetTwoRealLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TWOREALLOAN_ISSET_ID);
  }

  /** Returns true if field twoRealLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetTwoRealLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __TWOREALLOAN_ISSET_ID);
  }

  public void setTwoRealLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TWOREALLOAN_ISSET_ID, value);
  }

  public double getOneBalance() {
    return this.oneBalance;
  }

  public ForeclosureIndexDTO setOneBalance(double oneBalance) {
    this.oneBalance = oneBalance;
    setOneBalanceIsSet(true);
    return this;
  }

  public void unsetOneBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONEBALANCE_ISSET_ID);
  }

  /** Returns true if field oneBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetOneBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __ONEBALANCE_ISSET_ID);
  }

  public void setOneBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONEBALANCE_ISSET_ID, value);
  }

  public double getTwoBalance() {
    return this.twoBalance;
  }

  public ForeclosureIndexDTO setTwoBalance(double twoBalance) {
    this.twoBalance = twoBalance;
    setTwoBalanceIsSet(true);
    return this;
  }

  public void unsetTwoBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TWOBALANCE_ISSET_ID);
  }

  /** Returns true if field twoBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetTwoBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __TWOBALANCE_ISSET_ID);
  }

  public void setTwoBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TWOBALANCE_ISSET_ID, value);
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public ForeclosureIndexDTO setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public ForeclosureIndexDTO setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public ForeclosureIndexDTO setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public ForeclosureIndexDTO setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public String getPayDate() {
    return this.payDate;
  }

  public ForeclosureIndexDTO setPayDate(String payDate) {
    this.payDate = payDate;
    return this;
  }

  public void unsetPayDate() {
    this.payDate = null;
  }

  /** Returns true if field payDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPayDate() {
    return this.payDate != null;
  }

  public void setPayDateIsSet(boolean value) {
    if (!value) {
      this.payDate = null;
    }
  }

  public String getFromPayDate() {
    return this.fromPayDate;
  }

  public ForeclosureIndexDTO setFromPayDate(String fromPayDate) {
    this.fromPayDate = fromPayDate;
    return this;
  }

  public void unsetFromPayDate() {
    this.fromPayDate = null;
  }

  /** Returns true if field fromPayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromPayDate() {
    return this.fromPayDate != null;
  }

  public void setFromPayDateIsSet(boolean value) {
    if (!value) {
      this.fromPayDate = null;
    }
  }

  public String getEndPayDate() {
    return this.endPayDate;
  }

  public ForeclosureIndexDTO setEndPayDate(String endPayDate) {
    this.endPayDate = endPayDate;
    return this;
  }

  public void unsetEndPayDate() {
    this.endPayDate = null;
  }

  /** Returns true if field endPayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndPayDate() {
    return this.endPayDate != null;
  }

  public void setEndPayDateIsSet(boolean value) {
    if (!value) {
      this.endPayDate = null;
    }
  }

  public String getHandleUserName() {
    return this.handleUserName;
  }

  public ForeclosureIndexDTO setHandleUserName(String handleUserName) {
    this.handleUserName = handleUserName;
    return this;
  }

  public void unsetHandleUserName() {
    this.handleUserName = null;
  }

  /** Returns true if field handleUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleUserName() {
    return this.handleUserName != null;
  }

  public void setHandleUserNameIsSet(boolean value) {
    if (!value) {
      this.handleUserName = null;
    }
  }

  public int getProductId() {
    return this.productId;
  }

  public ForeclosureIndexDTO setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public ForeclosureIndexDTO setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BIZ_HANDLE_ID:
      if (value == null) {
        unsetBizHandleId();
      } else {
        setBizHandleId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case REC_FEE_STATUS:
      if (value == null) {
        unsetRecFeeStatus();
      } else {
        setRecFeeStatus((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case REC_FEE_STATUS_LIST:
      if (value == null) {
        unsetRecFeeStatusList();
      } else {
        setRecFeeStatusList((List<Integer>)value);
      }
      break;

    case HOUSE_CLERK_ID:
      if (value == null) {
        unsetHouseClerkId();
      } else {
        setHouseClerkId((Integer)value);
      }
      break;

    case HOUSE_CLERK_NAME:
      if (value == null) {
        unsetHouseClerkName();
      } else {
        setHouseClerkName((String)value);
      }
      break;

    case FORECLOSURE_STATUS:
      if (value == null) {
        unsetForeclosureStatus();
      } else {
        setForeclosureStatus((Integer)value);
      }
      break;

    case BALANCE_CONFIRM:
      if (value == null) {
        unsetBalanceConfirm();
      } else {
        setBalanceConfirm((Integer)value);
      }
      break;

    case REAL_LOAN:
      if (value == null) {
        unsetRealLoan();
      } else {
        setRealLoan((Double)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Double)value);
      }
      break;

    case FORECLOSURE_TURN_DOWN_REMARK:
      if (value == null) {
        unsetForeclosureTurnDownRemark();
      } else {
        setForeclosureTurnDownRemark((String)value);
      }
      break;

    case ONE_FORECLOSURE_MONEY:
      if (value == null) {
        unsetOneForeclosureMoney();
      } else {
        setOneForeclosureMoney((Double)value);
      }
      break;

    case TWO_FORECLOSURE_MONEY:
      if (value == null) {
        unsetTwoForeclosureMoney();
      } else {
        setTwoForeclosureMoney((Double)value);
      }
      break;

    case FORECLOSURE_MONEY:
      if (value == null) {
        unsetForeclosureMoney();
      } else {
        setForeclosureMoney((Double)value);
      }
      break;

    case ONE_REAL_LOAN:
      if (value == null) {
        unsetOneRealLoan();
      } else {
        setOneRealLoan((Double)value);
      }
      break;

    case TWO_REAL_LOAN:
      if (value == null) {
        unsetTwoRealLoan();
      } else {
        setTwoRealLoan((Double)value);
      }
      break;

    case ONE_BALANCE:
      if (value == null) {
        unsetOneBalance();
      } else {
        setOneBalance((Double)value);
      }
      break;

    case TWO_BALANCE:
      if (value == null) {
        unsetTwoBalance();
      } else {
        setTwoBalance((Double)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case PAY_DATE:
      if (value == null) {
        unsetPayDate();
      } else {
        setPayDate((String)value);
      }
      break;

    case FROM_PAY_DATE:
      if (value == null) {
        unsetFromPayDate();
      } else {
        setFromPayDate((String)value);
      }
      break;

    case END_PAY_DATE:
      if (value == null) {
        unsetEndPayDate();
      } else {
        setEndPayDate((String)value);
      }
      break;

    case HANDLE_USER_NAME:
      if (value == null) {
        unsetHandleUserName();
      } else {
        setHandleUserName((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIZ_HANDLE_ID:
      return Integer.valueOf(getBizHandleId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case REC_FEE_STATUS:
      return Integer.valueOf(getRecFeeStatus());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case REC_FEE_STATUS_LIST:
      return getRecFeeStatusList();

    case HOUSE_CLERK_ID:
      return Integer.valueOf(getHouseClerkId());

    case HOUSE_CLERK_NAME:
      return getHouseClerkName();

    case FORECLOSURE_STATUS:
      return Integer.valueOf(getForeclosureStatus());

    case BALANCE_CONFIRM:
      return Integer.valueOf(getBalanceConfirm());

    case REAL_LOAN:
      return Double.valueOf(getRealLoan());

    case BALANCE:
      return Double.valueOf(getBalance());

    case FORECLOSURE_TURN_DOWN_REMARK:
      return getForeclosureTurnDownRemark();

    case ONE_FORECLOSURE_MONEY:
      return Double.valueOf(getOneForeclosureMoney());

    case TWO_FORECLOSURE_MONEY:
      return Double.valueOf(getTwoForeclosureMoney());

    case FORECLOSURE_MONEY:
      return Double.valueOf(getForeclosureMoney());

    case ONE_REAL_LOAN:
      return Double.valueOf(getOneRealLoan());

    case TWO_REAL_LOAN:
      return Double.valueOf(getTwoRealLoan());

    case ONE_BALANCE:
      return Double.valueOf(getOneBalance());

    case TWO_BALANCE:
      return Double.valueOf(getTwoBalance());

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case PAY_DATE:
      return getPayDate();

    case FROM_PAY_DATE:
      return getFromPayDate();

    case END_PAY_DATE:
      return getEndPayDate();

    case HANDLE_USER_NAME:
      return getHandleUserName();

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case PRODUCT_NAME:
      return getProductName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIZ_HANDLE_ID:
      return isSetBizHandleId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case REC_FEE_STATUS:
      return isSetRecFeeStatus();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case REC_FEE_STATUS_LIST:
      return isSetRecFeeStatusList();
    case HOUSE_CLERK_ID:
      return isSetHouseClerkId();
    case HOUSE_CLERK_NAME:
      return isSetHouseClerkName();
    case FORECLOSURE_STATUS:
      return isSetForeclosureStatus();
    case BALANCE_CONFIRM:
      return isSetBalanceConfirm();
    case REAL_LOAN:
      return isSetRealLoan();
    case BALANCE:
      return isSetBalance();
    case FORECLOSURE_TURN_DOWN_REMARK:
      return isSetForeclosureTurnDownRemark();
    case ONE_FORECLOSURE_MONEY:
      return isSetOneForeclosureMoney();
    case TWO_FORECLOSURE_MONEY:
      return isSetTwoForeclosureMoney();
    case FORECLOSURE_MONEY:
      return isSetForeclosureMoney();
    case ONE_REAL_LOAN:
      return isSetOneRealLoan();
    case TWO_REAL_LOAN:
      return isSetTwoRealLoan();
    case ONE_BALANCE:
      return isSetOneBalance();
    case TWO_BALANCE:
      return isSetTwoBalance();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case PAY_DATE:
      return isSetPayDate();
    case FROM_PAY_DATE:
      return isSetFromPayDate();
    case END_PAY_DATE:
      return isSetEndPayDate();
    case HANDLE_USER_NAME:
      return isSetHandleUserName();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ForeclosureIndexDTO)
      return this.equals((ForeclosureIndexDTO)that);
    return false;
  }

  public boolean equals(ForeclosureIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_bizHandleId = true;
    boolean that_present_bizHandleId = true;
    if (this_present_bizHandleId || that_present_bizHandleId) {
      if (!(this_present_bizHandleId && that_present_bizHandleId))
        return false;
      if (this.bizHandleId != that.bizHandleId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_recFeeStatus = true;
    boolean that_present_recFeeStatus = true;
    if (this_present_recFeeStatus || that_present_recFeeStatus) {
      if (!(this_present_recFeeStatus && that_present_recFeeStatus))
        return false;
      if (this.recFeeStatus != that.recFeeStatus)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_recFeeStatusList = true && this.isSetRecFeeStatusList();
    boolean that_present_recFeeStatusList = true && that.isSetRecFeeStatusList();
    if (this_present_recFeeStatusList || that_present_recFeeStatusList) {
      if (!(this_present_recFeeStatusList && that_present_recFeeStatusList))
        return false;
      if (!this.recFeeStatusList.equals(that.recFeeStatusList))
        return false;
    }

    boolean this_present_houseClerkId = true;
    boolean that_present_houseClerkId = true;
    if (this_present_houseClerkId || that_present_houseClerkId) {
      if (!(this_present_houseClerkId && that_present_houseClerkId))
        return false;
      if (this.houseClerkId != that.houseClerkId)
        return false;
    }

    boolean this_present_houseClerkName = true && this.isSetHouseClerkName();
    boolean that_present_houseClerkName = true && that.isSetHouseClerkName();
    if (this_present_houseClerkName || that_present_houseClerkName) {
      if (!(this_present_houseClerkName && that_present_houseClerkName))
        return false;
      if (!this.houseClerkName.equals(that.houseClerkName))
        return false;
    }

    boolean this_present_foreclosureStatus = true;
    boolean that_present_foreclosureStatus = true;
    if (this_present_foreclosureStatus || that_present_foreclosureStatus) {
      if (!(this_present_foreclosureStatus && that_present_foreclosureStatus))
        return false;
      if (this.foreclosureStatus != that.foreclosureStatus)
        return false;
    }

    boolean this_present_balanceConfirm = true;
    boolean that_present_balanceConfirm = true;
    if (this_present_balanceConfirm || that_present_balanceConfirm) {
      if (!(this_present_balanceConfirm && that_present_balanceConfirm))
        return false;
      if (this.balanceConfirm != that.balanceConfirm)
        return false;
    }

    boolean this_present_realLoan = true;
    boolean that_present_realLoan = true;
    if (this_present_realLoan || that_present_realLoan) {
      if (!(this_present_realLoan && that_present_realLoan))
        return false;
      if (this.realLoan != that.realLoan)
        return false;
    }

    boolean this_present_balance = true;
    boolean that_present_balance = true;
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_foreclosureTurnDownRemark = true && this.isSetForeclosureTurnDownRemark();
    boolean that_present_foreclosureTurnDownRemark = true && that.isSetForeclosureTurnDownRemark();
    if (this_present_foreclosureTurnDownRemark || that_present_foreclosureTurnDownRemark) {
      if (!(this_present_foreclosureTurnDownRemark && that_present_foreclosureTurnDownRemark))
        return false;
      if (!this.foreclosureTurnDownRemark.equals(that.foreclosureTurnDownRemark))
        return false;
    }

    boolean this_present_oneForeclosureMoney = true;
    boolean that_present_oneForeclosureMoney = true;
    if (this_present_oneForeclosureMoney || that_present_oneForeclosureMoney) {
      if (!(this_present_oneForeclosureMoney && that_present_oneForeclosureMoney))
        return false;
      if (this.oneForeclosureMoney != that.oneForeclosureMoney)
        return false;
    }

    boolean this_present_twoForeclosureMoney = true;
    boolean that_present_twoForeclosureMoney = true;
    if (this_present_twoForeclosureMoney || that_present_twoForeclosureMoney) {
      if (!(this_present_twoForeclosureMoney && that_present_twoForeclosureMoney))
        return false;
      if (this.twoForeclosureMoney != that.twoForeclosureMoney)
        return false;
    }

    boolean this_present_foreclosureMoney = true;
    boolean that_present_foreclosureMoney = true;
    if (this_present_foreclosureMoney || that_present_foreclosureMoney) {
      if (!(this_present_foreclosureMoney && that_present_foreclosureMoney))
        return false;
      if (this.foreclosureMoney != that.foreclosureMoney)
        return false;
    }

    boolean this_present_oneRealLoan = true;
    boolean that_present_oneRealLoan = true;
    if (this_present_oneRealLoan || that_present_oneRealLoan) {
      if (!(this_present_oneRealLoan && that_present_oneRealLoan))
        return false;
      if (this.oneRealLoan != that.oneRealLoan)
        return false;
    }

    boolean this_present_twoRealLoan = true;
    boolean that_present_twoRealLoan = true;
    if (this_present_twoRealLoan || that_present_twoRealLoan) {
      if (!(this_present_twoRealLoan && that_present_twoRealLoan))
        return false;
      if (this.twoRealLoan != that.twoRealLoan)
        return false;
    }

    boolean this_present_oneBalance = true;
    boolean that_present_oneBalance = true;
    if (this_present_oneBalance || that_present_oneBalance) {
      if (!(this_present_oneBalance && that_present_oneBalance))
        return false;
      if (this.oneBalance != that.oneBalance)
        return false;
    }

    boolean this_present_twoBalance = true;
    boolean that_present_twoBalance = true;
    if (this_present_twoBalance || that_present_twoBalance) {
      if (!(this_present_twoBalance && that_present_twoBalance))
        return false;
      if (this.twoBalance != that.twoBalance)
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_payDate = true && this.isSetPayDate();
    boolean that_present_payDate = true && that.isSetPayDate();
    if (this_present_payDate || that_present_payDate) {
      if (!(this_present_payDate && that_present_payDate))
        return false;
      if (!this.payDate.equals(that.payDate))
        return false;
    }

    boolean this_present_fromPayDate = true && this.isSetFromPayDate();
    boolean that_present_fromPayDate = true && that.isSetFromPayDate();
    if (this_present_fromPayDate || that_present_fromPayDate) {
      if (!(this_present_fromPayDate && that_present_fromPayDate))
        return false;
      if (!this.fromPayDate.equals(that.fromPayDate))
        return false;
    }

    boolean this_present_endPayDate = true && this.isSetEndPayDate();
    boolean that_present_endPayDate = true && that.isSetEndPayDate();
    if (this_present_endPayDate || that_present_endPayDate) {
      if (!(this_present_endPayDate && that_present_endPayDate))
        return false;
      if (!this.endPayDate.equals(that.endPayDate))
        return false;
    }

    boolean this_present_handleUserName = true && this.isSetHandleUserName();
    boolean that_present_handleUserName = true && that.isSetHandleUserName();
    if (this_present_handleUserName || that_present_handleUserName) {
      if (!(this_present_handleUserName && that_present_handleUserName))
        return false;
      if (!this.handleUserName.equals(that.handleUserName))
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bizHandleId = true;
    list.add(present_bizHandleId);
    if (present_bizHandleId)
      list.add(bizHandleId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_recFeeStatus = true;
    list.add(present_recFeeStatus);
    if (present_recFeeStatus)
      list.add(recFeeStatus);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_recFeeStatusList = true && (isSetRecFeeStatusList());
    list.add(present_recFeeStatusList);
    if (present_recFeeStatusList)
      list.add(recFeeStatusList);

    boolean present_houseClerkId = true;
    list.add(present_houseClerkId);
    if (present_houseClerkId)
      list.add(houseClerkId);

    boolean present_houseClerkName = true && (isSetHouseClerkName());
    list.add(present_houseClerkName);
    if (present_houseClerkName)
      list.add(houseClerkName);

    boolean present_foreclosureStatus = true;
    list.add(present_foreclosureStatus);
    if (present_foreclosureStatus)
      list.add(foreclosureStatus);

    boolean present_balanceConfirm = true;
    list.add(present_balanceConfirm);
    if (present_balanceConfirm)
      list.add(balanceConfirm);

    boolean present_realLoan = true;
    list.add(present_realLoan);
    if (present_realLoan)
      list.add(realLoan);

    boolean present_balance = true;
    list.add(present_balance);
    if (present_balance)
      list.add(balance);

    boolean present_foreclosureTurnDownRemark = true && (isSetForeclosureTurnDownRemark());
    list.add(present_foreclosureTurnDownRemark);
    if (present_foreclosureTurnDownRemark)
      list.add(foreclosureTurnDownRemark);

    boolean present_oneForeclosureMoney = true;
    list.add(present_oneForeclosureMoney);
    if (present_oneForeclosureMoney)
      list.add(oneForeclosureMoney);

    boolean present_twoForeclosureMoney = true;
    list.add(present_twoForeclosureMoney);
    if (present_twoForeclosureMoney)
      list.add(twoForeclosureMoney);

    boolean present_foreclosureMoney = true;
    list.add(present_foreclosureMoney);
    if (present_foreclosureMoney)
      list.add(foreclosureMoney);

    boolean present_oneRealLoan = true;
    list.add(present_oneRealLoan);
    if (present_oneRealLoan)
      list.add(oneRealLoan);

    boolean present_twoRealLoan = true;
    list.add(present_twoRealLoan);
    if (present_twoRealLoan)
      list.add(twoRealLoan);

    boolean present_oneBalance = true;
    list.add(present_oneBalance);
    if (present_oneBalance)
      list.add(oneBalance);

    boolean present_twoBalance = true;
    list.add(present_twoBalance);
    if (present_twoBalance)
      list.add(twoBalance);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_payDate = true && (isSetPayDate());
    list.add(present_payDate);
    if (present_payDate)
      list.add(payDate);

    boolean present_fromPayDate = true && (isSetFromPayDate());
    list.add(present_fromPayDate);
    if (present_fromPayDate)
      list.add(fromPayDate);

    boolean present_endPayDate = true && (isSetEndPayDate());
    list.add(present_endPayDate);
    if (present_endPayDate)
      list.add(endPayDate);

    boolean present_handleUserName = true && (isSetHandleUserName());
    list.add(present_handleUserName);
    if (present_handleUserName)
      list.add(handleUserName);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ForeclosureIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBizHandleId()).compareTo(other.isSetBizHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizHandleId, other.bizHandleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecFeeStatus()).compareTo(other.isSetRecFeeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecFeeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recFeeStatus, other.recFeeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecFeeStatusList()).compareTo(other.isSetRecFeeStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecFeeStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recFeeStatusList, other.recFeeStatusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseClerkId()).compareTo(other.isSetHouseClerkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseClerkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseClerkId, other.houseClerkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseClerkName()).compareTo(other.isSetHouseClerkName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseClerkName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseClerkName, other.houseClerkName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureStatus()).compareTo(other.isSetForeclosureStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureStatus, other.foreclosureStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalanceConfirm()).compareTo(other.isSetBalanceConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalanceConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceConfirm, other.balanceConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealLoan()).compareTo(other.isSetRealLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realLoan, other.realLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureTurnDownRemark()).compareTo(other.isSetForeclosureTurnDownRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureTurnDownRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureTurnDownRemark, other.foreclosureTurnDownRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOneForeclosureMoney()).compareTo(other.isSetOneForeclosureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneForeclosureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneForeclosureMoney, other.oneForeclosureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwoForeclosureMoney()).compareTo(other.isSetTwoForeclosureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwoForeclosureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twoForeclosureMoney, other.twoForeclosureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureMoney()).compareTo(other.isSetForeclosureMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureMoney, other.foreclosureMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOneRealLoan()).compareTo(other.isSetOneRealLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneRealLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneRealLoan, other.oneRealLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwoRealLoan()).compareTo(other.isSetTwoRealLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwoRealLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twoRealLoan, other.twoRealLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOneBalance()).compareTo(other.isSetOneBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneBalance, other.oneBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwoBalance()).compareTo(other.isSetTwoBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwoBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twoBalance, other.twoBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayDate()).compareTo(other.isSetPayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payDate, other.payDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromPayDate()).compareTo(other.isSetFromPayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromPayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromPayDate, other.fromPayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndPayDate()).compareTo(other.isSetEndPayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndPayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPayDate, other.endPayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleUserName()).compareTo(other.isSetHandleUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleUserName, other.handleUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ForeclosureIndexDTO(");
    boolean first = true;

    sb.append("bizHandleId:");
    sb.append(this.bizHandleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recFeeStatus:");
    sb.append(this.recFeeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recFeeStatusList:");
    if (this.recFeeStatusList == null) {
      sb.append("null");
    } else {
      sb.append(this.recFeeStatusList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseClerkId:");
    sb.append(this.houseClerkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseClerkName:");
    if (this.houseClerkName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseClerkName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureStatus:");
    sb.append(this.foreclosureStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balanceConfirm:");
    sb.append(this.balanceConfirm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realLoan:");
    sb.append(this.realLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    sb.append(this.balance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureTurnDownRemark:");
    if (this.foreclosureTurnDownRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.foreclosureTurnDownRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneForeclosureMoney:");
    sb.append(this.oneForeclosureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("twoForeclosureMoney:");
    sb.append(this.twoForeclosureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureMoney:");
    sb.append(this.foreclosureMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneRealLoan:");
    sb.append(this.oneRealLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("twoRealLoan:");
    sb.append(this.twoRealLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneBalance:");
    sb.append(this.oneBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("twoBalance:");
    sb.append(this.twoBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payDate:");
    if (this.payDate == null) {
      sb.append("null");
    } else {
      sb.append(this.payDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromPayDate:");
    if (this.fromPayDate == null) {
      sb.append("null");
    } else {
      sb.append(this.fromPayDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endPayDate:");
    if (this.endPayDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endPayDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleUserName:");
    if (this.handleUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.handleUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ForeclosureIndexDTOStandardSchemeFactory implements SchemeFactory {
    public ForeclosureIndexDTOStandardScheme getScheme() {
      return new ForeclosureIndexDTOStandardScheme();
    }
  }

  private static class ForeclosureIndexDTOStandardScheme extends StandardScheme<ForeclosureIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ForeclosureIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIZ_HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizHandleId = iprot.readI32();
              struct.setBizHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REC_FEE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recFeeStatus = iprot.readI32();
              struct.setRecFeeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list168.size);
                int _elem169;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = iprot.readI32();
                  struct.userIds.add(_elem169);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REC_FEE_STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list171 = iprot.readListBegin();
                struct.recFeeStatusList = new ArrayList<Integer>(_list171.size);
                int _elem172;
                for (int _i173 = 0; _i173 < _list171.size; ++_i173)
                {
                  _elem172 = iprot.readI32();
                  struct.recFeeStatusList.add(_elem172);
                }
                iprot.readListEnd();
              }
              struct.setRecFeeStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HOUSE_CLERK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.houseClerkId = iprot.readI32();
              struct.setHouseClerkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HOUSE_CLERK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseClerkName = iprot.readString();
              struct.setHouseClerkNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FORECLOSURE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.foreclosureStatus = iprot.readI32();
              struct.setForeclosureStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BALANCE_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.balanceConfirm = iprot.readI32();
              struct.setBalanceConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REAL_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realLoan = iprot.readDouble();
              struct.setRealLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balance = iprot.readDouble();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FORECLOSURE_TURN_DOWN_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foreclosureTurnDownRemark = iprot.readString();
              struct.setForeclosureTurnDownRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ONE_FORECLOSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oneForeclosureMoney = iprot.readDouble();
              struct.setOneForeclosureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TWO_FORECLOSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.twoForeclosureMoney = iprot.readDouble();
              struct.setTwoForeclosureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FORECLOSURE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.foreclosureMoney = iprot.readDouble();
              struct.setForeclosureMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ONE_REAL_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oneRealLoan = iprot.readDouble();
              struct.setOneRealLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TWO_REAL_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.twoRealLoan = iprot.readDouble();
              struct.setTwoRealLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ONE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oneBalance = iprot.readDouble();
              struct.setOneBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TWO_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.twoBalance = iprot.readDouble();
              struct.setTwoBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payDate = iprot.readString();
              struct.setPayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // FROM_PAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromPayDate = iprot.readString();
              struct.setFromPayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // END_PAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endPayDate = iprot.readString();
              struct.setEndPayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // HANDLE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleUserName = iprot.readString();
              struct.setHandleUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ForeclosureIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BIZ_HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.bizHandleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REC_FEE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.recFeeStatus);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter174 : struct.userIds)
          {
            oprot.writeI32(_iter174);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.recFeeStatusList != null) {
        oprot.writeFieldBegin(REC_FEE_STATUS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.recFeeStatusList.size()));
          for (int _iter175 : struct.recFeeStatusList)
          {
            oprot.writeI32(_iter175);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOUSE_CLERK_ID_FIELD_DESC);
      oprot.writeI32(struct.houseClerkId);
      oprot.writeFieldEnd();
      if (struct.houseClerkName != null) {
        oprot.writeFieldBegin(HOUSE_CLERK_NAME_FIELD_DESC);
        oprot.writeString(struct.houseClerkName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORECLOSURE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.foreclosureStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_CONFIRM_FIELD_DESC);
      oprot.writeI32(struct.balanceConfirm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_LOAN_FIELD_DESC);
      oprot.writeDouble(struct.realLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.balance);
      oprot.writeFieldEnd();
      if (struct.foreclosureTurnDownRemark != null) {
        oprot.writeFieldBegin(FORECLOSURE_TURN_DOWN_REMARK_FIELD_DESC);
        oprot.writeString(struct.foreclosureTurnDownRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ONE_FORECLOSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.oneForeclosureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TWO_FORECLOSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.twoForeclosureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORECLOSURE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.foreclosureMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONE_REAL_LOAN_FIELD_DESC);
      oprot.writeDouble(struct.oneRealLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TWO_REAL_LOAN_FIELD_DESC);
      oprot.writeDouble(struct.twoRealLoan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONE_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.oneBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TWO_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.twoBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      if (struct.payDate != null) {
        oprot.writeFieldBegin(PAY_DATE_FIELD_DESC);
        oprot.writeString(struct.payDate);
        oprot.writeFieldEnd();
      }
      if (struct.fromPayDate != null) {
        oprot.writeFieldBegin(FROM_PAY_DATE_FIELD_DESC);
        oprot.writeString(struct.fromPayDate);
        oprot.writeFieldEnd();
      }
      if (struct.endPayDate != null) {
        oprot.writeFieldBegin(END_PAY_DATE_FIELD_DESC);
        oprot.writeString(struct.endPayDate);
        oprot.writeFieldEnd();
      }
      if (struct.handleUserName != null) {
        oprot.writeFieldBegin(HANDLE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.handleUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ForeclosureIndexDTOTupleSchemeFactory implements SchemeFactory {
    public ForeclosureIndexDTOTupleScheme getScheme() {
      return new ForeclosureIndexDTOTupleScheme();
    }
  }

  private static class ForeclosureIndexDTOTupleScheme extends TupleScheme<ForeclosureIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ForeclosureIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBizHandleId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetRecFeeStatus()) {
        optionals.set(4);
      }
      if (struct.isSetUserIds()) {
        optionals.set(5);
      }
      if (struct.isSetPage()) {
        optionals.set(6);
      }
      if (struct.isSetRows()) {
        optionals.set(7);
      }
      if (struct.isSetRecFeeStatusList()) {
        optionals.set(8);
      }
      if (struct.isSetHouseClerkId()) {
        optionals.set(9);
      }
      if (struct.isSetHouseClerkName()) {
        optionals.set(10);
      }
      if (struct.isSetForeclosureStatus()) {
        optionals.set(11);
      }
      if (struct.isSetBalanceConfirm()) {
        optionals.set(12);
      }
      if (struct.isSetRealLoan()) {
        optionals.set(13);
      }
      if (struct.isSetBalance()) {
        optionals.set(14);
      }
      if (struct.isSetForeclosureTurnDownRemark()) {
        optionals.set(15);
      }
      if (struct.isSetOneForeclosureMoney()) {
        optionals.set(16);
      }
      if (struct.isSetTwoForeclosureMoney()) {
        optionals.set(17);
      }
      if (struct.isSetForeclosureMoney()) {
        optionals.set(18);
      }
      if (struct.isSetOneRealLoan()) {
        optionals.set(19);
      }
      if (struct.isSetTwoRealLoan()) {
        optionals.set(20);
      }
      if (struct.isSetOneBalance()) {
        optionals.set(21);
      }
      if (struct.isSetTwoBalance()) {
        optionals.set(22);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(23);
      }
      if (struct.isSetHouseName()) {
        optionals.set(24);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(25);
      }
      if (struct.isSetSellerName()) {
        optionals.set(26);
      }
      if (struct.isSetPayDate()) {
        optionals.set(27);
      }
      if (struct.isSetFromPayDate()) {
        optionals.set(28);
      }
      if (struct.isSetEndPayDate()) {
        optionals.set(29);
      }
      if (struct.isSetHandleUserName()) {
        optionals.set(30);
      }
      if (struct.isSetProductId()) {
        optionals.set(31);
      }
      if (struct.isSetProductName()) {
        optionals.set(32);
      }
      oprot.writeBitSet(optionals, 33);
      if (struct.isSetBizHandleId()) {
        oprot.writeI32(struct.bizHandleId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetRecFeeStatus()) {
        oprot.writeI32(struct.recFeeStatus);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter176 : struct.userIds)
          {
            oprot.writeI32(_iter176);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetRecFeeStatusList()) {
        {
          oprot.writeI32(struct.recFeeStatusList.size());
          for (int _iter177 : struct.recFeeStatusList)
          {
            oprot.writeI32(_iter177);
          }
        }
      }
      if (struct.isSetHouseClerkId()) {
        oprot.writeI32(struct.houseClerkId);
      }
      if (struct.isSetHouseClerkName()) {
        oprot.writeString(struct.houseClerkName);
      }
      if (struct.isSetForeclosureStatus()) {
        oprot.writeI32(struct.foreclosureStatus);
      }
      if (struct.isSetBalanceConfirm()) {
        oprot.writeI32(struct.balanceConfirm);
      }
      if (struct.isSetRealLoan()) {
        oprot.writeDouble(struct.realLoan);
      }
      if (struct.isSetBalance()) {
        oprot.writeDouble(struct.balance);
      }
      if (struct.isSetForeclosureTurnDownRemark()) {
        oprot.writeString(struct.foreclosureTurnDownRemark);
      }
      if (struct.isSetOneForeclosureMoney()) {
        oprot.writeDouble(struct.oneForeclosureMoney);
      }
      if (struct.isSetTwoForeclosureMoney()) {
        oprot.writeDouble(struct.twoForeclosureMoney);
      }
      if (struct.isSetForeclosureMoney()) {
        oprot.writeDouble(struct.foreclosureMoney);
      }
      if (struct.isSetOneRealLoan()) {
        oprot.writeDouble(struct.oneRealLoan);
      }
      if (struct.isSetTwoRealLoan()) {
        oprot.writeDouble(struct.twoRealLoan);
      }
      if (struct.isSetOneBalance()) {
        oprot.writeDouble(struct.oneBalance);
      }
      if (struct.isSetTwoBalance()) {
        oprot.writeDouble(struct.twoBalance);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetPayDate()) {
        oprot.writeString(struct.payDate);
      }
      if (struct.isSetFromPayDate()) {
        oprot.writeString(struct.fromPayDate);
      }
      if (struct.isSetEndPayDate()) {
        oprot.writeString(struct.endPayDate);
      }
      if (struct.isSetHandleUserName()) {
        oprot.writeString(struct.handleUserName);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ForeclosureIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(33);
      if (incoming.get(0)) {
        struct.bizHandleId = iprot.readI32();
        struct.setBizHandleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recFeeStatus = iprot.readI32();
        struct.setRecFeeStatusIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list178.size);
          int _elem179;
          for (int _i180 = 0; _i180 < _list178.size; ++_i180)
          {
            _elem179 = iprot.readI32();
            struct.userIds.add(_elem179);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.recFeeStatusList = new ArrayList<Integer>(_list181.size);
          int _elem182;
          for (int _i183 = 0; _i183 < _list181.size; ++_i183)
          {
            _elem182 = iprot.readI32();
            struct.recFeeStatusList.add(_elem182);
          }
        }
        struct.setRecFeeStatusListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.houseClerkId = iprot.readI32();
        struct.setHouseClerkIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.houseClerkName = iprot.readString();
        struct.setHouseClerkNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.foreclosureStatus = iprot.readI32();
        struct.setForeclosureStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.balanceConfirm = iprot.readI32();
        struct.setBalanceConfirmIsSet(true);
      }
      if (incoming.get(13)) {
        struct.realLoan = iprot.readDouble();
        struct.setRealLoanIsSet(true);
      }
      if (incoming.get(14)) {
        struct.balance = iprot.readDouble();
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.foreclosureTurnDownRemark = iprot.readString();
        struct.setForeclosureTurnDownRemarkIsSet(true);
      }
      if (incoming.get(16)) {
        struct.oneForeclosureMoney = iprot.readDouble();
        struct.setOneForeclosureMoneyIsSet(true);
      }
      if (incoming.get(17)) {
        struct.twoForeclosureMoney = iprot.readDouble();
        struct.setTwoForeclosureMoneyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.foreclosureMoney = iprot.readDouble();
        struct.setForeclosureMoneyIsSet(true);
      }
      if (incoming.get(19)) {
        struct.oneRealLoan = iprot.readDouble();
        struct.setOneRealLoanIsSet(true);
      }
      if (incoming.get(20)) {
        struct.twoRealLoan = iprot.readDouble();
        struct.setTwoRealLoanIsSet(true);
      }
      if (incoming.get(21)) {
        struct.oneBalance = iprot.readDouble();
        struct.setOneBalanceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.twoBalance = iprot.readDouble();
        struct.setTwoBalanceIsSet(true);
      }
      if (incoming.get(23)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(24)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(25)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(26)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(27)) {
        struct.payDate = iprot.readString();
        struct.setPayDateIsSet(true);
      }
      if (incoming.get(28)) {
        struct.fromPayDate = iprot.readString();
        struct.setFromPayDateIsSet(true);
      }
      if (incoming.get(29)) {
        struct.endPayDate = iprot.readString();
        struct.setEndPayDateIsSet(true);
      }
      if (incoming.get(30)) {
        struct.handleUserName = iprot.readString();
        struct.setHandleUserNameIsSet(true);
      }
      if (incoming.get(31)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(32)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
    }
  }

}


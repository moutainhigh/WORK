/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 系统磁贴菜单表实体类
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysMetroUiVo implements org.apache.thrift.TBase<SysMetroUiVo, SysMetroUiVo._Fields>, java.io.Serializable, Cloneable, Comparable<SysMetroUiVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysMetroUiVo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("locationId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SHOW_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("showImg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACTION_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("actionUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MENU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("menuName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ICON_CLS_FIELD_DESC = new org.apache.thrift.protocol.TField("iconCls", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MENU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("menuId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysMetroUiVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysMetroUiVoTupleSchemeFactory());
  }

  public int pid; // required
  public int locationId; // required
  public String showImg; // required
  public String actionUrl; // required
  public String menuName; // required
  public int iconCls; // required
  public int menuId; // required
  public int parentId; // required
  public int status; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOCATION_ID((short)2, "locationId"),
    SHOW_IMG((short)3, "showImg"),
    ACTION_URL((short)4, "actionUrl"),
    MENU_NAME((short)5, "menuName"),
    ICON_CLS((short)6, "iconCls"),
    MENU_ID((short)7, "menuId"),
    PARENT_ID((short)8, "parentId"),
    STATUS((short)9, "status"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOCATION_ID
          return LOCATION_ID;
        case 3: // SHOW_IMG
          return SHOW_IMG;
        case 4: // ACTION_URL
          return ACTION_URL;
        case 5: // MENU_NAME
          return MENU_NAME;
        case 6: // ICON_CLS
          return ICON_CLS;
        case 7: // MENU_ID
          return MENU_ID;
        case 8: // PARENT_ID
          return PARENT_ID;
        case 9: // STATUS
          return STATUS;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOCATIONID_ISSET_ID = 1;
  private static final int __ICONCLS_ISSET_ID = 2;
  private static final int __MENUID_ISSET_ID = 3;
  private static final int __PARENTID_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("locationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_IMG, new org.apache.thrift.meta_data.FieldMetaData("showImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_URL, new org.apache.thrift.meta_data.FieldMetaData("actionUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENU_NAME, new org.apache.thrift.meta_data.FieldMetaData("menuName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_CLS, new org.apache.thrift.meta_data.FieldMetaData("iconCls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MENU_ID, new org.apache.thrift.meta_data.FieldMetaData("menuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysMetroUiVo.class, metaDataMap);
  }

  public SysMetroUiVo() {
  }

  public SysMetroUiVo(
    int pid,
    int locationId,
    String showImg,
    String actionUrl,
    String menuName,
    int iconCls,
    int menuId,
    int parentId,
    int status,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.locationId = locationId;
    setLocationIdIsSet(true);
    this.showImg = showImg;
    this.actionUrl = actionUrl;
    this.menuName = menuName;
    this.iconCls = iconCls;
    setIconClsIsSet(true);
    this.menuId = menuId;
    setMenuIdIsSet(true);
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysMetroUiVo(SysMetroUiVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.locationId = other.locationId;
    if (other.isSetShowImg()) {
      this.showImg = other.showImg;
    }
    if (other.isSetActionUrl()) {
      this.actionUrl = other.actionUrl;
    }
    if (other.isSetMenuName()) {
      this.menuName = other.menuName;
    }
    this.iconCls = other.iconCls;
    this.menuId = other.menuId;
    this.parentId = other.parentId;
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
  }

  public SysMetroUiVo deepCopy() {
    return new SysMetroUiVo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLocationIdIsSet(false);
    this.locationId = 0;
    this.showImg = null;
    this.actionUrl = null;
    this.menuName = null;
    setIconClsIsSet(false);
    this.iconCls = 0;
    setMenuIdIsSet(false);
    this.menuId = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public SysMetroUiVo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLocationId() {
    return this.locationId;
  }

  public SysMetroUiVo setLocationId(int locationId) {
    this.locationId = locationId;
    setLocationIdIsSet(true);
    return this;
  }

  public void unsetLocationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
  }

  /** Returns true if field locationId is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
  }

  public void setLocationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATIONID_ISSET_ID, value);
  }

  public String getShowImg() {
    return this.showImg;
  }

  public SysMetroUiVo setShowImg(String showImg) {
    this.showImg = showImg;
    return this;
  }

  public void unsetShowImg() {
    this.showImg = null;
  }

  /** Returns true if field showImg is set (has been assigned a value) and false otherwise */
  public boolean isSetShowImg() {
    return this.showImg != null;
  }

  public void setShowImgIsSet(boolean value) {
    if (!value) {
      this.showImg = null;
    }
  }

  public String getActionUrl() {
    return this.actionUrl;
  }

  public SysMetroUiVo setActionUrl(String actionUrl) {
    this.actionUrl = actionUrl;
    return this;
  }

  public void unsetActionUrl() {
    this.actionUrl = null;
  }

  /** Returns true if field actionUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetActionUrl() {
    return this.actionUrl != null;
  }

  public void setActionUrlIsSet(boolean value) {
    if (!value) {
      this.actionUrl = null;
    }
  }

  public String getMenuName() {
    return this.menuName;
  }

  public SysMetroUiVo setMenuName(String menuName) {
    this.menuName = menuName;
    return this;
  }

  public void unsetMenuName() {
    this.menuName = null;
  }

  /** Returns true if field menuName is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuName() {
    return this.menuName != null;
  }

  public void setMenuNameIsSet(boolean value) {
    if (!value) {
      this.menuName = null;
    }
  }

  public int getIconCls() {
    return this.iconCls;
  }

  public SysMetroUiVo setIconCls(int iconCls) {
    this.iconCls = iconCls;
    setIconClsIsSet(true);
    return this;
  }

  public void unsetIconCls() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ICONCLS_ISSET_ID);
  }

  /** Returns true if field iconCls is set (has been assigned a value) and false otherwise */
  public boolean isSetIconCls() {
    return EncodingUtils.testBit(__isset_bitfield, __ICONCLS_ISSET_ID);
  }

  public void setIconClsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ICONCLS_ISSET_ID, value);
  }

  public int getMenuId() {
    return this.menuId;
  }

  public SysMetroUiVo setMenuId(int menuId) {
    this.menuId = menuId;
    setMenuIdIsSet(true);
    return this;
  }

  public void unsetMenuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MENUID_ISSET_ID);
  }

  /** Returns true if field menuId is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuId() {
    return EncodingUtils.testBit(__isset_bitfield, __MENUID_ISSET_ID);
  }

  public void setMenuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MENUID_ISSET_ID, value);
  }

  public int getParentId() {
    return this.parentId;
  }

  public SysMetroUiVo setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public SysMetroUiVo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public SysMetroUiVo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public SysMetroUiVo setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOCATION_ID:
      if (value == null) {
        unsetLocationId();
      } else {
        setLocationId((Integer)value);
      }
      break;

    case SHOW_IMG:
      if (value == null) {
        unsetShowImg();
      } else {
        setShowImg((String)value);
      }
      break;

    case ACTION_URL:
      if (value == null) {
        unsetActionUrl();
      } else {
        setActionUrl((String)value);
      }
      break;

    case MENU_NAME:
      if (value == null) {
        unsetMenuName();
      } else {
        setMenuName((String)value);
      }
      break;

    case ICON_CLS:
      if (value == null) {
        unsetIconCls();
      } else {
        setIconCls((Integer)value);
      }
      break;

    case MENU_ID:
      if (value == null) {
        unsetMenuId();
      } else {
        setMenuId((Integer)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOCATION_ID:
      return Integer.valueOf(getLocationId());

    case SHOW_IMG:
      return getShowImg();

    case ACTION_URL:
      return getActionUrl();

    case MENU_NAME:
      return getMenuName();

    case ICON_CLS:
      return Integer.valueOf(getIconCls());

    case MENU_ID:
      return Integer.valueOf(getMenuId());

    case PARENT_ID:
      return Integer.valueOf(getParentId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOCATION_ID:
      return isSetLocationId();
    case SHOW_IMG:
      return isSetShowImg();
    case ACTION_URL:
      return isSetActionUrl();
    case MENU_NAME:
      return isSetMenuName();
    case ICON_CLS:
      return isSetIconCls();
    case MENU_ID:
      return isSetMenuId();
    case PARENT_ID:
      return isSetParentId();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysMetroUiVo)
      return this.equals((SysMetroUiVo)that);
    return false;
  }

  public boolean equals(SysMetroUiVo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_locationId = true;
    boolean that_present_locationId = true;
    if (this_present_locationId || that_present_locationId) {
      if (!(this_present_locationId && that_present_locationId))
        return false;
      if (this.locationId != that.locationId)
        return false;
    }

    boolean this_present_showImg = true && this.isSetShowImg();
    boolean that_present_showImg = true && that.isSetShowImg();
    if (this_present_showImg || that_present_showImg) {
      if (!(this_present_showImg && that_present_showImg))
        return false;
      if (!this.showImg.equals(that.showImg))
        return false;
    }

    boolean this_present_actionUrl = true && this.isSetActionUrl();
    boolean that_present_actionUrl = true && that.isSetActionUrl();
    if (this_present_actionUrl || that_present_actionUrl) {
      if (!(this_present_actionUrl && that_present_actionUrl))
        return false;
      if (!this.actionUrl.equals(that.actionUrl))
        return false;
    }

    boolean this_present_menuName = true && this.isSetMenuName();
    boolean that_present_menuName = true && that.isSetMenuName();
    if (this_present_menuName || that_present_menuName) {
      if (!(this_present_menuName && that_present_menuName))
        return false;
      if (!this.menuName.equals(that.menuName))
        return false;
    }

    boolean this_present_iconCls = true;
    boolean that_present_iconCls = true;
    if (this_present_iconCls || that_present_iconCls) {
      if (!(this_present_iconCls && that_present_iconCls))
        return false;
      if (this.iconCls != that.iconCls)
        return false;
    }

    boolean this_present_menuId = true;
    boolean that_present_menuId = true;
    if (this_present_menuId || that_present_menuId) {
      if (!(this_present_menuId && that_present_menuId))
        return false;
      if (this.menuId != that.menuId)
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_locationId = true;
    list.add(present_locationId);
    if (present_locationId)
      list.add(locationId);

    boolean present_showImg = true && (isSetShowImg());
    list.add(present_showImg);
    if (present_showImg)
      list.add(showImg);

    boolean present_actionUrl = true && (isSetActionUrl());
    list.add(present_actionUrl);
    if (present_actionUrl)
      list.add(actionUrl);

    boolean present_menuName = true && (isSetMenuName());
    list.add(present_menuName);
    if (present_menuName)
      list.add(menuName);

    boolean present_iconCls = true;
    list.add(present_iconCls);
    if (present_iconCls)
      list.add(iconCls);

    boolean present_menuId = true;
    list.add(present_menuId);
    if (present_menuId)
      list.add(menuId);

    boolean present_parentId = true;
    list.add(present_parentId);
    if (present_parentId)
      list.add(parentId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysMetroUiVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationId()).compareTo(other.isSetLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationId, other.locationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowImg()).compareTo(other.isSetShowImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showImg, other.showImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionUrl()).compareTo(other.isSetActionUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionUrl, other.actionUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuName()).compareTo(other.isSetMenuName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuName, other.menuName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIconCls()).compareTo(other.isSetIconCls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconCls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconCls, other.iconCls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuId()).compareTo(other.isSetMenuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuId, other.menuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysMetroUiVo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationId:");
    sb.append(this.locationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showImg:");
    if (this.showImg == null) {
      sb.append("null");
    } else {
      sb.append(this.showImg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionUrl:");
    if (this.actionUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.actionUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuName:");
    if (this.menuName == null) {
      sb.append("null");
    } else {
      sb.append(this.menuName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconCls:");
    sb.append(this.iconCls);
    first = false;
    if (!first) sb.append(", ");
    sb.append("menuId:");
    sb.append(this.menuId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysMetroUiVoStandardSchemeFactory implements SchemeFactory {
    public SysMetroUiVoStandardScheme getScheme() {
      return new SysMetroUiVoStandardScheme();
    }
  }

  private static class SysMetroUiVoStandardScheme extends StandardScheme<SysMetroUiVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysMetroUiVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locationId = iprot.readI32();
              struct.setLocationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOW_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.showImg = iprot.readString();
              struct.setShowImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionUrl = iprot.readString();
              struct.setActionUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MENU_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.menuName = iprot.readString();
              struct.setMenuNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ICON_CLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iconCls = iprot.readI32();
              struct.setIconClsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MENU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.menuId = iprot.readI32();
              struct.setMenuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysMetroUiVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
      oprot.writeI32(struct.locationId);
      oprot.writeFieldEnd();
      if (struct.showImg != null) {
        oprot.writeFieldBegin(SHOW_IMG_FIELD_DESC);
        oprot.writeString(struct.showImg);
        oprot.writeFieldEnd();
      }
      if (struct.actionUrl != null) {
        oprot.writeFieldBegin(ACTION_URL_FIELD_DESC);
        oprot.writeString(struct.actionUrl);
        oprot.writeFieldEnd();
      }
      if (struct.menuName != null) {
        oprot.writeFieldBegin(MENU_NAME_FIELD_DESC);
        oprot.writeString(struct.menuName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ICON_CLS_FIELD_DESC);
      oprot.writeI32(struct.iconCls);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MENU_ID_FIELD_DESC);
      oprot.writeI32(struct.menuId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysMetroUiVoTupleSchemeFactory implements SchemeFactory {
    public SysMetroUiVoTupleScheme getScheme() {
      return new SysMetroUiVoTupleScheme();
    }
  }

  private static class SysMetroUiVoTupleScheme extends TupleScheme<SysMetroUiVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysMetroUiVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLocationId()) {
        optionals.set(1);
      }
      if (struct.isSetShowImg()) {
        optionals.set(2);
      }
      if (struct.isSetActionUrl()) {
        optionals.set(3);
      }
      if (struct.isSetMenuName()) {
        optionals.set(4);
      }
      if (struct.isSetIconCls()) {
        optionals.set(5);
      }
      if (struct.isSetMenuId()) {
        optionals.set(6);
      }
      if (struct.isSetParentId()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLocationId()) {
        oprot.writeI32(struct.locationId);
      }
      if (struct.isSetShowImg()) {
        oprot.writeString(struct.showImg);
      }
      if (struct.isSetActionUrl()) {
        oprot.writeString(struct.actionUrl);
      }
      if (struct.isSetMenuName()) {
        oprot.writeString(struct.menuName);
      }
      if (struct.isSetIconCls()) {
        oprot.writeI32(struct.iconCls);
      }
      if (struct.isSetMenuId()) {
        oprot.writeI32(struct.menuId);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysMetroUiVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.locationId = iprot.readI32();
        struct.setLocationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.showImg = iprot.readString();
        struct.setShowImgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.actionUrl = iprot.readString();
        struct.setActionUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.menuName = iprot.readString();
        struct.setMenuNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.iconCls = iprot.readI32();
        struct.setIconClsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.menuId = iprot.readI32();
        struct.setMenuIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


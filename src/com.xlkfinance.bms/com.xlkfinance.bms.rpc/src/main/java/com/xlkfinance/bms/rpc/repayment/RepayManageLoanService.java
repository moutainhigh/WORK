/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepayManageLoanService {

  public interface Iface {

    public List<RepayCgInterestView> selectLoanInterestDetail(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int uploadinstCgapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RepayCgInterestView> selectLoanRequestInterestDetail(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int insertRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RegAdvapplyFileview> queryRepayCgapplyFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int queryRepayCgapplyFileCount(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RepayCgInterestView> selectLoanInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RepayCgInterestView> queryLoanRes(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RepayCgInterestView> selectLoanRequestInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RepayCgInterestView> selectLoanRequestInterestDetailbyProcesByStatus(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int intRepayCgapplyInfoEnd(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int changeReqstCg(int reqStatus, int interestChgId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int deleteProjectbyinterestChgId(String interestChgId, String projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int checkpreRepayByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public InterestChgApplyView makeCgApplyFile(int interestChgId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public InterestChgApplyView queryInterestChgId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int saveProcedures(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public RepayCgInterestView getRepayCgInterestByPid(int pid) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int syncProcedureToProject(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void selectLoanInterestDetail(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void uploadinstCgapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectLoanRequestInterestDetail(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRepayCgapplyFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRepayCgapplyFileCount(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectLoanInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryLoanRes(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectLoanRequestInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectLoanRequestInterestDetailbyProcesByStatus(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void intRepayCgapplyInfoEnd(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeReqstCg(int reqStatus, int interestChgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProjectbyinterestChgId(String interestChgId, String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkpreRepayByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void makeCgApplyFile(int interestChgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryInterestChgId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveProcedures(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepayCgInterestByPid(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncProcedureToProject(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<RepayCgInterestView> selectLoanInterestDetail(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_selectLoanInterestDetail(repayCgInterestDTO);
      return recv_selectLoanInterestDetail();
    }

    public void send_selectLoanInterestDetail(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      selectLoanInterestDetail_args args = new selectLoanInterestDetail_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("selectLoanInterestDetail", args);
    }

    public List<RepayCgInterestView> recv_selectLoanInterestDetail() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      selectLoanInterestDetail_result result = new selectLoanInterestDetail_result();
      receiveBase(result, "selectLoanInterestDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectLoanInterestDetail failed: unknown result");
    }

    public int uploadinstCgapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_uploadinstCgapply(uploadinstAdvapplyBaseDTO);
      return recv_uploadinstCgapply();
    }

    public void send_uploadinstCgapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      uploadinstCgapply_args args = new uploadinstCgapply_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("uploadinstCgapply", args);
    }

    public int recv_uploadinstCgapply() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      uploadinstCgapply_result result = new uploadinstCgapply_result();
      receiveBase(result, "uploadinstCgapply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadinstCgapply failed: unknown result");
    }

    public List<RepayCgInterestView> selectLoanRequestInterestDetail(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_selectLoanRequestInterestDetail(repayCgInterestDTO);
      return recv_selectLoanRequestInterestDetail();
    }

    public void send_selectLoanRequestInterestDetail(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      selectLoanRequestInterestDetail_args args = new selectLoanRequestInterestDetail_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("selectLoanRequestInterestDetail", args);
    }

    public List<RepayCgInterestView> recv_selectLoanRequestInterestDetail() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      selectLoanRequestInterestDetail_result result = new selectLoanRequestInterestDetail_result();
      receiveBase(result, "selectLoanRequestInterestDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectLoanRequestInterestDetail failed: unknown result");
    }

    public int insertRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_insertRepayCgapplyInfo(repayCgInterestDTO);
      return recv_insertRepayCgapplyInfo();
    }

    public void send_insertRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      insertRepayCgapplyInfo_args args = new insertRepayCgapplyInfo_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("insertRepayCgapplyInfo", args);
    }

    public int recv_insertRepayCgapplyInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      insertRepayCgapplyInfo_result result = new insertRepayCgapplyInfo_result();
      receiveBase(result, "insertRepayCgapplyInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertRepayCgapplyInfo failed: unknown result");
    }

    public int updateRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateRepayCgapplyInfo(repayCgInterestDTO);
      return recv_updateRepayCgapplyInfo();
    }

    public void send_updateRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      updateRepayCgapplyInfo_args args = new updateRepayCgapplyInfo_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("updateRepayCgapplyInfo", args);
    }

    public int recv_updateRepayCgapplyInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateRepayCgapplyInfo_result result = new updateRepayCgapplyInfo_result();
      receiveBase(result, "updateRepayCgapplyInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRepayCgapplyInfo failed: unknown result");
    }

    public List<RegAdvapplyFileview> queryRepayCgapplyFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRepayCgapplyFile(uploadinstAdvapplyBaseDTO);
      return recv_queryRepayCgapplyFile();
    }

    public void send_queryRepayCgapplyFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      queryRepayCgapplyFile_args args = new queryRepayCgapplyFile_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("queryRepayCgapplyFile", args);
    }

    public List<RegAdvapplyFileview> recv_queryRepayCgapplyFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRepayCgapplyFile_result result = new queryRepayCgapplyFile_result();
      receiveBase(result, "queryRepayCgapplyFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRepayCgapplyFile failed: unknown result");
    }

    public int queryRepayCgapplyFileCount(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryRepayCgapplyFileCount(uploadinstAdvapplyBaseDTO);
      return recv_queryRepayCgapplyFileCount();
    }

    public void send_queryRepayCgapplyFileCount(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      queryRepayCgapplyFileCount_args args = new queryRepayCgapplyFileCount_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("queryRepayCgapplyFileCount", args);
    }

    public int recv_queryRepayCgapplyFileCount() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryRepayCgapplyFileCount_result result = new queryRepayCgapplyFileCount_result();
      receiveBase(result, "queryRepayCgapplyFileCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRepayCgapplyFileCount failed: unknown result");
    }

    public List<RepayCgInterestView> selectLoanInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_selectLoanInterestDetailbyProces(repayCgInterestDTO);
      return recv_selectLoanInterestDetailbyProces();
    }

    public void send_selectLoanInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      selectLoanInterestDetailbyProces_args args = new selectLoanInterestDetailbyProces_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("selectLoanInterestDetailbyProces", args);
    }

    public List<RepayCgInterestView> recv_selectLoanInterestDetailbyProces() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      selectLoanInterestDetailbyProces_result result = new selectLoanInterestDetailbyProces_result();
      receiveBase(result, "selectLoanInterestDetailbyProces");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectLoanInterestDetailbyProces failed: unknown result");
    }

    public List<RepayCgInterestView> queryLoanRes(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryLoanRes(repayCgInterestDTO);
      return recv_queryLoanRes();
    }

    public void send_queryLoanRes(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      queryLoanRes_args args = new queryLoanRes_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("queryLoanRes", args);
    }

    public List<RepayCgInterestView> recv_queryLoanRes() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryLoanRes_result result = new queryLoanRes_result();
      receiveBase(result, "queryLoanRes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryLoanRes failed: unknown result");
    }

    public List<RepayCgInterestView> selectLoanRequestInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_selectLoanRequestInterestDetailbyProces(repayCgInterestDTO);
      return recv_selectLoanRequestInterestDetailbyProces();
    }

    public void send_selectLoanRequestInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      selectLoanRequestInterestDetailbyProces_args args = new selectLoanRequestInterestDetailbyProces_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("selectLoanRequestInterestDetailbyProces", args);
    }

    public List<RepayCgInterestView> recv_selectLoanRequestInterestDetailbyProces() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      selectLoanRequestInterestDetailbyProces_result result = new selectLoanRequestInterestDetailbyProces_result();
      receiveBase(result, "selectLoanRequestInterestDetailbyProces");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectLoanRequestInterestDetailbyProces failed: unknown result");
    }

    public List<RepayCgInterestView> selectLoanRequestInterestDetailbyProcesByStatus(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_selectLoanRequestInterestDetailbyProcesByStatus(repayCgInterestDTO);
      return recv_selectLoanRequestInterestDetailbyProcesByStatus();
    }

    public void send_selectLoanRequestInterestDetailbyProcesByStatus(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      selectLoanRequestInterestDetailbyProcesByStatus_args args = new selectLoanRequestInterestDetailbyProcesByStatus_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("selectLoanRequestInterestDetailbyProcesByStatus", args);
    }

    public List<RepayCgInterestView> recv_selectLoanRequestInterestDetailbyProcesByStatus() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      selectLoanRequestInterestDetailbyProcesByStatus_result result = new selectLoanRequestInterestDetailbyProcesByStatus_result();
      receiveBase(result, "selectLoanRequestInterestDetailbyProcesByStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectLoanRequestInterestDetailbyProcesByStatus failed: unknown result");
    }

    public int intRepayCgapplyInfoEnd(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_intRepayCgapplyInfoEnd(repayCgInterestDTO);
      return recv_intRepayCgapplyInfoEnd();
    }

    public void send_intRepayCgapplyInfoEnd(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      intRepayCgapplyInfoEnd_args args = new intRepayCgapplyInfoEnd_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("intRepayCgapplyInfoEnd", args);
    }

    public int recv_intRepayCgapplyInfoEnd() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      intRepayCgapplyInfoEnd_result result = new intRepayCgapplyInfoEnd_result();
      receiveBase(result, "intRepayCgapplyInfoEnd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "intRepayCgapplyInfoEnd failed: unknown result");
    }

    public int changeReqstCg(int reqStatus, int interestChgId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_changeReqstCg(reqStatus, interestChgId);
      return recv_changeReqstCg();
    }

    public void send_changeReqstCg(int reqStatus, int interestChgId) throws org.apache.thrift.TException
    {
      changeReqstCg_args args = new changeReqstCg_args();
      args.setReqStatus(reqStatus);
      args.setInterestChgId(interestChgId);
      sendBase("changeReqstCg", args);
    }

    public int recv_changeReqstCg() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      changeReqstCg_result result = new changeReqstCg_result();
      receiveBase(result, "changeReqstCg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeReqstCg failed: unknown result");
    }

    public int deleteProjectbyinterestChgId(String interestChgId, String projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteProjectbyinterestChgId(interestChgId, projectId);
      return recv_deleteProjectbyinterestChgId();
    }

    public void send_deleteProjectbyinterestChgId(String interestChgId, String projectId) throws org.apache.thrift.TException
    {
      deleteProjectbyinterestChgId_args args = new deleteProjectbyinterestChgId_args();
      args.setInterestChgId(interestChgId);
      args.setProjectId(projectId);
      sendBase("deleteProjectbyinterestChgId", args);
    }

    public int recv_deleteProjectbyinterestChgId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteProjectbyinterestChgId_result result = new deleteProjectbyinterestChgId_result();
      receiveBase(result, "deleteProjectbyinterestChgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProjectbyinterestChgId failed: unknown result");
    }

    public int checkpreRepayByProjectId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_checkpreRepayByProjectId(projectId);
      return recv_checkpreRepayByProjectId();
    }

    public void send_checkpreRepayByProjectId(int projectId) throws org.apache.thrift.TException
    {
      checkpreRepayByProjectId_args args = new checkpreRepayByProjectId_args();
      args.setProjectId(projectId);
      sendBase("checkpreRepayByProjectId", args);
    }

    public int recv_checkpreRepayByProjectId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      checkpreRepayByProjectId_result result = new checkpreRepayByProjectId_result();
      receiveBase(result, "checkpreRepayByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkpreRepayByProjectId failed: unknown result");
    }

    public InterestChgApplyView makeCgApplyFile(int interestChgId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_makeCgApplyFile(interestChgId);
      return recv_makeCgApplyFile();
    }

    public void send_makeCgApplyFile(int interestChgId) throws org.apache.thrift.TException
    {
      makeCgApplyFile_args args = new makeCgApplyFile_args();
      args.setInterestChgId(interestChgId);
      sendBase("makeCgApplyFile", args);
    }

    public InterestChgApplyView recv_makeCgApplyFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      makeCgApplyFile_result result = new makeCgApplyFile_result();
      receiveBase(result, "makeCgApplyFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeCgApplyFile failed: unknown result");
    }

    public InterestChgApplyView queryInterestChgId(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryInterestChgId(projectId);
      return recv_queryInterestChgId();
    }

    public void send_queryInterestChgId(int projectId) throws org.apache.thrift.TException
    {
      queryInterestChgId_args args = new queryInterestChgId_args();
      args.setProjectId(projectId);
      sendBase("queryInterestChgId", args);
    }

    public InterestChgApplyView recv_queryInterestChgId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryInterestChgId_result result = new queryInterestChgId_result();
      receiveBase(result, "queryInterestChgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryInterestChgId failed: unknown result");
    }

    public int saveProcedures(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveProcedures(repayCgInterestDTO);
      return recv_saveProcedures();
    }

    public void send_saveProcedures(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      saveProcedures_args args = new saveProcedures_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("saveProcedures", args);
    }

    public int recv_saveProcedures() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveProcedures_result result = new saveProcedures_result();
      receiveBase(result, "saveProcedures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveProcedures failed: unknown result");
    }

    public RepayCgInterestView getRepayCgInterestByPid(int pid) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getRepayCgInterestByPid(pid);
      return recv_getRepayCgInterestByPid();
    }

    public void send_getRepayCgInterestByPid(int pid) throws org.apache.thrift.TException
    {
      getRepayCgInterestByPid_args args = new getRepayCgInterestByPid_args();
      args.setPid(pid);
      sendBase("getRepayCgInterestByPid", args);
    }

    public RepayCgInterestView recv_getRepayCgInterestByPid() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getRepayCgInterestByPid_result result = new getRepayCgInterestByPid_result();
      receiveBase(result, "getRepayCgInterestByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepayCgInterestByPid failed: unknown result");
    }

    public int syncProcedureToProject(RepayCgInterestDTO repayCgInterestDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_syncProcedureToProject(repayCgInterestDTO);
      return recv_syncProcedureToProject();
    }

    public void send_syncProcedureToProject(RepayCgInterestDTO repayCgInterestDTO) throws org.apache.thrift.TException
    {
      syncProcedureToProject_args args = new syncProcedureToProject_args();
      args.setRepayCgInterestDTO(repayCgInterestDTO);
      sendBase("syncProcedureToProject", args);
    }

    public int recv_syncProcedureToProject() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      syncProcedureToProject_result result = new syncProcedureToProject_result();
      receiveBase(result, "syncProcedureToProject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncProcedureToProject failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void selectLoanInterestDetail(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectLoanInterestDetail_call method_call = new selectLoanInterestDetail_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectLoanInterestDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public selectLoanInterestDetail_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectLoanInterestDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectLoanInterestDetail_args args = new selectLoanInterestDetail_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepayCgInterestView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectLoanInterestDetail();
      }
    }

    public void uploadinstCgapply(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadinstCgapply_call method_call = new uploadinstCgapply_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadinstCgapply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public uploadinstCgapply_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadinstCgapply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadinstCgapply_args args = new uploadinstCgapply_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadinstCgapply();
      }
    }

    public void selectLoanRequestInterestDetail(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectLoanRequestInterestDetail_call method_call = new selectLoanRequestInterestDetail_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectLoanRequestInterestDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public selectLoanRequestInterestDetail_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectLoanRequestInterestDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectLoanRequestInterestDetail_args args = new selectLoanRequestInterestDetail_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepayCgInterestView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectLoanRequestInterestDetail();
      }
    }

    public void insertRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertRepayCgapplyInfo_call method_call = new insertRepayCgapplyInfo_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertRepayCgapplyInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public insertRepayCgapplyInfo_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertRepayCgapplyInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertRepayCgapplyInfo_args args = new insertRepayCgapplyInfo_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertRepayCgapplyInfo();
      }
    }

    public void updateRepayCgapplyInfo(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRepayCgapplyInfo_call method_call = new updateRepayCgapplyInfo_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRepayCgapplyInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public updateRepayCgapplyInfo_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRepayCgapplyInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRepayCgapplyInfo_args args = new updateRepayCgapplyInfo_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRepayCgapplyInfo();
      }
    }

    public void queryRepayCgapplyFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRepayCgapplyFile_call method_call = new queryRepayCgapplyFile_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRepayCgapplyFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public queryRepayCgapplyFile_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRepayCgapplyFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRepayCgapplyFile_args args = new queryRepayCgapplyFile_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RegAdvapplyFileview> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRepayCgapplyFile();
      }
    }

    public void queryRepayCgapplyFileCount(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRepayCgapplyFileCount_call method_call = new queryRepayCgapplyFileCount_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRepayCgapplyFileCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public queryRepayCgapplyFileCount_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRepayCgapplyFileCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRepayCgapplyFileCount_args args = new queryRepayCgapplyFileCount_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRepayCgapplyFileCount();
      }
    }

    public void selectLoanInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectLoanInterestDetailbyProces_call method_call = new selectLoanInterestDetailbyProces_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectLoanInterestDetailbyProces_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public selectLoanInterestDetailbyProces_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectLoanInterestDetailbyProces", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectLoanInterestDetailbyProces_args args = new selectLoanInterestDetailbyProces_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepayCgInterestView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectLoanInterestDetailbyProces();
      }
    }

    public void queryLoanRes(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryLoanRes_call method_call = new queryLoanRes_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryLoanRes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public queryLoanRes_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryLoanRes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryLoanRes_args args = new queryLoanRes_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepayCgInterestView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryLoanRes();
      }
    }

    public void selectLoanRequestInterestDetailbyProces(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectLoanRequestInterestDetailbyProces_call method_call = new selectLoanRequestInterestDetailbyProces_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectLoanRequestInterestDetailbyProces_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public selectLoanRequestInterestDetailbyProces_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectLoanRequestInterestDetailbyProces", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectLoanRequestInterestDetailbyProces_args args = new selectLoanRequestInterestDetailbyProces_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepayCgInterestView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectLoanRequestInterestDetailbyProces();
      }
    }

    public void selectLoanRequestInterestDetailbyProcesByStatus(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectLoanRequestInterestDetailbyProcesByStatus_call method_call = new selectLoanRequestInterestDetailbyProcesByStatus_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectLoanRequestInterestDetailbyProcesByStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public selectLoanRequestInterestDetailbyProcesByStatus_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectLoanRequestInterestDetailbyProcesByStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectLoanRequestInterestDetailbyProcesByStatus_args args = new selectLoanRequestInterestDetailbyProcesByStatus_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepayCgInterestView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectLoanRequestInterestDetailbyProcesByStatus();
      }
    }

    public void intRepayCgapplyInfoEnd(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      intRepayCgapplyInfoEnd_call method_call = new intRepayCgapplyInfoEnd_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class intRepayCgapplyInfoEnd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public intRepayCgapplyInfoEnd_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("intRepayCgapplyInfoEnd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        intRepayCgapplyInfoEnd_args args = new intRepayCgapplyInfoEnd_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_intRepayCgapplyInfoEnd();
      }
    }

    public void changeReqstCg(int reqStatus, int interestChgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeReqstCg_call method_call = new changeReqstCg_call(reqStatus, interestChgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeReqstCg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reqStatus;
      private int interestChgId;
      public changeReqstCg_call(int reqStatus, int interestChgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqStatus = reqStatus;
        this.interestChgId = interestChgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeReqstCg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeReqstCg_args args = new changeReqstCg_args();
        args.setReqStatus(reqStatus);
        args.setInterestChgId(interestChgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeReqstCg();
      }
    }

    public void deleteProjectbyinterestChgId(String interestChgId, String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProjectbyinterestChgId_call method_call = new deleteProjectbyinterestChgId_call(interestChgId, projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProjectbyinterestChgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String interestChgId;
      private String projectId;
      public deleteProjectbyinterestChgId_call(String interestChgId, String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.interestChgId = interestChgId;
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProjectbyinterestChgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProjectbyinterestChgId_args args = new deleteProjectbyinterestChgId_args();
        args.setInterestChgId(interestChgId);
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProjectbyinterestChgId();
      }
    }

    public void checkpreRepayByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkpreRepayByProjectId_call method_call = new checkpreRepayByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkpreRepayByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public checkpreRepayByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkpreRepayByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkpreRepayByProjectId_args args = new checkpreRepayByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkpreRepayByProjectId();
      }
    }

    public void makeCgApplyFile(int interestChgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeCgApplyFile_call method_call = new makeCgApplyFile_call(interestChgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeCgApplyFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int interestChgId;
      public makeCgApplyFile_call(int interestChgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.interestChgId = interestChgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeCgApplyFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeCgApplyFile_args args = new makeCgApplyFile_args();
        args.setInterestChgId(interestChgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InterestChgApplyView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeCgApplyFile();
      }
    }

    public void queryInterestChgId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryInterestChgId_call method_call = new queryInterestChgId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryInterestChgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public queryInterestChgId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryInterestChgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryInterestChgId_args args = new queryInterestChgId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InterestChgApplyView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryInterestChgId();
      }
    }

    public void saveProcedures(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveProcedures_call method_call = new saveProcedures_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveProcedures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public saveProcedures_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveProcedures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveProcedures_args args = new saveProcedures_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveProcedures();
      }
    }

    public void getRepayCgInterestByPid(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepayCgInterestByPid_call method_call = new getRepayCgInterestByPid_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepayCgInterestByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getRepayCgInterestByPid_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepayCgInterestByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepayCgInterestByPid_args args = new getRepayCgInterestByPid_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RepayCgInterestView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepayCgInterestByPid();
      }
    }

    public void syncProcedureToProject(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncProcedureToProject_call method_call = new syncProcedureToProject_call(repayCgInterestDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncProcedureToProject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepayCgInterestDTO repayCgInterestDTO;
      public syncProcedureToProject_call(RepayCgInterestDTO repayCgInterestDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repayCgInterestDTO = repayCgInterestDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncProcedureToProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncProcedureToProject_args args = new syncProcedureToProject_args();
        args.setRepayCgInterestDTO(repayCgInterestDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncProcedureToProject();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("selectLoanInterestDetail", new selectLoanInterestDetail());
      processMap.put("uploadinstCgapply", new uploadinstCgapply());
      processMap.put("selectLoanRequestInterestDetail", new selectLoanRequestInterestDetail());
      processMap.put("insertRepayCgapplyInfo", new insertRepayCgapplyInfo());
      processMap.put("updateRepayCgapplyInfo", new updateRepayCgapplyInfo());
      processMap.put("queryRepayCgapplyFile", new queryRepayCgapplyFile());
      processMap.put("queryRepayCgapplyFileCount", new queryRepayCgapplyFileCount());
      processMap.put("selectLoanInterestDetailbyProces", new selectLoanInterestDetailbyProces());
      processMap.put("queryLoanRes", new queryLoanRes());
      processMap.put("selectLoanRequestInterestDetailbyProces", new selectLoanRequestInterestDetailbyProces());
      processMap.put("selectLoanRequestInterestDetailbyProcesByStatus", new selectLoanRequestInterestDetailbyProcesByStatus());
      processMap.put("intRepayCgapplyInfoEnd", new intRepayCgapplyInfoEnd());
      processMap.put("changeReqstCg", new changeReqstCg());
      processMap.put("deleteProjectbyinterestChgId", new deleteProjectbyinterestChgId());
      processMap.put("checkpreRepayByProjectId", new checkpreRepayByProjectId());
      processMap.put("makeCgApplyFile", new makeCgApplyFile());
      processMap.put("queryInterestChgId", new queryInterestChgId());
      processMap.put("saveProcedures", new saveProcedures());
      processMap.put("getRepayCgInterestByPid", new getRepayCgInterestByPid());
      processMap.put("syncProcedureToProject", new syncProcedureToProject());
      return processMap;
    }

    public static class selectLoanInterestDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectLoanInterestDetail_args> {
      public selectLoanInterestDetail() {
        super("selectLoanInterestDetail");
      }

      public selectLoanInterestDetail_args getEmptyArgsInstance() {
        return new selectLoanInterestDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectLoanInterestDetail_result getResult(I iface, selectLoanInterestDetail_args args) throws org.apache.thrift.TException {
        selectLoanInterestDetail_result result = new selectLoanInterestDetail_result();
        try {
          result.success = iface.selectLoanInterestDetail(args.repayCgInterestDTO);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class uploadinstCgapply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadinstCgapply_args> {
      public uploadinstCgapply() {
        super("uploadinstCgapply");
      }

      public uploadinstCgapply_args getEmptyArgsInstance() {
        return new uploadinstCgapply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadinstCgapply_result getResult(I iface, uploadinstCgapply_args args) throws org.apache.thrift.TException {
        uploadinstCgapply_result result = new uploadinstCgapply_result();
        try {
          result.success = iface.uploadinstCgapply(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class selectLoanRequestInterestDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectLoanRequestInterestDetail_args> {
      public selectLoanRequestInterestDetail() {
        super("selectLoanRequestInterestDetail");
      }

      public selectLoanRequestInterestDetail_args getEmptyArgsInstance() {
        return new selectLoanRequestInterestDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectLoanRequestInterestDetail_result getResult(I iface, selectLoanRequestInterestDetail_args args) throws org.apache.thrift.TException {
        selectLoanRequestInterestDetail_result result = new selectLoanRequestInterestDetail_result();
        try {
          result.success = iface.selectLoanRequestInterestDetail(args.repayCgInterestDTO);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class insertRepayCgapplyInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertRepayCgapplyInfo_args> {
      public insertRepayCgapplyInfo() {
        super("insertRepayCgapplyInfo");
      }

      public insertRepayCgapplyInfo_args getEmptyArgsInstance() {
        return new insertRepayCgapplyInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertRepayCgapplyInfo_result getResult(I iface, insertRepayCgapplyInfo_args args) throws org.apache.thrift.TException {
        insertRepayCgapplyInfo_result result = new insertRepayCgapplyInfo_result();
        try {
          result.success = iface.insertRepayCgapplyInfo(args.repayCgInterestDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateRepayCgapplyInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRepayCgapplyInfo_args> {
      public updateRepayCgapplyInfo() {
        super("updateRepayCgapplyInfo");
      }

      public updateRepayCgapplyInfo_args getEmptyArgsInstance() {
        return new updateRepayCgapplyInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRepayCgapplyInfo_result getResult(I iface, updateRepayCgapplyInfo_args args) throws org.apache.thrift.TException {
        updateRepayCgapplyInfo_result result = new updateRepayCgapplyInfo_result();
        try {
          result.success = iface.updateRepayCgapplyInfo(args.repayCgInterestDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRepayCgapplyFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRepayCgapplyFile_args> {
      public queryRepayCgapplyFile() {
        super("queryRepayCgapplyFile");
      }

      public queryRepayCgapplyFile_args getEmptyArgsInstance() {
        return new queryRepayCgapplyFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRepayCgapplyFile_result getResult(I iface, queryRepayCgapplyFile_args args) throws org.apache.thrift.TException {
        queryRepayCgapplyFile_result result = new queryRepayCgapplyFile_result();
        try {
          result.success = iface.queryRepayCgapplyFile(args.uploadinstAdvapplyBaseDTO);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryRepayCgapplyFileCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRepayCgapplyFileCount_args> {
      public queryRepayCgapplyFileCount() {
        super("queryRepayCgapplyFileCount");
      }

      public queryRepayCgapplyFileCount_args getEmptyArgsInstance() {
        return new queryRepayCgapplyFileCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRepayCgapplyFileCount_result getResult(I iface, queryRepayCgapplyFileCount_args args) throws org.apache.thrift.TException {
        queryRepayCgapplyFileCount_result result = new queryRepayCgapplyFileCount_result();
        try {
          result.success = iface.queryRepayCgapplyFileCount(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class selectLoanInterestDetailbyProces<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectLoanInterestDetailbyProces_args> {
      public selectLoanInterestDetailbyProces() {
        super("selectLoanInterestDetailbyProces");
      }

      public selectLoanInterestDetailbyProces_args getEmptyArgsInstance() {
        return new selectLoanInterestDetailbyProces_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectLoanInterestDetailbyProces_result getResult(I iface, selectLoanInterestDetailbyProces_args args) throws org.apache.thrift.TException {
        selectLoanInterestDetailbyProces_result result = new selectLoanInterestDetailbyProces_result();
        try {
          result.success = iface.selectLoanInterestDetailbyProces(args.repayCgInterestDTO);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryLoanRes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryLoanRes_args> {
      public queryLoanRes() {
        super("queryLoanRes");
      }

      public queryLoanRes_args getEmptyArgsInstance() {
        return new queryLoanRes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryLoanRes_result getResult(I iface, queryLoanRes_args args) throws org.apache.thrift.TException {
        queryLoanRes_result result = new queryLoanRes_result();
        try {
          result.success = iface.queryLoanRes(args.repayCgInterestDTO);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class selectLoanRequestInterestDetailbyProces<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectLoanRequestInterestDetailbyProces_args> {
      public selectLoanRequestInterestDetailbyProces() {
        super("selectLoanRequestInterestDetailbyProces");
      }

      public selectLoanRequestInterestDetailbyProces_args getEmptyArgsInstance() {
        return new selectLoanRequestInterestDetailbyProces_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectLoanRequestInterestDetailbyProces_result getResult(I iface, selectLoanRequestInterestDetailbyProces_args args) throws org.apache.thrift.TException {
        selectLoanRequestInterestDetailbyProces_result result = new selectLoanRequestInterestDetailbyProces_result();
        try {
          result.success = iface.selectLoanRequestInterestDetailbyProces(args.repayCgInterestDTO);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class selectLoanRequestInterestDetailbyProcesByStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectLoanRequestInterestDetailbyProcesByStatus_args> {
      public selectLoanRequestInterestDetailbyProcesByStatus() {
        super("selectLoanRequestInterestDetailbyProcesByStatus");
      }

      public selectLoanRequestInterestDetailbyProcesByStatus_args getEmptyArgsInstance() {
        return new selectLoanRequestInterestDetailbyProcesByStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectLoanRequestInterestDetailbyProcesByStatus_result getResult(I iface, selectLoanRequestInterestDetailbyProcesByStatus_args args) throws org.apache.thrift.TException {
        selectLoanRequestInterestDetailbyProcesByStatus_result result = new selectLoanRequestInterestDetailbyProcesByStatus_result();
        try {
          result.success = iface.selectLoanRequestInterestDetailbyProcesByStatus(args.repayCgInterestDTO);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class intRepayCgapplyInfoEnd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, intRepayCgapplyInfoEnd_args> {
      public intRepayCgapplyInfoEnd() {
        super("intRepayCgapplyInfoEnd");
      }

      public intRepayCgapplyInfoEnd_args getEmptyArgsInstance() {
        return new intRepayCgapplyInfoEnd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public intRepayCgapplyInfoEnd_result getResult(I iface, intRepayCgapplyInfoEnd_args args) throws org.apache.thrift.TException {
        intRepayCgapplyInfoEnd_result result = new intRepayCgapplyInfoEnd_result();
        try {
          result.success = iface.intRepayCgapplyInfoEnd(args.repayCgInterestDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class changeReqstCg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeReqstCg_args> {
      public changeReqstCg() {
        super("changeReqstCg");
      }

      public changeReqstCg_args getEmptyArgsInstance() {
        return new changeReqstCg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeReqstCg_result getResult(I iface, changeReqstCg_args args) throws org.apache.thrift.TException {
        changeReqstCg_result result = new changeReqstCg_result();
        try {
          result.success = iface.changeReqstCg(args.reqStatus, args.interestChgId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteProjectbyinterestChgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProjectbyinterestChgId_args> {
      public deleteProjectbyinterestChgId() {
        super("deleteProjectbyinterestChgId");
      }

      public deleteProjectbyinterestChgId_args getEmptyArgsInstance() {
        return new deleteProjectbyinterestChgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProjectbyinterestChgId_result getResult(I iface, deleteProjectbyinterestChgId_args args) throws org.apache.thrift.TException {
        deleteProjectbyinterestChgId_result result = new deleteProjectbyinterestChgId_result();
        try {
          result.success = iface.deleteProjectbyinterestChgId(args.interestChgId, args.projectId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class checkpreRepayByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkpreRepayByProjectId_args> {
      public checkpreRepayByProjectId() {
        super("checkpreRepayByProjectId");
      }

      public checkpreRepayByProjectId_args getEmptyArgsInstance() {
        return new checkpreRepayByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkpreRepayByProjectId_result getResult(I iface, checkpreRepayByProjectId_args args) throws org.apache.thrift.TException {
        checkpreRepayByProjectId_result result = new checkpreRepayByProjectId_result();
        try {
          result.success = iface.checkpreRepayByProjectId(args.projectId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class makeCgApplyFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeCgApplyFile_args> {
      public makeCgApplyFile() {
        super("makeCgApplyFile");
      }

      public makeCgApplyFile_args getEmptyArgsInstance() {
        return new makeCgApplyFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makeCgApplyFile_result getResult(I iface, makeCgApplyFile_args args) throws org.apache.thrift.TException {
        makeCgApplyFile_result result = new makeCgApplyFile_result();
        try {
          result.success = iface.makeCgApplyFile(args.interestChgId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryInterestChgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryInterestChgId_args> {
      public queryInterestChgId() {
        super("queryInterestChgId");
      }

      public queryInterestChgId_args getEmptyArgsInstance() {
        return new queryInterestChgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryInterestChgId_result getResult(I iface, queryInterestChgId_args args) throws org.apache.thrift.TException {
        queryInterestChgId_result result = new queryInterestChgId_result();
        try {
          result.success = iface.queryInterestChgId(args.projectId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveProcedures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveProcedures_args> {
      public saveProcedures() {
        super("saveProcedures");
      }

      public saveProcedures_args getEmptyArgsInstance() {
        return new saveProcedures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveProcedures_result getResult(I iface, saveProcedures_args args) throws org.apache.thrift.TException {
        saveProcedures_result result = new saveProcedures_result();
        try {
          result.success = iface.saveProcedures(args.repayCgInterestDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getRepayCgInterestByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepayCgInterestByPid_args> {
      public getRepayCgInterestByPid() {
        super("getRepayCgInterestByPid");
      }

      public getRepayCgInterestByPid_args getEmptyArgsInstance() {
        return new getRepayCgInterestByPid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepayCgInterestByPid_result getResult(I iface, getRepayCgInterestByPid_args args) throws org.apache.thrift.TException {
        getRepayCgInterestByPid_result result = new getRepayCgInterestByPid_result();
        try {
          result.success = iface.getRepayCgInterestByPid(args.pid);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class syncProcedureToProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncProcedureToProject_args> {
      public syncProcedureToProject() {
        super("syncProcedureToProject");
      }

      public syncProcedureToProject_args getEmptyArgsInstance() {
        return new syncProcedureToProject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncProcedureToProject_result getResult(I iface, syncProcedureToProject_args args) throws org.apache.thrift.TException {
        syncProcedureToProject_result result = new syncProcedureToProject_result();
        try {
          result.success = iface.syncProcedureToProject(args.repayCgInterestDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("selectLoanInterestDetail", new selectLoanInterestDetail());
      processMap.put("uploadinstCgapply", new uploadinstCgapply());
      processMap.put("selectLoanRequestInterestDetail", new selectLoanRequestInterestDetail());
      processMap.put("insertRepayCgapplyInfo", new insertRepayCgapplyInfo());
      processMap.put("updateRepayCgapplyInfo", new updateRepayCgapplyInfo());
      processMap.put("queryRepayCgapplyFile", new queryRepayCgapplyFile());
      processMap.put("queryRepayCgapplyFileCount", new queryRepayCgapplyFileCount());
      processMap.put("selectLoanInterestDetailbyProces", new selectLoanInterestDetailbyProces());
      processMap.put("queryLoanRes", new queryLoanRes());
      processMap.put("selectLoanRequestInterestDetailbyProces", new selectLoanRequestInterestDetailbyProces());
      processMap.put("selectLoanRequestInterestDetailbyProcesByStatus", new selectLoanRequestInterestDetailbyProcesByStatus());
      processMap.put("intRepayCgapplyInfoEnd", new intRepayCgapplyInfoEnd());
      processMap.put("changeReqstCg", new changeReqstCg());
      processMap.put("deleteProjectbyinterestChgId", new deleteProjectbyinterestChgId());
      processMap.put("checkpreRepayByProjectId", new checkpreRepayByProjectId());
      processMap.put("makeCgApplyFile", new makeCgApplyFile());
      processMap.put("queryInterestChgId", new queryInterestChgId());
      processMap.put("saveProcedures", new saveProcedures());
      processMap.put("getRepayCgInterestByPid", new getRepayCgInterestByPid());
      processMap.put("syncProcedureToProject", new syncProcedureToProject());
      return processMap;
    }

    public static class selectLoanInterestDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectLoanInterestDetail_args, List<RepayCgInterestView>> {
      public selectLoanInterestDetail() {
        super("selectLoanInterestDetail");
      }

      public selectLoanInterestDetail_args getEmptyArgsInstance() {
        return new selectLoanInterestDetail_args();
      }

      public AsyncMethodCallback<List<RepayCgInterestView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepayCgInterestView>>() { 
          public void onComplete(List<RepayCgInterestView> o) {
            selectLoanInterestDetail_result result = new selectLoanInterestDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectLoanInterestDetail_result result = new selectLoanInterestDetail_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectLoanInterestDetail_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepayCgInterestView>> resultHandler) throws TException {
        iface.selectLoanInterestDetail(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class uploadinstCgapply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadinstCgapply_args, Integer> {
      public uploadinstCgapply() {
        super("uploadinstCgapply");
      }

      public uploadinstCgapply_args getEmptyArgsInstance() {
        return new uploadinstCgapply_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            uploadinstCgapply_result result = new uploadinstCgapply_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadinstCgapply_result result = new uploadinstCgapply_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadinstCgapply_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.uploadinstCgapply(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class selectLoanRequestInterestDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectLoanRequestInterestDetail_args, List<RepayCgInterestView>> {
      public selectLoanRequestInterestDetail() {
        super("selectLoanRequestInterestDetail");
      }

      public selectLoanRequestInterestDetail_args getEmptyArgsInstance() {
        return new selectLoanRequestInterestDetail_args();
      }

      public AsyncMethodCallback<List<RepayCgInterestView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepayCgInterestView>>() { 
          public void onComplete(List<RepayCgInterestView> o) {
            selectLoanRequestInterestDetail_result result = new selectLoanRequestInterestDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectLoanRequestInterestDetail_result result = new selectLoanRequestInterestDetail_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectLoanRequestInterestDetail_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepayCgInterestView>> resultHandler) throws TException {
        iface.selectLoanRequestInterestDetail(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class insertRepayCgapplyInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertRepayCgapplyInfo_args, Integer> {
      public insertRepayCgapplyInfo() {
        super("insertRepayCgapplyInfo");
      }

      public insertRepayCgapplyInfo_args getEmptyArgsInstance() {
        return new insertRepayCgapplyInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            insertRepayCgapplyInfo_result result = new insertRepayCgapplyInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertRepayCgapplyInfo_result result = new insertRepayCgapplyInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertRepayCgapplyInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.insertRepayCgapplyInfo(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class updateRepayCgapplyInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRepayCgapplyInfo_args, Integer> {
      public updateRepayCgapplyInfo() {
        super("updateRepayCgapplyInfo");
      }

      public updateRepayCgapplyInfo_args getEmptyArgsInstance() {
        return new updateRepayCgapplyInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateRepayCgapplyInfo_result result = new updateRepayCgapplyInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRepayCgapplyInfo_result result = new updateRepayCgapplyInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRepayCgapplyInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateRepayCgapplyInfo(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class queryRepayCgapplyFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRepayCgapplyFile_args, List<RegAdvapplyFileview>> {
      public queryRepayCgapplyFile() {
        super("queryRepayCgapplyFile");
      }

      public queryRepayCgapplyFile_args getEmptyArgsInstance() {
        return new queryRepayCgapplyFile_args();
      }

      public AsyncMethodCallback<List<RegAdvapplyFileview>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RegAdvapplyFileview>>() { 
          public void onComplete(List<RegAdvapplyFileview> o) {
            queryRepayCgapplyFile_result result = new queryRepayCgapplyFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRepayCgapplyFile_result result = new queryRepayCgapplyFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRepayCgapplyFile_args args, org.apache.thrift.async.AsyncMethodCallback<List<RegAdvapplyFileview>> resultHandler) throws TException {
        iface.queryRepayCgapplyFile(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class queryRepayCgapplyFileCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRepayCgapplyFileCount_args, Integer> {
      public queryRepayCgapplyFileCount() {
        super("queryRepayCgapplyFileCount");
      }

      public queryRepayCgapplyFileCount_args getEmptyArgsInstance() {
        return new queryRepayCgapplyFileCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryRepayCgapplyFileCount_result result = new queryRepayCgapplyFileCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRepayCgapplyFileCount_result result = new queryRepayCgapplyFileCount_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRepayCgapplyFileCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryRepayCgapplyFileCount(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class selectLoanInterestDetailbyProces<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectLoanInterestDetailbyProces_args, List<RepayCgInterestView>> {
      public selectLoanInterestDetailbyProces() {
        super("selectLoanInterestDetailbyProces");
      }

      public selectLoanInterestDetailbyProces_args getEmptyArgsInstance() {
        return new selectLoanInterestDetailbyProces_args();
      }

      public AsyncMethodCallback<List<RepayCgInterestView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepayCgInterestView>>() { 
          public void onComplete(List<RepayCgInterestView> o) {
            selectLoanInterestDetailbyProces_result result = new selectLoanInterestDetailbyProces_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectLoanInterestDetailbyProces_result result = new selectLoanInterestDetailbyProces_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectLoanInterestDetailbyProces_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepayCgInterestView>> resultHandler) throws TException {
        iface.selectLoanInterestDetailbyProces(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class queryLoanRes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryLoanRes_args, List<RepayCgInterestView>> {
      public queryLoanRes() {
        super("queryLoanRes");
      }

      public queryLoanRes_args getEmptyArgsInstance() {
        return new queryLoanRes_args();
      }

      public AsyncMethodCallback<List<RepayCgInterestView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepayCgInterestView>>() { 
          public void onComplete(List<RepayCgInterestView> o) {
            queryLoanRes_result result = new queryLoanRes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryLoanRes_result result = new queryLoanRes_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryLoanRes_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepayCgInterestView>> resultHandler) throws TException {
        iface.queryLoanRes(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class selectLoanRequestInterestDetailbyProces<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectLoanRequestInterestDetailbyProces_args, List<RepayCgInterestView>> {
      public selectLoanRequestInterestDetailbyProces() {
        super("selectLoanRequestInterestDetailbyProces");
      }

      public selectLoanRequestInterestDetailbyProces_args getEmptyArgsInstance() {
        return new selectLoanRequestInterestDetailbyProces_args();
      }

      public AsyncMethodCallback<List<RepayCgInterestView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepayCgInterestView>>() { 
          public void onComplete(List<RepayCgInterestView> o) {
            selectLoanRequestInterestDetailbyProces_result result = new selectLoanRequestInterestDetailbyProces_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectLoanRequestInterestDetailbyProces_result result = new selectLoanRequestInterestDetailbyProces_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectLoanRequestInterestDetailbyProces_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepayCgInterestView>> resultHandler) throws TException {
        iface.selectLoanRequestInterestDetailbyProces(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class selectLoanRequestInterestDetailbyProcesByStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectLoanRequestInterestDetailbyProcesByStatus_args, List<RepayCgInterestView>> {
      public selectLoanRequestInterestDetailbyProcesByStatus() {
        super("selectLoanRequestInterestDetailbyProcesByStatus");
      }

      public selectLoanRequestInterestDetailbyProcesByStatus_args getEmptyArgsInstance() {
        return new selectLoanRequestInterestDetailbyProcesByStatus_args();
      }

      public AsyncMethodCallback<List<RepayCgInterestView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepayCgInterestView>>() { 
          public void onComplete(List<RepayCgInterestView> o) {
            selectLoanRequestInterestDetailbyProcesByStatus_result result = new selectLoanRequestInterestDetailbyProcesByStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectLoanRequestInterestDetailbyProcesByStatus_result result = new selectLoanRequestInterestDetailbyProcesByStatus_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectLoanRequestInterestDetailbyProcesByStatus_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepayCgInterestView>> resultHandler) throws TException {
        iface.selectLoanRequestInterestDetailbyProcesByStatus(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class intRepayCgapplyInfoEnd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, intRepayCgapplyInfoEnd_args, Integer> {
      public intRepayCgapplyInfoEnd() {
        super("intRepayCgapplyInfoEnd");
      }

      public intRepayCgapplyInfoEnd_args getEmptyArgsInstance() {
        return new intRepayCgapplyInfoEnd_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            intRepayCgapplyInfoEnd_result result = new intRepayCgapplyInfoEnd_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            intRepayCgapplyInfoEnd_result result = new intRepayCgapplyInfoEnd_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, intRepayCgapplyInfoEnd_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.intRepayCgapplyInfoEnd(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class changeReqstCg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeReqstCg_args, Integer> {
      public changeReqstCg() {
        super("changeReqstCg");
      }

      public changeReqstCg_args getEmptyArgsInstance() {
        return new changeReqstCg_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            changeReqstCg_result result = new changeReqstCg_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeReqstCg_result result = new changeReqstCg_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeReqstCg_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.changeReqstCg(args.reqStatus, args.interestChgId,resultHandler);
      }
    }

    public static class deleteProjectbyinterestChgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProjectbyinterestChgId_args, Integer> {
      public deleteProjectbyinterestChgId() {
        super("deleteProjectbyinterestChgId");
      }

      public deleteProjectbyinterestChgId_args getEmptyArgsInstance() {
        return new deleteProjectbyinterestChgId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteProjectbyinterestChgId_result result = new deleteProjectbyinterestChgId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProjectbyinterestChgId_result result = new deleteProjectbyinterestChgId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProjectbyinterestChgId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteProjectbyinterestChgId(args.interestChgId, args.projectId,resultHandler);
      }
    }

    public static class checkpreRepayByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkpreRepayByProjectId_args, Integer> {
      public checkpreRepayByProjectId() {
        super("checkpreRepayByProjectId");
      }

      public checkpreRepayByProjectId_args getEmptyArgsInstance() {
        return new checkpreRepayByProjectId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkpreRepayByProjectId_result result = new checkpreRepayByProjectId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkpreRepayByProjectId_result result = new checkpreRepayByProjectId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkpreRepayByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkpreRepayByProjectId(args.projectId,resultHandler);
      }
    }

    public static class makeCgApplyFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makeCgApplyFile_args, InterestChgApplyView> {
      public makeCgApplyFile() {
        super("makeCgApplyFile");
      }

      public makeCgApplyFile_args getEmptyArgsInstance() {
        return new makeCgApplyFile_args();
      }

      public AsyncMethodCallback<InterestChgApplyView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InterestChgApplyView>() { 
          public void onComplete(InterestChgApplyView o) {
            makeCgApplyFile_result result = new makeCgApplyFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            makeCgApplyFile_result result = new makeCgApplyFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makeCgApplyFile_args args, org.apache.thrift.async.AsyncMethodCallback<InterestChgApplyView> resultHandler) throws TException {
        iface.makeCgApplyFile(args.interestChgId,resultHandler);
      }
    }

    public static class queryInterestChgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryInterestChgId_args, InterestChgApplyView> {
      public queryInterestChgId() {
        super("queryInterestChgId");
      }

      public queryInterestChgId_args getEmptyArgsInstance() {
        return new queryInterestChgId_args();
      }

      public AsyncMethodCallback<InterestChgApplyView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InterestChgApplyView>() { 
          public void onComplete(InterestChgApplyView o) {
            queryInterestChgId_result result = new queryInterestChgId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryInterestChgId_result result = new queryInterestChgId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryInterestChgId_args args, org.apache.thrift.async.AsyncMethodCallback<InterestChgApplyView> resultHandler) throws TException {
        iface.queryInterestChgId(args.projectId,resultHandler);
      }
    }

    public static class saveProcedures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveProcedures_args, Integer> {
      public saveProcedures() {
        super("saveProcedures");
      }

      public saveProcedures_args getEmptyArgsInstance() {
        return new saveProcedures_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveProcedures_result result = new saveProcedures_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveProcedures_result result = new saveProcedures_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveProcedures_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveProcedures(args.repayCgInterestDTO,resultHandler);
      }
    }

    public static class getRepayCgInterestByPid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepayCgInterestByPid_args, RepayCgInterestView> {
      public getRepayCgInterestByPid() {
        super("getRepayCgInterestByPid");
      }

      public getRepayCgInterestByPid_args getEmptyArgsInstance() {
        return new getRepayCgInterestByPid_args();
      }

      public AsyncMethodCallback<RepayCgInterestView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RepayCgInterestView>() { 
          public void onComplete(RepayCgInterestView o) {
            getRepayCgInterestByPid_result result = new getRepayCgInterestByPid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepayCgInterestByPid_result result = new getRepayCgInterestByPid_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepayCgInterestByPid_args args, org.apache.thrift.async.AsyncMethodCallback<RepayCgInterestView> resultHandler) throws TException {
        iface.getRepayCgInterestByPid(args.pid,resultHandler);
      }
    }

    public static class syncProcedureToProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncProcedureToProject_args, Integer> {
      public syncProcedureToProject() {
        super("syncProcedureToProject");
      }

      public syncProcedureToProject_args getEmptyArgsInstance() {
        return new syncProcedureToProject_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            syncProcedureToProject_result result = new syncProcedureToProject_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncProcedureToProject_result result = new syncProcedureToProject_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncProcedureToProject_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.syncProcedureToProject(args.repayCgInterestDTO,resultHandler);
      }
    }

  }

  public static class selectLoanInterestDetail_args implements org.apache.thrift.TBase<selectLoanInterestDetail_args, selectLoanInterestDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanInterestDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanInterestDetail_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanInterestDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanInterestDetail_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanInterestDetail_args.class, metaDataMap);
    }

    public selectLoanInterestDetail_args() {
    }

    public selectLoanInterestDetail_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanInterestDetail_args(selectLoanInterestDetail_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public selectLoanInterestDetail_args deepCopy() {
      return new selectLoanInterestDetail_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public selectLoanInterestDetail_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanInterestDetail_args)
        return this.equals((selectLoanInterestDetail_args)that);
      return false;
    }

    public boolean equals(selectLoanInterestDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanInterestDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanInterestDetail_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanInterestDetail_argsStandardSchemeFactory implements SchemeFactory {
      public selectLoanInterestDetail_argsStandardScheme getScheme() {
        return new selectLoanInterestDetail_argsStandardScheme();
      }
    }

    private static class selectLoanInterestDetail_argsStandardScheme extends StandardScheme<selectLoanInterestDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanInterestDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanInterestDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanInterestDetail_argsTupleSchemeFactory implements SchemeFactory {
      public selectLoanInterestDetail_argsTupleScheme getScheme() {
        return new selectLoanInterestDetail_argsTupleScheme();
      }
    }

    private static class selectLoanInterestDetail_argsTupleScheme extends TupleScheme<selectLoanInterestDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanInterestDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanInterestDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class selectLoanInterestDetail_result implements org.apache.thrift.TBase<selectLoanInterestDetail_result, selectLoanInterestDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanInterestDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanInterestDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanInterestDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanInterestDetail_resultTupleSchemeFactory());
    }

    public List<RepayCgInterestView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanInterestDetail_result.class, metaDataMap);
    }

    public selectLoanInterestDetail_result() {
    }

    public selectLoanInterestDetail_result(
      List<RepayCgInterestView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanInterestDetail_result(selectLoanInterestDetail_result other) {
      if (other.isSetSuccess()) {
        List<RepayCgInterestView> __this__success = new ArrayList<RepayCgInterestView>(other.success.size());
        for (RepayCgInterestView other_element : other.success) {
          __this__success.add(new RepayCgInterestView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public selectLoanInterestDetail_result deepCopy() {
      return new selectLoanInterestDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepayCgInterestView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepayCgInterestView elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepayCgInterestView>();
      }
      this.success.add(elem);
    }

    public List<RepayCgInterestView> getSuccess() {
      return this.success;
    }

    public selectLoanInterestDetail_result setSuccess(List<RepayCgInterestView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public selectLoanInterestDetail_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepayCgInterestView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanInterestDetail_result)
        return this.equals((selectLoanInterestDetail_result)that);
      return false;
    }

    public boolean equals(selectLoanInterestDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanInterestDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanInterestDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanInterestDetail_resultStandardSchemeFactory implements SchemeFactory {
      public selectLoanInterestDetail_resultStandardScheme getScheme() {
        return new selectLoanInterestDetail_resultStandardScheme();
      }
    }

    private static class selectLoanInterestDetail_resultStandardScheme extends StandardScheme<selectLoanInterestDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanInterestDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new ArrayList<RepayCgInterestView>(_list176.size);
                  RepayCgInterestView _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new RepayCgInterestView();
                    _elem177.read(iprot);
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanInterestDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepayCgInterestView _iter179 : struct.success)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanInterestDetail_resultTupleSchemeFactory implements SchemeFactory {
      public selectLoanInterestDetail_resultTupleScheme getScheme() {
        return new selectLoanInterestDetail_resultTupleScheme();
      }
    }

    private static class selectLoanInterestDetail_resultTupleScheme extends TupleScheme<selectLoanInterestDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanInterestDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepayCgInterestView _iter180 : struct.success)
            {
              _iter180.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanInterestDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepayCgInterestView>(_list181.size);
            RepayCgInterestView _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new RepayCgInterestView();
              _elem182.read(iprot);
              struct.success.add(_elem182);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class uploadinstCgapply_args implements org.apache.thrift.TBase<uploadinstCgapply_args, uploadinstCgapply_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadinstCgapply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadinstCgapply_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadinstCgapply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadinstCgapply_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadinstCgapply_args.class, metaDataMap);
    }

    public uploadinstCgapply_args() {
    }

    public uploadinstCgapply_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadinstCgapply_args(uploadinstCgapply_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public uploadinstCgapply_args deepCopy() {
      return new uploadinstCgapply_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public uploadinstCgapply_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadinstCgapply_args)
        return this.equals((uploadinstCgapply_args)that);
      return false;
    }

    public boolean equals(uploadinstCgapply_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadinstCgapply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadinstCgapply_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadinstCgapply_argsStandardSchemeFactory implements SchemeFactory {
      public uploadinstCgapply_argsStandardScheme getScheme() {
        return new uploadinstCgapply_argsStandardScheme();
      }
    }

    private static class uploadinstCgapply_argsStandardScheme extends StandardScheme<uploadinstCgapply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadinstCgapply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadinstCgapply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadinstCgapply_argsTupleSchemeFactory implements SchemeFactory {
      public uploadinstCgapply_argsTupleScheme getScheme() {
        return new uploadinstCgapply_argsTupleScheme();
      }
    }

    private static class uploadinstCgapply_argsTupleScheme extends TupleScheme<uploadinstCgapply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadinstCgapply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadinstCgapply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class uploadinstCgapply_result implements org.apache.thrift.TBase<uploadinstCgapply_result, uploadinstCgapply_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadinstCgapply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadinstCgapply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadinstCgapply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadinstCgapply_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadinstCgapply_result.class, metaDataMap);
    }

    public uploadinstCgapply_result() {
    }

    public uploadinstCgapply_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadinstCgapply_result(uploadinstCgapply_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public uploadinstCgapply_result deepCopy() {
      return new uploadinstCgapply_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public uploadinstCgapply_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public uploadinstCgapply_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadinstCgapply_result)
        return this.equals((uploadinstCgapply_result)that);
      return false;
    }

    public boolean equals(uploadinstCgapply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadinstCgapply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadinstCgapply_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadinstCgapply_resultStandardSchemeFactory implements SchemeFactory {
      public uploadinstCgapply_resultStandardScheme getScheme() {
        return new uploadinstCgapply_resultStandardScheme();
      }
    }

    private static class uploadinstCgapply_resultStandardScheme extends StandardScheme<uploadinstCgapply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadinstCgapply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadinstCgapply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadinstCgapply_resultTupleSchemeFactory implements SchemeFactory {
      public uploadinstCgapply_resultTupleScheme getScheme() {
        return new uploadinstCgapply_resultTupleScheme();
      }
    }

    private static class uploadinstCgapply_resultTupleScheme extends TupleScheme<uploadinstCgapply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadinstCgapply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadinstCgapply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class selectLoanRequestInterestDetail_args implements org.apache.thrift.TBase<selectLoanRequestInterestDetail_args, selectLoanRequestInterestDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanRequestInterestDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanRequestInterestDetail_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanRequestInterestDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanRequestInterestDetail_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanRequestInterestDetail_args.class, metaDataMap);
    }

    public selectLoanRequestInterestDetail_args() {
    }

    public selectLoanRequestInterestDetail_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanRequestInterestDetail_args(selectLoanRequestInterestDetail_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public selectLoanRequestInterestDetail_args deepCopy() {
      return new selectLoanRequestInterestDetail_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public selectLoanRequestInterestDetail_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanRequestInterestDetail_args)
        return this.equals((selectLoanRequestInterestDetail_args)that);
      return false;
    }

    public boolean equals(selectLoanRequestInterestDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanRequestInterestDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanRequestInterestDetail_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanRequestInterestDetail_argsStandardSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetail_argsStandardScheme getScheme() {
        return new selectLoanRequestInterestDetail_argsStandardScheme();
      }
    }

    private static class selectLoanRequestInterestDetail_argsStandardScheme extends StandardScheme<selectLoanRequestInterestDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanRequestInterestDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanRequestInterestDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanRequestInterestDetail_argsTupleSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetail_argsTupleScheme getScheme() {
        return new selectLoanRequestInterestDetail_argsTupleScheme();
      }
    }

    private static class selectLoanRequestInterestDetail_argsTupleScheme extends TupleScheme<selectLoanRequestInterestDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class selectLoanRequestInterestDetail_result implements org.apache.thrift.TBase<selectLoanRequestInterestDetail_result, selectLoanRequestInterestDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanRequestInterestDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanRequestInterestDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanRequestInterestDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanRequestInterestDetail_resultTupleSchemeFactory());
    }

    public List<RepayCgInterestView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanRequestInterestDetail_result.class, metaDataMap);
    }

    public selectLoanRequestInterestDetail_result() {
    }

    public selectLoanRequestInterestDetail_result(
      List<RepayCgInterestView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanRequestInterestDetail_result(selectLoanRequestInterestDetail_result other) {
      if (other.isSetSuccess()) {
        List<RepayCgInterestView> __this__success = new ArrayList<RepayCgInterestView>(other.success.size());
        for (RepayCgInterestView other_element : other.success) {
          __this__success.add(new RepayCgInterestView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public selectLoanRequestInterestDetail_result deepCopy() {
      return new selectLoanRequestInterestDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepayCgInterestView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepayCgInterestView elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepayCgInterestView>();
      }
      this.success.add(elem);
    }

    public List<RepayCgInterestView> getSuccess() {
      return this.success;
    }

    public selectLoanRequestInterestDetail_result setSuccess(List<RepayCgInterestView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public selectLoanRequestInterestDetail_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepayCgInterestView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanRequestInterestDetail_result)
        return this.equals((selectLoanRequestInterestDetail_result)that);
      return false;
    }

    public boolean equals(selectLoanRequestInterestDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanRequestInterestDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanRequestInterestDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanRequestInterestDetail_resultStandardSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetail_resultStandardScheme getScheme() {
        return new selectLoanRequestInterestDetail_resultStandardScheme();
      }
    }

    private static class selectLoanRequestInterestDetail_resultStandardScheme extends StandardScheme<selectLoanRequestInterestDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanRequestInterestDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new ArrayList<RepayCgInterestView>(_list184.size);
                  RepayCgInterestView _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new RepayCgInterestView();
                    _elem185.read(iprot);
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanRequestInterestDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepayCgInterestView _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanRequestInterestDetail_resultTupleSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetail_resultTupleScheme getScheme() {
        return new selectLoanRequestInterestDetail_resultTupleScheme();
      }
    }

    private static class selectLoanRequestInterestDetail_resultTupleScheme extends TupleScheme<selectLoanRequestInterestDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepayCgInterestView _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepayCgInterestView>(_list189.size);
            RepayCgInterestView _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new RepayCgInterestView();
              _elem190.read(iprot);
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class insertRepayCgapplyInfo_args implements org.apache.thrift.TBase<insertRepayCgapplyInfo_args, insertRepayCgapplyInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertRepayCgapplyInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertRepayCgapplyInfo_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertRepayCgapplyInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertRepayCgapplyInfo_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertRepayCgapplyInfo_args.class, metaDataMap);
    }

    public insertRepayCgapplyInfo_args() {
    }

    public insertRepayCgapplyInfo_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertRepayCgapplyInfo_args(insertRepayCgapplyInfo_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public insertRepayCgapplyInfo_args deepCopy() {
      return new insertRepayCgapplyInfo_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public insertRepayCgapplyInfo_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertRepayCgapplyInfo_args)
        return this.equals((insertRepayCgapplyInfo_args)that);
      return false;
    }

    public boolean equals(insertRepayCgapplyInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertRepayCgapplyInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertRepayCgapplyInfo_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertRepayCgapplyInfo_argsStandardSchemeFactory implements SchemeFactory {
      public insertRepayCgapplyInfo_argsStandardScheme getScheme() {
        return new insertRepayCgapplyInfo_argsStandardScheme();
      }
    }

    private static class insertRepayCgapplyInfo_argsStandardScheme extends StandardScheme<insertRepayCgapplyInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertRepayCgapplyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertRepayCgapplyInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertRepayCgapplyInfo_argsTupleSchemeFactory implements SchemeFactory {
      public insertRepayCgapplyInfo_argsTupleScheme getScheme() {
        return new insertRepayCgapplyInfo_argsTupleScheme();
      }
    }

    private static class insertRepayCgapplyInfo_argsTupleScheme extends TupleScheme<insertRepayCgapplyInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertRepayCgapplyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertRepayCgapplyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class insertRepayCgapplyInfo_result implements org.apache.thrift.TBase<insertRepayCgapplyInfo_result, insertRepayCgapplyInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertRepayCgapplyInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertRepayCgapplyInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertRepayCgapplyInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertRepayCgapplyInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertRepayCgapplyInfo_result.class, metaDataMap);
    }

    public insertRepayCgapplyInfo_result() {
    }

    public insertRepayCgapplyInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertRepayCgapplyInfo_result(insertRepayCgapplyInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public insertRepayCgapplyInfo_result deepCopy() {
      return new insertRepayCgapplyInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public insertRepayCgapplyInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public insertRepayCgapplyInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertRepayCgapplyInfo_result)
        return this.equals((insertRepayCgapplyInfo_result)that);
      return false;
    }

    public boolean equals(insertRepayCgapplyInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertRepayCgapplyInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertRepayCgapplyInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertRepayCgapplyInfo_resultStandardSchemeFactory implements SchemeFactory {
      public insertRepayCgapplyInfo_resultStandardScheme getScheme() {
        return new insertRepayCgapplyInfo_resultStandardScheme();
      }
    }

    private static class insertRepayCgapplyInfo_resultStandardScheme extends StandardScheme<insertRepayCgapplyInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertRepayCgapplyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertRepayCgapplyInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertRepayCgapplyInfo_resultTupleSchemeFactory implements SchemeFactory {
      public insertRepayCgapplyInfo_resultTupleScheme getScheme() {
        return new insertRepayCgapplyInfo_resultTupleScheme();
      }
    }

    private static class insertRepayCgapplyInfo_resultTupleScheme extends TupleScheme<insertRepayCgapplyInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertRepayCgapplyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertRepayCgapplyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateRepayCgapplyInfo_args implements org.apache.thrift.TBase<updateRepayCgapplyInfo_args, updateRepayCgapplyInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRepayCgapplyInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRepayCgapplyInfo_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRepayCgapplyInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRepayCgapplyInfo_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRepayCgapplyInfo_args.class, metaDataMap);
    }

    public updateRepayCgapplyInfo_args() {
    }

    public updateRepayCgapplyInfo_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRepayCgapplyInfo_args(updateRepayCgapplyInfo_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public updateRepayCgapplyInfo_args deepCopy() {
      return new updateRepayCgapplyInfo_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public updateRepayCgapplyInfo_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRepayCgapplyInfo_args)
        return this.equals((updateRepayCgapplyInfo_args)that);
      return false;
    }

    public boolean equals(updateRepayCgapplyInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRepayCgapplyInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRepayCgapplyInfo_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRepayCgapplyInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateRepayCgapplyInfo_argsStandardScheme getScheme() {
        return new updateRepayCgapplyInfo_argsStandardScheme();
      }
    }

    private static class updateRepayCgapplyInfo_argsStandardScheme extends StandardScheme<updateRepayCgapplyInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRepayCgapplyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRepayCgapplyInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRepayCgapplyInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateRepayCgapplyInfo_argsTupleScheme getScheme() {
        return new updateRepayCgapplyInfo_argsTupleScheme();
      }
    }

    private static class updateRepayCgapplyInfo_argsTupleScheme extends TupleScheme<updateRepayCgapplyInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRepayCgapplyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRepayCgapplyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class updateRepayCgapplyInfo_result implements org.apache.thrift.TBase<updateRepayCgapplyInfo_result, updateRepayCgapplyInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRepayCgapplyInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRepayCgapplyInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRepayCgapplyInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRepayCgapplyInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRepayCgapplyInfo_result.class, metaDataMap);
    }

    public updateRepayCgapplyInfo_result() {
    }

    public updateRepayCgapplyInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRepayCgapplyInfo_result(updateRepayCgapplyInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateRepayCgapplyInfo_result deepCopy() {
      return new updateRepayCgapplyInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateRepayCgapplyInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateRepayCgapplyInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRepayCgapplyInfo_result)
        return this.equals((updateRepayCgapplyInfo_result)that);
      return false;
    }

    public boolean equals(updateRepayCgapplyInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRepayCgapplyInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRepayCgapplyInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRepayCgapplyInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateRepayCgapplyInfo_resultStandardScheme getScheme() {
        return new updateRepayCgapplyInfo_resultStandardScheme();
      }
    }

    private static class updateRepayCgapplyInfo_resultStandardScheme extends StandardScheme<updateRepayCgapplyInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRepayCgapplyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRepayCgapplyInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRepayCgapplyInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateRepayCgapplyInfo_resultTupleScheme getScheme() {
        return new updateRepayCgapplyInfo_resultTupleScheme();
      }
    }

    private static class updateRepayCgapplyInfo_resultTupleScheme extends TupleScheme<updateRepayCgapplyInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRepayCgapplyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRepayCgapplyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRepayCgapplyFile_args implements org.apache.thrift.TBase<queryRepayCgapplyFile_args, queryRepayCgapplyFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepayCgapplyFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepayCgapplyFile_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepayCgapplyFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepayCgapplyFile_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepayCgapplyFile_args.class, metaDataMap);
    }

    public queryRepayCgapplyFile_args() {
    }

    public queryRepayCgapplyFile_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepayCgapplyFile_args(queryRepayCgapplyFile_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public queryRepayCgapplyFile_args deepCopy() {
      return new queryRepayCgapplyFile_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public queryRepayCgapplyFile_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepayCgapplyFile_args)
        return this.equals((queryRepayCgapplyFile_args)that);
      return false;
    }

    public boolean equals(queryRepayCgapplyFile_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepayCgapplyFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepayCgapplyFile_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepayCgapplyFile_argsStandardSchemeFactory implements SchemeFactory {
      public queryRepayCgapplyFile_argsStandardScheme getScheme() {
        return new queryRepayCgapplyFile_argsStandardScheme();
      }
    }

    private static class queryRepayCgapplyFile_argsStandardScheme extends StandardScheme<queryRepayCgapplyFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepayCgapplyFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepayCgapplyFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepayCgapplyFile_argsTupleSchemeFactory implements SchemeFactory {
      public queryRepayCgapplyFile_argsTupleScheme getScheme() {
        return new queryRepayCgapplyFile_argsTupleScheme();
      }
    }

    private static class queryRepayCgapplyFile_argsTupleScheme extends TupleScheme<queryRepayCgapplyFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepayCgapplyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepayCgapplyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class queryRepayCgapplyFile_result implements org.apache.thrift.TBase<queryRepayCgapplyFile_result, queryRepayCgapplyFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepayCgapplyFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepayCgapplyFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepayCgapplyFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepayCgapplyFile_resultTupleSchemeFactory());
    }

    public List<RegAdvapplyFileview> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegAdvapplyFileview.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepayCgapplyFile_result.class, metaDataMap);
    }

    public queryRepayCgapplyFile_result() {
    }

    public queryRepayCgapplyFile_result(
      List<RegAdvapplyFileview> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepayCgapplyFile_result(queryRepayCgapplyFile_result other) {
      if (other.isSetSuccess()) {
        List<RegAdvapplyFileview> __this__success = new ArrayList<RegAdvapplyFileview>(other.success.size());
        for (RegAdvapplyFileview other_element : other.success) {
          __this__success.add(new RegAdvapplyFileview(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRepayCgapplyFile_result deepCopy() {
      return new queryRepayCgapplyFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RegAdvapplyFileview> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RegAdvapplyFileview elem) {
      if (this.success == null) {
        this.success = new ArrayList<RegAdvapplyFileview>();
      }
      this.success.add(elem);
    }

    public List<RegAdvapplyFileview> getSuccess() {
      return this.success;
    }

    public queryRepayCgapplyFile_result setSuccess(List<RegAdvapplyFileview> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRepayCgapplyFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RegAdvapplyFileview>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepayCgapplyFile_result)
        return this.equals((queryRepayCgapplyFile_result)that);
      return false;
    }

    public boolean equals(queryRepayCgapplyFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepayCgapplyFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepayCgapplyFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepayCgapplyFile_resultStandardSchemeFactory implements SchemeFactory {
      public queryRepayCgapplyFile_resultStandardScheme getScheme() {
        return new queryRepayCgapplyFile_resultStandardScheme();
      }
    }

    private static class queryRepayCgapplyFile_resultStandardScheme extends StandardScheme<queryRepayCgapplyFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepayCgapplyFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<RegAdvapplyFileview>(_list192.size);
                  RegAdvapplyFileview _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new RegAdvapplyFileview();
                    _elem193.read(iprot);
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepayCgapplyFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RegAdvapplyFileview _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepayCgapplyFile_resultTupleSchemeFactory implements SchemeFactory {
      public queryRepayCgapplyFile_resultTupleScheme getScheme() {
        return new queryRepayCgapplyFile_resultTupleScheme();
      }
    }

    private static class queryRepayCgapplyFile_resultTupleScheme extends TupleScheme<queryRepayCgapplyFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepayCgapplyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RegAdvapplyFileview _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepayCgapplyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RegAdvapplyFileview>(_list197.size);
            RegAdvapplyFileview _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new RegAdvapplyFileview();
              _elem198.read(iprot);
              struct.success.add(_elem198);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryRepayCgapplyFileCount_args implements org.apache.thrift.TBase<queryRepayCgapplyFileCount_args, queryRepayCgapplyFileCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepayCgapplyFileCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepayCgapplyFileCount_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepayCgapplyFileCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepayCgapplyFileCount_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepayCgapplyFileCount_args.class, metaDataMap);
    }

    public queryRepayCgapplyFileCount_args() {
    }

    public queryRepayCgapplyFileCount_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepayCgapplyFileCount_args(queryRepayCgapplyFileCount_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public queryRepayCgapplyFileCount_args deepCopy() {
      return new queryRepayCgapplyFileCount_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public queryRepayCgapplyFileCount_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepayCgapplyFileCount_args)
        return this.equals((queryRepayCgapplyFileCount_args)that);
      return false;
    }

    public boolean equals(queryRepayCgapplyFileCount_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepayCgapplyFileCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepayCgapplyFileCount_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepayCgapplyFileCount_argsStandardSchemeFactory implements SchemeFactory {
      public queryRepayCgapplyFileCount_argsStandardScheme getScheme() {
        return new queryRepayCgapplyFileCount_argsStandardScheme();
      }
    }

    private static class queryRepayCgapplyFileCount_argsStandardScheme extends StandardScheme<queryRepayCgapplyFileCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepayCgapplyFileCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepayCgapplyFileCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepayCgapplyFileCount_argsTupleSchemeFactory implements SchemeFactory {
      public queryRepayCgapplyFileCount_argsTupleScheme getScheme() {
        return new queryRepayCgapplyFileCount_argsTupleScheme();
      }
    }

    private static class queryRepayCgapplyFileCount_argsTupleScheme extends TupleScheme<queryRepayCgapplyFileCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepayCgapplyFileCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepayCgapplyFileCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class queryRepayCgapplyFileCount_result implements org.apache.thrift.TBase<queryRepayCgapplyFileCount_result, queryRepayCgapplyFileCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepayCgapplyFileCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepayCgapplyFileCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepayCgapplyFileCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepayCgapplyFileCount_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepayCgapplyFileCount_result.class, metaDataMap);
    }

    public queryRepayCgapplyFileCount_result() {
    }

    public queryRepayCgapplyFileCount_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepayCgapplyFileCount_result(queryRepayCgapplyFileCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryRepayCgapplyFileCount_result deepCopy() {
      return new queryRepayCgapplyFileCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryRepayCgapplyFileCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryRepayCgapplyFileCount_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepayCgapplyFileCount_result)
        return this.equals((queryRepayCgapplyFileCount_result)that);
      return false;
    }

    public boolean equals(queryRepayCgapplyFileCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepayCgapplyFileCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepayCgapplyFileCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepayCgapplyFileCount_resultStandardSchemeFactory implements SchemeFactory {
      public queryRepayCgapplyFileCount_resultStandardScheme getScheme() {
        return new queryRepayCgapplyFileCount_resultStandardScheme();
      }
    }

    private static class queryRepayCgapplyFileCount_resultStandardScheme extends StandardScheme<queryRepayCgapplyFileCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepayCgapplyFileCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepayCgapplyFileCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepayCgapplyFileCount_resultTupleSchemeFactory implements SchemeFactory {
      public queryRepayCgapplyFileCount_resultTupleScheme getScheme() {
        return new queryRepayCgapplyFileCount_resultTupleScheme();
      }
    }

    private static class queryRepayCgapplyFileCount_resultTupleScheme extends TupleScheme<queryRepayCgapplyFileCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepayCgapplyFileCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepayCgapplyFileCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class selectLoanInterestDetailbyProces_args implements org.apache.thrift.TBase<selectLoanInterestDetailbyProces_args, selectLoanInterestDetailbyProces_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanInterestDetailbyProces_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanInterestDetailbyProces_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanInterestDetailbyProces_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanInterestDetailbyProces_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanInterestDetailbyProces_args.class, metaDataMap);
    }

    public selectLoanInterestDetailbyProces_args() {
    }

    public selectLoanInterestDetailbyProces_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanInterestDetailbyProces_args(selectLoanInterestDetailbyProces_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public selectLoanInterestDetailbyProces_args deepCopy() {
      return new selectLoanInterestDetailbyProces_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public selectLoanInterestDetailbyProces_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanInterestDetailbyProces_args)
        return this.equals((selectLoanInterestDetailbyProces_args)that);
      return false;
    }

    public boolean equals(selectLoanInterestDetailbyProces_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanInterestDetailbyProces_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanInterestDetailbyProces_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanInterestDetailbyProces_argsStandardSchemeFactory implements SchemeFactory {
      public selectLoanInterestDetailbyProces_argsStandardScheme getScheme() {
        return new selectLoanInterestDetailbyProces_argsStandardScheme();
      }
    }

    private static class selectLoanInterestDetailbyProces_argsStandardScheme extends StandardScheme<selectLoanInterestDetailbyProces_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanInterestDetailbyProces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanInterestDetailbyProces_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanInterestDetailbyProces_argsTupleSchemeFactory implements SchemeFactory {
      public selectLoanInterestDetailbyProces_argsTupleScheme getScheme() {
        return new selectLoanInterestDetailbyProces_argsTupleScheme();
      }
    }

    private static class selectLoanInterestDetailbyProces_argsTupleScheme extends TupleScheme<selectLoanInterestDetailbyProces_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanInterestDetailbyProces_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanInterestDetailbyProces_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class selectLoanInterestDetailbyProces_result implements org.apache.thrift.TBase<selectLoanInterestDetailbyProces_result, selectLoanInterestDetailbyProces_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanInterestDetailbyProces_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanInterestDetailbyProces_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanInterestDetailbyProces_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanInterestDetailbyProces_resultTupleSchemeFactory());
    }

    public List<RepayCgInterestView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanInterestDetailbyProces_result.class, metaDataMap);
    }

    public selectLoanInterestDetailbyProces_result() {
    }

    public selectLoanInterestDetailbyProces_result(
      List<RepayCgInterestView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanInterestDetailbyProces_result(selectLoanInterestDetailbyProces_result other) {
      if (other.isSetSuccess()) {
        List<RepayCgInterestView> __this__success = new ArrayList<RepayCgInterestView>(other.success.size());
        for (RepayCgInterestView other_element : other.success) {
          __this__success.add(new RepayCgInterestView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public selectLoanInterestDetailbyProces_result deepCopy() {
      return new selectLoanInterestDetailbyProces_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepayCgInterestView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepayCgInterestView elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepayCgInterestView>();
      }
      this.success.add(elem);
    }

    public List<RepayCgInterestView> getSuccess() {
      return this.success;
    }

    public selectLoanInterestDetailbyProces_result setSuccess(List<RepayCgInterestView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public selectLoanInterestDetailbyProces_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepayCgInterestView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanInterestDetailbyProces_result)
        return this.equals((selectLoanInterestDetailbyProces_result)that);
      return false;
    }

    public boolean equals(selectLoanInterestDetailbyProces_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanInterestDetailbyProces_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanInterestDetailbyProces_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanInterestDetailbyProces_resultStandardSchemeFactory implements SchemeFactory {
      public selectLoanInterestDetailbyProces_resultStandardScheme getScheme() {
        return new selectLoanInterestDetailbyProces_resultStandardScheme();
      }
    }

    private static class selectLoanInterestDetailbyProces_resultStandardScheme extends StandardScheme<selectLoanInterestDetailbyProces_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanInterestDetailbyProces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.success = new ArrayList<RepayCgInterestView>(_list200.size);
                  RepayCgInterestView _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = new RepayCgInterestView();
                    _elem201.read(iprot);
                    struct.success.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanInterestDetailbyProces_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepayCgInterestView _iter203 : struct.success)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanInterestDetailbyProces_resultTupleSchemeFactory implements SchemeFactory {
      public selectLoanInterestDetailbyProces_resultTupleScheme getScheme() {
        return new selectLoanInterestDetailbyProces_resultTupleScheme();
      }
    }

    private static class selectLoanInterestDetailbyProces_resultTupleScheme extends TupleScheme<selectLoanInterestDetailbyProces_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanInterestDetailbyProces_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepayCgInterestView _iter204 : struct.success)
            {
              _iter204.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanInterestDetailbyProces_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepayCgInterestView>(_list205.size);
            RepayCgInterestView _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new RepayCgInterestView();
              _elem206.read(iprot);
              struct.success.add(_elem206);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryLoanRes_args implements org.apache.thrift.TBase<queryLoanRes_args, queryLoanRes_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryLoanRes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryLoanRes_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryLoanRes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryLoanRes_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryLoanRes_args.class, metaDataMap);
    }

    public queryLoanRes_args() {
    }

    public queryLoanRes_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryLoanRes_args(queryLoanRes_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public queryLoanRes_args deepCopy() {
      return new queryLoanRes_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public queryLoanRes_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryLoanRes_args)
        return this.equals((queryLoanRes_args)that);
      return false;
    }

    public boolean equals(queryLoanRes_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryLoanRes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryLoanRes_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryLoanRes_argsStandardSchemeFactory implements SchemeFactory {
      public queryLoanRes_argsStandardScheme getScheme() {
        return new queryLoanRes_argsStandardScheme();
      }
    }

    private static class queryLoanRes_argsStandardScheme extends StandardScheme<queryLoanRes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryLoanRes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryLoanRes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryLoanRes_argsTupleSchemeFactory implements SchemeFactory {
      public queryLoanRes_argsTupleScheme getScheme() {
        return new queryLoanRes_argsTupleScheme();
      }
    }

    private static class queryLoanRes_argsTupleScheme extends TupleScheme<queryLoanRes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryLoanRes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryLoanRes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class queryLoanRes_result implements org.apache.thrift.TBase<queryLoanRes_result, queryLoanRes_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryLoanRes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryLoanRes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryLoanRes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryLoanRes_resultTupleSchemeFactory());
    }

    public List<RepayCgInterestView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryLoanRes_result.class, metaDataMap);
    }

    public queryLoanRes_result() {
    }

    public queryLoanRes_result(
      List<RepayCgInterestView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryLoanRes_result(queryLoanRes_result other) {
      if (other.isSetSuccess()) {
        List<RepayCgInterestView> __this__success = new ArrayList<RepayCgInterestView>(other.success.size());
        for (RepayCgInterestView other_element : other.success) {
          __this__success.add(new RepayCgInterestView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryLoanRes_result deepCopy() {
      return new queryLoanRes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepayCgInterestView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepayCgInterestView elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepayCgInterestView>();
      }
      this.success.add(elem);
    }

    public List<RepayCgInterestView> getSuccess() {
      return this.success;
    }

    public queryLoanRes_result setSuccess(List<RepayCgInterestView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryLoanRes_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepayCgInterestView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryLoanRes_result)
        return this.equals((queryLoanRes_result)that);
      return false;
    }

    public boolean equals(queryLoanRes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryLoanRes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryLoanRes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryLoanRes_resultStandardSchemeFactory implements SchemeFactory {
      public queryLoanRes_resultStandardScheme getScheme() {
        return new queryLoanRes_resultStandardScheme();
      }
    }

    private static class queryLoanRes_resultStandardScheme extends StandardScheme<queryLoanRes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryLoanRes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new ArrayList<RepayCgInterestView>(_list208.size);
                  RepayCgInterestView _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new RepayCgInterestView();
                    _elem209.read(iprot);
                    struct.success.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryLoanRes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepayCgInterestView _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryLoanRes_resultTupleSchemeFactory implements SchemeFactory {
      public queryLoanRes_resultTupleScheme getScheme() {
        return new queryLoanRes_resultTupleScheme();
      }
    }

    private static class queryLoanRes_resultTupleScheme extends TupleScheme<queryLoanRes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryLoanRes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepayCgInterestView _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryLoanRes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepayCgInterestView>(_list213.size);
            RepayCgInterestView _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new RepayCgInterestView();
              _elem214.read(iprot);
              struct.success.add(_elem214);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class selectLoanRequestInterestDetailbyProces_args implements org.apache.thrift.TBase<selectLoanRequestInterestDetailbyProces_args, selectLoanRequestInterestDetailbyProces_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanRequestInterestDetailbyProces_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanRequestInterestDetailbyProces_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanRequestInterestDetailbyProces_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanRequestInterestDetailbyProces_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanRequestInterestDetailbyProces_args.class, metaDataMap);
    }

    public selectLoanRequestInterestDetailbyProces_args() {
    }

    public selectLoanRequestInterestDetailbyProces_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanRequestInterestDetailbyProces_args(selectLoanRequestInterestDetailbyProces_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public selectLoanRequestInterestDetailbyProces_args deepCopy() {
      return new selectLoanRequestInterestDetailbyProces_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public selectLoanRequestInterestDetailbyProces_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanRequestInterestDetailbyProces_args)
        return this.equals((selectLoanRequestInterestDetailbyProces_args)that);
      return false;
    }

    public boolean equals(selectLoanRequestInterestDetailbyProces_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanRequestInterestDetailbyProces_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanRequestInterestDetailbyProces_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanRequestInterestDetailbyProces_argsStandardSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetailbyProces_argsStandardScheme getScheme() {
        return new selectLoanRequestInterestDetailbyProces_argsStandardScheme();
      }
    }

    private static class selectLoanRequestInterestDetailbyProces_argsStandardScheme extends StandardScheme<selectLoanRequestInterestDetailbyProces_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanRequestInterestDetailbyProces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanRequestInterestDetailbyProces_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanRequestInterestDetailbyProces_argsTupleSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetailbyProces_argsTupleScheme getScheme() {
        return new selectLoanRequestInterestDetailbyProces_argsTupleScheme();
      }
    }

    private static class selectLoanRequestInterestDetailbyProces_argsTupleScheme extends TupleScheme<selectLoanRequestInterestDetailbyProces_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetailbyProces_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetailbyProces_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class selectLoanRequestInterestDetailbyProces_result implements org.apache.thrift.TBase<selectLoanRequestInterestDetailbyProces_result, selectLoanRequestInterestDetailbyProces_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanRequestInterestDetailbyProces_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanRequestInterestDetailbyProces_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanRequestInterestDetailbyProces_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanRequestInterestDetailbyProces_resultTupleSchemeFactory());
    }

    public List<RepayCgInterestView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanRequestInterestDetailbyProces_result.class, metaDataMap);
    }

    public selectLoanRequestInterestDetailbyProces_result() {
    }

    public selectLoanRequestInterestDetailbyProces_result(
      List<RepayCgInterestView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanRequestInterestDetailbyProces_result(selectLoanRequestInterestDetailbyProces_result other) {
      if (other.isSetSuccess()) {
        List<RepayCgInterestView> __this__success = new ArrayList<RepayCgInterestView>(other.success.size());
        for (RepayCgInterestView other_element : other.success) {
          __this__success.add(new RepayCgInterestView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public selectLoanRequestInterestDetailbyProces_result deepCopy() {
      return new selectLoanRequestInterestDetailbyProces_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepayCgInterestView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepayCgInterestView elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepayCgInterestView>();
      }
      this.success.add(elem);
    }

    public List<RepayCgInterestView> getSuccess() {
      return this.success;
    }

    public selectLoanRequestInterestDetailbyProces_result setSuccess(List<RepayCgInterestView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public selectLoanRequestInterestDetailbyProces_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepayCgInterestView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanRequestInterestDetailbyProces_result)
        return this.equals((selectLoanRequestInterestDetailbyProces_result)that);
      return false;
    }

    public boolean equals(selectLoanRequestInterestDetailbyProces_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanRequestInterestDetailbyProces_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanRequestInterestDetailbyProces_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanRequestInterestDetailbyProces_resultStandardSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetailbyProces_resultStandardScheme getScheme() {
        return new selectLoanRequestInterestDetailbyProces_resultStandardScheme();
      }
    }

    private static class selectLoanRequestInterestDetailbyProces_resultStandardScheme extends StandardScheme<selectLoanRequestInterestDetailbyProces_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanRequestInterestDetailbyProces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<RepayCgInterestView>(_list216.size);
                  RepayCgInterestView _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new RepayCgInterestView();
                    _elem217.read(iprot);
                    struct.success.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanRequestInterestDetailbyProces_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepayCgInterestView _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanRequestInterestDetailbyProces_resultTupleSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetailbyProces_resultTupleScheme getScheme() {
        return new selectLoanRequestInterestDetailbyProces_resultTupleScheme();
      }
    }

    private static class selectLoanRequestInterestDetailbyProces_resultTupleScheme extends TupleScheme<selectLoanRequestInterestDetailbyProces_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetailbyProces_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepayCgInterestView _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetailbyProces_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepayCgInterestView>(_list221.size);
            RepayCgInterestView _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new RepayCgInterestView();
              _elem222.read(iprot);
              struct.success.add(_elem222);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class selectLoanRequestInterestDetailbyProcesByStatus_args implements org.apache.thrift.TBase<selectLoanRequestInterestDetailbyProcesByStatus_args, selectLoanRequestInterestDetailbyProcesByStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanRequestInterestDetailbyProcesByStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanRequestInterestDetailbyProcesByStatus_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanRequestInterestDetailbyProcesByStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanRequestInterestDetailbyProcesByStatus_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanRequestInterestDetailbyProcesByStatus_args.class, metaDataMap);
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_args() {
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanRequestInterestDetailbyProcesByStatus_args(selectLoanRequestInterestDetailbyProcesByStatus_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_args deepCopy() {
      return new selectLoanRequestInterestDetailbyProcesByStatus_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanRequestInterestDetailbyProcesByStatus_args)
        return this.equals((selectLoanRequestInterestDetailbyProcesByStatus_args)that);
      return false;
    }

    public boolean equals(selectLoanRequestInterestDetailbyProcesByStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanRequestInterestDetailbyProcesByStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanRequestInterestDetailbyProcesByStatus_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanRequestInterestDetailbyProcesByStatus_argsStandardSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetailbyProcesByStatus_argsStandardScheme getScheme() {
        return new selectLoanRequestInterestDetailbyProcesByStatus_argsStandardScheme();
      }
    }

    private static class selectLoanRequestInterestDetailbyProcesByStatus_argsStandardScheme extends StandardScheme<selectLoanRequestInterestDetailbyProcesByStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanRequestInterestDetailbyProcesByStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanRequestInterestDetailbyProcesByStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanRequestInterestDetailbyProcesByStatus_argsTupleSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetailbyProcesByStatus_argsTupleScheme getScheme() {
        return new selectLoanRequestInterestDetailbyProcesByStatus_argsTupleScheme();
      }
    }

    private static class selectLoanRequestInterestDetailbyProcesByStatus_argsTupleScheme extends TupleScheme<selectLoanRequestInterestDetailbyProcesByStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetailbyProcesByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetailbyProcesByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class selectLoanRequestInterestDetailbyProcesByStatus_result implements org.apache.thrift.TBase<selectLoanRequestInterestDetailbyProcesByStatus_result, selectLoanRequestInterestDetailbyProcesByStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectLoanRequestInterestDetailbyProcesByStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectLoanRequestInterestDetailbyProcesByStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectLoanRequestInterestDetailbyProcesByStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectLoanRequestInterestDetailbyProcesByStatus_resultTupleSchemeFactory());
    }

    public List<RepayCgInterestView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectLoanRequestInterestDetailbyProcesByStatus_result.class, metaDataMap);
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_result() {
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_result(
      List<RepayCgInterestView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectLoanRequestInterestDetailbyProcesByStatus_result(selectLoanRequestInterestDetailbyProcesByStatus_result other) {
      if (other.isSetSuccess()) {
        List<RepayCgInterestView> __this__success = new ArrayList<RepayCgInterestView>(other.success.size());
        for (RepayCgInterestView other_element : other.success) {
          __this__success.add(new RepayCgInterestView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_result deepCopy() {
      return new selectLoanRequestInterestDetailbyProcesByStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepayCgInterestView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepayCgInterestView elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepayCgInterestView>();
      }
      this.success.add(elem);
    }

    public List<RepayCgInterestView> getSuccess() {
      return this.success;
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_result setSuccess(List<RepayCgInterestView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public selectLoanRequestInterestDetailbyProcesByStatus_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepayCgInterestView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectLoanRequestInterestDetailbyProcesByStatus_result)
        return this.equals((selectLoanRequestInterestDetailbyProcesByStatus_result)that);
      return false;
    }

    public boolean equals(selectLoanRequestInterestDetailbyProcesByStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectLoanRequestInterestDetailbyProcesByStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectLoanRequestInterestDetailbyProcesByStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectLoanRequestInterestDetailbyProcesByStatus_resultStandardSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetailbyProcesByStatus_resultStandardScheme getScheme() {
        return new selectLoanRequestInterestDetailbyProcesByStatus_resultStandardScheme();
      }
    }

    private static class selectLoanRequestInterestDetailbyProcesByStatus_resultStandardScheme extends StandardScheme<selectLoanRequestInterestDetailbyProcesByStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectLoanRequestInterestDetailbyProcesByStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new ArrayList<RepayCgInterestView>(_list224.size);
                  RepayCgInterestView _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = new RepayCgInterestView();
                    _elem225.read(iprot);
                    struct.success.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectLoanRequestInterestDetailbyProcesByStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepayCgInterestView _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectLoanRequestInterestDetailbyProcesByStatus_resultTupleSchemeFactory implements SchemeFactory {
      public selectLoanRequestInterestDetailbyProcesByStatus_resultTupleScheme getScheme() {
        return new selectLoanRequestInterestDetailbyProcesByStatus_resultTupleScheme();
      }
    }

    private static class selectLoanRequestInterestDetailbyProcesByStatus_resultTupleScheme extends TupleScheme<selectLoanRequestInterestDetailbyProcesByStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetailbyProcesByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepayCgInterestView _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectLoanRequestInterestDetailbyProcesByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepayCgInterestView>(_list229.size);
            RepayCgInterestView _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = new RepayCgInterestView();
              _elem230.read(iprot);
              struct.success.add(_elem230);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class intRepayCgapplyInfoEnd_args implements org.apache.thrift.TBase<intRepayCgapplyInfoEnd_args, intRepayCgapplyInfoEnd_args._Fields>, java.io.Serializable, Cloneable, Comparable<intRepayCgapplyInfoEnd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("intRepayCgapplyInfoEnd_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new intRepayCgapplyInfoEnd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new intRepayCgapplyInfoEnd_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(intRepayCgapplyInfoEnd_args.class, metaDataMap);
    }

    public intRepayCgapplyInfoEnd_args() {
    }

    public intRepayCgapplyInfoEnd_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public intRepayCgapplyInfoEnd_args(intRepayCgapplyInfoEnd_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public intRepayCgapplyInfoEnd_args deepCopy() {
      return new intRepayCgapplyInfoEnd_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public intRepayCgapplyInfoEnd_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof intRepayCgapplyInfoEnd_args)
        return this.equals((intRepayCgapplyInfoEnd_args)that);
      return false;
    }

    public boolean equals(intRepayCgapplyInfoEnd_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(intRepayCgapplyInfoEnd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("intRepayCgapplyInfoEnd_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class intRepayCgapplyInfoEnd_argsStandardSchemeFactory implements SchemeFactory {
      public intRepayCgapplyInfoEnd_argsStandardScheme getScheme() {
        return new intRepayCgapplyInfoEnd_argsStandardScheme();
      }
    }

    private static class intRepayCgapplyInfoEnd_argsStandardScheme extends StandardScheme<intRepayCgapplyInfoEnd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, intRepayCgapplyInfoEnd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, intRepayCgapplyInfoEnd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class intRepayCgapplyInfoEnd_argsTupleSchemeFactory implements SchemeFactory {
      public intRepayCgapplyInfoEnd_argsTupleScheme getScheme() {
        return new intRepayCgapplyInfoEnd_argsTupleScheme();
      }
    }

    private static class intRepayCgapplyInfoEnd_argsTupleScheme extends TupleScheme<intRepayCgapplyInfoEnd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, intRepayCgapplyInfoEnd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, intRepayCgapplyInfoEnd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class intRepayCgapplyInfoEnd_result implements org.apache.thrift.TBase<intRepayCgapplyInfoEnd_result, intRepayCgapplyInfoEnd_result._Fields>, java.io.Serializable, Cloneable, Comparable<intRepayCgapplyInfoEnd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("intRepayCgapplyInfoEnd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new intRepayCgapplyInfoEnd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new intRepayCgapplyInfoEnd_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(intRepayCgapplyInfoEnd_result.class, metaDataMap);
    }

    public intRepayCgapplyInfoEnd_result() {
    }

    public intRepayCgapplyInfoEnd_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public intRepayCgapplyInfoEnd_result(intRepayCgapplyInfoEnd_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public intRepayCgapplyInfoEnd_result deepCopy() {
      return new intRepayCgapplyInfoEnd_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public intRepayCgapplyInfoEnd_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public intRepayCgapplyInfoEnd_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof intRepayCgapplyInfoEnd_result)
        return this.equals((intRepayCgapplyInfoEnd_result)that);
      return false;
    }

    public boolean equals(intRepayCgapplyInfoEnd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(intRepayCgapplyInfoEnd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("intRepayCgapplyInfoEnd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class intRepayCgapplyInfoEnd_resultStandardSchemeFactory implements SchemeFactory {
      public intRepayCgapplyInfoEnd_resultStandardScheme getScheme() {
        return new intRepayCgapplyInfoEnd_resultStandardScheme();
      }
    }

    private static class intRepayCgapplyInfoEnd_resultStandardScheme extends StandardScheme<intRepayCgapplyInfoEnd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, intRepayCgapplyInfoEnd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, intRepayCgapplyInfoEnd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class intRepayCgapplyInfoEnd_resultTupleSchemeFactory implements SchemeFactory {
      public intRepayCgapplyInfoEnd_resultTupleScheme getScheme() {
        return new intRepayCgapplyInfoEnd_resultTupleScheme();
      }
    }

    private static class intRepayCgapplyInfoEnd_resultTupleScheme extends TupleScheme<intRepayCgapplyInfoEnd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, intRepayCgapplyInfoEnd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, intRepayCgapplyInfoEnd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class changeReqstCg_args implements org.apache.thrift.TBase<changeReqstCg_args, changeReqstCg_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeReqstCg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeReqstCg_args");

    private static final org.apache.thrift.protocol.TField REQ_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reqStatus", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField INTEREST_CHG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("interestChgId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeReqstCg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeReqstCg_argsTupleSchemeFactory());
    }

    public int reqStatus; // required
    public int interestChgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_STATUS((short)1, "reqStatus"),
      INTEREST_CHG_ID((short)2, "interestChgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_STATUS
            return REQ_STATUS;
          case 2: // INTEREST_CHG_ID
            return INTEREST_CHG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQSTATUS_ISSET_ID = 0;
    private static final int __INTERESTCHGID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reqStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INTEREST_CHG_ID, new org.apache.thrift.meta_data.FieldMetaData("interestChgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeReqstCg_args.class, metaDataMap);
    }

    public changeReqstCg_args() {
    }

    public changeReqstCg_args(
      int reqStatus,
      int interestChgId)
    {
      this();
      this.reqStatus = reqStatus;
      setReqStatusIsSet(true);
      this.interestChgId = interestChgId;
      setInterestChgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeReqstCg_args(changeReqstCg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reqStatus = other.reqStatus;
      this.interestChgId = other.interestChgId;
    }

    public changeReqstCg_args deepCopy() {
      return new changeReqstCg_args(this);
    }

    @Override
    public void clear() {
      setReqStatusIsSet(false);
      this.reqStatus = 0;
      setInterestChgIdIsSet(false);
      this.interestChgId = 0;
    }

    public int getReqStatus() {
      return this.reqStatus;
    }

    public changeReqstCg_args setReqStatus(int reqStatus) {
      this.reqStatus = reqStatus;
      setReqStatusIsSet(true);
      return this;
    }

    public void unsetReqStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQSTATUS_ISSET_ID);
    }

    /** Returns true if field reqStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetReqStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __REQSTATUS_ISSET_ID);
    }

    public void setReqStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQSTATUS_ISSET_ID, value);
    }

    public int getInterestChgId() {
      return this.interestChgId;
    }

    public changeReqstCg_args setInterestChgId(int interestChgId) {
      this.interestChgId = interestChgId;
      setInterestChgIdIsSet(true);
      return this;
    }

    public void unsetInterestChgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID);
    }

    /** Returns true if field interestChgId is set (has been assigned a value) and false otherwise */
    public boolean isSetInterestChgId() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID);
    }

    public void setInterestChgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_STATUS:
        if (value == null) {
          unsetReqStatus();
        } else {
          setReqStatus((Integer)value);
        }
        break;

      case INTEREST_CHG_ID:
        if (value == null) {
          unsetInterestChgId();
        } else {
          setInterestChgId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_STATUS:
        return Integer.valueOf(getReqStatus());

      case INTEREST_CHG_ID:
        return Integer.valueOf(getInterestChgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_STATUS:
        return isSetReqStatus();
      case INTEREST_CHG_ID:
        return isSetInterestChgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeReqstCg_args)
        return this.equals((changeReqstCg_args)that);
      return false;
    }

    public boolean equals(changeReqstCg_args that) {
      if (that == null)
        return false;

      boolean this_present_reqStatus = true;
      boolean that_present_reqStatus = true;
      if (this_present_reqStatus || that_present_reqStatus) {
        if (!(this_present_reqStatus && that_present_reqStatus))
          return false;
        if (this.reqStatus != that.reqStatus)
          return false;
      }

      boolean this_present_interestChgId = true;
      boolean that_present_interestChgId = true;
      if (this_present_interestChgId || that_present_interestChgId) {
        if (!(this_present_interestChgId && that_present_interestChgId))
          return false;
        if (this.interestChgId != that.interestChgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqStatus = true;
      list.add(present_reqStatus);
      if (present_reqStatus)
        list.add(reqStatus);

      boolean present_interestChgId = true;
      list.add(present_interestChgId);
      if (present_interestChgId)
        list.add(interestChgId);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeReqstCg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqStatus()).compareTo(other.isSetReqStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqStatus, other.reqStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInterestChgId()).compareTo(other.isSetInterestChgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInterestChgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestChgId, other.interestChgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeReqstCg_args(");
      boolean first = true;

      sb.append("reqStatus:");
      sb.append(this.reqStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("interestChgId:");
      sb.append(this.interestChgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeReqstCg_argsStandardSchemeFactory implements SchemeFactory {
      public changeReqstCg_argsStandardScheme getScheme() {
        return new changeReqstCg_argsStandardScheme();
      }
    }

    private static class changeReqstCg_argsStandardScheme extends StandardScheme<changeReqstCg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeReqstCg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reqStatus = iprot.readI32();
                struct.setReqStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTEREST_CHG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.interestChgId = iprot.readI32();
                struct.setInterestChgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeReqstCg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQ_STATUS_FIELD_DESC);
        oprot.writeI32(struct.reqStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INTEREST_CHG_ID_FIELD_DESC);
        oprot.writeI32(struct.interestChgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeReqstCg_argsTupleSchemeFactory implements SchemeFactory {
      public changeReqstCg_argsTupleScheme getScheme() {
        return new changeReqstCg_argsTupleScheme();
      }
    }

    private static class changeReqstCg_argsTupleScheme extends TupleScheme<changeReqstCg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeReqstCg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqStatus()) {
          optionals.set(0);
        }
        if (struct.isSetInterestChgId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqStatus()) {
          oprot.writeI32(struct.reqStatus);
        }
        if (struct.isSetInterestChgId()) {
          oprot.writeI32(struct.interestChgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeReqstCg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqStatus = iprot.readI32();
          struct.setReqStatusIsSet(true);
        }
        if (incoming.get(1)) {
          struct.interestChgId = iprot.readI32();
          struct.setInterestChgIdIsSet(true);
        }
      }
    }

  }

  public static class changeReqstCg_result implements org.apache.thrift.TBase<changeReqstCg_result, changeReqstCg_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeReqstCg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeReqstCg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeReqstCg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeReqstCg_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeReqstCg_result.class, metaDataMap);
    }

    public changeReqstCg_result() {
    }

    public changeReqstCg_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeReqstCg_result(changeReqstCg_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public changeReqstCg_result deepCopy() {
      return new changeReqstCg_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public changeReqstCg_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public changeReqstCg_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeReqstCg_result)
        return this.equals((changeReqstCg_result)that);
      return false;
    }

    public boolean equals(changeReqstCg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeReqstCg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeReqstCg_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeReqstCg_resultStandardSchemeFactory implements SchemeFactory {
      public changeReqstCg_resultStandardScheme getScheme() {
        return new changeReqstCg_resultStandardScheme();
      }
    }

    private static class changeReqstCg_resultStandardScheme extends StandardScheme<changeReqstCg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeReqstCg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeReqstCg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeReqstCg_resultTupleSchemeFactory implements SchemeFactory {
      public changeReqstCg_resultTupleScheme getScheme() {
        return new changeReqstCg_resultTupleScheme();
      }
    }

    private static class changeReqstCg_resultTupleScheme extends TupleScheme<changeReqstCg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeReqstCg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeReqstCg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteProjectbyinterestChgId_args implements org.apache.thrift.TBase<deleteProjectbyinterestChgId_args, deleteProjectbyinterestChgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProjectbyinterestChgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProjectbyinterestChgId_args");

    private static final org.apache.thrift.protocol.TField INTEREST_CHG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("interestChgId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProjectbyinterestChgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProjectbyinterestChgId_argsTupleSchemeFactory());
    }

    public String interestChgId; // required
    public String projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTEREST_CHG_ID((short)1, "interestChgId"),
      PROJECT_ID((short)2, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTEREST_CHG_ID
            return INTEREST_CHG_ID;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTEREST_CHG_ID, new org.apache.thrift.meta_data.FieldMetaData("interestChgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProjectbyinterestChgId_args.class, metaDataMap);
    }

    public deleteProjectbyinterestChgId_args() {
    }

    public deleteProjectbyinterestChgId_args(
      String interestChgId,
      String projectId)
    {
      this();
      this.interestChgId = interestChgId;
      this.projectId = projectId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProjectbyinterestChgId_args(deleteProjectbyinterestChgId_args other) {
      if (other.isSetInterestChgId()) {
        this.interestChgId = other.interestChgId;
      }
      if (other.isSetProjectId()) {
        this.projectId = other.projectId;
      }
    }

    public deleteProjectbyinterestChgId_args deepCopy() {
      return new deleteProjectbyinterestChgId_args(this);
    }

    @Override
    public void clear() {
      this.interestChgId = null;
      this.projectId = null;
    }

    public String getInterestChgId() {
      return this.interestChgId;
    }

    public deleteProjectbyinterestChgId_args setInterestChgId(String interestChgId) {
      this.interestChgId = interestChgId;
      return this;
    }

    public void unsetInterestChgId() {
      this.interestChgId = null;
    }

    /** Returns true if field interestChgId is set (has been assigned a value) and false otherwise */
    public boolean isSetInterestChgId() {
      return this.interestChgId != null;
    }

    public void setInterestChgIdIsSet(boolean value) {
      if (!value) {
        this.interestChgId = null;
      }
    }

    public String getProjectId() {
      return this.projectId;
    }

    public deleteProjectbyinterestChgId_args setProjectId(String projectId) {
      this.projectId = projectId;
      return this;
    }

    public void unsetProjectId() {
      this.projectId = null;
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return this.projectId != null;
    }

    public void setProjectIdIsSet(boolean value) {
      if (!value) {
        this.projectId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTEREST_CHG_ID:
        if (value == null) {
          unsetInterestChgId();
        } else {
          setInterestChgId((String)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTEREST_CHG_ID:
        return getInterestChgId();

      case PROJECT_ID:
        return getProjectId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTEREST_CHG_ID:
        return isSetInterestChgId();
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProjectbyinterestChgId_args)
        return this.equals((deleteProjectbyinterestChgId_args)that);
      return false;
    }

    public boolean equals(deleteProjectbyinterestChgId_args that) {
      if (that == null)
        return false;

      boolean this_present_interestChgId = true && this.isSetInterestChgId();
      boolean that_present_interestChgId = true && that.isSetInterestChgId();
      if (this_present_interestChgId || that_present_interestChgId) {
        if (!(this_present_interestChgId && that_present_interestChgId))
          return false;
        if (!this.interestChgId.equals(that.interestChgId))
          return false;
      }

      boolean this_present_projectId = true && this.isSetProjectId();
      boolean that_present_projectId = true && that.isSetProjectId();
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (!this.projectId.equals(that.projectId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_interestChgId = true && (isSetInterestChgId());
      list.add(present_interestChgId);
      if (present_interestChgId)
        list.add(interestChgId);

      boolean present_projectId = true && (isSetProjectId());
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProjectbyinterestChgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInterestChgId()).compareTo(other.isSetInterestChgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInterestChgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestChgId, other.interestChgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProjectbyinterestChgId_args(");
      boolean first = true;

      sb.append("interestChgId:");
      if (this.interestChgId == null) {
        sb.append("null");
      } else {
        sb.append(this.interestChgId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      if (this.projectId == null) {
        sb.append("null");
      } else {
        sb.append(this.projectId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProjectbyinterestChgId_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProjectbyinterestChgId_argsStandardScheme getScheme() {
        return new deleteProjectbyinterestChgId_argsStandardScheme();
      }
    }

    private static class deleteProjectbyinterestChgId_argsStandardScheme extends StandardScheme<deleteProjectbyinterestChgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProjectbyinterestChgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTEREST_CHG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.interestChgId = iprot.readString();
                struct.setInterestChgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectId = iprot.readString();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProjectbyinterestChgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.interestChgId != null) {
          oprot.writeFieldBegin(INTEREST_CHG_ID_FIELD_DESC);
          oprot.writeString(struct.interestChgId);
          oprot.writeFieldEnd();
        }
        if (struct.projectId != null) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.projectId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProjectbyinterestChgId_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProjectbyinterestChgId_argsTupleScheme getScheme() {
        return new deleteProjectbyinterestChgId_argsTupleScheme();
      }
    }

    private static class deleteProjectbyinterestChgId_argsTupleScheme extends TupleScheme<deleteProjectbyinterestChgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyinterestChgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInterestChgId()) {
          optionals.set(0);
        }
        if (struct.isSetProjectId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInterestChgId()) {
          oprot.writeString(struct.interestChgId);
        }
        if (struct.isSetProjectId()) {
          oprot.writeString(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyinterestChgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.interestChgId = iprot.readString();
          struct.setInterestChgIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectId = iprot.readString();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class deleteProjectbyinterestChgId_result implements org.apache.thrift.TBase<deleteProjectbyinterestChgId_result, deleteProjectbyinterestChgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProjectbyinterestChgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProjectbyinterestChgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProjectbyinterestChgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProjectbyinterestChgId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProjectbyinterestChgId_result.class, metaDataMap);
    }

    public deleteProjectbyinterestChgId_result() {
    }

    public deleteProjectbyinterestChgId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProjectbyinterestChgId_result(deleteProjectbyinterestChgId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteProjectbyinterestChgId_result deepCopy() {
      return new deleteProjectbyinterestChgId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteProjectbyinterestChgId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteProjectbyinterestChgId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProjectbyinterestChgId_result)
        return this.equals((deleteProjectbyinterestChgId_result)that);
      return false;
    }

    public boolean equals(deleteProjectbyinterestChgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProjectbyinterestChgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProjectbyinterestChgId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProjectbyinterestChgId_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProjectbyinterestChgId_resultStandardScheme getScheme() {
        return new deleteProjectbyinterestChgId_resultStandardScheme();
      }
    }

    private static class deleteProjectbyinterestChgId_resultStandardScheme extends StandardScheme<deleteProjectbyinterestChgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProjectbyinterestChgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProjectbyinterestChgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProjectbyinterestChgId_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProjectbyinterestChgId_resultTupleScheme getScheme() {
        return new deleteProjectbyinterestChgId_resultTupleScheme();
      }
    }

    private static class deleteProjectbyinterestChgId_resultTupleScheme extends TupleScheme<deleteProjectbyinterestChgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyinterestChgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProjectbyinterestChgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class checkpreRepayByProjectId_args implements org.apache.thrift.TBase<checkpreRepayByProjectId_args, checkpreRepayByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkpreRepayByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkpreRepayByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkpreRepayByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkpreRepayByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkpreRepayByProjectId_args.class, metaDataMap);
    }

    public checkpreRepayByProjectId_args() {
    }

    public checkpreRepayByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkpreRepayByProjectId_args(checkpreRepayByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public checkpreRepayByProjectId_args deepCopy() {
      return new checkpreRepayByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public checkpreRepayByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkpreRepayByProjectId_args)
        return this.equals((checkpreRepayByProjectId_args)that);
      return false;
    }

    public boolean equals(checkpreRepayByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkpreRepayByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkpreRepayByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkpreRepayByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public checkpreRepayByProjectId_argsStandardScheme getScheme() {
        return new checkpreRepayByProjectId_argsStandardScheme();
      }
    }

    private static class checkpreRepayByProjectId_argsStandardScheme extends StandardScheme<checkpreRepayByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkpreRepayByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkpreRepayByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkpreRepayByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public checkpreRepayByProjectId_argsTupleScheme getScheme() {
        return new checkpreRepayByProjectId_argsTupleScheme();
      }
    }

    private static class checkpreRepayByProjectId_argsTupleScheme extends TupleScheme<checkpreRepayByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkpreRepayByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkpreRepayByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class checkpreRepayByProjectId_result implements org.apache.thrift.TBase<checkpreRepayByProjectId_result, checkpreRepayByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkpreRepayByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkpreRepayByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkpreRepayByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkpreRepayByProjectId_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkpreRepayByProjectId_result.class, metaDataMap);
    }

    public checkpreRepayByProjectId_result() {
    }

    public checkpreRepayByProjectId_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkpreRepayByProjectId_result(checkpreRepayByProjectId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public checkpreRepayByProjectId_result deepCopy() {
      return new checkpreRepayByProjectId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkpreRepayByProjectId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public checkpreRepayByProjectId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkpreRepayByProjectId_result)
        return this.equals((checkpreRepayByProjectId_result)that);
      return false;
    }

    public boolean equals(checkpreRepayByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkpreRepayByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkpreRepayByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkpreRepayByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public checkpreRepayByProjectId_resultStandardScheme getScheme() {
        return new checkpreRepayByProjectId_resultStandardScheme();
      }
    }

    private static class checkpreRepayByProjectId_resultStandardScheme extends StandardScheme<checkpreRepayByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkpreRepayByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkpreRepayByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkpreRepayByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public checkpreRepayByProjectId_resultTupleScheme getScheme() {
        return new checkpreRepayByProjectId_resultTupleScheme();
      }
    }

    private static class checkpreRepayByProjectId_resultTupleScheme extends TupleScheme<checkpreRepayByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkpreRepayByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkpreRepayByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class makeCgApplyFile_args implements org.apache.thrift.TBase<makeCgApplyFile_args, makeCgApplyFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeCgApplyFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeCgApplyFile_args");

    private static final org.apache.thrift.protocol.TField INTEREST_CHG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("interestChgId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeCgApplyFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeCgApplyFile_argsTupleSchemeFactory());
    }

    public int interestChgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTEREST_CHG_ID((short)1, "interestChgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTEREST_CHG_ID
            return INTEREST_CHG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTERESTCHGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTEREST_CHG_ID, new org.apache.thrift.meta_data.FieldMetaData("interestChgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeCgApplyFile_args.class, metaDataMap);
    }

    public makeCgApplyFile_args() {
    }

    public makeCgApplyFile_args(
      int interestChgId)
    {
      this();
      this.interestChgId = interestChgId;
      setInterestChgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeCgApplyFile_args(makeCgApplyFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.interestChgId = other.interestChgId;
    }

    public makeCgApplyFile_args deepCopy() {
      return new makeCgApplyFile_args(this);
    }

    @Override
    public void clear() {
      setInterestChgIdIsSet(false);
      this.interestChgId = 0;
    }

    public int getInterestChgId() {
      return this.interestChgId;
    }

    public makeCgApplyFile_args setInterestChgId(int interestChgId) {
      this.interestChgId = interestChgId;
      setInterestChgIdIsSet(true);
      return this;
    }

    public void unsetInterestChgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID);
    }

    /** Returns true if field interestChgId is set (has been assigned a value) and false otherwise */
    public boolean isSetInterestChgId() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID);
    }

    public void setInterestChgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERESTCHGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTEREST_CHG_ID:
        if (value == null) {
          unsetInterestChgId();
        } else {
          setInterestChgId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTEREST_CHG_ID:
        return Integer.valueOf(getInterestChgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTEREST_CHG_ID:
        return isSetInterestChgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeCgApplyFile_args)
        return this.equals((makeCgApplyFile_args)that);
      return false;
    }

    public boolean equals(makeCgApplyFile_args that) {
      if (that == null)
        return false;

      boolean this_present_interestChgId = true;
      boolean that_present_interestChgId = true;
      if (this_present_interestChgId || that_present_interestChgId) {
        if (!(this_present_interestChgId && that_present_interestChgId))
          return false;
        if (this.interestChgId != that.interestChgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_interestChgId = true;
      list.add(present_interestChgId);
      if (present_interestChgId)
        list.add(interestChgId);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeCgApplyFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInterestChgId()).compareTo(other.isSetInterestChgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInterestChgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestChgId, other.interestChgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeCgApplyFile_args(");
      boolean first = true;

      sb.append("interestChgId:");
      sb.append(this.interestChgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeCgApplyFile_argsStandardSchemeFactory implements SchemeFactory {
      public makeCgApplyFile_argsStandardScheme getScheme() {
        return new makeCgApplyFile_argsStandardScheme();
      }
    }

    private static class makeCgApplyFile_argsStandardScheme extends StandardScheme<makeCgApplyFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeCgApplyFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTEREST_CHG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.interestChgId = iprot.readI32();
                struct.setInterestChgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeCgApplyFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INTEREST_CHG_ID_FIELD_DESC);
        oprot.writeI32(struct.interestChgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeCgApplyFile_argsTupleSchemeFactory implements SchemeFactory {
      public makeCgApplyFile_argsTupleScheme getScheme() {
        return new makeCgApplyFile_argsTupleScheme();
      }
    }

    private static class makeCgApplyFile_argsTupleScheme extends TupleScheme<makeCgApplyFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeCgApplyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInterestChgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInterestChgId()) {
          oprot.writeI32(struct.interestChgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeCgApplyFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.interestChgId = iprot.readI32();
          struct.setInterestChgIdIsSet(true);
        }
      }
    }

  }

  public static class makeCgApplyFile_result implements org.apache.thrift.TBase<makeCgApplyFile_result, makeCgApplyFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<makeCgApplyFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeCgApplyFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeCgApplyFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeCgApplyFile_resultTupleSchemeFactory());
    }

    public InterestChgApplyView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterestChgApplyView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeCgApplyFile_result.class, metaDataMap);
    }

    public makeCgApplyFile_result() {
    }

    public makeCgApplyFile_result(
      InterestChgApplyView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeCgApplyFile_result(makeCgApplyFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new InterestChgApplyView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public makeCgApplyFile_result deepCopy() {
      return new makeCgApplyFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public InterestChgApplyView getSuccess() {
      return this.success;
    }

    public makeCgApplyFile_result setSuccess(InterestChgApplyView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public makeCgApplyFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InterestChgApplyView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeCgApplyFile_result)
        return this.equals((makeCgApplyFile_result)that);
      return false;
    }

    public boolean equals(makeCgApplyFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(makeCgApplyFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeCgApplyFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeCgApplyFile_resultStandardSchemeFactory implements SchemeFactory {
      public makeCgApplyFile_resultStandardScheme getScheme() {
        return new makeCgApplyFile_resultStandardScheme();
      }
    }

    private static class makeCgApplyFile_resultStandardScheme extends StandardScheme<makeCgApplyFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeCgApplyFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InterestChgApplyView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeCgApplyFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeCgApplyFile_resultTupleSchemeFactory implements SchemeFactory {
      public makeCgApplyFile_resultTupleScheme getScheme() {
        return new makeCgApplyFile_resultTupleScheme();
      }
    }

    private static class makeCgApplyFile_resultTupleScheme extends TupleScheme<makeCgApplyFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeCgApplyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeCgApplyFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InterestChgApplyView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryInterestChgId_args implements org.apache.thrift.TBase<queryInterestChgId_args, queryInterestChgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryInterestChgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryInterestChgId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryInterestChgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryInterestChgId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryInterestChgId_args.class, metaDataMap);
    }

    public queryInterestChgId_args() {
    }

    public queryInterestChgId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryInterestChgId_args(queryInterestChgId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public queryInterestChgId_args deepCopy() {
      return new queryInterestChgId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public queryInterestChgId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryInterestChgId_args)
        return this.equals((queryInterestChgId_args)that);
      return false;
    }

    public boolean equals(queryInterestChgId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryInterestChgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryInterestChgId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryInterestChgId_argsStandardSchemeFactory implements SchemeFactory {
      public queryInterestChgId_argsStandardScheme getScheme() {
        return new queryInterestChgId_argsStandardScheme();
      }
    }

    private static class queryInterestChgId_argsStandardScheme extends StandardScheme<queryInterestChgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryInterestChgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryInterestChgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryInterestChgId_argsTupleSchemeFactory implements SchemeFactory {
      public queryInterestChgId_argsTupleScheme getScheme() {
        return new queryInterestChgId_argsTupleScheme();
      }
    }

    private static class queryInterestChgId_argsTupleScheme extends TupleScheme<queryInterestChgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryInterestChgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryInterestChgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class queryInterestChgId_result implements org.apache.thrift.TBase<queryInterestChgId_result, queryInterestChgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryInterestChgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryInterestChgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryInterestChgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryInterestChgId_resultTupleSchemeFactory());
    }

    public InterestChgApplyView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterestChgApplyView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryInterestChgId_result.class, metaDataMap);
    }

    public queryInterestChgId_result() {
    }

    public queryInterestChgId_result(
      InterestChgApplyView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryInterestChgId_result(queryInterestChgId_result other) {
      if (other.isSetSuccess()) {
        this.success = new InterestChgApplyView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryInterestChgId_result deepCopy() {
      return new queryInterestChgId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public InterestChgApplyView getSuccess() {
      return this.success;
    }

    public queryInterestChgId_result setSuccess(InterestChgApplyView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryInterestChgId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InterestChgApplyView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryInterestChgId_result)
        return this.equals((queryInterestChgId_result)that);
      return false;
    }

    public boolean equals(queryInterestChgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryInterestChgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryInterestChgId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryInterestChgId_resultStandardSchemeFactory implements SchemeFactory {
      public queryInterestChgId_resultStandardScheme getScheme() {
        return new queryInterestChgId_resultStandardScheme();
      }
    }

    private static class queryInterestChgId_resultStandardScheme extends StandardScheme<queryInterestChgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryInterestChgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InterestChgApplyView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryInterestChgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryInterestChgId_resultTupleSchemeFactory implements SchemeFactory {
      public queryInterestChgId_resultTupleScheme getScheme() {
        return new queryInterestChgId_resultTupleScheme();
      }
    }

    private static class queryInterestChgId_resultTupleScheme extends TupleScheme<queryInterestChgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryInterestChgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryInterestChgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InterestChgApplyView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class saveProcedures_args implements org.apache.thrift.TBase<saveProcedures_args, saveProcedures_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveProcedures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveProcedures_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveProcedures_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveProcedures_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveProcedures_args.class, metaDataMap);
    }

    public saveProcedures_args() {
    }

    public saveProcedures_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveProcedures_args(saveProcedures_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public saveProcedures_args deepCopy() {
      return new saveProcedures_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public saveProcedures_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveProcedures_args)
        return this.equals((saveProcedures_args)that);
      return false;
    }

    public boolean equals(saveProcedures_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveProcedures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveProcedures_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveProcedures_argsStandardSchemeFactory implements SchemeFactory {
      public saveProcedures_argsStandardScheme getScheme() {
        return new saveProcedures_argsStandardScheme();
      }
    }

    private static class saveProcedures_argsStandardScheme extends StandardScheme<saveProcedures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveProcedures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveProcedures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveProcedures_argsTupleSchemeFactory implements SchemeFactory {
      public saveProcedures_argsTupleScheme getScheme() {
        return new saveProcedures_argsTupleScheme();
      }
    }

    private static class saveProcedures_argsTupleScheme extends TupleScheme<saveProcedures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveProcedures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveProcedures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class saveProcedures_result implements org.apache.thrift.TBase<saveProcedures_result, saveProcedures_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveProcedures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveProcedures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveProcedures_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveProcedures_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveProcedures_result.class, metaDataMap);
    }

    public saveProcedures_result() {
    }

    public saveProcedures_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveProcedures_result(saveProcedures_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveProcedures_result deepCopy() {
      return new saveProcedures_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveProcedures_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveProcedures_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveProcedures_result)
        return this.equals((saveProcedures_result)that);
      return false;
    }

    public boolean equals(saveProcedures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveProcedures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveProcedures_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveProcedures_resultStandardSchemeFactory implements SchemeFactory {
      public saveProcedures_resultStandardScheme getScheme() {
        return new saveProcedures_resultStandardScheme();
      }
    }

    private static class saveProcedures_resultStandardScheme extends StandardScheme<saveProcedures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveProcedures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveProcedures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveProcedures_resultTupleSchemeFactory implements SchemeFactory {
      public saveProcedures_resultTupleScheme getScheme() {
        return new saveProcedures_resultTupleScheme();
      }
    }

    private static class saveProcedures_resultTupleScheme extends TupleScheme<saveProcedures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveProcedures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveProcedures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getRepayCgInterestByPid_args implements org.apache.thrift.TBase<getRepayCgInterestByPid_args, getRepayCgInterestByPid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepayCgInterestByPid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepayCgInterestByPid_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepayCgInterestByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepayCgInterestByPid_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepayCgInterestByPid_args.class, metaDataMap);
    }

    public getRepayCgInterestByPid_args() {
    }

    public getRepayCgInterestByPid_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepayCgInterestByPid_args(getRepayCgInterestByPid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getRepayCgInterestByPid_args deepCopy() {
      return new getRepayCgInterestByPid_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getRepayCgInterestByPid_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepayCgInterestByPid_args)
        return this.equals((getRepayCgInterestByPid_args)that);
      return false;
    }

    public boolean equals(getRepayCgInterestByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepayCgInterestByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepayCgInterestByPid_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepayCgInterestByPid_argsStandardSchemeFactory implements SchemeFactory {
      public getRepayCgInterestByPid_argsStandardScheme getScheme() {
        return new getRepayCgInterestByPid_argsStandardScheme();
      }
    }

    private static class getRepayCgInterestByPid_argsStandardScheme extends StandardScheme<getRepayCgInterestByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepayCgInterestByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepayCgInterestByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepayCgInterestByPid_argsTupleSchemeFactory implements SchemeFactory {
      public getRepayCgInterestByPid_argsTupleScheme getScheme() {
        return new getRepayCgInterestByPid_argsTupleScheme();
      }
    }

    private static class getRepayCgInterestByPid_argsTupleScheme extends TupleScheme<getRepayCgInterestByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepayCgInterestByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepayCgInterestByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getRepayCgInterestByPid_result implements org.apache.thrift.TBase<getRepayCgInterestByPid_result, getRepayCgInterestByPid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepayCgInterestByPid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepayCgInterestByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepayCgInterestByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepayCgInterestByPid_resultTupleSchemeFactory());
    }

    public RepayCgInterestView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepayCgInterestByPid_result.class, metaDataMap);
    }

    public getRepayCgInterestByPid_result() {
    }

    public getRepayCgInterestByPid_result(
      RepayCgInterestView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepayCgInterestByPid_result(getRepayCgInterestByPid_result other) {
      if (other.isSetSuccess()) {
        this.success = new RepayCgInterestView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getRepayCgInterestByPid_result deepCopy() {
      return new getRepayCgInterestByPid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RepayCgInterestView getSuccess() {
      return this.success;
    }

    public getRepayCgInterestByPid_result setSuccess(RepayCgInterestView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getRepayCgInterestByPid_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RepayCgInterestView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepayCgInterestByPid_result)
        return this.equals((getRepayCgInterestByPid_result)that);
      return false;
    }

    public boolean equals(getRepayCgInterestByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepayCgInterestByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepayCgInterestByPid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepayCgInterestByPid_resultStandardSchemeFactory implements SchemeFactory {
      public getRepayCgInterestByPid_resultStandardScheme getScheme() {
        return new getRepayCgInterestByPid_resultStandardScheme();
      }
    }

    private static class getRepayCgInterestByPid_resultStandardScheme extends StandardScheme<getRepayCgInterestByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepayCgInterestByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RepayCgInterestView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepayCgInterestByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepayCgInterestByPid_resultTupleSchemeFactory implements SchemeFactory {
      public getRepayCgInterestByPid_resultTupleScheme getScheme() {
        return new getRepayCgInterestByPid_resultTupleScheme();
      }
    }

    private static class getRepayCgInterestByPid_resultTupleScheme extends TupleScheme<getRepayCgInterestByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepayCgInterestByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepayCgInterestByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RepayCgInterestView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class syncProcedureToProject_args implements org.apache.thrift.TBase<syncProcedureToProject_args, syncProcedureToProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncProcedureToProject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncProcedureToProject_args");

    private static final org.apache.thrift.protocol.TField REPAY_CG_INTEREST_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCgInterestDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncProcedureToProject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncProcedureToProject_argsTupleSchemeFactory());
    }

    public RepayCgInterestDTO repayCgInterestDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAY_CG_INTEREST_DTO((short)1, "repayCgInterestDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAY_CG_INTEREST_DTO
            return REPAY_CG_INTEREST_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAY_CG_INTEREST_DTO, new org.apache.thrift.meta_data.FieldMetaData("repayCgInterestDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepayCgInterestDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncProcedureToProject_args.class, metaDataMap);
    }

    public syncProcedureToProject_args() {
    }

    public syncProcedureToProject_args(
      RepayCgInterestDTO repayCgInterestDTO)
    {
      this();
      this.repayCgInterestDTO = repayCgInterestDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncProcedureToProject_args(syncProcedureToProject_args other) {
      if (other.isSetRepayCgInterestDTO()) {
        this.repayCgInterestDTO = new RepayCgInterestDTO(other.repayCgInterestDTO);
      }
    }

    public syncProcedureToProject_args deepCopy() {
      return new syncProcedureToProject_args(this);
    }

    @Override
    public void clear() {
      this.repayCgInterestDTO = null;
    }

    public RepayCgInterestDTO getRepayCgInterestDTO() {
      return this.repayCgInterestDTO;
    }

    public syncProcedureToProject_args setRepayCgInterestDTO(RepayCgInterestDTO repayCgInterestDTO) {
      this.repayCgInterestDTO = repayCgInterestDTO;
      return this;
    }

    public void unsetRepayCgInterestDTO() {
      this.repayCgInterestDTO = null;
    }

    /** Returns true if field repayCgInterestDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepayCgInterestDTO() {
      return this.repayCgInterestDTO != null;
    }

    public void setRepayCgInterestDTOIsSet(boolean value) {
      if (!value) {
        this.repayCgInterestDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        if (value == null) {
          unsetRepayCgInterestDTO();
        } else {
          setRepayCgInterestDTO((RepayCgInterestDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return getRepayCgInterestDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAY_CG_INTEREST_DTO:
        return isSetRepayCgInterestDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncProcedureToProject_args)
        return this.equals((syncProcedureToProject_args)that);
      return false;
    }

    public boolean equals(syncProcedureToProject_args that) {
      if (that == null)
        return false;

      boolean this_present_repayCgInterestDTO = true && this.isSetRepayCgInterestDTO();
      boolean that_present_repayCgInterestDTO = true && that.isSetRepayCgInterestDTO();
      if (this_present_repayCgInterestDTO || that_present_repayCgInterestDTO) {
        if (!(this_present_repayCgInterestDTO && that_present_repayCgInterestDTO))
          return false;
        if (!this.repayCgInterestDTO.equals(that.repayCgInterestDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repayCgInterestDTO = true && (isSetRepayCgInterestDTO());
      list.add(present_repayCgInterestDTO);
      if (present_repayCgInterestDTO)
        list.add(repayCgInterestDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncProcedureToProject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepayCgInterestDTO()).compareTo(other.isSetRepayCgInterestDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepayCgInterestDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCgInterestDTO, other.repayCgInterestDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncProcedureToProject_args(");
      boolean first = true;

      sb.append("repayCgInterestDTO:");
      if (this.repayCgInterestDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repayCgInterestDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repayCgInterestDTO != null) {
        repayCgInterestDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncProcedureToProject_argsStandardSchemeFactory implements SchemeFactory {
      public syncProcedureToProject_argsStandardScheme getScheme() {
        return new syncProcedureToProject_argsStandardScheme();
      }
    }

    private static class syncProcedureToProject_argsStandardScheme extends StandardScheme<syncProcedureToProject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncProcedureToProject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAY_CG_INTEREST_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repayCgInterestDTO = new RepayCgInterestDTO();
                struct.repayCgInterestDTO.read(iprot);
                struct.setRepayCgInterestDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncProcedureToProject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repayCgInterestDTO != null) {
          oprot.writeFieldBegin(REPAY_CG_INTEREST_DTO_FIELD_DESC);
          struct.repayCgInterestDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncProcedureToProject_argsTupleSchemeFactory implements SchemeFactory {
      public syncProcedureToProject_argsTupleScheme getScheme() {
        return new syncProcedureToProject_argsTupleScheme();
      }
    }

    private static class syncProcedureToProject_argsTupleScheme extends TupleScheme<syncProcedureToProject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncProcedureToProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepayCgInterestDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepayCgInterestDTO()) {
          struct.repayCgInterestDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncProcedureToProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repayCgInterestDTO = new RepayCgInterestDTO();
          struct.repayCgInterestDTO.read(iprot);
          struct.setRepayCgInterestDTOIsSet(true);
        }
      }
    }

  }

  public static class syncProcedureToProject_result implements org.apache.thrift.TBase<syncProcedureToProject_result, syncProcedureToProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncProcedureToProject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncProcedureToProject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncProcedureToProject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncProcedureToProject_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncProcedureToProject_result.class, metaDataMap);
    }

    public syncProcedureToProject_result() {
    }

    public syncProcedureToProject_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncProcedureToProject_result(syncProcedureToProject_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public syncProcedureToProject_result deepCopy() {
      return new syncProcedureToProject_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public syncProcedureToProject_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public syncProcedureToProject_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncProcedureToProject_result)
        return this.equals((syncProcedureToProject_result)that);
      return false;
    }

    public boolean equals(syncProcedureToProject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncProcedureToProject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncProcedureToProject_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncProcedureToProject_resultStandardSchemeFactory implements SchemeFactory {
      public syncProcedureToProject_resultStandardScheme getScheme() {
        return new syncProcedureToProject_resultStandardScheme();
      }
    }

    private static class syncProcedureToProject_resultStandardScheme extends StandardScheme<syncProcedureToProject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncProcedureToProject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncProcedureToProject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncProcedureToProject_resultTupleSchemeFactory implements SchemeFactory {
      public syncProcedureToProject_resultTupleScheme getScheme() {
        return new syncProcedureToProject_resultTupleScheme();
      }
    }

    private static class syncProcedureToProject_resultTupleScheme extends TupleScheme<syncProcedureToProject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncProcedureToProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncProcedureToProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-8")
public class ReportService {

  public interface Iface {

    public List<HandleDifferWarnReport> queryHandleDifferWarnReport(HandleDifferWarnReport handleDifferWarnReport) throws org.apache.thrift.TException;

    public int getHandleDifferWarnReportTotal(HandleDifferWarnReport handleDifferWarnReport) throws org.apache.thrift.TException;

    public List<BusinessSummaryReport> queryBusinessSummary(BusinessSummaryReport businessSummaryReport) throws org.apache.thrift.TException;

    public int getBusinessSummaryTotal(BusinessSummaryReport businessSummaryReport) throws org.apache.thrift.TException;

    public List<ChechanReport> queryChechan(ChechanReport chechanReport) throws org.apache.thrift.TException;

    public int getChechanTotal(ChechanReport chechanReport) throws org.apache.thrift.TException;

    public List<CollectFeeReport> queryCollectFeeReport(CollectFeeReport collectFeeReport) throws org.apache.thrift.TException;

    public int getCollectFeeReportTotal(CollectFeeReport collectFeeReport) throws org.apache.thrift.TException;

    public List<CollectFeeReport> queryCollectFeeReportByIds(String ids) throws org.apache.thrift.TException;

    public List<TrackRecordReport> queryTrackRecordReport(TrackRecordReport trackRecordReport) throws org.apache.thrift.TException;

    public int queryTrackRecordReportTotal(TrackRecordReport trackRecordReport) throws org.apache.thrift.TException;

    public List<TrackRecordReport> queryTrackRecordReportByIds(String ids) throws org.apache.thrift.TException;

    public List<ForeclosureReport> queryForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException;

    public int getForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException;

    public List<ForeclosureReport> queryNewForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException;

    public int getNewForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException;

    public List<ForeclosureReport> querySquareForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException;

    public int getSquareForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException;

    public List<ForeclosureOrganizationReport> queryForeclosureOrganizationReport(ForeclosureOrganizationReport foreclosureOrganizationReport) throws org.apache.thrift.TException;

    public int getForeclosureOrganizationReportTotal(ForeclosureOrganizationReport foreclosureOrganizationReport) throws org.apache.thrift.TException;

    public List<ForeclosureCapitalReport> queryForeclosureCapitalReport(ForeclosureCapitalReport foreclosureCapitalReport) throws org.apache.thrift.TException;

    public int getForeclosureCapitalReportTotal(ForeclosureCapitalReport foreclosureCapitalReport) throws org.apache.thrift.TException;

    public List<FinancialStatisticsReport> queryFinancialStatisticsReport(FinancialStatisticsReport financialStatisticsReport) throws org.apache.thrift.TException;

    public int getFinancialStatisticsReportTotal(FinancialStatisticsReport financialStatisticsReport) throws org.apache.thrift.TException;

    public List<RefundFeesReport> queryRefundFeesReport(RefundFeesReport refundFeesReport) throws org.apache.thrift.TException;

    public int getRefundFeesReportTotal(RefundFeesReport refundFeesReport) throws org.apache.thrift.TException;

    public List<BusinessApprovalDetail> queryBusinessApprovalDetail(BusinessApprovalDetail businessApprovalDetail) throws org.apache.thrift.TException;

    public int getBusinessApprovalDetailTotal(BusinessApprovalDetail businessApprovalDetail) throws org.apache.thrift.TException;

    public List<BusinessApprovalBill> queryBusinessApprovalBill(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException;

    public int getBusinessApprovalBillTotal(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException;

    public List<BusinessApprovalBill> queryBusinessApprovalBillCount(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException;

    public int getBusinessApprovalBillCountTotal(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException;

    public List<RefuseProjectReport> queryResuseProjectByPage(RefuseProjectReport query) throws org.apache.thrift.TException;

    public int queryResuseProjectCount(RefuseProjectReport query) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryHandleDifferWarnReport(HandleDifferWarnReport handleDifferWarnReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHandleDifferWarnReportTotal(HandleDifferWarnReport handleDifferWarnReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBusinessSummary(BusinessSummaryReport businessSummaryReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBusinessSummaryTotal(BusinessSummaryReport businessSummaryReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryChechan(ChechanReport chechanReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getChechanTotal(ChechanReport chechanReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollectFeeReport(CollectFeeReport collectFeeReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCollectFeeReportTotal(CollectFeeReport collectFeeReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollectFeeReportByIds(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTrackRecordReport(TrackRecordReport trackRecordReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTrackRecordReportTotal(TrackRecordReport trackRecordReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTrackRecordReportByIds(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureReport(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getForeclosureReportTotal(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryNewForeclosureReport(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewForeclosureReportTotal(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySquareForeclosureReport(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSquareForeclosureReportTotal(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureOrganizationReport(ForeclosureOrganizationReport foreclosureOrganizationReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getForeclosureOrganizationReportTotal(ForeclosureOrganizationReport foreclosureOrganizationReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryForeclosureCapitalReport(ForeclosureCapitalReport foreclosureCapitalReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getForeclosureCapitalReportTotal(ForeclosureCapitalReport foreclosureCapitalReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryFinancialStatisticsReport(FinancialStatisticsReport financialStatisticsReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinancialStatisticsReportTotal(FinancialStatisticsReport financialStatisticsReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRefundFeesReport(RefundFeesReport refundFeesReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRefundFeesReportTotal(RefundFeesReport refundFeesReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBusinessApprovalDetail(BusinessApprovalDetail businessApprovalDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBusinessApprovalDetailTotal(BusinessApprovalDetail businessApprovalDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBusinessApprovalBill(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBusinessApprovalBillTotal(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBusinessApprovalBillCount(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBusinessApprovalBillCountTotal(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryResuseProjectByPage(RefuseProjectReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryResuseProjectCount(RefuseProjectReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<HandleDifferWarnReport> queryHandleDifferWarnReport(HandleDifferWarnReport handleDifferWarnReport) throws org.apache.thrift.TException
    {
      send_queryHandleDifferWarnReport(handleDifferWarnReport);
      return recv_queryHandleDifferWarnReport();
    }

    public void send_queryHandleDifferWarnReport(HandleDifferWarnReport handleDifferWarnReport) throws org.apache.thrift.TException
    {
      queryHandleDifferWarnReport_args args = new queryHandleDifferWarnReport_args();
      args.setHandleDifferWarnReport(handleDifferWarnReport);
      sendBase("queryHandleDifferWarnReport", args);
    }

    public List<HandleDifferWarnReport> recv_queryHandleDifferWarnReport() throws org.apache.thrift.TException
    {
      queryHandleDifferWarnReport_result result = new queryHandleDifferWarnReport_result();
      receiveBase(result, "queryHandleDifferWarnReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryHandleDifferWarnReport failed: unknown result");
    }

    public int getHandleDifferWarnReportTotal(HandleDifferWarnReport handleDifferWarnReport) throws org.apache.thrift.TException
    {
      send_getHandleDifferWarnReportTotal(handleDifferWarnReport);
      return recv_getHandleDifferWarnReportTotal();
    }

    public void send_getHandleDifferWarnReportTotal(HandleDifferWarnReport handleDifferWarnReport) throws org.apache.thrift.TException
    {
      getHandleDifferWarnReportTotal_args args = new getHandleDifferWarnReportTotal_args();
      args.setHandleDifferWarnReport(handleDifferWarnReport);
      sendBase("getHandleDifferWarnReportTotal", args);
    }

    public int recv_getHandleDifferWarnReportTotal() throws org.apache.thrift.TException
    {
      getHandleDifferWarnReportTotal_result result = new getHandleDifferWarnReportTotal_result();
      receiveBase(result, "getHandleDifferWarnReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHandleDifferWarnReportTotal failed: unknown result");
    }

    public List<BusinessSummaryReport> queryBusinessSummary(BusinessSummaryReport businessSummaryReport) throws org.apache.thrift.TException
    {
      send_queryBusinessSummary(businessSummaryReport);
      return recv_queryBusinessSummary();
    }

    public void send_queryBusinessSummary(BusinessSummaryReport businessSummaryReport) throws org.apache.thrift.TException
    {
      queryBusinessSummary_args args = new queryBusinessSummary_args();
      args.setBusinessSummaryReport(businessSummaryReport);
      sendBase("queryBusinessSummary", args);
    }

    public List<BusinessSummaryReport> recv_queryBusinessSummary() throws org.apache.thrift.TException
    {
      queryBusinessSummary_result result = new queryBusinessSummary_result();
      receiveBase(result, "queryBusinessSummary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessSummary failed: unknown result");
    }

    public int getBusinessSummaryTotal(BusinessSummaryReport businessSummaryReport) throws org.apache.thrift.TException
    {
      send_getBusinessSummaryTotal(businessSummaryReport);
      return recv_getBusinessSummaryTotal();
    }

    public void send_getBusinessSummaryTotal(BusinessSummaryReport businessSummaryReport) throws org.apache.thrift.TException
    {
      getBusinessSummaryTotal_args args = new getBusinessSummaryTotal_args();
      args.setBusinessSummaryReport(businessSummaryReport);
      sendBase("getBusinessSummaryTotal", args);
    }

    public int recv_getBusinessSummaryTotal() throws org.apache.thrift.TException
    {
      getBusinessSummaryTotal_result result = new getBusinessSummaryTotal_result();
      receiveBase(result, "getBusinessSummaryTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBusinessSummaryTotal failed: unknown result");
    }

    public List<ChechanReport> queryChechan(ChechanReport chechanReport) throws org.apache.thrift.TException
    {
      send_queryChechan(chechanReport);
      return recv_queryChechan();
    }

    public void send_queryChechan(ChechanReport chechanReport) throws org.apache.thrift.TException
    {
      queryChechan_args args = new queryChechan_args();
      args.setChechanReport(chechanReport);
      sendBase("queryChechan", args);
    }

    public List<ChechanReport> recv_queryChechan() throws org.apache.thrift.TException
    {
      queryChechan_result result = new queryChechan_result();
      receiveBase(result, "queryChechan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryChechan failed: unknown result");
    }

    public int getChechanTotal(ChechanReport chechanReport) throws org.apache.thrift.TException
    {
      send_getChechanTotal(chechanReport);
      return recv_getChechanTotal();
    }

    public void send_getChechanTotal(ChechanReport chechanReport) throws org.apache.thrift.TException
    {
      getChechanTotal_args args = new getChechanTotal_args();
      args.setChechanReport(chechanReport);
      sendBase("getChechanTotal", args);
    }

    public int recv_getChechanTotal() throws org.apache.thrift.TException
    {
      getChechanTotal_result result = new getChechanTotal_result();
      receiveBase(result, "getChechanTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChechanTotal failed: unknown result");
    }

    public List<CollectFeeReport> queryCollectFeeReport(CollectFeeReport collectFeeReport) throws org.apache.thrift.TException
    {
      send_queryCollectFeeReport(collectFeeReport);
      return recv_queryCollectFeeReport();
    }

    public void send_queryCollectFeeReport(CollectFeeReport collectFeeReport) throws org.apache.thrift.TException
    {
      queryCollectFeeReport_args args = new queryCollectFeeReport_args();
      args.setCollectFeeReport(collectFeeReport);
      sendBase("queryCollectFeeReport", args);
    }

    public List<CollectFeeReport> recv_queryCollectFeeReport() throws org.apache.thrift.TException
    {
      queryCollectFeeReport_result result = new queryCollectFeeReport_result();
      receiveBase(result, "queryCollectFeeReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollectFeeReport failed: unknown result");
    }

    public int getCollectFeeReportTotal(CollectFeeReport collectFeeReport) throws org.apache.thrift.TException
    {
      send_getCollectFeeReportTotal(collectFeeReport);
      return recv_getCollectFeeReportTotal();
    }

    public void send_getCollectFeeReportTotal(CollectFeeReport collectFeeReport) throws org.apache.thrift.TException
    {
      getCollectFeeReportTotal_args args = new getCollectFeeReportTotal_args();
      args.setCollectFeeReport(collectFeeReport);
      sendBase("getCollectFeeReportTotal", args);
    }

    public int recv_getCollectFeeReportTotal() throws org.apache.thrift.TException
    {
      getCollectFeeReportTotal_result result = new getCollectFeeReportTotal_result();
      receiveBase(result, "getCollectFeeReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectFeeReportTotal failed: unknown result");
    }

    public List<CollectFeeReport> queryCollectFeeReportByIds(String ids) throws org.apache.thrift.TException
    {
      send_queryCollectFeeReportByIds(ids);
      return recv_queryCollectFeeReportByIds();
    }

    public void send_queryCollectFeeReportByIds(String ids) throws org.apache.thrift.TException
    {
      queryCollectFeeReportByIds_args args = new queryCollectFeeReportByIds_args();
      args.setIds(ids);
      sendBase("queryCollectFeeReportByIds", args);
    }

    public List<CollectFeeReport> recv_queryCollectFeeReportByIds() throws org.apache.thrift.TException
    {
      queryCollectFeeReportByIds_result result = new queryCollectFeeReportByIds_result();
      receiveBase(result, "queryCollectFeeReportByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollectFeeReportByIds failed: unknown result");
    }

    public List<TrackRecordReport> queryTrackRecordReport(TrackRecordReport trackRecordReport) throws org.apache.thrift.TException
    {
      send_queryTrackRecordReport(trackRecordReport);
      return recv_queryTrackRecordReport();
    }

    public void send_queryTrackRecordReport(TrackRecordReport trackRecordReport) throws org.apache.thrift.TException
    {
      queryTrackRecordReport_args args = new queryTrackRecordReport_args();
      args.setTrackRecordReport(trackRecordReport);
      sendBase("queryTrackRecordReport", args);
    }

    public List<TrackRecordReport> recv_queryTrackRecordReport() throws org.apache.thrift.TException
    {
      queryTrackRecordReport_result result = new queryTrackRecordReport_result();
      receiveBase(result, "queryTrackRecordReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTrackRecordReport failed: unknown result");
    }

    public int queryTrackRecordReportTotal(TrackRecordReport trackRecordReport) throws org.apache.thrift.TException
    {
      send_queryTrackRecordReportTotal(trackRecordReport);
      return recv_queryTrackRecordReportTotal();
    }

    public void send_queryTrackRecordReportTotal(TrackRecordReport trackRecordReport) throws org.apache.thrift.TException
    {
      queryTrackRecordReportTotal_args args = new queryTrackRecordReportTotal_args();
      args.setTrackRecordReport(trackRecordReport);
      sendBase("queryTrackRecordReportTotal", args);
    }

    public int recv_queryTrackRecordReportTotal() throws org.apache.thrift.TException
    {
      queryTrackRecordReportTotal_result result = new queryTrackRecordReportTotal_result();
      receiveBase(result, "queryTrackRecordReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTrackRecordReportTotal failed: unknown result");
    }

    public List<TrackRecordReport> queryTrackRecordReportByIds(String ids) throws org.apache.thrift.TException
    {
      send_queryTrackRecordReportByIds(ids);
      return recv_queryTrackRecordReportByIds();
    }

    public void send_queryTrackRecordReportByIds(String ids) throws org.apache.thrift.TException
    {
      queryTrackRecordReportByIds_args args = new queryTrackRecordReportByIds_args();
      args.setIds(ids);
      sendBase("queryTrackRecordReportByIds", args);
    }

    public List<TrackRecordReport> recv_queryTrackRecordReportByIds() throws org.apache.thrift.TException
    {
      queryTrackRecordReportByIds_result result = new queryTrackRecordReportByIds_result();
      receiveBase(result, "queryTrackRecordReportByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTrackRecordReportByIds failed: unknown result");
    }

    public List<ForeclosureReport> queryForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      send_queryForeclosureReport(foreclosureReport);
      return recv_queryForeclosureReport();
    }

    public void send_queryForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      queryForeclosureReport_args args = new queryForeclosureReport_args();
      args.setForeclosureReport(foreclosureReport);
      sendBase("queryForeclosureReport", args);
    }

    public List<ForeclosureReport> recv_queryForeclosureReport() throws org.apache.thrift.TException
    {
      queryForeclosureReport_result result = new queryForeclosureReport_result();
      receiveBase(result, "queryForeclosureReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureReport failed: unknown result");
    }

    public int getForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      send_getForeclosureReportTotal(foreclosureReport);
      return recv_getForeclosureReportTotal();
    }

    public void send_getForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      getForeclosureReportTotal_args args = new getForeclosureReportTotal_args();
      args.setForeclosureReport(foreclosureReport);
      sendBase("getForeclosureReportTotal", args);
    }

    public int recv_getForeclosureReportTotal() throws org.apache.thrift.TException
    {
      getForeclosureReportTotal_result result = new getForeclosureReportTotal_result();
      receiveBase(result, "getForeclosureReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getForeclosureReportTotal failed: unknown result");
    }

    public List<ForeclosureReport> queryNewForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      send_queryNewForeclosureReport(foreclosureReport);
      return recv_queryNewForeclosureReport();
    }

    public void send_queryNewForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      queryNewForeclosureReport_args args = new queryNewForeclosureReport_args();
      args.setForeclosureReport(foreclosureReport);
      sendBase("queryNewForeclosureReport", args);
    }

    public List<ForeclosureReport> recv_queryNewForeclosureReport() throws org.apache.thrift.TException
    {
      queryNewForeclosureReport_result result = new queryNewForeclosureReport_result();
      receiveBase(result, "queryNewForeclosureReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryNewForeclosureReport failed: unknown result");
    }

    public int getNewForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      send_getNewForeclosureReportTotal(foreclosureReport);
      return recv_getNewForeclosureReportTotal();
    }

    public void send_getNewForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      getNewForeclosureReportTotal_args args = new getNewForeclosureReportTotal_args();
      args.setForeclosureReport(foreclosureReport);
      sendBase("getNewForeclosureReportTotal", args);
    }

    public int recv_getNewForeclosureReportTotal() throws org.apache.thrift.TException
    {
      getNewForeclosureReportTotal_result result = new getNewForeclosureReportTotal_result();
      receiveBase(result, "getNewForeclosureReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewForeclosureReportTotal failed: unknown result");
    }

    public List<ForeclosureReport> querySquareForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      send_querySquareForeclosureReport(foreclosureReport);
      return recv_querySquareForeclosureReport();
    }

    public void send_querySquareForeclosureReport(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      querySquareForeclosureReport_args args = new querySquareForeclosureReport_args();
      args.setForeclosureReport(foreclosureReport);
      sendBase("querySquareForeclosureReport", args);
    }

    public List<ForeclosureReport> recv_querySquareForeclosureReport() throws org.apache.thrift.TException
    {
      querySquareForeclosureReport_result result = new querySquareForeclosureReport_result();
      receiveBase(result, "querySquareForeclosureReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySquareForeclosureReport failed: unknown result");
    }

    public int getSquareForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      send_getSquareForeclosureReportTotal(foreclosureReport);
      return recv_getSquareForeclosureReportTotal();
    }

    public void send_getSquareForeclosureReportTotal(ForeclosureReport foreclosureReport) throws org.apache.thrift.TException
    {
      getSquareForeclosureReportTotal_args args = new getSquareForeclosureReportTotal_args();
      args.setForeclosureReport(foreclosureReport);
      sendBase("getSquareForeclosureReportTotal", args);
    }

    public int recv_getSquareForeclosureReportTotal() throws org.apache.thrift.TException
    {
      getSquareForeclosureReportTotal_result result = new getSquareForeclosureReportTotal_result();
      receiveBase(result, "getSquareForeclosureReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSquareForeclosureReportTotal failed: unknown result");
    }

    public List<ForeclosureOrganizationReport> queryForeclosureOrganizationReport(ForeclosureOrganizationReport foreclosureOrganizationReport) throws org.apache.thrift.TException
    {
      send_queryForeclosureOrganizationReport(foreclosureOrganizationReport);
      return recv_queryForeclosureOrganizationReport();
    }

    public void send_queryForeclosureOrganizationReport(ForeclosureOrganizationReport foreclosureOrganizationReport) throws org.apache.thrift.TException
    {
      queryForeclosureOrganizationReport_args args = new queryForeclosureOrganizationReport_args();
      args.setForeclosureOrganizationReport(foreclosureOrganizationReport);
      sendBase("queryForeclosureOrganizationReport", args);
    }

    public List<ForeclosureOrganizationReport> recv_queryForeclosureOrganizationReport() throws org.apache.thrift.TException
    {
      queryForeclosureOrganizationReport_result result = new queryForeclosureOrganizationReport_result();
      receiveBase(result, "queryForeclosureOrganizationReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureOrganizationReport failed: unknown result");
    }

    public int getForeclosureOrganizationReportTotal(ForeclosureOrganizationReport foreclosureOrganizationReport) throws org.apache.thrift.TException
    {
      send_getForeclosureOrganizationReportTotal(foreclosureOrganizationReport);
      return recv_getForeclosureOrganizationReportTotal();
    }

    public void send_getForeclosureOrganizationReportTotal(ForeclosureOrganizationReport foreclosureOrganizationReport) throws org.apache.thrift.TException
    {
      getForeclosureOrganizationReportTotal_args args = new getForeclosureOrganizationReportTotal_args();
      args.setForeclosureOrganizationReport(foreclosureOrganizationReport);
      sendBase("getForeclosureOrganizationReportTotal", args);
    }

    public int recv_getForeclosureOrganizationReportTotal() throws org.apache.thrift.TException
    {
      getForeclosureOrganizationReportTotal_result result = new getForeclosureOrganizationReportTotal_result();
      receiveBase(result, "getForeclosureOrganizationReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getForeclosureOrganizationReportTotal failed: unknown result");
    }

    public List<ForeclosureCapitalReport> queryForeclosureCapitalReport(ForeclosureCapitalReport foreclosureCapitalReport) throws org.apache.thrift.TException
    {
      send_queryForeclosureCapitalReport(foreclosureCapitalReport);
      return recv_queryForeclosureCapitalReport();
    }

    public void send_queryForeclosureCapitalReport(ForeclosureCapitalReport foreclosureCapitalReport) throws org.apache.thrift.TException
    {
      queryForeclosureCapitalReport_args args = new queryForeclosureCapitalReport_args();
      args.setForeclosureCapitalReport(foreclosureCapitalReport);
      sendBase("queryForeclosureCapitalReport", args);
    }

    public List<ForeclosureCapitalReport> recv_queryForeclosureCapitalReport() throws org.apache.thrift.TException
    {
      queryForeclosureCapitalReport_result result = new queryForeclosureCapitalReport_result();
      receiveBase(result, "queryForeclosureCapitalReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForeclosureCapitalReport failed: unknown result");
    }

    public int getForeclosureCapitalReportTotal(ForeclosureCapitalReport foreclosureCapitalReport) throws org.apache.thrift.TException
    {
      send_getForeclosureCapitalReportTotal(foreclosureCapitalReport);
      return recv_getForeclosureCapitalReportTotal();
    }

    public void send_getForeclosureCapitalReportTotal(ForeclosureCapitalReport foreclosureCapitalReport) throws org.apache.thrift.TException
    {
      getForeclosureCapitalReportTotal_args args = new getForeclosureCapitalReportTotal_args();
      args.setForeclosureCapitalReport(foreclosureCapitalReport);
      sendBase("getForeclosureCapitalReportTotal", args);
    }

    public int recv_getForeclosureCapitalReportTotal() throws org.apache.thrift.TException
    {
      getForeclosureCapitalReportTotal_result result = new getForeclosureCapitalReportTotal_result();
      receiveBase(result, "getForeclosureCapitalReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getForeclosureCapitalReportTotal failed: unknown result");
    }

    public List<FinancialStatisticsReport> queryFinancialStatisticsReport(FinancialStatisticsReport financialStatisticsReport) throws org.apache.thrift.TException
    {
      send_queryFinancialStatisticsReport(financialStatisticsReport);
      return recv_queryFinancialStatisticsReport();
    }

    public void send_queryFinancialStatisticsReport(FinancialStatisticsReport financialStatisticsReport) throws org.apache.thrift.TException
    {
      queryFinancialStatisticsReport_args args = new queryFinancialStatisticsReport_args();
      args.setFinancialStatisticsReport(financialStatisticsReport);
      sendBase("queryFinancialStatisticsReport", args);
    }

    public List<FinancialStatisticsReport> recv_queryFinancialStatisticsReport() throws org.apache.thrift.TException
    {
      queryFinancialStatisticsReport_result result = new queryFinancialStatisticsReport_result();
      receiveBase(result, "queryFinancialStatisticsReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryFinancialStatisticsReport failed: unknown result");
    }

    public int getFinancialStatisticsReportTotal(FinancialStatisticsReport financialStatisticsReport) throws org.apache.thrift.TException
    {
      send_getFinancialStatisticsReportTotal(financialStatisticsReport);
      return recv_getFinancialStatisticsReportTotal();
    }

    public void send_getFinancialStatisticsReportTotal(FinancialStatisticsReport financialStatisticsReport) throws org.apache.thrift.TException
    {
      getFinancialStatisticsReportTotal_args args = new getFinancialStatisticsReportTotal_args();
      args.setFinancialStatisticsReport(financialStatisticsReport);
      sendBase("getFinancialStatisticsReportTotal", args);
    }

    public int recv_getFinancialStatisticsReportTotal() throws org.apache.thrift.TException
    {
      getFinancialStatisticsReportTotal_result result = new getFinancialStatisticsReportTotal_result();
      receiveBase(result, "getFinancialStatisticsReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinancialStatisticsReportTotal failed: unknown result");
    }

    public List<RefundFeesReport> queryRefundFeesReport(RefundFeesReport refundFeesReport) throws org.apache.thrift.TException
    {
      send_queryRefundFeesReport(refundFeesReport);
      return recv_queryRefundFeesReport();
    }

    public void send_queryRefundFeesReport(RefundFeesReport refundFeesReport) throws org.apache.thrift.TException
    {
      queryRefundFeesReport_args args = new queryRefundFeesReport_args();
      args.setRefundFeesReport(refundFeesReport);
      sendBase("queryRefundFeesReport", args);
    }

    public List<RefundFeesReport> recv_queryRefundFeesReport() throws org.apache.thrift.TException
    {
      queryRefundFeesReport_result result = new queryRefundFeesReport_result();
      receiveBase(result, "queryRefundFeesReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRefundFeesReport failed: unknown result");
    }

    public int getRefundFeesReportTotal(RefundFeesReport refundFeesReport) throws org.apache.thrift.TException
    {
      send_getRefundFeesReportTotal(refundFeesReport);
      return recv_getRefundFeesReportTotal();
    }

    public void send_getRefundFeesReportTotal(RefundFeesReport refundFeesReport) throws org.apache.thrift.TException
    {
      getRefundFeesReportTotal_args args = new getRefundFeesReportTotal_args();
      args.setRefundFeesReport(refundFeesReport);
      sendBase("getRefundFeesReportTotal", args);
    }

    public int recv_getRefundFeesReportTotal() throws org.apache.thrift.TException
    {
      getRefundFeesReportTotal_result result = new getRefundFeesReportTotal_result();
      receiveBase(result, "getRefundFeesReportTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRefundFeesReportTotal failed: unknown result");
    }

    public List<BusinessApprovalDetail> queryBusinessApprovalDetail(BusinessApprovalDetail businessApprovalDetail) throws org.apache.thrift.TException
    {
      send_queryBusinessApprovalDetail(businessApprovalDetail);
      return recv_queryBusinessApprovalDetail();
    }

    public void send_queryBusinessApprovalDetail(BusinessApprovalDetail businessApprovalDetail) throws org.apache.thrift.TException
    {
      queryBusinessApprovalDetail_args args = new queryBusinessApprovalDetail_args();
      args.setBusinessApprovalDetail(businessApprovalDetail);
      sendBase("queryBusinessApprovalDetail", args);
    }

    public List<BusinessApprovalDetail> recv_queryBusinessApprovalDetail() throws org.apache.thrift.TException
    {
      queryBusinessApprovalDetail_result result = new queryBusinessApprovalDetail_result();
      receiveBase(result, "queryBusinessApprovalDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessApprovalDetail failed: unknown result");
    }

    public int getBusinessApprovalDetailTotal(BusinessApprovalDetail businessApprovalDetail) throws org.apache.thrift.TException
    {
      send_getBusinessApprovalDetailTotal(businessApprovalDetail);
      return recv_getBusinessApprovalDetailTotal();
    }

    public void send_getBusinessApprovalDetailTotal(BusinessApprovalDetail businessApprovalDetail) throws org.apache.thrift.TException
    {
      getBusinessApprovalDetailTotal_args args = new getBusinessApprovalDetailTotal_args();
      args.setBusinessApprovalDetail(businessApprovalDetail);
      sendBase("getBusinessApprovalDetailTotal", args);
    }

    public int recv_getBusinessApprovalDetailTotal() throws org.apache.thrift.TException
    {
      getBusinessApprovalDetailTotal_result result = new getBusinessApprovalDetailTotal_result();
      receiveBase(result, "getBusinessApprovalDetailTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBusinessApprovalDetailTotal failed: unknown result");
    }

    public List<BusinessApprovalBill> queryBusinessApprovalBill(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException
    {
      send_queryBusinessApprovalBill(businessApprovalBill);
      return recv_queryBusinessApprovalBill();
    }

    public void send_queryBusinessApprovalBill(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException
    {
      queryBusinessApprovalBill_args args = new queryBusinessApprovalBill_args();
      args.setBusinessApprovalBill(businessApprovalBill);
      sendBase("queryBusinessApprovalBill", args);
    }

    public List<BusinessApprovalBill> recv_queryBusinessApprovalBill() throws org.apache.thrift.TException
    {
      queryBusinessApprovalBill_result result = new queryBusinessApprovalBill_result();
      receiveBase(result, "queryBusinessApprovalBill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessApprovalBill failed: unknown result");
    }

    public int getBusinessApprovalBillTotal(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException
    {
      send_getBusinessApprovalBillTotal(businessApprovalBill);
      return recv_getBusinessApprovalBillTotal();
    }

    public void send_getBusinessApprovalBillTotal(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException
    {
      getBusinessApprovalBillTotal_args args = new getBusinessApprovalBillTotal_args();
      args.setBusinessApprovalBill(businessApprovalBill);
      sendBase("getBusinessApprovalBillTotal", args);
    }

    public int recv_getBusinessApprovalBillTotal() throws org.apache.thrift.TException
    {
      getBusinessApprovalBillTotal_result result = new getBusinessApprovalBillTotal_result();
      receiveBase(result, "getBusinessApprovalBillTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBusinessApprovalBillTotal failed: unknown result");
    }

    public List<BusinessApprovalBill> queryBusinessApprovalBillCount(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException
    {
      send_queryBusinessApprovalBillCount(businessApprovalBill);
      return recv_queryBusinessApprovalBillCount();
    }

    public void send_queryBusinessApprovalBillCount(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException
    {
      queryBusinessApprovalBillCount_args args = new queryBusinessApprovalBillCount_args();
      args.setBusinessApprovalBill(businessApprovalBill);
      sendBase("queryBusinessApprovalBillCount", args);
    }

    public List<BusinessApprovalBill> recv_queryBusinessApprovalBillCount() throws org.apache.thrift.TException
    {
      queryBusinessApprovalBillCount_result result = new queryBusinessApprovalBillCount_result();
      receiveBase(result, "queryBusinessApprovalBillCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessApprovalBillCount failed: unknown result");
    }

    public int getBusinessApprovalBillCountTotal(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException
    {
      send_getBusinessApprovalBillCountTotal(businessApprovalBill);
      return recv_getBusinessApprovalBillCountTotal();
    }

    public void send_getBusinessApprovalBillCountTotal(BusinessApprovalBill businessApprovalBill) throws org.apache.thrift.TException
    {
      getBusinessApprovalBillCountTotal_args args = new getBusinessApprovalBillCountTotal_args();
      args.setBusinessApprovalBill(businessApprovalBill);
      sendBase("getBusinessApprovalBillCountTotal", args);
    }

    public int recv_getBusinessApprovalBillCountTotal() throws org.apache.thrift.TException
    {
      getBusinessApprovalBillCountTotal_result result = new getBusinessApprovalBillCountTotal_result();
      receiveBase(result, "getBusinessApprovalBillCountTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBusinessApprovalBillCountTotal failed: unknown result");
    }

    public List<RefuseProjectReport> queryResuseProjectByPage(RefuseProjectReport query) throws org.apache.thrift.TException
    {
      send_queryResuseProjectByPage(query);
      return recv_queryResuseProjectByPage();
    }

    public void send_queryResuseProjectByPage(RefuseProjectReport query) throws org.apache.thrift.TException
    {
      queryResuseProjectByPage_args args = new queryResuseProjectByPage_args();
      args.setQuery(query);
      sendBase("queryResuseProjectByPage", args);
    }

    public List<RefuseProjectReport> recv_queryResuseProjectByPage() throws org.apache.thrift.TException
    {
      queryResuseProjectByPage_result result = new queryResuseProjectByPage_result();
      receiveBase(result, "queryResuseProjectByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryResuseProjectByPage failed: unknown result");
    }

    public int queryResuseProjectCount(RefuseProjectReport query) throws org.apache.thrift.TException
    {
      send_queryResuseProjectCount(query);
      return recv_queryResuseProjectCount();
    }

    public void send_queryResuseProjectCount(RefuseProjectReport query) throws org.apache.thrift.TException
    {
      queryResuseProjectCount_args args = new queryResuseProjectCount_args();
      args.setQuery(query);
      sendBase("queryResuseProjectCount", args);
    }

    public int recv_queryResuseProjectCount() throws org.apache.thrift.TException
    {
      queryResuseProjectCount_result result = new queryResuseProjectCount_result();
      receiveBase(result, "queryResuseProjectCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryResuseProjectCount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryHandleDifferWarnReport(HandleDifferWarnReport handleDifferWarnReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryHandleDifferWarnReport_call method_call = new queryHandleDifferWarnReport_call(handleDifferWarnReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryHandleDifferWarnReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnReport handleDifferWarnReport;
      public queryHandleDifferWarnReport_call(HandleDifferWarnReport handleDifferWarnReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnReport = handleDifferWarnReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryHandleDifferWarnReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryHandleDifferWarnReport_args args = new queryHandleDifferWarnReport_args();
        args.setHandleDifferWarnReport(handleDifferWarnReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HandleDifferWarnReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryHandleDifferWarnReport();
      }
    }

    public void getHandleDifferWarnReportTotal(HandleDifferWarnReport handleDifferWarnReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHandleDifferWarnReportTotal_call method_call = new getHandleDifferWarnReportTotal_call(handleDifferWarnReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHandleDifferWarnReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private HandleDifferWarnReport handleDifferWarnReport;
      public getHandleDifferWarnReportTotal_call(HandleDifferWarnReport handleDifferWarnReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handleDifferWarnReport = handleDifferWarnReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHandleDifferWarnReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHandleDifferWarnReportTotal_args args = new getHandleDifferWarnReportTotal_args();
        args.setHandleDifferWarnReport(handleDifferWarnReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHandleDifferWarnReportTotal();
      }
    }

    public void queryBusinessSummary(BusinessSummaryReport businessSummaryReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessSummary_call method_call = new queryBusinessSummary_call(businessSummaryReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessSummary_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessSummaryReport businessSummaryReport;
      public queryBusinessSummary_call(BusinessSummaryReport businessSummaryReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessSummaryReport = businessSummaryReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessSummary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessSummary_args args = new queryBusinessSummary_args();
        args.setBusinessSummaryReport(businessSummaryReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BusinessSummaryReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessSummary();
      }
    }

    public void getBusinessSummaryTotal(BusinessSummaryReport businessSummaryReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBusinessSummaryTotal_call method_call = new getBusinessSummaryTotal_call(businessSummaryReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBusinessSummaryTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessSummaryReport businessSummaryReport;
      public getBusinessSummaryTotal_call(BusinessSummaryReport businessSummaryReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessSummaryReport = businessSummaryReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBusinessSummaryTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBusinessSummaryTotal_args args = new getBusinessSummaryTotal_args();
        args.setBusinessSummaryReport(businessSummaryReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBusinessSummaryTotal();
      }
    }

    public void queryChechan(ChechanReport chechanReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryChechan_call method_call = new queryChechan_call(chechanReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryChechan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChechanReport chechanReport;
      public queryChechan_call(ChechanReport chechanReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chechanReport = chechanReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryChechan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryChechan_args args = new queryChechan_args();
        args.setChechanReport(chechanReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ChechanReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryChechan();
      }
    }

    public void getChechanTotal(ChechanReport chechanReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChechanTotal_call method_call = new getChechanTotal_call(chechanReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChechanTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChechanReport chechanReport;
      public getChechanTotal_call(ChechanReport chechanReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chechanReport = chechanReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChechanTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChechanTotal_args args = new getChechanTotal_args();
        args.setChechanReport(chechanReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getChechanTotal();
      }
    }

    public void queryCollectFeeReport(CollectFeeReport collectFeeReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollectFeeReport_call method_call = new queryCollectFeeReport_call(collectFeeReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollectFeeReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFeeReport collectFeeReport;
      public queryCollectFeeReport_call(CollectFeeReport collectFeeReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectFeeReport = collectFeeReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollectFeeReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollectFeeReport_args args = new queryCollectFeeReport_args();
        args.setCollectFeeReport(collectFeeReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollectFeeReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollectFeeReport();
      }
    }

    public void getCollectFeeReportTotal(CollectFeeReport collectFeeReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectFeeReportTotal_call method_call = new getCollectFeeReportTotal_call(collectFeeReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectFeeReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CollectFeeReport collectFeeReport;
      public getCollectFeeReportTotal_call(CollectFeeReport collectFeeReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.collectFeeReport = collectFeeReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectFeeReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectFeeReportTotal_args args = new getCollectFeeReportTotal_args();
        args.setCollectFeeReport(collectFeeReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectFeeReportTotal();
      }
    }

    public void queryCollectFeeReportByIds(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollectFeeReportByIds_call method_call = new queryCollectFeeReportByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollectFeeReportByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ids;
      public queryCollectFeeReportByIds_call(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollectFeeReportByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollectFeeReportByIds_args args = new queryCollectFeeReportByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CollectFeeReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollectFeeReportByIds();
      }
    }

    public void queryTrackRecordReport(TrackRecordReport trackRecordReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTrackRecordReport_call method_call = new queryTrackRecordReport_call(trackRecordReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTrackRecordReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TrackRecordReport trackRecordReport;
      public queryTrackRecordReport_call(TrackRecordReport trackRecordReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.trackRecordReport = trackRecordReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTrackRecordReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTrackRecordReport_args args = new queryTrackRecordReport_args();
        args.setTrackRecordReport(trackRecordReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TrackRecordReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTrackRecordReport();
      }
    }

    public void queryTrackRecordReportTotal(TrackRecordReport trackRecordReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTrackRecordReportTotal_call method_call = new queryTrackRecordReportTotal_call(trackRecordReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTrackRecordReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TrackRecordReport trackRecordReport;
      public queryTrackRecordReportTotal_call(TrackRecordReport trackRecordReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.trackRecordReport = trackRecordReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTrackRecordReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTrackRecordReportTotal_args args = new queryTrackRecordReportTotal_args();
        args.setTrackRecordReport(trackRecordReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTrackRecordReportTotal();
      }
    }

    public void queryTrackRecordReportByIds(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTrackRecordReportByIds_call method_call = new queryTrackRecordReportByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTrackRecordReportByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ids;
      public queryTrackRecordReportByIds_call(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTrackRecordReportByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTrackRecordReportByIds_args args = new queryTrackRecordReportByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TrackRecordReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTrackRecordReportByIds();
      }
    }

    public void queryForeclosureReport(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureReport_call method_call = new queryForeclosureReport_call(foreclosureReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureReport foreclosureReport;
      public queryForeclosureReport_call(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureReport = foreclosureReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureReport_args args = new queryForeclosureReport_args();
        args.setForeclosureReport(foreclosureReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureReport();
      }
    }

    public void getForeclosureReportTotal(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getForeclosureReportTotal_call method_call = new getForeclosureReportTotal_call(foreclosureReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getForeclosureReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureReport foreclosureReport;
      public getForeclosureReportTotal_call(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureReport = foreclosureReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getForeclosureReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getForeclosureReportTotal_args args = new getForeclosureReportTotal_args();
        args.setForeclosureReport(foreclosureReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getForeclosureReportTotal();
      }
    }

    public void queryNewForeclosureReport(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryNewForeclosureReport_call method_call = new queryNewForeclosureReport_call(foreclosureReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryNewForeclosureReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureReport foreclosureReport;
      public queryNewForeclosureReport_call(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureReport = foreclosureReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryNewForeclosureReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryNewForeclosureReport_args args = new queryNewForeclosureReport_args();
        args.setForeclosureReport(foreclosureReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryNewForeclosureReport();
      }
    }

    public void getNewForeclosureReportTotal(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewForeclosureReportTotal_call method_call = new getNewForeclosureReportTotal_call(foreclosureReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewForeclosureReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureReport foreclosureReport;
      public getNewForeclosureReportTotal_call(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureReport = foreclosureReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewForeclosureReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewForeclosureReportTotal_args args = new getNewForeclosureReportTotal_args();
        args.setForeclosureReport(foreclosureReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNewForeclosureReportTotal();
      }
    }

    public void querySquareForeclosureReport(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySquareForeclosureReport_call method_call = new querySquareForeclosureReport_call(foreclosureReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySquareForeclosureReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureReport foreclosureReport;
      public querySquareForeclosureReport_call(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureReport = foreclosureReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySquareForeclosureReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySquareForeclosureReport_args args = new querySquareForeclosureReport_args();
        args.setForeclosureReport(foreclosureReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySquareForeclosureReport();
      }
    }

    public void getSquareForeclosureReportTotal(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSquareForeclosureReportTotal_call method_call = new getSquareForeclosureReportTotal_call(foreclosureReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSquareForeclosureReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureReport foreclosureReport;
      public getSquareForeclosureReportTotal_call(ForeclosureReport foreclosureReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureReport = foreclosureReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSquareForeclosureReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSquareForeclosureReportTotal_args args = new getSquareForeclosureReportTotal_args();
        args.setForeclosureReport(foreclosureReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSquareForeclosureReportTotal();
      }
    }

    public void queryForeclosureOrganizationReport(ForeclosureOrganizationReport foreclosureOrganizationReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureOrganizationReport_call method_call = new queryForeclosureOrganizationReport_call(foreclosureOrganizationReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureOrganizationReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureOrganizationReport foreclosureOrganizationReport;
      public queryForeclosureOrganizationReport_call(ForeclosureOrganizationReport foreclosureOrganizationReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureOrganizationReport = foreclosureOrganizationReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureOrganizationReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureOrganizationReport_args args = new queryForeclosureOrganizationReport_args();
        args.setForeclosureOrganizationReport(foreclosureOrganizationReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureOrganizationReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureOrganizationReport();
      }
    }

    public void getForeclosureOrganizationReportTotal(ForeclosureOrganizationReport foreclosureOrganizationReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getForeclosureOrganizationReportTotal_call method_call = new getForeclosureOrganizationReportTotal_call(foreclosureOrganizationReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getForeclosureOrganizationReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureOrganizationReport foreclosureOrganizationReport;
      public getForeclosureOrganizationReportTotal_call(ForeclosureOrganizationReport foreclosureOrganizationReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureOrganizationReport = foreclosureOrganizationReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getForeclosureOrganizationReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getForeclosureOrganizationReportTotal_args args = new getForeclosureOrganizationReportTotal_args();
        args.setForeclosureOrganizationReport(foreclosureOrganizationReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getForeclosureOrganizationReportTotal();
      }
    }

    public void queryForeclosureCapitalReport(ForeclosureCapitalReport foreclosureCapitalReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForeclosureCapitalReport_call method_call = new queryForeclosureCapitalReport_call(foreclosureCapitalReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForeclosureCapitalReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureCapitalReport foreclosureCapitalReport;
      public queryForeclosureCapitalReport_call(ForeclosureCapitalReport foreclosureCapitalReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureCapitalReport = foreclosureCapitalReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForeclosureCapitalReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForeclosureCapitalReport_args args = new queryForeclosureCapitalReport_args();
        args.setForeclosureCapitalReport(foreclosureCapitalReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ForeclosureCapitalReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForeclosureCapitalReport();
      }
    }

    public void getForeclosureCapitalReportTotal(ForeclosureCapitalReport foreclosureCapitalReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getForeclosureCapitalReportTotal_call method_call = new getForeclosureCapitalReportTotal_call(foreclosureCapitalReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getForeclosureCapitalReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ForeclosureCapitalReport foreclosureCapitalReport;
      public getForeclosureCapitalReportTotal_call(ForeclosureCapitalReport foreclosureCapitalReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreclosureCapitalReport = foreclosureCapitalReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getForeclosureCapitalReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getForeclosureCapitalReportTotal_args args = new getForeclosureCapitalReportTotal_args();
        args.setForeclosureCapitalReport(foreclosureCapitalReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getForeclosureCapitalReportTotal();
      }
    }

    public void queryFinancialStatisticsReport(FinancialStatisticsReport financialStatisticsReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryFinancialStatisticsReport_call method_call = new queryFinancialStatisticsReport_call(financialStatisticsReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryFinancialStatisticsReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinancialStatisticsReport financialStatisticsReport;
      public queryFinancialStatisticsReport_call(FinancialStatisticsReport financialStatisticsReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financialStatisticsReport = financialStatisticsReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryFinancialStatisticsReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryFinancialStatisticsReport_args args = new queryFinancialStatisticsReport_args();
        args.setFinancialStatisticsReport(financialStatisticsReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FinancialStatisticsReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryFinancialStatisticsReport();
      }
    }

    public void getFinancialStatisticsReportTotal(FinancialStatisticsReport financialStatisticsReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinancialStatisticsReportTotal_call method_call = new getFinancialStatisticsReportTotal_call(financialStatisticsReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinancialStatisticsReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinancialStatisticsReport financialStatisticsReport;
      public getFinancialStatisticsReportTotal_call(FinancialStatisticsReport financialStatisticsReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financialStatisticsReport = financialStatisticsReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinancialStatisticsReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinancialStatisticsReportTotal_args args = new getFinancialStatisticsReportTotal_args();
        args.setFinancialStatisticsReport(financialStatisticsReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinancialStatisticsReportTotal();
      }
    }

    public void queryRefundFeesReport(RefundFeesReport refundFeesReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRefundFeesReport_call method_call = new queryRefundFeesReport_call(refundFeesReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRefundFeesReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeesReport refundFeesReport;
      public queryRefundFeesReport_call(RefundFeesReport refundFeesReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeesReport = refundFeesReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRefundFeesReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRefundFeesReport_args args = new queryRefundFeesReport_args();
        args.setRefundFeesReport(refundFeesReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RefundFeesReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRefundFeesReport();
      }
    }

    public void getRefundFeesReportTotal(RefundFeesReport refundFeesReport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRefundFeesReportTotal_call method_call = new getRefundFeesReportTotal_call(refundFeesReport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRefundFeesReportTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefundFeesReport refundFeesReport;
      public getRefundFeesReportTotal_call(RefundFeesReport refundFeesReport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundFeesReport = refundFeesReport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRefundFeesReportTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRefundFeesReportTotal_args args = new getRefundFeesReportTotal_args();
        args.setRefundFeesReport(refundFeesReport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRefundFeesReportTotal();
      }
    }

    public void queryBusinessApprovalDetail(BusinessApprovalDetail businessApprovalDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessApprovalDetail_call method_call = new queryBusinessApprovalDetail_call(businessApprovalDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessApprovalDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessApprovalDetail businessApprovalDetail;
      public queryBusinessApprovalDetail_call(BusinessApprovalDetail businessApprovalDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessApprovalDetail = businessApprovalDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessApprovalDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessApprovalDetail_args args = new queryBusinessApprovalDetail_args();
        args.setBusinessApprovalDetail(businessApprovalDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BusinessApprovalDetail> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessApprovalDetail();
      }
    }

    public void getBusinessApprovalDetailTotal(BusinessApprovalDetail businessApprovalDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBusinessApprovalDetailTotal_call method_call = new getBusinessApprovalDetailTotal_call(businessApprovalDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBusinessApprovalDetailTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessApprovalDetail businessApprovalDetail;
      public getBusinessApprovalDetailTotal_call(BusinessApprovalDetail businessApprovalDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessApprovalDetail = businessApprovalDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBusinessApprovalDetailTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBusinessApprovalDetailTotal_args args = new getBusinessApprovalDetailTotal_args();
        args.setBusinessApprovalDetail(businessApprovalDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBusinessApprovalDetailTotal();
      }
    }

    public void queryBusinessApprovalBill(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessApprovalBill_call method_call = new queryBusinessApprovalBill_call(businessApprovalBill, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessApprovalBill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessApprovalBill businessApprovalBill;
      public queryBusinessApprovalBill_call(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessApprovalBill = businessApprovalBill;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessApprovalBill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessApprovalBill_args args = new queryBusinessApprovalBill_args();
        args.setBusinessApprovalBill(businessApprovalBill);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BusinessApprovalBill> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessApprovalBill();
      }
    }

    public void getBusinessApprovalBillTotal(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBusinessApprovalBillTotal_call method_call = new getBusinessApprovalBillTotal_call(businessApprovalBill, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBusinessApprovalBillTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessApprovalBill businessApprovalBill;
      public getBusinessApprovalBillTotal_call(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessApprovalBill = businessApprovalBill;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBusinessApprovalBillTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBusinessApprovalBillTotal_args args = new getBusinessApprovalBillTotal_args();
        args.setBusinessApprovalBill(businessApprovalBill);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBusinessApprovalBillTotal();
      }
    }

    public void queryBusinessApprovalBillCount(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessApprovalBillCount_call method_call = new queryBusinessApprovalBillCount_call(businessApprovalBill, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessApprovalBillCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessApprovalBill businessApprovalBill;
      public queryBusinessApprovalBillCount_call(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessApprovalBill = businessApprovalBill;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessApprovalBillCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessApprovalBillCount_args args = new queryBusinessApprovalBillCount_args();
        args.setBusinessApprovalBill(businessApprovalBill);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BusinessApprovalBill> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessApprovalBillCount();
      }
    }

    public void getBusinessApprovalBillCountTotal(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBusinessApprovalBillCountTotal_call method_call = new getBusinessApprovalBillCountTotal_call(businessApprovalBill, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBusinessApprovalBillCountTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessApprovalBill businessApprovalBill;
      public getBusinessApprovalBillCountTotal_call(BusinessApprovalBill businessApprovalBill, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.businessApprovalBill = businessApprovalBill;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBusinessApprovalBillCountTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBusinessApprovalBillCountTotal_args args = new getBusinessApprovalBillCountTotal_args();
        args.setBusinessApprovalBill(businessApprovalBill);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBusinessApprovalBillCountTotal();
      }
    }

    public void queryResuseProjectByPage(RefuseProjectReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryResuseProjectByPage_call method_call = new queryResuseProjectByPage_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryResuseProjectByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefuseProjectReport query;
      public queryResuseProjectByPage_call(RefuseProjectReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryResuseProjectByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryResuseProjectByPage_args args = new queryResuseProjectByPage_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RefuseProjectReport> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryResuseProjectByPage();
      }
    }

    public void queryResuseProjectCount(RefuseProjectReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryResuseProjectCount_call method_call = new queryResuseProjectCount_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryResuseProjectCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RefuseProjectReport query;
      public queryResuseProjectCount_call(RefuseProjectReport query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryResuseProjectCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryResuseProjectCount_args args = new queryResuseProjectCount_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryResuseProjectCount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryHandleDifferWarnReport", new queryHandleDifferWarnReport());
      processMap.put("getHandleDifferWarnReportTotal", new getHandleDifferWarnReportTotal());
      processMap.put("queryBusinessSummary", new queryBusinessSummary());
      processMap.put("getBusinessSummaryTotal", new getBusinessSummaryTotal());
      processMap.put("queryChechan", new queryChechan());
      processMap.put("getChechanTotal", new getChechanTotal());
      processMap.put("queryCollectFeeReport", new queryCollectFeeReport());
      processMap.put("getCollectFeeReportTotal", new getCollectFeeReportTotal());
      processMap.put("queryCollectFeeReportByIds", new queryCollectFeeReportByIds());
      processMap.put("queryTrackRecordReport", new queryTrackRecordReport());
      processMap.put("queryTrackRecordReportTotal", new queryTrackRecordReportTotal());
      processMap.put("queryTrackRecordReportByIds", new queryTrackRecordReportByIds());
      processMap.put("queryForeclosureReport", new queryForeclosureReport());
      processMap.put("getForeclosureReportTotal", new getForeclosureReportTotal());
      processMap.put("queryNewForeclosureReport", new queryNewForeclosureReport());
      processMap.put("getNewForeclosureReportTotal", new getNewForeclosureReportTotal());
      processMap.put("querySquareForeclosureReport", new querySquareForeclosureReport());
      processMap.put("getSquareForeclosureReportTotal", new getSquareForeclosureReportTotal());
      processMap.put("queryForeclosureOrganizationReport", new queryForeclosureOrganizationReport());
      processMap.put("getForeclosureOrganizationReportTotal", new getForeclosureOrganizationReportTotal());
      processMap.put("queryForeclosureCapitalReport", new queryForeclosureCapitalReport());
      processMap.put("getForeclosureCapitalReportTotal", new getForeclosureCapitalReportTotal());
      processMap.put("queryFinancialStatisticsReport", new queryFinancialStatisticsReport());
      processMap.put("getFinancialStatisticsReportTotal", new getFinancialStatisticsReportTotal());
      processMap.put("queryRefundFeesReport", new queryRefundFeesReport());
      processMap.put("getRefundFeesReportTotal", new getRefundFeesReportTotal());
      processMap.put("queryBusinessApprovalDetail", new queryBusinessApprovalDetail());
      processMap.put("getBusinessApprovalDetailTotal", new getBusinessApprovalDetailTotal());
      processMap.put("queryBusinessApprovalBill", new queryBusinessApprovalBill());
      processMap.put("getBusinessApprovalBillTotal", new getBusinessApprovalBillTotal());
      processMap.put("queryBusinessApprovalBillCount", new queryBusinessApprovalBillCount());
      processMap.put("getBusinessApprovalBillCountTotal", new getBusinessApprovalBillCountTotal());
      processMap.put("queryResuseProjectByPage", new queryResuseProjectByPage());
      processMap.put("queryResuseProjectCount", new queryResuseProjectCount());
      return processMap;
    }

    public static class queryHandleDifferWarnReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryHandleDifferWarnReport_args> {
      public queryHandleDifferWarnReport() {
        super("queryHandleDifferWarnReport");
      }

      public queryHandleDifferWarnReport_args getEmptyArgsInstance() {
        return new queryHandleDifferWarnReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryHandleDifferWarnReport_result getResult(I iface, queryHandleDifferWarnReport_args args) throws org.apache.thrift.TException {
        queryHandleDifferWarnReport_result result = new queryHandleDifferWarnReport_result();
        result.success = iface.queryHandleDifferWarnReport(args.handleDifferWarnReport);
        return result;
      }
    }

    public static class getHandleDifferWarnReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHandleDifferWarnReportTotal_args> {
      public getHandleDifferWarnReportTotal() {
        super("getHandleDifferWarnReportTotal");
      }

      public getHandleDifferWarnReportTotal_args getEmptyArgsInstance() {
        return new getHandleDifferWarnReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHandleDifferWarnReportTotal_result getResult(I iface, getHandleDifferWarnReportTotal_args args) throws org.apache.thrift.TException {
        getHandleDifferWarnReportTotal_result result = new getHandleDifferWarnReportTotal_result();
        result.success = iface.getHandleDifferWarnReportTotal(args.handleDifferWarnReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryBusinessSummary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessSummary_args> {
      public queryBusinessSummary() {
        super("queryBusinessSummary");
      }

      public queryBusinessSummary_args getEmptyArgsInstance() {
        return new queryBusinessSummary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessSummary_result getResult(I iface, queryBusinessSummary_args args) throws org.apache.thrift.TException {
        queryBusinessSummary_result result = new queryBusinessSummary_result();
        result.success = iface.queryBusinessSummary(args.businessSummaryReport);
        return result;
      }
    }

    public static class getBusinessSummaryTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBusinessSummaryTotal_args> {
      public getBusinessSummaryTotal() {
        super("getBusinessSummaryTotal");
      }

      public getBusinessSummaryTotal_args getEmptyArgsInstance() {
        return new getBusinessSummaryTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBusinessSummaryTotal_result getResult(I iface, getBusinessSummaryTotal_args args) throws org.apache.thrift.TException {
        getBusinessSummaryTotal_result result = new getBusinessSummaryTotal_result();
        result.success = iface.getBusinessSummaryTotal(args.businessSummaryReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryChechan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryChechan_args> {
      public queryChechan() {
        super("queryChechan");
      }

      public queryChechan_args getEmptyArgsInstance() {
        return new queryChechan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryChechan_result getResult(I iface, queryChechan_args args) throws org.apache.thrift.TException {
        queryChechan_result result = new queryChechan_result();
        result.success = iface.queryChechan(args.chechanReport);
        return result;
      }
    }

    public static class getChechanTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChechanTotal_args> {
      public getChechanTotal() {
        super("getChechanTotal");
      }

      public getChechanTotal_args getEmptyArgsInstance() {
        return new getChechanTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChechanTotal_result getResult(I iface, getChechanTotal_args args) throws org.apache.thrift.TException {
        getChechanTotal_result result = new getChechanTotal_result();
        result.success = iface.getChechanTotal(args.chechanReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryCollectFeeReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollectFeeReport_args> {
      public queryCollectFeeReport() {
        super("queryCollectFeeReport");
      }

      public queryCollectFeeReport_args getEmptyArgsInstance() {
        return new queryCollectFeeReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollectFeeReport_result getResult(I iface, queryCollectFeeReport_args args) throws org.apache.thrift.TException {
        queryCollectFeeReport_result result = new queryCollectFeeReport_result();
        result.success = iface.queryCollectFeeReport(args.collectFeeReport);
        return result;
      }
    }

    public static class getCollectFeeReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectFeeReportTotal_args> {
      public getCollectFeeReportTotal() {
        super("getCollectFeeReportTotal");
      }

      public getCollectFeeReportTotal_args getEmptyArgsInstance() {
        return new getCollectFeeReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectFeeReportTotal_result getResult(I iface, getCollectFeeReportTotal_args args) throws org.apache.thrift.TException {
        getCollectFeeReportTotal_result result = new getCollectFeeReportTotal_result();
        result.success = iface.getCollectFeeReportTotal(args.collectFeeReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryCollectFeeReportByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollectFeeReportByIds_args> {
      public queryCollectFeeReportByIds() {
        super("queryCollectFeeReportByIds");
      }

      public queryCollectFeeReportByIds_args getEmptyArgsInstance() {
        return new queryCollectFeeReportByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollectFeeReportByIds_result getResult(I iface, queryCollectFeeReportByIds_args args) throws org.apache.thrift.TException {
        queryCollectFeeReportByIds_result result = new queryCollectFeeReportByIds_result();
        result.success = iface.queryCollectFeeReportByIds(args.ids);
        return result;
      }
    }

    public static class queryTrackRecordReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTrackRecordReport_args> {
      public queryTrackRecordReport() {
        super("queryTrackRecordReport");
      }

      public queryTrackRecordReport_args getEmptyArgsInstance() {
        return new queryTrackRecordReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTrackRecordReport_result getResult(I iface, queryTrackRecordReport_args args) throws org.apache.thrift.TException {
        queryTrackRecordReport_result result = new queryTrackRecordReport_result();
        result.success = iface.queryTrackRecordReport(args.trackRecordReport);
        return result;
      }
    }

    public static class queryTrackRecordReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTrackRecordReportTotal_args> {
      public queryTrackRecordReportTotal() {
        super("queryTrackRecordReportTotal");
      }

      public queryTrackRecordReportTotal_args getEmptyArgsInstance() {
        return new queryTrackRecordReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTrackRecordReportTotal_result getResult(I iface, queryTrackRecordReportTotal_args args) throws org.apache.thrift.TException {
        queryTrackRecordReportTotal_result result = new queryTrackRecordReportTotal_result();
        result.success = iface.queryTrackRecordReportTotal(args.trackRecordReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryTrackRecordReportByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTrackRecordReportByIds_args> {
      public queryTrackRecordReportByIds() {
        super("queryTrackRecordReportByIds");
      }

      public queryTrackRecordReportByIds_args getEmptyArgsInstance() {
        return new queryTrackRecordReportByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTrackRecordReportByIds_result getResult(I iface, queryTrackRecordReportByIds_args args) throws org.apache.thrift.TException {
        queryTrackRecordReportByIds_result result = new queryTrackRecordReportByIds_result();
        result.success = iface.queryTrackRecordReportByIds(args.ids);
        return result;
      }
    }

    public static class queryForeclosureReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureReport_args> {
      public queryForeclosureReport() {
        super("queryForeclosureReport");
      }

      public queryForeclosureReport_args getEmptyArgsInstance() {
        return new queryForeclosureReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureReport_result getResult(I iface, queryForeclosureReport_args args) throws org.apache.thrift.TException {
        queryForeclosureReport_result result = new queryForeclosureReport_result();
        result.success = iface.queryForeclosureReport(args.foreclosureReport);
        return result;
      }
    }

    public static class getForeclosureReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getForeclosureReportTotal_args> {
      public getForeclosureReportTotal() {
        super("getForeclosureReportTotal");
      }

      public getForeclosureReportTotal_args getEmptyArgsInstance() {
        return new getForeclosureReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getForeclosureReportTotal_result getResult(I iface, getForeclosureReportTotal_args args) throws org.apache.thrift.TException {
        getForeclosureReportTotal_result result = new getForeclosureReportTotal_result();
        result.success = iface.getForeclosureReportTotal(args.foreclosureReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryNewForeclosureReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryNewForeclosureReport_args> {
      public queryNewForeclosureReport() {
        super("queryNewForeclosureReport");
      }

      public queryNewForeclosureReport_args getEmptyArgsInstance() {
        return new queryNewForeclosureReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryNewForeclosureReport_result getResult(I iface, queryNewForeclosureReport_args args) throws org.apache.thrift.TException {
        queryNewForeclosureReport_result result = new queryNewForeclosureReport_result();
        result.success = iface.queryNewForeclosureReport(args.foreclosureReport);
        return result;
      }
    }

    public static class getNewForeclosureReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewForeclosureReportTotal_args> {
      public getNewForeclosureReportTotal() {
        super("getNewForeclosureReportTotal");
      }

      public getNewForeclosureReportTotal_args getEmptyArgsInstance() {
        return new getNewForeclosureReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewForeclosureReportTotal_result getResult(I iface, getNewForeclosureReportTotal_args args) throws org.apache.thrift.TException {
        getNewForeclosureReportTotal_result result = new getNewForeclosureReportTotal_result();
        result.success = iface.getNewForeclosureReportTotal(args.foreclosureReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class querySquareForeclosureReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySquareForeclosureReport_args> {
      public querySquareForeclosureReport() {
        super("querySquareForeclosureReport");
      }

      public querySquareForeclosureReport_args getEmptyArgsInstance() {
        return new querySquareForeclosureReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySquareForeclosureReport_result getResult(I iface, querySquareForeclosureReport_args args) throws org.apache.thrift.TException {
        querySquareForeclosureReport_result result = new querySquareForeclosureReport_result();
        result.success = iface.querySquareForeclosureReport(args.foreclosureReport);
        return result;
      }
    }

    public static class getSquareForeclosureReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSquareForeclosureReportTotal_args> {
      public getSquareForeclosureReportTotal() {
        super("getSquareForeclosureReportTotal");
      }

      public getSquareForeclosureReportTotal_args getEmptyArgsInstance() {
        return new getSquareForeclosureReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSquareForeclosureReportTotal_result getResult(I iface, getSquareForeclosureReportTotal_args args) throws org.apache.thrift.TException {
        getSquareForeclosureReportTotal_result result = new getSquareForeclosureReportTotal_result();
        result.success = iface.getSquareForeclosureReportTotal(args.foreclosureReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForeclosureOrganizationReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureOrganizationReport_args> {
      public queryForeclosureOrganizationReport() {
        super("queryForeclosureOrganizationReport");
      }

      public queryForeclosureOrganizationReport_args getEmptyArgsInstance() {
        return new queryForeclosureOrganizationReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureOrganizationReport_result getResult(I iface, queryForeclosureOrganizationReport_args args) throws org.apache.thrift.TException {
        queryForeclosureOrganizationReport_result result = new queryForeclosureOrganizationReport_result();
        result.success = iface.queryForeclosureOrganizationReport(args.foreclosureOrganizationReport);
        return result;
      }
    }

    public static class getForeclosureOrganizationReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getForeclosureOrganizationReportTotal_args> {
      public getForeclosureOrganizationReportTotal() {
        super("getForeclosureOrganizationReportTotal");
      }

      public getForeclosureOrganizationReportTotal_args getEmptyArgsInstance() {
        return new getForeclosureOrganizationReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getForeclosureOrganizationReportTotal_result getResult(I iface, getForeclosureOrganizationReportTotal_args args) throws org.apache.thrift.TException {
        getForeclosureOrganizationReportTotal_result result = new getForeclosureOrganizationReportTotal_result();
        result.success = iface.getForeclosureOrganizationReportTotal(args.foreclosureOrganizationReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForeclosureCapitalReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForeclosureCapitalReport_args> {
      public queryForeclosureCapitalReport() {
        super("queryForeclosureCapitalReport");
      }

      public queryForeclosureCapitalReport_args getEmptyArgsInstance() {
        return new queryForeclosureCapitalReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForeclosureCapitalReport_result getResult(I iface, queryForeclosureCapitalReport_args args) throws org.apache.thrift.TException {
        queryForeclosureCapitalReport_result result = new queryForeclosureCapitalReport_result();
        result.success = iface.queryForeclosureCapitalReport(args.foreclosureCapitalReport);
        return result;
      }
    }

    public static class getForeclosureCapitalReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getForeclosureCapitalReportTotal_args> {
      public getForeclosureCapitalReportTotal() {
        super("getForeclosureCapitalReportTotal");
      }

      public getForeclosureCapitalReportTotal_args getEmptyArgsInstance() {
        return new getForeclosureCapitalReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getForeclosureCapitalReportTotal_result getResult(I iface, getForeclosureCapitalReportTotal_args args) throws org.apache.thrift.TException {
        getForeclosureCapitalReportTotal_result result = new getForeclosureCapitalReportTotal_result();
        result.success = iface.getForeclosureCapitalReportTotal(args.foreclosureCapitalReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryFinancialStatisticsReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryFinancialStatisticsReport_args> {
      public queryFinancialStatisticsReport() {
        super("queryFinancialStatisticsReport");
      }

      public queryFinancialStatisticsReport_args getEmptyArgsInstance() {
        return new queryFinancialStatisticsReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryFinancialStatisticsReport_result getResult(I iface, queryFinancialStatisticsReport_args args) throws org.apache.thrift.TException {
        queryFinancialStatisticsReport_result result = new queryFinancialStatisticsReport_result();
        result.success = iface.queryFinancialStatisticsReport(args.financialStatisticsReport);
        return result;
      }
    }

    public static class getFinancialStatisticsReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinancialStatisticsReportTotal_args> {
      public getFinancialStatisticsReportTotal() {
        super("getFinancialStatisticsReportTotal");
      }

      public getFinancialStatisticsReportTotal_args getEmptyArgsInstance() {
        return new getFinancialStatisticsReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinancialStatisticsReportTotal_result getResult(I iface, getFinancialStatisticsReportTotal_args args) throws org.apache.thrift.TException {
        getFinancialStatisticsReportTotal_result result = new getFinancialStatisticsReportTotal_result();
        result.success = iface.getFinancialStatisticsReportTotal(args.financialStatisticsReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryRefundFeesReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRefundFeesReport_args> {
      public queryRefundFeesReport() {
        super("queryRefundFeesReport");
      }

      public queryRefundFeesReport_args getEmptyArgsInstance() {
        return new queryRefundFeesReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRefundFeesReport_result getResult(I iface, queryRefundFeesReport_args args) throws org.apache.thrift.TException {
        queryRefundFeesReport_result result = new queryRefundFeesReport_result();
        result.success = iface.queryRefundFeesReport(args.refundFeesReport);
        return result;
      }
    }

    public static class getRefundFeesReportTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRefundFeesReportTotal_args> {
      public getRefundFeesReportTotal() {
        super("getRefundFeesReportTotal");
      }

      public getRefundFeesReportTotal_args getEmptyArgsInstance() {
        return new getRefundFeesReportTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRefundFeesReportTotal_result getResult(I iface, getRefundFeesReportTotal_args args) throws org.apache.thrift.TException {
        getRefundFeesReportTotal_result result = new getRefundFeesReportTotal_result();
        result.success = iface.getRefundFeesReportTotal(args.refundFeesReport);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryBusinessApprovalDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessApprovalDetail_args> {
      public queryBusinessApprovalDetail() {
        super("queryBusinessApprovalDetail");
      }

      public queryBusinessApprovalDetail_args getEmptyArgsInstance() {
        return new queryBusinessApprovalDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessApprovalDetail_result getResult(I iface, queryBusinessApprovalDetail_args args) throws org.apache.thrift.TException {
        queryBusinessApprovalDetail_result result = new queryBusinessApprovalDetail_result();
        result.success = iface.queryBusinessApprovalDetail(args.businessApprovalDetail);
        return result;
      }
    }

    public static class getBusinessApprovalDetailTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBusinessApprovalDetailTotal_args> {
      public getBusinessApprovalDetailTotal() {
        super("getBusinessApprovalDetailTotal");
      }

      public getBusinessApprovalDetailTotal_args getEmptyArgsInstance() {
        return new getBusinessApprovalDetailTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBusinessApprovalDetailTotal_result getResult(I iface, getBusinessApprovalDetailTotal_args args) throws org.apache.thrift.TException {
        getBusinessApprovalDetailTotal_result result = new getBusinessApprovalDetailTotal_result();
        result.success = iface.getBusinessApprovalDetailTotal(args.businessApprovalDetail);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryBusinessApprovalBill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessApprovalBill_args> {
      public queryBusinessApprovalBill() {
        super("queryBusinessApprovalBill");
      }

      public queryBusinessApprovalBill_args getEmptyArgsInstance() {
        return new queryBusinessApprovalBill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessApprovalBill_result getResult(I iface, queryBusinessApprovalBill_args args) throws org.apache.thrift.TException {
        queryBusinessApprovalBill_result result = new queryBusinessApprovalBill_result();
        result.success = iface.queryBusinessApprovalBill(args.businessApprovalBill);
        return result;
      }
    }

    public static class getBusinessApprovalBillTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBusinessApprovalBillTotal_args> {
      public getBusinessApprovalBillTotal() {
        super("getBusinessApprovalBillTotal");
      }

      public getBusinessApprovalBillTotal_args getEmptyArgsInstance() {
        return new getBusinessApprovalBillTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBusinessApprovalBillTotal_result getResult(I iface, getBusinessApprovalBillTotal_args args) throws org.apache.thrift.TException {
        getBusinessApprovalBillTotal_result result = new getBusinessApprovalBillTotal_result();
        result.success = iface.getBusinessApprovalBillTotal(args.businessApprovalBill);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryBusinessApprovalBillCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessApprovalBillCount_args> {
      public queryBusinessApprovalBillCount() {
        super("queryBusinessApprovalBillCount");
      }

      public queryBusinessApprovalBillCount_args getEmptyArgsInstance() {
        return new queryBusinessApprovalBillCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessApprovalBillCount_result getResult(I iface, queryBusinessApprovalBillCount_args args) throws org.apache.thrift.TException {
        queryBusinessApprovalBillCount_result result = new queryBusinessApprovalBillCount_result();
        result.success = iface.queryBusinessApprovalBillCount(args.businessApprovalBill);
        return result;
      }
    }

    public static class getBusinessApprovalBillCountTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBusinessApprovalBillCountTotal_args> {
      public getBusinessApprovalBillCountTotal() {
        super("getBusinessApprovalBillCountTotal");
      }

      public getBusinessApprovalBillCountTotal_args getEmptyArgsInstance() {
        return new getBusinessApprovalBillCountTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBusinessApprovalBillCountTotal_result getResult(I iface, getBusinessApprovalBillCountTotal_args args) throws org.apache.thrift.TException {
        getBusinessApprovalBillCountTotal_result result = new getBusinessApprovalBillCountTotal_result();
        result.success = iface.getBusinessApprovalBillCountTotal(args.businessApprovalBill);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryResuseProjectByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryResuseProjectByPage_args> {
      public queryResuseProjectByPage() {
        super("queryResuseProjectByPage");
      }

      public queryResuseProjectByPage_args getEmptyArgsInstance() {
        return new queryResuseProjectByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryResuseProjectByPage_result getResult(I iface, queryResuseProjectByPage_args args) throws org.apache.thrift.TException {
        queryResuseProjectByPage_result result = new queryResuseProjectByPage_result();
        result.success = iface.queryResuseProjectByPage(args.query);
        return result;
      }
    }

    public static class queryResuseProjectCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryResuseProjectCount_args> {
      public queryResuseProjectCount() {
        super("queryResuseProjectCount");
      }

      public queryResuseProjectCount_args getEmptyArgsInstance() {
        return new queryResuseProjectCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryResuseProjectCount_result getResult(I iface, queryResuseProjectCount_args args) throws org.apache.thrift.TException {
        queryResuseProjectCount_result result = new queryResuseProjectCount_result();
        result.success = iface.queryResuseProjectCount(args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryHandleDifferWarnReport", new queryHandleDifferWarnReport());
      processMap.put("getHandleDifferWarnReportTotal", new getHandleDifferWarnReportTotal());
      processMap.put("queryBusinessSummary", new queryBusinessSummary());
      processMap.put("getBusinessSummaryTotal", new getBusinessSummaryTotal());
      processMap.put("queryChechan", new queryChechan());
      processMap.put("getChechanTotal", new getChechanTotal());
      processMap.put("queryCollectFeeReport", new queryCollectFeeReport());
      processMap.put("getCollectFeeReportTotal", new getCollectFeeReportTotal());
      processMap.put("queryCollectFeeReportByIds", new queryCollectFeeReportByIds());
      processMap.put("queryTrackRecordReport", new queryTrackRecordReport());
      processMap.put("queryTrackRecordReportTotal", new queryTrackRecordReportTotal());
      processMap.put("queryTrackRecordReportByIds", new queryTrackRecordReportByIds());
      processMap.put("queryForeclosureReport", new queryForeclosureReport());
      processMap.put("getForeclosureReportTotal", new getForeclosureReportTotal());
      processMap.put("queryNewForeclosureReport", new queryNewForeclosureReport());
      processMap.put("getNewForeclosureReportTotal", new getNewForeclosureReportTotal());
      processMap.put("querySquareForeclosureReport", new querySquareForeclosureReport());
      processMap.put("getSquareForeclosureReportTotal", new getSquareForeclosureReportTotal());
      processMap.put("queryForeclosureOrganizationReport", new queryForeclosureOrganizationReport());
      processMap.put("getForeclosureOrganizationReportTotal", new getForeclosureOrganizationReportTotal());
      processMap.put("queryForeclosureCapitalReport", new queryForeclosureCapitalReport());
      processMap.put("getForeclosureCapitalReportTotal", new getForeclosureCapitalReportTotal());
      processMap.put("queryFinancialStatisticsReport", new queryFinancialStatisticsReport());
      processMap.put("getFinancialStatisticsReportTotal", new getFinancialStatisticsReportTotal());
      processMap.put("queryRefundFeesReport", new queryRefundFeesReport());
      processMap.put("getRefundFeesReportTotal", new getRefundFeesReportTotal());
      processMap.put("queryBusinessApprovalDetail", new queryBusinessApprovalDetail());
      processMap.put("getBusinessApprovalDetailTotal", new getBusinessApprovalDetailTotal());
      processMap.put("queryBusinessApprovalBill", new queryBusinessApprovalBill());
      processMap.put("getBusinessApprovalBillTotal", new getBusinessApprovalBillTotal());
      processMap.put("queryBusinessApprovalBillCount", new queryBusinessApprovalBillCount());
      processMap.put("getBusinessApprovalBillCountTotal", new getBusinessApprovalBillCountTotal());
      processMap.put("queryResuseProjectByPage", new queryResuseProjectByPage());
      processMap.put("queryResuseProjectCount", new queryResuseProjectCount());
      return processMap;
    }

    public static class queryHandleDifferWarnReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryHandleDifferWarnReport_args, List<HandleDifferWarnReport>> {
      public queryHandleDifferWarnReport() {
        super("queryHandleDifferWarnReport");
      }

      public queryHandleDifferWarnReport_args getEmptyArgsInstance() {
        return new queryHandleDifferWarnReport_args();
      }

      public AsyncMethodCallback<List<HandleDifferWarnReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HandleDifferWarnReport>>() { 
          public void onComplete(List<HandleDifferWarnReport> o) {
            queryHandleDifferWarnReport_result result = new queryHandleDifferWarnReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryHandleDifferWarnReport_result result = new queryHandleDifferWarnReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryHandleDifferWarnReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<HandleDifferWarnReport>> resultHandler) throws TException {
        iface.queryHandleDifferWarnReport(args.handleDifferWarnReport,resultHandler);
      }
    }

    public static class getHandleDifferWarnReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHandleDifferWarnReportTotal_args, Integer> {
      public getHandleDifferWarnReportTotal() {
        super("getHandleDifferWarnReportTotal");
      }

      public getHandleDifferWarnReportTotal_args getEmptyArgsInstance() {
        return new getHandleDifferWarnReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getHandleDifferWarnReportTotal_result result = new getHandleDifferWarnReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHandleDifferWarnReportTotal_result result = new getHandleDifferWarnReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHandleDifferWarnReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getHandleDifferWarnReportTotal(args.handleDifferWarnReport,resultHandler);
      }
    }

    public static class queryBusinessSummary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessSummary_args, List<BusinessSummaryReport>> {
      public queryBusinessSummary() {
        super("queryBusinessSummary");
      }

      public queryBusinessSummary_args getEmptyArgsInstance() {
        return new queryBusinessSummary_args();
      }

      public AsyncMethodCallback<List<BusinessSummaryReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BusinessSummaryReport>>() { 
          public void onComplete(List<BusinessSummaryReport> o) {
            queryBusinessSummary_result result = new queryBusinessSummary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessSummary_result result = new queryBusinessSummary_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessSummary_args args, org.apache.thrift.async.AsyncMethodCallback<List<BusinessSummaryReport>> resultHandler) throws TException {
        iface.queryBusinessSummary(args.businessSummaryReport,resultHandler);
      }
    }

    public static class getBusinessSummaryTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBusinessSummaryTotal_args, Integer> {
      public getBusinessSummaryTotal() {
        super("getBusinessSummaryTotal");
      }

      public getBusinessSummaryTotal_args getEmptyArgsInstance() {
        return new getBusinessSummaryTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getBusinessSummaryTotal_result result = new getBusinessSummaryTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBusinessSummaryTotal_result result = new getBusinessSummaryTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBusinessSummaryTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getBusinessSummaryTotal(args.businessSummaryReport,resultHandler);
      }
    }

    public static class queryChechan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryChechan_args, List<ChechanReport>> {
      public queryChechan() {
        super("queryChechan");
      }

      public queryChechan_args getEmptyArgsInstance() {
        return new queryChechan_args();
      }

      public AsyncMethodCallback<List<ChechanReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ChechanReport>>() { 
          public void onComplete(List<ChechanReport> o) {
            queryChechan_result result = new queryChechan_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryChechan_result result = new queryChechan_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryChechan_args args, org.apache.thrift.async.AsyncMethodCallback<List<ChechanReport>> resultHandler) throws TException {
        iface.queryChechan(args.chechanReport,resultHandler);
      }
    }

    public static class getChechanTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChechanTotal_args, Integer> {
      public getChechanTotal() {
        super("getChechanTotal");
      }

      public getChechanTotal_args getEmptyArgsInstance() {
        return new getChechanTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getChechanTotal_result result = new getChechanTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getChechanTotal_result result = new getChechanTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChechanTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getChechanTotal(args.chechanReport,resultHandler);
      }
    }

    public static class queryCollectFeeReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollectFeeReport_args, List<CollectFeeReport>> {
      public queryCollectFeeReport() {
        super("queryCollectFeeReport");
      }

      public queryCollectFeeReport_args getEmptyArgsInstance() {
        return new queryCollectFeeReport_args();
      }

      public AsyncMethodCallback<List<CollectFeeReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollectFeeReport>>() { 
          public void onComplete(List<CollectFeeReport> o) {
            queryCollectFeeReport_result result = new queryCollectFeeReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollectFeeReport_result result = new queryCollectFeeReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollectFeeReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollectFeeReport>> resultHandler) throws TException {
        iface.queryCollectFeeReport(args.collectFeeReport,resultHandler);
      }
    }

    public static class getCollectFeeReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectFeeReportTotal_args, Integer> {
      public getCollectFeeReportTotal() {
        super("getCollectFeeReportTotal");
      }

      public getCollectFeeReportTotal_args getEmptyArgsInstance() {
        return new getCollectFeeReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getCollectFeeReportTotal_result result = new getCollectFeeReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCollectFeeReportTotal_result result = new getCollectFeeReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectFeeReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getCollectFeeReportTotal(args.collectFeeReport,resultHandler);
      }
    }

    public static class queryCollectFeeReportByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollectFeeReportByIds_args, List<CollectFeeReport>> {
      public queryCollectFeeReportByIds() {
        super("queryCollectFeeReportByIds");
      }

      public queryCollectFeeReportByIds_args getEmptyArgsInstance() {
        return new queryCollectFeeReportByIds_args();
      }

      public AsyncMethodCallback<List<CollectFeeReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CollectFeeReport>>() { 
          public void onComplete(List<CollectFeeReport> o) {
            queryCollectFeeReportByIds_result result = new queryCollectFeeReportByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollectFeeReportByIds_result result = new queryCollectFeeReportByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollectFeeReportByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<CollectFeeReport>> resultHandler) throws TException {
        iface.queryCollectFeeReportByIds(args.ids,resultHandler);
      }
    }

    public static class queryTrackRecordReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTrackRecordReport_args, List<TrackRecordReport>> {
      public queryTrackRecordReport() {
        super("queryTrackRecordReport");
      }

      public queryTrackRecordReport_args getEmptyArgsInstance() {
        return new queryTrackRecordReport_args();
      }

      public AsyncMethodCallback<List<TrackRecordReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TrackRecordReport>>() { 
          public void onComplete(List<TrackRecordReport> o) {
            queryTrackRecordReport_result result = new queryTrackRecordReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTrackRecordReport_result result = new queryTrackRecordReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTrackRecordReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<TrackRecordReport>> resultHandler) throws TException {
        iface.queryTrackRecordReport(args.trackRecordReport,resultHandler);
      }
    }

    public static class queryTrackRecordReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTrackRecordReportTotal_args, Integer> {
      public queryTrackRecordReportTotal() {
        super("queryTrackRecordReportTotal");
      }

      public queryTrackRecordReportTotal_args getEmptyArgsInstance() {
        return new queryTrackRecordReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryTrackRecordReportTotal_result result = new queryTrackRecordReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTrackRecordReportTotal_result result = new queryTrackRecordReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTrackRecordReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryTrackRecordReportTotal(args.trackRecordReport,resultHandler);
      }
    }

    public static class queryTrackRecordReportByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTrackRecordReportByIds_args, List<TrackRecordReport>> {
      public queryTrackRecordReportByIds() {
        super("queryTrackRecordReportByIds");
      }

      public queryTrackRecordReportByIds_args getEmptyArgsInstance() {
        return new queryTrackRecordReportByIds_args();
      }

      public AsyncMethodCallback<List<TrackRecordReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TrackRecordReport>>() { 
          public void onComplete(List<TrackRecordReport> o) {
            queryTrackRecordReportByIds_result result = new queryTrackRecordReportByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTrackRecordReportByIds_result result = new queryTrackRecordReportByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTrackRecordReportByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<TrackRecordReport>> resultHandler) throws TException {
        iface.queryTrackRecordReportByIds(args.ids,resultHandler);
      }
    }

    public static class queryForeclosureReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureReport_args, List<ForeclosureReport>> {
      public queryForeclosureReport() {
        super("queryForeclosureReport");
      }

      public queryForeclosureReport_args getEmptyArgsInstance() {
        return new queryForeclosureReport_args();
      }

      public AsyncMethodCallback<List<ForeclosureReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureReport>>() { 
          public void onComplete(List<ForeclosureReport> o) {
            queryForeclosureReport_result result = new queryForeclosureReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureReport_result result = new queryForeclosureReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureReport>> resultHandler) throws TException {
        iface.queryForeclosureReport(args.foreclosureReport,resultHandler);
      }
    }

    public static class getForeclosureReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getForeclosureReportTotal_args, Integer> {
      public getForeclosureReportTotal() {
        super("getForeclosureReportTotal");
      }

      public getForeclosureReportTotal_args getEmptyArgsInstance() {
        return new getForeclosureReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getForeclosureReportTotal_result result = new getForeclosureReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getForeclosureReportTotal_result result = new getForeclosureReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getForeclosureReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getForeclosureReportTotal(args.foreclosureReport,resultHandler);
      }
    }

    public static class queryNewForeclosureReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryNewForeclosureReport_args, List<ForeclosureReport>> {
      public queryNewForeclosureReport() {
        super("queryNewForeclosureReport");
      }

      public queryNewForeclosureReport_args getEmptyArgsInstance() {
        return new queryNewForeclosureReport_args();
      }

      public AsyncMethodCallback<List<ForeclosureReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureReport>>() { 
          public void onComplete(List<ForeclosureReport> o) {
            queryNewForeclosureReport_result result = new queryNewForeclosureReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryNewForeclosureReport_result result = new queryNewForeclosureReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryNewForeclosureReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureReport>> resultHandler) throws TException {
        iface.queryNewForeclosureReport(args.foreclosureReport,resultHandler);
      }
    }

    public static class getNewForeclosureReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewForeclosureReportTotal_args, Integer> {
      public getNewForeclosureReportTotal() {
        super("getNewForeclosureReportTotal");
      }

      public getNewForeclosureReportTotal_args getEmptyArgsInstance() {
        return new getNewForeclosureReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getNewForeclosureReportTotal_result result = new getNewForeclosureReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewForeclosureReportTotal_result result = new getNewForeclosureReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewForeclosureReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getNewForeclosureReportTotal(args.foreclosureReport,resultHandler);
      }
    }

    public static class querySquareForeclosureReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySquareForeclosureReport_args, List<ForeclosureReport>> {
      public querySquareForeclosureReport() {
        super("querySquareForeclosureReport");
      }

      public querySquareForeclosureReport_args getEmptyArgsInstance() {
        return new querySquareForeclosureReport_args();
      }

      public AsyncMethodCallback<List<ForeclosureReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureReport>>() { 
          public void onComplete(List<ForeclosureReport> o) {
            querySquareForeclosureReport_result result = new querySquareForeclosureReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySquareForeclosureReport_result result = new querySquareForeclosureReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySquareForeclosureReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureReport>> resultHandler) throws TException {
        iface.querySquareForeclosureReport(args.foreclosureReport,resultHandler);
      }
    }

    public static class getSquareForeclosureReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSquareForeclosureReportTotal_args, Integer> {
      public getSquareForeclosureReportTotal() {
        super("getSquareForeclosureReportTotal");
      }

      public getSquareForeclosureReportTotal_args getEmptyArgsInstance() {
        return new getSquareForeclosureReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getSquareForeclosureReportTotal_result result = new getSquareForeclosureReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSquareForeclosureReportTotal_result result = new getSquareForeclosureReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSquareForeclosureReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getSquareForeclosureReportTotal(args.foreclosureReport,resultHandler);
      }
    }

    public static class queryForeclosureOrganizationReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureOrganizationReport_args, List<ForeclosureOrganizationReport>> {
      public queryForeclosureOrganizationReport() {
        super("queryForeclosureOrganizationReport");
      }

      public queryForeclosureOrganizationReport_args getEmptyArgsInstance() {
        return new queryForeclosureOrganizationReport_args();
      }

      public AsyncMethodCallback<List<ForeclosureOrganizationReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureOrganizationReport>>() { 
          public void onComplete(List<ForeclosureOrganizationReport> o) {
            queryForeclosureOrganizationReport_result result = new queryForeclosureOrganizationReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureOrganizationReport_result result = new queryForeclosureOrganizationReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureOrganizationReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureOrganizationReport>> resultHandler) throws TException {
        iface.queryForeclosureOrganizationReport(args.foreclosureOrganizationReport,resultHandler);
      }
    }

    public static class getForeclosureOrganizationReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getForeclosureOrganizationReportTotal_args, Integer> {
      public getForeclosureOrganizationReportTotal() {
        super("getForeclosureOrganizationReportTotal");
      }

      public getForeclosureOrganizationReportTotal_args getEmptyArgsInstance() {
        return new getForeclosureOrganizationReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getForeclosureOrganizationReportTotal_result result = new getForeclosureOrganizationReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getForeclosureOrganizationReportTotal_result result = new getForeclosureOrganizationReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getForeclosureOrganizationReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getForeclosureOrganizationReportTotal(args.foreclosureOrganizationReport,resultHandler);
      }
    }

    public static class queryForeclosureCapitalReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForeclosureCapitalReport_args, List<ForeclosureCapitalReport>> {
      public queryForeclosureCapitalReport() {
        super("queryForeclosureCapitalReport");
      }

      public queryForeclosureCapitalReport_args getEmptyArgsInstance() {
        return new queryForeclosureCapitalReport_args();
      }

      public AsyncMethodCallback<List<ForeclosureCapitalReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ForeclosureCapitalReport>>() { 
          public void onComplete(List<ForeclosureCapitalReport> o) {
            queryForeclosureCapitalReport_result result = new queryForeclosureCapitalReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryForeclosureCapitalReport_result result = new queryForeclosureCapitalReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForeclosureCapitalReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<ForeclosureCapitalReport>> resultHandler) throws TException {
        iface.queryForeclosureCapitalReport(args.foreclosureCapitalReport,resultHandler);
      }
    }

    public static class getForeclosureCapitalReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getForeclosureCapitalReportTotal_args, Integer> {
      public getForeclosureCapitalReportTotal() {
        super("getForeclosureCapitalReportTotal");
      }

      public getForeclosureCapitalReportTotal_args getEmptyArgsInstance() {
        return new getForeclosureCapitalReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getForeclosureCapitalReportTotal_result result = new getForeclosureCapitalReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getForeclosureCapitalReportTotal_result result = new getForeclosureCapitalReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getForeclosureCapitalReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getForeclosureCapitalReportTotal(args.foreclosureCapitalReport,resultHandler);
      }
    }

    public static class queryFinancialStatisticsReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryFinancialStatisticsReport_args, List<FinancialStatisticsReport>> {
      public queryFinancialStatisticsReport() {
        super("queryFinancialStatisticsReport");
      }

      public queryFinancialStatisticsReport_args getEmptyArgsInstance() {
        return new queryFinancialStatisticsReport_args();
      }

      public AsyncMethodCallback<List<FinancialStatisticsReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FinancialStatisticsReport>>() { 
          public void onComplete(List<FinancialStatisticsReport> o) {
            queryFinancialStatisticsReport_result result = new queryFinancialStatisticsReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryFinancialStatisticsReport_result result = new queryFinancialStatisticsReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryFinancialStatisticsReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<FinancialStatisticsReport>> resultHandler) throws TException {
        iface.queryFinancialStatisticsReport(args.financialStatisticsReport,resultHandler);
      }
    }

    public static class getFinancialStatisticsReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinancialStatisticsReportTotal_args, Integer> {
      public getFinancialStatisticsReportTotal() {
        super("getFinancialStatisticsReportTotal");
      }

      public getFinancialStatisticsReportTotal_args getEmptyArgsInstance() {
        return new getFinancialStatisticsReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getFinancialStatisticsReportTotal_result result = new getFinancialStatisticsReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinancialStatisticsReportTotal_result result = new getFinancialStatisticsReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinancialStatisticsReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getFinancialStatisticsReportTotal(args.financialStatisticsReport,resultHandler);
      }
    }

    public static class queryRefundFeesReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRefundFeesReport_args, List<RefundFeesReport>> {
      public queryRefundFeesReport() {
        super("queryRefundFeesReport");
      }

      public queryRefundFeesReport_args getEmptyArgsInstance() {
        return new queryRefundFeesReport_args();
      }

      public AsyncMethodCallback<List<RefundFeesReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RefundFeesReport>>() { 
          public void onComplete(List<RefundFeesReport> o) {
            queryRefundFeesReport_result result = new queryRefundFeesReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRefundFeesReport_result result = new queryRefundFeesReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRefundFeesReport_args args, org.apache.thrift.async.AsyncMethodCallback<List<RefundFeesReport>> resultHandler) throws TException {
        iface.queryRefundFeesReport(args.refundFeesReport,resultHandler);
      }
    }

    public static class getRefundFeesReportTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRefundFeesReportTotal_args, Integer> {
      public getRefundFeesReportTotal() {
        super("getRefundFeesReportTotal");
      }

      public getRefundFeesReportTotal_args getEmptyArgsInstance() {
        return new getRefundFeesReportTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRefundFeesReportTotal_result result = new getRefundFeesReportTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRefundFeesReportTotal_result result = new getRefundFeesReportTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRefundFeesReportTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRefundFeesReportTotal(args.refundFeesReport,resultHandler);
      }
    }

    public static class queryBusinessApprovalDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessApprovalDetail_args, List<BusinessApprovalDetail>> {
      public queryBusinessApprovalDetail() {
        super("queryBusinessApprovalDetail");
      }

      public queryBusinessApprovalDetail_args getEmptyArgsInstance() {
        return new queryBusinessApprovalDetail_args();
      }

      public AsyncMethodCallback<List<BusinessApprovalDetail>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BusinessApprovalDetail>>() { 
          public void onComplete(List<BusinessApprovalDetail> o) {
            queryBusinessApprovalDetail_result result = new queryBusinessApprovalDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessApprovalDetail_result result = new queryBusinessApprovalDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessApprovalDetail_args args, org.apache.thrift.async.AsyncMethodCallback<List<BusinessApprovalDetail>> resultHandler) throws TException {
        iface.queryBusinessApprovalDetail(args.businessApprovalDetail,resultHandler);
      }
    }

    public static class getBusinessApprovalDetailTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBusinessApprovalDetailTotal_args, Integer> {
      public getBusinessApprovalDetailTotal() {
        super("getBusinessApprovalDetailTotal");
      }

      public getBusinessApprovalDetailTotal_args getEmptyArgsInstance() {
        return new getBusinessApprovalDetailTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getBusinessApprovalDetailTotal_result result = new getBusinessApprovalDetailTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBusinessApprovalDetailTotal_result result = new getBusinessApprovalDetailTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBusinessApprovalDetailTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getBusinessApprovalDetailTotal(args.businessApprovalDetail,resultHandler);
      }
    }

    public static class queryBusinessApprovalBill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessApprovalBill_args, List<BusinessApprovalBill>> {
      public queryBusinessApprovalBill() {
        super("queryBusinessApprovalBill");
      }

      public queryBusinessApprovalBill_args getEmptyArgsInstance() {
        return new queryBusinessApprovalBill_args();
      }

      public AsyncMethodCallback<List<BusinessApprovalBill>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BusinessApprovalBill>>() { 
          public void onComplete(List<BusinessApprovalBill> o) {
            queryBusinessApprovalBill_result result = new queryBusinessApprovalBill_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessApprovalBill_result result = new queryBusinessApprovalBill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessApprovalBill_args args, org.apache.thrift.async.AsyncMethodCallback<List<BusinessApprovalBill>> resultHandler) throws TException {
        iface.queryBusinessApprovalBill(args.businessApprovalBill,resultHandler);
      }
    }

    public static class getBusinessApprovalBillTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBusinessApprovalBillTotal_args, Integer> {
      public getBusinessApprovalBillTotal() {
        super("getBusinessApprovalBillTotal");
      }

      public getBusinessApprovalBillTotal_args getEmptyArgsInstance() {
        return new getBusinessApprovalBillTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getBusinessApprovalBillTotal_result result = new getBusinessApprovalBillTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBusinessApprovalBillTotal_result result = new getBusinessApprovalBillTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBusinessApprovalBillTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getBusinessApprovalBillTotal(args.businessApprovalBill,resultHandler);
      }
    }

    public static class queryBusinessApprovalBillCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessApprovalBillCount_args, List<BusinessApprovalBill>> {
      public queryBusinessApprovalBillCount() {
        super("queryBusinessApprovalBillCount");
      }

      public queryBusinessApprovalBillCount_args getEmptyArgsInstance() {
        return new queryBusinessApprovalBillCount_args();
      }

      public AsyncMethodCallback<List<BusinessApprovalBill>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BusinessApprovalBill>>() { 
          public void onComplete(List<BusinessApprovalBill> o) {
            queryBusinessApprovalBillCount_result result = new queryBusinessApprovalBillCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessApprovalBillCount_result result = new queryBusinessApprovalBillCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessApprovalBillCount_args args, org.apache.thrift.async.AsyncMethodCallback<List<BusinessApprovalBill>> resultHandler) throws TException {
        iface.queryBusinessApprovalBillCount(args.businessApprovalBill,resultHandler);
      }
    }

    public static class getBusinessApprovalBillCountTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBusinessApprovalBillCountTotal_args, Integer> {
      public getBusinessApprovalBillCountTotal() {
        super("getBusinessApprovalBillCountTotal");
      }

      public getBusinessApprovalBillCountTotal_args getEmptyArgsInstance() {
        return new getBusinessApprovalBillCountTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getBusinessApprovalBillCountTotal_result result = new getBusinessApprovalBillCountTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBusinessApprovalBillCountTotal_result result = new getBusinessApprovalBillCountTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBusinessApprovalBillCountTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getBusinessApprovalBillCountTotal(args.businessApprovalBill,resultHandler);
      }
    }

    public static class queryResuseProjectByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryResuseProjectByPage_args, List<RefuseProjectReport>> {
      public queryResuseProjectByPage() {
        super("queryResuseProjectByPage");
      }

      public queryResuseProjectByPage_args getEmptyArgsInstance() {
        return new queryResuseProjectByPage_args();
      }

      public AsyncMethodCallback<List<RefuseProjectReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RefuseProjectReport>>() { 
          public void onComplete(List<RefuseProjectReport> o) {
            queryResuseProjectByPage_result result = new queryResuseProjectByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryResuseProjectByPage_result result = new queryResuseProjectByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryResuseProjectByPage_args args, org.apache.thrift.async.AsyncMethodCallback<List<RefuseProjectReport>> resultHandler) throws TException {
        iface.queryResuseProjectByPage(args.query,resultHandler);
      }
    }

    public static class queryResuseProjectCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryResuseProjectCount_args, Integer> {
      public queryResuseProjectCount() {
        super("queryResuseProjectCount");
      }

      public queryResuseProjectCount_args getEmptyArgsInstance() {
        return new queryResuseProjectCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryResuseProjectCount_result result = new queryResuseProjectCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryResuseProjectCount_result result = new queryResuseProjectCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryResuseProjectCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryResuseProjectCount(args.query,resultHandler);
      }
    }

  }

  public static class queryHandleDifferWarnReport_args implements org.apache.thrift.TBase<queryHandleDifferWarnReport_args, queryHandleDifferWarnReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryHandleDifferWarnReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHandleDifferWarnReport_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHandleDifferWarnReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHandleDifferWarnReport_argsTupleSchemeFactory());
    }

    public HandleDifferWarnReport handleDifferWarnReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_REPORT((short)1, "handleDifferWarnReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_REPORT
            return HANDLE_DIFFER_WARN_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_REPORT, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHandleDifferWarnReport_args.class, metaDataMap);
    }

    public queryHandleDifferWarnReport_args() {
    }

    public queryHandleDifferWarnReport_args(
      HandleDifferWarnReport handleDifferWarnReport)
    {
      this();
      this.handleDifferWarnReport = handleDifferWarnReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHandleDifferWarnReport_args(queryHandleDifferWarnReport_args other) {
      if (other.isSetHandleDifferWarnReport()) {
        this.handleDifferWarnReport = new HandleDifferWarnReport(other.handleDifferWarnReport);
      }
    }

    public queryHandleDifferWarnReport_args deepCopy() {
      return new queryHandleDifferWarnReport_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnReport = null;
    }

    public HandleDifferWarnReport getHandleDifferWarnReport() {
      return this.handleDifferWarnReport;
    }

    public queryHandleDifferWarnReport_args setHandleDifferWarnReport(HandleDifferWarnReport handleDifferWarnReport) {
      this.handleDifferWarnReport = handleDifferWarnReport;
      return this;
    }

    public void unsetHandleDifferWarnReport() {
      this.handleDifferWarnReport = null;
    }

    /** Returns true if field handleDifferWarnReport is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnReport() {
      return this.handleDifferWarnReport != null;
    }

    public void setHandleDifferWarnReportIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_REPORT:
        if (value == null) {
          unsetHandleDifferWarnReport();
        } else {
          setHandleDifferWarnReport((HandleDifferWarnReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_REPORT:
        return getHandleDifferWarnReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_REPORT:
        return isSetHandleDifferWarnReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHandleDifferWarnReport_args)
        return this.equals((queryHandleDifferWarnReport_args)that);
      return false;
    }

    public boolean equals(queryHandleDifferWarnReport_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnReport = true && this.isSetHandleDifferWarnReport();
      boolean that_present_handleDifferWarnReport = true && that.isSetHandleDifferWarnReport();
      if (this_present_handleDifferWarnReport || that_present_handleDifferWarnReport) {
        if (!(this_present_handleDifferWarnReport && that_present_handleDifferWarnReport))
          return false;
        if (!this.handleDifferWarnReport.equals(that.handleDifferWarnReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnReport = true && (isSetHandleDifferWarnReport());
      list.add(present_handleDifferWarnReport);
      if (present_handleDifferWarnReport)
        list.add(handleDifferWarnReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHandleDifferWarnReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnReport()).compareTo(other.isSetHandleDifferWarnReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnReport, other.handleDifferWarnReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHandleDifferWarnReport_args(");
      boolean first = true;

      sb.append("handleDifferWarnReport:");
      if (this.handleDifferWarnReport == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnReport != null) {
        handleDifferWarnReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHandleDifferWarnReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryHandleDifferWarnReport_argsStandardScheme getScheme() {
        return new queryHandleDifferWarnReport_argsStandardScheme();
      }
    }

    private static class queryHandleDifferWarnReport_argsStandardScheme extends StandardScheme<queryHandleDifferWarnReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHandleDifferWarnReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnReport = new HandleDifferWarnReport();
                struct.handleDifferWarnReport.read(iprot);
                struct.setHandleDifferWarnReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHandleDifferWarnReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnReport != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_REPORT_FIELD_DESC);
          struct.handleDifferWarnReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHandleDifferWarnReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryHandleDifferWarnReport_argsTupleScheme getScheme() {
        return new queryHandleDifferWarnReport_argsTupleScheme();
      }
    }

    private static class queryHandleDifferWarnReport_argsTupleScheme extends TupleScheme<queryHandleDifferWarnReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHandleDifferWarnReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnReport()) {
          struct.handleDifferWarnReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHandleDifferWarnReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnReport = new HandleDifferWarnReport();
          struct.handleDifferWarnReport.read(iprot);
          struct.setHandleDifferWarnReportIsSet(true);
        }
      }
    }

  }

  public static class queryHandleDifferWarnReport_result implements org.apache.thrift.TBase<queryHandleDifferWarnReport_result, queryHandleDifferWarnReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryHandleDifferWarnReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHandleDifferWarnReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHandleDifferWarnReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHandleDifferWarnReport_resultTupleSchemeFactory());
    }

    public List<HandleDifferWarnReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHandleDifferWarnReport_result.class, metaDataMap);
    }

    public queryHandleDifferWarnReport_result() {
    }

    public queryHandleDifferWarnReport_result(
      List<HandleDifferWarnReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHandleDifferWarnReport_result(queryHandleDifferWarnReport_result other) {
      if (other.isSetSuccess()) {
        List<HandleDifferWarnReport> __this__success = new ArrayList<HandleDifferWarnReport>(other.success.size());
        for (HandleDifferWarnReport other_element : other.success) {
          __this__success.add(new HandleDifferWarnReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryHandleDifferWarnReport_result deepCopy() {
      return new queryHandleDifferWarnReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HandleDifferWarnReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HandleDifferWarnReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<HandleDifferWarnReport>();
      }
      this.success.add(elem);
    }

    public List<HandleDifferWarnReport> getSuccess() {
      return this.success;
    }

    public queryHandleDifferWarnReport_result setSuccess(List<HandleDifferWarnReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HandleDifferWarnReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHandleDifferWarnReport_result)
        return this.equals((queryHandleDifferWarnReport_result)that);
      return false;
    }

    public boolean equals(queryHandleDifferWarnReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHandleDifferWarnReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHandleDifferWarnReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHandleDifferWarnReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryHandleDifferWarnReport_resultStandardScheme getScheme() {
        return new queryHandleDifferWarnReport_resultStandardScheme();
      }
    }

    private static class queryHandleDifferWarnReport_resultStandardScheme extends StandardScheme<queryHandleDifferWarnReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHandleDifferWarnReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<HandleDifferWarnReport>(_list104.size);
                  HandleDifferWarnReport _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new HandleDifferWarnReport();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHandleDifferWarnReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HandleDifferWarnReport _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHandleDifferWarnReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryHandleDifferWarnReport_resultTupleScheme getScheme() {
        return new queryHandleDifferWarnReport_resultTupleScheme();
      }
    }

    private static class queryHandleDifferWarnReport_resultTupleScheme extends TupleScheme<queryHandleDifferWarnReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHandleDifferWarnReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HandleDifferWarnReport _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHandleDifferWarnReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HandleDifferWarnReport>(_list109.size);
            HandleDifferWarnReport _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new HandleDifferWarnReport();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHandleDifferWarnReportTotal_args implements org.apache.thrift.TBase<getHandleDifferWarnReportTotal_args, getHandleDifferWarnReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDifferWarnReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDifferWarnReportTotal_args");

    private static final org.apache.thrift.protocol.TField HANDLE_DIFFER_WARN_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDifferWarnReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDifferWarnReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDifferWarnReportTotal_argsTupleSchemeFactory());
    }

    public HandleDifferWarnReport handleDifferWarnReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLE_DIFFER_WARN_REPORT((short)1, "handleDifferWarnReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLE_DIFFER_WARN_REPORT
            return HANDLE_DIFFER_WARN_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLE_DIFFER_WARN_REPORT, new org.apache.thrift.meta_data.FieldMetaData("handleDifferWarnReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HandleDifferWarnReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDifferWarnReportTotal_args.class, metaDataMap);
    }

    public getHandleDifferWarnReportTotal_args() {
    }

    public getHandleDifferWarnReportTotal_args(
      HandleDifferWarnReport handleDifferWarnReport)
    {
      this();
      this.handleDifferWarnReport = handleDifferWarnReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDifferWarnReportTotal_args(getHandleDifferWarnReportTotal_args other) {
      if (other.isSetHandleDifferWarnReport()) {
        this.handleDifferWarnReport = new HandleDifferWarnReport(other.handleDifferWarnReport);
      }
    }

    public getHandleDifferWarnReportTotal_args deepCopy() {
      return new getHandleDifferWarnReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.handleDifferWarnReport = null;
    }

    public HandleDifferWarnReport getHandleDifferWarnReport() {
      return this.handleDifferWarnReport;
    }

    public getHandleDifferWarnReportTotal_args setHandleDifferWarnReport(HandleDifferWarnReport handleDifferWarnReport) {
      this.handleDifferWarnReport = handleDifferWarnReport;
      return this;
    }

    public void unsetHandleDifferWarnReport() {
      this.handleDifferWarnReport = null;
    }

    /** Returns true if field handleDifferWarnReport is set (has been assigned a value) and false otherwise */
    public boolean isSetHandleDifferWarnReport() {
      return this.handleDifferWarnReport != null;
    }

    public void setHandleDifferWarnReportIsSet(boolean value) {
      if (!value) {
        this.handleDifferWarnReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HANDLE_DIFFER_WARN_REPORT:
        if (value == null) {
          unsetHandleDifferWarnReport();
        } else {
          setHandleDifferWarnReport((HandleDifferWarnReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLE_DIFFER_WARN_REPORT:
        return getHandleDifferWarnReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HANDLE_DIFFER_WARN_REPORT:
        return isSetHandleDifferWarnReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDifferWarnReportTotal_args)
        return this.equals((getHandleDifferWarnReportTotal_args)that);
      return false;
    }

    public boolean equals(getHandleDifferWarnReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_handleDifferWarnReport = true && this.isSetHandleDifferWarnReport();
      boolean that_present_handleDifferWarnReport = true && that.isSetHandleDifferWarnReport();
      if (this_present_handleDifferWarnReport || that_present_handleDifferWarnReport) {
        if (!(this_present_handleDifferWarnReport && that_present_handleDifferWarnReport))
          return false;
        if (!this.handleDifferWarnReport.equals(that.handleDifferWarnReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_handleDifferWarnReport = true && (isSetHandleDifferWarnReport());
      list.add(present_handleDifferWarnReport);
      if (present_handleDifferWarnReport)
        list.add(handleDifferWarnReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDifferWarnReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHandleDifferWarnReport()).compareTo(other.isSetHandleDifferWarnReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandleDifferWarnReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDifferWarnReport, other.handleDifferWarnReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDifferWarnReportTotal_args(");
      boolean first = true;

      sb.append("handleDifferWarnReport:");
      if (this.handleDifferWarnReport == null) {
        sb.append("null");
      } else {
        sb.append(this.handleDifferWarnReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handleDifferWarnReport != null) {
        handleDifferWarnReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDifferWarnReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnReportTotal_argsStandardScheme getScheme() {
        return new getHandleDifferWarnReportTotal_argsStandardScheme();
      }
    }

    private static class getHandleDifferWarnReportTotal_argsStandardScheme extends StandardScheme<getHandleDifferWarnReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDifferWarnReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLE_DIFFER_WARN_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handleDifferWarnReport = new HandleDifferWarnReport();
                struct.handleDifferWarnReport.read(iprot);
                struct.setHandleDifferWarnReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDifferWarnReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handleDifferWarnReport != null) {
          oprot.writeFieldBegin(HANDLE_DIFFER_WARN_REPORT_FIELD_DESC);
          struct.handleDifferWarnReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDifferWarnReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnReportTotal_argsTupleScheme getScheme() {
        return new getHandleDifferWarnReportTotal_argsTupleScheme();
      }
    }

    private static class getHandleDifferWarnReportTotal_argsTupleScheme extends TupleScheme<getHandleDifferWarnReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHandleDifferWarnReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHandleDifferWarnReport()) {
          struct.handleDifferWarnReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.handleDifferWarnReport = new HandleDifferWarnReport();
          struct.handleDifferWarnReport.read(iprot);
          struct.setHandleDifferWarnReportIsSet(true);
        }
      }
    }

  }

  public static class getHandleDifferWarnReportTotal_result implements org.apache.thrift.TBase<getHandleDifferWarnReportTotal_result, getHandleDifferWarnReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHandleDifferWarnReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHandleDifferWarnReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHandleDifferWarnReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHandleDifferWarnReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHandleDifferWarnReportTotal_result.class, metaDataMap);
    }

    public getHandleDifferWarnReportTotal_result() {
    }

    public getHandleDifferWarnReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHandleDifferWarnReportTotal_result(getHandleDifferWarnReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getHandleDifferWarnReportTotal_result deepCopy() {
      return new getHandleDifferWarnReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getHandleDifferWarnReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHandleDifferWarnReportTotal_result)
        return this.equals((getHandleDifferWarnReportTotal_result)that);
      return false;
    }

    public boolean equals(getHandleDifferWarnReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHandleDifferWarnReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHandleDifferWarnReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHandleDifferWarnReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnReportTotal_resultStandardScheme getScheme() {
        return new getHandleDifferWarnReportTotal_resultStandardScheme();
      }
    }

    private static class getHandleDifferWarnReportTotal_resultStandardScheme extends StandardScheme<getHandleDifferWarnReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHandleDifferWarnReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHandleDifferWarnReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHandleDifferWarnReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getHandleDifferWarnReportTotal_resultTupleScheme getScheme() {
        return new getHandleDifferWarnReportTotal_resultTupleScheme();
      }
    }

    private static class getHandleDifferWarnReportTotal_resultTupleScheme extends TupleScheme<getHandleDifferWarnReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHandleDifferWarnReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessSummary_args implements org.apache.thrift.TBase<queryBusinessSummary_args, queryBusinessSummary_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessSummary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessSummary_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_SUMMARY_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSummaryReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessSummary_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessSummary_argsTupleSchemeFactory());
    }

    public BusinessSummaryReport businessSummaryReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_SUMMARY_REPORT((short)1, "businessSummaryReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_SUMMARY_REPORT
            return BUSINESS_SUMMARY_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_SUMMARY_REPORT, new org.apache.thrift.meta_data.FieldMetaData("businessSummaryReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessSummaryReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessSummary_args.class, metaDataMap);
    }

    public queryBusinessSummary_args() {
    }

    public queryBusinessSummary_args(
      BusinessSummaryReport businessSummaryReport)
    {
      this();
      this.businessSummaryReport = businessSummaryReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessSummary_args(queryBusinessSummary_args other) {
      if (other.isSetBusinessSummaryReport()) {
        this.businessSummaryReport = new BusinessSummaryReport(other.businessSummaryReport);
      }
    }

    public queryBusinessSummary_args deepCopy() {
      return new queryBusinessSummary_args(this);
    }

    @Override
    public void clear() {
      this.businessSummaryReport = null;
    }

    public BusinessSummaryReport getBusinessSummaryReport() {
      return this.businessSummaryReport;
    }

    public queryBusinessSummary_args setBusinessSummaryReport(BusinessSummaryReport businessSummaryReport) {
      this.businessSummaryReport = businessSummaryReport;
      return this;
    }

    public void unsetBusinessSummaryReport() {
      this.businessSummaryReport = null;
    }

    /** Returns true if field businessSummaryReport is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessSummaryReport() {
      return this.businessSummaryReport != null;
    }

    public void setBusinessSummaryReportIsSet(boolean value) {
      if (!value) {
        this.businessSummaryReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_SUMMARY_REPORT:
        if (value == null) {
          unsetBusinessSummaryReport();
        } else {
          setBusinessSummaryReport((BusinessSummaryReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_SUMMARY_REPORT:
        return getBusinessSummaryReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_SUMMARY_REPORT:
        return isSetBusinessSummaryReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessSummary_args)
        return this.equals((queryBusinessSummary_args)that);
      return false;
    }

    public boolean equals(queryBusinessSummary_args that) {
      if (that == null)
        return false;

      boolean this_present_businessSummaryReport = true && this.isSetBusinessSummaryReport();
      boolean that_present_businessSummaryReport = true && that.isSetBusinessSummaryReport();
      if (this_present_businessSummaryReport || that_present_businessSummaryReport) {
        if (!(this_present_businessSummaryReport && that_present_businessSummaryReport))
          return false;
        if (!this.businessSummaryReport.equals(that.businessSummaryReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessSummaryReport = true && (isSetBusinessSummaryReport());
      list.add(present_businessSummaryReport);
      if (present_businessSummaryReport)
        list.add(businessSummaryReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessSummary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessSummaryReport()).compareTo(other.isSetBusinessSummaryReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessSummaryReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSummaryReport, other.businessSummaryReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessSummary_args(");
      boolean first = true;

      sb.append("businessSummaryReport:");
      if (this.businessSummaryReport == null) {
        sb.append("null");
      } else {
        sb.append(this.businessSummaryReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessSummaryReport != null) {
        businessSummaryReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessSummary_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessSummary_argsStandardScheme getScheme() {
        return new queryBusinessSummary_argsStandardScheme();
      }
    }

    private static class queryBusinessSummary_argsStandardScheme extends StandardScheme<queryBusinessSummary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessSummary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_SUMMARY_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessSummaryReport = new BusinessSummaryReport();
                struct.businessSummaryReport.read(iprot);
                struct.setBusinessSummaryReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessSummary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessSummaryReport != null) {
          oprot.writeFieldBegin(BUSINESS_SUMMARY_REPORT_FIELD_DESC);
          struct.businessSummaryReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessSummary_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessSummary_argsTupleScheme getScheme() {
        return new queryBusinessSummary_argsTupleScheme();
      }
    }

    private static class queryBusinessSummary_argsTupleScheme extends TupleScheme<queryBusinessSummary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessSummary_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessSummaryReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessSummaryReport()) {
          struct.businessSummaryReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessSummary_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessSummaryReport = new BusinessSummaryReport();
          struct.businessSummaryReport.read(iprot);
          struct.setBusinessSummaryReportIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessSummary_result implements org.apache.thrift.TBase<queryBusinessSummary_result, queryBusinessSummary_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessSummary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessSummary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessSummary_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessSummary_resultTupleSchemeFactory());
    }

    public List<BusinessSummaryReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessSummaryReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessSummary_result.class, metaDataMap);
    }

    public queryBusinessSummary_result() {
    }

    public queryBusinessSummary_result(
      List<BusinessSummaryReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessSummary_result(queryBusinessSummary_result other) {
      if (other.isSetSuccess()) {
        List<BusinessSummaryReport> __this__success = new ArrayList<BusinessSummaryReport>(other.success.size());
        for (BusinessSummaryReport other_element : other.success) {
          __this__success.add(new BusinessSummaryReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryBusinessSummary_result deepCopy() {
      return new queryBusinessSummary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BusinessSummaryReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BusinessSummaryReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<BusinessSummaryReport>();
      }
      this.success.add(elem);
    }

    public List<BusinessSummaryReport> getSuccess() {
      return this.success;
    }

    public queryBusinessSummary_result setSuccess(List<BusinessSummaryReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BusinessSummaryReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessSummary_result)
        return this.equals((queryBusinessSummary_result)that);
      return false;
    }

    public boolean equals(queryBusinessSummary_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessSummary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessSummary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessSummary_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessSummary_resultStandardScheme getScheme() {
        return new queryBusinessSummary_resultStandardScheme();
      }
    }

    private static class queryBusinessSummary_resultStandardScheme extends StandardScheme<queryBusinessSummary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessSummary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<BusinessSummaryReport>(_list112.size);
                  BusinessSummaryReport _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new BusinessSummaryReport();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessSummary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BusinessSummaryReport _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessSummary_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessSummary_resultTupleScheme getScheme() {
        return new queryBusinessSummary_resultTupleScheme();
      }
    }

    private static class queryBusinessSummary_resultTupleScheme extends TupleScheme<queryBusinessSummary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessSummary_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BusinessSummaryReport _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessSummary_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BusinessSummaryReport>(_list117.size);
            BusinessSummaryReport _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new BusinessSummaryReport();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBusinessSummaryTotal_args implements org.apache.thrift.TBase<getBusinessSummaryTotal_args, getBusinessSummaryTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessSummaryTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessSummaryTotal_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_SUMMARY_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSummaryReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessSummaryTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessSummaryTotal_argsTupleSchemeFactory());
    }

    public BusinessSummaryReport businessSummaryReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_SUMMARY_REPORT((short)1, "businessSummaryReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_SUMMARY_REPORT
            return BUSINESS_SUMMARY_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_SUMMARY_REPORT, new org.apache.thrift.meta_data.FieldMetaData("businessSummaryReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessSummaryReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessSummaryTotal_args.class, metaDataMap);
    }

    public getBusinessSummaryTotal_args() {
    }

    public getBusinessSummaryTotal_args(
      BusinessSummaryReport businessSummaryReport)
    {
      this();
      this.businessSummaryReport = businessSummaryReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessSummaryTotal_args(getBusinessSummaryTotal_args other) {
      if (other.isSetBusinessSummaryReport()) {
        this.businessSummaryReport = new BusinessSummaryReport(other.businessSummaryReport);
      }
    }

    public getBusinessSummaryTotal_args deepCopy() {
      return new getBusinessSummaryTotal_args(this);
    }

    @Override
    public void clear() {
      this.businessSummaryReport = null;
    }

    public BusinessSummaryReport getBusinessSummaryReport() {
      return this.businessSummaryReport;
    }

    public getBusinessSummaryTotal_args setBusinessSummaryReport(BusinessSummaryReport businessSummaryReport) {
      this.businessSummaryReport = businessSummaryReport;
      return this;
    }

    public void unsetBusinessSummaryReport() {
      this.businessSummaryReport = null;
    }

    /** Returns true if field businessSummaryReport is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessSummaryReport() {
      return this.businessSummaryReport != null;
    }

    public void setBusinessSummaryReportIsSet(boolean value) {
      if (!value) {
        this.businessSummaryReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_SUMMARY_REPORT:
        if (value == null) {
          unsetBusinessSummaryReport();
        } else {
          setBusinessSummaryReport((BusinessSummaryReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_SUMMARY_REPORT:
        return getBusinessSummaryReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_SUMMARY_REPORT:
        return isSetBusinessSummaryReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessSummaryTotal_args)
        return this.equals((getBusinessSummaryTotal_args)that);
      return false;
    }

    public boolean equals(getBusinessSummaryTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_businessSummaryReport = true && this.isSetBusinessSummaryReport();
      boolean that_present_businessSummaryReport = true && that.isSetBusinessSummaryReport();
      if (this_present_businessSummaryReport || that_present_businessSummaryReport) {
        if (!(this_present_businessSummaryReport && that_present_businessSummaryReport))
          return false;
        if (!this.businessSummaryReport.equals(that.businessSummaryReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessSummaryReport = true && (isSetBusinessSummaryReport());
      list.add(present_businessSummaryReport);
      if (present_businessSummaryReport)
        list.add(businessSummaryReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessSummaryTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessSummaryReport()).compareTo(other.isSetBusinessSummaryReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessSummaryReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSummaryReport, other.businessSummaryReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessSummaryTotal_args(");
      boolean first = true;

      sb.append("businessSummaryReport:");
      if (this.businessSummaryReport == null) {
        sb.append("null");
      } else {
        sb.append(this.businessSummaryReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessSummaryReport != null) {
        businessSummaryReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessSummaryTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getBusinessSummaryTotal_argsStandardScheme getScheme() {
        return new getBusinessSummaryTotal_argsStandardScheme();
      }
    }

    private static class getBusinessSummaryTotal_argsStandardScheme extends StandardScheme<getBusinessSummaryTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessSummaryTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_SUMMARY_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessSummaryReport = new BusinessSummaryReport();
                struct.businessSummaryReport.read(iprot);
                struct.setBusinessSummaryReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessSummaryTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessSummaryReport != null) {
          oprot.writeFieldBegin(BUSINESS_SUMMARY_REPORT_FIELD_DESC);
          struct.businessSummaryReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessSummaryTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getBusinessSummaryTotal_argsTupleScheme getScheme() {
        return new getBusinessSummaryTotal_argsTupleScheme();
      }
    }

    private static class getBusinessSummaryTotal_argsTupleScheme extends TupleScheme<getBusinessSummaryTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessSummaryTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessSummaryReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessSummaryReport()) {
          struct.businessSummaryReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessSummaryTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessSummaryReport = new BusinessSummaryReport();
          struct.businessSummaryReport.read(iprot);
          struct.setBusinessSummaryReportIsSet(true);
        }
      }
    }

  }

  public static class getBusinessSummaryTotal_result implements org.apache.thrift.TBase<getBusinessSummaryTotal_result, getBusinessSummaryTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessSummaryTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessSummaryTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessSummaryTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessSummaryTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessSummaryTotal_result.class, metaDataMap);
    }

    public getBusinessSummaryTotal_result() {
    }

    public getBusinessSummaryTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessSummaryTotal_result(getBusinessSummaryTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getBusinessSummaryTotal_result deepCopy() {
      return new getBusinessSummaryTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getBusinessSummaryTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessSummaryTotal_result)
        return this.equals((getBusinessSummaryTotal_result)that);
      return false;
    }

    public boolean equals(getBusinessSummaryTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessSummaryTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessSummaryTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessSummaryTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getBusinessSummaryTotal_resultStandardScheme getScheme() {
        return new getBusinessSummaryTotal_resultStandardScheme();
      }
    }

    private static class getBusinessSummaryTotal_resultStandardScheme extends StandardScheme<getBusinessSummaryTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessSummaryTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessSummaryTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessSummaryTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getBusinessSummaryTotal_resultTupleScheme getScheme() {
        return new getBusinessSummaryTotal_resultTupleScheme();
      }
    }

    private static class getBusinessSummaryTotal_resultTupleScheme extends TupleScheme<getBusinessSummaryTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessSummaryTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessSummaryTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryChechan_args implements org.apache.thrift.TBase<queryChechan_args, queryChechan_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryChechan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChechan_args");

    private static final org.apache.thrift.protocol.TField CHECHAN_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChechan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChechan_argsTupleSchemeFactory());
    }

    public ChechanReport chechanReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECHAN_REPORT((short)1, "chechanReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECHAN_REPORT
            return CHECHAN_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECHAN_REPORT, new org.apache.thrift.meta_data.FieldMetaData("chechanReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChechanReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChechan_args.class, metaDataMap);
    }

    public queryChechan_args() {
    }

    public queryChechan_args(
      ChechanReport chechanReport)
    {
      this();
      this.chechanReport = chechanReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChechan_args(queryChechan_args other) {
      if (other.isSetChechanReport()) {
        this.chechanReport = new ChechanReport(other.chechanReport);
      }
    }

    public queryChechan_args deepCopy() {
      return new queryChechan_args(this);
    }

    @Override
    public void clear() {
      this.chechanReport = null;
    }

    public ChechanReport getChechanReport() {
      return this.chechanReport;
    }

    public queryChechan_args setChechanReport(ChechanReport chechanReport) {
      this.chechanReport = chechanReport;
      return this;
    }

    public void unsetChechanReport() {
      this.chechanReport = null;
    }

    /** Returns true if field chechanReport is set (has been assigned a value) and false otherwise */
    public boolean isSetChechanReport() {
      return this.chechanReport != null;
    }

    public void setChechanReportIsSet(boolean value) {
      if (!value) {
        this.chechanReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECHAN_REPORT:
        if (value == null) {
          unsetChechanReport();
        } else {
          setChechanReport((ChechanReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECHAN_REPORT:
        return getChechanReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECHAN_REPORT:
        return isSetChechanReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChechan_args)
        return this.equals((queryChechan_args)that);
      return false;
    }

    public boolean equals(queryChechan_args that) {
      if (that == null)
        return false;

      boolean this_present_chechanReport = true && this.isSetChechanReport();
      boolean that_present_chechanReport = true && that.isSetChechanReport();
      if (this_present_chechanReport || that_present_chechanReport) {
        if (!(this_present_chechanReport && that_present_chechanReport))
          return false;
        if (!this.chechanReport.equals(that.chechanReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_chechanReport = true && (isSetChechanReport());
      list.add(present_chechanReport);
      if (present_chechanReport)
        list.add(chechanReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChechan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChechanReport()).compareTo(other.isSetChechanReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChechanReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanReport, other.chechanReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChechan_args(");
      boolean first = true;

      sb.append("chechanReport:");
      if (this.chechanReport == null) {
        sb.append("null");
      } else {
        sb.append(this.chechanReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (chechanReport != null) {
        chechanReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChechan_argsStandardSchemeFactory implements SchemeFactory {
      public queryChechan_argsStandardScheme getScheme() {
        return new queryChechan_argsStandardScheme();
      }
    }

    private static class queryChechan_argsStandardScheme extends StandardScheme<queryChechan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChechan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECHAN_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.chechanReport = new ChechanReport();
                struct.chechanReport.read(iprot);
                struct.setChechanReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChechan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chechanReport != null) {
          oprot.writeFieldBegin(CHECHAN_REPORT_FIELD_DESC);
          struct.chechanReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChechan_argsTupleSchemeFactory implements SchemeFactory {
      public queryChechan_argsTupleScheme getScheme() {
        return new queryChechan_argsTupleScheme();
      }
    }

    private static class queryChechan_argsTupleScheme extends TupleScheme<queryChechan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChechan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChechanReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChechanReport()) {
          struct.chechanReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChechan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.chechanReport = new ChechanReport();
          struct.chechanReport.read(iprot);
          struct.setChechanReportIsSet(true);
        }
      }
    }

  }

  public static class queryChechan_result implements org.apache.thrift.TBase<queryChechan_result, queryChechan_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryChechan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryChechan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryChechan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryChechan_resultTupleSchemeFactory());
    }

    public List<ChechanReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChechanReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryChechan_result.class, metaDataMap);
    }

    public queryChechan_result() {
    }

    public queryChechan_result(
      List<ChechanReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryChechan_result(queryChechan_result other) {
      if (other.isSetSuccess()) {
        List<ChechanReport> __this__success = new ArrayList<ChechanReport>(other.success.size());
        for (ChechanReport other_element : other.success) {
          __this__success.add(new ChechanReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryChechan_result deepCopy() {
      return new queryChechan_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ChechanReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ChechanReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ChechanReport>();
      }
      this.success.add(elem);
    }

    public List<ChechanReport> getSuccess() {
      return this.success;
    }

    public queryChechan_result setSuccess(List<ChechanReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ChechanReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryChechan_result)
        return this.equals((queryChechan_result)that);
      return false;
    }

    public boolean equals(queryChechan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryChechan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryChechan_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryChechan_resultStandardSchemeFactory implements SchemeFactory {
      public queryChechan_resultStandardScheme getScheme() {
        return new queryChechan_resultStandardScheme();
      }
    }

    private static class queryChechan_resultStandardScheme extends StandardScheme<queryChechan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryChechan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<ChechanReport>(_list120.size);
                  ChechanReport _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new ChechanReport();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryChechan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ChechanReport _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryChechan_resultTupleSchemeFactory implements SchemeFactory {
      public queryChechan_resultTupleScheme getScheme() {
        return new queryChechan_resultTupleScheme();
      }
    }

    private static class queryChechan_resultTupleScheme extends TupleScheme<queryChechan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryChechan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ChechanReport _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryChechan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ChechanReport>(_list125.size);
            ChechanReport _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new ChechanReport();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getChechanTotal_args implements org.apache.thrift.TBase<getChechanTotal_args, getChechanTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChechanTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChechanTotal_args");

    private static final org.apache.thrift.protocol.TField CHECHAN_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("chechanReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChechanTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChechanTotal_argsTupleSchemeFactory());
    }

    public ChechanReport chechanReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECHAN_REPORT((short)1, "chechanReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECHAN_REPORT
            return CHECHAN_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECHAN_REPORT, new org.apache.thrift.meta_data.FieldMetaData("chechanReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChechanReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChechanTotal_args.class, metaDataMap);
    }

    public getChechanTotal_args() {
    }

    public getChechanTotal_args(
      ChechanReport chechanReport)
    {
      this();
      this.chechanReport = chechanReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChechanTotal_args(getChechanTotal_args other) {
      if (other.isSetChechanReport()) {
        this.chechanReport = new ChechanReport(other.chechanReport);
      }
    }

    public getChechanTotal_args deepCopy() {
      return new getChechanTotal_args(this);
    }

    @Override
    public void clear() {
      this.chechanReport = null;
    }

    public ChechanReport getChechanReport() {
      return this.chechanReport;
    }

    public getChechanTotal_args setChechanReport(ChechanReport chechanReport) {
      this.chechanReport = chechanReport;
      return this;
    }

    public void unsetChechanReport() {
      this.chechanReport = null;
    }

    /** Returns true if field chechanReport is set (has been assigned a value) and false otherwise */
    public boolean isSetChechanReport() {
      return this.chechanReport != null;
    }

    public void setChechanReportIsSet(boolean value) {
      if (!value) {
        this.chechanReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECHAN_REPORT:
        if (value == null) {
          unsetChechanReport();
        } else {
          setChechanReport((ChechanReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECHAN_REPORT:
        return getChechanReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECHAN_REPORT:
        return isSetChechanReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChechanTotal_args)
        return this.equals((getChechanTotal_args)that);
      return false;
    }

    public boolean equals(getChechanTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_chechanReport = true && this.isSetChechanReport();
      boolean that_present_chechanReport = true && that.isSetChechanReport();
      if (this_present_chechanReport || that_present_chechanReport) {
        if (!(this_present_chechanReport && that_present_chechanReport))
          return false;
        if (!this.chechanReport.equals(that.chechanReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_chechanReport = true && (isSetChechanReport());
      list.add(present_chechanReport);
      if (present_chechanReport)
        list.add(chechanReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChechanTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChechanReport()).compareTo(other.isSetChechanReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChechanReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chechanReport, other.chechanReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChechanTotal_args(");
      boolean first = true;

      sb.append("chechanReport:");
      if (this.chechanReport == null) {
        sb.append("null");
      } else {
        sb.append(this.chechanReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (chechanReport != null) {
        chechanReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChechanTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getChechanTotal_argsStandardScheme getScheme() {
        return new getChechanTotal_argsStandardScheme();
      }
    }

    private static class getChechanTotal_argsStandardScheme extends StandardScheme<getChechanTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChechanTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECHAN_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.chechanReport = new ChechanReport();
                struct.chechanReport.read(iprot);
                struct.setChechanReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChechanTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chechanReport != null) {
          oprot.writeFieldBegin(CHECHAN_REPORT_FIELD_DESC);
          struct.chechanReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChechanTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getChechanTotal_argsTupleScheme getScheme() {
        return new getChechanTotal_argsTupleScheme();
      }
    }

    private static class getChechanTotal_argsTupleScheme extends TupleScheme<getChechanTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChechanTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChechanReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChechanReport()) {
          struct.chechanReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChechanTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.chechanReport = new ChechanReport();
          struct.chechanReport.read(iprot);
          struct.setChechanReportIsSet(true);
        }
      }
    }

  }

  public static class getChechanTotal_result implements org.apache.thrift.TBase<getChechanTotal_result, getChechanTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChechanTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChechanTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getChechanTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getChechanTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChechanTotal_result.class, metaDataMap);
    }

    public getChechanTotal_result() {
    }

    public getChechanTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChechanTotal_result(getChechanTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getChechanTotal_result deepCopy() {
      return new getChechanTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getChechanTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChechanTotal_result)
        return this.equals((getChechanTotal_result)that);
      return false;
    }

    public boolean equals(getChechanTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getChechanTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getChechanTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChechanTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getChechanTotal_resultStandardScheme getScheme() {
        return new getChechanTotal_resultStandardScheme();
      }
    }

    private static class getChechanTotal_resultStandardScheme extends StandardScheme<getChechanTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChechanTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChechanTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChechanTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getChechanTotal_resultTupleScheme getScheme() {
        return new getChechanTotal_resultTupleScheme();
      }
    }

    private static class getChechanTotal_resultTupleScheme extends TupleScheme<getChechanTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChechanTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChechanTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollectFeeReport_args implements org.apache.thrift.TBase<queryCollectFeeReport_args, queryCollectFeeReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollectFeeReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollectFeeReport_args");

    private static final org.apache.thrift.protocol.TField COLLECT_FEE_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFeeReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollectFeeReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollectFeeReport_argsTupleSchemeFactory());
    }

    public CollectFeeReport collectFeeReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECT_FEE_REPORT((short)1, "collectFeeReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECT_FEE_REPORT
            return COLLECT_FEE_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECT_FEE_REPORT, new org.apache.thrift.meta_data.FieldMetaData("collectFeeReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFeeReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollectFeeReport_args.class, metaDataMap);
    }

    public queryCollectFeeReport_args() {
    }

    public queryCollectFeeReport_args(
      CollectFeeReport collectFeeReport)
    {
      this();
      this.collectFeeReport = collectFeeReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollectFeeReport_args(queryCollectFeeReport_args other) {
      if (other.isSetCollectFeeReport()) {
        this.collectFeeReport = new CollectFeeReport(other.collectFeeReport);
      }
    }

    public queryCollectFeeReport_args deepCopy() {
      return new queryCollectFeeReport_args(this);
    }

    @Override
    public void clear() {
      this.collectFeeReport = null;
    }

    public CollectFeeReport getCollectFeeReport() {
      return this.collectFeeReport;
    }

    public queryCollectFeeReport_args setCollectFeeReport(CollectFeeReport collectFeeReport) {
      this.collectFeeReport = collectFeeReport;
      return this;
    }

    public void unsetCollectFeeReport() {
      this.collectFeeReport = null;
    }

    /** Returns true if field collectFeeReport is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectFeeReport() {
      return this.collectFeeReport != null;
    }

    public void setCollectFeeReportIsSet(boolean value) {
      if (!value) {
        this.collectFeeReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECT_FEE_REPORT:
        if (value == null) {
          unsetCollectFeeReport();
        } else {
          setCollectFeeReport((CollectFeeReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECT_FEE_REPORT:
        return getCollectFeeReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECT_FEE_REPORT:
        return isSetCollectFeeReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollectFeeReport_args)
        return this.equals((queryCollectFeeReport_args)that);
      return false;
    }

    public boolean equals(queryCollectFeeReport_args that) {
      if (that == null)
        return false;

      boolean this_present_collectFeeReport = true && this.isSetCollectFeeReport();
      boolean that_present_collectFeeReport = true && that.isSetCollectFeeReport();
      if (this_present_collectFeeReport || that_present_collectFeeReport) {
        if (!(this_present_collectFeeReport && that_present_collectFeeReport))
          return false;
        if (!this.collectFeeReport.equals(that.collectFeeReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectFeeReport = true && (isSetCollectFeeReport());
      list.add(present_collectFeeReport);
      if (present_collectFeeReport)
        list.add(collectFeeReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollectFeeReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectFeeReport()).compareTo(other.isSetCollectFeeReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectFeeReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFeeReport, other.collectFeeReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollectFeeReport_args(");
      boolean first = true;

      sb.append("collectFeeReport:");
      if (this.collectFeeReport == null) {
        sb.append("null");
      } else {
        sb.append(this.collectFeeReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectFeeReport != null) {
        collectFeeReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollectFeeReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollectFeeReport_argsStandardScheme getScheme() {
        return new queryCollectFeeReport_argsStandardScheme();
      }
    }

    private static class queryCollectFeeReport_argsStandardScheme extends StandardScheme<queryCollectFeeReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollectFeeReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECT_FEE_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectFeeReport = new CollectFeeReport();
                struct.collectFeeReport.read(iprot);
                struct.setCollectFeeReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollectFeeReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectFeeReport != null) {
          oprot.writeFieldBegin(COLLECT_FEE_REPORT_FIELD_DESC);
          struct.collectFeeReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollectFeeReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollectFeeReport_argsTupleScheme getScheme() {
        return new queryCollectFeeReport_argsTupleScheme();
      }
    }

    private static class queryCollectFeeReport_argsTupleScheme extends TupleScheme<queryCollectFeeReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollectFeeReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectFeeReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectFeeReport()) {
          struct.collectFeeReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollectFeeReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectFeeReport = new CollectFeeReport();
          struct.collectFeeReport.read(iprot);
          struct.setCollectFeeReportIsSet(true);
        }
      }
    }

  }

  public static class queryCollectFeeReport_result implements org.apache.thrift.TBase<queryCollectFeeReport_result, queryCollectFeeReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollectFeeReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollectFeeReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollectFeeReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollectFeeReport_resultTupleSchemeFactory());
    }

    public List<CollectFeeReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFeeReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollectFeeReport_result.class, metaDataMap);
    }

    public queryCollectFeeReport_result() {
    }

    public queryCollectFeeReport_result(
      List<CollectFeeReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollectFeeReport_result(queryCollectFeeReport_result other) {
      if (other.isSetSuccess()) {
        List<CollectFeeReport> __this__success = new ArrayList<CollectFeeReport>(other.success.size());
        for (CollectFeeReport other_element : other.success) {
          __this__success.add(new CollectFeeReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollectFeeReport_result deepCopy() {
      return new queryCollectFeeReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollectFeeReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollectFeeReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollectFeeReport>();
      }
      this.success.add(elem);
    }

    public List<CollectFeeReport> getSuccess() {
      return this.success;
    }

    public queryCollectFeeReport_result setSuccess(List<CollectFeeReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollectFeeReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollectFeeReport_result)
        return this.equals((queryCollectFeeReport_result)that);
      return false;
    }

    public boolean equals(queryCollectFeeReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollectFeeReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollectFeeReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollectFeeReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollectFeeReport_resultStandardScheme getScheme() {
        return new queryCollectFeeReport_resultStandardScheme();
      }
    }

    private static class queryCollectFeeReport_resultStandardScheme extends StandardScheme<queryCollectFeeReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollectFeeReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<CollectFeeReport>(_list128.size);
                  CollectFeeReport _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new CollectFeeReport();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollectFeeReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollectFeeReport _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollectFeeReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollectFeeReport_resultTupleScheme getScheme() {
        return new queryCollectFeeReport_resultTupleScheme();
      }
    }

    private static class queryCollectFeeReport_resultTupleScheme extends TupleScheme<queryCollectFeeReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollectFeeReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollectFeeReport _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollectFeeReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollectFeeReport>(_list133.size);
            CollectFeeReport _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new CollectFeeReport();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCollectFeeReportTotal_args implements org.apache.thrift.TBase<getCollectFeeReportTotal_args, getCollectFeeReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectFeeReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectFeeReportTotal_args");

    private static final org.apache.thrift.protocol.TField COLLECT_FEE_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("collectFeeReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectFeeReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectFeeReportTotal_argsTupleSchemeFactory());
    }

    public CollectFeeReport collectFeeReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLLECT_FEE_REPORT((short)1, "collectFeeReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLLECT_FEE_REPORT
            return COLLECT_FEE_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLLECT_FEE_REPORT, new org.apache.thrift.meta_data.FieldMetaData("collectFeeReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFeeReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectFeeReportTotal_args.class, metaDataMap);
    }

    public getCollectFeeReportTotal_args() {
    }

    public getCollectFeeReportTotal_args(
      CollectFeeReport collectFeeReport)
    {
      this();
      this.collectFeeReport = collectFeeReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectFeeReportTotal_args(getCollectFeeReportTotal_args other) {
      if (other.isSetCollectFeeReport()) {
        this.collectFeeReport = new CollectFeeReport(other.collectFeeReport);
      }
    }

    public getCollectFeeReportTotal_args deepCopy() {
      return new getCollectFeeReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.collectFeeReport = null;
    }

    public CollectFeeReport getCollectFeeReport() {
      return this.collectFeeReport;
    }

    public getCollectFeeReportTotal_args setCollectFeeReport(CollectFeeReport collectFeeReport) {
      this.collectFeeReport = collectFeeReport;
      return this;
    }

    public void unsetCollectFeeReport() {
      this.collectFeeReport = null;
    }

    /** Returns true if field collectFeeReport is set (has been assigned a value) and false otherwise */
    public boolean isSetCollectFeeReport() {
      return this.collectFeeReport != null;
    }

    public void setCollectFeeReportIsSet(boolean value) {
      if (!value) {
        this.collectFeeReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLLECT_FEE_REPORT:
        if (value == null) {
          unsetCollectFeeReport();
        } else {
          setCollectFeeReport((CollectFeeReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLLECT_FEE_REPORT:
        return getCollectFeeReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLLECT_FEE_REPORT:
        return isSetCollectFeeReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectFeeReportTotal_args)
        return this.equals((getCollectFeeReportTotal_args)that);
      return false;
    }

    public boolean equals(getCollectFeeReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_collectFeeReport = true && this.isSetCollectFeeReport();
      boolean that_present_collectFeeReport = true && that.isSetCollectFeeReport();
      if (this_present_collectFeeReport || that_present_collectFeeReport) {
        if (!(this_present_collectFeeReport && that_present_collectFeeReport))
          return false;
        if (!this.collectFeeReport.equals(that.collectFeeReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_collectFeeReport = true && (isSetCollectFeeReport());
      list.add(present_collectFeeReport);
      if (present_collectFeeReport)
        list.add(collectFeeReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectFeeReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCollectFeeReport()).compareTo(other.isSetCollectFeeReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollectFeeReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectFeeReport, other.collectFeeReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectFeeReportTotal_args(");
      boolean first = true;

      sb.append("collectFeeReport:");
      if (this.collectFeeReport == null) {
        sb.append("null");
      } else {
        sb.append(this.collectFeeReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (collectFeeReport != null) {
        collectFeeReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectFeeReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getCollectFeeReportTotal_argsStandardScheme getScheme() {
        return new getCollectFeeReportTotal_argsStandardScheme();
      }
    }

    private static class getCollectFeeReportTotal_argsStandardScheme extends StandardScheme<getCollectFeeReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectFeeReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLLECT_FEE_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.collectFeeReport = new CollectFeeReport();
                struct.collectFeeReport.read(iprot);
                struct.setCollectFeeReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectFeeReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.collectFeeReport != null) {
          oprot.writeFieldBegin(COLLECT_FEE_REPORT_FIELD_DESC);
          struct.collectFeeReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectFeeReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getCollectFeeReportTotal_argsTupleScheme getScheme() {
        return new getCollectFeeReportTotal_argsTupleScheme();
      }
    }

    private static class getCollectFeeReportTotal_argsTupleScheme extends TupleScheme<getCollectFeeReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectFeeReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCollectFeeReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCollectFeeReport()) {
          struct.collectFeeReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectFeeReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.collectFeeReport = new CollectFeeReport();
          struct.collectFeeReport.read(iprot);
          struct.setCollectFeeReportIsSet(true);
        }
      }
    }

  }

  public static class getCollectFeeReportTotal_result implements org.apache.thrift.TBase<getCollectFeeReportTotal_result, getCollectFeeReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectFeeReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectFeeReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCollectFeeReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCollectFeeReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectFeeReportTotal_result.class, metaDataMap);
    }

    public getCollectFeeReportTotal_result() {
    }

    public getCollectFeeReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectFeeReportTotal_result(getCollectFeeReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCollectFeeReportTotal_result deepCopy() {
      return new getCollectFeeReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getCollectFeeReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectFeeReportTotal_result)
        return this.equals((getCollectFeeReportTotal_result)that);
      return false;
    }

    public boolean equals(getCollectFeeReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCollectFeeReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCollectFeeReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectFeeReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getCollectFeeReportTotal_resultStandardScheme getScheme() {
        return new getCollectFeeReportTotal_resultStandardScheme();
      }
    }

    private static class getCollectFeeReportTotal_resultStandardScheme extends StandardScheme<getCollectFeeReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectFeeReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectFeeReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectFeeReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getCollectFeeReportTotal_resultTupleScheme getScheme() {
        return new getCollectFeeReportTotal_resultTupleScheme();
      }
    }

    private static class getCollectFeeReportTotal_resultTupleScheme extends TupleScheme<getCollectFeeReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectFeeReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectFeeReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollectFeeReportByIds_args implements org.apache.thrift.TBase<queryCollectFeeReportByIds_args, queryCollectFeeReportByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollectFeeReportByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollectFeeReportByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollectFeeReportByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollectFeeReportByIds_argsTupleSchemeFactory());
    }

    public String ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollectFeeReportByIds_args.class, metaDataMap);
    }

    public queryCollectFeeReportByIds_args() {
    }

    public queryCollectFeeReportByIds_args(
      String ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollectFeeReportByIds_args(queryCollectFeeReportByIds_args other) {
      if (other.isSetIds()) {
        this.ids = other.ids;
      }
    }

    public queryCollectFeeReportByIds_args deepCopy() {
      return new queryCollectFeeReportByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public String getIds() {
      return this.ids;
    }

    public queryCollectFeeReportByIds_args setIds(String ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollectFeeReportByIds_args)
        return this.equals((queryCollectFeeReportByIds_args)that);
      return false;
    }

    public boolean equals(queryCollectFeeReportByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollectFeeReportByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollectFeeReportByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollectFeeReportByIds_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollectFeeReportByIds_argsStandardScheme getScheme() {
        return new queryCollectFeeReportByIds_argsStandardScheme();
      }
    }

    private static class queryCollectFeeReportByIds_argsStandardScheme extends StandardScheme<queryCollectFeeReportByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollectFeeReportByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ids = iprot.readString();
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollectFeeReportByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          oprot.writeString(struct.ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollectFeeReportByIds_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollectFeeReportByIds_argsTupleScheme getScheme() {
        return new queryCollectFeeReportByIds_argsTupleScheme();
      }
    }

    private static class queryCollectFeeReportByIds_argsTupleScheme extends TupleScheme<queryCollectFeeReportByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollectFeeReportByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          oprot.writeString(struct.ids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollectFeeReportByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ids = iprot.readString();
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class queryCollectFeeReportByIds_result implements org.apache.thrift.TBase<queryCollectFeeReportByIds_result, queryCollectFeeReportByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollectFeeReportByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollectFeeReportByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollectFeeReportByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollectFeeReportByIds_resultTupleSchemeFactory());
    }

    public List<CollectFeeReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectFeeReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollectFeeReportByIds_result.class, metaDataMap);
    }

    public queryCollectFeeReportByIds_result() {
    }

    public queryCollectFeeReportByIds_result(
      List<CollectFeeReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollectFeeReportByIds_result(queryCollectFeeReportByIds_result other) {
      if (other.isSetSuccess()) {
        List<CollectFeeReport> __this__success = new ArrayList<CollectFeeReport>(other.success.size());
        for (CollectFeeReport other_element : other.success) {
          __this__success.add(new CollectFeeReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollectFeeReportByIds_result deepCopy() {
      return new queryCollectFeeReportByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CollectFeeReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CollectFeeReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<CollectFeeReport>();
      }
      this.success.add(elem);
    }

    public List<CollectFeeReport> getSuccess() {
      return this.success;
    }

    public queryCollectFeeReportByIds_result setSuccess(List<CollectFeeReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CollectFeeReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollectFeeReportByIds_result)
        return this.equals((queryCollectFeeReportByIds_result)that);
      return false;
    }

    public boolean equals(queryCollectFeeReportByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollectFeeReportByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollectFeeReportByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollectFeeReportByIds_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollectFeeReportByIds_resultStandardScheme getScheme() {
        return new queryCollectFeeReportByIds_resultStandardScheme();
      }
    }

    private static class queryCollectFeeReportByIds_resultStandardScheme extends StandardScheme<queryCollectFeeReportByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollectFeeReportByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<CollectFeeReport>(_list136.size);
                  CollectFeeReport _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new CollectFeeReport();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollectFeeReportByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CollectFeeReport _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollectFeeReportByIds_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollectFeeReportByIds_resultTupleScheme getScheme() {
        return new queryCollectFeeReportByIds_resultTupleScheme();
      }
    }

    private static class queryCollectFeeReportByIds_resultTupleScheme extends TupleScheme<queryCollectFeeReportByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollectFeeReportByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CollectFeeReport _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollectFeeReportByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CollectFeeReport>(_list141.size);
            CollectFeeReport _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new CollectFeeReport();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryTrackRecordReport_args implements org.apache.thrift.TBase<queryTrackRecordReport_args, queryTrackRecordReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTrackRecordReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrackRecordReport_args");

    private static final org.apache.thrift.protocol.TField TRACK_RECORD_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("trackRecordReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrackRecordReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrackRecordReport_argsTupleSchemeFactory());
    }

    public TrackRecordReport trackRecordReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRACK_RECORD_REPORT((short)1, "trackRecordReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACK_RECORD_REPORT
            return TRACK_RECORD_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACK_RECORD_REPORT, new org.apache.thrift.meta_data.FieldMetaData("trackRecordReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrackRecordReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrackRecordReport_args.class, metaDataMap);
    }

    public queryTrackRecordReport_args() {
    }

    public queryTrackRecordReport_args(
      TrackRecordReport trackRecordReport)
    {
      this();
      this.trackRecordReport = trackRecordReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrackRecordReport_args(queryTrackRecordReport_args other) {
      if (other.isSetTrackRecordReport()) {
        this.trackRecordReport = new TrackRecordReport(other.trackRecordReport);
      }
    }

    public queryTrackRecordReport_args deepCopy() {
      return new queryTrackRecordReport_args(this);
    }

    @Override
    public void clear() {
      this.trackRecordReport = null;
    }

    public TrackRecordReport getTrackRecordReport() {
      return this.trackRecordReport;
    }

    public queryTrackRecordReport_args setTrackRecordReport(TrackRecordReport trackRecordReport) {
      this.trackRecordReport = trackRecordReport;
      return this;
    }

    public void unsetTrackRecordReport() {
      this.trackRecordReport = null;
    }

    /** Returns true if field trackRecordReport is set (has been assigned a value) and false otherwise */
    public boolean isSetTrackRecordReport() {
      return this.trackRecordReport != null;
    }

    public void setTrackRecordReportIsSet(boolean value) {
      if (!value) {
        this.trackRecordReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRACK_RECORD_REPORT:
        if (value == null) {
          unsetTrackRecordReport();
        } else {
          setTrackRecordReport((TrackRecordReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACK_RECORD_REPORT:
        return getTrackRecordReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRACK_RECORD_REPORT:
        return isSetTrackRecordReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrackRecordReport_args)
        return this.equals((queryTrackRecordReport_args)that);
      return false;
    }

    public boolean equals(queryTrackRecordReport_args that) {
      if (that == null)
        return false;

      boolean this_present_trackRecordReport = true && this.isSetTrackRecordReport();
      boolean that_present_trackRecordReport = true && that.isSetTrackRecordReport();
      if (this_present_trackRecordReport || that_present_trackRecordReport) {
        if (!(this_present_trackRecordReport && that_present_trackRecordReport))
          return false;
        if (!this.trackRecordReport.equals(that.trackRecordReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_trackRecordReport = true && (isSetTrackRecordReport());
      list.add(present_trackRecordReport);
      if (present_trackRecordReport)
        list.add(trackRecordReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTrackRecordReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTrackRecordReport()).compareTo(other.isSetTrackRecordReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrackRecordReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackRecordReport, other.trackRecordReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrackRecordReport_args(");
      boolean first = true;

      sb.append("trackRecordReport:");
      if (this.trackRecordReport == null) {
        sb.append("null");
      } else {
        sb.append(this.trackRecordReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (trackRecordReport != null) {
        trackRecordReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrackRecordReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryTrackRecordReport_argsStandardScheme getScheme() {
        return new queryTrackRecordReport_argsStandardScheme();
      }
    }

    private static class queryTrackRecordReport_argsStandardScheme extends StandardScheme<queryTrackRecordReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrackRecordReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACK_RECORD_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.trackRecordReport = new TrackRecordReport();
                struct.trackRecordReport.read(iprot);
                struct.setTrackRecordReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrackRecordReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.trackRecordReport != null) {
          oprot.writeFieldBegin(TRACK_RECORD_REPORT_FIELD_DESC);
          struct.trackRecordReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrackRecordReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryTrackRecordReport_argsTupleScheme getScheme() {
        return new queryTrackRecordReport_argsTupleScheme();
      }
    }

    private static class queryTrackRecordReport_argsTupleScheme extends TupleScheme<queryTrackRecordReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTrackRecordReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTrackRecordReport()) {
          struct.trackRecordReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.trackRecordReport = new TrackRecordReport();
          struct.trackRecordReport.read(iprot);
          struct.setTrackRecordReportIsSet(true);
        }
      }
    }

  }

  public static class queryTrackRecordReport_result implements org.apache.thrift.TBase<queryTrackRecordReport_result, queryTrackRecordReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTrackRecordReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrackRecordReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrackRecordReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrackRecordReport_resultTupleSchemeFactory());
    }

    public List<TrackRecordReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrackRecordReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrackRecordReport_result.class, metaDataMap);
    }

    public queryTrackRecordReport_result() {
    }

    public queryTrackRecordReport_result(
      List<TrackRecordReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrackRecordReport_result(queryTrackRecordReport_result other) {
      if (other.isSetSuccess()) {
        List<TrackRecordReport> __this__success = new ArrayList<TrackRecordReport>(other.success.size());
        for (TrackRecordReport other_element : other.success) {
          __this__success.add(new TrackRecordReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryTrackRecordReport_result deepCopy() {
      return new queryTrackRecordReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TrackRecordReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TrackRecordReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<TrackRecordReport>();
      }
      this.success.add(elem);
    }

    public List<TrackRecordReport> getSuccess() {
      return this.success;
    }

    public queryTrackRecordReport_result setSuccess(List<TrackRecordReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TrackRecordReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrackRecordReport_result)
        return this.equals((queryTrackRecordReport_result)that);
      return false;
    }

    public boolean equals(queryTrackRecordReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTrackRecordReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrackRecordReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrackRecordReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryTrackRecordReport_resultStandardScheme getScheme() {
        return new queryTrackRecordReport_resultStandardScheme();
      }
    }

    private static class queryTrackRecordReport_resultStandardScheme extends StandardScheme<queryTrackRecordReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrackRecordReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<TrackRecordReport>(_list144.size);
                  TrackRecordReport _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new TrackRecordReport();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrackRecordReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TrackRecordReport _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrackRecordReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryTrackRecordReport_resultTupleScheme getScheme() {
        return new queryTrackRecordReport_resultTupleScheme();
      }
    }

    private static class queryTrackRecordReport_resultTupleScheme extends TupleScheme<queryTrackRecordReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TrackRecordReport _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TrackRecordReport>(_list149.size);
            TrackRecordReport _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new TrackRecordReport();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryTrackRecordReportTotal_args implements org.apache.thrift.TBase<queryTrackRecordReportTotal_args, queryTrackRecordReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTrackRecordReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrackRecordReportTotal_args");

    private static final org.apache.thrift.protocol.TField TRACK_RECORD_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("trackRecordReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrackRecordReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrackRecordReportTotal_argsTupleSchemeFactory());
    }

    public TrackRecordReport trackRecordReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRACK_RECORD_REPORT((short)1, "trackRecordReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACK_RECORD_REPORT
            return TRACK_RECORD_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACK_RECORD_REPORT, new org.apache.thrift.meta_data.FieldMetaData("trackRecordReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrackRecordReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrackRecordReportTotal_args.class, metaDataMap);
    }

    public queryTrackRecordReportTotal_args() {
    }

    public queryTrackRecordReportTotal_args(
      TrackRecordReport trackRecordReport)
    {
      this();
      this.trackRecordReport = trackRecordReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrackRecordReportTotal_args(queryTrackRecordReportTotal_args other) {
      if (other.isSetTrackRecordReport()) {
        this.trackRecordReport = new TrackRecordReport(other.trackRecordReport);
      }
    }

    public queryTrackRecordReportTotal_args deepCopy() {
      return new queryTrackRecordReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.trackRecordReport = null;
    }

    public TrackRecordReport getTrackRecordReport() {
      return this.trackRecordReport;
    }

    public queryTrackRecordReportTotal_args setTrackRecordReport(TrackRecordReport trackRecordReport) {
      this.trackRecordReport = trackRecordReport;
      return this;
    }

    public void unsetTrackRecordReport() {
      this.trackRecordReport = null;
    }

    /** Returns true if field trackRecordReport is set (has been assigned a value) and false otherwise */
    public boolean isSetTrackRecordReport() {
      return this.trackRecordReport != null;
    }

    public void setTrackRecordReportIsSet(boolean value) {
      if (!value) {
        this.trackRecordReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRACK_RECORD_REPORT:
        if (value == null) {
          unsetTrackRecordReport();
        } else {
          setTrackRecordReport((TrackRecordReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACK_RECORD_REPORT:
        return getTrackRecordReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRACK_RECORD_REPORT:
        return isSetTrackRecordReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrackRecordReportTotal_args)
        return this.equals((queryTrackRecordReportTotal_args)that);
      return false;
    }

    public boolean equals(queryTrackRecordReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_trackRecordReport = true && this.isSetTrackRecordReport();
      boolean that_present_trackRecordReport = true && that.isSetTrackRecordReport();
      if (this_present_trackRecordReport || that_present_trackRecordReport) {
        if (!(this_present_trackRecordReport && that_present_trackRecordReport))
          return false;
        if (!this.trackRecordReport.equals(that.trackRecordReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_trackRecordReport = true && (isSetTrackRecordReport());
      list.add(present_trackRecordReport);
      if (present_trackRecordReport)
        list.add(trackRecordReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTrackRecordReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTrackRecordReport()).compareTo(other.isSetTrackRecordReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrackRecordReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackRecordReport, other.trackRecordReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrackRecordReportTotal_args(");
      boolean first = true;

      sb.append("trackRecordReport:");
      if (this.trackRecordReport == null) {
        sb.append("null");
      } else {
        sb.append(this.trackRecordReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (trackRecordReport != null) {
        trackRecordReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrackRecordReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public queryTrackRecordReportTotal_argsStandardScheme getScheme() {
        return new queryTrackRecordReportTotal_argsStandardScheme();
      }
    }

    private static class queryTrackRecordReportTotal_argsStandardScheme extends StandardScheme<queryTrackRecordReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrackRecordReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACK_RECORD_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.trackRecordReport = new TrackRecordReport();
                struct.trackRecordReport.read(iprot);
                struct.setTrackRecordReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrackRecordReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.trackRecordReport != null) {
          oprot.writeFieldBegin(TRACK_RECORD_REPORT_FIELD_DESC);
          struct.trackRecordReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrackRecordReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public queryTrackRecordReportTotal_argsTupleScheme getScheme() {
        return new queryTrackRecordReportTotal_argsTupleScheme();
      }
    }

    private static class queryTrackRecordReportTotal_argsTupleScheme extends TupleScheme<queryTrackRecordReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTrackRecordReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTrackRecordReport()) {
          struct.trackRecordReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.trackRecordReport = new TrackRecordReport();
          struct.trackRecordReport.read(iprot);
          struct.setTrackRecordReportIsSet(true);
        }
      }
    }

  }

  public static class queryTrackRecordReportTotal_result implements org.apache.thrift.TBase<queryTrackRecordReportTotal_result, queryTrackRecordReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTrackRecordReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrackRecordReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrackRecordReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrackRecordReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrackRecordReportTotal_result.class, metaDataMap);
    }

    public queryTrackRecordReportTotal_result() {
    }

    public queryTrackRecordReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrackRecordReportTotal_result(queryTrackRecordReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryTrackRecordReportTotal_result deepCopy() {
      return new queryTrackRecordReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryTrackRecordReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrackRecordReportTotal_result)
        return this.equals((queryTrackRecordReportTotal_result)that);
      return false;
    }

    public boolean equals(queryTrackRecordReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTrackRecordReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrackRecordReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrackRecordReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public queryTrackRecordReportTotal_resultStandardScheme getScheme() {
        return new queryTrackRecordReportTotal_resultStandardScheme();
      }
    }

    private static class queryTrackRecordReportTotal_resultStandardScheme extends StandardScheme<queryTrackRecordReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrackRecordReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrackRecordReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrackRecordReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public queryTrackRecordReportTotal_resultTupleScheme getScheme() {
        return new queryTrackRecordReportTotal_resultTupleScheme();
      }
    }

    private static class queryTrackRecordReportTotal_resultTupleScheme extends TupleScheme<queryTrackRecordReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryTrackRecordReportByIds_args implements org.apache.thrift.TBase<queryTrackRecordReportByIds_args, queryTrackRecordReportByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTrackRecordReportByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrackRecordReportByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrackRecordReportByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrackRecordReportByIds_argsTupleSchemeFactory());
    }

    public String ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrackRecordReportByIds_args.class, metaDataMap);
    }

    public queryTrackRecordReportByIds_args() {
    }

    public queryTrackRecordReportByIds_args(
      String ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrackRecordReportByIds_args(queryTrackRecordReportByIds_args other) {
      if (other.isSetIds()) {
        this.ids = other.ids;
      }
    }

    public queryTrackRecordReportByIds_args deepCopy() {
      return new queryTrackRecordReportByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public String getIds() {
      return this.ids;
    }

    public queryTrackRecordReportByIds_args setIds(String ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrackRecordReportByIds_args)
        return this.equals((queryTrackRecordReportByIds_args)that);
      return false;
    }

    public boolean equals(queryTrackRecordReportByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTrackRecordReportByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrackRecordReportByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrackRecordReportByIds_argsStandardSchemeFactory implements SchemeFactory {
      public queryTrackRecordReportByIds_argsStandardScheme getScheme() {
        return new queryTrackRecordReportByIds_argsStandardScheme();
      }
    }

    private static class queryTrackRecordReportByIds_argsStandardScheme extends StandardScheme<queryTrackRecordReportByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrackRecordReportByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ids = iprot.readString();
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrackRecordReportByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          oprot.writeString(struct.ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrackRecordReportByIds_argsTupleSchemeFactory implements SchemeFactory {
      public queryTrackRecordReportByIds_argsTupleScheme getScheme() {
        return new queryTrackRecordReportByIds_argsTupleScheme();
      }
    }

    private static class queryTrackRecordReportByIds_argsTupleScheme extends TupleScheme<queryTrackRecordReportByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReportByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          oprot.writeString(struct.ids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReportByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ids = iprot.readString();
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class queryTrackRecordReportByIds_result implements org.apache.thrift.TBase<queryTrackRecordReportByIds_result, queryTrackRecordReportByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTrackRecordReportByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrackRecordReportByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrackRecordReportByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrackRecordReportByIds_resultTupleSchemeFactory());
    }

    public List<TrackRecordReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrackRecordReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrackRecordReportByIds_result.class, metaDataMap);
    }

    public queryTrackRecordReportByIds_result() {
    }

    public queryTrackRecordReportByIds_result(
      List<TrackRecordReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrackRecordReportByIds_result(queryTrackRecordReportByIds_result other) {
      if (other.isSetSuccess()) {
        List<TrackRecordReport> __this__success = new ArrayList<TrackRecordReport>(other.success.size());
        for (TrackRecordReport other_element : other.success) {
          __this__success.add(new TrackRecordReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryTrackRecordReportByIds_result deepCopy() {
      return new queryTrackRecordReportByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TrackRecordReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TrackRecordReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<TrackRecordReport>();
      }
      this.success.add(elem);
    }

    public List<TrackRecordReport> getSuccess() {
      return this.success;
    }

    public queryTrackRecordReportByIds_result setSuccess(List<TrackRecordReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TrackRecordReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrackRecordReportByIds_result)
        return this.equals((queryTrackRecordReportByIds_result)that);
      return false;
    }

    public boolean equals(queryTrackRecordReportByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTrackRecordReportByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrackRecordReportByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrackRecordReportByIds_resultStandardSchemeFactory implements SchemeFactory {
      public queryTrackRecordReportByIds_resultStandardScheme getScheme() {
        return new queryTrackRecordReportByIds_resultStandardScheme();
      }
    }

    private static class queryTrackRecordReportByIds_resultStandardScheme extends StandardScheme<queryTrackRecordReportByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrackRecordReportByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new ArrayList<TrackRecordReport>(_list152.size);
                  TrackRecordReport _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new TrackRecordReport();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrackRecordReportByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TrackRecordReport _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrackRecordReportByIds_resultTupleSchemeFactory implements SchemeFactory {
      public queryTrackRecordReportByIds_resultTupleScheme getScheme() {
        return new queryTrackRecordReportByIds_resultTupleScheme();
      }
    }

    private static class queryTrackRecordReportByIds_resultTupleScheme extends TupleScheme<queryTrackRecordReportByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReportByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TrackRecordReport _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrackRecordReportByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TrackRecordReport>(_list157.size);
            TrackRecordReport _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new TrackRecordReport();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureReport_args implements org.apache.thrift.TBase<queryForeclosureReport_args, queryForeclosureReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureReport_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureReport_argsTupleSchemeFactory());
    }

    public ForeclosureReport foreclosureReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_REPORT((short)1, "foreclosureReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_REPORT
            return FORECLOSURE_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureReport_args.class, metaDataMap);
    }

    public queryForeclosureReport_args() {
    }

    public queryForeclosureReport_args(
      ForeclosureReport foreclosureReport)
    {
      this();
      this.foreclosureReport = foreclosureReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureReport_args(queryForeclosureReport_args other) {
      if (other.isSetForeclosureReport()) {
        this.foreclosureReport = new ForeclosureReport(other.foreclosureReport);
      }
    }

    public queryForeclosureReport_args deepCopy() {
      return new queryForeclosureReport_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureReport = null;
    }

    public ForeclosureReport getForeclosureReport() {
      return this.foreclosureReport;
    }

    public queryForeclosureReport_args setForeclosureReport(ForeclosureReport foreclosureReport) {
      this.foreclosureReport = foreclosureReport;
      return this;
    }

    public void unsetForeclosureReport() {
      this.foreclosureReport = null;
    }

    /** Returns true if field foreclosureReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureReport() {
      return this.foreclosureReport != null;
    }

    public void setForeclosureReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_REPORT:
        if (value == null) {
          unsetForeclosureReport();
        } else {
          setForeclosureReport((ForeclosureReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_REPORT:
        return getForeclosureReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_REPORT:
        return isSetForeclosureReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureReport_args)
        return this.equals((queryForeclosureReport_args)that);
      return false;
    }

    public boolean equals(queryForeclosureReport_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureReport = true && this.isSetForeclosureReport();
      boolean that_present_foreclosureReport = true && that.isSetForeclosureReport();
      if (this_present_foreclosureReport || that_present_foreclosureReport) {
        if (!(this_present_foreclosureReport && that_present_foreclosureReport))
          return false;
        if (!this.foreclosureReport.equals(that.foreclosureReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureReport = true && (isSetForeclosureReport());
      list.add(present_foreclosureReport);
      if (present_foreclosureReport)
        list.add(foreclosureReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureReport()).compareTo(other.isSetForeclosureReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureReport, other.foreclosureReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureReport_args(");
      boolean first = true;

      sb.append("foreclosureReport:");
      if (this.foreclosureReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureReport != null) {
        foreclosureReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureReport_argsStandardScheme getScheme() {
        return new queryForeclosureReport_argsStandardScheme();
      }
    }

    private static class queryForeclosureReport_argsStandardScheme extends StandardScheme<queryForeclosureReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureReport = new ForeclosureReport();
                struct.foreclosureReport.read(iprot);
                struct.setForeclosureReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_REPORT_FIELD_DESC);
          struct.foreclosureReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureReport_argsTupleScheme getScheme() {
        return new queryForeclosureReport_argsTupleScheme();
      }
    }

    private static class queryForeclosureReport_argsTupleScheme extends TupleScheme<queryForeclosureReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureReport()) {
          struct.foreclosureReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureReport = new ForeclosureReport();
          struct.foreclosureReport.read(iprot);
          struct.setForeclosureReportIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureReport_result implements org.apache.thrift.TBase<queryForeclosureReport_result, queryForeclosureReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureReport_resultTupleSchemeFactory());
    }

    public List<ForeclosureReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureReport_result.class, metaDataMap);
    }

    public queryForeclosureReport_result() {
    }

    public queryForeclosureReport_result(
      List<ForeclosureReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureReport_result(queryForeclosureReport_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureReport> __this__success = new ArrayList<ForeclosureReport>(other.success.size());
        for (ForeclosureReport other_element : other.success) {
          __this__success.add(new ForeclosureReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureReport_result deepCopy() {
      return new queryForeclosureReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureReport_result setSuccess(List<ForeclosureReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureReport_result)
        return this.equals((queryForeclosureReport_result)that);
      return false;
    }

    public boolean equals(queryForeclosureReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureReport_resultStandardScheme getScheme() {
        return new queryForeclosureReport_resultStandardScheme();
      }
    }

    private static class queryForeclosureReport_resultStandardScheme extends StandardScheme<queryForeclosureReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureReport>(_list160.size);
                  ForeclosureReport _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new ForeclosureReport();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureReport _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureReport_resultTupleScheme getScheme() {
        return new queryForeclosureReport_resultTupleScheme();
      }
    }

    private static class queryForeclosureReport_resultTupleScheme extends TupleScheme<queryForeclosureReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureReport _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureReport>(_list165.size);
            ForeclosureReport _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new ForeclosureReport();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureReportTotal_args implements org.apache.thrift.TBase<getForeclosureReportTotal_args, getForeclosureReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureReportTotal_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureReportTotal_argsTupleSchemeFactory());
    }

    public ForeclosureReport foreclosureReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_REPORT((short)1, "foreclosureReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_REPORT
            return FORECLOSURE_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureReportTotal_args.class, metaDataMap);
    }

    public getForeclosureReportTotal_args() {
    }

    public getForeclosureReportTotal_args(
      ForeclosureReport foreclosureReport)
    {
      this();
      this.foreclosureReport = foreclosureReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureReportTotal_args(getForeclosureReportTotal_args other) {
      if (other.isSetForeclosureReport()) {
        this.foreclosureReport = new ForeclosureReport(other.foreclosureReport);
      }
    }

    public getForeclosureReportTotal_args deepCopy() {
      return new getForeclosureReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureReport = null;
    }

    public ForeclosureReport getForeclosureReport() {
      return this.foreclosureReport;
    }

    public getForeclosureReportTotal_args setForeclosureReport(ForeclosureReport foreclosureReport) {
      this.foreclosureReport = foreclosureReport;
      return this;
    }

    public void unsetForeclosureReport() {
      this.foreclosureReport = null;
    }

    /** Returns true if field foreclosureReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureReport() {
      return this.foreclosureReport != null;
    }

    public void setForeclosureReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_REPORT:
        if (value == null) {
          unsetForeclosureReport();
        } else {
          setForeclosureReport((ForeclosureReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_REPORT:
        return getForeclosureReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_REPORT:
        return isSetForeclosureReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureReportTotal_args)
        return this.equals((getForeclosureReportTotal_args)that);
      return false;
    }

    public boolean equals(getForeclosureReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureReport = true && this.isSetForeclosureReport();
      boolean that_present_foreclosureReport = true && that.isSetForeclosureReport();
      if (this_present_foreclosureReport || that_present_foreclosureReport) {
        if (!(this_present_foreclosureReport && that_present_foreclosureReport))
          return false;
        if (!this.foreclosureReport.equals(that.foreclosureReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureReport = true && (isSetForeclosureReport());
      list.add(present_foreclosureReport);
      if (present_foreclosureReport)
        list.add(foreclosureReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureReport()).compareTo(other.isSetForeclosureReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureReport, other.foreclosureReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureReportTotal_args(");
      boolean first = true;

      sb.append("foreclosureReport:");
      if (this.foreclosureReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureReport != null) {
        foreclosureReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getForeclosureReportTotal_argsStandardScheme getScheme() {
        return new getForeclosureReportTotal_argsStandardScheme();
      }
    }

    private static class getForeclosureReportTotal_argsStandardScheme extends StandardScheme<getForeclosureReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureReport = new ForeclosureReport();
                struct.foreclosureReport.read(iprot);
                struct.setForeclosureReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_REPORT_FIELD_DESC);
          struct.foreclosureReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getForeclosureReportTotal_argsTupleScheme getScheme() {
        return new getForeclosureReportTotal_argsTupleScheme();
      }
    }

    private static class getForeclosureReportTotal_argsTupleScheme extends TupleScheme<getForeclosureReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureReport()) {
          struct.foreclosureReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureReport = new ForeclosureReport();
          struct.foreclosureReport.read(iprot);
          struct.setForeclosureReportIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureReportTotal_result implements org.apache.thrift.TBase<getForeclosureReportTotal_result, getForeclosureReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureReportTotal_result.class, metaDataMap);
    }

    public getForeclosureReportTotal_result() {
    }

    public getForeclosureReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureReportTotal_result(getForeclosureReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getForeclosureReportTotal_result deepCopy() {
      return new getForeclosureReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getForeclosureReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureReportTotal_result)
        return this.equals((getForeclosureReportTotal_result)that);
      return false;
    }

    public boolean equals(getForeclosureReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getForeclosureReportTotal_resultStandardScheme getScheme() {
        return new getForeclosureReportTotal_resultStandardScheme();
      }
    }

    private static class getForeclosureReportTotal_resultStandardScheme extends StandardScheme<getForeclosureReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getForeclosureReportTotal_resultTupleScheme getScheme() {
        return new getForeclosureReportTotal_resultTupleScheme();
      }
    }

    private static class getForeclosureReportTotal_resultTupleScheme extends TupleScheme<getForeclosureReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryNewForeclosureReport_args implements org.apache.thrift.TBase<queryNewForeclosureReport_args, queryNewForeclosureReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryNewForeclosureReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNewForeclosureReport_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryNewForeclosureReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryNewForeclosureReport_argsTupleSchemeFactory());
    }

    public ForeclosureReport foreclosureReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_REPORT((short)1, "foreclosureReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_REPORT
            return FORECLOSURE_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNewForeclosureReport_args.class, metaDataMap);
    }

    public queryNewForeclosureReport_args() {
    }

    public queryNewForeclosureReport_args(
      ForeclosureReport foreclosureReport)
    {
      this();
      this.foreclosureReport = foreclosureReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryNewForeclosureReport_args(queryNewForeclosureReport_args other) {
      if (other.isSetForeclosureReport()) {
        this.foreclosureReport = new ForeclosureReport(other.foreclosureReport);
      }
    }

    public queryNewForeclosureReport_args deepCopy() {
      return new queryNewForeclosureReport_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureReport = null;
    }

    public ForeclosureReport getForeclosureReport() {
      return this.foreclosureReport;
    }

    public queryNewForeclosureReport_args setForeclosureReport(ForeclosureReport foreclosureReport) {
      this.foreclosureReport = foreclosureReport;
      return this;
    }

    public void unsetForeclosureReport() {
      this.foreclosureReport = null;
    }

    /** Returns true if field foreclosureReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureReport() {
      return this.foreclosureReport != null;
    }

    public void setForeclosureReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_REPORT:
        if (value == null) {
          unsetForeclosureReport();
        } else {
          setForeclosureReport((ForeclosureReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_REPORT:
        return getForeclosureReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_REPORT:
        return isSetForeclosureReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryNewForeclosureReport_args)
        return this.equals((queryNewForeclosureReport_args)that);
      return false;
    }

    public boolean equals(queryNewForeclosureReport_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureReport = true && this.isSetForeclosureReport();
      boolean that_present_foreclosureReport = true && that.isSetForeclosureReport();
      if (this_present_foreclosureReport || that_present_foreclosureReport) {
        if (!(this_present_foreclosureReport && that_present_foreclosureReport))
          return false;
        if (!this.foreclosureReport.equals(that.foreclosureReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureReport = true && (isSetForeclosureReport());
      list.add(present_foreclosureReport);
      if (present_foreclosureReport)
        list.add(foreclosureReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryNewForeclosureReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureReport()).compareTo(other.isSetForeclosureReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureReport, other.foreclosureReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryNewForeclosureReport_args(");
      boolean first = true;

      sb.append("foreclosureReport:");
      if (this.foreclosureReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureReport != null) {
        foreclosureReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryNewForeclosureReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryNewForeclosureReport_argsStandardScheme getScheme() {
        return new queryNewForeclosureReport_argsStandardScheme();
      }
    }

    private static class queryNewForeclosureReport_argsStandardScheme extends StandardScheme<queryNewForeclosureReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryNewForeclosureReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureReport = new ForeclosureReport();
                struct.foreclosureReport.read(iprot);
                struct.setForeclosureReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryNewForeclosureReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_REPORT_FIELD_DESC);
          struct.foreclosureReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryNewForeclosureReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryNewForeclosureReport_argsTupleScheme getScheme() {
        return new queryNewForeclosureReport_argsTupleScheme();
      }
    }

    private static class queryNewForeclosureReport_argsTupleScheme extends TupleScheme<queryNewForeclosureReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryNewForeclosureReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureReport()) {
          struct.foreclosureReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryNewForeclosureReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureReport = new ForeclosureReport();
          struct.foreclosureReport.read(iprot);
          struct.setForeclosureReportIsSet(true);
        }
      }
    }

  }

  public static class queryNewForeclosureReport_result implements org.apache.thrift.TBase<queryNewForeclosureReport_result, queryNewForeclosureReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryNewForeclosureReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryNewForeclosureReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryNewForeclosureReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryNewForeclosureReport_resultTupleSchemeFactory());
    }

    public List<ForeclosureReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryNewForeclosureReport_result.class, metaDataMap);
    }

    public queryNewForeclosureReport_result() {
    }

    public queryNewForeclosureReport_result(
      List<ForeclosureReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryNewForeclosureReport_result(queryNewForeclosureReport_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureReport> __this__success = new ArrayList<ForeclosureReport>(other.success.size());
        for (ForeclosureReport other_element : other.success) {
          __this__success.add(new ForeclosureReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryNewForeclosureReport_result deepCopy() {
      return new queryNewForeclosureReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureReport> getSuccess() {
      return this.success;
    }

    public queryNewForeclosureReport_result setSuccess(List<ForeclosureReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryNewForeclosureReport_result)
        return this.equals((queryNewForeclosureReport_result)that);
      return false;
    }

    public boolean equals(queryNewForeclosureReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryNewForeclosureReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryNewForeclosureReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryNewForeclosureReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryNewForeclosureReport_resultStandardScheme getScheme() {
        return new queryNewForeclosureReport_resultStandardScheme();
      }
    }

    private static class queryNewForeclosureReport_resultStandardScheme extends StandardScheme<queryNewForeclosureReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryNewForeclosureReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureReport>(_list168.size);
                  ForeclosureReport _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new ForeclosureReport();
                    _elem169.read(iprot);
                    struct.success.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryNewForeclosureReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureReport _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryNewForeclosureReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryNewForeclosureReport_resultTupleScheme getScheme() {
        return new queryNewForeclosureReport_resultTupleScheme();
      }
    }

    private static class queryNewForeclosureReport_resultTupleScheme extends TupleScheme<queryNewForeclosureReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryNewForeclosureReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureReport _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryNewForeclosureReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureReport>(_list173.size);
            ForeclosureReport _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new ForeclosureReport();
              _elem174.read(iprot);
              struct.success.add(_elem174);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNewForeclosureReportTotal_args implements org.apache.thrift.TBase<getNewForeclosureReportTotal_args, getNewForeclosureReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewForeclosureReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewForeclosureReportTotal_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewForeclosureReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewForeclosureReportTotal_argsTupleSchemeFactory());
    }

    public ForeclosureReport foreclosureReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_REPORT((short)1, "foreclosureReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_REPORT
            return FORECLOSURE_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewForeclosureReportTotal_args.class, metaDataMap);
    }

    public getNewForeclosureReportTotal_args() {
    }

    public getNewForeclosureReportTotal_args(
      ForeclosureReport foreclosureReport)
    {
      this();
      this.foreclosureReport = foreclosureReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewForeclosureReportTotal_args(getNewForeclosureReportTotal_args other) {
      if (other.isSetForeclosureReport()) {
        this.foreclosureReport = new ForeclosureReport(other.foreclosureReport);
      }
    }

    public getNewForeclosureReportTotal_args deepCopy() {
      return new getNewForeclosureReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureReport = null;
    }

    public ForeclosureReport getForeclosureReport() {
      return this.foreclosureReport;
    }

    public getNewForeclosureReportTotal_args setForeclosureReport(ForeclosureReport foreclosureReport) {
      this.foreclosureReport = foreclosureReport;
      return this;
    }

    public void unsetForeclosureReport() {
      this.foreclosureReport = null;
    }

    /** Returns true if field foreclosureReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureReport() {
      return this.foreclosureReport != null;
    }

    public void setForeclosureReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_REPORT:
        if (value == null) {
          unsetForeclosureReport();
        } else {
          setForeclosureReport((ForeclosureReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_REPORT:
        return getForeclosureReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_REPORT:
        return isSetForeclosureReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewForeclosureReportTotal_args)
        return this.equals((getNewForeclosureReportTotal_args)that);
      return false;
    }

    public boolean equals(getNewForeclosureReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureReport = true && this.isSetForeclosureReport();
      boolean that_present_foreclosureReport = true && that.isSetForeclosureReport();
      if (this_present_foreclosureReport || that_present_foreclosureReport) {
        if (!(this_present_foreclosureReport && that_present_foreclosureReport))
          return false;
        if (!this.foreclosureReport.equals(that.foreclosureReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureReport = true && (isSetForeclosureReport());
      list.add(present_foreclosureReport);
      if (present_foreclosureReport)
        list.add(foreclosureReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewForeclosureReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureReport()).compareTo(other.isSetForeclosureReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureReport, other.foreclosureReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewForeclosureReportTotal_args(");
      boolean first = true;

      sb.append("foreclosureReport:");
      if (this.foreclosureReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureReport != null) {
        foreclosureReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewForeclosureReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getNewForeclosureReportTotal_argsStandardScheme getScheme() {
        return new getNewForeclosureReportTotal_argsStandardScheme();
      }
    }

    private static class getNewForeclosureReportTotal_argsStandardScheme extends StandardScheme<getNewForeclosureReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureReport = new ForeclosureReport();
                struct.foreclosureReport.read(iprot);
                struct.setForeclosureReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_REPORT_FIELD_DESC);
          struct.foreclosureReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewForeclosureReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getNewForeclosureReportTotal_argsTupleScheme getScheme() {
        return new getNewForeclosureReportTotal_argsTupleScheme();
      }
    }

    private static class getNewForeclosureReportTotal_argsTupleScheme extends TupleScheme<getNewForeclosureReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureReport()) {
          struct.foreclosureReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureReport = new ForeclosureReport();
          struct.foreclosureReport.read(iprot);
          struct.setForeclosureReportIsSet(true);
        }
      }
    }

  }

  public static class getNewForeclosureReportTotal_result implements org.apache.thrift.TBase<getNewForeclosureReportTotal_result, getNewForeclosureReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewForeclosureReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewForeclosureReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewForeclosureReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewForeclosureReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewForeclosureReportTotal_result.class, metaDataMap);
    }

    public getNewForeclosureReportTotal_result() {
    }

    public getNewForeclosureReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewForeclosureReportTotal_result(getNewForeclosureReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getNewForeclosureReportTotal_result deepCopy() {
      return new getNewForeclosureReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getNewForeclosureReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewForeclosureReportTotal_result)
        return this.equals((getNewForeclosureReportTotal_result)that);
      return false;
    }

    public boolean equals(getNewForeclosureReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewForeclosureReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewForeclosureReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewForeclosureReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getNewForeclosureReportTotal_resultStandardScheme getScheme() {
        return new getNewForeclosureReportTotal_resultStandardScheme();
      }
    }

    private static class getNewForeclosureReportTotal_resultStandardScheme extends StandardScheme<getNewForeclosureReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewForeclosureReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getNewForeclosureReportTotal_resultTupleScheme getScheme() {
        return new getNewForeclosureReportTotal_resultTupleScheme();
      }
    }

    private static class getNewForeclosureReportTotal_resultTupleScheme extends TupleScheme<getNewForeclosureReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySquareForeclosureReport_args implements org.apache.thrift.TBase<querySquareForeclosureReport_args, querySquareForeclosureReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySquareForeclosureReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySquareForeclosureReport_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySquareForeclosureReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySquareForeclosureReport_argsTupleSchemeFactory());
    }

    public ForeclosureReport foreclosureReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_REPORT((short)1, "foreclosureReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_REPORT
            return FORECLOSURE_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySquareForeclosureReport_args.class, metaDataMap);
    }

    public querySquareForeclosureReport_args() {
    }

    public querySquareForeclosureReport_args(
      ForeclosureReport foreclosureReport)
    {
      this();
      this.foreclosureReport = foreclosureReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySquareForeclosureReport_args(querySquareForeclosureReport_args other) {
      if (other.isSetForeclosureReport()) {
        this.foreclosureReport = new ForeclosureReport(other.foreclosureReport);
      }
    }

    public querySquareForeclosureReport_args deepCopy() {
      return new querySquareForeclosureReport_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureReport = null;
    }

    public ForeclosureReport getForeclosureReport() {
      return this.foreclosureReport;
    }

    public querySquareForeclosureReport_args setForeclosureReport(ForeclosureReport foreclosureReport) {
      this.foreclosureReport = foreclosureReport;
      return this;
    }

    public void unsetForeclosureReport() {
      this.foreclosureReport = null;
    }

    /** Returns true if field foreclosureReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureReport() {
      return this.foreclosureReport != null;
    }

    public void setForeclosureReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_REPORT:
        if (value == null) {
          unsetForeclosureReport();
        } else {
          setForeclosureReport((ForeclosureReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_REPORT:
        return getForeclosureReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_REPORT:
        return isSetForeclosureReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySquareForeclosureReport_args)
        return this.equals((querySquareForeclosureReport_args)that);
      return false;
    }

    public boolean equals(querySquareForeclosureReport_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureReport = true && this.isSetForeclosureReport();
      boolean that_present_foreclosureReport = true && that.isSetForeclosureReport();
      if (this_present_foreclosureReport || that_present_foreclosureReport) {
        if (!(this_present_foreclosureReport && that_present_foreclosureReport))
          return false;
        if (!this.foreclosureReport.equals(that.foreclosureReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureReport = true && (isSetForeclosureReport());
      list.add(present_foreclosureReport);
      if (present_foreclosureReport)
        list.add(foreclosureReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySquareForeclosureReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureReport()).compareTo(other.isSetForeclosureReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureReport, other.foreclosureReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySquareForeclosureReport_args(");
      boolean first = true;

      sb.append("foreclosureReport:");
      if (this.foreclosureReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureReport != null) {
        foreclosureReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySquareForeclosureReport_argsStandardSchemeFactory implements SchemeFactory {
      public querySquareForeclosureReport_argsStandardScheme getScheme() {
        return new querySquareForeclosureReport_argsStandardScheme();
      }
    }

    private static class querySquareForeclosureReport_argsStandardScheme extends StandardScheme<querySquareForeclosureReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySquareForeclosureReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureReport = new ForeclosureReport();
                struct.foreclosureReport.read(iprot);
                struct.setForeclosureReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySquareForeclosureReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_REPORT_FIELD_DESC);
          struct.foreclosureReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySquareForeclosureReport_argsTupleSchemeFactory implements SchemeFactory {
      public querySquareForeclosureReport_argsTupleScheme getScheme() {
        return new querySquareForeclosureReport_argsTupleScheme();
      }
    }

    private static class querySquareForeclosureReport_argsTupleScheme extends TupleScheme<querySquareForeclosureReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySquareForeclosureReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureReport()) {
          struct.foreclosureReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySquareForeclosureReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureReport = new ForeclosureReport();
          struct.foreclosureReport.read(iprot);
          struct.setForeclosureReportIsSet(true);
        }
      }
    }

  }

  public static class querySquareForeclosureReport_result implements org.apache.thrift.TBase<querySquareForeclosureReport_result, querySquareForeclosureReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySquareForeclosureReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySquareForeclosureReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySquareForeclosureReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySquareForeclosureReport_resultTupleSchemeFactory());
    }

    public List<ForeclosureReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySquareForeclosureReport_result.class, metaDataMap);
    }

    public querySquareForeclosureReport_result() {
    }

    public querySquareForeclosureReport_result(
      List<ForeclosureReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySquareForeclosureReport_result(querySquareForeclosureReport_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureReport> __this__success = new ArrayList<ForeclosureReport>(other.success.size());
        for (ForeclosureReport other_element : other.success) {
          __this__success.add(new ForeclosureReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySquareForeclosureReport_result deepCopy() {
      return new querySquareForeclosureReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureReport> getSuccess() {
      return this.success;
    }

    public querySquareForeclosureReport_result setSuccess(List<ForeclosureReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySquareForeclosureReport_result)
        return this.equals((querySquareForeclosureReport_result)that);
      return false;
    }

    public boolean equals(querySquareForeclosureReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySquareForeclosureReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySquareForeclosureReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySquareForeclosureReport_resultStandardSchemeFactory implements SchemeFactory {
      public querySquareForeclosureReport_resultStandardScheme getScheme() {
        return new querySquareForeclosureReport_resultStandardScheme();
      }
    }

    private static class querySquareForeclosureReport_resultStandardScheme extends StandardScheme<querySquareForeclosureReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySquareForeclosureReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureReport>(_list176.size);
                  ForeclosureReport _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new ForeclosureReport();
                    _elem177.read(iprot);
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySquareForeclosureReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureReport _iter179 : struct.success)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySquareForeclosureReport_resultTupleSchemeFactory implements SchemeFactory {
      public querySquareForeclosureReport_resultTupleScheme getScheme() {
        return new querySquareForeclosureReport_resultTupleScheme();
      }
    }

    private static class querySquareForeclosureReport_resultTupleScheme extends TupleScheme<querySquareForeclosureReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySquareForeclosureReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureReport _iter180 : struct.success)
            {
              _iter180.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySquareForeclosureReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureReport>(_list181.size);
            ForeclosureReport _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new ForeclosureReport();
              _elem182.read(iprot);
              struct.success.add(_elem182);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSquareForeclosureReportTotal_args implements org.apache.thrift.TBase<getSquareForeclosureReportTotal_args, getSquareForeclosureReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSquareForeclosureReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSquareForeclosureReportTotal_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSquareForeclosureReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSquareForeclosureReportTotal_argsTupleSchemeFactory());
    }

    public ForeclosureReport foreclosureReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_REPORT((short)1, "foreclosureReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_REPORT
            return FORECLOSURE_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSquareForeclosureReportTotal_args.class, metaDataMap);
    }

    public getSquareForeclosureReportTotal_args() {
    }

    public getSquareForeclosureReportTotal_args(
      ForeclosureReport foreclosureReport)
    {
      this();
      this.foreclosureReport = foreclosureReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSquareForeclosureReportTotal_args(getSquareForeclosureReportTotal_args other) {
      if (other.isSetForeclosureReport()) {
        this.foreclosureReport = new ForeclosureReport(other.foreclosureReport);
      }
    }

    public getSquareForeclosureReportTotal_args deepCopy() {
      return new getSquareForeclosureReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureReport = null;
    }

    public ForeclosureReport getForeclosureReport() {
      return this.foreclosureReport;
    }

    public getSquareForeclosureReportTotal_args setForeclosureReport(ForeclosureReport foreclosureReport) {
      this.foreclosureReport = foreclosureReport;
      return this;
    }

    public void unsetForeclosureReport() {
      this.foreclosureReport = null;
    }

    /** Returns true if field foreclosureReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureReport() {
      return this.foreclosureReport != null;
    }

    public void setForeclosureReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_REPORT:
        if (value == null) {
          unsetForeclosureReport();
        } else {
          setForeclosureReport((ForeclosureReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_REPORT:
        return getForeclosureReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_REPORT:
        return isSetForeclosureReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSquareForeclosureReportTotal_args)
        return this.equals((getSquareForeclosureReportTotal_args)that);
      return false;
    }

    public boolean equals(getSquareForeclosureReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureReport = true && this.isSetForeclosureReport();
      boolean that_present_foreclosureReport = true && that.isSetForeclosureReport();
      if (this_present_foreclosureReport || that_present_foreclosureReport) {
        if (!(this_present_foreclosureReport && that_present_foreclosureReport))
          return false;
        if (!this.foreclosureReport.equals(that.foreclosureReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureReport = true && (isSetForeclosureReport());
      list.add(present_foreclosureReport);
      if (present_foreclosureReport)
        list.add(foreclosureReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSquareForeclosureReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureReport()).compareTo(other.isSetForeclosureReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureReport, other.foreclosureReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSquareForeclosureReportTotal_args(");
      boolean first = true;

      sb.append("foreclosureReport:");
      if (this.foreclosureReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureReport != null) {
        foreclosureReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSquareForeclosureReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getSquareForeclosureReportTotal_argsStandardScheme getScheme() {
        return new getSquareForeclosureReportTotal_argsStandardScheme();
      }
    }

    private static class getSquareForeclosureReportTotal_argsStandardScheme extends StandardScheme<getSquareForeclosureReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSquareForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureReport = new ForeclosureReport();
                struct.foreclosureReport.read(iprot);
                struct.setForeclosureReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSquareForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_REPORT_FIELD_DESC);
          struct.foreclosureReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSquareForeclosureReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getSquareForeclosureReportTotal_argsTupleScheme getScheme() {
        return new getSquareForeclosureReportTotal_argsTupleScheme();
      }
    }

    private static class getSquareForeclosureReportTotal_argsTupleScheme extends TupleScheme<getSquareForeclosureReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSquareForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureReport()) {
          struct.foreclosureReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSquareForeclosureReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureReport = new ForeclosureReport();
          struct.foreclosureReport.read(iprot);
          struct.setForeclosureReportIsSet(true);
        }
      }
    }

  }

  public static class getSquareForeclosureReportTotal_result implements org.apache.thrift.TBase<getSquareForeclosureReportTotal_result, getSquareForeclosureReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSquareForeclosureReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSquareForeclosureReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSquareForeclosureReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSquareForeclosureReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSquareForeclosureReportTotal_result.class, metaDataMap);
    }

    public getSquareForeclosureReportTotal_result() {
    }

    public getSquareForeclosureReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSquareForeclosureReportTotal_result(getSquareForeclosureReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getSquareForeclosureReportTotal_result deepCopy() {
      return new getSquareForeclosureReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getSquareForeclosureReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSquareForeclosureReportTotal_result)
        return this.equals((getSquareForeclosureReportTotal_result)that);
      return false;
    }

    public boolean equals(getSquareForeclosureReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSquareForeclosureReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSquareForeclosureReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSquareForeclosureReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getSquareForeclosureReportTotal_resultStandardScheme getScheme() {
        return new getSquareForeclosureReportTotal_resultStandardScheme();
      }
    }

    private static class getSquareForeclosureReportTotal_resultStandardScheme extends StandardScheme<getSquareForeclosureReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSquareForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSquareForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSquareForeclosureReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getSquareForeclosureReportTotal_resultTupleScheme getScheme() {
        return new getSquareForeclosureReportTotal_resultTupleScheme();
      }
    }

    private static class getSquareForeclosureReportTotal_resultTupleScheme extends TupleScheme<getSquareForeclosureReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSquareForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSquareForeclosureReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrganizationReport_args implements org.apache.thrift.TBase<queryForeclosureOrganizationReport_args, queryForeclosureOrganizationReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrganizationReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrganizationReport_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_ORGANIZATION_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureOrganizationReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrganizationReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrganizationReport_argsTupleSchemeFactory());
    }

    public ForeclosureOrganizationReport foreclosureOrganizationReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_ORGANIZATION_REPORT((short)1, "foreclosureOrganizationReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_ORGANIZATION_REPORT
            return FORECLOSURE_ORGANIZATION_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_ORGANIZATION_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureOrganizationReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrganizationReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrganizationReport_args.class, metaDataMap);
    }

    public queryForeclosureOrganizationReport_args() {
    }

    public queryForeclosureOrganizationReport_args(
      ForeclosureOrganizationReport foreclosureOrganizationReport)
    {
      this();
      this.foreclosureOrganizationReport = foreclosureOrganizationReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrganizationReport_args(queryForeclosureOrganizationReport_args other) {
      if (other.isSetForeclosureOrganizationReport()) {
        this.foreclosureOrganizationReport = new ForeclosureOrganizationReport(other.foreclosureOrganizationReport);
      }
    }

    public queryForeclosureOrganizationReport_args deepCopy() {
      return new queryForeclosureOrganizationReport_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureOrganizationReport = null;
    }

    public ForeclosureOrganizationReport getForeclosureOrganizationReport() {
      return this.foreclosureOrganizationReport;
    }

    public queryForeclosureOrganizationReport_args setForeclosureOrganizationReport(ForeclosureOrganizationReport foreclosureOrganizationReport) {
      this.foreclosureOrganizationReport = foreclosureOrganizationReport;
      return this;
    }

    public void unsetForeclosureOrganizationReport() {
      this.foreclosureOrganizationReport = null;
    }

    /** Returns true if field foreclosureOrganizationReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureOrganizationReport() {
      return this.foreclosureOrganizationReport != null;
    }

    public void setForeclosureOrganizationReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureOrganizationReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_ORGANIZATION_REPORT:
        if (value == null) {
          unsetForeclosureOrganizationReport();
        } else {
          setForeclosureOrganizationReport((ForeclosureOrganizationReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_ORGANIZATION_REPORT:
        return getForeclosureOrganizationReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_ORGANIZATION_REPORT:
        return isSetForeclosureOrganizationReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrganizationReport_args)
        return this.equals((queryForeclosureOrganizationReport_args)that);
      return false;
    }

    public boolean equals(queryForeclosureOrganizationReport_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureOrganizationReport = true && this.isSetForeclosureOrganizationReport();
      boolean that_present_foreclosureOrganizationReport = true && that.isSetForeclosureOrganizationReport();
      if (this_present_foreclosureOrganizationReport || that_present_foreclosureOrganizationReport) {
        if (!(this_present_foreclosureOrganizationReport && that_present_foreclosureOrganizationReport))
          return false;
        if (!this.foreclosureOrganizationReport.equals(that.foreclosureOrganizationReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureOrganizationReport = true && (isSetForeclosureOrganizationReport());
      list.add(present_foreclosureOrganizationReport);
      if (present_foreclosureOrganizationReport)
        list.add(foreclosureOrganizationReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrganizationReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureOrganizationReport()).compareTo(other.isSetForeclosureOrganizationReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureOrganizationReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureOrganizationReport, other.foreclosureOrganizationReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrganizationReport_args(");
      boolean first = true;

      sb.append("foreclosureOrganizationReport:");
      if (this.foreclosureOrganizationReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureOrganizationReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureOrganizationReport != null) {
        foreclosureOrganizationReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrganizationReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrganizationReport_argsStandardScheme getScheme() {
        return new queryForeclosureOrganizationReport_argsStandardScheme();
      }
    }

    private static class queryForeclosureOrganizationReport_argsStandardScheme extends StandardScheme<queryForeclosureOrganizationReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrganizationReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_ORGANIZATION_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureOrganizationReport = new ForeclosureOrganizationReport();
                struct.foreclosureOrganizationReport.read(iprot);
                struct.setForeclosureOrganizationReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrganizationReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureOrganizationReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_ORGANIZATION_REPORT_FIELD_DESC);
          struct.foreclosureOrganizationReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrganizationReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrganizationReport_argsTupleScheme getScheme() {
        return new queryForeclosureOrganizationReport_argsTupleScheme();
      }
    }

    private static class queryForeclosureOrganizationReport_argsTupleScheme extends TupleScheme<queryForeclosureOrganizationReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrganizationReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureOrganizationReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureOrganizationReport()) {
          struct.foreclosureOrganizationReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrganizationReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureOrganizationReport = new ForeclosureOrganizationReport();
          struct.foreclosureOrganizationReport.read(iprot);
          struct.setForeclosureOrganizationReportIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureOrganizationReport_result implements org.apache.thrift.TBase<queryForeclosureOrganizationReport_result, queryForeclosureOrganizationReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureOrganizationReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureOrganizationReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureOrganizationReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureOrganizationReport_resultTupleSchemeFactory());
    }

    public List<ForeclosureOrganizationReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrganizationReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureOrganizationReport_result.class, metaDataMap);
    }

    public queryForeclosureOrganizationReport_result() {
    }

    public queryForeclosureOrganizationReport_result(
      List<ForeclosureOrganizationReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureOrganizationReport_result(queryForeclosureOrganizationReport_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureOrganizationReport> __this__success = new ArrayList<ForeclosureOrganizationReport>(other.success.size());
        for (ForeclosureOrganizationReport other_element : other.success) {
          __this__success.add(new ForeclosureOrganizationReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureOrganizationReport_result deepCopy() {
      return new queryForeclosureOrganizationReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureOrganizationReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureOrganizationReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureOrganizationReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureOrganizationReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureOrganizationReport_result setSuccess(List<ForeclosureOrganizationReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureOrganizationReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureOrganizationReport_result)
        return this.equals((queryForeclosureOrganizationReport_result)that);
      return false;
    }

    public boolean equals(queryForeclosureOrganizationReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureOrganizationReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureOrganizationReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureOrganizationReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureOrganizationReport_resultStandardScheme getScheme() {
        return new queryForeclosureOrganizationReport_resultStandardScheme();
      }
    }

    private static class queryForeclosureOrganizationReport_resultStandardScheme extends StandardScheme<queryForeclosureOrganizationReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureOrganizationReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureOrganizationReport>(_list184.size);
                  ForeclosureOrganizationReport _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new ForeclosureOrganizationReport();
                    _elem185.read(iprot);
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureOrganizationReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureOrganizationReport _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureOrganizationReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureOrganizationReport_resultTupleScheme getScheme() {
        return new queryForeclosureOrganizationReport_resultTupleScheme();
      }
    }

    private static class queryForeclosureOrganizationReport_resultTupleScheme extends TupleScheme<queryForeclosureOrganizationReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrganizationReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureOrganizationReport _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureOrganizationReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureOrganizationReport>(_list189.size);
            ForeclosureOrganizationReport _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new ForeclosureOrganizationReport();
              _elem190.read(iprot);
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureOrganizationReportTotal_args implements org.apache.thrift.TBase<getForeclosureOrganizationReportTotal_args, getForeclosureOrganizationReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureOrganizationReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureOrganizationReportTotal_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_ORGANIZATION_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureOrganizationReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureOrganizationReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureOrganizationReportTotal_argsTupleSchemeFactory());
    }

    public ForeclosureOrganizationReport foreclosureOrganizationReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_ORGANIZATION_REPORT((short)1, "foreclosureOrganizationReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_ORGANIZATION_REPORT
            return FORECLOSURE_ORGANIZATION_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_ORGANIZATION_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureOrganizationReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureOrganizationReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureOrganizationReportTotal_args.class, metaDataMap);
    }

    public getForeclosureOrganizationReportTotal_args() {
    }

    public getForeclosureOrganizationReportTotal_args(
      ForeclosureOrganizationReport foreclosureOrganizationReport)
    {
      this();
      this.foreclosureOrganizationReport = foreclosureOrganizationReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureOrganizationReportTotal_args(getForeclosureOrganizationReportTotal_args other) {
      if (other.isSetForeclosureOrganizationReport()) {
        this.foreclosureOrganizationReport = new ForeclosureOrganizationReport(other.foreclosureOrganizationReport);
      }
    }

    public getForeclosureOrganizationReportTotal_args deepCopy() {
      return new getForeclosureOrganizationReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureOrganizationReport = null;
    }

    public ForeclosureOrganizationReport getForeclosureOrganizationReport() {
      return this.foreclosureOrganizationReport;
    }

    public getForeclosureOrganizationReportTotal_args setForeclosureOrganizationReport(ForeclosureOrganizationReport foreclosureOrganizationReport) {
      this.foreclosureOrganizationReport = foreclosureOrganizationReport;
      return this;
    }

    public void unsetForeclosureOrganizationReport() {
      this.foreclosureOrganizationReport = null;
    }

    /** Returns true if field foreclosureOrganizationReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureOrganizationReport() {
      return this.foreclosureOrganizationReport != null;
    }

    public void setForeclosureOrganizationReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureOrganizationReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_ORGANIZATION_REPORT:
        if (value == null) {
          unsetForeclosureOrganizationReport();
        } else {
          setForeclosureOrganizationReport((ForeclosureOrganizationReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_ORGANIZATION_REPORT:
        return getForeclosureOrganizationReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_ORGANIZATION_REPORT:
        return isSetForeclosureOrganizationReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureOrganizationReportTotal_args)
        return this.equals((getForeclosureOrganizationReportTotal_args)that);
      return false;
    }

    public boolean equals(getForeclosureOrganizationReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureOrganizationReport = true && this.isSetForeclosureOrganizationReport();
      boolean that_present_foreclosureOrganizationReport = true && that.isSetForeclosureOrganizationReport();
      if (this_present_foreclosureOrganizationReport || that_present_foreclosureOrganizationReport) {
        if (!(this_present_foreclosureOrganizationReport && that_present_foreclosureOrganizationReport))
          return false;
        if (!this.foreclosureOrganizationReport.equals(that.foreclosureOrganizationReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureOrganizationReport = true && (isSetForeclosureOrganizationReport());
      list.add(present_foreclosureOrganizationReport);
      if (present_foreclosureOrganizationReport)
        list.add(foreclosureOrganizationReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureOrganizationReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureOrganizationReport()).compareTo(other.isSetForeclosureOrganizationReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureOrganizationReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureOrganizationReport, other.foreclosureOrganizationReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureOrganizationReportTotal_args(");
      boolean first = true;

      sb.append("foreclosureOrganizationReport:");
      if (this.foreclosureOrganizationReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureOrganizationReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureOrganizationReport != null) {
        foreclosureOrganizationReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureOrganizationReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getForeclosureOrganizationReportTotal_argsStandardScheme getScheme() {
        return new getForeclosureOrganizationReportTotal_argsStandardScheme();
      }
    }

    private static class getForeclosureOrganizationReportTotal_argsStandardScheme extends StandardScheme<getForeclosureOrganizationReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureOrganizationReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_ORGANIZATION_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureOrganizationReport = new ForeclosureOrganizationReport();
                struct.foreclosureOrganizationReport.read(iprot);
                struct.setForeclosureOrganizationReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureOrganizationReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureOrganizationReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_ORGANIZATION_REPORT_FIELD_DESC);
          struct.foreclosureOrganizationReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureOrganizationReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getForeclosureOrganizationReportTotal_argsTupleScheme getScheme() {
        return new getForeclosureOrganizationReportTotal_argsTupleScheme();
      }
    }

    private static class getForeclosureOrganizationReportTotal_argsTupleScheme extends TupleScheme<getForeclosureOrganizationReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureOrganizationReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureOrganizationReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureOrganizationReport()) {
          struct.foreclosureOrganizationReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureOrganizationReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureOrganizationReport = new ForeclosureOrganizationReport();
          struct.foreclosureOrganizationReport.read(iprot);
          struct.setForeclosureOrganizationReportIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureOrganizationReportTotal_result implements org.apache.thrift.TBase<getForeclosureOrganizationReportTotal_result, getForeclosureOrganizationReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureOrganizationReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureOrganizationReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureOrganizationReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureOrganizationReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureOrganizationReportTotal_result.class, metaDataMap);
    }

    public getForeclosureOrganizationReportTotal_result() {
    }

    public getForeclosureOrganizationReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureOrganizationReportTotal_result(getForeclosureOrganizationReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getForeclosureOrganizationReportTotal_result deepCopy() {
      return new getForeclosureOrganizationReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getForeclosureOrganizationReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureOrganizationReportTotal_result)
        return this.equals((getForeclosureOrganizationReportTotal_result)that);
      return false;
    }

    public boolean equals(getForeclosureOrganizationReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureOrganizationReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureOrganizationReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureOrganizationReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getForeclosureOrganizationReportTotal_resultStandardScheme getScheme() {
        return new getForeclosureOrganizationReportTotal_resultStandardScheme();
      }
    }

    private static class getForeclosureOrganizationReportTotal_resultStandardScheme extends StandardScheme<getForeclosureOrganizationReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureOrganizationReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureOrganizationReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureOrganizationReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getForeclosureOrganizationReportTotal_resultTupleScheme getScheme() {
        return new getForeclosureOrganizationReportTotal_resultTupleScheme();
      }
    }

    private static class getForeclosureOrganizationReportTotal_resultTupleScheme extends TupleScheme<getForeclosureOrganizationReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureOrganizationReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureOrganizationReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapitalReport_args implements org.apache.thrift.TBase<queryForeclosureCapitalReport_args, queryForeclosureCapitalReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapitalReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapitalReport_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_CAPITAL_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureCapitalReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapitalReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapitalReport_argsTupleSchemeFactory());
    }

    public ForeclosureCapitalReport foreclosureCapitalReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_CAPITAL_REPORT((short)1, "foreclosureCapitalReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_CAPITAL_REPORT
            return FORECLOSURE_CAPITAL_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_CAPITAL_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureCapitalReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapitalReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapitalReport_args.class, metaDataMap);
    }

    public queryForeclosureCapitalReport_args() {
    }

    public queryForeclosureCapitalReport_args(
      ForeclosureCapitalReport foreclosureCapitalReport)
    {
      this();
      this.foreclosureCapitalReport = foreclosureCapitalReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapitalReport_args(queryForeclosureCapitalReport_args other) {
      if (other.isSetForeclosureCapitalReport()) {
        this.foreclosureCapitalReport = new ForeclosureCapitalReport(other.foreclosureCapitalReport);
      }
    }

    public queryForeclosureCapitalReport_args deepCopy() {
      return new queryForeclosureCapitalReport_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureCapitalReport = null;
    }

    public ForeclosureCapitalReport getForeclosureCapitalReport() {
      return this.foreclosureCapitalReport;
    }

    public queryForeclosureCapitalReport_args setForeclosureCapitalReport(ForeclosureCapitalReport foreclosureCapitalReport) {
      this.foreclosureCapitalReport = foreclosureCapitalReport;
      return this;
    }

    public void unsetForeclosureCapitalReport() {
      this.foreclosureCapitalReport = null;
    }

    /** Returns true if field foreclosureCapitalReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureCapitalReport() {
      return this.foreclosureCapitalReport != null;
    }

    public void setForeclosureCapitalReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureCapitalReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_CAPITAL_REPORT:
        if (value == null) {
          unsetForeclosureCapitalReport();
        } else {
          setForeclosureCapitalReport((ForeclosureCapitalReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_CAPITAL_REPORT:
        return getForeclosureCapitalReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_CAPITAL_REPORT:
        return isSetForeclosureCapitalReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapitalReport_args)
        return this.equals((queryForeclosureCapitalReport_args)that);
      return false;
    }

    public boolean equals(queryForeclosureCapitalReport_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureCapitalReport = true && this.isSetForeclosureCapitalReport();
      boolean that_present_foreclosureCapitalReport = true && that.isSetForeclosureCapitalReport();
      if (this_present_foreclosureCapitalReport || that_present_foreclosureCapitalReport) {
        if (!(this_present_foreclosureCapitalReport && that_present_foreclosureCapitalReport))
          return false;
        if (!this.foreclosureCapitalReport.equals(that.foreclosureCapitalReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureCapitalReport = true && (isSetForeclosureCapitalReport());
      list.add(present_foreclosureCapitalReport);
      if (present_foreclosureCapitalReport)
        list.add(foreclosureCapitalReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapitalReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureCapitalReport()).compareTo(other.isSetForeclosureCapitalReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureCapitalReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureCapitalReport, other.foreclosureCapitalReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapitalReport_args(");
      boolean first = true;

      sb.append("foreclosureCapitalReport:");
      if (this.foreclosureCapitalReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureCapitalReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureCapitalReport != null) {
        foreclosureCapitalReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapitalReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapitalReport_argsStandardScheme getScheme() {
        return new queryForeclosureCapitalReport_argsStandardScheme();
      }
    }

    private static class queryForeclosureCapitalReport_argsStandardScheme extends StandardScheme<queryForeclosureCapitalReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapitalReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_CAPITAL_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureCapitalReport = new ForeclosureCapitalReport();
                struct.foreclosureCapitalReport.read(iprot);
                struct.setForeclosureCapitalReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapitalReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureCapitalReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_CAPITAL_REPORT_FIELD_DESC);
          struct.foreclosureCapitalReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapitalReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapitalReport_argsTupleScheme getScheme() {
        return new queryForeclosureCapitalReport_argsTupleScheme();
      }
    }

    private static class queryForeclosureCapitalReport_argsTupleScheme extends TupleScheme<queryForeclosureCapitalReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapitalReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureCapitalReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureCapitalReport()) {
          struct.foreclosureCapitalReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapitalReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureCapitalReport = new ForeclosureCapitalReport();
          struct.foreclosureCapitalReport.read(iprot);
          struct.setForeclosureCapitalReportIsSet(true);
        }
      }
    }

  }

  public static class queryForeclosureCapitalReport_result implements org.apache.thrift.TBase<queryForeclosureCapitalReport_result, queryForeclosureCapitalReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForeclosureCapitalReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForeclosureCapitalReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryForeclosureCapitalReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryForeclosureCapitalReport_resultTupleSchemeFactory());
    }

    public List<ForeclosureCapitalReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapitalReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForeclosureCapitalReport_result.class, metaDataMap);
    }

    public queryForeclosureCapitalReport_result() {
    }

    public queryForeclosureCapitalReport_result(
      List<ForeclosureCapitalReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForeclosureCapitalReport_result(queryForeclosureCapitalReport_result other) {
      if (other.isSetSuccess()) {
        List<ForeclosureCapitalReport> __this__success = new ArrayList<ForeclosureCapitalReport>(other.success.size());
        for (ForeclosureCapitalReport other_element : other.success) {
          __this__success.add(new ForeclosureCapitalReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryForeclosureCapitalReport_result deepCopy() {
      return new queryForeclosureCapitalReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ForeclosureCapitalReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ForeclosureCapitalReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<ForeclosureCapitalReport>();
      }
      this.success.add(elem);
    }

    public List<ForeclosureCapitalReport> getSuccess() {
      return this.success;
    }

    public queryForeclosureCapitalReport_result setSuccess(List<ForeclosureCapitalReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ForeclosureCapitalReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForeclosureCapitalReport_result)
        return this.equals((queryForeclosureCapitalReport_result)that);
      return false;
    }

    public boolean equals(queryForeclosureCapitalReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryForeclosureCapitalReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryForeclosureCapitalReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForeclosureCapitalReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryForeclosureCapitalReport_resultStandardScheme getScheme() {
        return new queryForeclosureCapitalReport_resultStandardScheme();
      }
    }

    private static class queryForeclosureCapitalReport_resultStandardScheme extends StandardScheme<queryForeclosureCapitalReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForeclosureCapitalReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<ForeclosureCapitalReport>(_list192.size);
                  ForeclosureCapitalReport _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new ForeclosureCapitalReport();
                    _elem193.read(iprot);
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForeclosureCapitalReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ForeclosureCapitalReport _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForeclosureCapitalReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryForeclosureCapitalReport_resultTupleScheme getScheme() {
        return new queryForeclosureCapitalReport_resultTupleScheme();
      }
    }

    private static class queryForeclosureCapitalReport_resultTupleScheme extends TupleScheme<queryForeclosureCapitalReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapitalReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ForeclosureCapitalReport _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForeclosureCapitalReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ForeclosureCapitalReport>(_list197.size);
            ForeclosureCapitalReport _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new ForeclosureCapitalReport();
              _elem198.read(iprot);
              struct.success.add(_elem198);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureCapitalReportTotal_args implements org.apache.thrift.TBase<getForeclosureCapitalReportTotal_args, getForeclosureCapitalReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureCapitalReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureCapitalReportTotal_args");

    private static final org.apache.thrift.protocol.TField FORECLOSURE_CAPITAL_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureCapitalReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureCapitalReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureCapitalReportTotal_argsTupleSchemeFactory());
    }

    public ForeclosureCapitalReport foreclosureCapitalReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FORECLOSURE_CAPITAL_REPORT((short)1, "foreclosureCapitalReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FORECLOSURE_CAPITAL_REPORT
            return FORECLOSURE_CAPITAL_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FORECLOSURE_CAPITAL_REPORT, new org.apache.thrift.meta_data.FieldMetaData("foreclosureCapitalReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ForeclosureCapitalReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureCapitalReportTotal_args.class, metaDataMap);
    }

    public getForeclosureCapitalReportTotal_args() {
    }

    public getForeclosureCapitalReportTotal_args(
      ForeclosureCapitalReport foreclosureCapitalReport)
    {
      this();
      this.foreclosureCapitalReport = foreclosureCapitalReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureCapitalReportTotal_args(getForeclosureCapitalReportTotal_args other) {
      if (other.isSetForeclosureCapitalReport()) {
        this.foreclosureCapitalReport = new ForeclosureCapitalReport(other.foreclosureCapitalReport);
      }
    }

    public getForeclosureCapitalReportTotal_args deepCopy() {
      return new getForeclosureCapitalReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.foreclosureCapitalReport = null;
    }

    public ForeclosureCapitalReport getForeclosureCapitalReport() {
      return this.foreclosureCapitalReport;
    }

    public getForeclosureCapitalReportTotal_args setForeclosureCapitalReport(ForeclosureCapitalReport foreclosureCapitalReport) {
      this.foreclosureCapitalReport = foreclosureCapitalReport;
      return this;
    }

    public void unsetForeclosureCapitalReport() {
      this.foreclosureCapitalReport = null;
    }

    /** Returns true if field foreclosureCapitalReport is set (has been assigned a value) and false otherwise */
    public boolean isSetForeclosureCapitalReport() {
      return this.foreclosureCapitalReport != null;
    }

    public void setForeclosureCapitalReportIsSet(boolean value) {
      if (!value) {
        this.foreclosureCapitalReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FORECLOSURE_CAPITAL_REPORT:
        if (value == null) {
          unsetForeclosureCapitalReport();
        } else {
          setForeclosureCapitalReport((ForeclosureCapitalReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FORECLOSURE_CAPITAL_REPORT:
        return getForeclosureCapitalReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FORECLOSURE_CAPITAL_REPORT:
        return isSetForeclosureCapitalReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureCapitalReportTotal_args)
        return this.equals((getForeclosureCapitalReportTotal_args)that);
      return false;
    }

    public boolean equals(getForeclosureCapitalReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_foreclosureCapitalReport = true && this.isSetForeclosureCapitalReport();
      boolean that_present_foreclosureCapitalReport = true && that.isSetForeclosureCapitalReport();
      if (this_present_foreclosureCapitalReport || that_present_foreclosureCapitalReport) {
        if (!(this_present_foreclosureCapitalReport && that_present_foreclosureCapitalReport))
          return false;
        if (!this.foreclosureCapitalReport.equals(that.foreclosureCapitalReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreclosureCapitalReport = true && (isSetForeclosureCapitalReport());
      list.add(present_foreclosureCapitalReport);
      if (present_foreclosureCapitalReport)
        list.add(foreclosureCapitalReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureCapitalReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeclosureCapitalReport()).compareTo(other.isSetForeclosureCapitalReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeclosureCapitalReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureCapitalReport, other.foreclosureCapitalReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureCapitalReportTotal_args(");
      boolean first = true;

      sb.append("foreclosureCapitalReport:");
      if (this.foreclosureCapitalReport == null) {
        sb.append("null");
      } else {
        sb.append(this.foreclosureCapitalReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foreclosureCapitalReport != null) {
        foreclosureCapitalReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureCapitalReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getForeclosureCapitalReportTotal_argsStandardScheme getScheme() {
        return new getForeclosureCapitalReportTotal_argsStandardScheme();
      }
    }

    private static class getForeclosureCapitalReportTotal_argsStandardScheme extends StandardScheme<getForeclosureCapitalReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureCapitalReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FORECLOSURE_CAPITAL_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foreclosureCapitalReport = new ForeclosureCapitalReport();
                struct.foreclosureCapitalReport.read(iprot);
                struct.setForeclosureCapitalReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureCapitalReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreclosureCapitalReport != null) {
          oprot.writeFieldBegin(FORECLOSURE_CAPITAL_REPORT_FIELD_DESC);
          struct.foreclosureCapitalReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureCapitalReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getForeclosureCapitalReportTotal_argsTupleScheme getScheme() {
        return new getForeclosureCapitalReportTotal_argsTupleScheme();
      }
    }

    private static class getForeclosureCapitalReportTotal_argsTupleScheme extends TupleScheme<getForeclosureCapitalReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureCapitalReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeclosureCapitalReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetForeclosureCapitalReport()) {
          struct.foreclosureCapitalReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureCapitalReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.foreclosureCapitalReport = new ForeclosureCapitalReport();
          struct.foreclosureCapitalReport.read(iprot);
          struct.setForeclosureCapitalReportIsSet(true);
        }
      }
    }

  }

  public static class getForeclosureCapitalReportTotal_result implements org.apache.thrift.TBase<getForeclosureCapitalReportTotal_result, getForeclosureCapitalReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getForeclosureCapitalReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getForeclosureCapitalReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getForeclosureCapitalReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getForeclosureCapitalReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getForeclosureCapitalReportTotal_result.class, metaDataMap);
    }

    public getForeclosureCapitalReportTotal_result() {
    }

    public getForeclosureCapitalReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getForeclosureCapitalReportTotal_result(getForeclosureCapitalReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getForeclosureCapitalReportTotal_result deepCopy() {
      return new getForeclosureCapitalReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getForeclosureCapitalReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getForeclosureCapitalReportTotal_result)
        return this.equals((getForeclosureCapitalReportTotal_result)that);
      return false;
    }

    public boolean equals(getForeclosureCapitalReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getForeclosureCapitalReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getForeclosureCapitalReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getForeclosureCapitalReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getForeclosureCapitalReportTotal_resultStandardScheme getScheme() {
        return new getForeclosureCapitalReportTotal_resultStandardScheme();
      }
    }

    private static class getForeclosureCapitalReportTotal_resultStandardScheme extends StandardScheme<getForeclosureCapitalReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getForeclosureCapitalReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getForeclosureCapitalReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getForeclosureCapitalReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getForeclosureCapitalReportTotal_resultTupleScheme getScheme() {
        return new getForeclosureCapitalReportTotal_resultTupleScheme();
      }
    }

    private static class getForeclosureCapitalReportTotal_resultTupleScheme extends TupleScheme<getForeclosureCapitalReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getForeclosureCapitalReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getForeclosureCapitalReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryFinancialStatisticsReport_args implements org.apache.thrift.TBase<queryFinancialStatisticsReport_args, queryFinancialStatisticsReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryFinancialStatisticsReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFinancialStatisticsReport_args");

    private static final org.apache.thrift.protocol.TField FINANCIAL_STATISTICS_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("financialStatisticsReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFinancialStatisticsReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFinancialStatisticsReport_argsTupleSchemeFactory());
    }

    public FinancialStatisticsReport financialStatisticsReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCIAL_STATISTICS_REPORT((short)1, "financialStatisticsReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCIAL_STATISTICS_REPORT
            return FINANCIAL_STATISTICS_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCIAL_STATISTICS_REPORT, new org.apache.thrift.meta_data.FieldMetaData("financialStatisticsReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinancialStatisticsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFinancialStatisticsReport_args.class, metaDataMap);
    }

    public queryFinancialStatisticsReport_args() {
    }

    public queryFinancialStatisticsReport_args(
      FinancialStatisticsReport financialStatisticsReport)
    {
      this();
      this.financialStatisticsReport = financialStatisticsReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFinancialStatisticsReport_args(queryFinancialStatisticsReport_args other) {
      if (other.isSetFinancialStatisticsReport()) {
        this.financialStatisticsReport = new FinancialStatisticsReport(other.financialStatisticsReport);
      }
    }

    public queryFinancialStatisticsReport_args deepCopy() {
      return new queryFinancialStatisticsReport_args(this);
    }

    @Override
    public void clear() {
      this.financialStatisticsReport = null;
    }

    public FinancialStatisticsReport getFinancialStatisticsReport() {
      return this.financialStatisticsReport;
    }

    public queryFinancialStatisticsReport_args setFinancialStatisticsReport(FinancialStatisticsReport financialStatisticsReport) {
      this.financialStatisticsReport = financialStatisticsReport;
      return this;
    }

    public void unsetFinancialStatisticsReport() {
      this.financialStatisticsReport = null;
    }

    /** Returns true if field financialStatisticsReport is set (has been assigned a value) and false otherwise */
    public boolean isSetFinancialStatisticsReport() {
      return this.financialStatisticsReport != null;
    }

    public void setFinancialStatisticsReportIsSet(boolean value) {
      if (!value) {
        this.financialStatisticsReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCIAL_STATISTICS_REPORT:
        if (value == null) {
          unsetFinancialStatisticsReport();
        } else {
          setFinancialStatisticsReport((FinancialStatisticsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCIAL_STATISTICS_REPORT:
        return getFinancialStatisticsReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCIAL_STATISTICS_REPORT:
        return isSetFinancialStatisticsReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFinancialStatisticsReport_args)
        return this.equals((queryFinancialStatisticsReport_args)that);
      return false;
    }

    public boolean equals(queryFinancialStatisticsReport_args that) {
      if (that == null)
        return false;

      boolean this_present_financialStatisticsReport = true && this.isSetFinancialStatisticsReport();
      boolean that_present_financialStatisticsReport = true && that.isSetFinancialStatisticsReport();
      if (this_present_financialStatisticsReport || that_present_financialStatisticsReport) {
        if (!(this_present_financialStatisticsReport && that_present_financialStatisticsReport))
          return false;
        if (!this.financialStatisticsReport.equals(that.financialStatisticsReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financialStatisticsReport = true && (isSetFinancialStatisticsReport());
      list.add(present_financialStatisticsReport);
      if (present_financialStatisticsReport)
        list.add(financialStatisticsReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryFinancialStatisticsReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinancialStatisticsReport()).compareTo(other.isSetFinancialStatisticsReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinancialStatisticsReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financialStatisticsReport, other.financialStatisticsReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFinancialStatisticsReport_args(");
      boolean first = true;

      sb.append("financialStatisticsReport:");
      if (this.financialStatisticsReport == null) {
        sb.append("null");
      } else {
        sb.append(this.financialStatisticsReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financialStatisticsReport != null) {
        financialStatisticsReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFinancialStatisticsReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryFinancialStatisticsReport_argsStandardScheme getScheme() {
        return new queryFinancialStatisticsReport_argsStandardScheme();
      }
    }

    private static class queryFinancialStatisticsReport_argsStandardScheme extends StandardScheme<queryFinancialStatisticsReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFinancialStatisticsReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCIAL_STATISTICS_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financialStatisticsReport = new FinancialStatisticsReport();
                struct.financialStatisticsReport.read(iprot);
                struct.setFinancialStatisticsReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFinancialStatisticsReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financialStatisticsReport != null) {
          oprot.writeFieldBegin(FINANCIAL_STATISTICS_REPORT_FIELD_DESC);
          struct.financialStatisticsReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFinancialStatisticsReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryFinancialStatisticsReport_argsTupleScheme getScheme() {
        return new queryFinancialStatisticsReport_argsTupleScheme();
      }
    }

    private static class queryFinancialStatisticsReport_argsTupleScheme extends TupleScheme<queryFinancialStatisticsReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFinancialStatisticsReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinancialStatisticsReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinancialStatisticsReport()) {
          struct.financialStatisticsReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFinancialStatisticsReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financialStatisticsReport = new FinancialStatisticsReport();
          struct.financialStatisticsReport.read(iprot);
          struct.setFinancialStatisticsReportIsSet(true);
        }
      }
    }

  }

  public static class queryFinancialStatisticsReport_result implements org.apache.thrift.TBase<queryFinancialStatisticsReport_result, queryFinancialStatisticsReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryFinancialStatisticsReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryFinancialStatisticsReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryFinancialStatisticsReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryFinancialStatisticsReport_resultTupleSchemeFactory());
    }

    public List<FinancialStatisticsReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinancialStatisticsReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryFinancialStatisticsReport_result.class, metaDataMap);
    }

    public queryFinancialStatisticsReport_result() {
    }

    public queryFinancialStatisticsReport_result(
      List<FinancialStatisticsReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryFinancialStatisticsReport_result(queryFinancialStatisticsReport_result other) {
      if (other.isSetSuccess()) {
        List<FinancialStatisticsReport> __this__success = new ArrayList<FinancialStatisticsReport>(other.success.size());
        for (FinancialStatisticsReport other_element : other.success) {
          __this__success.add(new FinancialStatisticsReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryFinancialStatisticsReport_result deepCopy() {
      return new queryFinancialStatisticsReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FinancialStatisticsReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FinancialStatisticsReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<FinancialStatisticsReport>();
      }
      this.success.add(elem);
    }

    public List<FinancialStatisticsReport> getSuccess() {
      return this.success;
    }

    public queryFinancialStatisticsReport_result setSuccess(List<FinancialStatisticsReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FinancialStatisticsReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryFinancialStatisticsReport_result)
        return this.equals((queryFinancialStatisticsReport_result)that);
      return false;
    }

    public boolean equals(queryFinancialStatisticsReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryFinancialStatisticsReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryFinancialStatisticsReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryFinancialStatisticsReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryFinancialStatisticsReport_resultStandardScheme getScheme() {
        return new queryFinancialStatisticsReport_resultStandardScheme();
      }
    }

    private static class queryFinancialStatisticsReport_resultStandardScheme extends StandardScheme<queryFinancialStatisticsReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryFinancialStatisticsReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.success = new ArrayList<FinancialStatisticsReport>(_list200.size);
                  FinancialStatisticsReport _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = new FinancialStatisticsReport();
                    _elem201.read(iprot);
                    struct.success.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryFinancialStatisticsReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FinancialStatisticsReport _iter203 : struct.success)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryFinancialStatisticsReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryFinancialStatisticsReport_resultTupleScheme getScheme() {
        return new queryFinancialStatisticsReport_resultTupleScheme();
      }
    }

    private static class queryFinancialStatisticsReport_resultTupleScheme extends TupleScheme<queryFinancialStatisticsReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryFinancialStatisticsReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FinancialStatisticsReport _iter204 : struct.success)
            {
              _iter204.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryFinancialStatisticsReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FinancialStatisticsReport>(_list205.size);
            FinancialStatisticsReport _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new FinancialStatisticsReport();
              _elem206.read(iprot);
              struct.success.add(_elem206);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinancialStatisticsReportTotal_args implements org.apache.thrift.TBase<getFinancialStatisticsReportTotal_args, getFinancialStatisticsReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinancialStatisticsReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinancialStatisticsReportTotal_args");

    private static final org.apache.thrift.protocol.TField FINANCIAL_STATISTICS_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("financialStatisticsReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinancialStatisticsReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinancialStatisticsReportTotal_argsTupleSchemeFactory());
    }

    public FinancialStatisticsReport financialStatisticsReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCIAL_STATISTICS_REPORT((short)1, "financialStatisticsReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCIAL_STATISTICS_REPORT
            return FINANCIAL_STATISTICS_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCIAL_STATISTICS_REPORT, new org.apache.thrift.meta_data.FieldMetaData("financialStatisticsReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinancialStatisticsReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinancialStatisticsReportTotal_args.class, metaDataMap);
    }

    public getFinancialStatisticsReportTotal_args() {
    }

    public getFinancialStatisticsReportTotal_args(
      FinancialStatisticsReport financialStatisticsReport)
    {
      this();
      this.financialStatisticsReport = financialStatisticsReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinancialStatisticsReportTotal_args(getFinancialStatisticsReportTotal_args other) {
      if (other.isSetFinancialStatisticsReport()) {
        this.financialStatisticsReport = new FinancialStatisticsReport(other.financialStatisticsReport);
      }
    }

    public getFinancialStatisticsReportTotal_args deepCopy() {
      return new getFinancialStatisticsReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.financialStatisticsReport = null;
    }

    public FinancialStatisticsReport getFinancialStatisticsReport() {
      return this.financialStatisticsReport;
    }

    public getFinancialStatisticsReportTotal_args setFinancialStatisticsReport(FinancialStatisticsReport financialStatisticsReport) {
      this.financialStatisticsReport = financialStatisticsReport;
      return this;
    }

    public void unsetFinancialStatisticsReport() {
      this.financialStatisticsReport = null;
    }

    /** Returns true if field financialStatisticsReport is set (has been assigned a value) and false otherwise */
    public boolean isSetFinancialStatisticsReport() {
      return this.financialStatisticsReport != null;
    }

    public void setFinancialStatisticsReportIsSet(boolean value) {
      if (!value) {
        this.financialStatisticsReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCIAL_STATISTICS_REPORT:
        if (value == null) {
          unsetFinancialStatisticsReport();
        } else {
          setFinancialStatisticsReport((FinancialStatisticsReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCIAL_STATISTICS_REPORT:
        return getFinancialStatisticsReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCIAL_STATISTICS_REPORT:
        return isSetFinancialStatisticsReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinancialStatisticsReportTotal_args)
        return this.equals((getFinancialStatisticsReportTotal_args)that);
      return false;
    }

    public boolean equals(getFinancialStatisticsReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_financialStatisticsReport = true && this.isSetFinancialStatisticsReport();
      boolean that_present_financialStatisticsReport = true && that.isSetFinancialStatisticsReport();
      if (this_present_financialStatisticsReport || that_present_financialStatisticsReport) {
        if (!(this_present_financialStatisticsReport && that_present_financialStatisticsReport))
          return false;
        if (!this.financialStatisticsReport.equals(that.financialStatisticsReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financialStatisticsReport = true && (isSetFinancialStatisticsReport());
      list.add(present_financialStatisticsReport);
      if (present_financialStatisticsReport)
        list.add(financialStatisticsReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinancialStatisticsReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinancialStatisticsReport()).compareTo(other.isSetFinancialStatisticsReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinancialStatisticsReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financialStatisticsReport, other.financialStatisticsReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinancialStatisticsReportTotal_args(");
      boolean first = true;

      sb.append("financialStatisticsReport:");
      if (this.financialStatisticsReport == null) {
        sb.append("null");
      } else {
        sb.append(this.financialStatisticsReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financialStatisticsReport != null) {
        financialStatisticsReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinancialStatisticsReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getFinancialStatisticsReportTotal_argsStandardScheme getScheme() {
        return new getFinancialStatisticsReportTotal_argsStandardScheme();
      }
    }

    private static class getFinancialStatisticsReportTotal_argsStandardScheme extends StandardScheme<getFinancialStatisticsReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinancialStatisticsReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCIAL_STATISTICS_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financialStatisticsReport = new FinancialStatisticsReport();
                struct.financialStatisticsReport.read(iprot);
                struct.setFinancialStatisticsReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinancialStatisticsReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financialStatisticsReport != null) {
          oprot.writeFieldBegin(FINANCIAL_STATISTICS_REPORT_FIELD_DESC);
          struct.financialStatisticsReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinancialStatisticsReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getFinancialStatisticsReportTotal_argsTupleScheme getScheme() {
        return new getFinancialStatisticsReportTotal_argsTupleScheme();
      }
    }

    private static class getFinancialStatisticsReportTotal_argsTupleScheme extends TupleScheme<getFinancialStatisticsReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinancialStatisticsReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinancialStatisticsReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinancialStatisticsReport()) {
          struct.financialStatisticsReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinancialStatisticsReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financialStatisticsReport = new FinancialStatisticsReport();
          struct.financialStatisticsReport.read(iprot);
          struct.setFinancialStatisticsReportIsSet(true);
        }
      }
    }

  }

  public static class getFinancialStatisticsReportTotal_result implements org.apache.thrift.TBase<getFinancialStatisticsReportTotal_result, getFinancialStatisticsReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinancialStatisticsReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinancialStatisticsReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinancialStatisticsReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinancialStatisticsReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinancialStatisticsReportTotal_result.class, metaDataMap);
    }

    public getFinancialStatisticsReportTotal_result() {
    }

    public getFinancialStatisticsReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinancialStatisticsReportTotal_result(getFinancialStatisticsReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getFinancialStatisticsReportTotal_result deepCopy() {
      return new getFinancialStatisticsReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getFinancialStatisticsReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinancialStatisticsReportTotal_result)
        return this.equals((getFinancialStatisticsReportTotal_result)that);
      return false;
    }

    public boolean equals(getFinancialStatisticsReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinancialStatisticsReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinancialStatisticsReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinancialStatisticsReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getFinancialStatisticsReportTotal_resultStandardScheme getScheme() {
        return new getFinancialStatisticsReportTotal_resultStandardScheme();
      }
    }

    private static class getFinancialStatisticsReportTotal_resultStandardScheme extends StandardScheme<getFinancialStatisticsReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinancialStatisticsReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinancialStatisticsReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinancialStatisticsReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getFinancialStatisticsReportTotal_resultTupleScheme getScheme() {
        return new getFinancialStatisticsReportTotal_resultTupleScheme();
      }
    }

    private static class getFinancialStatisticsReportTotal_resultTupleScheme extends TupleScheme<getFinancialStatisticsReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinancialStatisticsReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinancialStatisticsReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryRefundFeesReport_args implements org.apache.thrift.TBase<queryRefundFeesReport_args, queryRefundFeesReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRefundFeesReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRefundFeesReport_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEES_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeesReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRefundFeesReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRefundFeesReport_argsTupleSchemeFactory());
    }

    public RefundFeesReport refundFeesReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEES_REPORT((short)1, "refundFeesReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEES_REPORT
            return REFUND_FEES_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEES_REPORT, new org.apache.thrift.meta_data.FieldMetaData("refundFeesReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeesReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRefundFeesReport_args.class, metaDataMap);
    }

    public queryRefundFeesReport_args() {
    }

    public queryRefundFeesReport_args(
      RefundFeesReport refundFeesReport)
    {
      this();
      this.refundFeesReport = refundFeesReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRefundFeesReport_args(queryRefundFeesReport_args other) {
      if (other.isSetRefundFeesReport()) {
        this.refundFeesReport = new RefundFeesReport(other.refundFeesReport);
      }
    }

    public queryRefundFeesReport_args deepCopy() {
      return new queryRefundFeesReport_args(this);
    }

    @Override
    public void clear() {
      this.refundFeesReport = null;
    }

    public RefundFeesReport getRefundFeesReport() {
      return this.refundFeesReport;
    }

    public queryRefundFeesReport_args setRefundFeesReport(RefundFeesReport refundFeesReport) {
      this.refundFeesReport = refundFeesReport;
      return this;
    }

    public void unsetRefundFeesReport() {
      this.refundFeesReport = null;
    }

    /** Returns true if field refundFeesReport is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeesReport() {
      return this.refundFeesReport != null;
    }

    public void setRefundFeesReportIsSet(boolean value) {
      if (!value) {
        this.refundFeesReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEES_REPORT:
        if (value == null) {
          unsetRefundFeesReport();
        } else {
          setRefundFeesReport((RefundFeesReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEES_REPORT:
        return getRefundFeesReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEES_REPORT:
        return isSetRefundFeesReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRefundFeesReport_args)
        return this.equals((queryRefundFeesReport_args)that);
      return false;
    }

    public boolean equals(queryRefundFeesReport_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeesReport = true && this.isSetRefundFeesReport();
      boolean that_present_refundFeesReport = true && that.isSetRefundFeesReport();
      if (this_present_refundFeesReport || that_present_refundFeesReport) {
        if (!(this_present_refundFeesReport && that_present_refundFeesReport))
          return false;
        if (!this.refundFeesReport.equals(that.refundFeesReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeesReport = true && (isSetRefundFeesReport());
      list.add(present_refundFeesReport);
      if (present_refundFeesReport)
        list.add(refundFeesReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRefundFeesReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeesReport()).compareTo(other.isSetRefundFeesReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeesReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeesReport, other.refundFeesReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRefundFeesReport_args(");
      boolean first = true;

      sb.append("refundFeesReport:");
      if (this.refundFeesReport == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeesReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeesReport != null) {
        refundFeesReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRefundFeesReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryRefundFeesReport_argsStandardScheme getScheme() {
        return new queryRefundFeesReport_argsStandardScheme();
      }
    }

    private static class queryRefundFeesReport_argsStandardScheme extends StandardScheme<queryRefundFeesReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRefundFeesReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEES_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeesReport = new RefundFeesReport();
                struct.refundFeesReport.read(iprot);
                struct.setRefundFeesReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRefundFeesReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeesReport != null) {
          oprot.writeFieldBegin(REFUND_FEES_REPORT_FIELD_DESC);
          struct.refundFeesReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRefundFeesReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryRefundFeesReport_argsTupleScheme getScheme() {
        return new queryRefundFeesReport_argsTupleScheme();
      }
    }

    private static class queryRefundFeesReport_argsTupleScheme extends TupleScheme<queryRefundFeesReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRefundFeesReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeesReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeesReport()) {
          struct.refundFeesReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRefundFeesReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeesReport = new RefundFeesReport();
          struct.refundFeesReport.read(iprot);
          struct.setRefundFeesReportIsSet(true);
        }
      }
    }

  }

  public static class queryRefundFeesReport_result implements org.apache.thrift.TBase<queryRefundFeesReport_result, queryRefundFeesReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRefundFeesReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRefundFeesReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRefundFeesReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRefundFeesReport_resultTupleSchemeFactory());
    }

    public List<RefundFeesReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeesReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRefundFeesReport_result.class, metaDataMap);
    }

    public queryRefundFeesReport_result() {
    }

    public queryRefundFeesReport_result(
      List<RefundFeesReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRefundFeesReport_result(queryRefundFeesReport_result other) {
      if (other.isSetSuccess()) {
        List<RefundFeesReport> __this__success = new ArrayList<RefundFeesReport>(other.success.size());
        for (RefundFeesReport other_element : other.success) {
          __this__success.add(new RefundFeesReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryRefundFeesReport_result deepCopy() {
      return new queryRefundFeesReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RefundFeesReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RefundFeesReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<RefundFeesReport>();
      }
      this.success.add(elem);
    }

    public List<RefundFeesReport> getSuccess() {
      return this.success;
    }

    public queryRefundFeesReport_result setSuccess(List<RefundFeesReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RefundFeesReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRefundFeesReport_result)
        return this.equals((queryRefundFeesReport_result)that);
      return false;
    }

    public boolean equals(queryRefundFeesReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRefundFeesReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRefundFeesReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRefundFeesReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryRefundFeesReport_resultStandardScheme getScheme() {
        return new queryRefundFeesReport_resultStandardScheme();
      }
    }

    private static class queryRefundFeesReport_resultStandardScheme extends StandardScheme<queryRefundFeesReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRefundFeesReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new ArrayList<RefundFeesReport>(_list208.size);
                  RefundFeesReport _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new RefundFeesReport();
                    _elem209.read(iprot);
                    struct.success.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRefundFeesReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RefundFeesReport _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRefundFeesReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryRefundFeesReport_resultTupleScheme getScheme() {
        return new queryRefundFeesReport_resultTupleScheme();
      }
    }

    private static class queryRefundFeesReport_resultTupleScheme extends TupleScheme<queryRefundFeesReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRefundFeesReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RefundFeesReport _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRefundFeesReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RefundFeesReport>(_list213.size);
            RefundFeesReport _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new RefundFeesReport();
              _elem214.read(iprot);
              struct.success.add(_elem214);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRefundFeesReportTotal_args implements org.apache.thrift.TBase<getRefundFeesReportTotal_args, getRefundFeesReportTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundFeesReportTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundFeesReportTotal_args");

    private static final org.apache.thrift.protocol.TField REFUND_FEES_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFeesReport", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundFeesReportTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundFeesReportTotal_argsTupleSchemeFactory());
    }

    public RefundFeesReport refundFeesReport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_FEES_REPORT((short)1, "refundFeesReport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_FEES_REPORT
            return REFUND_FEES_REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_FEES_REPORT, new org.apache.thrift.meta_data.FieldMetaData("refundFeesReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundFeesReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundFeesReportTotal_args.class, metaDataMap);
    }

    public getRefundFeesReportTotal_args() {
    }

    public getRefundFeesReportTotal_args(
      RefundFeesReport refundFeesReport)
    {
      this();
      this.refundFeesReport = refundFeesReport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundFeesReportTotal_args(getRefundFeesReportTotal_args other) {
      if (other.isSetRefundFeesReport()) {
        this.refundFeesReport = new RefundFeesReport(other.refundFeesReport);
      }
    }

    public getRefundFeesReportTotal_args deepCopy() {
      return new getRefundFeesReportTotal_args(this);
    }

    @Override
    public void clear() {
      this.refundFeesReport = null;
    }

    public RefundFeesReport getRefundFeesReport() {
      return this.refundFeesReport;
    }

    public getRefundFeesReportTotal_args setRefundFeesReport(RefundFeesReport refundFeesReport) {
      this.refundFeesReport = refundFeesReport;
      return this;
    }

    public void unsetRefundFeesReport() {
      this.refundFeesReport = null;
    }

    /** Returns true if field refundFeesReport is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundFeesReport() {
      return this.refundFeesReport != null;
    }

    public void setRefundFeesReportIsSet(boolean value) {
      if (!value) {
        this.refundFeesReport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_FEES_REPORT:
        if (value == null) {
          unsetRefundFeesReport();
        } else {
          setRefundFeesReport((RefundFeesReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_FEES_REPORT:
        return getRefundFeesReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_FEES_REPORT:
        return isSetRefundFeesReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundFeesReportTotal_args)
        return this.equals((getRefundFeesReportTotal_args)that);
      return false;
    }

    public boolean equals(getRefundFeesReportTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_refundFeesReport = true && this.isSetRefundFeesReport();
      boolean that_present_refundFeesReport = true && that.isSetRefundFeesReport();
      if (this_present_refundFeesReport || that_present_refundFeesReport) {
        if (!(this_present_refundFeesReport && that_present_refundFeesReport))
          return false;
        if (!this.refundFeesReport.equals(that.refundFeesReport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundFeesReport = true && (isSetRefundFeesReport());
      list.add(present_refundFeesReport);
      if (present_refundFeesReport)
        list.add(refundFeesReport);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundFeesReportTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundFeesReport()).compareTo(other.isSetRefundFeesReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundFeesReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFeesReport, other.refundFeesReport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundFeesReportTotal_args(");
      boolean first = true;

      sb.append("refundFeesReport:");
      if (this.refundFeesReport == null) {
        sb.append("null");
      } else {
        sb.append(this.refundFeesReport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundFeesReport != null) {
        refundFeesReport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundFeesReportTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRefundFeesReportTotal_argsStandardScheme getScheme() {
        return new getRefundFeesReportTotal_argsStandardScheme();
      }
    }

    private static class getRefundFeesReportTotal_argsStandardScheme extends StandardScheme<getRefundFeesReportTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundFeesReportTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_FEES_REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundFeesReport = new RefundFeesReport();
                struct.refundFeesReport.read(iprot);
                struct.setRefundFeesReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundFeesReportTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundFeesReport != null) {
          oprot.writeFieldBegin(REFUND_FEES_REPORT_FIELD_DESC);
          struct.refundFeesReport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundFeesReportTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRefundFeesReportTotal_argsTupleScheme getScheme() {
        return new getRefundFeesReportTotal_argsTupleScheme();
      }
    }

    private static class getRefundFeesReportTotal_argsTupleScheme extends TupleScheme<getRefundFeesReportTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundFeesReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundFeesReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundFeesReport()) {
          struct.refundFeesReport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundFeesReportTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundFeesReport = new RefundFeesReport();
          struct.refundFeesReport.read(iprot);
          struct.setRefundFeesReportIsSet(true);
        }
      }
    }

  }

  public static class getRefundFeesReportTotal_result implements org.apache.thrift.TBase<getRefundFeesReportTotal_result, getRefundFeesReportTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRefundFeesReportTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRefundFeesReportTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRefundFeesReportTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRefundFeesReportTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRefundFeesReportTotal_result.class, metaDataMap);
    }

    public getRefundFeesReportTotal_result() {
    }

    public getRefundFeesReportTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRefundFeesReportTotal_result(getRefundFeesReportTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRefundFeesReportTotal_result deepCopy() {
      return new getRefundFeesReportTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRefundFeesReportTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRefundFeesReportTotal_result)
        return this.equals((getRefundFeesReportTotal_result)that);
      return false;
    }

    public boolean equals(getRefundFeesReportTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRefundFeesReportTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRefundFeesReportTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRefundFeesReportTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRefundFeesReportTotal_resultStandardScheme getScheme() {
        return new getRefundFeesReportTotal_resultStandardScheme();
      }
    }

    private static class getRefundFeesReportTotal_resultStandardScheme extends StandardScheme<getRefundFeesReportTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRefundFeesReportTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRefundFeesReportTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRefundFeesReportTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRefundFeesReportTotal_resultTupleScheme getScheme() {
        return new getRefundFeesReportTotal_resultTupleScheme();
      }
    }

    private static class getRefundFeesReportTotal_resultTupleScheme extends TupleScheme<getRefundFeesReportTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRefundFeesReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRefundFeesReportTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessApprovalDetail_args implements org.apache.thrift.TBase<queryBusinessApprovalDetail_args, queryBusinessApprovalDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessApprovalDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessApprovalDetail_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_APPROVAL_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("businessApprovalDetail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessApprovalDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessApprovalDetail_argsTupleSchemeFactory());
    }

    public BusinessApprovalDetail businessApprovalDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_APPROVAL_DETAIL((short)1, "businessApprovalDetail");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_APPROVAL_DETAIL
            return BUSINESS_APPROVAL_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_APPROVAL_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("businessApprovalDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessApprovalDetail_args.class, metaDataMap);
    }

    public queryBusinessApprovalDetail_args() {
    }

    public queryBusinessApprovalDetail_args(
      BusinessApprovalDetail businessApprovalDetail)
    {
      this();
      this.businessApprovalDetail = businessApprovalDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessApprovalDetail_args(queryBusinessApprovalDetail_args other) {
      if (other.isSetBusinessApprovalDetail()) {
        this.businessApprovalDetail = new BusinessApprovalDetail(other.businessApprovalDetail);
      }
    }

    public queryBusinessApprovalDetail_args deepCopy() {
      return new queryBusinessApprovalDetail_args(this);
    }

    @Override
    public void clear() {
      this.businessApprovalDetail = null;
    }

    public BusinessApprovalDetail getBusinessApprovalDetail() {
      return this.businessApprovalDetail;
    }

    public queryBusinessApprovalDetail_args setBusinessApprovalDetail(BusinessApprovalDetail businessApprovalDetail) {
      this.businessApprovalDetail = businessApprovalDetail;
      return this;
    }

    public void unsetBusinessApprovalDetail() {
      this.businessApprovalDetail = null;
    }

    /** Returns true if field businessApprovalDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessApprovalDetail() {
      return this.businessApprovalDetail != null;
    }

    public void setBusinessApprovalDetailIsSet(boolean value) {
      if (!value) {
        this.businessApprovalDetail = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_APPROVAL_DETAIL:
        if (value == null) {
          unsetBusinessApprovalDetail();
        } else {
          setBusinessApprovalDetail((BusinessApprovalDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_APPROVAL_DETAIL:
        return getBusinessApprovalDetail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_APPROVAL_DETAIL:
        return isSetBusinessApprovalDetail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessApprovalDetail_args)
        return this.equals((queryBusinessApprovalDetail_args)that);
      return false;
    }

    public boolean equals(queryBusinessApprovalDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_businessApprovalDetail = true && this.isSetBusinessApprovalDetail();
      boolean that_present_businessApprovalDetail = true && that.isSetBusinessApprovalDetail();
      if (this_present_businessApprovalDetail || that_present_businessApprovalDetail) {
        if (!(this_present_businessApprovalDetail && that_present_businessApprovalDetail))
          return false;
        if (!this.businessApprovalDetail.equals(that.businessApprovalDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessApprovalDetail = true && (isSetBusinessApprovalDetail());
      list.add(present_businessApprovalDetail);
      if (present_businessApprovalDetail)
        list.add(businessApprovalDetail);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessApprovalDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessApprovalDetail()).compareTo(other.isSetBusinessApprovalDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessApprovalDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessApprovalDetail, other.businessApprovalDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessApprovalDetail_args(");
      boolean first = true;

      sb.append("businessApprovalDetail:");
      if (this.businessApprovalDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.businessApprovalDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessApprovalDetail != null) {
        businessApprovalDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessApprovalDetail_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalDetail_argsStandardScheme getScheme() {
        return new queryBusinessApprovalDetail_argsStandardScheme();
      }
    }

    private static class queryBusinessApprovalDetail_argsStandardScheme extends StandardScheme<queryBusinessApprovalDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessApprovalDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_APPROVAL_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessApprovalDetail = new BusinessApprovalDetail();
                struct.businessApprovalDetail.read(iprot);
                struct.setBusinessApprovalDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessApprovalDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessApprovalDetail != null) {
          oprot.writeFieldBegin(BUSINESS_APPROVAL_DETAIL_FIELD_DESC);
          struct.businessApprovalDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessApprovalDetail_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalDetail_argsTupleScheme getScheme() {
        return new queryBusinessApprovalDetail_argsTupleScheme();
      }
    }

    private static class queryBusinessApprovalDetail_argsTupleScheme extends TupleScheme<queryBusinessApprovalDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessApprovalDetail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessApprovalDetail()) {
          struct.businessApprovalDetail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessApprovalDetail = new BusinessApprovalDetail();
          struct.businessApprovalDetail.read(iprot);
          struct.setBusinessApprovalDetailIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessApprovalDetail_result implements org.apache.thrift.TBase<queryBusinessApprovalDetail_result, queryBusinessApprovalDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessApprovalDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessApprovalDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessApprovalDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessApprovalDetail_resultTupleSchemeFactory());
    }

    public List<BusinessApprovalDetail> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalDetail.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessApprovalDetail_result.class, metaDataMap);
    }

    public queryBusinessApprovalDetail_result() {
    }

    public queryBusinessApprovalDetail_result(
      List<BusinessApprovalDetail> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessApprovalDetail_result(queryBusinessApprovalDetail_result other) {
      if (other.isSetSuccess()) {
        List<BusinessApprovalDetail> __this__success = new ArrayList<BusinessApprovalDetail>(other.success.size());
        for (BusinessApprovalDetail other_element : other.success) {
          __this__success.add(new BusinessApprovalDetail(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryBusinessApprovalDetail_result deepCopy() {
      return new queryBusinessApprovalDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BusinessApprovalDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BusinessApprovalDetail elem) {
      if (this.success == null) {
        this.success = new ArrayList<BusinessApprovalDetail>();
      }
      this.success.add(elem);
    }

    public List<BusinessApprovalDetail> getSuccess() {
      return this.success;
    }

    public queryBusinessApprovalDetail_result setSuccess(List<BusinessApprovalDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BusinessApprovalDetail>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessApprovalDetail_result)
        return this.equals((queryBusinessApprovalDetail_result)that);
      return false;
    }

    public boolean equals(queryBusinessApprovalDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessApprovalDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessApprovalDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessApprovalDetail_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalDetail_resultStandardScheme getScheme() {
        return new queryBusinessApprovalDetail_resultStandardScheme();
      }
    }

    private static class queryBusinessApprovalDetail_resultStandardScheme extends StandardScheme<queryBusinessApprovalDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessApprovalDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<BusinessApprovalDetail>(_list216.size);
                  BusinessApprovalDetail _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new BusinessApprovalDetail();
                    _elem217.read(iprot);
                    struct.success.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessApprovalDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BusinessApprovalDetail _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessApprovalDetail_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalDetail_resultTupleScheme getScheme() {
        return new queryBusinessApprovalDetail_resultTupleScheme();
      }
    }

    private static class queryBusinessApprovalDetail_resultTupleScheme extends TupleScheme<queryBusinessApprovalDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BusinessApprovalDetail _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BusinessApprovalDetail>(_list221.size);
            BusinessApprovalDetail _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new BusinessApprovalDetail();
              _elem222.read(iprot);
              struct.success.add(_elem222);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBusinessApprovalDetailTotal_args implements org.apache.thrift.TBase<getBusinessApprovalDetailTotal_args, getBusinessApprovalDetailTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessApprovalDetailTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessApprovalDetailTotal_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_APPROVAL_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("businessApprovalDetail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessApprovalDetailTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessApprovalDetailTotal_argsTupleSchemeFactory());
    }

    public BusinessApprovalDetail businessApprovalDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_APPROVAL_DETAIL((short)1, "businessApprovalDetail");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_APPROVAL_DETAIL
            return BUSINESS_APPROVAL_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_APPROVAL_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("businessApprovalDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessApprovalDetailTotal_args.class, metaDataMap);
    }

    public getBusinessApprovalDetailTotal_args() {
    }

    public getBusinessApprovalDetailTotal_args(
      BusinessApprovalDetail businessApprovalDetail)
    {
      this();
      this.businessApprovalDetail = businessApprovalDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessApprovalDetailTotal_args(getBusinessApprovalDetailTotal_args other) {
      if (other.isSetBusinessApprovalDetail()) {
        this.businessApprovalDetail = new BusinessApprovalDetail(other.businessApprovalDetail);
      }
    }

    public getBusinessApprovalDetailTotal_args deepCopy() {
      return new getBusinessApprovalDetailTotal_args(this);
    }

    @Override
    public void clear() {
      this.businessApprovalDetail = null;
    }

    public BusinessApprovalDetail getBusinessApprovalDetail() {
      return this.businessApprovalDetail;
    }

    public getBusinessApprovalDetailTotal_args setBusinessApprovalDetail(BusinessApprovalDetail businessApprovalDetail) {
      this.businessApprovalDetail = businessApprovalDetail;
      return this;
    }

    public void unsetBusinessApprovalDetail() {
      this.businessApprovalDetail = null;
    }

    /** Returns true if field businessApprovalDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessApprovalDetail() {
      return this.businessApprovalDetail != null;
    }

    public void setBusinessApprovalDetailIsSet(boolean value) {
      if (!value) {
        this.businessApprovalDetail = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_APPROVAL_DETAIL:
        if (value == null) {
          unsetBusinessApprovalDetail();
        } else {
          setBusinessApprovalDetail((BusinessApprovalDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_APPROVAL_DETAIL:
        return getBusinessApprovalDetail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_APPROVAL_DETAIL:
        return isSetBusinessApprovalDetail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessApprovalDetailTotal_args)
        return this.equals((getBusinessApprovalDetailTotal_args)that);
      return false;
    }

    public boolean equals(getBusinessApprovalDetailTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_businessApprovalDetail = true && this.isSetBusinessApprovalDetail();
      boolean that_present_businessApprovalDetail = true && that.isSetBusinessApprovalDetail();
      if (this_present_businessApprovalDetail || that_present_businessApprovalDetail) {
        if (!(this_present_businessApprovalDetail && that_present_businessApprovalDetail))
          return false;
        if (!this.businessApprovalDetail.equals(that.businessApprovalDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessApprovalDetail = true && (isSetBusinessApprovalDetail());
      list.add(present_businessApprovalDetail);
      if (present_businessApprovalDetail)
        list.add(businessApprovalDetail);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessApprovalDetailTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessApprovalDetail()).compareTo(other.isSetBusinessApprovalDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessApprovalDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessApprovalDetail, other.businessApprovalDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessApprovalDetailTotal_args(");
      boolean first = true;

      sb.append("businessApprovalDetail:");
      if (this.businessApprovalDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.businessApprovalDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessApprovalDetail != null) {
        businessApprovalDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessApprovalDetailTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getBusinessApprovalDetailTotal_argsStandardScheme getScheme() {
        return new getBusinessApprovalDetailTotal_argsStandardScheme();
      }
    }

    private static class getBusinessApprovalDetailTotal_argsStandardScheme extends StandardScheme<getBusinessApprovalDetailTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessApprovalDetailTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_APPROVAL_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessApprovalDetail = new BusinessApprovalDetail();
                struct.businessApprovalDetail.read(iprot);
                struct.setBusinessApprovalDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessApprovalDetailTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessApprovalDetail != null) {
          oprot.writeFieldBegin(BUSINESS_APPROVAL_DETAIL_FIELD_DESC);
          struct.businessApprovalDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessApprovalDetailTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getBusinessApprovalDetailTotal_argsTupleScheme getScheme() {
        return new getBusinessApprovalDetailTotal_argsTupleScheme();
      }
    }

    private static class getBusinessApprovalDetailTotal_argsTupleScheme extends TupleScheme<getBusinessApprovalDetailTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalDetailTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessApprovalDetail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessApprovalDetail()) {
          struct.businessApprovalDetail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalDetailTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessApprovalDetail = new BusinessApprovalDetail();
          struct.businessApprovalDetail.read(iprot);
          struct.setBusinessApprovalDetailIsSet(true);
        }
      }
    }

  }

  public static class getBusinessApprovalDetailTotal_result implements org.apache.thrift.TBase<getBusinessApprovalDetailTotal_result, getBusinessApprovalDetailTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessApprovalDetailTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessApprovalDetailTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessApprovalDetailTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessApprovalDetailTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessApprovalDetailTotal_result.class, metaDataMap);
    }

    public getBusinessApprovalDetailTotal_result() {
    }

    public getBusinessApprovalDetailTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessApprovalDetailTotal_result(getBusinessApprovalDetailTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getBusinessApprovalDetailTotal_result deepCopy() {
      return new getBusinessApprovalDetailTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getBusinessApprovalDetailTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessApprovalDetailTotal_result)
        return this.equals((getBusinessApprovalDetailTotal_result)that);
      return false;
    }

    public boolean equals(getBusinessApprovalDetailTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessApprovalDetailTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessApprovalDetailTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessApprovalDetailTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getBusinessApprovalDetailTotal_resultStandardScheme getScheme() {
        return new getBusinessApprovalDetailTotal_resultStandardScheme();
      }
    }

    private static class getBusinessApprovalDetailTotal_resultStandardScheme extends StandardScheme<getBusinessApprovalDetailTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessApprovalDetailTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessApprovalDetailTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessApprovalDetailTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getBusinessApprovalDetailTotal_resultTupleScheme getScheme() {
        return new getBusinessApprovalDetailTotal_resultTupleScheme();
      }
    }

    private static class getBusinessApprovalDetailTotal_resultTupleScheme extends TupleScheme<getBusinessApprovalDetailTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalDetailTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalDetailTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessApprovalBill_args implements org.apache.thrift.TBase<queryBusinessApprovalBill_args, queryBusinessApprovalBill_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessApprovalBill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessApprovalBill_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_APPROVAL_BILL_FIELD_DESC = new org.apache.thrift.protocol.TField("businessApprovalBill", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessApprovalBill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessApprovalBill_argsTupleSchemeFactory());
    }

    public BusinessApprovalBill businessApprovalBill; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_APPROVAL_BILL((short)1, "businessApprovalBill");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_APPROVAL_BILL
            return BUSINESS_APPROVAL_BILL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_APPROVAL_BILL, new org.apache.thrift.meta_data.FieldMetaData("businessApprovalBill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalBill.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessApprovalBill_args.class, metaDataMap);
    }

    public queryBusinessApprovalBill_args() {
    }

    public queryBusinessApprovalBill_args(
      BusinessApprovalBill businessApprovalBill)
    {
      this();
      this.businessApprovalBill = businessApprovalBill;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessApprovalBill_args(queryBusinessApprovalBill_args other) {
      if (other.isSetBusinessApprovalBill()) {
        this.businessApprovalBill = new BusinessApprovalBill(other.businessApprovalBill);
      }
    }

    public queryBusinessApprovalBill_args deepCopy() {
      return new queryBusinessApprovalBill_args(this);
    }

    @Override
    public void clear() {
      this.businessApprovalBill = null;
    }

    public BusinessApprovalBill getBusinessApprovalBill() {
      return this.businessApprovalBill;
    }

    public queryBusinessApprovalBill_args setBusinessApprovalBill(BusinessApprovalBill businessApprovalBill) {
      this.businessApprovalBill = businessApprovalBill;
      return this;
    }

    public void unsetBusinessApprovalBill() {
      this.businessApprovalBill = null;
    }

    /** Returns true if field businessApprovalBill is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessApprovalBill() {
      return this.businessApprovalBill != null;
    }

    public void setBusinessApprovalBillIsSet(boolean value) {
      if (!value) {
        this.businessApprovalBill = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        if (value == null) {
          unsetBusinessApprovalBill();
        } else {
          setBusinessApprovalBill((BusinessApprovalBill)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        return getBusinessApprovalBill();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        return isSetBusinessApprovalBill();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessApprovalBill_args)
        return this.equals((queryBusinessApprovalBill_args)that);
      return false;
    }

    public boolean equals(queryBusinessApprovalBill_args that) {
      if (that == null)
        return false;

      boolean this_present_businessApprovalBill = true && this.isSetBusinessApprovalBill();
      boolean that_present_businessApprovalBill = true && that.isSetBusinessApprovalBill();
      if (this_present_businessApprovalBill || that_present_businessApprovalBill) {
        if (!(this_present_businessApprovalBill && that_present_businessApprovalBill))
          return false;
        if (!this.businessApprovalBill.equals(that.businessApprovalBill))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessApprovalBill = true && (isSetBusinessApprovalBill());
      list.add(present_businessApprovalBill);
      if (present_businessApprovalBill)
        list.add(businessApprovalBill);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessApprovalBill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessApprovalBill()).compareTo(other.isSetBusinessApprovalBill());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessApprovalBill()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessApprovalBill, other.businessApprovalBill);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessApprovalBill_args(");
      boolean first = true;

      sb.append("businessApprovalBill:");
      if (this.businessApprovalBill == null) {
        sb.append("null");
      } else {
        sb.append(this.businessApprovalBill);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessApprovalBill != null) {
        businessApprovalBill.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessApprovalBill_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalBill_argsStandardScheme getScheme() {
        return new queryBusinessApprovalBill_argsStandardScheme();
      }
    }

    private static class queryBusinessApprovalBill_argsStandardScheme extends StandardScheme<queryBusinessApprovalBill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessApprovalBill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_APPROVAL_BILL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessApprovalBill = new BusinessApprovalBill();
                struct.businessApprovalBill.read(iprot);
                struct.setBusinessApprovalBillIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessApprovalBill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessApprovalBill != null) {
          oprot.writeFieldBegin(BUSINESS_APPROVAL_BILL_FIELD_DESC);
          struct.businessApprovalBill.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessApprovalBill_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalBill_argsTupleScheme getScheme() {
        return new queryBusinessApprovalBill_argsTupleScheme();
      }
    }

    private static class queryBusinessApprovalBill_argsTupleScheme extends TupleScheme<queryBusinessApprovalBill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalBill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessApprovalBill()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessApprovalBill()) {
          struct.businessApprovalBill.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalBill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessApprovalBill = new BusinessApprovalBill();
          struct.businessApprovalBill.read(iprot);
          struct.setBusinessApprovalBillIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessApprovalBill_result implements org.apache.thrift.TBase<queryBusinessApprovalBill_result, queryBusinessApprovalBill_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessApprovalBill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessApprovalBill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessApprovalBill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessApprovalBill_resultTupleSchemeFactory());
    }

    public List<BusinessApprovalBill> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalBill.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessApprovalBill_result.class, metaDataMap);
    }

    public queryBusinessApprovalBill_result() {
    }

    public queryBusinessApprovalBill_result(
      List<BusinessApprovalBill> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessApprovalBill_result(queryBusinessApprovalBill_result other) {
      if (other.isSetSuccess()) {
        List<BusinessApprovalBill> __this__success = new ArrayList<BusinessApprovalBill>(other.success.size());
        for (BusinessApprovalBill other_element : other.success) {
          __this__success.add(new BusinessApprovalBill(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryBusinessApprovalBill_result deepCopy() {
      return new queryBusinessApprovalBill_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BusinessApprovalBill> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BusinessApprovalBill elem) {
      if (this.success == null) {
        this.success = new ArrayList<BusinessApprovalBill>();
      }
      this.success.add(elem);
    }

    public List<BusinessApprovalBill> getSuccess() {
      return this.success;
    }

    public queryBusinessApprovalBill_result setSuccess(List<BusinessApprovalBill> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BusinessApprovalBill>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessApprovalBill_result)
        return this.equals((queryBusinessApprovalBill_result)that);
      return false;
    }

    public boolean equals(queryBusinessApprovalBill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessApprovalBill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessApprovalBill_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessApprovalBill_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalBill_resultStandardScheme getScheme() {
        return new queryBusinessApprovalBill_resultStandardScheme();
      }
    }

    private static class queryBusinessApprovalBill_resultStandardScheme extends StandardScheme<queryBusinessApprovalBill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessApprovalBill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new ArrayList<BusinessApprovalBill>(_list224.size);
                  BusinessApprovalBill _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = new BusinessApprovalBill();
                    _elem225.read(iprot);
                    struct.success.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessApprovalBill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BusinessApprovalBill _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessApprovalBill_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalBill_resultTupleScheme getScheme() {
        return new queryBusinessApprovalBill_resultTupleScheme();
      }
    }

    private static class queryBusinessApprovalBill_resultTupleScheme extends TupleScheme<queryBusinessApprovalBill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalBill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BusinessApprovalBill _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalBill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BusinessApprovalBill>(_list229.size);
            BusinessApprovalBill _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = new BusinessApprovalBill();
              _elem230.read(iprot);
              struct.success.add(_elem230);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBusinessApprovalBillTotal_args implements org.apache.thrift.TBase<getBusinessApprovalBillTotal_args, getBusinessApprovalBillTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessApprovalBillTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessApprovalBillTotal_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_APPROVAL_BILL_FIELD_DESC = new org.apache.thrift.protocol.TField("businessApprovalBill", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessApprovalBillTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessApprovalBillTotal_argsTupleSchemeFactory());
    }

    public BusinessApprovalBill businessApprovalBill; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_APPROVAL_BILL((short)1, "businessApprovalBill");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_APPROVAL_BILL
            return BUSINESS_APPROVAL_BILL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_APPROVAL_BILL, new org.apache.thrift.meta_data.FieldMetaData("businessApprovalBill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalBill.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessApprovalBillTotal_args.class, metaDataMap);
    }

    public getBusinessApprovalBillTotal_args() {
    }

    public getBusinessApprovalBillTotal_args(
      BusinessApprovalBill businessApprovalBill)
    {
      this();
      this.businessApprovalBill = businessApprovalBill;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessApprovalBillTotal_args(getBusinessApprovalBillTotal_args other) {
      if (other.isSetBusinessApprovalBill()) {
        this.businessApprovalBill = new BusinessApprovalBill(other.businessApprovalBill);
      }
    }

    public getBusinessApprovalBillTotal_args deepCopy() {
      return new getBusinessApprovalBillTotal_args(this);
    }

    @Override
    public void clear() {
      this.businessApprovalBill = null;
    }

    public BusinessApprovalBill getBusinessApprovalBill() {
      return this.businessApprovalBill;
    }

    public getBusinessApprovalBillTotal_args setBusinessApprovalBill(BusinessApprovalBill businessApprovalBill) {
      this.businessApprovalBill = businessApprovalBill;
      return this;
    }

    public void unsetBusinessApprovalBill() {
      this.businessApprovalBill = null;
    }

    /** Returns true if field businessApprovalBill is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessApprovalBill() {
      return this.businessApprovalBill != null;
    }

    public void setBusinessApprovalBillIsSet(boolean value) {
      if (!value) {
        this.businessApprovalBill = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        if (value == null) {
          unsetBusinessApprovalBill();
        } else {
          setBusinessApprovalBill((BusinessApprovalBill)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        return getBusinessApprovalBill();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        return isSetBusinessApprovalBill();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessApprovalBillTotal_args)
        return this.equals((getBusinessApprovalBillTotal_args)that);
      return false;
    }

    public boolean equals(getBusinessApprovalBillTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_businessApprovalBill = true && this.isSetBusinessApprovalBill();
      boolean that_present_businessApprovalBill = true && that.isSetBusinessApprovalBill();
      if (this_present_businessApprovalBill || that_present_businessApprovalBill) {
        if (!(this_present_businessApprovalBill && that_present_businessApprovalBill))
          return false;
        if (!this.businessApprovalBill.equals(that.businessApprovalBill))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessApprovalBill = true && (isSetBusinessApprovalBill());
      list.add(present_businessApprovalBill);
      if (present_businessApprovalBill)
        list.add(businessApprovalBill);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessApprovalBillTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessApprovalBill()).compareTo(other.isSetBusinessApprovalBill());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessApprovalBill()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessApprovalBill, other.businessApprovalBill);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessApprovalBillTotal_args(");
      boolean first = true;

      sb.append("businessApprovalBill:");
      if (this.businessApprovalBill == null) {
        sb.append("null");
      } else {
        sb.append(this.businessApprovalBill);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessApprovalBill != null) {
        businessApprovalBill.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessApprovalBillTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getBusinessApprovalBillTotal_argsStandardScheme getScheme() {
        return new getBusinessApprovalBillTotal_argsStandardScheme();
      }
    }

    private static class getBusinessApprovalBillTotal_argsStandardScheme extends StandardScheme<getBusinessApprovalBillTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessApprovalBillTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_APPROVAL_BILL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessApprovalBill = new BusinessApprovalBill();
                struct.businessApprovalBill.read(iprot);
                struct.setBusinessApprovalBillIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessApprovalBillTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessApprovalBill != null) {
          oprot.writeFieldBegin(BUSINESS_APPROVAL_BILL_FIELD_DESC);
          struct.businessApprovalBill.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessApprovalBillTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getBusinessApprovalBillTotal_argsTupleScheme getScheme() {
        return new getBusinessApprovalBillTotal_argsTupleScheme();
      }
    }

    private static class getBusinessApprovalBillTotal_argsTupleScheme extends TupleScheme<getBusinessApprovalBillTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalBillTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessApprovalBill()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessApprovalBill()) {
          struct.businessApprovalBill.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalBillTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessApprovalBill = new BusinessApprovalBill();
          struct.businessApprovalBill.read(iprot);
          struct.setBusinessApprovalBillIsSet(true);
        }
      }
    }

  }

  public static class getBusinessApprovalBillTotal_result implements org.apache.thrift.TBase<getBusinessApprovalBillTotal_result, getBusinessApprovalBillTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessApprovalBillTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessApprovalBillTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessApprovalBillTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessApprovalBillTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessApprovalBillTotal_result.class, metaDataMap);
    }

    public getBusinessApprovalBillTotal_result() {
    }

    public getBusinessApprovalBillTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessApprovalBillTotal_result(getBusinessApprovalBillTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getBusinessApprovalBillTotal_result deepCopy() {
      return new getBusinessApprovalBillTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getBusinessApprovalBillTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessApprovalBillTotal_result)
        return this.equals((getBusinessApprovalBillTotal_result)that);
      return false;
    }

    public boolean equals(getBusinessApprovalBillTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessApprovalBillTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessApprovalBillTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessApprovalBillTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getBusinessApprovalBillTotal_resultStandardScheme getScheme() {
        return new getBusinessApprovalBillTotal_resultStandardScheme();
      }
    }

    private static class getBusinessApprovalBillTotal_resultStandardScheme extends StandardScheme<getBusinessApprovalBillTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessApprovalBillTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessApprovalBillTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessApprovalBillTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getBusinessApprovalBillTotal_resultTupleScheme getScheme() {
        return new getBusinessApprovalBillTotal_resultTupleScheme();
      }
    }

    private static class getBusinessApprovalBillTotal_resultTupleScheme extends TupleScheme<getBusinessApprovalBillTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalBillTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalBillTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessApprovalBillCount_args implements org.apache.thrift.TBase<queryBusinessApprovalBillCount_args, queryBusinessApprovalBillCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessApprovalBillCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessApprovalBillCount_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_APPROVAL_BILL_FIELD_DESC = new org.apache.thrift.protocol.TField("businessApprovalBill", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessApprovalBillCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessApprovalBillCount_argsTupleSchemeFactory());
    }

    public BusinessApprovalBill businessApprovalBill; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_APPROVAL_BILL((short)1, "businessApprovalBill");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_APPROVAL_BILL
            return BUSINESS_APPROVAL_BILL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_APPROVAL_BILL, new org.apache.thrift.meta_data.FieldMetaData("businessApprovalBill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalBill.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessApprovalBillCount_args.class, metaDataMap);
    }

    public queryBusinessApprovalBillCount_args() {
    }

    public queryBusinessApprovalBillCount_args(
      BusinessApprovalBill businessApprovalBill)
    {
      this();
      this.businessApprovalBill = businessApprovalBill;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessApprovalBillCount_args(queryBusinessApprovalBillCount_args other) {
      if (other.isSetBusinessApprovalBill()) {
        this.businessApprovalBill = new BusinessApprovalBill(other.businessApprovalBill);
      }
    }

    public queryBusinessApprovalBillCount_args deepCopy() {
      return new queryBusinessApprovalBillCount_args(this);
    }

    @Override
    public void clear() {
      this.businessApprovalBill = null;
    }

    public BusinessApprovalBill getBusinessApprovalBill() {
      return this.businessApprovalBill;
    }

    public queryBusinessApprovalBillCount_args setBusinessApprovalBill(BusinessApprovalBill businessApprovalBill) {
      this.businessApprovalBill = businessApprovalBill;
      return this;
    }

    public void unsetBusinessApprovalBill() {
      this.businessApprovalBill = null;
    }

    /** Returns true if field businessApprovalBill is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessApprovalBill() {
      return this.businessApprovalBill != null;
    }

    public void setBusinessApprovalBillIsSet(boolean value) {
      if (!value) {
        this.businessApprovalBill = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        if (value == null) {
          unsetBusinessApprovalBill();
        } else {
          setBusinessApprovalBill((BusinessApprovalBill)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        return getBusinessApprovalBill();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        return isSetBusinessApprovalBill();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessApprovalBillCount_args)
        return this.equals((queryBusinessApprovalBillCount_args)that);
      return false;
    }

    public boolean equals(queryBusinessApprovalBillCount_args that) {
      if (that == null)
        return false;

      boolean this_present_businessApprovalBill = true && this.isSetBusinessApprovalBill();
      boolean that_present_businessApprovalBill = true && that.isSetBusinessApprovalBill();
      if (this_present_businessApprovalBill || that_present_businessApprovalBill) {
        if (!(this_present_businessApprovalBill && that_present_businessApprovalBill))
          return false;
        if (!this.businessApprovalBill.equals(that.businessApprovalBill))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessApprovalBill = true && (isSetBusinessApprovalBill());
      list.add(present_businessApprovalBill);
      if (present_businessApprovalBill)
        list.add(businessApprovalBill);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessApprovalBillCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessApprovalBill()).compareTo(other.isSetBusinessApprovalBill());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessApprovalBill()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessApprovalBill, other.businessApprovalBill);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessApprovalBillCount_args(");
      boolean first = true;

      sb.append("businessApprovalBill:");
      if (this.businessApprovalBill == null) {
        sb.append("null");
      } else {
        sb.append(this.businessApprovalBill);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessApprovalBill != null) {
        businessApprovalBill.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessApprovalBillCount_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalBillCount_argsStandardScheme getScheme() {
        return new queryBusinessApprovalBillCount_argsStandardScheme();
      }
    }

    private static class queryBusinessApprovalBillCount_argsStandardScheme extends StandardScheme<queryBusinessApprovalBillCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessApprovalBillCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_APPROVAL_BILL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessApprovalBill = new BusinessApprovalBill();
                struct.businessApprovalBill.read(iprot);
                struct.setBusinessApprovalBillIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessApprovalBillCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessApprovalBill != null) {
          oprot.writeFieldBegin(BUSINESS_APPROVAL_BILL_FIELD_DESC);
          struct.businessApprovalBill.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessApprovalBillCount_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalBillCount_argsTupleScheme getScheme() {
        return new queryBusinessApprovalBillCount_argsTupleScheme();
      }
    }

    private static class queryBusinessApprovalBillCount_argsTupleScheme extends TupleScheme<queryBusinessApprovalBillCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalBillCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessApprovalBill()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessApprovalBill()) {
          struct.businessApprovalBill.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalBillCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessApprovalBill = new BusinessApprovalBill();
          struct.businessApprovalBill.read(iprot);
          struct.setBusinessApprovalBillIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessApprovalBillCount_result implements org.apache.thrift.TBase<queryBusinessApprovalBillCount_result, queryBusinessApprovalBillCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessApprovalBillCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessApprovalBillCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessApprovalBillCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessApprovalBillCount_resultTupleSchemeFactory());
    }

    public List<BusinessApprovalBill> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalBill.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessApprovalBillCount_result.class, metaDataMap);
    }

    public queryBusinessApprovalBillCount_result() {
    }

    public queryBusinessApprovalBillCount_result(
      List<BusinessApprovalBill> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessApprovalBillCount_result(queryBusinessApprovalBillCount_result other) {
      if (other.isSetSuccess()) {
        List<BusinessApprovalBill> __this__success = new ArrayList<BusinessApprovalBill>(other.success.size());
        for (BusinessApprovalBill other_element : other.success) {
          __this__success.add(new BusinessApprovalBill(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryBusinessApprovalBillCount_result deepCopy() {
      return new queryBusinessApprovalBillCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BusinessApprovalBill> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BusinessApprovalBill elem) {
      if (this.success == null) {
        this.success = new ArrayList<BusinessApprovalBill>();
      }
      this.success.add(elem);
    }

    public List<BusinessApprovalBill> getSuccess() {
      return this.success;
    }

    public queryBusinessApprovalBillCount_result setSuccess(List<BusinessApprovalBill> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BusinessApprovalBill>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessApprovalBillCount_result)
        return this.equals((queryBusinessApprovalBillCount_result)that);
      return false;
    }

    public boolean equals(queryBusinessApprovalBillCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessApprovalBillCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessApprovalBillCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessApprovalBillCount_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalBillCount_resultStandardScheme getScheme() {
        return new queryBusinessApprovalBillCount_resultStandardScheme();
      }
    }

    private static class queryBusinessApprovalBillCount_resultStandardScheme extends StandardScheme<queryBusinessApprovalBillCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessApprovalBillCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new ArrayList<BusinessApprovalBill>(_list232.size);
                  BusinessApprovalBill _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = new BusinessApprovalBill();
                    _elem233.read(iprot);
                    struct.success.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessApprovalBillCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BusinessApprovalBill _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessApprovalBillCount_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessApprovalBillCount_resultTupleScheme getScheme() {
        return new queryBusinessApprovalBillCount_resultTupleScheme();
      }
    }

    private static class queryBusinessApprovalBillCount_resultTupleScheme extends TupleScheme<queryBusinessApprovalBillCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalBillCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BusinessApprovalBill _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessApprovalBillCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BusinessApprovalBill>(_list237.size);
            BusinessApprovalBill _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new BusinessApprovalBill();
              _elem238.read(iprot);
              struct.success.add(_elem238);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBusinessApprovalBillCountTotal_args implements org.apache.thrift.TBase<getBusinessApprovalBillCountTotal_args, getBusinessApprovalBillCountTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessApprovalBillCountTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessApprovalBillCountTotal_args");

    private static final org.apache.thrift.protocol.TField BUSINESS_APPROVAL_BILL_FIELD_DESC = new org.apache.thrift.protocol.TField("businessApprovalBill", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessApprovalBillCountTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessApprovalBillCountTotal_argsTupleSchemeFactory());
    }

    public BusinessApprovalBill businessApprovalBill; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUSINESS_APPROVAL_BILL((short)1, "businessApprovalBill");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUSINESS_APPROVAL_BILL
            return BUSINESS_APPROVAL_BILL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUSINESS_APPROVAL_BILL, new org.apache.thrift.meta_data.FieldMetaData("businessApprovalBill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessApprovalBill.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessApprovalBillCountTotal_args.class, metaDataMap);
    }

    public getBusinessApprovalBillCountTotal_args() {
    }

    public getBusinessApprovalBillCountTotal_args(
      BusinessApprovalBill businessApprovalBill)
    {
      this();
      this.businessApprovalBill = businessApprovalBill;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessApprovalBillCountTotal_args(getBusinessApprovalBillCountTotal_args other) {
      if (other.isSetBusinessApprovalBill()) {
        this.businessApprovalBill = new BusinessApprovalBill(other.businessApprovalBill);
      }
    }

    public getBusinessApprovalBillCountTotal_args deepCopy() {
      return new getBusinessApprovalBillCountTotal_args(this);
    }

    @Override
    public void clear() {
      this.businessApprovalBill = null;
    }

    public BusinessApprovalBill getBusinessApprovalBill() {
      return this.businessApprovalBill;
    }

    public getBusinessApprovalBillCountTotal_args setBusinessApprovalBill(BusinessApprovalBill businessApprovalBill) {
      this.businessApprovalBill = businessApprovalBill;
      return this;
    }

    public void unsetBusinessApprovalBill() {
      this.businessApprovalBill = null;
    }

    /** Returns true if field businessApprovalBill is set (has been assigned a value) and false otherwise */
    public boolean isSetBusinessApprovalBill() {
      return this.businessApprovalBill != null;
    }

    public void setBusinessApprovalBillIsSet(boolean value) {
      if (!value) {
        this.businessApprovalBill = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        if (value == null) {
          unsetBusinessApprovalBill();
        } else {
          setBusinessApprovalBill((BusinessApprovalBill)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        return getBusinessApprovalBill();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BUSINESS_APPROVAL_BILL:
        return isSetBusinessApprovalBill();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessApprovalBillCountTotal_args)
        return this.equals((getBusinessApprovalBillCountTotal_args)that);
      return false;
    }

    public boolean equals(getBusinessApprovalBillCountTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_businessApprovalBill = true && this.isSetBusinessApprovalBill();
      boolean that_present_businessApprovalBill = true && that.isSetBusinessApprovalBill();
      if (this_present_businessApprovalBill || that_present_businessApprovalBill) {
        if (!(this_present_businessApprovalBill && that_present_businessApprovalBill))
          return false;
        if (!this.businessApprovalBill.equals(that.businessApprovalBill))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_businessApprovalBill = true && (isSetBusinessApprovalBill());
      list.add(present_businessApprovalBill);
      if (present_businessApprovalBill)
        list.add(businessApprovalBill);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessApprovalBillCountTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBusinessApprovalBill()).compareTo(other.isSetBusinessApprovalBill());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBusinessApprovalBill()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessApprovalBill, other.businessApprovalBill);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessApprovalBillCountTotal_args(");
      boolean first = true;

      sb.append("businessApprovalBill:");
      if (this.businessApprovalBill == null) {
        sb.append("null");
      } else {
        sb.append(this.businessApprovalBill);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (businessApprovalBill != null) {
        businessApprovalBill.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessApprovalBillCountTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getBusinessApprovalBillCountTotal_argsStandardScheme getScheme() {
        return new getBusinessApprovalBillCountTotal_argsStandardScheme();
      }
    }

    private static class getBusinessApprovalBillCountTotal_argsStandardScheme extends StandardScheme<getBusinessApprovalBillCountTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessApprovalBillCountTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUSINESS_APPROVAL_BILL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.businessApprovalBill = new BusinessApprovalBill();
                struct.businessApprovalBill.read(iprot);
                struct.setBusinessApprovalBillIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessApprovalBillCountTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.businessApprovalBill != null) {
          oprot.writeFieldBegin(BUSINESS_APPROVAL_BILL_FIELD_DESC);
          struct.businessApprovalBill.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessApprovalBillCountTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getBusinessApprovalBillCountTotal_argsTupleScheme getScheme() {
        return new getBusinessApprovalBillCountTotal_argsTupleScheme();
      }
    }

    private static class getBusinessApprovalBillCountTotal_argsTupleScheme extends TupleScheme<getBusinessApprovalBillCountTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalBillCountTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBusinessApprovalBill()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBusinessApprovalBill()) {
          struct.businessApprovalBill.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalBillCountTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.businessApprovalBill = new BusinessApprovalBill();
          struct.businessApprovalBill.read(iprot);
          struct.setBusinessApprovalBillIsSet(true);
        }
      }
    }

  }

  public static class getBusinessApprovalBillCountTotal_result implements org.apache.thrift.TBase<getBusinessApprovalBillCountTotal_result, getBusinessApprovalBillCountTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBusinessApprovalBillCountTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBusinessApprovalBillCountTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBusinessApprovalBillCountTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBusinessApprovalBillCountTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBusinessApprovalBillCountTotal_result.class, metaDataMap);
    }

    public getBusinessApprovalBillCountTotal_result() {
    }

    public getBusinessApprovalBillCountTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBusinessApprovalBillCountTotal_result(getBusinessApprovalBillCountTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getBusinessApprovalBillCountTotal_result deepCopy() {
      return new getBusinessApprovalBillCountTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getBusinessApprovalBillCountTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBusinessApprovalBillCountTotal_result)
        return this.equals((getBusinessApprovalBillCountTotal_result)that);
      return false;
    }

    public boolean equals(getBusinessApprovalBillCountTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBusinessApprovalBillCountTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBusinessApprovalBillCountTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBusinessApprovalBillCountTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getBusinessApprovalBillCountTotal_resultStandardScheme getScheme() {
        return new getBusinessApprovalBillCountTotal_resultStandardScheme();
      }
    }

    private static class getBusinessApprovalBillCountTotal_resultStandardScheme extends StandardScheme<getBusinessApprovalBillCountTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBusinessApprovalBillCountTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBusinessApprovalBillCountTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBusinessApprovalBillCountTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getBusinessApprovalBillCountTotal_resultTupleScheme getScheme() {
        return new getBusinessApprovalBillCountTotal_resultTupleScheme();
      }
    }

    private static class getBusinessApprovalBillCountTotal_resultTupleScheme extends TupleScheme<getBusinessApprovalBillCountTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalBillCountTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBusinessApprovalBillCountTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryResuseProjectByPage_args implements org.apache.thrift.TBase<queryResuseProjectByPage_args, queryResuseProjectByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryResuseProjectByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryResuseProjectByPage_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryResuseProjectByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryResuseProjectByPage_argsTupleSchemeFactory());
    }

    public RefuseProjectReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefuseProjectReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryResuseProjectByPage_args.class, metaDataMap);
    }

    public queryResuseProjectByPage_args() {
    }

    public queryResuseProjectByPage_args(
      RefuseProjectReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryResuseProjectByPage_args(queryResuseProjectByPage_args other) {
      if (other.isSetQuery()) {
        this.query = new RefuseProjectReport(other.query);
      }
    }

    public queryResuseProjectByPage_args deepCopy() {
      return new queryResuseProjectByPage_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public RefuseProjectReport getQuery() {
      return this.query;
    }

    public queryResuseProjectByPage_args setQuery(RefuseProjectReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((RefuseProjectReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryResuseProjectByPage_args)
        return this.equals((queryResuseProjectByPage_args)that);
      return false;
    }

    public boolean equals(queryResuseProjectByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryResuseProjectByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryResuseProjectByPage_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryResuseProjectByPage_argsStandardSchemeFactory implements SchemeFactory {
      public queryResuseProjectByPage_argsStandardScheme getScheme() {
        return new queryResuseProjectByPage_argsStandardScheme();
      }
    }

    private static class queryResuseProjectByPage_argsStandardScheme extends StandardScheme<queryResuseProjectByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryResuseProjectByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new RefuseProjectReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryResuseProjectByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryResuseProjectByPage_argsTupleSchemeFactory implements SchemeFactory {
      public queryResuseProjectByPage_argsTupleScheme getScheme() {
        return new queryResuseProjectByPage_argsTupleScheme();
      }
    }

    private static class queryResuseProjectByPage_argsTupleScheme extends TupleScheme<queryResuseProjectByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryResuseProjectByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryResuseProjectByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new RefuseProjectReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryResuseProjectByPage_result implements org.apache.thrift.TBase<queryResuseProjectByPage_result, queryResuseProjectByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryResuseProjectByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryResuseProjectByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryResuseProjectByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryResuseProjectByPage_resultTupleSchemeFactory());
    }

    public List<RefuseProjectReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefuseProjectReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryResuseProjectByPage_result.class, metaDataMap);
    }

    public queryResuseProjectByPage_result() {
    }

    public queryResuseProjectByPage_result(
      List<RefuseProjectReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryResuseProjectByPage_result(queryResuseProjectByPage_result other) {
      if (other.isSetSuccess()) {
        List<RefuseProjectReport> __this__success = new ArrayList<RefuseProjectReport>(other.success.size());
        for (RefuseProjectReport other_element : other.success) {
          __this__success.add(new RefuseProjectReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryResuseProjectByPage_result deepCopy() {
      return new queryResuseProjectByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RefuseProjectReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RefuseProjectReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<RefuseProjectReport>();
      }
      this.success.add(elem);
    }

    public List<RefuseProjectReport> getSuccess() {
      return this.success;
    }

    public queryResuseProjectByPage_result setSuccess(List<RefuseProjectReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RefuseProjectReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryResuseProjectByPage_result)
        return this.equals((queryResuseProjectByPage_result)that);
      return false;
    }

    public boolean equals(queryResuseProjectByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryResuseProjectByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryResuseProjectByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryResuseProjectByPage_resultStandardSchemeFactory implements SchemeFactory {
      public queryResuseProjectByPage_resultStandardScheme getScheme() {
        return new queryResuseProjectByPage_resultStandardScheme();
      }
    }

    private static class queryResuseProjectByPage_resultStandardScheme extends StandardScheme<queryResuseProjectByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryResuseProjectByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new ArrayList<RefuseProjectReport>(_list240.size);
                  RefuseProjectReport _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new RefuseProjectReport();
                    _elem241.read(iprot);
                    struct.success.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryResuseProjectByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RefuseProjectReport _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryResuseProjectByPage_resultTupleSchemeFactory implements SchemeFactory {
      public queryResuseProjectByPage_resultTupleScheme getScheme() {
        return new queryResuseProjectByPage_resultTupleScheme();
      }
    }

    private static class queryResuseProjectByPage_resultTupleScheme extends TupleScheme<queryResuseProjectByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryResuseProjectByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RefuseProjectReport _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryResuseProjectByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RefuseProjectReport>(_list245.size);
            RefuseProjectReport _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new RefuseProjectReport();
              _elem246.read(iprot);
              struct.success.add(_elem246);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryResuseProjectCount_args implements org.apache.thrift.TBase<queryResuseProjectCount_args, queryResuseProjectCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryResuseProjectCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryResuseProjectCount_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryResuseProjectCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryResuseProjectCount_argsTupleSchemeFactory());
    }

    public RefuseProjectReport query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefuseProjectReport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryResuseProjectCount_args.class, metaDataMap);
    }

    public queryResuseProjectCount_args() {
    }

    public queryResuseProjectCount_args(
      RefuseProjectReport query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryResuseProjectCount_args(queryResuseProjectCount_args other) {
      if (other.isSetQuery()) {
        this.query = new RefuseProjectReport(other.query);
      }
    }

    public queryResuseProjectCount_args deepCopy() {
      return new queryResuseProjectCount_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public RefuseProjectReport getQuery() {
      return this.query;
    }

    public queryResuseProjectCount_args setQuery(RefuseProjectReport query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((RefuseProjectReport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryResuseProjectCount_args)
        return this.equals((queryResuseProjectCount_args)that);
      return false;
    }

    public boolean equals(queryResuseProjectCount_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryResuseProjectCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryResuseProjectCount_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryResuseProjectCount_argsStandardSchemeFactory implements SchemeFactory {
      public queryResuseProjectCount_argsStandardScheme getScheme() {
        return new queryResuseProjectCount_argsStandardScheme();
      }
    }

    private static class queryResuseProjectCount_argsStandardScheme extends StandardScheme<queryResuseProjectCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryResuseProjectCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new RefuseProjectReport();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryResuseProjectCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryResuseProjectCount_argsTupleSchemeFactory implements SchemeFactory {
      public queryResuseProjectCount_argsTupleScheme getScheme() {
        return new queryResuseProjectCount_argsTupleScheme();
      }
    }

    private static class queryResuseProjectCount_argsTupleScheme extends TupleScheme<queryResuseProjectCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryResuseProjectCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryResuseProjectCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new RefuseProjectReport();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryResuseProjectCount_result implements org.apache.thrift.TBase<queryResuseProjectCount_result, queryResuseProjectCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryResuseProjectCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryResuseProjectCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryResuseProjectCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryResuseProjectCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryResuseProjectCount_result.class, metaDataMap);
    }

    public queryResuseProjectCount_result() {
    }

    public queryResuseProjectCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryResuseProjectCount_result(queryResuseProjectCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryResuseProjectCount_result deepCopy() {
      return new queryResuseProjectCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryResuseProjectCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryResuseProjectCount_result)
        return this.equals((queryResuseProjectCount_result)that);
      return false;
    }

    public boolean equals(queryResuseProjectCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryResuseProjectCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryResuseProjectCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryResuseProjectCount_resultStandardSchemeFactory implements SchemeFactory {
      public queryResuseProjectCount_resultStandardScheme getScheme() {
        return new queryResuseProjectCount_resultStandardScheme();
      }
    }

    private static class queryResuseProjectCount_resultStandardScheme extends StandardScheme<queryResuseProjectCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryResuseProjectCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryResuseProjectCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryResuseProjectCount_resultTupleSchemeFactory implements SchemeFactory {
      public queryResuseProjectCount_resultTupleScheme getScheme() {
        return new queryResuseProjectCount_resultTupleScheme();
      }
    }

    private static class queryResuseProjectCount_resultTupleScheme extends TupleScheme<queryResuseProjectCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryResuseProjectCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryResuseProjectCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

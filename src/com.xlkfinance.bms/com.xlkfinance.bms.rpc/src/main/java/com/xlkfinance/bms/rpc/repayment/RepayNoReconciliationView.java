/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepayNoReconciliationView implements org.apache.thrift.TBase<RepayNoReconciliationView, RepayNoReconciliationView._Fields>, java.io.Serializable, Cloneable, Comparable<RepayNoReconciliationView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepayNoReconciliationView");

  private static final org.apache.thrift.protocol.TField EXTENSION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXTENSION_NUM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionNumName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NO_RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("noReconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepayNoReconciliationViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepayNoReconciliationViewTupleSchemeFactory());
  }

  public int extensionNum; // required
  public String extensionNumName; // required
  public double noReconciliationAmt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXTENSION_NUM((short)1, "extensionNum"),
    EXTENSION_NUM_NAME((short)2, "extensionNumName"),
    NO_RECONCILIATION_AMT((short)3, "noReconciliationAmt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXTENSION_NUM
          return EXTENSION_NUM;
        case 2: // EXTENSION_NUM_NAME
          return EXTENSION_NUM_NAME;
        case 3: // NO_RECONCILIATION_AMT
          return NO_RECONCILIATION_AMT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXTENSIONNUM_ISSET_ID = 0;
  private static final int __NORECONCILIATIONAMT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXTENSION_NUM, new org.apache.thrift.meta_data.FieldMetaData("extensionNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTENSION_NUM_NAME, new org.apache.thrift.meta_data.FieldMetaData("extensionNumName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NO_RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("noReconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepayNoReconciliationView.class, metaDataMap);
  }

  public RepayNoReconciliationView() {
  }

  public RepayNoReconciliationView(
    int extensionNum,
    String extensionNumName,
    double noReconciliationAmt)
  {
    this();
    this.extensionNum = extensionNum;
    setExtensionNumIsSet(true);
    this.extensionNumName = extensionNumName;
    this.noReconciliationAmt = noReconciliationAmt;
    setNoReconciliationAmtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepayNoReconciliationView(RepayNoReconciliationView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.extensionNum = other.extensionNum;
    if (other.isSetExtensionNumName()) {
      this.extensionNumName = other.extensionNumName;
    }
    this.noReconciliationAmt = other.noReconciliationAmt;
  }

  public RepayNoReconciliationView deepCopy() {
    return new RepayNoReconciliationView(this);
  }

  @Override
  public void clear() {
    setExtensionNumIsSet(false);
    this.extensionNum = 0;
    this.extensionNumName = null;
    setNoReconciliationAmtIsSet(false);
    this.noReconciliationAmt = 0.0;
  }

  public int getExtensionNum() {
    return this.extensionNum;
  }

  public RepayNoReconciliationView setExtensionNum(int extensionNum) {
    this.extensionNum = extensionNum;
    setExtensionNumIsSet(true);
    return this;
  }

  public void unsetExtensionNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONNUM_ISSET_ID);
  }

  /** Returns true if field extensionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionNum() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONNUM_ISSET_ID);
  }

  public void setExtensionNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONNUM_ISSET_ID, value);
  }

  public String getExtensionNumName() {
    return this.extensionNumName;
  }

  public RepayNoReconciliationView setExtensionNumName(String extensionNumName) {
    this.extensionNumName = extensionNumName;
    return this;
  }

  public void unsetExtensionNumName() {
    this.extensionNumName = null;
  }

  /** Returns true if field extensionNumName is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionNumName() {
    return this.extensionNumName != null;
  }

  public void setExtensionNumNameIsSet(boolean value) {
    if (!value) {
      this.extensionNumName = null;
    }
  }

  public double getNoReconciliationAmt() {
    return this.noReconciliationAmt;
  }

  public RepayNoReconciliationView setNoReconciliationAmt(double noReconciliationAmt) {
    this.noReconciliationAmt = noReconciliationAmt;
    setNoReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetNoReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field noReconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetNoReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __NORECONCILIATIONAMT_ISSET_ID);
  }

  public void setNoReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORECONCILIATIONAMT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXTENSION_NUM:
      if (value == null) {
        unsetExtensionNum();
      } else {
        setExtensionNum((Integer)value);
      }
      break;

    case EXTENSION_NUM_NAME:
      if (value == null) {
        unsetExtensionNumName();
      } else {
        setExtensionNumName((String)value);
      }
      break;

    case NO_RECONCILIATION_AMT:
      if (value == null) {
        unsetNoReconciliationAmt();
      } else {
        setNoReconciliationAmt((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXTENSION_NUM:
      return Integer.valueOf(getExtensionNum());

    case EXTENSION_NUM_NAME:
      return getExtensionNumName();

    case NO_RECONCILIATION_AMT:
      return Double.valueOf(getNoReconciliationAmt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXTENSION_NUM:
      return isSetExtensionNum();
    case EXTENSION_NUM_NAME:
      return isSetExtensionNumName();
    case NO_RECONCILIATION_AMT:
      return isSetNoReconciliationAmt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepayNoReconciliationView)
      return this.equals((RepayNoReconciliationView)that);
    return false;
  }

  public boolean equals(RepayNoReconciliationView that) {
    if (that == null)
      return false;

    boolean this_present_extensionNum = true;
    boolean that_present_extensionNum = true;
    if (this_present_extensionNum || that_present_extensionNum) {
      if (!(this_present_extensionNum && that_present_extensionNum))
        return false;
      if (this.extensionNum != that.extensionNum)
        return false;
    }

    boolean this_present_extensionNumName = true && this.isSetExtensionNumName();
    boolean that_present_extensionNumName = true && that.isSetExtensionNumName();
    if (this_present_extensionNumName || that_present_extensionNumName) {
      if (!(this_present_extensionNumName && that_present_extensionNumName))
        return false;
      if (!this.extensionNumName.equals(that.extensionNumName))
        return false;
    }

    boolean this_present_noReconciliationAmt = true;
    boolean that_present_noReconciliationAmt = true;
    if (this_present_noReconciliationAmt || that_present_noReconciliationAmt) {
      if (!(this_present_noReconciliationAmt && that_present_noReconciliationAmt))
        return false;
      if (this.noReconciliationAmt != that.noReconciliationAmt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_extensionNum = true;
    list.add(present_extensionNum);
    if (present_extensionNum)
      list.add(extensionNum);

    boolean present_extensionNumName = true && (isSetExtensionNumName());
    list.add(present_extensionNumName);
    if (present_extensionNumName)
      list.add(extensionNumName);

    boolean present_noReconciliationAmt = true;
    list.add(present_noReconciliationAmt);
    if (present_noReconciliationAmt)
      list.add(noReconciliationAmt);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepayNoReconciliationView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExtensionNum()).compareTo(other.isSetExtensionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionNum, other.extensionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionNumName()).compareTo(other.isSetExtensionNumName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionNumName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionNumName, other.extensionNumName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoReconciliationAmt()).compareTo(other.isSetNoReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReconciliationAmt, other.noReconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepayNoReconciliationView(");
    boolean first = true;

    sb.append("extensionNum:");
    sb.append(this.extensionNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionNumName:");
    if (this.extensionNumName == null) {
      sb.append("null");
    } else {
      sb.append(this.extensionNumName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noReconciliationAmt:");
    sb.append(this.noReconciliationAmt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepayNoReconciliationViewStandardSchemeFactory implements SchemeFactory {
    public RepayNoReconciliationViewStandardScheme getScheme() {
      return new RepayNoReconciliationViewStandardScheme();
    }
  }

  private static class RepayNoReconciliationViewStandardScheme extends StandardScheme<RepayNoReconciliationView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepayNoReconciliationView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXTENSION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extensionNum = iprot.readI32();
              struct.setExtensionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXTENSION_NUM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extensionNumName = iprot.readString();
              struct.setExtensionNumNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NO_RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noReconciliationAmt = iprot.readDouble();
              struct.setNoReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepayNoReconciliationView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXTENSION_NUM_FIELD_DESC);
      oprot.writeI32(struct.extensionNum);
      oprot.writeFieldEnd();
      if (struct.extensionNumName != null) {
        oprot.writeFieldBegin(EXTENSION_NUM_NAME_FIELD_DESC);
        oprot.writeString(struct.extensionNumName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NO_RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.noReconciliationAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepayNoReconciliationViewTupleSchemeFactory implements SchemeFactory {
    public RepayNoReconciliationViewTupleScheme getScheme() {
      return new RepayNoReconciliationViewTupleScheme();
    }
  }

  private static class RepayNoReconciliationViewTupleScheme extends TupleScheme<RepayNoReconciliationView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepayNoReconciliationView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExtensionNum()) {
        optionals.set(0);
      }
      if (struct.isSetExtensionNumName()) {
        optionals.set(1);
      }
      if (struct.isSetNoReconciliationAmt()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExtensionNum()) {
        oprot.writeI32(struct.extensionNum);
      }
      if (struct.isSetExtensionNumName()) {
        oprot.writeString(struct.extensionNumName);
      }
      if (struct.isSetNoReconciliationAmt()) {
        oprot.writeDouble(struct.noReconciliationAmt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepayNoReconciliationView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.extensionNum = iprot.readI32();
        struct.setExtensionNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.extensionNumName = iprot.readString();
        struct.setExtensionNumNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.noReconciliationAmt = iprot.readDouble();
        struct.setNoReconciliationAmtIsSet(true);
      }
    }
  }

}


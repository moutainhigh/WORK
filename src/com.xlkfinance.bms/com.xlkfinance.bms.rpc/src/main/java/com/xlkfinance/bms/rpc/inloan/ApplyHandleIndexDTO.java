/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class ApplyHandleIndexDTO implements org.apache.thrift.TBase<ApplyHandleIndexDTO, ApplyHandleIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyHandleIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyHandleIndexDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECT_PASS_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectPassDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("recStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField APPLY_HANDLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyHandleStatus", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField FEEDBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("feedback", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField HANDLE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField WORK_FLOW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("workFlowStatus", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField TASK_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskUserName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField REC_FEE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("recFeeStatus", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanBank", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanBankBranch", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField IS_NEED_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isNeedHandle", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplyHandleIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplyHandleIndexDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public int projectStatus; // required
  public String projectPassDate; // required
  public int recStatus; // required
  public int applyHandleStatus; // required
  public int createrId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public String feedback; // required
  public String handleDate; // required
  public String taskName; // required
  public String productName; // required
  public double loanMoney; // required
  public String createrDate; // required
  public int workFlowStatus; // required
  public int productId; // required
  public String taskUserName; // required
  public int handleId; // required
  public int recFeeStatus; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public int isChechan; // required
  public String oldLoanBank; // required
  public String oldLoanBankBranch; // required
  public int isNeedHandle; // required
  public String pmUserName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    PROJECT_NAME((short)4, "projectName"),
    PROJECT_STATUS((short)5, "projectStatus"),
    PROJECT_PASS_DATE((short)6, "projectPassDate"),
    REC_STATUS((short)7, "recStatus"),
    APPLY_HANDLE_STATUS((short)8, "applyHandleStatus"),
    CREATER_ID((short)9, "createrId"),
    USER_IDS((short)10, "userIds"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows"),
    FEEDBACK((short)13, "feedback"),
    HANDLE_DATE((short)14, "handleDate"),
    TASK_NAME((short)15, "taskName"),
    PRODUCT_NAME((short)16, "productName"),
    LOAN_MONEY((short)17, "loanMoney"),
    CREATER_DATE((short)18, "createrDate"),
    WORK_FLOW_STATUS((short)19, "workFlowStatus"),
    PRODUCT_ID((short)20, "productId"),
    TASK_USER_NAME((short)21, "taskUserName"),
    HANDLE_ID((short)22, "handleId"),
    REC_FEE_STATUS((short)23, "recFeeStatus"),
    HOUSE_NAME((short)24, "houseName"),
    BUYER_NAME((short)25, "buyerName"),
    SELLER_NAME((short)26, "sellerName"),
    IS_CHECHAN((short)27, "isChechan"),
    OLD_LOAN_BANK((short)28, "oldLoanBank"),
    OLD_LOAN_BANK_BRANCH((short)29, "oldLoanBankBranch"),
    IS_NEED_HANDLE((short)30, "isNeedHandle"),
    PM_USER_NAME((short)31, "pmUserName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // PROJECT_STATUS
          return PROJECT_STATUS;
        case 6: // PROJECT_PASS_DATE
          return PROJECT_PASS_DATE;
        case 7: // REC_STATUS
          return REC_STATUS;
        case 8: // APPLY_HANDLE_STATUS
          return APPLY_HANDLE_STATUS;
        case 9: // CREATER_ID
          return CREATER_ID;
        case 10: // USER_IDS
          return USER_IDS;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        case 13: // FEEDBACK
          return FEEDBACK;
        case 14: // HANDLE_DATE
          return HANDLE_DATE;
        case 15: // TASK_NAME
          return TASK_NAME;
        case 16: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 17: // LOAN_MONEY
          return LOAN_MONEY;
        case 18: // CREATER_DATE
          return CREATER_DATE;
        case 19: // WORK_FLOW_STATUS
          return WORK_FLOW_STATUS;
        case 20: // PRODUCT_ID
          return PRODUCT_ID;
        case 21: // TASK_USER_NAME
          return TASK_USER_NAME;
        case 22: // HANDLE_ID
          return HANDLE_ID;
        case 23: // REC_FEE_STATUS
          return REC_FEE_STATUS;
        case 24: // HOUSE_NAME
          return HOUSE_NAME;
        case 25: // BUYER_NAME
          return BUYER_NAME;
        case 26: // SELLER_NAME
          return SELLER_NAME;
        case 27: // IS_CHECHAN
          return IS_CHECHAN;
        case 28: // OLD_LOAN_BANK
          return OLD_LOAN_BANK;
        case 29: // OLD_LOAN_BANK_BRANCH
          return OLD_LOAN_BANK_BRANCH;
        case 30: // IS_NEED_HANDLE
          return IS_NEED_HANDLE;
        case 31: // PM_USER_NAME
          return PM_USER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __PROJECTSTATUS_ISSET_ID = 2;
  private static final int __RECSTATUS_ISSET_ID = 3;
  private static final int __APPLYHANDLESTATUS_ISSET_ID = 4;
  private static final int __CREATERID_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private static final int __LOANMONEY_ISSET_ID = 8;
  private static final int __WORKFLOWSTATUS_ISSET_ID = 9;
  private static final int __PRODUCTID_ISSET_ID = 10;
  private static final int __HANDLEID_ISSET_ID = 11;
  private static final int __RECFEESTATUS_ISSET_ID = 12;
  private static final int __ISCHECHAN_ISSET_ID = 13;
  private static final int __ISNEEDHANDLE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("projectStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_PASS_DATE, new org.apache.thrift.meta_data.FieldMetaData("projectPassDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("recStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_HANDLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyHandleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEEDBACK, new org.apache.thrift.meta_data.FieldMetaData("feedback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_DATE, new org.apache.thrift.meta_data.FieldMetaData("handleDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_FLOW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("workFlowStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_FEE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("recFeeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_LOAN_BANK, new org.apache.thrift.meta_data.FieldMetaData("oldLoanBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_LOAN_BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("oldLoanBankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NEED_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("isNeedHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyHandleIndexDTO.class, metaDataMap);
  }

  public ApplyHandleIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public ApplyHandleIndexDTO(
    int pid,
    int projectId,
    String projectNumber,
    String projectName,
    int projectStatus,
    String projectPassDate,
    int recStatus,
    int applyHandleStatus,
    int createrId,
    List<Integer> userIds,
    int page,
    int rows,
    String feedback,
    String handleDate,
    String taskName,
    String productName,
    double loanMoney,
    String createrDate,
    int workFlowStatus,
    int productId,
    String taskUserName,
    int handleId,
    int recFeeStatus,
    String houseName,
    String buyerName,
    String sellerName,
    int isChechan,
    String oldLoanBank,
    String oldLoanBankBranch,
    int isNeedHandle,
    String pmUserName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.projectStatus = projectStatus;
    setProjectStatusIsSet(true);
    this.projectPassDate = projectPassDate;
    this.recStatus = recStatus;
    setRecStatusIsSet(true);
    this.applyHandleStatus = applyHandleStatus;
    setApplyHandleStatusIsSet(true);
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.feedback = feedback;
    this.handleDate = handleDate;
    this.taskName = taskName;
    this.productName = productName;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.createrDate = createrDate;
    this.workFlowStatus = workFlowStatus;
    setWorkFlowStatusIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.taskUserName = taskUserName;
    this.handleId = handleId;
    setHandleIdIsSet(true);
    this.recFeeStatus = recFeeStatus;
    setRecFeeStatusIsSet(true);
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.oldLoanBank = oldLoanBank;
    this.oldLoanBankBranch = oldLoanBankBranch;
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    this.pmUserName = pmUserName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplyHandleIndexDTO(ApplyHandleIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.projectStatus = other.projectStatus;
    if (other.isSetProjectPassDate()) {
      this.projectPassDate = other.projectPassDate;
    }
    this.recStatus = other.recStatus;
    this.applyHandleStatus = other.applyHandleStatus;
    this.createrId = other.createrId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetFeedback()) {
      this.feedback = other.feedback;
    }
    if (other.isSetHandleDate()) {
      this.handleDate = other.handleDate;
    }
    if (other.isSetTaskName()) {
      this.taskName = other.taskName;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.loanMoney = other.loanMoney;
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.workFlowStatus = other.workFlowStatus;
    this.productId = other.productId;
    if (other.isSetTaskUserName()) {
      this.taskUserName = other.taskUserName;
    }
    this.handleId = other.handleId;
    this.recFeeStatus = other.recFeeStatus;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    this.isChechan = other.isChechan;
    if (other.isSetOldLoanBank()) {
      this.oldLoanBank = other.oldLoanBank;
    }
    if (other.isSetOldLoanBankBranch()) {
      this.oldLoanBankBranch = other.oldLoanBankBranch;
    }
    this.isNeedHandle = other.isNeedHandle;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
  }

  public ApplyHandleIndexDTO deepCopy() {
    return new ApplyHandleIndexDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    setProjectStatusIsSet(false);
    this.projectStatus = 0;
    this.projectPassDate = null;
    setRecStatusIsSet(false);
    this.recStatus = 0;
    setApplyHandleStatusIsSet(false);
    this.applyHandleStatus = 0;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    this.feedback = null;
    this.handleDate = null;
    this.taskName = null;
    this.productName = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    this.createrDate = null;
    setWorkFlowStatusIsSet(false);
    this.workFlowStatus = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.taskUserName = null;
    setHandleIdIsSet(false);
    this.handleId = 0;
    setRecFeeStatusIsSet(false);
    this.recFeeStatus = 0;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    this.oldLoanBank = null;
    this.oldLoanBankBranch = null;
    setIsNeedHandleIsSet(false);
    this.isNeedHandle = 0;
    this.pmUserName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ApplyHandleIndexDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ApplyHandleIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ApplyHandleIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ApplyHandleIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getProjectStatus() {
    return this.projectStatus;
  }

  public ApplyHandleIndexDTO setProjectStatus(int projectStatus) {
    this.projectStatus = projectStatus;
    setProjectStatusIsSet(true);
    return this;
  }

  public void unsetProjectStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID);
  }

  /** Returns true if field projectStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID);
  }

  public void setProjectStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSTATUS_ISSET_ID, value);
  }

  public String getProjectPassDate() {
    return this.projectPassDate;
  }

  public ApplyHandleIndexDTO setProjectPassDate(String projectPassDate) {
    this.projectPassDate = projectPassDate;
    return this;
  }

  public void unsetProjectPassDate() {
    this.projectPassDate = null;
  }

  /** Returns true if field projectPassDate is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectPassDate() {
    return this.projectPassDate != null;
  }

  public void setProjectPassDateIsSet(boolean value) {
    if (!value) {
      this.projectPassDate = null;
    }
  }

  public int getRecStatus() {
    return this.recStatus;
  }

  public ApplyHandleIndexDTO setRecStatus(int recStatus) {
    this.recStatus = recStatus;
    setRecStatusIsSet(true);
    return this;
  }

  public void unsetRecStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECSTATUS_ISSET_ID);
  }

  /** Returns true if field recStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRecStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECSTATUS_ISSET_ID);
  }

  public void setRecStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECSTATUS_ISSET_ID, value);
  }

  public int getApplyHandleStatus() {
    return this.applyHandleStatus;
  }

  public ApplyHandleIndexDTO setApplyHandleStatus(int applyHandleStatus) {
    this.applyHandleStatus = applyHandleStatus;
    setApplyHandleStatusIsSet(true);
    return this;
  }

  public void unsetApplyHandleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYHANDLESTATUS_ISSET_ID);
  }

  /** Returns true if field applyHandleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyHandleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYHANDLESTATUS_ISSET_ID);
  }

  public void setApplyHandleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYHANDLESTATUS_ISSET_ID, value);
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public ApplyHandleIndexDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ApplyHandleIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ApplyHandleIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ApplyHandleIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getFeedback() {
    return this.feedback;
  }

  public ApplyHandleIndexDTO setFeedback(String feedback) {
    this.feedback = feedback;
    return this;
  }

  public void unsetFeedback() {
    this.feedback = null;
  }

  /** Returns true if field feedback is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedback() {
    return this.feedback != null;
  }

  public void setFeedbackIsSet(boolean value) {
    if (!value) {
      this.feedback = null;
    }
  }

  public String getHandleDate() {
    return this.handleDate;
  }

  public ApplyHandleIndexDTO setHandleDate(String handleDate) {
    this.handleDate = handleDate;
    return this;
  }

  public void unsetHandleDate() {
    this.handleDate = null;
  }

  /** Returns true if field handleDate is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleDate() {
    return this.handleDate != null;
  }

  public void setHandleDateIsSet(boolean value) {
    if (!value) {
      this.handleDate = null;
    }
  }

  public String getTaskName() {
    return this.taskName;
  }

  public ApplyHandleIndexDTO setTaskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

  public void unsetTaskName() {
    this.taskName = null;
  }

  /** Returns true if field taskName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskName() {
    return this.taskName != null;
  }

  public void setTaskNameIsSet(boolean value) {
    if (!value) {
      this.taskName = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public ApplyHandleIndexDTO setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public ApplyHandleIndexDTO setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public ApplyHandleIndexDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getWorkFlowStatus() {
    return this.workFlowStatus;
  }

  public ApplyHandleIndexDTO setWorkFlowStatus(int workFlowStatus) {
    this.workFlowStatus = workFlowStatus;
    setWorkFlowStatusIsSet(true);
    return this;
  }

  public void unsetWorkFlowStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKFLOWSTATUS_ISSET_ID);
  }

  /** Returns true if field workFlowStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkFlowStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKFLOWSTATUS_ISSET_ID);
  }

  public void setWorkFlowStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKFLOWSTATUS_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public ApplyHandleIndexDTO setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getTaskUserName() {
    return this.taskUserName;
  }

  public ApplyHandleIndexDTO setTaskUserName(String taskUserName) {
    this.taskUserName = taskUserName;
    return this;
  }

  public void unsetTaskUserName() {
    this.taskUserName = null;
  }

  /** Returns true if field taskUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskUserName() {
    return this.taskUserName != null;
  }

  public void setTaskUserNameIsSet(boolean value) {
    if (!value) {
      this.taskUserName = null;
    }
  }

  public int getHandleId() {
    return this.handleId;
  }

  public ApplyHandleIndexDTO setHandleId(int handleId) {
    this.handleId = handleId;
    setHandleIdIsSet(true);
    return this;
  }

  public void unsetHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  public void setHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
  }

  public int getRecFeeStatus() {
    return this.recFeeStatus;
  }

  public ApplyHandleIndexDTO setRecFeeStatus(int recFeeStatus) {
    this.recFeeStatus = recFeeStatus;
    setRecFeeStatusIsSet(true);
    return this;
  }

  public void unsetRecFeeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID);
  }

  /** Returns true if field recFeeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRecFeeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID);
  }

  public void setRecFeeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECFEESTATUS_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public ApplyHandleIndexDTO setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public ApplyHandleIndexDTO setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public ApplyHandleIndexDTO setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public ApplyHandleIndexDTO setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public String getOldLoanBank() {
    return this.oldLoanBank;
  }

  public ApplyHandleIndexDTO setOldLoanBank(String oldLoanBank) {
    this.oldLoanBank = oldLoanBank;
    return this;
  }

  public void unsetOldLoanBank() {
    this.oldLoanBank = null;
  }

  /** Returns true if field oldLoanBank is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanBank() {
    return this.oldLoanBank != null;
  }

  public void setOldLoanBankIsSet(boolean value) {
    if (!value) {
      this.oldLoanBank = null;
    }
  }

  public String getOldLoanBankBranch() {
    return this.oldLoanBankBranch;
  }

  public ApplyHandleIndexDTO setOldLoanBankBranch(String oldLoanBankBranch) {
    this.oldLoanBankBranch = oldLoanBankBranch;
    return this;
  }

  public void unsetOldLoanBankBranch() {
    this.oldLoanBankBranch = null;
  }

  /** Returns true if field oldLoanBankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanBankBranch() {
    return this.oldLoanBankBranch != null;
  }

  public void setOldLoanBankBranchIsSet(boolean value) {
    if (!value) {
      this.oldLoanBankBranch = null;
    }
  }

  public int getIsNeedHandle() {
    return this.isNeedHandle;
  }

  public ApplyHandleIndexDTO setIsNeedHandle(int isNeedHandle) {
    this.isNeedHandle = isNeedHandle;
    setIsNeedHandleIsSet(true);
    return this;
  }

  public void unsetIsNeedHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  /** Returns true if field isNeedHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeedHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID);
  }

  public void setIsNeedHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEEDHANDLE_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public ApplyHandleIndexDTO setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_STATUS:
      if (value == null) {
        unsetProjectStatus();
      } else {
        setProjectStatus((Integer)value);
      }
      break;

    case PROJECT_PASS_DATE:
      if (value == null) {
        unsetProjectPassDate();
      } else {
        setProjectPassDate((String)value);
      }
      break;

    case REC_STATUS:
      if (value == null) {
        unsetRecStatus();
      } else {
        setRecStatus((Integer)value);
      }
      break;

    case APPLY_HANDLE_STATUS:
      if (value == null) {
        unsetApplyHandleStatus();
      } else {
        setApplyHandleStatus((Integer)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case FEEDBACK:
      if (value == null) {
        unsetFeedback();
      } else {
        setFeedback((String)value);
      }
      break;

    case HANDLE_DATE:
      if (value == null) {
        unsetHandleDate();
      } else {
        setHandleDate((String)value);
      }
      break;

    case TASK_NAME:
      if (value == null) {
        unsetTaskName();
      } else {
        setTaskName((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case WORK_FLOW_STATUS:
      if (value == null) {
        unsetWorkFlowStatus();
      } else {
        setWorkFlowStatus((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case TASK_USER_NAME:
      if (value == null) {
        unsetTaskUserName();
      } else {
        setTaskUserName((String)value);
      }
      break;

    case HANDLE_ID:
      if (value == null) {
        unsetHandleId();
      } else {
        setHandleId((Integer)value);
      }
      break;

    case REC_FEE_STATUS:
      if (value == null) {
        unsetRecFeeStatus();
      } else {
        setRecFeeStatus((Integer)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case OLD_LOAN_BANK:
      if (value == null) {
        unsetOldLoanBank();
      } else {
        setOldLoanBank((String)value);
      }
      break;

    case OLD_LOAN_BANK_BRANCH:
      if (value == null) {
        unsetOldLoanBankBranch();
      } else {
        setOldLoanBankBranch((String)value);
      }
      break;

    case IS_NEED_HANDLE:
      if (value == null) {
        unsetIsNeedHandle();
      } else {
        setIsNeedHandle((Integer)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_STATUS:
      return Integer.valueOf(getProjectStatus());

    case PROJECT_PASS_DATE:
      return getProjectPassDate();

    case REC_STATUS:
      return Integer.valueOf(getRecStatus());

    case APPLY_HANDLE_STATUS:
      return Integer.valueOf(getApplyHandleStatus());

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case FEEDBACK:
      return getFeedback();

    case HANDLE_DATE:
      return getHandleDate();

    case TASK_NAME:
      return getTaskName();

    case PRODUCT_NAME:
      return getProductName();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case CREATER_DATE:
      return getCreaterDate();

    case WORK_FLOW_STATUS:
      return Integer.valueOf(getWorkFlowStatus());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case TASK_USER_NAME:
      return getTaskUserName();

    case HANDLE_ID:
      return Integer.valueOf(getHandleId());

    case REC_FEE_STATUS:
      return Integer.valueOf(getRecFeeStatus());

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case OLD_LOAN_BANK:
      return getOldLoanBank();

    case OLD_LOAN_BANK_BRANCH:
      return getOldLoanBankBranch();

    case IS_NEED_HANDLE:
      return Integer.valueOf(getIsNeedHandle());

    case PM_USER_NAME:
      return getPmUserName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_STATUS:
      return isSetProjectStatus();
    case PROJECT_PASS_DATE:
      return isSetProjectPassDate();
    case REC_STATUS:
      return isSetRecStatus();
    case APPLY_HANDLE_STATUS:
      return isSetApplyHandleStatus();
    case CREATER_ID:
      return isSetCreaterId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case FEEDBACK:
      return isSetFeedback();
    case HANDLE_DATE:
      return isSetHandleDate();
    case TASK_NAME:
      return isSetTaskName();
    case PRODUCT_NAME:
      return isSetProductName();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case CREATER_DATE:
      return isSetCreaterDate();
    case WORK_FLOW_STATUS:
      return isSetWorkFlowStatus();
    case PRODUCT_ID:
      return isSetProductId();
    case TASK_USER_NAME:
      return isSetTaskUserName();
    case HANDLE_ID:
      return isSetHandleId();
    case REC_FEE_STATUS:
      return isSetRecFeeStatus();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case IS_CHECHAN:
      return isSetIsChechan();
    case OLD_LOAN_BANK:
      return isSetOldLoanBank();
    case OLD_LOAN_BANK_BRANCH:
      return isSetOldLoanBankBranch();
    case IS_NEED_HANDLE:
      return isSetIsNeedHandle();
    case PM_USER_NAME:
      return isSetPmUserName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplyHandleIndexDTO)
      return this.equals((ApplyHandleIndexDTO)that);
    return false;
  }

  public boolean equals(ApplyHandleIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectStatus = true;
    boolean that_present_projectStatus = true;
    if (this_present_projectStatus || that_present_projectStatus) {
      if (!(this_present_projectStatus && that_present_projectStatus))
        return false;
      if (this.projectStatus != that.projectStatus)
        return false;
    }

    boolean this_present_projectPassDate = true && this.isSetProjectPassDate();
    boolean that_present_projectPassDate = true && that.isSetProjectPassDate();
    if (this_present_projectPassDate || that_present_projectPassDate) {
      if (!(this_present_projectPassDate && that_present_projectPassDate))
        return false;
      if (!this.projectPassDate.equals(that.projectPassDate))
        return false;
    }

    boolean this_present_recStatus = true;
    boolean that_present_recStatus = true;
    if (this_present_recStatus || that_present_recStatus) {
      if (!(this_present_recStatus && that_present_recStatus))
        return false;
      if (this.recStatus != that.recStatus)
        return false;
    }

    boolean this_present_applyHandleStatus = true;
    boolean that_present_applyHandleStatus = true;
    if (this_present_applyHandleStatus || that_present_applyHandleStatus) {
      if (!(this_present_applyHandleStatus && that_present_applyHandleStatus))
        return false;
      if (this.applyHandleStatus != that.applyHandleStatus)
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_feedback = true && this.isSetFeedback();
    boolean that_present_feedback = true && that.isSetFeedback();
    if (this_present_feedback || that_present_feedback) {
      if (!(this_present_feedback && that_present_feedback))
        return false;
      if (!this.feedback.equals(that.feedback))
        return false;
    }

    boolean this_present_handleDate = true && this.isSetHandleDate();
    boolean that_present_handleDate = true && that.isSetHandleDate();
    if (this_present_handleDate || that_present_handleDate) {
      if (!(this_present_handleDate && that_present_handleDate))
        return false;
      if (!this.handleDate.equals(that.handleDate))
        return false;
    }

    boolean this_present_taskName = true && this.isSetTaskName();
    boolean that_present_taskName = true && that.isSetTaskName();
    if (this_present_taskName || that_present_taskName) {
      if (!(this_present_taskName && that_present_taskName))
        return false;
      if (!this.taskName.equals(that.taskName))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_workFlowStatus = true;
    boolean that_present_workFlowStatus = true;
    if (this_present_workFlowStatus || that_present_workFlowStatus) {
      if (!(this_present_workFlowStatus && that_present_workFlowStatus))
        return false;
      if (this.workFlowStatus != that.workFlowStatus)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_taskUserName = true && this.isSetTaskUserName();
    boolean that_present_taskUserName = true && that.isSetTaskUserName();
    if (this_present_taskUserName || that_present_taskUserName) {
      if (!(this_present_taskUserName && that_present_taskUserName))
        return false;
      if (!this.taskUserName.equals(that.taskUserName))
        return false;
    }

    boolean this_present_handleId = true;
    boolean that_present_handleId = true;
    if (this_present_handleId || that_present_handleId) {
      if (!(this_present_handleId && that_present_handleId))
        return false;
      if (this.handleId != that.handleId)
        return false;
    }

    boolean this_present_recFeeStatus = true;
    boolean that_present_recFeeStatus = true;
    if (this_present_recFeeStatus || that_present_recFeeStatus) {
      if (!(this_present_recFeeStatus && that_present_recFeeStatus))
        return false;
      if (this.recFeeStatus != that.recFeeStatus)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_oldLoanBank = true && this.isSetOldLoanBank();
    boolean that_present_oldLoanBank = true && that.isSetOldLoanBank();
    if (this_present_oldLoanBank || that_present_oldLoanBank) {
      if (!(this_present_oldLoanBank && that_present_oldLoanBank))
        return false;
      if (!this.oldLoanBank.equals(that.oldLoanBank))
        return false;
    }

    boolean this_present_oldLoanBankBranch = true && this.isSetOldLoanBankBranch();
    boolean that_present_oldLoanBankBranch = true && that.isSetOldLoanBankBranch();
    if (this_present_oldLoanBankBranch || that_present_oldLoanBankBranch) {
      if (!(this_present_oldLoanBankBranch && that_present_oldLoanBankBranch))
        return false;
      if (!this.oldLoanBankBranch.equals(that.oldLoanBankBranch))
        return false;
    }

    boolean this_present_isNeedHandle = true;
    boolean that_present_isNeedHandle = true;
    if (this_present_isNeedHandle || that_present_isNeedHandle) {
      if (!(this_present_isNeedHandle && that_present_isNeedHandle))
        return false;
      if (this.isNeedHandle != that.isNeedHandle)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectStatus = true;
    list.add(present_projectStatus);
    if (present_projectStatus)
      list.add(projectStatus);

    boolean present_projectPassDate = true && (isSetProjectPassDate());
    list.add(present_projectPassDate);
    if (present_projectPassDate)
      list.add(projectPassDate);

    boolean present_recStatus = true;
    list.add(present_recStatus);
    if (present_recStatus)
      list.add(recStatus);

    boolean present_applyHandleStatus = true;
    list.add(present_applyHandleStatus);
    if (present_applyHandleStatus)
      list.add(applyHandleStatus);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_feedback = true && (isSetFeedback());
    list.add(present_feedback);
    if (present_feedback)
      list.add(feedback);

    boolean present_handleDate = true && (isSetHandleDate());
    list.add(present_handleDate);
    if (present_handleDate)
      list.add(handleDate);

    boolean present_taskName = true && (isSetTaskName());
    list.add(present_taskName);
    if (present_taskName)
      list.add(taskName);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_workFlowStatus = true;
    list.add(present_workFlowStatus);
    if (present_workFlowStatus)
      list.add(workFlowStatus);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_taskUserName = true && (isSetTaskUserName());
    list.add(present_taskUserName);
    if (present_taskUserName)
      list.add(taskUserName);

    boolean present_handleId = true;
    list.add(present_handleId);
    if (present_handleId)
      list.add(handleId);

    boolean present_recFeeStatus = true;
    list.add(present_recFeeStatus);
    if (present_recFeeStatus)
      list.add(recFeeStatus);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_oldLoanBank = true && (isSetOldLoanBank());
    list.add(present_oldLoanBank);
    if (present_oldLoanBank)
      list.add(oldLoanBank);

    boolean present_oldLoanBankBranch = true && (isSetOldLoanBankBranch());
    list.add(present_oldLoanBankBranch);
    if (present_oldLoanBankBranch)
      list.add(oldLoanBankBranch);

    boolean present_isNeedHandle = true;
    list.add(present_isNeedHandle);
    if (present_isNeedHandle)
      list.add(isNeedHandle);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ApplyHandleIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectStatus()).compareTo(other.isSetProjectStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectStatus, other.projectStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectPassDate()).compareTo(other.isSetProjectPassDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectPassDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectPassDate, other.projectPassDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecStatus()).compareTo(other.isSetRecStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recStatus, other.recStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyHandleStatus()).compareTo(other.isSetApplyHandleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyHandleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyHandleStatus, other.applyHandleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedback()).compareTo(other.isSetFeedback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedback, other.feedback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleDate()).compareTo(other.isSetHandleDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDate, other.handleDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskName()).compareTo(other.isSetTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskName, other.taskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkFlowStatus()).compareTo(other.isSetWorkFlowStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkFlowStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workFlowStatus, other.workFlowStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskUserName()).compareTo(other.isSetTaskUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskUserName, other.taskUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecFeeStatus()).compareTo(other.isSetRecFeeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecFeeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recFeeStatus, other.recFeeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanBank()).compareTo(other.isSetOldLoanBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanBank, other.oldLoanBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanBankBranch()).compareTo(other.isSetOldLoanBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanBankBranch, other.oldLoanBankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeedHandle()).compareTo(other.isSetIsNeedHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeedHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedHandle, other.isNeedHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplyHandleIndexDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectStatus:");
    sb.append(this.projectStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectPassDate:");
    if (this.projectPassDate == null) {
      sb.append("null");
    } else {
      sb.append(this.projectPassDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recStatus:");
    sb.append(this.recStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyHandleStatus:");
    sb.append(this.applyHandleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feedback:");
    if (this.feedback == null) {
      sb.append("null");
    } else {
      sb.append(this.feedback);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleDate:");
    if (this.handleDate == null) {
      sb.append("null");
    } else {
      sb.append(this.handleDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskName:");
    if (this.taskName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workFlowStatus:");
    sb.append(this.workFlowStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskUserName:");
    if (this.taskUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleId:");
    sb.append(this.handleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recFeeStatus:");
    sb.append(this.recFeeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanBank:");
    if (this.oldLoanBank == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanBankBranch:");
    if (this.oldLoanBankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanBankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNeedHandle:");
    sb.append(this.isNeedHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplyHandleIndexDTOStandardSchemeFactory implements SchemeFactory {
    public ApplyHandleIndexDTOStandardScheme getScheme() {
      return new ApplyHandleIndexDTOStandardScheme();
    }
  }

  private static class ApplyHandleIndexDTOStandardScheme extends StandardScheme<ApplyHandleIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyHandleIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectStatus = iprot.readI32();
              struct.setProjectStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECT_PASS_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectPassDate = iprot.readString();
              struct.setProjectPassDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recStatus = iprot.readI32();
              struct.setRecStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // APPLY_HANDLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyHandleStatus = iprot.readI32();
              struct.setApplyHandleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list48.size);
                int _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI32();
                  struct.userIds.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FEEDBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feedback = iprot.readString();
              struct.setFeedbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HANDLE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleDate = iprot.readString();
              struct.setHandleDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskName = iprot.readString();
              struct.setTaskNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // WORK_FLOW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.workFlowStatus = iprot.readI32();
              struct.setWorkFlowStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TASK_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskUserName = iprot.readString();
              struct.setTaskUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleId = iprot.readI32();
              struct.setHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REC_FEE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recFeeStatus = iprot.readI32();
              struct.setRecFeeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // OLD_LOAN_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanBank = iprot.readString();
              struct.setOldLoanBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // OLD_LOAN_BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanBankBranch = iprot.readString();
              struct.setOldLoanBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // IS_NEED_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNeedHandle = iprot.readI32();
              struct.setIsNeedHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyHandleIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.projectStatus);
      oprot.writeFieldEnd();
      if (struct.projectPassDate != null) {
        oprot.writeFieldBegin(PROJECT_PASS_DATE_FIELD_DESC);
        oprot.writeString(struct.projectPassDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REC_STATUS_FIELD_DESC);
      oprot.writeI32(struct.recStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_HANDLE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyHandleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter51 : struct.userIds)
          {
            oprot.writeI32(_iter51);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.feedback != null) {
        oprot.writeFieldBegin(FEEDBACK_FIELD_DESC);
        oprot.writeString(struct.feedback);
        oprot.writeFieldEnd();
      }
      if (struct.handleDate != null) {
        oprot.writeFieldBegin(HANDLE_DATE_FIELD_DESC);
        oprot.writeString(struct.handleDate);
        oprot.writeFieldEnd();
      }
      if (struct.taskName != null) {
        oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
        oprot.writeString(struct.taskName);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WORK_FLOW_STATUS_FIELD_DESC);
      oprot.writeI32(struct.workFlowStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.taskUserName != null) {
        oprot.writeFieldBegin(TASK_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.taskUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.handleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_FEE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.recFeeStatus);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      if (struct.oldLoanBank != null) {
        oprot.writeFieldBegin(OLD_LOAN_BANK_FIELD_DESC);
        oprot.writeString(struct.oldLoanBank);
        oprot.writeFieldEnd();
      }
      if (struct.oldLoanBankBranch != null) {
        oprot.writeFieldBegin(OLD_LOAN_BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.oldLoanBankBranch);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_NEED_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.isNeedHandle);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplyHandleIndexDTOTupleSchemeFactory implements SchemeFactory {
    public ApplyHandleIndexDTOTupleScheme getScheme() {
      return new ApplyHandleIndexDTOTupleScheme();
    }
  }

  private static class ApplyHandleIndexDTOTupleScheme extends TupleScheme<ApplyHandleIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplyHandleIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetProjectStatus()) {
        optionals.set(4);
      }
      if (struct.isSetProjectPassDate()) {
        optionals.set(5);
      }
      if (struct.isSetRecStatus()) {
        optionals.set(6);
      }
      if (struct.isSetApplyHandleStatus()) {
        optionals.set(7);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(8);
      }
      if (struct.isSetUserIds()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetFeedback()) {
        optionals.set(12);
      }
      if (struct.isSetHandleDate()) {
        optionals.set(13);
      }
      if (struct.isSetTaskName()) {
        optionals.set(14);
      }
      if (struct.isSetProductName()) {
        optionals.set(15);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(16);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(17);
      }
      if (struct.isSetWorkFlowStatus()) {
        optionals.set(18);
      }
      if (struct.isSetProductId()) {
        optionals.set(19);
      }
      if (struct.isSetTaskUserName()) {
        optionals.set(20);
      }
      if (struct.isSetHandleId()) {
        optionals.set(21);
      }
      if (struct.isSetRecFeeStatus()) {
        optionals.set(22);
      }
      if (struct.isSetHouseName()) {
        optionals.set(23);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(24);
      }
      if (struct.isSetSellerName()) {
        optionals.set(25);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(26);
      }
      if (struct.isSetOldLoanBank()) {
        optionals.set(27);
      }
      if (struct.isSetOldLoanBankBranch()) {
        optionals.set(28);
      }
      if (struct.isSetIsNeedHandle()) {
        optionals.set(29);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(30);
      }
      oprot.writeBitSet(optionals, 31);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectStatus()) {
        oprot.writeI32(struct.projectStatus);
      }
      if (struct.isSetProjectPassDate()) {
        oprot.writeString(struct.projectPassDate);
      }
      if (struct.isSetRecStatus()) {
        oprot.writeI32(struct.recStatus);
      }
      if (struct.isSetApplyHandleStatus()) {
        oprot.writeI32(struct.applyHandleStatus);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter52 : struct.userIds)
          {
            oprot.writeI32(_iter52);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetFeedback()) {
        oprot.writeString(struct.feedback);
      }
      if (struct.isSetHandleDate()) {
        oprot.writeString(struct.handleDate);
      }
      if (struct.isSetTaskName()) {
        oprot.writeString(struct.taskName);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetWorkFlowStatus()) {
        oprot.writeI32(struct.workFlowStatus);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetTaskUserName()) {
        oprot.writeString(struct.taskUserName);
      }
      if (struct.isSetHandleId()) {
        oprot.writeI32(struct.handleId);
      }
      if (struct.isSetRecFeeStatus()) {
        oprot.writeI32(struct.recFeeStatus);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetOldLoanBank()) {
        oprot.writeString(struct.oldLoanBank);
      }
      if (struct.isSetOldLoanBankBranch()) {
        oprot.writeString(struct.oldLoanBankBranch);
      }
      if (struct.isSetIsNeedHandle()) {
        oprot.writeI32(struct.isNeedHandle);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplyHandleIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(31);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectStatus = iprot.readI32();
        struct.setProjectStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.projectPassDate = iprot.readString();
        struct.setProjectPassDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recStatus = iprot.readI32();
        struct.setRecStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.applyHandleStatus = iprot.readI32();
        struct.setApplyHandleStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list53.size);
          int _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = iprot.readI32();
            struct.userIds.add(_elem54);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.feedback = iprot.readString();
        struct.setFeedbackIsSet(true);
      }
      if (incoming.get(13)) {
        struct.handleDate = iprot.readString();
        struct.setHandleDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.taskName = iprot.readString();
        struct.setTaskNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.workFlowStatus = iprot.readI32();
        struct.setWorkFlowStatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.taskUserName = iprot.readString();
        struct.setTaskUserNameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.handleId = iprot.readI32();
        struct.setHandleIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.recFeeStatus = iprot.readI32();
        struct.setRecFeeStatusIsSet(true);
      }
      if (incoming.get(23)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(25)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(26)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(27)) {
        struct.oldLoanBank = iprot.readString();
        struct.setOldLoanBankIsSet(true);
      }
      if (incoming.get(28)) {
        struct.oldLoanBankBranch = iprot.readString();
        struct.setOldLoanBankBranchIsSet(true);
      }
      if (incoming.get(29)) {
        struct.isNeedHandle = iprot.readI32();
        struct.setIsNeedHandleIsSet(true);
      }
      if (incoming.get(30)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
    }
  }

}


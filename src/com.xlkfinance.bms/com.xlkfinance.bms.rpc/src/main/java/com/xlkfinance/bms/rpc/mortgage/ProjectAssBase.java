/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.mortgage;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-10")
public class ProjectAssBase implements org.apache.thrift.TBase<ProjectAssBase, ProjectAssBase._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectAssBase> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectAssBase");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MORTGAGE_GUARANTEE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageGuaranteeType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MORTGAGE_GUARANTEE_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageGuaranteeTypeText", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MORTGAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MORTGAGE_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageTypeText", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OWN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ownType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OWN_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ownTypeText", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OWN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ownName", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField WARRANTS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("warrantsNumber", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ADDRESS_PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("addressProvince", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ADDRESS_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("addressCity", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ADDRESS_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("addressArea", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ADDRESS_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("addressDetail", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PURPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("purpose", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REG_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("regDt", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("regPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField ASSESS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("assessValue", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField MORTGAGE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageValue", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField MORTGAGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageRate", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField FAIR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fairValue", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField FAIR_VALUE_GET_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("fairValueGetMethod", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField SAVE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("saveDttm", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SAVE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("saveRemark", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField REG_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("regNumber", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField EXT_REQUEST_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("extRequestReason", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField EXT_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("extDttm", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField EXT_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("extRemark", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField REMOVE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("removeDttm", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField REMOVE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("removeRemark", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField BEGIN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("beginMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField END_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("endMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField OPERATOR_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorText", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField REG_ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regOrgName", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField TRANSACT_EXPLAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("transactExplain", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField DATA_OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataObject", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField PROCESS_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("processDt", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField PROCESS_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("processRemark", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField OWNS_FIELD_DESC = new org.apache.thrift.protocol.TField("owns", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField OWN_NAME_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ownNameText", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField CONSTRUCTION_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("constructionArea", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField PROPOSER_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("proposerText", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField PROPOSER_FIELD_DESC = new org.apache.thrift.protocol.TField("proposer", org.apache.thrift.protocol.TType.I32, (short)53);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectAssBaseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectAssBaseTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int mortgageGuaranteeType; // required
  public String mortgageGuaranteeTypeText; // required
  public int mortgageType; // required
  public String mortgageTypeText; // required
  public int ownType; // required
  public String ownTypeText; // required
  public int ownName; // required
  public String warrantsNumber; // required
  public String addressProvince; // required
  public String addressCity; // required
  public String addressArea; // required
  public String addressDetail; // required
  public String itemName; // required
  public String purpose; // required
  public String regDt; // required
  public double regPrice; // required
  public double assessValue; // required
  public double mortgageValue; // required
  public double mortgageRate; // required
  public double fairValue; // required
  public String fairValueGetMethod; // required
  public String saveDttm; // required
  public String saveRemark; // required
  public String regNumber; // required
  public String extRequestReason; // required
  public String extDttm; // required
  public String extRemark; // required
  public String removeDttm; // required
  public String removeRemark; // required
  public int status; // required
  public String remark; // required
  public String projectName; // required
  public String projectNumber; // required
  public double beginMoney; // required
  public double endMoney; // required
  public String operator; // required
  public String operatorText; // required
  public String regOrgName; // required
  public String transactExplain; // required
  public String dataObject; // required
  public String processDt; // required
  public String processRemark; // required
  public String owns; // required
  public String ownNameText; // required
  public int page; // required
  public int rows; // required
  public String content; // required
  public String constructionArea; // required
  public int pmUserId; // required
  public String proposerText; // required
  public int proposer; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    MORTGAGE_GUARANTEE_TYPE((short)3, "mortgageGuaranteeType"),
    MORTGAGE_GUARANTEE_TYPE_TEXT((short)4, "mortgageGuaranteeTypeText"),
    MORTGAGE_TYPE((short)5, "mortgageType"),
    MORTGAGE_TYPE_TEXT((short)6, "mortgageTypeText"),
    OWN_TYPE((short)7, "ownType"),
    OWN_TYPE_TEXT((short)8, "ownTypeText"),
    OWN_NAME((short)9, "ownName"),
    WARRANTS_NUMBER((short)10, "warrantsNumber"),
    ADDRESS_PROVINCE((short)11, "addressProvince"),
    ADDRESS_CITY((short)12, "addressCity"),
    ADDRESS_AREA((short)13, "addressArea"),
    ADDRESS_DETAIL((short)14, "addressDetail"),
    ITEM_NAME((short)15, "itemName"),
    PURPOSE((short)16, "purpose"),
    REG_DT((short)17, "regDt"),
    REG_PRICE((short)18, "regPrice"),
    ASSESS_VALUE((short)19, "assessValue"),
    MORTGAGE_VALUE((short)20, "mortgageValue"),
    MORTGAGE_RATE((short)21, "mortgageRate"),
    FAIR_VALUE((short)22, "fairValue"),
    FAIR_VALUE_GET_METHOD((short)23, "fairValueGetMethod"),
    SAVE_DTTM((short)24, "saveDttm"),
    SAVE_REMARK((short)25, "saveRemark"),
    REG_NUMBER((short)26, "regNumber"),
    EXT_REQUEST_REASON((short)27, "extRequestReason"),
    EXT_DTTM((short)28, "extDttm"),
    EXT_REMARK((short)29, "extRemark"),
    REMOVE_DTTM((short)30, "removeDttm"),
    REMOVE_REMARK((short)31, "removeRemark"),
    STATUS((short)32, "status"),
    REMARK((short)33, "remark"),
    PROJECT_NAME((short)34, "projectName"),
    PROJECT_NUMBER((short)35, "projectNumber"),
    BEGIN_MONEY((short)36, "beginMoney"),
    END_MONEY((short)37, "endMoney"),
    OPERATOR((short)38, "operator"),
    OPERATOR_TEXT((short)39, "operatorText"),
    REG_ORG_NAME((short)40, "regOrgName"),
    TRANSACT_EXPLAIN((short)41, "transactExplain"),
    DATA_OBJECT((short)42, "dataObject"),
    PROCESS_DT((short)43, "processDt"),
    PROCESS_REMARK((short)44, "processRemark"),
    OWNS((short)45, "owns"),
    OWN_NAME_TEXT((short)46, "ownNameText"),
    PAGE((short)47, "page"),
    ROWS((short)48, "rows"),
    CONTENT((short)49, "content"),
    CONSTRUCTION_AREA((short)50, "constructionArea"),
    PM_USER_ID((short)51, "pmUserId"),
    PROPOSER_TEXT((short)52, "proposerText"),
    PROPOSER((short)53, "proposer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // MORTGAGE_GUARANTEE_TYPE
          return MORTGAGE_GUARANTEE_TYPE;
        case 4: // MORTGAGE_GUARANTEE_TYPE_TEXT
          return MORTGAGE_GUARANTEE_TYPE_TEXT;
        case 5: // MORTGAGE_TYPE
          return MORTGAGE_TYPE;
        case 6: // MORTGAGE_TYPE_TEXT
          return MORTGAGE_TYPE_TEXT;
        case 7: // OWN_TYPE
          return OWN_TYPE;
        case 8: // OWN_TYPE_TEXT
          return OWN_TYPE_TEXT;
        case 9: // OWN_NAME
          return OWN_NAME;
        case 10: // WARRANTS_NUMBER
          return WARRANTS_NUMBER;
        case 11: // ADDRESS_PROVINCE
          return ADDRESS_PROVINCE;
        case 12: // ADDRESS_CITY
          return ADDRESS_CITY;
        case 13: // ADDRESS_AREA
          return ADDRESS_AREA;
        case 14: // ADDRESS_DETAIL
          return ADDRESS_DETAIL;
        case 15: // ITEM_NAME
          return ITEM_NAME;
        case 16: // PURPOSE
          return PURPOSE;
        case 17: // REG_DT
          return REG_DT;
        case 18: // REG_PRICE
          return REG_PRICE;
        case 19: // ASSESS_VALUE
          return ASSESS_VALUE;
        case 20: // MORTGAGE_VALUE
          return MORTGAGE_VALUE;
        case 21: // MORTGAGE_RATE
          return MORTGAGE_RATE;
        case 22: // FAIR_VALUE
          return FAIR_VALUE;
        case 23: // FAIR_VALUE_GET_METHOD
          return FAIR_VALUE_GET_METHOD;
        case 24: // SAVE_DTTM
          return SAVE_DTTM;
        case 25: // SAVE_REMARK
          return SAVE_REMARK;
        case 26: // REG_NUMBER
          return REG_NUMBER;
        case 27: // EXT_REQUEST_REASON
          return EXT_REQUEST_REASON;
        case 28: // EXT_DTTM
          return EXT_DTTM;
        case 29: // EXT_REMARK
          return EXT_REMARK;
        case 30: // REMOVE_DTTM
          return REMOVE_DTTM;
        case 31: // REMOVE_REMARK
          return REMOVE_REMARK;
        case 32: // STATUS
          return STATUS;
        case 33: // REMARK
          return REMARK;
        case 34: // PROJECT_NAME
          return PROJECT_NAME;
        case 35: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 36: // BEGIN_MONEY
          return BEGIN_MONEY;
        case 37: // END_MONEY
          return END_MONEY;
        case 38: // OPERATOR
          return OPERATOR;
        case 39: // OPERATOR_TEXT
          return OPERATOR_TEXT;
        case 40: // REG_ORG_NAME
          return REG_ORG_NAME;
        case 41: // TRANSACT_EXPLAIN
          return TRANSACT_EXPLAIN;
        case 42: // DATA_OBJECT
          return DATA_OBJECT;
        case 43: // PROCESS_DT
          return PROCESS_DT;
        case 44: // PROCESS_REMARK
          return PROCESS_REMARK;
        case 45: // OWNS
          return OWNS;
        case 46: // OWN_NAME_TEXT
          return OWN_NAME_TEXT;
        case 47: // PAGE
          return PAGE;
        case 48: // ROWS
          return ROWS;
        case 49: // CONTENT
          return CONTENT;
        case 50: // CONSTRUCTION_AREA
          return CONSTRUCTION_AREA;
        case 51: // PM_USER_ID
          return PM_USER_ID;
        case 52: // PROPOSER_TEXT
          return PROPOSER_TEXT;
        case 53: // PROPOSER
          return PROPOSER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __MORTGAGEGUARANTEETYPE_ISSET_ID = 2;
  private static final int __MORTGAGETYPE_ISSET_ID = 3;
  private static final int __OWNTYPE_ISSET_ID = 4;
  private static final int __OWNNAME_ISSET_ID = 5;
  private static final int __REGPRICE_ISSET_ID = 6;
  private static final int __ASSESSVALUE_ISSET_ID = 7;
  private static final int __MORTGAGEVALUE_ISSET_ID = 8;
  private static final int __MORTGAGERATE_ISSET_ID = 9;
  private static final int __FAIRVALUE_ISSET_ID = 10;
  private static final int __STATUS_ISSET_ID = 11;
  private static final int __BEGINMONEY_ISSET_ID = 12;
  private static final int __ENDMONEY_ISSET_ID = 13;
  private static final int __PAGE_ISSET_ID = 14;
  private static final int __ROWS_ISSET_ID = 15;
  private static final int __PMUSERID_ISSET_ID = 16;
  private static final int __PROPOSER_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGAGE_GUARANTEE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mortgageGuaranteeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGAGE_GUARANTEE_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("mortgageGuaranteeTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mortgageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGAGE_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("mortgageTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ownType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OWN_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("ownTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWN_NAME, new org.apache.thrift.meta_data.FieldMetaData("ownName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WARRANTS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("warrantsNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("addressProvince", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_CITY, new org.apache.thrift.meta_data.FieldMetaData("addressCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_AREA, new org.apache.thrift.meta_data.FieldMetaData("addressArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("addressDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PURPOSE, new org.apache.thrift.meta_data.FieldMetaData("purpose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_DT, new org.apache.thrift.meta_data.FieldMetaData("regDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("regPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSESS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("assessValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MORTGAGE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("mortgageValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MORTGAGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("mortgageRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAIR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fairValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FAIR_VALUE_GET_METHOD, new org.apache.thrift.meta_data.FieldMetaData("fairValueGetMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAVE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("saveDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAVE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("saveRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("regNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT_REQUEST_REASON, new org.apache.thrift.meta_data.FieldMetaData("extRequestReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT_DTTM, new org.apache.thrift.meta_data.FieldMetaData("extDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT_REMARK, new org.apache.thrift.meta_data.FieldMetaData("extRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOVE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("removeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOVE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("removeRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("beginMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.END_MONEY, new org.apache.thrift.meta_data.FieldMetaData("endMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR_TEXT, new org.apache.thrift.meta_data.FieldMetaData("operatorText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("regOrgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSACT_EXPLAIN, new org.apache.thrift.meta_data.FieldMetaData("transactExplain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_OBJECT, new org.apache.thrift.meta_data.FieldMetaData("dataObject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_DT, new org.apache.thrift.meta_data.FieldMetaData("processDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_REMARK, new org.apache.thrift.meta_data.FieldMetaData("processRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNS, new org.apache.thrift.meta_data.FieldMetaData("owns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWN_NAME_TEXT, new org.apache.thrift.meta_data.FieldMetaData("ownNameText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSTRUCTION_AREA, new org.apache.thrift.meta_data.FieldMetaData("constructionArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROPOSER_TEXT, new org.apache.thrift.meta_data.FieldMetaData("proposerText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPOSER, new org.apache.thrift.meta_data.FieldMetaData("proposer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectAssBase.class, metaDataMap);
  }

  public ProjectAssBase() {
  }

  public ProjectAssBase(
    int pid,
    int projectId,
    int mortgageGuaranteeType,
    String mortgageGuaranteeTypeText,
    int mortgageType,
    String mortgageTypeText,
    int ownType,
    String ownTypeText,
    int ownName,
    String warrantsNumber,
    String addressProvince,
    String addressCity,
    String addressArea,
    String addressDetail,
    String itemName,
    String purpose,
    String regDt,
    double regPrice,
    double assessValue,
    double mortgageValue,
    double mortgageRate,
    double fairValue,
    String fairValueGetMethod,
    String saveDttm,
    String saveRemark,
    String regNumber,
    String extRequestReason,
    String extDttm,
    String extRemark,
    String removeDttm,
    String removeRemark,
    int status,
    String remark,
    String projectName,
    String projectNumber,
    double beginMoney,
    double endMoney,
    String operator,
    String operatorText,
    String regOrgName,
    String transactExplain,
    String dataObject,
    String processDt,
    String processRemark,
    String owns,
    String ownNameText,
    int page,
    int rows,
    String content,
    String constructionArea,
    int pmUserId,
    String proposerText,
    int proposer)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.mortgageGuaranteeType = mortgageGuaranteeType;
    setMortgageGuaranteeTypeIsSet(true);
    this.mortgageGuaranteeTypeText = mortgageGuaranteeTypeText;
    this.mortgageType = mortgageType;
    setMortgageTypeIsSet(true);
    this.mortgageTypeText = mortgageTypeText;
    this.ownType = ownType;
    setOwnTypeIsSet(true);
    this.ownTypeText = ownTypeText;
    this.ownName = ownName;
    setOwnNameIsSet(true);
    this.warrantsNumber = warrantsNumber;
    this.addressProvince = addressProvince;
    this.addressCity = addressCity;
    this.addressArea = addressArea;
    this.addressDetail = addressDetail;
    this.itemName = itemName;
    this.purpose = purpose;
    this.regDt = regDt;
    this.regPrice = regPrice;
    setRegPriceIsSet(true);
    this.assessValue = assessValue;
    setAssessValueIsSet(true);
    this.mortgageValue = mortgageValue;
    setMortgageValueIsSet(true);
    this.mortgageRate = mortgageRate;
    setMortgageRateIsSet(true);
    this.fairValue = fairValue;
    setFairValueIsSet(true);
    this.fairValueGetMethod = fairValueGetMethod;
    this.saveDttm = saveDttm;
    this.saveRemark = saveRemark;
    this.regNumber = regNumber;
    this.extRequestReason = extRequestReason;
    this.extDttm = extDttm;
    this.extRemark = extRemark;
    this.removeDttm = removeDttm;
    this.removeRemark = removeRemark;
    this.status = status;
    setStatusIsSet(true);
    this.remark = remark;
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.beginMoney = beginMoney;
    setBeginMoneyIsSet(true);
    this.endMoney = endMoney;
    setEndMoneyIsSet(true);
    this.operator = operator;
    this.operatorText = operatorText;
    this.regOrgName = regOrgName;
    this.transactExplain = transactExplain;
    this.dataObject = dataObject;
    this.processDt = processDt;
    this.processRemark = processRemark;
    this.owns = owns;
    this.ownNameText = ownNameText;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.content = content;
    this.constructionArea = constructionArea;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.proposerText = proposerText;
    this.proposer = proposer;
    setProposerIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectAssBase(ProjectAssBase other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.mortgageGuaranteeType = other.mortgageGuaranteeType;
    if (other.isSetMortgageGuaranteeTypeText()) {
      this.mortgageGuaranteeTypeText = other.mortgageGuaranteeTypeText;
    }
    this.mortgageType = other.mortgageType;
    if (other.isSetMortgageTypeText()) {
      this.mortgageTypeText = other.mortgageTypeText;
    }
    this.ownType = other.ownType;
    if (other.isSetOwnTypeText()) {
      this.ownTypeText = other.ownTypeText;
    }
    this.ownName = other.ownName;
    if (other.isSetWarrantsNumber()) {
      this.warrantsNumber = other.warrantsNumber;
    }
    if (other.isSetAddressProvince()) {
      this.addressProvince = other.addressProvince;
    }
    if (other.isSetAddressCity()) {
      this.addressCity = other.addressCity;
    }
    if (other.isSetAddressArea()) {
      this.addressArea = other.addressArea;
    }
    if (other.isSetAddressDetail()) {
      this.addressDetail = other.addressDetail;
    }
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    if (other.isSetPurpose()) {
      this.purpose = other.purpose;
    }
    if (other.isSetRegDt()) {
      this.regDt = other.regDt;
    }
    this.regPrice = other.regPrice;
    this.assessValue = other.assessValue;
    this.mortgageValue = other.mortgageValue;
    this.mortgageRate = other.mortgageRate;
    this.fairValue = other.fairValue;
    if (other.isSetFairValueGetMethod()) {
      this.fairValueGetMethod = other.fairValueGetMethod;
    }
    if (other.isSetSaveDttm()) {
      this.saveDttm = other.saveDttm;
    }
    if (other.isSetSaveRemark()) {
      this.saveRemark = other.saveRemark;
    }
    if (other.isSetRegNumber()) {
      this.regNumber = other.regNumber;
    }
    if (other.isSetExtRequestReason()) {
      this.extRequestReason = other.extRequestReason;
    }
    if (other.isSetExtDttm()) {
      this.extDttm = other.extDttm;
    }
    if (other.isSetExtRemark()) {
      this.extRemark = other.extRemark;
    }
    if (other.isSetRemoveDttm()) {
      this.removeDttm = other.removeDttm;
    }
    if (other.isSetRemoveRemark()) {
      this.removeRemark = other.removeRemark;
    }
    this.status = other.status;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.beginMoney = other.beginMoney;
    this.endMoney = other.endMoney;
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    if (other.isSetOperatorText()) {
      this.operatorText = other.operatorText;
    }
    if (other.isSetRegOrgName()) {
      this.regOrgName = other.regOrgName;
    }
    if (other.isSetTransactExplain()) {
      this.transactExplain = other.transactExplain;
    }
    if (other.isSetDataObject()) {
      this.dataObject = other.dataObject;
    }
    if (other.isSetProcessDt()) {
      this.processDt = other.processDt;
    }
    if (other.isSetProcessRemark()) {
      this.processRemark = other.processRemark;
    }
    if (other.isSetOwns()) {
      this.owns = other.owns;
    }
    if (other.isSetOwnNameText()) {
      this.ownNameText = other.ownNameText;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetConstructionArea()) {
      this.constructionArea = other.constructionArea;
    }
    this.pmUserId = other.pmUserId;
    if (other.isSetProposerText()) {
      this.proposerText = other.proposerText;
    }
    this.proposer = other.proposer;
  }

  public ProjectAssBase deepCopy() {
    return new ProjectAssBase(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setMortgageGuaranteeTypeIsSet(false);
    this.mortgageGuaranteeType = 0;
    this.mortgageGuaranteeTypeText = null;
    setMortgageTypeIsSet(false);
    this.mortgageType = 0;
    this.mortgageTypeText = null;
    setOwnTypeIsSet(false);
    this.ownType = 0;
    this.ownTypeText = null;
    setOwnNameIsSet(false);
    this.ownName = 0;
    this.warrantsNumber = null;
    this.addressProvince = null;
    this.addressCity = null;
    this.addressArea = null;
    this.addressDetail = null;
    this.itemName = null;
    this.purpose = null;
    this.regDt = null;
    setRegPriceIsSet(false);
    this.regPrice = 0.0;
    setAssessValueIsSet(false);
    this.assessValue = 0.0;
    setMortgageValueIsSet(false);
    this.mortgageValue = 0.0;
    setMortgageRateIsSet(false);
    this.mortgageRate = 0.0;
    setFairValueIsSet(false);
    this.fairValue = 0.0;
    this.fairValueGetMethod = null;
    this.saveDttm = null;
    this.saveRemark = null;
    this.regNumber = null;
    this.extRequestReason = null;
    this.extDttm = null;
    this.extRemark = null;
    this.removeDttm = null;
    this.removeRemark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.remark = null;
    this.projectName = null;
    this.projectNumber = null;
    setBeginMoneyIsSet(false);
    this.beginMoney = 0.0;
    setEndMoneyIsSet(false);
    this.endMoney = 0.0;
    this.operator = null;
    this.operatorText = null;
    this.regOrgName = null;
    this.transactExplain = null;
    this.dataObject = null;
    this.processDt = null;
    this.processRemark = null;
    this.owns = null;
    this.ownNameText = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.content = null;
    this.constructionArea = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.proposerText = null;
    setProposerIsSet(false);
    this.proposer = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectAssBase setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectAssBase setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getMortgageGuaranteeType() {
    return this.mortgageGuaranteeType;
  }

  public ProjectAssBase setMortgageGuaranteeType(int mortgageGuaranteeType) {
    this.mortgageGuaranteeType = mortgageGuaranteeType;
    setMortgageGuaranteeTypeIsSet(true);
    return this;
  }

  public void unsetMortgageGuaranteeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGEGUARANTEETYPE_ISSET_ID);
  }

  /** Returns true if field mortgageGuaranteeType is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageGuaranteeType() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGEGUARANTEETYPE_ISSET_ID);
  }

  public void setMortgageGuaranteeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGEGUARANTEETYPE_ISSET_ID, value);
  }

  public String getMortgageGuaranteeTypeText() {
    return this.mortgageGuaranteeTypeText;
  }

  public ProjectAssBase setMortgageGuaranteeTypeText(String mortgageGuaranteeTypeText) {
    this.mortgageGuaranteeTypeText = mortgageGuaranteeTypeText;
    return this;
  }

  public void unsetMortgageGuaranteeTypeText() {
    this.mortgageGuaranteeTypeText = null;
  }

  /** Returns true if field mortgageGuaranteeTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageGuaranteeTypeText() {
    return this.mortgageGuaranteeTypeText != null;
  }

  public void setMortgageGuaranteeTypeTextIsSet(boolean value) {
    if (!value) {
      this.mortgageGuaranteeTypeText = null;
    }
  }

  public int getMortgageType() {
    return this.mortgageType;
  }

  public ProjectAssBase setMortgageType(int mortgageType) {
    this.mortgageType = mortgageType;
    setMortgageTypeIsSet(true);
    return this;
  }

  public void unsetMortgageType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGETYPE_ISSET_ID);
  }

  /** Returns true if field mortgageType is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageType() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGETYPE_ISSET_ID);
  }

  public void setMortgageTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGETYPE_ISSET_ID, value);
  }

  public String getMortgageTypeText() {
    return this.mortgageTypeText;
  }

  public ProjectAssBase setMortgageTypeText(String mortgageTypeText) {
    this.mortgageTypeText = mortgageTypeText;
    return this;
  }

  public void unsetMortgageTypeText() {
    this.mortgageTypeText = null;
  }

  /** Returns true if field mortgageTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageTypeText() {
    return this.mortgageTypeText != null;
  }

  public void setMortgageTypeTextIsSet(boolean value) {
    if (!value) {
      this.mortgageTypeText = null;
    }
  }

  public int getOwnType() {
    return this.ownType;
  }

  public ProjectAssBase setOwnType(int ownType) {
    this.ownType = ownType;
    setOwnTypeIsSet(true);
    return this;
  }

  public void unsetOwnType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWNTYPE_ISSET_ID);
  }

  /** Returns true if field ownType is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnType() {
    return EncodingUtils.testBit(__isset_bitfield, __OWNTYPE_ISSET_ID);
  }

  public void setOwnTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWNTYPE_ISSET_ID, value);
  }

  public String getOwnTypeText() {
    return this.ownTypeText;
  }

  public ProjectAssBase setOwnTypeText(String ownTypeText) {
    this.ownTypeText = ownTypeText;
    return this;
  }

  public void unsetOwnTypeText() {
    this.ownTypeText = null;
  }

  /** Returns true if field ownTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnTypeText() {
    return this.ownTypeText != null;
  }

  public void setOwnTypeTextIsSet(boolean value) {
    if (!value) {
      this.ownTypeText = null;
    }
  }

  public int getOwnName() {
    return this.ownName;
  }

  public ProjectAssBase setOwnName(int ownName) {
    this.ownName = ownName;
    setOwnNameIsSet(true);
    return this;
  }

  public void unsetOwnName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWNNAME_ISSET_ID);
  }

  /** Returns true if field ownName is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnName() {
    return EncodingUtils.testBit(__isset_bitfield, __OWNNAME_ISSET_ID);
  }

  public void setOwnNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWNNAME_ISSET_ID, value);
  }

  public String getWarrantsNumber() {
    return this.warrantsNumber;
  }

  public ProjectAssBase setWarrantsNumber(String warrantsNumber) {
    this.warrantsNumber = warrantsNumber;
    return this;
  }

  public void unsetWarrantsNumber() {
    this.warrantsNumber = null;
  }

  /** Returns true if field warrantsNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetWarrantsNumber() {
    return this.warrantsNumber != null;
  }

  public void setWarrantsNumberIsSet(boolean value) {
    if (!value) {
      this.warrantsNumber = null;
    }
  }

  public String getAddressProvince() {
    return this.addressProvince;
  }

  public ProjectAssBase setAddressProvince(String addressProvince) {
    this.addressProvince = addressProvince;
    return this;
  }

  public void unsetAddressProvince() {
    this.addressProvince = null;
  }

  /** Returns true if field addressProvince is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressProvince() {
    return this.addressProvince != null;
  }

  public void setAddressProvinceIsSet(boolean value) {
    if (!value) {
      this.addressProvince = null;
    }
  }

  public String getAddressCity() {
    return this.addressCity;
  }

  public ProjectAssBase setAddressCity(String addressCity) {
    this.addressCity = addressCity;
    return this;
  }

  public void unsetAddressCity() {
    this.addressCity = null;
  }

  /** Returns true if field addressCity is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressCity() {
    return this.addressCity != null;
  }

  public void setAddressCityIsSet(boolean value) {
    if (!value) {
      this.addressCity = null;
    }
  }

  public String getAddressArea() {
    return this.addressArea;
  }

  public ProjectAssBase setAddressArea(String addressArea) {
    this.addressArea = addressArea;
    return this;
  }

  public void unsetAddressArea() {
    this.addressArea = null;
  }

  /** Returns true if field addressArea is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressArea() {
    return this.addressArea != null;
  }

  public void setAddressAreaIsSet(boolean value) {
    if (!value) {
      this.addressArea = null;
    }
  }

  public String getAddressDetail() {
    return this.addressDetail;
  }

  public ProjectAssBase setAddressDetail(String addressDetail) {
    this.addressDetail = addressDetail;
    return this;
  }

  public void unsetAddressDetail() {
    this.addressDetail = null;
  }

  /** Returns true if field addressDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressDetail() {
    return this.addressDetail != null;
  }

  public void setAddressDetailIsSet(boolean value) {
    if (!value) {
      this.addressDetail = null;
    }
  }

  public String getItemName() {
    return this.itemName;
  }

  public ProjectAssBase setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public String getPurpose() {
    return this.purpose;
  }

  public ProjectAssBase setPurpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

  public void unsetPurpose() {
    this.purpose = null;
  }

  /** Returns true if field purpose is set (has been assigned a value) and false otherwise */
  public boolean isSetPurpose() {
    return this.purpose != null;
  }

  public void setPurposeIsSet(boolean value) {
    if (!value) {
      this.purpose = null;
    }
  }

  public String getRegDt() {
    return this.regDt;
  }

  public ProjectAssBase setRegDt(String regDt) {
    this.regDt = regDt;
    return this;
  }

  public void unsetRegDt() {
    this.regDt = null;
  }

  /** Returns true if field regDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRegDt() {
    return this.regDt != null;
  }

  public void setRegDtIsSet(boolean value) {
    if (!value) {
      this.regDt = null;
    }
  }

  public double getRegPrice() {
    return this.regPrice;
  }

  public ProjectAssBase setRegPrice(double regPrice) {
    this.regPrice = regPrice;
    setRegPriceIsSet(true);
    return this;
  }

  public void unsetRegPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGPRICE_ISSET_ID);
  }

  /** Returns true if field regPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRegPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __REGPRICE_ISSET_ID);
  }

  public void setRegPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGPRICE_ISSET_ID, value);
  }

  public double getAssessValue() {
    return this.assessValue;
  }

  public ProjectAssBase setAssessValue(double assessValue) {
    this.assessValue = assessValue;
    setAssessValueIsSet(true);
    return this;
  }

  public void unsetAssessValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSESSVALUE_ISSET_ID);
  }

  /** Returns true if field assessValue is set (has been assigned a value) and false otherwise */
  public boolean isSetAssessValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSESSVALUE_ISSET_ID);
  }

  public void setAssessValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSESSVALUE_ISSET_ID, value);
  }

  public double getMortgageValue() {
    return this.mortgageValue;
  }

  public ProjectAssBase setMortgageValue(double mortgageValue) {
    this.mortgageValue = mortgageValue;
    setMortgageValueIsSet(true);
    return this;
  }

  public void unsetMortgageValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGEVALUE_ISSET_ID);
  }

  /** Returns true if field mortgageValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageValue() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGEVALUE_ISSET_ID);
  }

  public void setMortgageValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGEVALUE_ISSET_ID, value);
  }

  public double getMortgageRate() {
    return this.mortgageRate;
  }

  public ProjectAssBase setMortgageRate(double mortgageRate) {
    this.mortgageRate = mortgageRate;
    setMortgageRateIsSet(true);
    return this;
  }

  public void unsetMortgageRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID);
  }

  /** Returns true if field mortgageRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID);
  }

  public void setMortgageRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGERATE_ISSET_ID, value);
  }

  public double getFairValue() {
    return this.fairValue;
  }

  public ProjectAssBase setFairValue(double fairValue) {
    this.fairValue = fairValue;
    setFairValueIsSet(true);
    return this;
  }

  public void unsetFairValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAIRVALUE_ISSET_ID);
  }

  /** Returns true if field fairValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFairValue() {
    return EncodingUtils.testBit(__isset_bitfield, __FAIRVALUE_ISSET_ID);
  }

  public void setFairValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAIRVALUE_ISSET_ID, value);
  }

  public String getFairValueGetMethod() {
    return this.fairValueGetMethod;
  }

  public ProjectAssBase setFairValueGetMethod(String fairValueGetMethod) {
    this.fairValueGetMethod = fairValueGetMethod;
    return this;
  }

  public void unsetFairValueGetMethod() {
    this.fairValueGetMethod = null;
  }

  /** Returns true if field fairValueGetMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetFairValueGetMethod() {
    return this.fairValueGetMethod != null;
  }

  public void setFairValueGetMethodIsSet(boolean value) {
    if (!value) {
      this.fairValueGetMethod = null;
    }
  }

  public String getSaveDttm() {
    return this.saveDttm;
  }

  public ProjectAssBase setSaveDttm(String saveDttm) {
    this.saveDttm = saveDttm;
    return this;
  }

  public void unsetSaveDttm() {
    this.saveDttm = null;
  }

  /** Returns true if field saveDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveDttm() {
    return this.saveDttm != null;
  }

  public void setSaveDttmIsSet(boolean value) {
    if (!value) {
      this.saveDttm = null;
    }
  }

  public String getSaveRemark() {
    return this.saveRemark;
  }

  public ProjectAssBase setSaveRemark(String saveRemark) {
    this.saveRemark = saveRemark;
    return this;
  }

  public void unsetSaveRemark() {
    this.saveRemark = null;
  }

  /** Returns true if field saveRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveRemark() {
    return this.saveRemark != null;
  }

  public void setSaveRemarkIsSet(boolean value) {
    if (!value) {
      this.saveRemark = null;
    }
  }

  public String getRegNumber() {
    return this.regNumber;
  }

  public ProjectAssBase setRegNumber(String regNumber) {
    this.regNumber = regNumber;
    return this;
  }

  public void unsetRegNumber() {
    this.regNumber = null;
  }

  /** Returns true if field regNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRegNumber() {
    return this.regNumber != null;
  }

  public void setRegNumberIsSet(boolean value) {
    if (!value) {
      this.regNumber = null;
    }
  }

  public String getExtRequestReason() {
    return this.extRequestReason;
  }

  public ProjectAssBase setExtRequestReason(String extRequestReason) {
    this.extRequestReason = extRequestReason;
    return this;
  }

  public void unsetExtRequestReason() {
    this.extRequestReason = null;
  }

  /** Returns true if field extRequestReason is set (has been assigned a value) and false otherwise */
  public boolean isSetExtRequestReason() {
    return this.extRequestReason != null;
  }

  public void setExtRequestReasonIsSet(boolean value) {
    if (!value) {
      this.extRequestReason = null;
    }
  }

  public String getExtDttm() {
    return this.extDttm;
  }

  public ProjectAssBase setExtDttm(String extDttm) {
    this.extDttm = extDttm;
    return this;
  }

  public void unsetExtDttm() {
    this.extDttm = null;
  }

  /** Returns true if field extDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetExtDttm() {
    return this.extDttm != null;
  }

  public void setExtDttmIsSet(boolean value) {
    if (!value) {
      this.extDttm = null;
    }
  }

  public String getExtRemark() {
    return this.extRemark;
  }

  public ProjectAssBase setExtRemark(String extRemark) {
    this.extRemark = extRemark;
    return this;
  }

  public void unsetExtRemark() {
    this.extRemark = null;
  }

  /** Returns true if field extRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetExtRemark() {
    return this.extRemark != null;
  }

  public void setExtRemarkIsSet(boolean value) {
    if (!value) {
      this.extRemark = null;
    }
  }

  public String getRemoveDttm() {
    return this.removeDttm;
  }

  public ProjectAssBase setRemoveDttm(String removeDttm) {
    this.removeDttm = removeDttm;
    return this;
  }

  public void unsetRemoveDttm() {
    this.removeDttm = null;
  }

  /** Returns true if field removeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoveDttm() {
    return this.removeDttm != null;
  }

  public void setRemoveDttmIsSet(boolean value) {
    if (!value) {
      this.removeDttm = null;
    }
  }

  public String getRemoveRemark() {
    return this.removeRemark;
  }

  public ProjectAssBase setRemoveRemark(String removeRemark) {
    this.removeRemark = removeRemark;
    return this;
  }

  public void unsetRemoveRemark() {
    this.removeRemark = null;
  }

  /** Returns true if field removeRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoveRemark() {
    return this.removeRemark != null;
  }

  public void setRemoveRemarkIsSet(boolean value) {
    if (!value) {
      this.removeRemark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectAssBase setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public ProjectAssBase setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ProjectAssBase setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ProjectAssBase setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public double getBeginMoney() {
    return this.beginMoney;
  }

  public ProjectAssBase setBeginMoney(double beginMoney) {
    this.beginMoney = beginMoney;
    setBeginMoneyIsSet(true);
    return this;
  }

  public void unsetBeginMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINMONEY_ISSET_ID);
  }

  /** Returns true if field beginMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINMONEY_ISSET_ID);
  }

  public void setBeginMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINMONEY_ISSET_ID, value);
  }

  public double getEndMoney() {
    return this.endMoney;
  }

  public ProjectAssBase setEndMoney(double endMoney) {
    this.endMoney = endMoney;
    setEndMoneyIsSet(true);
    return this;
  }

  public void unsetEndMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDMONEY_ISSET_ID);
  }

  /** Returns true if field endMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetEndMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDMONEY_ISSET_ID);
  }

  public void setEndMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDMONEY_ISSET_ID, value);
  }

  public String getOperator() {
    return this.operator;
  }

  public ProjectAssBase setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public String getOperatorText() {
    return this.operatorText;
  }

  public ProjectAssBase setOperatorText(String operatorText) {
    this.operatorText = operatorText;
    return this;
  }

  public void unsetOperatorText() {
    this.operatorText = null;
  }

  /** Returns true if field operatorText is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorText() {
    return this.operatorText != null;
  }

  public void setOperatorTextIsSet(boolean value) {
    if (!value) {
      this.operatorText = null;
    }
  }

  public String getRegOrgName() {
    return this.regOrgName;
  }

  public ProjectAssBase setRegOrgName(String regOrgName) {
    this.regOrgName = regOrgName;
    return this;
  }

  public void unsetRegOrgName() {
    this.regOrgName = null;
  }

  /** Returns true if field regOrgName is set (has been assigned a value) and false otherwise */
  public boolean isSetRegOrgName() {
    return this.regOrgName != null;
  }

  public void setRegOrgNameIsSet(boolean value) {
    if (!value) {
      this.regOrgName = null;
    }
  }

  public String getTransactExplain() {
    return this.transactExplain;
  }

  public ProjectAssBase setTransactExplain(String transactExplain) {
    this.transactExplain = transactExplain;
    return this;
  }

  public void unsetTransactExplain() {
    this.transactExplain = null;
  }

  /** Returns true if field transactExplain is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactExplain() {
    return this.transactExplain != null;
  }

  public void setTransactExplainIsSet(boolean value) {
    if (!value) {
      this.transactExplain = null;
    }
  }

  public String getDataObject() {
    return this.dataObject;
  }

  public ProjectAssBase setDataObject(String dataObject) {
    this.dataObject = dataObject;
    return this;
  }

  public void unsetDataObject() {
    this.dataObject = null;
  }

  /** Returns true if field dataObject is set (has been assigned a value) and false otherwise */
  public boolean isSetDataObject() {
    return this.dataObject != null;
  }

  public void setDataObjectIsSet(boolean value) {
    if (!value) {
      this.dataObject = null;
    }
  }

  public String getProcessDt() {
    return this.processDt;
  }

  public ProjectAssBase setProcessDt(String processDt) {
    this.processDt = processDt;
    return this;
  }

  public void unsetProcessDt() {
    this.processDt = null;
  }

  /** Returns true if field processDt is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessDt() {
    return this.processDt != null;
  }

  public void setProcessDtIsSet(boolean value) {
    if (!value) {
      this.processDt = null;
    }
  }

  public String getProcessRemark() {
    return this.processRemark;
  }

  public ProjectAssBase setProcessRemark(String processRemark) {
    this.processRemark = processRemark;
    return this;
  }

  public void unsetProcessRemark() {
    this.processRemark = null;
  }

  /** Returns true if field processRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessRemark() {
    return this.processRemark != null;
  }

  public void setProcessRemarkIsSet(boolean value) {
    if (!value) {
      this.processRemark = null;
    }
  }

  public String getOwns() {
    return this.owns;
  }

  public ProjectAssBase setOwns(String owns) {
    this.owns = owns;
    return this;
  }

  public void unsetOwns() {
    this.owns = null;
  }

  /** Returns true if field owns is set (has been assigned a value) and false otherwise */
  public boolean isSetOwns() {
    return this.owns != null;
  }

  public void setOwnsIsSet(boolean value) {
    if (!value) {
      this.owns = null;
    }
  }

  public String getOwnNameText() {
    return this.ownNameText;
  }

  public ProjectAssBase setOwnNameText(String ownNameText) {
    this.ownNameText = ownNameText;
    return this;
  }

  public void unsetOwnNameText() {
    this.ownNameText = null;
  }

  /** Returns true if field ownNameText is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnNameText() {
    return this.ownNameText != null;
  }

  public void setOwnNameTextIsSet(boolean value) {
    if (!value) {
      this.ownNameText = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ProjectAssBase setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ProjectAssBase setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public ProjectAssBase setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getConstructionArea() {
    return this.constructionArea;
  }

  public ProjectAssBase setConstructionArea(String constructionArea) {
    this.constructionArea = constructionArea;
    return this;
  }

  public void unsetConstructionArea() {
    this.constructionArea = null;
  }

  /** Returns true if field constructionArea is set (has been assigned a value) and false otherwise */
  public boolean isSetConstructionArea() {
    return this.constructionArea != null;
  }

  public void setConstructionAreaIsSet(boolean value) {
    if (!value) {
      this.constructionArea = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public ProjectAssBase setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public String getProposerText() {
    return this.proposerText;
  }

  public ProjectAssBase setProposerText(String proposerText) {
    this.proposerText = proposerText;
    return this;
  }

  public void unsetProposerText() {
    this.proposerText = null;
  }

  /** Returns true if field proposerText is set (has been assigned a value) and false otherwise */
  public boolean isSetProposerText() {
    return this.proposerText != null;
  }

  public void setProposerTextIsSet(boolean value) {
    if (!value) {
      this.proposerText = null;
    }
  }

  public int getProposer() {
    return this.proposer;
  }

  public ProjectAssBase setProposer(int proposer) {
    this.proposer = proposer;
    setProposerIsSet(true);
    return this;
  }

  public void unsetProposer() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPOSER_ISSET_ID);
  }

  /** Returns true if field proposer is set (has been assigned a value) and false otherwise */
  public boolean isSetProposer() {
    return EncodingUtils.testBit(__isset_bitfield, __PROPOSER_ISSET_ID);
  }

  public void setProposerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPOSER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case MORTGAGE_GUARANTEE_TYPE:
      if (value == null) {
        unsetMortgageGuaranteeType();
      } else {
        setMortgageGuaranteeType((Integer)value);
      }
      break;

    case MORTGAGE_GUARANTEE_TYPE_TEXT:
      if (value == null) {
        unsetMortgageGuaranteeTypeText();
      } else {
        setMortgageGuaranteeTypeText((String)value);
      }
      break;

    case MORTGAGE_TYPE:
      if (value == null) {
        unsetMortgageType();
      } else {
        setMortgageType((Integer)value);
      }
      break;

    case MORTGAGE_TYPE_TEXT:
      if (value == null) {
        unsetMortgageTypeText();
      } else {
        setMortgageTypeText((String)value);
      }
      break;

    case OWN_TYPE:
      if (value == null) {
        unsetOwnType();
      } else {
        setOwnType((Integer)value);
      }
      break;

    case OWN_TYPE_TEXT:
      if (value == null) {
        unsetOwnTypeText();
      } else {
        setOwnTypeText((String)value);
      }
      break;

    case OWN_NAME:
      if (value == null) {
        unsetOwnName();
      } else {
        setOwnName((Integer)value);
      }
      break;

    case WARRANTS_NUMBER:
      if (value == null) {
        unsetWarrantsNumber();
      } else {
        setWarrantsNumber((String)value);
      }
      break;

    case ADDRESS_PROVINCE:
      if (value == null) {
        unsetAddressProvince();
      } else {
        setAddressProvince((String)value);
      }
      break;

    case ADDRESS_CITY:
      if (value == null) {
        unsetAddressCity();
      } else {
        setAddressCity((String)value);
      }
      break;

    case ADDRESS_AREA:
      if (value == null) {
        unsetAddressArea();
      } else {
        setAddressArea((String)value);
      }
      break;

    case ADDRESS_DETAIL:
      if (value == null) {
        unsetAddressDetail();
      } else {
        setAddressDetail((String)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case PURPOSE:
      if (value == null) {
        unsetPurpose();
      } else {
        setPurpose((String)value);
      }
      break;

    case REG_DT:
      if (value == null) {
        unsetRegDt();
      } else {
        setRegDt((String)value);
      }
      break;

    case REG_PRICE:
      if (value == null) {
        unsetRegPrice();
      } else {
        setRegPrice((Double)value);
      }
      break;

    case ASSESS_VALUE:
      if (value == null) {
        unsetAssessValue();
      } else {
        setAssessValue((Double)value);
      }
      break;

    case MORTGAGE_VALUE:
      if (value == null) {
        unsetMortgageValue();
      } else {
        setMortgageValue((Double)value);
      }
      break;

    case MORTGAGE_RATE:
      if (value == null) {
        unsetMortgageRate();
      } else {
        setMortgageRate((Double)value);
      }
      break;

    case FAIR_VALUE:
      if (value == null) {
        unsetFairValue();
      } else {
        setFairValue((Double)value);
      }
      break;

    case FAIR_VALUE_GET_METHOD:
      if (value == null) {
        unsetFairValueGetMethod();
      } else {
        setFairValueGetMethod((String)value);
      }
      break;

    case SAVE_DTTM:
      if (value == null) {
        unsetSaveDttm();
      } else {
        setSaveDttm((String)value);
      }
      break;

    case SAVE_REMARK:
      if (value == null) {
        unsetSaveRemark();
      } else {
        setSaveRemark((String)value);
      }
      break;

    case REG_NUMBER:
      if (value == null) {
        unsetRegNumber();
      } else {
        setRegNumber((String)value);
      }
      break;

    case EXT_REQUEST_REASON:
      if (value == null) {
        unsetExtRequestReason();
      } else {
        setExtRequestReason((String)value);
      }
      break;

    case EXT_DTTM:
      if (value == null) {
        unsetExtDttm();
      } else {
        setExtDttm((String)value);
      }
      break;

    case EXT_REMARK:
      if (value == null) {
        unsetExtRemark();
      } else {
        setExtRemark((String)value);
      }
      break;

    case REMOVE_DTTM:
      if (value == null) {
        unsetRemoveDttm();
      } else {
        setRemoveDttm((String)value);
      }
      break;

    case REMOVE_REMARK:
      if (value == null) {
        unsetRemoveRemark();
      } else {
        setRemoveRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case BEGIN_MONEY:
      if (value == null) {
        unsetBeginMoney();
      } else {
        setBeginMoney((Double)value);
      }
      break;

    case END_MONEY:
      if (value == null) {
        unsetEndMoney();
      } else {
        setEndMoney((Double)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    case OPERATOR_TEXT:
      if (value == null) {
        unsetOperatorText();
      } else {
        setOperatorText((String)value);
      }
      break;

    case REG_ORG_NAME:
      if (value == null) {
        unsetRegOrgName();
      } else {
        setRegOrgName((String)value);
      }
      break;

    case TRANSACT_EXPLAIN:
      if (value == null) {
        unsetTransactExplain();
      } else {
        setTransactExplain((String)value);
      }
      break;

    case DATA_OBJECT:
      if (value == null) {
        unsetDataObject();
      } else {
        setDataObject((String)value);
      }
      break;

    case PROCESS_DT:
      if (value == null) {
        unsetProcessDt();
      } else {
        setProcessDt((String)value);
      }
      break;

    case PROCESS_REMARK:
      if (value == null) {
        unsetProcessRemark();
      } else {
        setProcessRemark((String)value);
      }
      break;

    case OWNS:
      if (value == null) {
        unsetOwns();
      } else {
        setOwns((String)value);
      }
      break;

    case OWN_NAME_TEXT:
      if (value == null) {
        unsetOwnNameText();
      } else {
        setOwnNameText((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case CONSTRUCTION_AREA:
      if (value == null) {
        unsetConstructionArea();
      } else {
        setConstructionArea((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case PROPOSER_TEXT:
      if (value == null) {
        unsetProposerText();
      } else {
        setProposerText((String)value);
      }
      break;

    case PROPOSER:
      if (value == null) {
        unsetProposer();
      } else {
        setProposer((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case MORTGAGE_GUARANTEE_TYPE:
      return Integer.valueOf(getMortgageGuaranteeType());

    case MORTGAGE_GUARANTEE_TYPE_TEXT:
      return getMortgageGuaranteeTypeText();

    case MORTGAGE_TYPE:
      return Integer.valueOf(getMortgageType());

    case MORTGAGE_TYPE_TEXT:
      return getMortgageTypeText();

    case OWN_TYPE:
      return Integer.valueOf(getOwnType());

    case OWN_TYPE_TEXT:
      return getOwnTypeText();

    case OWN_NAME:
      return Integer.valueOf(getOwnName());

    case WARRANTS_NUMBER:
      return getWarrantsNumber();

    case ADDRESS_PROVINCE:
      return getAddressProvince();

    case ADDRESS_CITY:
      return getAddressCity();

    case ADDRESS_AREA:
      return getAddressArea();

    case ADDRESS_DETAIL:
      return getAddressDetail();

    case ITEM_NAME:
      return getItemName();

    case PURPOSE:
      return getPurpose();

    case REG_DT:
      return getRegDt();

    case REG_PRICE:
      return Double.valueOf(getRegPrice());

    case ASSESS_VALUE:
      return Double.valueOf(getAssessValue());

    case MORTGAGE_VALUE:
      return Double.valueOf(getMortgageValue());

    case MORTGAGE_RATE:
      return Double.valueOf(getMortgageRate());

    case FAIR_VALUE:
      return Double.valueOf(getFairValue());

    case FAIR_VALUE_GET_METHOD:
      return getFairValueGetMethod();

    case SAVE_DTTM:
      return getSaveDttm();

    case SAVE_REMARK:
      return getSaveRemark();

    case REG_NUMBER:
      return getRegNumber();

    case EXT_REQUEST_REASON:
      return getExtRequestReason();

    case EXT_DTTM:
      return getExtDttm();

    case EXT_REMARK:
      return getExtRemark();

    case REMOVE_DTTM:
      return getRemoveDttm();

    case REMOVE_REMARK:
      return getRemoveRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case REMARK:
      return getRemark();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case BEGIN_MONEY:
      return Double.valueOf(getBeginMoney());

    case END_MONEY:
      return Double.valueOf(getEndMoney());

    case OPERATOR:
      return getOperator();

    case OPERATOR_TEXT:
      return getOperatorText();

    case REG_ORG_NAME:
      return getRegOrgName();

    case TRANSACT_EXPLAIN:
      return getTransactExplain();

    case DATA_OBJECT:
      return getDataObject();

    case PROCESS_DT:
      return getProcessDt();

    case PROCESS_REMARK:
      return getProcessRemark();

    case OWNS:
      return getOwns();

    case OWN_NAME_TEXT:
      return getOwnNameText();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CONTENT:
      return getContent();

    case CONSTRUCTION_AREA:
      return getConstructionArea();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case PROPOSER_TEXT:
      return getProposerText();

    case PROPOSER:
      return Integer.valueOf(getProposer());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case MORTGAGE_GUARANTEE_TYPE:
      return isSetMortgageGuaranteeType();
    case MORTGAGE_GUARANTEE_TYPE_TEXT:
      return isSetMortgageGuaranteeTypeText();
    case MORTGAGE_TYPE:
      return isSetMortgageType();
    case MORTGAGE_TYPE_TEXT:
      return isSetMortgageTypeText();
    case OWN_TYPE:
      return isSetOwnType();
    case OWN_TYPE_TEXT:
      return isSetOwnTypeText();
    case OWN_NAME:
      return isSetOwnName();
    case WARRANTS_NUMBER:
      return isSetWarrantsNumber();
    case ADDRESS_PROVINCE:
      return isSetAddressProvince();
    case ADDRESS_CITY:
      return isSetAddressCity();
    case ADDRESS_AREA:
      return isSetAddressArea();
    case ADDRESS_DETAIL:
      return isSetAddressDetail();
    case ITEM_NAME:
      return isSetItemName();
    case PURPOSE:
      return isSetPurpose();
    case REG_DT:
      return isSetRegDt();
    case REG_PRICE:
      return isSetRegPrice();
    case ASSESS_VALUE:
      return isSetAssessValue();
    case MORTGAGE_VALUE:
      return isSetMortgageValue();
    case MORTGAGE_RATE:
      return isSetMortgageRate();
    case FAIR_VALUE:
      return isSetFairValue();
    case FAIR_VALUE_GET_METHOD:
      return isSetFairValueGetMethod();
    case SAVE_DTTM:
      return isSetSaveDttm();
    case SAVE_REMARK:
      return isSetSaveRemark();
    case REG_NUMBER:
      return isSetRegNumber();
    case EXT_REQUEST_REASON:
      return isSetExtRequestReason();
    case EXT_DTTM:
      return isSetExtDttm();
    case EXT_REMARK:
      return isSetExtRemark();
    case REMOVE_DTTM:
      return isSetRemoveDttm();
    case REMOVE_REMARK:
      return isSetRemoveRemark();
    case STATUS:
      return isSetStatus();
    case REMARK:
      return isSetRemark();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case BEGIN_MONEY:
      return isSetBeginMoney();
    case END_MONEY:
      return isSetEndMoney();
    case OPERATOR:
      return isSetOperator();
    case OPERATOR_TEXT:
      return isSetOperatorText();
    case REG_ORG_NAME:
      return isSetRegOrgName();
    case TRANSACT_EXPLAIN:
      return isSetTransactExplain();
    case DATA_OBJECT:
      return isSetDataObject();
    case PROCESS_DT:
      return isSetProcessDt();
    case PROCESS_REMARK:
      return isSetProcessRemark();
    case OWNS:
      return isSetOwns();
    case OWN_NAME_TEXT:
      return isSetOwnNameText();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CONTENT:
      return isSetContent();
    case CONSTRUCTION_AREA:
      return isSetConstructionArea();
    case PM_USER_ID:
      return isSetPmUserId();
    case PROPOSER_TEXT:
      return isSetProposerText();
    case PROPOSER:
      return isSetProposer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectAssBase)
      return this.equals((ProjectAssBase)that);
    return false;
  }

  public boolean equals(ProjectAssBase that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_mortgageGuaranteeType = true;
    boolean that_present_mortgageGuaranteeType = true;
    if (this_present_mortgageGuaranteeType || that_present_mortgageGuaranteeType) {
      if (!(this_present_mortgageGuaranteeType && that_present_mortgageGuaranteeType))
        return false;
      if (this.mortgageGuaranteeType != that.mortgageGuaranteeType)
        return false;
    }

    boolean this_present_mortgageGuaranteeTypeText = true && this.isSetMortgageGuaranteeTypeText();
    boolean that_present_mortgageGuaranteeTypeText = true && that.isSetMortgageGuaranteeTypeText();
    if (this_present_mortgageGuaranteeTypeText || that_present_mortgageGuaranteeTypeText) {
      if (!(this_present_mortgageGuaranteeTypeText && that_present_mortgageGuaranteeTypeText))
        return false;
      if (!this.mortgageGuaranteeTypeText.equals(that.mortgageGuaranteeTypeText))
        return false;
    }

    boolean this_present_mortgageType = true;
    boolean that_present_mortgageType = true;
    if (this_present_mortgageType || that_present_mortgageType) {
      if (!(this_present_mortgageType && that_present_mortgageType))
        return false;
      if (this.mortgageType != that.mortgageType)
        return false;
    }

    boolean this_present_mortgageTypeText = true && this.isSetMortgageTypeText();
    boolean that_present_mortgageTypeText = true && that.isSetMortgageTypeText();
    if (this_present_mortgageTypeText || that_present_mortgageTypeText) {
      if (!(this_present_mortgageTypeText && that_present_mortgageTypeText))
        return false;
      if (!this.mortgageTypeText.equals(that.mortgageTypeText))
        return false;
    }

    boolean this_present_ownType = true;
    boolean that_present_ownType = true;
    if (this_present_ownType || that_present_ownType) {
      if (!(this_present_ownType && that_present_ownType))
        return false;
      if (this.ownType != that.ownType)
        return false;
    }

    boolean this_present_ownTypeText = true && this.isSetOwnTypeText();
    boolean that_present_ownTypeText = true && that.isSetOwnTypeText();
    if (this_present_ownTypeText || that_present_ownTypeText) {
      if (!(this_present_ownTypeText && that_present_ownTypeText))
        return false;
      if (!this.ownTypeText.equals(that.ownTypeText))
        return false;
    }

    boolean this_present_ownName = true;
    boolean that_present_ownName = true;
    if (this_present_ownName || that_present_ownName) {
      if (!(this_present_ownName && that_present_ownName))
        return false;
      if (this.ownName != that.ownName)
        return false;
    }

    boolean this_present_warrantsNumber = true && this.isSetWarrantsNumber();
    boolean that_present_warrantsNumber = true && that.isSetWarrantsNumber();
    if (this_present_warrantsNumber || that_present_warrantsNumber) {
      if (!(this_present_warrantsNumber && that_present_warrantsNumber))
        return false;
      if (!this.warrantsNumber.equals(that.warrantsNumber))
        return false;
    }

    boolean this_present_addressProvince = true && this.isSetAddressProvince();
    boolean that_present_addressProvince = true && that.isSetAddressProvince();
    if (this_present_addressProvince || that_present_addressProvince) {
      if (!(this_present_addressProvince && that_present_addressProvince))
        return false;
      if (!this.addressProvince.equals(that.addressProvince))
        return false;
    }

    boolean this_present_addressCity = true && this.isSetAddressCity();
    boolean that_present_addressCity = true && that.isSetAddressCity();
    if (this_present_addressCity || that_present_addressCity) {
      if (!(this_present_addressCity && that_present_addressCity))
        return false;
      if (!this.addressCity.equals(that.addressCity))
        return false;
    }

    boolean this_present_addressArea = true && this.isSetAddressArea();
    boolean that_present_addressArea = true && that.isSetAddressArea();
    if (this_present_addressArea || that_present_addressArea) {
      if (!(this_present_addressArea && that_present_addressArea))
        return false;
      if (!this.addressArea.equals(that.addressArea))
        return false;
    }

    boolean this_present_addressDetail = true && this.isSetAddressDetail();
    boolean that_present_addressDetail = true && that.isSetAddressDetail();
    if (this_present_addressDetail || that_present_addressDetail) {
      if (!(this_present_addressDetail && that_present_addressDetail))
        return false;
      if (!this.addressDetail.equals(that.addressDetail))
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_purpose = true && this.isSetPurpose();
    boolean that_present_purpose = true && that.isSetPurpose();
    if (this_present_purpose || that_present_purpose) {
      if (!(this_present_purpose && that_present_purpose))
        return false;
      if (!this.purpose.equals(that.purpose))
        return false;
    }

    boolean this_present_regDt = true && this.isSetRegDt();
    boolean that_present_regDt = true && that.isSetRegDt();
    if (this_present_regDt || that_present_regDt) {
      if (!(this_present_regDt && that_present_regDt))
        return false;
      if (!this.regDt.equals(that.regDt))
        return false;
    }

    boolean this_present_regPrice = true;
    boolean that_present_regPrice = true;
    if (this_present_regPrice || that_present_regPrice) {
      if (!(this_present_regPrice && that_present_regPrice))
        return false;
      if (this.regPrice != that.regPrice)
        return false;
    }

    boolean this_present_assessValue = true;
    boolean that_present_assessValue = true;
    if (this_present_assessValue || that_present_assessValue) {
      if (!(this_present_assessValue && that_present_assessValue))
        return false;
      if (this.assessValue != that.assessValue)
        return false;
    }

    boolean this_present_mortgageValue = true;
    boolean that_present_mortgageValue = true;
    if (this_present_mortgageValue || that_present_mortgageValue) {
      if (!(this_present_mortgageValue && that_present_mortgageValue))
        return false;
      if (this.mortgageValue != that.mortgageValue)
        return false;
    }

    boolean this_present_mortgageRate = true;
    boolean that_present_mortgageRate = true;
    if (this_present_mortgageRate || that_present_mortgageRate) {
      if (!(this_present_mortgageRate && that_present_mortgageRate))
        return false;
      if (this.mortgageRate != that.mortgageRate)
        return false;
    }

    boolean this_present_fairValue = true;
    boolean that_present_fairValue = true;
    if (this_present_fairValue || that_present_fairValue) {
      if (!(this_present_fairValue && that_present_fairValue))
        return false;
      if (this.fairValue != that.fairValue)
        return false;
    }

    boolean this_present_fairValueGetMethod = true && this.isSetFairValueGetMethod();
    boolean that_present_fairValueGetMethod = true && that.isSetFairValueGetMethod();
    if (this_present_fairValueGetMethod || that_present_fairValueGetMethod) {
      if (!(this_present_fairValueGetMethod && that_present_fairValueGetMethod))
        return false;
      if (!this.fairValueGetMethod.equals(that.fairValueGetMethod))
        return false;
    }

    boolean this_present_saveDttm = true && this.isSetSaveDttm();
    boolean that_present_saveDttm = true && that.isSetSaveDttm();
    if (this_present_saveDttm || that_present_saveDttm) {
      if (!(this_present_saveDttm && that_present_saveDttm))
        return false;
      if (!this.saveDttm.equals(that.saveDttm))
        return false;
    }

    boolean this_present_saveRemark = true && this.isSetSaveRemark();
    boolean that_present_saveRemark = true && that.isSetSaveRemark();
    if (this_present_saveRemark || that_present_saveRemark) {
      if (!(this_present_saveRemark && that_present_saveRemark))
        return false;
      if (!this.saveRemark.equals(that.saveRemark))
        return false;
    }

    boolean this_present_regNumber = true && this.isSetRegNumber();
    boolean that_present_regNumber = true && that.isSetRegNumber();
    if (this_present_regNumber || that_present_regNumber) {
      if (!(this_present_regNumber && that_present_regNumber))
        return false;
      if (!this.regNumber.equals(that.regNumber))
        return false;
    }

    boolean this_present_extRequestReason = true && this.isSetExtRequestReason();
    boolean that_present_extRequestReason = true && that.isSetExtRequestReason();
    if (this_present_extRequestReason || that_present_extRequestReason) {
      if (!(this_present_extRequestReason && that_present_extRequestReason))
        return false;
      if (!this.extRequestReason.equals(that.extRequestReason))
        return false;
    }

    boolean this_present_extDttm = true && this.isSetExtDttm();
    boolean that_present_extDttm = true && that.isSetExtDttm();
    if (this_present_extDttm || that_present_extDttm) {
      if (!(this_present_extDttm && that_present_extDttm))
        return false;
      if (!this.extDttm.equals(that.extDttm))
        return false;
    }

    boolean this_present_extRemark = true && this.isSetExtRemark();
    boolean that_present_extRemark = true && that.isSetExtRemark();
    if (this_present_extRemark || that_present_extRemark) {
      if (!(this_present_extRemark && that_present_extRemark))
        return false;
      if (!this.extRemark.equals(that.extRemark))
        return false;
    }

    boolean this_present_removeDttm = true && this.isSetRemoveDttm();
    boolean that_present_removeDttm = true && that.isSetRemoveDttm();
    if (this_present_removeDttm || that_present_removeDttm) {
      if (!(this_present_removeDttm && that_present_removeDttm))
        return false;
      if (!this.removeDttm.equals(that.removeDttm))
        return false;
    }

    boolean this_present_removeRemark = true && this.isSetRemoveRemark();
    boolean that_present_removeRemark = true && that.isSetRemoveRemark();
    if (this_present_removeRemark || that_present_removeRemark) {
      if (!(this_present_removeRemark && that_present_removeRemark))
        return false;
      if (!this.removeRemark.equals(that.removeRemark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_beginMoney = true;
    boolean that_present_beginMoney = true;
    if (this_present_beginMoney || that_present_beginMoney) {
      if (!(this_present_beginMoney && that_present_beginMoney))
        return false;
      if (this.beginMoney != that.beginMoney)
        return false;
    }

    boolean this_present_endMoney = true;
    boolean that_present_endMoney = true;
    if (this_present_endMoney || that_present_endMoney) {
      if (!(this_present_endMoney && that_present_endMoney))
        return false;
      if (this.endMoney != that.endMoney)
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_operatorText = true && this.isSetOperatorText();
    boolean that_present_operatorText = true && that.isSetOperatorText();
    if (this_present_operatorText || that_present_operatorText) {
      if (!(this_present_operatorText && that_present_operatorText))
        return false;
      if (!this.operatorText.equals(that.operatorText))
        return false;
    }

    boolean this_present_regOrgName = true && this.isSetRegOrgName();
    boolean that_present_regOrgName = true && that.isSetRegOrgName();
    if (this_present_regOrgName || that_present_regOrgName) {
      if (!(this_present_regOrgName && that_present_regOrgName))
        return false;
      if (!this.regOrgName.equals(that.regOrgName))
        return false;
    }

    boolean this_present_transactExplain = true && this.isSetTransactExplain();
    boolean that_present_transactExplain = true && that.isSetTransactExplain();
    if (this_present_transactExplain || that_present_transactExplain) {
      if (!(this_present_transactExplain && that_present_transactExplain))
        return false;
      if (!this.transactExplain.equals(that.transactExplain))
        return false;
    }

    boolean this_present_dataObject = true && this.isSetDataObject();
    boolean that_present_dataObject = true && that.isSetDataObject();
    if (this_present_dataObject || that_present_dataObject) {
      if (!(this_present_dataObject && that_present_dataObject))
        return false;
      if (!this.dataObject.equals(that.dataObject))
        return false;
    }

    boolean this_present_processDt = true && this.isSetProcessDt();
    boolean that_present_processDt = true && that.isSetProcessDt();
    if (this_present_processDt || that_present_processDt) {
      if (!(this_present_processDt && that_present_processDt))
        return false;
      if (!this.processDt.equals(that.processDt))
        return false;
    }

    boolean this_present_processRemark = true && this.isSetProcessRemark();
    boolean that_present_processRemark = true && that.isSetProcessRemark();
    if (this_present_processRemark || that_present_processRemark) {
      if (!(this_present_processRemark && that_present_processRemark))
        return false;
      if (!this.processRemark.equals(that.processRemark))
        return false;
    }

    boolean this_present_owns = true && this.isSetOwns();
    boolean that_present_owns = true && that.isSetOwns();
    if (this_present_owns || that_present_owns) {
      if (!(this_present_owns && that_present_owns))
        return false;
      if (!this.owns.equals(that.owns))
        return false;
    }

    boolean this_present_ownNameText = true && this.isSetOwnNameText();
    boolean that_present_ownNameText = true && that.isSetOwnNameText();
    if (this_present_ownNameText || that_present_ownNameText) {
      if (!(this_present_ownNameText && that_present_ownNameText))
        return false;
      if (!this.ownNameText.equals(that.ownNameText))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_constructionArea = true && this.isSetConstructionArea();
    boolean that_present_constructionArea = true && that.isSetConstructionArea();
    if (this_present_constructionArea || that_present_constructionArea) {
      if (!(this_present_constructionArea && that_present_constructionArea))
        return false;
      if (!this.constructionArea.equals(that.constructionArea))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_proposerText = true && this.isSetProposerText();
    boolean that_present_proposerText = true && that.isSetProposerText();
    if (this_present_proposerText || that_present_proposerText) {
      if (!(this_present_proposerText && that_present_proposerText))
        return false;
      if (!this.proposerText.equals(that.proposerText))
        return false;
    }

    boolean this_present_proposer = true;
    boolean that_present_proposer = true;
    if (this_present_proposer || that_present_proposer) {
      if (!(this_present_proposer && that_present_proposer))
        return false;
      if (this.proposer != that.proposer)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_mortgageGuaranteeType = true;
    list.add(present_mortgageGuaranteeType);
    if (present_mortgageGuaranteeType)
      list.add(mortgageGuaranteeType);

    boolean present_mortgageGuaranteeTypeText = true && (isSetMortgageGuaranteeTypeText());
    list.add(present_mortgageGuaranteeTypeText);
    if (present_mortgageGuaranteeTypeText)
      list.add(mortgageGuaranteeTypeText);

    boolean present_mortgageType = true;
    list.add(present_mortgageType);
    if (present_mortgageType)
      list.add(mortgageType);

    boolean present_mortgageTypeText = true && (isSetMortgageTypeText());
    list.add(present_mortgageTypeText);
    if (present_mortgageTypeText)
      list.add(mortgageTypeText);

    boolean present_ownType = true;
    list.add(present_ownType);
    if (present_ownType)
      list.add(ownType);

    boolean present_ownTypeText = true && (isSetOwnTypeText());
    list.add(present_ownTypeText);
    if (present_ownTypeText)
      list.add(ownTypeText);

    boolean present_ownName = true;
    list.add(present_ownName);
    if (present_ownName)
      list.add(ownName);

    boolean present_warrantsNumber = true && (isSetWarrantsNumber());
    list.add(present_warrantsNumber);
    if (present_warrantsNumber)
      list.add(warrantsNumber);

    boolean present_addressProvince = true && (isSetAddressProvince());
    list.add(present_addressProvince);
    if (present_addressProvince)
      list.add(addressProvince);

    boolean present_addressCity = true && (isSetAddressCity());
    list.add(present_addressCity);
    if (present_addressCity)
      list.add(addressCity);

    boolean present_addressArea = true && (isSetAddressArea());
    list.add(present_addressArea);
    if (present_addressArea)
      list.add(addressArea);

    boolean present_addressDetail = true && (isSetAddressDetail());
    list.add(present_addressDetail);
    if (present_addressDetail)
      list.add(addressDetail);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    boolean present_purpose = true && (isSetPurpose());
    list.add(present_purpose);
    if (present_purpose)
      list.add(purpose);

    boolean present_regDt = true && (isSetRegDt());
    list.add(present_regDt);
    if (present_regDt)
      list.add(regDt);

    boolean present_regPrice = true;
    list.add(present_regPrice);
    if (present_regPrice)
      list.add(regPrice);

    boolean present_assessValue = true;
    list.add(present_assessValue);
    if (present_assessValue)
      list.add(assessValue);

    boolean present_mortgageValue = true;
    list.add(present_mortgageValue);
    if (present_mortgageValue)
      list.add(mortgageValue);

    boolean present_mortgageRate = true;
    list.add(present_mortgageRate);
    if (present_mortgageRate)
      list.add(mortgageRate);

    boolean present_fairValue = true;
    list.add(present_fairValue);
    if (present_fairValue)
      list.add(fairValue);

    boolean present_fairValueGetMethod = true && (isSetFairValueGetMethod());
    list.add(present_fairValueGetMethod);
    if (present_fairValueGetMethod)
      list.add(fairValueGetMethod);

    boolean present_saveDttm = true && (isSetSaveDttm());
    list.add(present_saveDttm);
    if (present_saveDttm)
      list.add(saveDttm);

    boolean present_saveRemark = true && (isSetSaveRemark());
    list.add(present_saveRemark);
    if (present_saveRemark)
      list.add(saveRemark);

    boolean present_regNumber = true && (isSetRegNumber());
    list.add(present_regNumber);
    if (present_regNumber)
      list.add(regNumber);

    boolean present_extRequestReason = true && (isSetExtRequestReason());
    list.add(present_extRequestReason);
    if (present_extRequestReason)
      list.add(extRequestReason);

    boolean present_extDttm = true && (isSetExtDttm());
    list.add(present_extDttm);
    if (present_extDttm)
      list.add(extDttm);

    boolean present_extRemark = true && (isSetExtRemark());
    list.add(present_extRemark);
    if (present_extRemark)
      list.add(extRemark);

    boolean present_removeDttm = true && (isSetRemoveDttm());
    list.add(present_removeDttm);
    if (present_removeDttm)
      list.add(removeDttm);

    boolean present_removeRemark = true && (isSetRemoveRemark());
    list.add(present_removeRemark);
    if (present_removeRemark)
      list.add(removeRemark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_beginMoney = true;
    list.add(present_beginMoney);
    if (present_beginMoney)
      list.add(beginMoney);

    boolean present_endMoney = true;
    list.add(present_endMoney);
    if (present_endMoney)
      list.add(endMoney);

    boolean present_operator = true && (isSetOperator());
    list.add(present_operator);
    if (present_operator)
      list.add(operator);

    boolean present_operatorText = true && (isSetOperatorText());
    list.add(present_operatorText);
    if (present_operatorText)
      list.add(operatorText);

    boolean present_regOrgName = true && (isSetRegOrgName());
    list.add(present_regOrgName);
    if (present_regOrgName)
      list.add(regOrgName);

    boolean present_transactExplain = true && (isSetTransactExplain());
    list.add(present_transactExplain);
    if (present_transactExplain)
      list.add(transactExplain);

    boolean present_dataObject = true && (isSetDataObject());
    list.add(present_dataObject);
    if (present_dataObject)
      list.add(dataObject);

    boolean present_processDt = true && (isSetProcessDt());
    list.add(present_processDt);
    if (present_processDt)
      list.add(processDt);

    boolean present_processRemark = true && (isSetProcessRemark());
    list.add(present_processRemark);
    if (present_processRemark)
      list.add(processRemark);

    boolean present_owns = true && (isSetOwns());
    list.add(present_owns);
    if (present_owns)
      list.add(owns);

    boolean present_ownNameText = true && (isSetOwnNameText());
    list.add(present_ownNameText);
    if (present_ownNameText)
      list.add(ownNameText);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_constructionArea = true && (isSetConstructionArea());
    list.add(present_constructionArea);
    if (present_constructionArea)
      list.add(constructionArea);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_proposerText = true && (isSetProposerText());
    list.add(present_proposerText);
    if (present_proposerText)
      list.add(proposerText);

    boolean present_proposer = true;
    list.add(present_proposer);
    if (present_proposer)
      list.add(proposer);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectAssBase other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageGuaranteeType()).compareTo(other.isSetMortgageGuaranteeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageGuaranteeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageGuaranteeType, other.mortgageGuaranteeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageGuaranteeTypeText()).compareTo(other.isSetMortgageGuaranteeTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageGuaranteeTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageGuaranteeTypeText, other.mortgageGuaranteeTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageType()).compareTo(other.isSetMortgageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageType, other.mortgageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageTypeText()).compareTo(other.isSetMortgageTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageTypeText, other.mortgageTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnType()).compareTo(other.isSetOwnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownType, other.ownType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnTypeText()).compareTo(other.isSetOwnTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownTypeText, other.ownTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnName()).compareTo(other.isSetOwnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownName, other.ownName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarrantsNumber()).compareTo(other.isSetWarrantsNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarrantsNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warrantsNumber, other.warrantsNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressProvince()).compareTo(other.isSetAddressProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressProvince, other.addressProvince);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressCity()).compareTo(other.isSetAddressCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressCity, other.addressCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressArea()).compareTo(other.isSetAddressArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressArea, other.addressArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressDetail()).compareTo(other.isSetAddressDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressDetail, other.addressDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurpose()).compareTo(other.isSetPurpose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurpose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purpose, other.purpose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegDt()).compareTo(other.isSetRegDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regDt, other.regDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegPrice()).compareTo(other.isSetRegPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regPrice, other.regPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssessValue()).compareTo(other.isSetAssessValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssessValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assessValue, other.assessValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageValue()).compareTo(other.isSetMortgageValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageValue, other.mortgageValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageRate()).compareTo(other.isSetMortgageRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageRate, other.mortgageRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFairValue()).compareTo(other.isSetFairValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFairValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fairValue, other.fairValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFairValueGetMethod()).compareTo(other.isSetFairValueGetMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFairValueGetMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fairValueGetMethod, other.fairValueGetMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveDttm()).compareTo(other.isSetSaveDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveDttm, other.saveDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveRemark()).compareTo(other.isSetSaveRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveRemark, other.saveRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegNumber()).compareTo(other.isSetRegNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regNumber, other.regNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtRequestReason()).compareTo(other.isSetExtRequestReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtRequestReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extRequestReason, other.extRequestReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtDttm()).compareTo(other.isSetExtDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extDttm, other.extDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtRemark()).compareTo(other.isSetExtRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extRemark, other.extRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoveDttm()).compareTo(other.isSetRemoveDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoveDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removeDttm, other.removeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoveRemark()).compareTo(other.isSetRemoveRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoveRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.removeRemark, other.removeRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginMoney()).compareTo(other.isSetBeginMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginMoney, other.beginMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndMoney()).compareTo(other.isSetEndMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endMoney, other.endMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorText()).compareTo(other.isSetOperatorText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorText, other.operatorText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegOrgName()).compareTo(other.isSetRegOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regOrgName, other.regOrgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactExplain()).compareTo(other.isSetTransactExplain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactExplain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactExplain, other.transactExplain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataObject()).compareTo(other.isSetDataObject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataObject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataObject, other.dataObject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessDt()).compareTo(other.isSetProcessDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processDt, other.processDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessRemark()).compareTo(other.isSetProcessRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processRemark, other.processRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwns()).compareTo(other.isSetOwns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owns, other.owns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnNameText()).compareTo(other.isSetOwnNameText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnNameText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownNameText, other.ownNameText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstructionArea()).compareTo(other.isSetConstructionArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstructionArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constructionArea, other.constructionArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProposerText()).compareTo(other.isSetProposerText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProposerText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proposerText, other.proposerText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProposer()).compareTo(other.isSetProposer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProposer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proposer, other.proposer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectAssBase(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageGuaranteeType:");
    sb.append(this.mortgageGuaranteeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageGuaranteeTypeText:");
    if (this.mortgageGuaranteeTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageGuaranteeTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageType:");
    sb.append(this.mortgageType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageTypeText:");
    if (this.mortgageTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownType:");
    sb.append(this.ownType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownTypeText:");
    if (this.ownTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.ownTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownName:");
    sb.append(this.ownName);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warrantsNumber:");
    if (this.warrantsNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.warrantsNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressProvince:");
    if (this.addressProvince == null) {
      sb.append("null");
    } else {
      sb.append(this.addressProvince);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressCity:");
    if (this.addressCity == null) {
      sb.append("null");
    } else {
      sb.append(this.addressCity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressArea:");
    if (this.addressArea == null) {
      sb.append("null");
    } else {
      sb.append(this.addressArea);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addressDetail:");
    if (this.addressDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.addressDetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("purpose:");
    if (this.purpose == null) {
      sb.append("null");
    } else {
      sb.append(this.purpose);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regDt:");
    if (this.regDt == null) {
      sb.append("null");
    } else {
      sb.append(this.regDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regPrice:");
    sb.append(this.regPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assessValue:");
    sb.append(this.assessValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageValue:");
    sb.append(this.mortgageValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageRate:");
    sb.append(this.mortgageRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fairValue:");
    sb.append(this.fairValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fairValueGetMethod:");
    if (this.fairValueGetMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.fairValueGetMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("saveDttm:");
    if (this.saveDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.saveDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("saveRemark:");
    if (this.saveRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.saveRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regNumber:");
    if (this.regNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.regNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extRequestReason:");
    if (this.extRequestReason == null) {
      sb.append("null");
    } else {
      sb.append(this.extRequestReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extDttm:");
    if (this.extDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.extDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extRemark:");
    if (this.extRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.extRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("removeDttm:");
    if (this.removeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.removeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("removeRemark:");
    if (this.removeRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.removeRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginMoney:");
    sb.append(this.beginMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endMoney:");
    sb.append(this.endMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorText:");
    if (this.operatorText == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regOrgName:");
    if (this.regOrgName == null) {
      sb.append("null");
    } else {
      sb.append(this.regOrgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactExplain:");
    if (this.transactExplain == null) {
      sb.append("null");
    } else {
      sb.append(this.transactExplain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataObject:");
    if (this.dataObject == null) {
      sb.append("null");
    } else {
      sb.append(this.dataObject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processDt:");
    if (this.processDt == null) {
      sb.append("null");
    } else {
      sb.append(this.processDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processRemark:");
    if (this.processRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.processRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owns:");
    if (this.owns == null) {
      sb.append("null");
    } else {
      sb.append(this.owns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownNameText:");
    if (this.ownNameText == null) {
      sb.append("null");
    } else {
      sb.append(this.ownNameText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("constructionArea:");
    if (this.constructionArea == null) {
      sb.append("null");
    } else {
      sb.append(this.constructionArea);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("proposerText:");
    if (this.proposerText == null) {
      sb.append("null");
    } else {
      sb.append(this.proposerText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("proposer:");
    sb.append(this.proposer);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectAssBaseStandardSchemeFactory implements SchemeFactory {
    public ProjectAssBaseStandardScheme getScheme() {
      return new ProjectAssBaseStandardScheme();
    }
  }

  private static class ProjectAssBaseStandardScheme extends StandardScheme<ProjectAssBase> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectAssBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MORTGAGE_GUARANTEE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageGuaranteeType = iprot.readI32();
              struct.setMortgageGuaranteeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MORTGAGE_GUARANTEE_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageGuaranteeTypeText = iprot.readString();
              struct.setMortgageGuaranteeTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MORTGAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageType = iprot.readI32();
              struct.setMortgageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MORTGAGE_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageTypeText = iprot.readString();
              struct.setMortgageTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OWN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ownType = iprot.readI32();
              struct.setOwnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OWN_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownTypeText = iprot.readString();
              struct.setOwnTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OWN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ownName = iprot.readI32();
              struct.setOwnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WARRANTS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warrantsNumber = iprot.readString();
              struct.setWarrantsNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADDRESS_PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressProvince = iprot.readString();
              struct.setAddressProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ADDRESS_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressCity = iprot.readString();
              struct.setAddressCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ADDRESS_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressArea = iprot.readString();
              struct.setAddressAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ADDRESS_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressDetail = iprot.readString();
              struct.setAddressDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PURPOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.purpose = iprot.readString();
              struct.setPurposeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REG_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regDt = iprot.readString();
              struct.setRegDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.regPrice = iprot.readDouble();
              struct.setRegPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ASSESS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assessValue = iprot.readDouble();
              struct.setAssessValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MORTGAGE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mortgageValue = iprot.readDouble();
              struct.setMortgageValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MORTGAGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mortgageRate = iprot.readDouble();
              struct.setMortgageRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FAIR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fairValue = iprot.readDouble();
              struct.setFairValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // FAIR_VALUE_GET_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fairValueGetMethod = iprot.readString();
              struct.setFairValueGetMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SAVE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saveDttm = iprot.readString();
              struct.setSaveDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SAVE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saveRemark = iprot.readString();
              struct.setSaveRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REG_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regNumber = iprot.readString();
              struct.setRegNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // EXT_REQUEST_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extRequestReason = iprot.readString();
              struct.setExtRequestReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // EXT_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extDttm = iprot.readString();
              struct.setExtDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // EXT_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extRemark = iprot.readString();
              struct.setExtRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // REMOVE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.removeDttm = iprot.readString();
              struct.setRemoveDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // REMOVE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.removeRemark = iprot.readString();
              struct.setRemoveRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // BEGIN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.beginMoney = iprot.readDouble();
              struct.setBeginMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // END_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.endMoney = iprot.readDouble();
              struct.setEndMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // OPERATOR_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorText = iprot.readString();
              struct.setOperatorTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // REG_ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regOrgName = iprot.readString();
              struct.setRegOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // TRANSACT_EXPLAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactExplain = iprot.readString();
              struct.setTransactExplainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // DATA_OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataObject = iprot.readString();
              struct.setDataObjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PROCESS_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processDt = iprot.readString();
              struct.setProcessDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // PROCESS_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processRemark = iprot.readString();
              struct.setProcessRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // OWNS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owns = iprot.readString();
              struct.setOwnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // OWN_NAME_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownNameText = iprot.readString();
              struct.setOwnNameTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // CONSTRUCTION_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.constructionArea = iprot.readString();
              struct.setConstructionAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // PROPOSER_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proposerText = iprot.readString();
              struct.setProposerTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // PROPOSER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.proposer = iprot.readI32();
              struct.setProposerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectAssBase struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORTGAGE_GUARANTEE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.mortgageGuaranteeType);
      oprot.writeFieldEnd();
      if (struct.mortgageGuaranteeTypeText != null) {
        oprot.writeFieldBegin(MORTGAGE_GUARANTEE_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.mortgageGuaranteeTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MORTGAGE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.mortgageType);
      oprot.writeFieldEnd();
      if (struct.mortgageTypeText != null) {
        oprot.writeFieldBegin(MORTGAGE_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.mortgageTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OWN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ownType);
      oprot.writeFieldEnd();
      if (struct.ownTypeText != null) {
        oprot.writeFieldBegin(OWN_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.ownTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OWN_NAME_FIELD_DESC);
      oprot.writeI32(struct.ownName);
      oprot.writeFieldEnd();
      if (struct.warrantsNumber != null) {
        oprot.writeFieldBegin(WARRANTS_NUMBER_FIELD_DESC);
        oprot.writeString(struct.warrantsNumber);
        oprot.writeFieldEnd();
      }
      if (struct.addressProvince != null) {
        oprot.writeFieldBegin(ADDRESS_PROVINCE_FIELD_DESC);
        oprot.writeString(struct.addressProvince);
        oprot.writeFieldEnd();
      }
      if (struct.addressCity != null) {
        oprot.writeFieldBegin(ADDRESS_CITY_FIELD_DESC);
        oprot.writeString(struct.addressCity);
        oprot.writeFieldEnd();
      }
      if (struct.addressArea != null) {
        oprot.writeFieldBegin(ADDRESS_AREA_FIELD_DESC);
        oprot.writeString(struct.addressArea);
        oprot.writeFieldEnd();
      }
      if (struct.addressDetail != null) {
        oprot.writeFieldBegin(ADDRESS_DETAIL_FIELD_DESC);
        oprot.writeString(struct.addressDetail);
        oprot.writeFieldEnd();
      }
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      if (struct.purpose != null) {
        oprot.writeFieldBegin(PURPOSE_FIELD_DESC);
        oprot.writeString(struct.purpose);
        oprot.writeFieldEnd();
      }
      if (struct.regDt != null) {
        oprot.writeFieldBegin(REG_DT_FIELD_DESC);
        oprot.writeString(struct.regDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REG_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.regPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSESS_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.assessValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORTGAGE_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.mortgageValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORTGAGE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.mortgageRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIR_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.fairValue);
      oprot.writeFieldEnd();
      if (struct.fairValueGetMethod != null) {
        oprot.writeFieldBegin(FAIR_VALUE_GET_METHOD_FIELD_DESC);
        oprot.writeString(struct.fairValueGetMethod);
        oprot.writeFieldEnd();
      }
      if (struct.saveDttm != null) {
        oprot.writeFieldBegin(SAVE_DTTM_FIELD_DESC);
        oprot.writeString(struct.saveDttm);
        oprot.writeFieldEnd();
      }
      if (struct.saveRemark != null) {
        oprot.writeFieldBegin(SAVE_REMARK_FIELD_DESC);
        oprot.writeString(struct.saveRemark);
        oprot.writeFieldEnd();
      }
      if (struct.regNumber != null) {
        oprot.writeFieldBegin(REG_NUMBER_FIELD_DESC);
        oprot.writeString(struct.regNumber);
        oprot.writeFieldEnd();
      }
      if (struct.extRequestReason != null) {
        oprot.writeFieldBegin(EXT_REQUEST_REASON_FIELD_DESC);
        oprot.writeString(struct.extRequestReason);
        oprot.writeFieldEnd();
      }
      if (struct.extDttm != null) {
        oprot.writeFieldBegin(EXT_DTTM_FIELD_DESC);
        oprot.writeString(struct.extDttm);
        oprot.writeFieldEnd();
      }
      if (struct.extRemark != null) {
        oprot.writeFieldBegin(EXT_REMARK_FIELD_DESC);
        oprot.writeString(struct.extRemark);
        oprot.writeFieldEnd();
      }
      if (struct.removeDttm != null) {
        oprot.writeFieldBegin(REMOVE_DTTM_FIELD_DESC);
        oprot.writeString(struct.removeDttm);
        oprot.writeFieldEnd();
      }
      if (struct.removeRemark != null) {
        oprot.writeFieldBegin(REMOVE_REMARK_FIELD_DESC);
        oprot.writeString(struct.removeRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BEGIN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.beginMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.endMoney);
      oprot.writeFieldEnd();
      if (struct.operator != null) {
        oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
        oprot.writeString(struct.operator);
        oprot.writeFieldEnd();
      }
      if (struct.operatorText != null) {
        oprot.writeFieldBegin(OPERATOR_TEXT_FIELD_DESC);
        oprot.writeString(struct.operatorText);
        oprot.writeFieldEnd();
      }
      if (struct.regOrgName != null) {
        oprot.writeFieldBegin(REG_ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.regOrgName);
        oprot.writeFieldEnd();
      }
      if (struct.transactExplain != null) {
        oprot.writeFieldBegin(TRANSACT_EXPLAIN_FIELD_DESC);
        oprot.writeString(struct.transactExplain);
        oprot.writeFieldEnd();
      }
      if (struct.dataObject != null) {
        oprot.writeFieldBegin(DATA_OBJECT_FIELD_DESC);
        oprot.writeString(struct.dataObject);
        oprot.writeFieldEnd();
      }
      if (struct.processDt != null) {
        oprot.writeFieldBegin(PROCESS_DT_FIELD_DESC);
        oprot.writeString(struct.processDt);
        oprot.writeFieldEnd();
      }
      if (struct.processRemark != null) {
        oprot.writeFieldBegin(PROCESS_REMARK_FIELD_DESC);
        oprot.writeString(struct.processRemark);
        oprot.writeFieldEnd();
      }
      if (struct.owns != null) {
        oprot.writeFieldBegin(OWNS_FIELD_DESC);
        oprot.writeString(struct.owns);
        oprot.writeFieldEnd();
      }
      if (struct.ownNameText != null) {
        oprot.writeFieldBegin(OWN_NAME_TEXT_FIELD_DESC);
        oprot.writeString(struct.ownNameText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.constructionArea != null) {
        oprot.writeFieldBegin(CONSTRUCTION_AREA_FIELD_DESC);
        oprot.writeString(struct.constructionArea);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.proposerText != null) {
        oprot.writeFieldBegin(PROPOSER_TEXT_FIELD_DESC);
        oprot.writeString(struct.proposerText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROPOSER_FIELD_DESC);
      oprot.writeI32(struct.proposer);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectAssBaseTupleSchemeFactory implements SchemeFactory {
    public ProjectAssBaseTupleScheme getScheme() {
      return new ProjectAssBaseTupleScheme();
    }
  }

  private static class ProjectAssBaseTupleScheme extends TupleScheme<ProjectAssBase> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectAssBase struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetMortgageGuaranteeType()) {
        optionals.set(2);
      }
      if (struct.isSetMortgageGuaranteeTypeText()) {
        optionals.set(3);
      }
      if (struct.isSetMortgageType()) {
        optionals.set(4);
      }
      if (struct.isSetMortgageTypeText()) {
        optionals.set(5);
      }
      if (struct.isSetOwnType()) {
        optionals.set(6);
      }
      if (struct.isSetOwnTypeText()) {
        optionals.set(7);
      }
      if (struct.isSetOwnName()) {
        optionals.set(8);
      }
      if (struct.isSetWarrantsNumber()) {
        optionals.set(9);
      }
      if (struct.isSetAddressProvince()) {
        optionals.set(10);
      }
      if (struct.isSetAddressCity()) {
        optionals.set(11);
      }
      if (struct.isSetAddressArea()) {
        optionals.set(12);
      }
      if (struct.isSetAddressDetail()) {
        optionals.set(13);
      }
      if (struct.isSetItemName()) {
        optionals.set(14);
      }
      if (struct.isSetPurpose()) {
        optionals.set(15);
      }
      if (struct.isSetRegDt()) {
        optionals.set(16);
      }
      if (struct.isSetRegPrice()) {
        optionals.set(17);
      }
      if (struct.isSetAssessValue()) {
        optionals.set(18);
      }
      if (struct.isSetMortgageValue()) {
        optionals.set(19);
      }
      if (struct.isSetMortgageRate()) {
        optionals.set(20);
      }
      if (struct.isSetFairValue()) {
        optionals.set(21);
      }
      if (struct.isSetFairValueGetMethod()) {
        optionals.set(22);
      }
      if (struct.isSetSaveDttm()) {
        optionals.set(23);
      }
      if (struct.isSetSaveRemark()) {
        optionals.set(24);
      }
      if (struct.isSetRegNumber()) {
        optionals.set(25);
      }
      if (struct.isSetExtRequestReason()) {
        optionals.set(26);
      }
      if (struct.isSetExtDttm()) {
        optionals.set(27);
      }
      if (struct.isSetExtRemark()) {
        optionals.set(28);
      }
      if (struct.isSetRemoveDttm()) {
        optionals.set(29);
      }
      if (struct.isSetRemoveRemark()) {
        optionals.set(30);
      }
      if (struct.isSetStatus()) {
        optionals.set(31);
      }
      if (struct.isSetRemark()) {
        optionals.set(32);
      }
      if (struct.isSetProjectName()) {
        optionals.set(33);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(34);
      }
      if (struct.isSetBeginMoney()) {
        optionals.set(35);
      }
      if (struct.isSetEndMoney()) {
        optionals.set(36);
      }
      if (struct.isSetOperator()) {
        optionals.set(37);
      }
      if (struct.isSetOperatorText()) {
        optionals.set(38);
      }
      if (struct.isSetRegOrgName()) {
        optionals.set(39);
      }
      if (struct.isSetTransactExplain()) {
        optionals.set(40);
      }
      if (struct.isSetDataObject()) {
        optionals.set(41);
      }
      if (struct.isSetProcessDt()) {
        optionals.set(42);
      }
      if (struct.isSetProcessRemark()) {
        optionals.set(43);
      }
      if (struct.isSetOwns()) {
        optionals.set(44);
      }
      if (struct.isSetOwnNameText()) {
        optionals.set(45);
      }
      if (struct.isSetPage()) {
        optionals.set(46);
      }
      if (struct.isSetRows()) {
        optionals.set(47);
      }
      if (struct.isSetContent()) {
        optionals.set(48);
      }
      if (struct.isSetConstructionArea()) {
        optionals.set(49);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(50);
      }
      if (struct.isSetProposerText()) {
        optionals.set(51);
      }
      if (struct.isSetProposer()) {
        optionals.set(52);
      }
      oprot.writeBitSet(optionals, 53);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetMortgageGuaranteeType()) {
        oprot.writeI32(struct.mortgageGuaranteeType);
      }
      if (struct.isSetMortgageGuaranteeTypeText()) {
        oprot.writeString(struct.mortgageGuaranteeTypeText);
      }
      if (struct.isSetMortgageType()) {
        oprot.writeI32(struct.mortgageType);
      }
      if (struct.isSetMortgageTypeText()) {
        oprot.writeString(struct.mortgageTypeText);
      }
      if (struct.isSetOwnType()) {
        oprot.writeI32(struct.ownType);
      }
      if (struct.isSetOwnTypeText()) {
        oprot.writeString(struct.ownTypeText);
      }
      if (struct.isSetOwnName()) {
        oprot.writeI32(struct.ownName);
      }
      if (struct.isSetWarrantsNumber()) {
        oprot.writeString(struct.warrantsNumber);
      }
      if (struct.isSetAddressProvince()) {
        oprot.writeString(struct.addressProvince);
      }
      if (struct.isSetAddressCity()) {
        oprot.writeString(struct.addressCity);
      }
      if (struct.isSetAddressArea()) {
        oprot.writeString(struct.addressArea);
      }
      if (struct.isSetAddressDetail()) {
        oprot.writeString(struct.addressDetail);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetPurpose()) {
        oprot.writeString(struct.purpose);
      }
      if (struct.isSetRegDt()) {
        oprot.writeString(struct.regDt);
      }
      if (struct.isSetRegPrice()) {
        oprot.writeDouble(struct.regPrice);
      }
      if (struct.isSetAssessValue()) {
        oprot.writeDouble(struct.assessValue);
      }
      if (struct.isSetMortgageValue()) {
        oprot.writeDouble(struct.mortgageValue);
      }
      if (struct.isSetMortgageRate()) {
        oprot.writeDouble(struct.mortgageRate);
      }
      if (struct.isSetFairValue()) {
        oprot.writeDouble(struct.fairValue);
      }
      if (struct.isSetFairValueGetMethod()) {
        oprot.writeString(struct.fairValueGetMethod);
      }
      if (struct.isSetSaveDttm()) {
        oprot.writeString(struct.saveDttm);
      }
      if (struct.isSetSaveRemark()) {
        oprot.writeString(struct.saveRemark);
      }
      if (struct.isSetRegNumber()) {
        oprot.writeString(struct.regNumber);
      }
      if (struct.isSetExtRequestReason()) {
        oprot.writeString(struct.extRequestReason);
      }
      if (struct.isSetExtDttm()) {
        oprot.writeString(struct.extDttm);
      }
      if (struct.isSetExtRemark()) {
        oprot.writeString(struct.extRemark);
      }
      if (struct.isSetRemoveDttm()) {
        oprot.writeString(struct.removeDttm);
      }
      if (struct.isSetRemoveRemark()) {
        oprot.writeString(struct.removeRemark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetBeginMoney()) {
        oprot.writeDouble(struct.beginMoney);
      }
      if (struct.isSetEndMoney()) {
        oprot.writeDouble(struct.endMoney);
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
      if (struct.isSetOperatorText()) {
        oprot.writeString(struct.operatorText);
      }
      if (struct.isSetRegOrgName()) {
        oprot.writeString(struct.regOrgName);
      }
      if (struct.isSetTransactExplain()) {
        oprot.writeString(struct.transactExplain);
      }
      if (struct.isSetDataObject()) {
        oprot.writeString(struct.dataObject);
      }
      if (struct.isSetProcessDt()) {
        oprot.writeString(struct.processDt);
      }
      if (struct.isSetProcessRemark()) {
        oprot.writeString(struct.processRemark);
      }
      if (struct.isSetOwns()) {
        oprot.writeString(struct.owns);
      }
      if (struct.isSetOwnNameText()) {
        oprot.writeString(struct.ownNameText);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetConstructionArea()) {
        oprot.writeString(struct.constructionArea);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetProposerText()) {
        oprot.writeString(struct.proposerText);
      }
      if (struct.isSetProposer()) {
        oprot.writeI32(struct.proposer);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectAssBase struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(53);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mortgageGuaranteeType = iprot.readI32();
        struct.setMortgageGuaranteeTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mortgageGuaranteeTypeText = iprot.readString();
        struct.setMortgageGuaranteeTypeTextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mortgageType = iprot.readI32();
        struct.setMortgageTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mortgageTypeText = iprot.readString();
        struct.setMortgageTypeTextIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ownType = iprot.readI32();
        struct.setOwnTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ownTypeText = iprot.readString();
        struct.setOwnTypeTextIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ownName = iprot.readI32();
        struct.setOwnNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.warrantsNumber = iprot.readString();
        struct.setWarrantsNumberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.addressProvince = iprot.readString();
        struct.setAddressProvinceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.addressCity = iprot.readString();
        struct.setAddressCityIsSet(true);
      }
      if (incoming.get(12)) {
        struct.addressArea = iprot.readString();
        struct.setAddressAreaIsSet(true);
      }
      if (incoming.get(13)) {
        struct.addressDetail = iprot.readString();
        struct.setAddressDetailIsSet(true);
      }
      if (incoming.get(14)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.purpose = iprot.readString();
        struct.setPurposeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.regDt = iprot.readString();
        struct.setRegDtIsSet(true);
      }
      if (incoming.get(17)) {
        struct.regPrice = iprot.readDouble();
        struct.setRegPriceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.assessValue = iprot.readDouble();
        struct.setAssessValueIsSet(true);
      }
      if (incoming.get(19)) {
        struct.mortgageValue = iprot.readDouble();
        struct.setMortgageValueIsSet(true);
      }
      if (incoming.get(20)) {
        struct.mortgageRate = iprot.readDouble();
        struct.setMortgageRateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.fairValue = iprot.readDouble();
        struct.setFairValueIsSet(true);
      }
      if (incoming.get(22)) {
        struct.fairValueGetMethod = iprot.readString();
        struct.setFairValueGetMethodIsSet(true);
      }
      if (incoming.get(23)) {
        struct.saveDttm = iprot.readString();
        struct.setSaveDttmIsSet(true);
      }
      if (incoming.get(24)) {
        struct.saveRemark = iprot.readString();
        struct.setSaveRemarkIsSet(true);
      }
      if (incoming.get(25)) {
        struct.regNumber = iprot.readString();
        struct.setRegNumberIsSet(true);
      }
      if (incoming.get(26)) {
        struct.extRequestReason = iprot.readString();
        struct.setExtRequestReasonIsSet(true);
      }
      if (incoming.get(27)) {
        struct.extDttm = iprot.readString();
        struct.setExtDttmIsSet(true);
      }
      if (incoming.get(28)) {
        struct.extRemark = iprot.readString();
        struct.setExtRemarkIsSet(true);
      }
      if (incoming.get(29)) {
        struct.removeDttm = iprot.readString();
        struct.setRemoveDttmIsSet(true);
      }
      if (incoming.get(30)) {
        struct.removeRemark = iprot.readString();
        struct.setRemoveRemarkIsSet(true);
      }
      if (incoming.get(31)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(32)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(33)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(34)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(35)) {
        struct.beginMoney = iprot.readDouble();
        struct.setBeginMoneyIsSet(true);
      }
      if (incoming.get(36)) {
        struct.endMoney = iprot.readDouble();
        struct.setEndMoneyIsSet(true);
      }
      if (incoming.get(37)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(38)) {
        struct.operatorText = iprot.readString();
        struct.setOperatorTextIsSet(true);
      }
      if (incoming.get(39)) {
        struct.regOrgName = iprot.readString();
        struct.setRegOrgNameIsSet(true);
      }
      if (incoming.get(40)) {
        struct.transactExplain = iprot.readString();
        struct.setTransactExplainIsSet(true);
      }
      if (incoming.get(41)) {
        struct.dataObject = iprot.readString();
        struct.setDataObjectIsSet(true);
      }
      if (incoming.get(42)) {
        struct.processDt = iprot.readString();
        struct.setProcessDtIsSet(true);
      }
      if (incoming.get(43)) {
        struct.processRemark = iprot.readString();
        struct.setProcessRemarkIsSet(true);
      }
      if (incoming.get(44)) {
        struct.owns = iprot.readString();
        struct.setOwnsIsSet(true);
      }
      if (incoming.get(45)) {
        struct.ownNameText = iprot.readString();
        struct.setOwnNameTextIsSet(true);
      }
      if (incoming.get(46)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(47)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(48)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(49)) {
        struct.constructionArea = iprot.readString();
        struct.setConstructionAreaIsSet(true);
      }
      if (incoming.get(50)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(51)) {
        struct.proposerText = iprot.readString();
        struct.setProposerTextIsSet(true);
      }
      if (incoming.get(52)) {
        struct.proposer = iprot.readI32();
        struct.setProposerIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepaymentDivertView implements org.apache.thrift.TBase<RepaymentDivertView, RepaymentDivertView._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentDivertView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentDivertView");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DIVERT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFine", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_BEGIN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFineBeginDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REGULATORY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryUserId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PLAN_BEGIN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planBeginDt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REVIEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewStatus", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_PAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFinePayDt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DIVERT_FINE_PAY_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("divertFinePayAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField IS_RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isReconciliation", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentDivertViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentDivertViewTupleSchemeFactory());
  }

  public String pId; // required
  public double divertAmt; // required
  public double divertFine; // required
  public String divertFineBeginDt; // required
  public int projectId; // required
  public int regulatoryUserId; // required
  public String planBeginDt; // required
  public String remark; // required
  public int reviewStatus; // required
  public String divertFinePayDt; // required
  public double divertFinePayAmt; // required
  public int isReconciliation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    DIVERT_AMT((short)2, "divertAmt"),
    DIVERT_FINE((short)3, "divertFine"),
    DIVERT_FINE_BEGIN_DT((short)4, "divertFineBeginDt"),
    PROJECT_ID((short)5, "projectId"),
    REGULATORY_USER_ID((short)6, "regulatoryUserId"),
    PLAN_BEGIN_DT((short)7, "planBeginDt"),
    REMARK((short)8, "remark"),
    REVIEW_STATUS((short)9, "reviewStatus"),
    DIVERT_FINE_PAY_DT((short)10, "divertFinePayDt"),
    DIVERT_FINE_PAY_AMT((short)11, "divertFinePayAmt"),
    IS_RECONCILIATION((short)12, "isReconciliation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // DIVERT_AMT
          return DIVERT_AMT;
        case 3: // DIVERT_FINE
          return DIVERT_FINE;
        case 4: // DIVERT_FINE_BEGIN_DT
          return DIVERT_FINE_BEGIN_DT;
        case 5: // PROJECT_ID
          return PROJECT_ID;
        case 6: // REGULATORY_USER_ID
          return REGULATORY_USER_ID;
        case 7: // PLAN_BEGIN_DT
          return PLAN_BEGIN_DT;
        case 8: // REMARK
          return REMARK;
        case 9: // REVIEW_STATUS
          return REVIEW_STATUS;
        case 10: // DIVERT_FINE_PAY_DT
          return DIVERT_FINE_PAY_DT;
        case 11: // DIVERT_FINE_PAY_AMT
          return DIVERT_FINE_PAY_AMT;
        case 12: // IS_RECONCILIATION
          return IS_RECONCILIATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIVERTAMT_ISSET_ID = 0;
  private static final int __DIVERTFINE_ISSET_ID = 1;
  private static final int __PROJECTID_ISSET_ID = 2;
  private static final int __REGULATORYUSERID_ISSET_ID = 3;
  private static final int __REVIEWSTATUS_ISSET_ID = 4;
  private static final int __DIVERTFINEPAYAMT_ISSET_ID = 5;
  private static final int __ISRECONCILIATION_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_AMT, new org.apache.thrift.meta_data.FieldMetaData("divertAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIVERT_FINE, new org.apache.thrift.meta_data.FieldMetaData("divertFine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DIVERT_FINE_BEGIN_DT, new org.apache.thrift.meta_data.FieldMetaData("divertFineBeginDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGULATORY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("regulatoryUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_BEGIN_DT, new org.apache.thrift.meta_data.FieldMetaData("planBeginDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVIEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reviewStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIVERT_FINE_PAY_DT, new org.apache.thrift.meta_data.FieldMetaData("divertFinePayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIVERT_FINE_PAY_AMT, new org.apache.thrift.meta_data.FieldMetaData("divertFinePayAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("isReconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentDivertView.class, metaDataMap);
  }

  public RepaymentDivertView() {
  }

  public RepaymentDivertView(
    String pId,
    double divertAmt,
    double divertFine,
    String divertFineBeginDt,
    int projectId,
    int regulatoryUserId,
    String planBeginDt,
    String remark,
    int reviewStatus,
    String divertFinePayDt,
    double divertFinePayAmt,
    int isReconciliation)
  {
    this();
    this.pId = pId;
    this.divertAmt = divertAmt;
    setDivertAmtIsSet(true);
    this.divertFine = divertFine;
    setDivertFineIsSet(true);
    this.divertFineBeginDt = divertFineBeginDt;
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.regulatoryUserId = regulatoryUserId;
    setRegulatoryUserIdIsSet(true);
    this.planBeginDt = planBeginDt;
    this.remark = remark;
    this.reviewStatus = reviewStatus;
    setReviewStatusIsSet(true);
    this.divertFinePayDt = divertFinePayDt;
    this.divertFinePayAmt = divertFinePayAmt;
    setDivertFinePayAmtIsSet(true);
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentDivertView(RepaymentDivertView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPId()) {
      this.pId = other.pId;
    }
    this.divertAmt = other.divertAmt;
    this.divertFine = other.divertFine;
    if (other.isSetDivertFineBeginDt()) {
      this.divertFineBeginDt = other.divertFineBeginDt;
    }
    this.projectId = other.projectId;
    this.regulatoryUserId = other.regulatoryUserId;
    if (other.isSetPlanBeginDt()) {
      this.planBeginDt = other.planBeginDt;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.reviewStatus = other.reviewStatus;
    if (other.isSetDivertFinePayDt()) {
      this.divertFinePayDt = other.divertFinePayDt;
    }
    this.divertFinePayAmt = other.divertFinePayAmt;
    this.isReconciliation = other.isReconciliation;
  }

  public RepaymentDivertView deepCopy() {
    return new RepaymentDivertView(this);
  }

  @Override
  public void clear() {
    this.pId = null;
    setDivertAmtIsSet(false);
    this.divertAmt = 0.0;
    setDivertFineIsSet(false);
    this.divertFine = 0.0;
    this.divertFineBeginDt = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setRegulatoryUserIdIsSet(false);
    this.regulatoryUserId = 0;
    this.planBeginDt = null;
    this.remark = null;
    setReviewStatusIsSet(false);
    this.reviewStatus = 0;
    this.divertFinePayDt = null;
    setDivertFinePayAmtIsSet(false);
    this.divertFinePayAmt = 0.0;
    setIsReconciliationIsSet(false);
    this.isReconciliation = 0;
  }

  public String getPId() {
    return this.pId;
  }

  public RepaymentDivertView setPId(String pId) {
    this.pId = pId;
    return this;
  }

  public void unsetPId() {
    this.pId = null;
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return this.pId != null;
  }

  public void setPIdIsSet(boolean value) {
    if (!value) {
      this.pId = null;
    }
  }

  public double getDivertAmt() {
    return this.divertAmt;
  }

  public RepaymentDivertView setDivertAmt(double divertAmt) {
    this.divertAmt = divertAmt;
    setDivertAmtIsSet(true);
    return this;
  }

  public void unsetDivertAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTAMT_ISSET_ID);
  }

  /** Returns true if field divertAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTAMT_ISSET_ID);
  }

  public void setDivertAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTAMT_ISSET_ID, value);
  }

  public double getDivertFine() {
    return this.divertFine;
  }

  public RepaymentDivertView setDivertFine(double divertFine) {
    this.divertFine = divertFine;
    setDivertFineIsSet(true);
    return this;
  }

  public void unsetDivertFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTFINE_ISSET_ID);
  }

  /** Returns true if field divertFine is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFine() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTFINE_ISSET_ID);
  }

  public void setDivertFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTFINE_ISSET_ID, value);
  }

  public String getDivertFineBeginDt() {
    return this.divertFineBeginDt;
  }

  public RepaymentDivertView setDivertFineBeginDt(String divertFineBeginDt) {
    this.divertFineBeginDt = divertFineBeginDt;
    return this;
  }

  public void unsetDivertFineBeginDt() {
    this.divertFineBeginDt = null;
  }

  /** Returns true if field divertFineBeginDt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFineBeginDt() {
    return this.divertFineBeginDt != null;
  }

  public void setDivertFineBeginDtIsSet(boolean value) {
    if (!value) {
      this.divertFineBeginDt = null;
    }
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepaymentDivertView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getRegulatoryUserId() {
    return this.regulatoryUserId;
  }

  public RepaymentDivertView setRegulatoryUserId(int regulatoryUserId) {
    this.regulatoryUserId = regulatoryUserId;
    setRegulatoryUserIdIsSet(true);
    return this;
  }

  public void unsetRegulatoryUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID);
  }

  /** Returns true if field regulatoryUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID);
  }

  public void setRegulatoryUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID, value);
  }

  public String getPlanBeginDt() {
    return this.planBeginDt;
  }

  public RepaymentDivertView setPlanBeginDt(String planBeginDt) {
    this.planBeginDt = planBeginDt;
    return this;
  }

  public void unsetPlanBeginDt() {
    this.planBeginDt = null;
  }

  /** Returns true if field planBeginDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanBeginDt() {
    return this.planBeginDt != null;
  }

  public void setPlanBeginDtIsSet(boolean value) {
    if (!value) {
      this.planBeginDt = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public RepaymentDivertView setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getReviewStatus() {
    return this.reviewStatus;
  }

  public RepaymentDivertView setReviewStatus(int reviewStatus) {
    this.reviewStatus = reviewStatus;
    setReviewStatusIsSet(true);
    return this;
  }

  public void unsetReviewStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID);
  }

  /** Returns true if field reviewStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID);
  }

  public void setReviewStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEWSTATUS_ISSET_ID, value);
  }

  public String getDivertFinePayDt() {
    return this.divertFinePayDt;
  }

  public RepaymentDivertView setDivertFinePayDt(String divertFinePayDt) {
    this.divertFinePayDt = divertFinePayDt;
    return this;
  }

  public void unsetDivertFinePayDt() {
    this.divertFinePayDt = null;
  }

  /** Returns true if field divertFinePayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFinePayDt() {
    return this.divertFinePayDt != null;
  }

  public void setDivertFinePayDtIsSet(boolean value) {
    if (!value) {
      this.divertFinePayDt = null;
    }
  }

  public double getDivertFinePayAmt() {
    return this.divertFinePayAmt;
  }

  public RepaymentDivertView setDivertFinePayAmt(double divertFinePayAmt) {
    this.divertFinePayAmt = divertFinePayAmt;
    setDivertFinePayAmtIsSet(true);
    return this;
  }

  public void unsetDivertFinePayAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVERTFINEPAYAMT_ISSET_ID);
  }

  /** Returns true if field divertFinePayAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetDivertFinePayAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVERTFINEPAYAMT_ISSET_ID);
  }

  public void setDivertFinePayAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVERTFINEPAYAMT_ISSET_ID, value);
  }

  public int getIsReconciliation() {
    return this.isReconciliation;
  }

  public RepaymentDivertView setIsReconciliation(int isReconciliation) {
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    return this;
  }

  public void unsetIsReconciliation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  /** Returns true if field isReconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReconciliation() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  public void setIsReconciliationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((String)value);
      }
      break;

    case DIVERT_AMT:
      if (value == null) {
        unsetDivertAmt();
      } else {
        setDivertAmt((Double)value);
      }
      break;

    case DIVERT_FINE:
      if (value == null) {
        unsetDivertFine();
      } else {
        setDivertFine((Double)value);
      }
      break;

    case DIVERT_FINE_BEGIN_DT:
      if (value == null) {
        unsetDivertFineBeginDt();
      } else {
        setDivertFineBeginDt((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case REGULATORY_USER_ID:
      if (value == null) {
        unsetRegulatoryUserId();
      } else {
        setRegulatoryUserId((Integer)value);
      }
      break;

    case PLAN_BEGIN_DT:
      if (value == null) {
        unsetPlanBeginDt();
      } else {
        setPlanBeginDt((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case REVIEW_STATUS:
      if (value == null) {
        unsetReviewStatus();
      } else {
        setReviewStatus((Integer)value);
      }
      break;

    case DIVERT_FINE_PAY_DT:
      if (value == null) {
        unsetDivertFinePayDt();
      } else {
        setDivertFinePayDt((String)value);
      }
      break;

    case DIVERT_FINE_PAY_AMT:
      if (value == null) {
        unsetDivertFinePayAmt();
      } else {
        setDivertFinePayAmt((Double)value);
      }
      break;

    case IS_RECONCILIATION:
      if (value == null) {
        unsetIsReconciliation();
      } else {
        setIsReconciliation((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case DIVERT_AMT:
      return Double.valueOf(getDivertAmt());

    case DIVERT_FINE:
      return Double.valueOf(getDivertFine());

    case DIVERT_FINE_BEGIN_DT:
      return getDivertFineBeginDt();

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case REGULATORY_USER_ID:
      return Integer.valueOf(getRegulatoryUserId());

    case PLAN_BEGIN_DT:
      return getPlanBeginDt();

    case REMARK:
      return getRemark();

    case REVIEW_STATUS:
      return Integer.valueOf(getReviewStatus());

    case DIVERT_FINE_PAY_DT:
      return getDivertFinePayDt();

    case DIVERT_FINE_PAY_AMT:
      return Double.valueOf(getDivertFinePayAmt());

    case IS_RECONCILIATION:
      return Integer.valueOf(getIsReconciliation());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case DIVERT_AMT:
      return isSetDivertAmt();
    case DIVERT_FINE:
      return isSetDivertFine();
    case DIVERT_FINE_BEGIN_DT:
      return isSetDivertFineBeginDt();
    case PROJECT_ID:
      return isSetProjectId();
    case REGULATORY_USER_ID:
      return isSetRegulatoryUserId();
    case PLAN_BEGIN_DT:
      return isSetPlanBeginDt();
    case REMARK:
      return isSetRemark();
    case REVIEW_STATUS:
      return isSetReviewStatus();
    case DIVERT_FINE_PAY_DT:
      return isSetDivertFinePayDt();
    case DIVERT_FINE_PAY_AMT:
      return isSetDivertFinePayAmt();
    case IS_RECONCILIATION:
      return isSetIsReconciliation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentDivertView)
      return this.equals((RepaymentDivertView)that);
    return false;
  }

  public boolean equals(RepaymentDivertView that) {
    if (that == null)
      return false;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (!this.pId.equals(that.pId))
        return false;
    }

    boolean this_present_divertAmt = true;
    boolean that_present_divertAmt = true;
    if (this_present_divertAmt || that_present_divertAmt) {
      if (!(this_present_divertAmt && that_present_divertAmt))
        return false;
      if (this.divertAmt != that.divertAmt)
        return false;
    }

    boolean this_present_divertFine = true;
    boolean that_present_divertFine = true;
    if (this_present_divertFine || that_present_divertFine) {
      if (!(this_present_divertFine && that_present_divertFine))
        return false;
      if (this.divertFine != that.divertFine)
        return false;
    }

    boolean this_present_divertFineBeginDt = true && this.isSetDivertFineBeginDt();
    boolean that_present_divertFineBeginDt = true && that.isSetDivertFineBeginDt();
    if (this_present_divertFineBeginDt || that_present_divertFineBeginDt) {
      if (!(this_present_divertFineBeginDt && that_present_divertFineBeginDt))
        return false;
      if (!this.divertFineBeginDt.equals(that.divertFineBeginDt))
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_regulatoryUserId = true;
    boolean that_present_regulatoryUserId = true;
    if (this_present_regulatoryUserId || that_present_regulatoryUserId) {
      if (!(this_present_regulatoryUserId && that_present_regulatoryUserId))
        return false;
      if (this.regulatoryUserId != that.regulatoryUserId)
        return false;
    }

    boolean this_present_planBeginDt = true && this.isSetPlanBeginDt();
    boolean that_present_planBeginDt = true && that.isSetPlanBeginDt();
    if (this_present_planBeginDt || that_present_planBeginDt) {
      if (!(this_present_planBeginDt && that_present_planBeginDt))
        return false;
      if (!this.planBeginDt.equals(that.planBeginDt))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_reviewStatus = true;
    boolean that_present_reviewStatus = true;
    if (this_present_reviewStatus || that_present_reviewStatus) {
      if (!(this_present_reviewStatus && that_present_reviewStatus))
        return false;
      if (this.reviewStatus != that.reviewStatus)
        return false;
    }

    boolean this_present_divertFinePayDt = true && this.isSetDivertFinePayDt();
    boolean that_present_divertFinePayDt = true && that.isSetDivertFinePayDt();
    if (this_present_divertFinePayDt || that_present_divertFinePayDt) {
      if (!(this_present_divertFinePayDt && that_present_divertFinePayDt))
        return false;
      if (!this.divertFinePayDt.equals(that.divertFinePayDt))
        return false;
    }

    boolean this_present_divertFinePayAmt = true;
    boolean that_present_divertFinePayAmt = true;
    if (this_present_divertFinePayAmt || that_present_divertFinePayAmt) {
      if (!(this_present_divertFinePayAmt && that_present_divertFinePayAmt))
        return false;
      if (this.divertFinePayAmt != that.divertFinePayAmt)
        return false;
    }

    boolean this_present_isReconciliation = true;
    boolean that_present_isReconciliation = true;
    if (this_present_isReconciliation || that_present_isReconciliation) {
      if (!(this_present_isReconciliation && that_present_isReconciliation))
        return false;
      if (this.isReconciliation != that.isReconciliation)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_divertAmt = true;
    list.add(present_divertAmt);
    if (present_divertAmt)
      list.add(divertAmt);

    boolean present_divertFine = true;
    list.add(present_divertFine);
    if (present_divertFine)
      list.add(divertFine);

    boolean present_divertFineBeginDt = true && (isSetDivertFineBeginDt());
    list.add(present_divertFineBeginDt);
    if (present_divertFineBeginDt)
      list.add(divertFineBeginDt);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_regulatoryUserId = true;
    list.add(present_regulatoryUserId);
    if (present_regulatoryUserId)
      list.add(regulatoryUserId);

    boolean present_planBeginDt = true && (isSetPlanBeginDt());
    list.add(present_planBeginDt);
    if (present_planBeginDt)
      list.add(planBeginDt);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_reviewStatus = true;
    list.add(present_reviewStatus);
    if (present_reviewStatus)
      list.add(reviewStatus);

    boolean present_divertFinePayDt = true && (isSetDivertFinePayDt());
    list.add(present_divertFinePayDt);
    if (present_divertFinePayDt)
      list.add(divertFinePayDt);

    boolean present_divertFinePayAmt = true;
    list.add(present_divertFinePayAmt);
    if (present_divertFinePayAmt)
      list.add(divertFinePayAmt);

    boolean present_isReconciliation = true;
    list.add(present_isReconciliation);
    if (present_isReconciliation)
      list.add(isReconciliation);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentDivertView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertAmt()).compareTo(other.isSetDivertAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertAmt, other.divertAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFine()).compareTo(other.isSetDivertFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFine, other.divertFine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFineBeginDt()).compareTo(other.isSetDivertFineBeginDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFineBeginDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFineBeginDt, other.divertFineBeginDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryUserId()).compareTo(other.isSetRegulatoryUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryUserId, other.regulatoryUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanBeginDt()).compareTo(other.isSetPlanBeginDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanBeginDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planBeginDt, other.planBeginDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewStatus()).compareTo(other.isSetReviewStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewStatus, other.reviewStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFinePayDt()).compareTo(other.isSetDivertFinePayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFinePayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFinePayDt, other.divertFinePayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivertFinePayAmt()).compareTo(other.isSetDivertFinePayAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivertFinePayAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divertFinePayAmt, other.divertFinePayAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReconciliation()).compareTo(other.isSetIsReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReconciliation, other.isReconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentDivertView(");
    boolean first = true;

    sb.append("pId:");
    if (this.pId == null) {
      sb.append("null");
    } else {
      sb.append(this.pId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertAmt:");
    sb.append(this.divertAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFine:");
    sb.append(this.divertFine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFineBeginDt:");
    if (this.divertFineBeginDt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertFineBeginDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryUserId:");
    sb.append(this.regulatoryUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planBeginDt:");
    if (this.planBeginDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planBeginDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewStatus:");
    sb.append(this.reviewStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFinePayDt:");
    if (this.divertFinePayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.divertFinePayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("divertFinePayAmt:");
    sb.append(this.divertFinePayAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReconciliation:");
    sb.append(this.isReconciliation);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentDivertViewStandardSchemeFactory implements SchemeFactory {
    public RepaymentDivertViewStandardScheme getScheme() {
      return new RepaymentDivertViewStandardScheme();
    }
  }

  private static class RepaymentDivertViewStandardScheme extends StandardScheme<RepaymentDivertView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentDivertView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pId = iprot.readString();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIVERT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.divertAmt = iprot.readDouble();
              struct.setDivertAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIVERT_FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.divertFine = iprot.readDouble();
              struct.setDivertFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIVERT_FINE_BEGIN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertFineBeginDt = iprot.readString();
              struct.setDivertFineBeginDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REGULATORY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regulatoryUserId = iprot.readI32();
              struct.setRegulatoryUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAN_BEGIN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planBeginDt = iprot.readString();
              struct.setPlanBeginDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REVIEW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reviewStatus = iprot.readI32();
              struct.setReviewStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DIVERT_FINE_PAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.divertFinePayDt = iprot.readString();
              struct.setDivertFinePayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DIVERT_FINE_PAY_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.divertFinePayAmt = iprot.readDouble();
              struct.setDivertFinePayAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReconciliation = iprot.readI32();
              struct.setIsReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentDivertView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pId != null) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeString(struct.pId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIVERT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.divertAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIVERT_FINE_FIELD_DESC);
      oprot.writeDouble(struct.divertFine);
      oprot.writeFieldEnd();
      if (struct.divertFineBeginDt != null) {
        oprot.writeFieldBegin(DIVERT_FINE_BEGIN_DT_FIELD_DESC);
        oprot.writeString(struct.divertFineBeginDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGULATORY_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.regulatoryUserId);
      oprot.writeFieldEnd();
      if (struct.planBeginDt != null) {
        oprot.writeFieldBegin(PLAN_BEGIN_DT_FIELD_DESC);
        oprot.writeString(struct.planBeginDt);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVIEW_STATUS_FIELD_DESC);
      oprot.writeI32(struct.reviewStatus);
      oprot.writeFieldEnd();
      if (struct.divertFinePayDt != null) {
        oprot.writeFieldBegin(DIVERT_FINE_PAY_DT_FIELD_DESC);
        oprot.writeString(struct.divertFinePayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIVERT_FINE_PAY_AMT_FIELD_DESC);
      oprot.writeDouble(struct.divertFinePayAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RECONCILIATION_FIELD_DESC);
      oprot.writeI32(struct.isReconciliation);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentDivertViewTupleSchemeFactory implements SchemeFactory {
    public RepaymentDivertViewTupleScheme getScheme() {
      return new RepaymentDivertViewTupleScheme();
    }
  }

  private static class RepaymentDivertViewTupleScheme extends TupleScheme<RepaymentDivertView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentDivertView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetDivertAmt()) {
        optionals.set(1);
      }
      if (struct.isSetDivertFine()) {
        optionals.set(2);
      }
      if (struct.isSetDivertFineBeginDt()) {
        optionals.set(3);
      }
      if (struct.isSetProjectId()) {
        optionals.set(4);
      }
      if (struct.isSetRegulatoryUserId()) {
        optionals.set(5);
      }
      if (struct.isSetPlanBeginDt()) {
        optionals.set(6);
      }
      if (struct.isSetRemark()) {
        optionals.set(7);
      }
      if (struct.isSetReviewStatus()) {
        optionals.set(8);
      }
      if (struct.isSetDivertFinePayDt()) {
        optionals.set(9);
      }
      if (struct.isSetDivertFinePayAmt()) {
        optionals.set(10);
      }
      if (struct.isSetIsReconciliation()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPId()) {
        oprot.writeString(struct.pId);
      }
      if (struct.isSetDivertAmt()) {
        oprot.writeDouble(struct.divertAmt);
      }
      if (struct.isSetDivertFine()) {
        oprot.writeDouble(struct.divertFine);
      }
      if (struct.isSetDivertFineBeginDt()) {
        oprot.writeString(struct.divertFineBeginDt);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetRegulatoryUserId()) {
        oprot.writeI32(struct.regulatoryUserId);
      }
      if (struct.isSetPlanBeginDt()) {
        oprot.writeString(struct.planBeginDt);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetReviewStatus()) {
        oprot.writeI32(struct.reviewStatus);
      }
      if (struct.isSetDivertFinePayDt()) {
        oprot.writeString(struct.divertFinePayDt);
      }
      if (struct.isSetDivertFinePayAmt()) {
        oprot.writeDouble(struct.divertFinePayAmt);
      }
      if (struct.isSetIsReconciliation()) {
        oprot.writeI32(struct.isReconciliation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentDivertView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pId = iprot.readString();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.divertAmt = iprot.readDouble();
        struct.setDivertAmtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.divertFine = iprot.readDouble();
        struct.setDivertFineIsSet(true);
      }
      if (incoming.get(3)) {
        struct.divertFineBeginDt = iprot.readString();
        struct.setDivertFineBeginDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.regulatoryUserId = iprot.readI32();
        struct.setRegulatoryUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.planBeginDt = iprot.readString();
        struct.setPlanBeginDtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.reviewStatus = iprot.readI32();
        struct.setReviewStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.divertFinePayDt = iprot.readString();
        struct.setDivertFinePayDtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.divertFinePayAmt = iprot.readDouble();
        struct.setDivertFinePayAmtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isReconciliation = iprot.readI32();
        struct.setIsReconciliationIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizProjectMeetingDTO implements org.apache.thrift.TBase<BizProjectMeetingDTO, BizProjectMeetingDTO._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectMeetingDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectMeetingDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEETING_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingDttm", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECORD_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordUserId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ALL_MEETING_MEMBERS_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("allMeetingMembersPID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ALL_BIZ_MEETING_MINUTES_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("allBizMeetingMinutesMember", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MEETING_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingLocation", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MEETING_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingResult", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MEETING_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingNum", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectMeetingDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectMeetingDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String meetingDttm; // required
  public int recordUserId; // required
  public String allMeetingMembersPID; // required
  public String allBizMeetingMinutesMember; // required
  public String meetingLocation; // required
  public String meetingResult; // required
  public String userName; // required
  public String meetingNum; // required
  public int meetingId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    MEETING_DTTM((short)3, "meetingDttm"),
    RECORD_USER_ID((short)4, "recordUserId"),
    ALL_MEETING_MEMBERS_PID((short)5, "allMeetingMembersPID"),
    ALL_BIZ_MEETING_MINUTES_MEMBER((short)6, "allBizMeetingMinutesMember"),
    MEETING_LOCATION((short)7, "meetingLocation"),
    MEETING_RESULT((short)8, "meetingResult"),
    USER_NAME((short)9, "userName"),
    MEETING_NUM((short)10, "meetingNum"),
    MEETING_ID((short)11, "meetingId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // MEETING_DTTM
          return MEETING_DTTM;
        case 4: // RECORD_USER_ID
          return RECORD_USER_ID;
        case 5: // ALL_MEETING_MEMBERS_PID
          return ALL_MEETING_MEMBERS_PID;
        case 6: // ALL_BIZ_MEETING_MINUTES_MEMBER
          return ALL_BIZ_MEETING_MINUTES_MEMBER;
        case 7: // MEETING_LOCATION
          return MEETING_LOCATION;
        case 8: // MEETING_RESULT
          return MEETING_RESULT;
        case 9: // USER_NAME
          return USER_NAME;
        case 10: // MEETING_NUM
          return MEETING_NUM;
        case 11: // MEETING_ID
          return MEETING_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __RECORDUSERID_ISSET_ID = 2;
  private static final int __MEETINGID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEETING_DTTM, new org.apache.thrift.meta_data.FieldMetaData("meetingDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("recordUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALL_MEETING_MEMBERS_PID, new org.apache.thrift.meta_data.FieldMetaData("allMeetingMembersPID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALL_BIZ_MEETING_MINUTES_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("allBizMeetingMinutesMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETING_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("meetingLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETING_RESULT, new org.apache.thrift.meta_data.FieldMetaData("meetingResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETING_NUM, new org.apache.thrift.meta_data.FieldMetaData("meetingNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectMeetingDTO.class, metaDataMap);
  }

  public BizProjectMeetingDTO() {
  }

  public BizProjectMeetingDTO(
    int pid,
    int projectId,
    String meetingDttm,
    int recordUserId,
    String allMeetingMembersPID,
    String allBizMeetingMinutesMember,
    String meetingLocation,
    String meetingResult,
    String userName,
    String meetingNum,
    int meetingId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.meetingDttm = meetingDttm;
    this.recordUserId = recordUserId;
    setRecordUserIdIsSet(true);
    this.allMeetingMembersPID = allMeetingMembersPID;
    this.allBizMeetingMinutesMember = allBizMeetingMinutesMember;
    this.meetingLocation = meetingLocation;
    this.meetingResult = meetingResult;
    this.userName = userName;
    this.meetingNum = meetingNum;
    this.meetingId = meetingId;
    setMeetingIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectMeetingDTO(BizProjectMeetingDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetMeetingDttm()) {
      this.meetingDttm = other.meetingDttm;
    }
    this.recordUserId = other.recordUserId;
    if (other.isSetAllMeetingMembersPID()) {
      this.allMeetingMembersPID = other.allMeetingMembersPID;
    }
    if (other.isSetAllBizMeetingMinutesMember()) {
      this.allBizMeetingMinutesMember = other.allBizMeetingMinutesMember;
    }
    if (other.isSetMeetingLocation()) {
      this.meetingLocation = other.meetingLocation;
    }
    if (other.isSetMeetingResult()) {
      this.meetingResult = other.meetingResult;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetMeetingNum()) {
      this.meetingNum = other.meetingNum;
    }
    this.meetingId = other.meetingId;
  }

  public BizProjectMeetingDTO deepCopy() {
    return new BizProjectMeetingDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.meetingDttm = null;
    setRecordUserIdIsSet(false);
    this.recordUserId = 0;
    this.allMeetingMembersPID = null;
    this.allBizMeetingMinutesMember = null;
    this.meetingLocation = null;
    this.meetingResult = null;
    this.userName = null;
    this.meetingNum = null;
    setMeetingIdIsSet(false);
    this.meetingId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectMeetingDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizProjectMeetingDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getMeetingDttm() {
    return this.meetingDttm;
  }

  public BizProjectMeetingDTO setMeetingDttm(String meetingDttm) {
    this.meetingDttm = meetingDttm;
    return this;
  }

  public void unsetMeetingDttm() {
    this.meetingDttm = null;
  }

  /** Returns true if field meetingDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingDttm() {
    return this.meetingDttm != null;
  }

  public void setMeetingDttmIsSet(boolean value) {
    if (!value) {
      this.meetingDttm = null;
    }
  }

  public int getRecordUserId() {
    return this.recordUserId;
  }

  public BizProjectMeetingDTO setRecordUserId(int recordUserId) {
    this.recordUserId = recordUserId;
    setRecordUserIdIsSet(true);
    return this;
  }

  public void unsetRecordUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDUSERID_ISSET_ID);
  }

  /** Returns true if field recordUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDUSERID_ISSET_ID);
  }

  public void setRecordUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDUSERID_ISSET_ID, value);
  }

  public String getAllMeetingMembersPID() {
    return this.allMeetingMembersPID;
  }

  public BizProjectMeetingDTO setAllMeetingMembersPID(String allMeetingMembersPID) {
    this.allMeetingMembersPID = allMeetingMembersPID;
    return this;
  }

  public void unsetAllMeetingMembersPID() {
    this.allMeetingMembersPID = null;
  }

  /** Returns true if field allMeetingMembersPID is set (has been assigned a value) and false otherwise */
  public boolean isSetAllMeetingMembersPID() {
    return this.allMeetingMembersPID != null;
  }

  public void setAllMeetingMembersPIDIsSet(boolean value) {
    if (!value) {
      this.allMeetingMembersPID = null;
    }
  }

  public String getAllBizMeetingMinutesMember() {
    return this.allBizMeetingMinutesMember;
  }

  public BizProjectMeetingDTO setAllBizMeetingMinutesMember(String allBizMeetingMinutesMember) {
    this.allBizMeetingMinutesMember = allBizMeetingMinutesMember;
    return this;
  }

  public void unsetAllBizMeetingMinutesMember() {
    this.allBizMeetingMinutesMember = null;
  }

  /** Returns true if field allBizMeetingMinutesMember is set (has been assigned a value) and false otherwise */
  public boolean isSetAllBizMeetingMinutesMember() {
    return this.allBizMeetingMinutesMember != null;
  }

  public void setAllBizMeetingMinutesMemberIsSet(boolean value) {
    if (!value) {
      this.allBizMeetingMinutesMember = null;
    }
  }

  public String getMeetingLocation() {
    return this.meetingLocation;
  }

  public BizProjectMeetingDTO setMeetingLocation(String meetingLocation) {
    this.meetingLocation = meetingLocation;
    return this;
  }

  public void unsetMeetingLocation() {
    this.meetingLocation = null;
  }

  /** Returns true if field meetingLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingLocation() {
    return this.meetingLocation != null;
  }

  public void setMeetingLocationIsSet(boolean value) {
    if (!value) {
      this.meetingLocation = null;
    }
  }

  public String getMeetingResult() {
    return this.meetingResult;
  }

  public BizProjectMeetingDTO setMeetingResult(String meetingResult) {
    this.meetingResult = meetingResult;
    return this;
  }

  public void unsetMeetingResult() {
    this.meetingResult = null;
  }

  /** Returns true if field meetingResult is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingResult() {
    return this.meetingResult != null;
  }

  public void setMeetingResultIsSet(boolean value) {
    if (!value) {
      this.meetingResult = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public BizProjectMeetingDTO setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getMeetingNum() {
    return this.meetingNum;
  }

  public BizProjectMeetingDTO setMeetingNum(String meetingNum) {
    this.meetingNum = meetingNum;
    return this;
  }

  public void unsetMeetingNum() {
    this.meetingNum = null;
  }

  /** Returns true if field meetingNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingNum() {
    return this.meetingNum != null;
  }

  public void setMeetingNumIsSet(boolean value) {
    if (!value) {
      this.meetingNum = null;
    }
  }

  public int getMeetingId() {
    return this.meetingId;
  }

  public BizProjectMeetingDTO setMeetingId(int meetingId) {
    this.meetingId = meetingId;
    setMeetingIdIsSet(true);
    return this;
  }

  public void unsetMeetingId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
  }

  /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
  }

  public void setMeetingIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case MEETING_DTTM:
      if (value == null) {
        unsetMeetingDttm();
      } else {
        setMeetingDttm((String)value);
      }
      break;

    case RECORD_USER_ID:
      if (value == null) {
        unsetRecordUserId();
      } else {
        setRecordUserId((Integer)value);
      }
      break;

    case ALL_MEETING_MEMBERS_PID:
      if (value == null) {
        unsetAllMeetingMembersPID();
      } else {
        setAllMeetingMembersPID((String)value);
      }
      break;

    case ALL_BIZ_MEETING_MINUTES_MEMBER:
      if (value == null) {
        unsetAllBizMeetingMinutesMember();
      } else {
        setAllBizMeetingMinutesMember((String)value);
      }
      break;

    case MEETING_LOCATION:
      if (value == null) {
        unsetMeetingLocation();
      } else {
        setMeetingLocation((String)value);
      }
      break;

    case MEETING_RESULT:
      if (value == null) {
        unsetMeetingResult();
      } else {
        setMeetingResult((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case MEETING_NUM:
      if (value == null) {
        unsetMeetingNum();
      } else {
        setMeetingNum((String)value);
      }
      break;

    case MEETING_ID:
      if (value == null) {
        unsetMeetingId();
      } else {
        setMeetingId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case MEETING_DTTM:
      return getMeetingDttm();

    case RECORD_USER_ID:
      return Integer.valueOf(getRecordUserId());

    case ALL_MEETING_MEMBERS_PID:
      return getAllMeetingMembersPID();

    case ALL_BIZ_MEETING_MINUTES_MEMBER:
      return getAllBizMeetingMinutesMember();

    case MEETING_LOCATION:
      return getMeetingLocation();

    case MEETING_RESULT:
      return getMeetingResult();

    case USER_NAME:
      return getUserName();

    case MEETING_NUM:
      return getMeetingNum();

    case MEETING_ID:
      return Integer.valueOf(getMeetingId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case MEETING_DTTM:
      return isSetMeetingDttm();
    case RECORD_USER_ID:
      return isSetRecordUserId();
    case ALL_MEETING_MEMBERS_PID:
      return isSetAllMeetingMembersPID();
    case ALL_BIZ_MEETING_MINUTES_MEMBER:
      return isSetAllBizMeetingMinutesMember();
    case MEETING_LOCATION:
      return isSetMeetingLocation();
    case MEETING_RESULT:
      return isSetMeetingResult();
    case USER_NAME:
      return isSetUserName();
    case MEETING_NUM:
      return isSetMeetingNum();
    case MEETING_ID:
      return isSetMeetingId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectMeetingDTO)
      return this.equals((BizProjectMeetingDTO)that);
    return false;
  }

  public boolean equals(BizProjectMeetingDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_meetingDttm = true && this.isSetMeetingDttm();
    boolean that_present_meetingDttm = true && that.isSetMeetingDttm();
    if (this_present_meetingDttm || that_present_meetingDttm) {
      if (!(this_present_meetingDttm && that_present_meetingDttm))
        return false;
      if (!this.meetingDttm.equals(that.meetingDttm))
        return false;
    }

    boolean this_present_recordUserId = true;
    boolean that_present_recordUserId = true;
    if (this_present_recordUserId || that_present_recordUserId) {
      if (!(this_present_recordUserId && that_present_recordUserId))
        return false;
      if (this.recordUserId != that.recordUserId)
        return false;
    }

    boolean this_present_allMeetingMembersPID = true && this.isSetAllMeetingMembersPID();
    boolean that_present_allMeetingMembersPID = true && that.isSetAllMeetingMembersPID();
    if (this_present_allMeetingMembersPID || that_present_allMeetingMembersPID) {
      if (!(this_present_allMeetingMembersPID && that_present_allMeetingMembersPID))
        return false;
      if (!this.allMeetingMembersPID.equals(that.allMeetingMembersPID))
        return false;
    }

    boolean this_present_allBizMeetingMinutesMember = true && this.isSetAllBizMeetingMinutesMember();
    boolean that_present_allBizMeetingMinutesMember = true && that.isSetAllBizMeetingMinutesMember();
    if (this_present_allBizMeetingMinutesMember || that_present_allBizMeetingMinutesMember) {
      if (!(this_present_allBizMeetingMinutesMember && that_present_allBizMeetingMinutesMember))
        return false;
      if (!this.allBizMeetingMinutesMember.equals(that.allBizMeetingMinutesMember))
        return false;
    }

    boolean this_present_meetingLocation = true && this.isSetMeetingLocation();
    boolean that_present_meetingLocation = true && that.isSetMeetingLocation();
    if (this_present_meetingLocation || that_present_meetingLocation) {
      if (!(this_present_meetingLocation && that_present_meetingLocation))
        return false;
      if (!this.meetingLocation.equals(that.meetingLocation))
        return false;
    }

    boolean this_present_meetingResult = true && this.isSetMeetingResult();
    boolean that_present_meetingResult = true && that.isSetMeetingResult();
    if (this_present_meetingResult || that_present_meetingResult) {
      if (!(this_present_meetingResult && that_present_meetingResult))
        return false;
      if (!this.meetingResult.equals(that.meetingResult))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_meetingNum = true && this.isSetMeetingNum();
    boolean that_present_meetingNum = true && that.isSetMeetingNum();
    if (this_present_meetingNum || that_present_meetingNum) {
      if (!(this_present_meetingNum && that_present_meetingNum))
        return false;
      if (!this.meetingNum.equals(that.meetingNum))
        return false;
    }

    boolean this_present_meetingId = true;
    boolean that_present_meetingId = true;
    if (this_present_meetingId || that_present_meetingId) {
      if (!(this_present_meetingId && that_present_meetingId))
        return false;
      if (this.meetingId != that.meetingId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_meetingDttm = true && (isSetMeetingDttm());
    list.add(present_meetingDttm);
    if (present_meetingDttm)
      list.add(meetingDttm);

    boolean present_recordUserId = true;
    list.add(present_recordUserId);
    if (present_recordUserId)
      list.add(recordUserId);

    boolean present_allMeetingMembersPID = true && (isSetAllMeetingMembersPID());
    list.add(present_allMeetingMembersPID);
    if (present_allMeetingMembersPID)
      list.add(allMeetingMembersPID);

    boolean present_allBizMeetingMinutesMember = true && (isSetAllBizMeetingMinutesMember());
    list.add(present_allBizMeetingMinutesMember);
    if (present_allBizMeetingMinutesMember)
      list.add(allBizMeetingMinutesMember);

    boolean present_meetingLocation = true && (isSetMeetingLocation());
    list.add(present_meetingLocation);
    if (present_meetingLocation)
      list.add(meetingLocation);

    boolean present_meetingResult = true && (isSetMeetingResult());
    list.add(present_meetingResult);
    if (present_meetingResult)
      list.add(meetingResult);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_meetingNum = true && (isSetMeetingNum());
    list.add(present_meetingNum);
    if (present_meetingNum)
      list.add(meetingNum);

    boolean present_meetingId = true;
    list.add(present_meetingId);
    if (present_meetingId)
      list.add(meetingId);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectMeetingDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingDttm()).compareTo(other.isSetMeetingDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingDttm, other.meetingDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordUserId()).compareTo(other.isSetRecordUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordUserId, other.recordUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllMeetingMembersPID()).compareTo(other.isSetAllMeetingMembersPID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllMeetingMembersPID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allMeetingMembersPID, other.allMeetingMembersPID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllBizMeetingMinutesMember()).compareTo(other.isSetAllBizMeetingMinutesMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllBizMeetingMinutesMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allBizMeetingMinutesMember, other.allBizMeetingMinutesMember);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingLocation()).compareTo(other.isSetMeetingLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingLocation, other.meetingLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingResult()).compareTo(other.isSetMeetingResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingResult, other.meetingResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingNum()).compareTo(other.isSetMeetingNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingNum, other.meetingNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectMeetingDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingDttm:");
    if (this.meetingDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordUserId:");
    sb.append(this.recordUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allMeetingMembersPID:");
    if (this.allMeetingMembersPID == null) {
      sb.append("null");
    } else {
      sb.append(this.allMeetingMembersPID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allBizMeetingMinutesMember:");
    if (this.allBizMeetingMinutesMember == null) {
      sb.append("null");
    } else {
      sb.append(this.allBizMeetingMinutesMember);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingLocation:");
    if (this.meetingLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingResult:");
    if (this.meetingResult == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingNum:");
    if (this.meetingNum == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingId:");
    sb.append(this.meetingId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectMeetingDTOStandardSchemeFactory implements SchemeFactory {
    public BizProjectMeetingDTOStandardScheme getScheme() {
      return new BizProjectMeetingDTOStandardScheme();
    }
  }

  private static class BizProjectMeetingDTOStandardScheme extends StandardScheme<BizProjectMeetingDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectMeetingDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEETING_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingDttm = iprot.readString();
              struct.setMeetingDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECORD_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordUserId = iprot.readI32();
              struct.setRecordUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALL_MEETING_MEMBERS_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allMeetingMembersPID = iprot.readString();
              struct.setAllMeetingMembersPIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALL_BIZ_MEETING_MINUTES_MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allBizMeetingMinutesMember = iprot.readString();
              struct.setAllBizMeetingMinutesMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEETING_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingLocation = iprot.readString();
              struct.setMeetingLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEETING_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingResult = iprot.readString();
              struct.setMeetingResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MEETING_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingNum = iprot.readString();
              struct.setMeetingNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MEETING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.meetingId = iprot.readI32();
              struct.setMeetingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectMeetingDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.meetingDttm != null) {
        oprot.writeFieldBegin(MEETING_DTTM_FIELD_DESC);
        oprot.writeString(struct.meetingDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECORD_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.recordUserId);
      oprot.writeFieldEnd();
      if (struct.allMeetingMembersPID != null) {
        oprot.writeFieldBegin(ALL_MEETING_MEMBERS_PID_FIELD_DESC);
        oprot.writeString(struct.allMeetingMembersPID);
        oprot.writeFieldEnd();
      }
      if (struct.allBizMeetingMinutesMember != null) {
        oprot.writeFieldBegin(ALL_BIZ_MEETING_MINUTES_MEMBER_FIELD_DESC);
        oprot.writeString(struct.allBizMeetingMinutesMember);
        oprot.writeFieldEnd();
      }
      if (struct.meetingLocation != null) {
        oprot.writeFieldBegin(MEETING_LOCATION_FIELD_DESC);
        oprot.writeString(struct.meetingLocation);
        oprot.writeFieldEnd();
      }
      if (struct.meetingResult != null) {
        oprot.writeFieldBegin(MEETING_RESULT_FIELD_DESC);
        oprot.writeString(struct.meetingResult);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.meetingNum != null) {
        oprot.writeFieldBegin(MEETING_NUM_FIELD_DESC);
        oprot.writeString(struct.meetingNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
      oprot.writeI32(struct.meetingId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectMeetingDTOTupleSchemeFactory implements SchemeFactory {
    public BizProjectMeetingDTOTupleScheme getScheme() {
      return new BizProjectMeetingDTOTupleScheme();
    }
  }

  private static class BizProjectMeetingDTOTupleScheme extends TupleScheme<BizProjectMeetingDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectMeetingDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetMeetingDttm()) {
        optionals.set(2);
      }
      if (struct.isSetRecordUserId()) {
        optionals.set(3);
      }
      if (struct.isSetAllMeetingMembersPID()) {
        optionals.set(4);
      }
      if (struct.isSetAllBizMeetingMinutesMember()) {
        optionals.set(5);
      }
      if (struct.isSetMeetingLocation()) {
        optionals.set(6);
      }
      if (struct.isSetMeetingResult()) {
        optionals.set(7);
      }
      if (struct.isSetUserName()) {
        optionals.set(8);
      }
      if (struct.isSetMeetingNum()) {
        optionals.set(9);
      }
      if (struct.isSetMeetingId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetMeetingDttm()) {
        oprot.writeString(struct.meetingDttm);
      }
      if (struct.isSetRecordUserId()) {
        oprot.writeI32(struct.recordUserId);
      }
      if (struct.isSetAllMeetingMembersPID()) {
        oprot.writeString(struct.allMeetingMembersPID);
      }
      if (struct.isSetAllBizMeetingMinutesMember()) {
        oprot.writeString(struct.allBizMeetingMinutesMember);
      }
      if (struct.isSetMeetingLocation()) {
        oprot.writeString(struct.meetingLocation);
      }
      if (struct.isSetMeetingResult()) {
        oprot.writeString(struct.meetingResult);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetMeetingNum()) {
        oprot.writeString(struct.meetingNum);
      }
      if (struct.isSetMeetingId()) {
        oprot.writeI32(struct.meetingId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectMeetingDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.meetingDttm = iprot.readString();
        struct.setMeetingDttmIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recordUserId = iprot.readI32();
        struct.setRecordUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.allMeetingMembersPID = iprot.readString();
        struct.setAllMeetingMembersPIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.allBizMeetingMinutesMember = iprot.readString();
        struct.setAllBizMeetingMinutesMemberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.meetingLocation = iprot.readString();
        struct.setMeetingLocationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.meetingResult = iprot.readString();
        struct.setMeetingResultIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.meetingNum = iprot.readString();
        struct.setMeetingNumIsSet(true);
      }
      if (incoming.get(10)) {
        struct.meetingId = iprot.readI32();
        struct.setMeetingIdIsSet(true);
      }
    }
  }

}


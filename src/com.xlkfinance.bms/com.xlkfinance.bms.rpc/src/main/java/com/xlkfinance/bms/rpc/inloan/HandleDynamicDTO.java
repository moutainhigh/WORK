/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class HandleDynamicDTO implements org.apache.thrift.TBase<HandleDynamicDTO, HandleDynamicDTO._Fields>, java.io.Serializable, Cloneable, Comparable<HandleDynamicDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HandleDynamicDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HANDLE_FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleFlowId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FINISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("finishDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HANDLE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("handleDay", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DIFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("differ", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DIFFER_MONITOR_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("differMonitorCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TASK_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskUserName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FIX_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("fixDay", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CURRENT_HANDLE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentHandleUserId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField CURRENT_HANDLE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("currentHandleUserName", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HandleDynamicDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HandleDynamicDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int handleId; // required
  public int handleFlowId; // required
  public String finishDate; // required
  public int handleDay; // required
  public String operator; // required
  public int differ; // required
  public int differMonitorCount; // required
  public String createDate; // required
  public String remark; // required
  public int createrId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public String taskUserName; // required
  public int fixDay; // required
  public int currentHandleUserId; // required
  public String currentHandleUserName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    HANDLE_ID((short)2, "handleId"),
    HANDLE_FLOW_ID((short)3, "handleFlowId"),
    FINISH_DATE((short)4, "finishDate"),
    HANDLE_DAY((short)5, "handleDay"),
    OPERATOR((short)6, "operator"),
    DIFFER((short)7, "differ"),
    DIFFER_MONITOR_COUNT((short)8, "differMonitorCount"),
    CREATE_DATE((short)9, "createDate"),
    REMARK((short)10, "remark"),
    CREATER_ID((short)11, "createrId"),
    USER_IDS((short)12, "userIds"),
    PAGE((short)13, "page"),
    ROWS((short)14, "rows"),
    TASK_USER_NAME((short)15, "taskUserName"),
    FIX_DAY((short)16, "fixDay"),
    CURRENT_HANDLE_USER_ID((short)17, "currentHandleUserId"),
    CURRENT_HANDLE_USER_NAME((short)18, "currentHandleUserName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // HANDLE_ID
          return HANDLE_ID;
        case 3: // HANDLE_FLOW_ID
          return HANDLE_FLOW_ID;
        case 4: // FINISH_DATE
          return FINISH_DATE;
        case 5: // HANDLE_DAY
          return HANDLE_DAY;
        case 6: // OPERATOR
          return OPERATOR;
        case 7: // DIFFER
          return DIFFER;
        case 8: // DIFFER_MONITOR_COUNT
          return DIFFER_MONITOR_COUNT;
        case 9: // CREATE_DATE
          return CREATE_DATE;
        case 10: // REMARK
          return REMARK;
        case 11: // CREATER_ID
          return CREATER_ID;
        case 12: // USER_IDS
          return USER_IDS;
        case 13: // PAGE
          return PAGE;
        case 14: // ROWS
          return ROWS;
        case 15: // TASK_USER_NAME
          return TASK_USER_NAME;
        case 16: // FIX_DAY
          return FIX_DAY;
        case 17: // CURRENT_HANDLE_USER_ID
          return CURRENT_HANDLE_USER_ID;
        case 18: // CURRENT_HANDLE_USER_NAME
          return CURRENT_HANDLE_USER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __HANDLEID_ISSET_ID = 1;
  private static final int __HANDLEFLOWID_ISSET_ID = 2;
  private static final int __HANDLEDAY_ISSET_ID = 3;
  private static final int __DIFFER_ISSET_ID = 4;
  private static final int __DIFFERMONITORCOUNT_ISSET_ID = 5;
  private static final int __CREATERID_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private static final int __FIXDAY_ISSET_ID = 9;
  private static final int __CURRENTHANDLEUSERID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("handleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("handleFlowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("finishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_DAY, new org.apache.thrift.meta_data.FieldMetaData("handleDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIFFER, new org.apache.thrift.meta_data.FieldMetaData("differ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIFFER_MONITOR_COUNT, new org.apache.thrift.meta_data.FieldMetaData("differMonitorCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIX_DAY, new org.apache.thrift.meta_data.FieldMetaData("fixDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_HANDLE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("currentHandleUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_HANDLE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("currentHandleUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HandleDynamicDTO.class, metaDataMap);
  }

  public HandleDynamicDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public HandleDynamicDTO(
    int pid,
    int handleId,
    int handleFlowId,
    String finishDate,
    int handleDay,
    String operator,
    int differ,
    int differMonitorCount,
    String createDate,
    String remark,
    int createrId,
    List<Integer> userIds,
    int page,
    int rows,
    String taskUserName,
    int fixDay,
    int currentHandleUserId,
    String currentHandleUserName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.handleId = handleId;
    setHandleIdIsSet(true);
    this.handleFlowId = handleFlowId;
    setHandleFlowIdIsSet(true);
    this.finishDate = finishDate;
    this.handleDay = handleDay;
    setHandleDayIsSet(true);
    this.operator = operator;
    this.differ = differ;
    setDifferIsSet(true);
    this.differMonitorCount = differMonitorCount;
    setDifferMonitorCountIsSet(true);
    this.createDate = createDate;
    this.remark = remark;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.taskUserName = taskUserName;
    this.fixDay = fixDay;
    setFixDayIsSet(true);
    this.currentHandleUserId = currentHandleUserId;
    setCurrentHandleUserIdIsSet(true);
    this.currentHandleUserName = currentHandleUserName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HandleDynamicDTO(HandleDynamicDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.handleId = other.handleId;
    this.handleFlowId = other.handleFlowId;
    if (other.isSetFinishDate()) {
      this.finishDate = other.finishDate;
    }
    this.handleDay = other.handleDay;
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    this.differ = other.differ;
    this.differMonitorCount = other.differMonitorCount;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.createrId = other.createrId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetTaskUserName()) {
      this.taskUserName = other.taskUserName;
    }
    this.fixDay = other.fixDay;
    this.currentHandleUserId = other.currentHandleUserId;
    if (other.isSetCurrentHandleUserName()) {
      this.currentHandleUserName = other.currentHandleUserName;
    }
  }

  public HandleDynamicDTO deepCopy() {
    return new HandleDynamicDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setHandleIdIsSet(false);
    this.handleId = 0;
    setHandleFlowIdIsSet(false);
    this.handleFlowId = 0;
    this.finishDate = null;
    setHandleDayIsSet(false);
    this.handleDay = 0;
    this.operator = null;
    setDifferIsSet(false);
    this.differ = 0;
    setDifferMonitorCountIsSet(false);
    this.differMonitorCount = 0;
    this.createDate = null;
    this.remark = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    this.taskUserName = null;
    setFixDayIsSet(false);
    this.fixDay = 0;
    setCurrentHandleUserIdIsSet(false);
    this.currentHandleUserId = 0;
    this.currentHandleUserName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public HandleDynamicDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getHandleId() {
    return this.handleId;
  }

  public HandleDynamicDTO setHandleId(int handleId) {
    this.handleId = handleId;
    setHandleIdIsSet(true);
    return this;
  }

  public void unsetHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  /** Returns true if field handleId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEID_ISSET_ID);
  }

  public void setHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEID_ISSET_ID, value);
  }

  public int getHandleFlowId() {
    return this.handleFlowId;
  }

  public HandleDynamicDTO setHandleFlowId(int handleFlowId) {
    this.handleFlowId = handleFlowId;
    setHandleFlowIdIsSet(true);
    return this;
  }

  public void unsetHandleFlowId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID);
  }

  /** Returns true if field handleFlowId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleFlowId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID);
  }

  public void setHandleFlowIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEFLOWID_ISSET_ID, value);
  }

  public String getFinishDate() {
    return this.finishDate;
  }

  public HandleDynamicDTO setFinishDate(String finishDate) {
    this.finishDate = finishDate;
    return this;
  }

  public void unsetFinishDate() {
    this.finishDate = null;
  }

  /** Returns true if field finishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishDate() {
    return this.finishDate != null;
  }

  public void setFinishDateIsSet(boolean value) {
    if (!value) {
      this.finishDate = null;
    }
  }

  public int getHandleDay() {
    return this.handleDay;
  }

  public HandleDynamicDTO setHandleDay(int handleDay) {
    this.handleDay = handleDay;
    setHandleDayIsSet(true);
    return this;
  }

  public void unsetHandleDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEDAY_ISSET_ID);
  }

  /** Returns true if field handleDay is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleDay() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEDAY_ISSET_ID);
  }

  public void setHandleDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEDAY_ISSET_ID, value);
  }

  public String getOperator() {
    return this.operator;
  }

  public HandleDynamicDTO setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public int getDiffer() {
    return this.differ;
  }

  public HandleDynamicDTO setDiffer(int differ) {
    this.differ = differ;
    setDifferIsSet(true);
    return this;
  }

  public void unsetDiffer() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFFER_ISSET_ID);
  }

  /** Returns true if field differ is set (has been assigned a value) and false otherwise */
  public boolean isSetDiffer() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFFER_ISSET_ID);
  }

  public void setDifferIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFFER_ISSET_ID, value);
  }

  public int getDifferMonitorCount() {
    return this.differMonitorCount;
  }

  public HandleDynamicDTO setDifferMonitorCount(int differMonitorCount) {
    this.differMonitorCount = differMonitorCount;
    setDifferMonitorCountIsSet(true);
    return this;
  }

  public void unsetDifferMonitorCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIFFERMONITORCOUNT_ISSET_ID);
  }

  /** Returns true if field differMonitorCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDifferMonitorCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DIFFERMONITORCOUNT_ISSET_ID);
  }

  public void setDifferMonitorCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIFFERMONITORCOUNT_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public HandleDynamicDTO setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public HandleDynamicDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public HandleDynamicDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public HandleDynamicDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public HandleDynamicDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public HandleDynamicDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getTaskUserName() {
    return this.taskUserName;
  }

  public HandleDynamicDTO setTaskUserName(String taskUserName) {
    this.taskUserName = taskUserName;
    return this;
  }

  public void unsetTaskUserName() {
    this.taskUserName = null;
  }

  /** Returns true if field taskUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskUserName() {
    return this.taskUserName != null;
  }

  public void setTaskUserNameIsSet(boolean value) {
    if (!value) {
      this.taskUserName = null;
    }
  }

  public int getFixDay() {
    return this.fixDay;
  }

  public HandleDynamicDTO setFixDay(int fixDay) {
    this.fixDay = fixDay;
    setFixDayIsSet(true);
    return this;
  }

  public void unsetFixDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIXDAY_ISSET_ID);
  }

  /** Returns true if field fixDay is set (has been assigned a value) and false otherwise */
  public boolean isSetFixDay() {
    return EncodingUtils.testBit(__isset_bitfield, __FIXDAY_ISSET_ID);
  }

  public void setFixDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIXDAY_ISSET_ID, value);
  }

  public int getCurrentHandleUserId() {
    return this.currentHandleUserId;
  }

  public HandleDynamicDTO setCurrentHandleUserId(int currentHandleUserId) {
    this.currentHandleUserId = currentHandleUserId;
    setCurrentHandleUserIdIsSet(true);
    return this;
  }

  public void unsetCurrentHandleUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTHANDLEUSERID_ISSET_ID);
  }

  /** Returns true if field currentHandleUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentHandleUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTHANDLEUSERID_ISSET_ID);
  }

  public void setCurrentHandleUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTHANDLEUSERID_ISSET_ID, value);
  }

  public String getCurrentHandleUserName() {
    return this.currentHandleUserName;
  }

  public HandleDynamicDTO setCurrentHandleUserName(String currentHandleUserName) {
    this.currentHandleUserName = currentHandleUserName;
    return this;
  }

  public void unsetCurrentHandleUserName() {
    this.currentHandleUserName = null;
  }

  /** Returns true if field currentHandleUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentHandleUserName() {
    return this.currentHandleUserName != null;
  }

  public void setCurrentHandleUserNameIsSet(boolean value) {
    if (!value) {
      this.currentHandleUserName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case HANDLE_ID:
      if (value == null) {
        unsetHandleId();
      } else {
        setHandleId((Integer)value);
      }
      break;

    case HANDLE_FLOW_ID:
      if (value == null) {
        unsetHandleFlowId();
      } else {
        setHandleFlowId((Integer)value);
      }
      break;

    case FINISH_DATE:
      if (value == null) {
        unsetFinishDate();
      } else {
        setFinishDate((String)value);
      }
      break;

    case HANDLE_DAY:
      if (value == null) {
        unsetHandleDay();
      } else {
        setHandleDay((Integer)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    case DIFFER:
      if (value == null) {
        unsetDiffer();
      } else {
        setDiffer((Integer)value);
      }
      break;

    case DIFFER_MONITOR_COUNT:
      if (value == null) {
        unsetDifferMonitorCount();
      } else {
        setDifferMonitorCount((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case TASK_USER_NAME:
      if (value == null) {
        unsetTaskUserName();
      } else {
        setTaskUserName((String)value);
      }
      break;

    case FIX_DAY:
      if (value == null) {
        unsetFixDay();
      } else {
        setFixDay((Integer)value);
      }
      break;

    case CURRENT_HANDLE_USER_ID:
      if (value == null) {
        unsetCurrentHandleUserId();
      } else {
        setCurrentHandleUserId((Integer)value);
      }
      break;

    case CURRENT_HANDLE_USER_NAME:
      if (value == null) {
        unsetCurrentHandleUserName();
      } else {
        setCurrentHandleUserName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case HANDLE_ID:
      return Integer.valueOf(getHandleId());

    case HANDLE_FLOW_ID:
      return Integer.valueOf(getHandleFlowId());

    case FINISH_DATE:
      return getFinishDate();

    case HANDLE_DAY:
      return Integer.valueOf(getHandleDay());

    case OPERATOR:
      return getOperator();

    case DIFFER:
      return Integer.valueOf(getDiffer());

    case DIFFER_MONITOR_COUNT:
      return Integer.valueOf(getDifferMonitorCount());

    case CREATE_DATE:
      return getCreateDate();

    case REMARK:
      return getRemark();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case TASK_USER_NAME:
      return getTaskUserName();

    case FIX_DAY:
      return Integer.valueOf(getFixDay());

    case CURRENT_HANDLE_USER_ID:
      return Integer.valueOf(getCurrentHandleUserId());

    case CURRENT_HANDLE_USER_NAME:
      return getCurrentHandleUserName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case HANDLE_ID:
      return isSetHandleId();
    case HANDLE_FLOW_ID:
      return isSetHandleFlowId();
    case FINISH_DATE:
      return isSetFinishDate();
    case HANDLE_DAY:
      return isSetHandleDay();
    case OPERATOR:
      return isSetOperator();
    case DIFFER:
      return isSetDiffer();
    case DIFFER_MONITOR_COUNT:
      return isSetDifferMonitorCount();
    case CREATE_DATE:
      return isSetCreateDate();
    case REMARK:
      return isSetRemark();
    case CREATER_ID:
      return isSetCreaterId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case TASK_USER_NAME:
      return isSetTaskUserName();
    case FIX_DAY:
      return isSetFixDay();
    case CURRENT_HANDLE_USER_ID:
      return isSetCurrentHandleUserId();
    case CURRENT_HANDLE_USER_NAME:
      return isSetCurrentHandleUserName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HandleDynamicDTO)
      return this.equals((HandleDynamicDTO)that);
    return false;
  }

  public boolean equals(HandleDynamicDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_handleId = true;
    boolean that_present_handleId = true;
    if (this_present_handleId || that_present_handleId) {
      if (!(this_present_handleId && that_present_handleId))
        return false;
      if (this.handleId != that.handleId)
        return false;
    }

    boolean this_present_handleFlowId = true;
    boolean that_present_handleFlowId = true;
    if (this_present_handleFlowId || that_present_handleFlowId) {
      if (!(this_present_handleFlowId && that_present_handleFlowId))
        return false;
      if (this.handleFlowId != that.handleFlowId)
        return false;
    }

    boolean this_present_finishDate = true && this.isSetFinishDate();
    boolean that_present_finishDate = true && that.isSetFinishDate();
    if (this_present_finishDate || that_present_finishDate) {
      if (!(this_present_finishDate && that_present_finishDate))
        return false;
      if (!this.finishDate.equals(that.finishDate))
        return false;
    }

    boolean this_present_handleDay = true;
    boolean that_present_handleDay = true;
    if (this_present_handleDay || that_present_handleDay) {
      if (!(this_present_handleDay && that_present_handleDay))
        return false;
      if (this.handleDay != that.handleDay)
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_differ = true;
    boolean that_present_differ = true;
    if (this_present_differ || that_present_differ) {
      if (!(this_present_differ && that_present_differ))
        return false;
      if (this.differ != that.differ)
        return false;
    }

    boolean this_present_differMonitorCount = true;
    boolean that_present_differMonitorCount = true;
    if (this_present_differMonitorCount || that_present_differMonitorCount) {
      if (!(this_present_differMonitorCount && that_present_differMonitorCount))
        return false;
      if (this.differMonitorCount != that.differMonitorCount)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_taskUserName = true && this.isSetTaskUserName();
    boolean that_present_taskUserName = true && that.isSetTaskUserName();
    if (this_present_taskUserName || that_present_taskUserName) {
      if (!(this_present_taskUserName && that_present_taskUserName))
        return false;
      if (!this.taskUserName.equals(that.taskUserName))
        return false;
    }

    boolean this_present_fixDay = true;
    boolean that_present_fixDay = true;
    if (this_present_fixDay || that_present_fixDay) {
      if (!(this_present_fixDay && that_present_fixDay))
        return false;
      if (this.fixDay != that.fixDay)
        return false;
    }

    boolean this_present_currentHandleUserId = true;
    boolean that_present_currentHandleUserId = true;
    if (this_present_currentHandleUserId || that_present_currentHandleUserId) {
      if (!(this_present_currentHandleUserId && that_present_currentHandleUserId))
        return false;
      if (this.currentHandleUserId != that.currentHandleUserId)
        return false;
    }

    boolean this_present_currentHandleUserName = true && this.isSetCurrentHandleUserName();
    boolean that_present_currentHandleUserName = true && that.isSetCurrentHandleUserName();
    if (this_present_currentHandleUserName || that_present_currentHandleUserName) {
      if (!(this_present_currentHandleUserName && that_present_currentHandleUserName))
        return false;
      if (!this.currentHandleUserName.equals(that.currentHandleUserName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_handleId = true;
    list.add(present_handleId);
    if (present_handleId)
      list.add(handleId);

    boolean present_handleFlowId = true;
    list.add(present_handleFlowId);
    if (present_handleFlowId)
      list.add(handleFlowId);

    boolean present_finishDate = true && (isSetFinishDate());
    list.add(present_finishDate);
    if (present_finishDate)
      list.add(finishDate);

    boolean present_handleDay = true;
    list.add(present_handleDay);
    if (present_handleDay)
      list.add(handleDay);

    boolean present_operator = true && (isSetOperator());
    list.add(present_operator);
    if (present_operator)
      list.add(operator);

    boolean present_differ = true;
    list.add(present_differ);
    if (present_differ)
      list.add(differ);

    boolean present_differMonitorCount = true;
    list.add(present_differMonitorCount);
    if (present_differMonitorCount)
      list.add(differMonitorCount);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_taskUserName = true && (isSetTaskUserName());
    list.add(present_taskUserName);
    if (present_taskUserName)
      list.add(taskUserName);

    boolean present_fixDay = true;
    list.add(present_fixDay);
    if (present_fixDay)
      list.add(fixDay);

    boolean present_currentHandleUserId = true;
    list.add(present_currentHandleUserId);
    if (present_currentHandleUserId)
      list.add(currentHandleUserId);

    boolean present_currentHandleUserName = true && (isSetCurrentHandleUserName());
    list.add(present_currentHandleUserName);
    if (present_currentHandleUserName)
      list.add(currentHandleUserName);

    return list.hashCode();
  }

  @Override
  public int compareTo(HandleDynamicDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleId()).compareTo(other.isSetHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleId, other.handleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleFlowId()).compareTo(other.isSetHandleFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleFlowId, other.handleFlowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishDate()).compareTo(other.isSetFinishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishDate, other.finishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleDay()).compareTo(other.isSetHandleDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleDay, other.handleDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiffer()).compareTo(other.isSetDiffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.differ, other.differ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDifferMonitorCount()).compareTo(other.isSetDifferMonitorCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifferMonitorCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.differMonitorCount, other.differMonitorCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskUserName()).compareTo(other.isSetTaskUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskUserName, other.taskUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFixDay()).compareTo(other.isSetFixDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFixDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fixDay, other.fixDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentHandleUserId()).compareTo(other.isSetCurrentHandleUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentHandleUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentHandleUserId, other.currentHandleUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentHandleUserName()).compareTo(other.isSetCurrentHandleUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentHandleUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentHandleUserName, other.currentHandleUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HandleDynamicDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleId:");
    sb.append(this.handleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleFlowId:");
    sb.append(this.handleFlowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishDate:");
    if (this.finishDate == null) {
      sb.append("null");
    } else {
      sb.append(this.finishDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleDay:");
    sb.append(this.handleDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("differ:");
    sb.append(this.differ);
    first = false;
    if (!first) sb.append(", ");
    sb.append("differMonitorCount:");
    sb.append(this.differMonitorCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskUserName:");
    if (this.taskUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fixDay:");
    sb.append(this.fixDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentHandleUserId:");
    sb.append(this.currentHandleUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentHandleUserName:");
    if (this.currentHandleUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.currentHandleUserName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HandleDynamicDTOStandardSchemeFactory implements SchemeFactory {
    public HandleDynamicDTOStandardScheme getScheme() {
      return new HandleDynamicDTOStandardScheme();
    }
  }

  private static class HandleDynamicDTOStandardScheme extends StandardScheme<HandleDynamicDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HandleDynamicDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleId = iprot.readI32();
              struct.setHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HANDLE_FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleFlowId = iprot.readI32();
              struct.setHandleFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FINISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finishDate = iprot.readString();
              struct.setFinishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HANDLE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleDay = iprot.readI32();
              struct.setHandleDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.differ = iprot.readI32();
              struct.setDifferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DIFFER_MONITOR_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.differMonitorCount = iprot.readI32();
              struct.setDifferMonitorCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list88.size);
                int _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = iprot.readI32();
                  struct.userIds.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TASK_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskUserName = iprot.readString();
              struct.setTaskUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FIX_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fixDay = iprot.readI32();
              struct.setFixDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CURRENT_HANDLE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentHandleUserId = iprot.readI32();
              struct.setCurrentHandleUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CURRENT_HANDLE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentHandleUserName = iprot.readString();
              struct.setCurrentHandleUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HandleDynamicDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.handleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_FLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.handleFlowId);
      oprot.writeFieldEnd();
      if (struct.finishDate != null) {
        oprot.writeFieldBegin(FINISH_DATE_FIELD_DESC);
        oprot.writeString(struct.finishDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HANDLE_DAY_FIELD_DESC);
      oprot.writeI32(struct.handleDay);
      oprot.writeFieldEnd();
      if (struct.operator != null) {
        oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
        oprot.writeString(struct.operator);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIFFER_FIELD_DESC);
      oprot.writeI32(struct.differ);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIFFER_MONITOR_COUNT_FIELD_DESC);
      oprot.writeI32(struct.differMonitorCount);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter91 : struct.userIds)
          {
            oprot.writeI32(_iter91);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.taskUserName != null) {
        oprot.writeFieldBegin(TASK_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.taskUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIX_DAY_FIELD_DESC);
      oprot.writeI32(struct.fixDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_HANDLE_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.currentHandleUserId);
      oprot.writeFieldEnd();
      if (struct.currentHandleUserName != null) {
        oprot.writeFieldBegin(CURRENT_HANDLE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.currentHandleUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HandleDynamicDTOTupleSchemeFactory implements SchemeFactory {
    public HandleDynamicDTOTupleScheme getScheme() {
      return new HandleDynamicDTOTupleScheme();
    }
  }

  private static class HandleDynamicDTOTupleScheme extends TupleScheme<HandleDynamicDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HandleDynamicDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetHandleId()) {
        optionals.set(1);
      }
      if (struct.isSetHandleFlowId()) {
        optionals.set(2);
      }
      if (struct.isSetFinishDate()) {
        optionals.set(3);
      }
      if (struct.isSetHandleDay()) {
        optionals.set(4);
      }
      if (struct.isSetOperator()) {
        optionals.set(5);
      }
      if (struct.isSetDiffer()) {
        optionals.set(6);
      }
      if (struct.isSetDifferMonitorCount()) {
        optionals.set(7);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(8);
      }
      if (struct.isSetRemark()) {
        optionals.set(9);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(10);
      }
      if (struct.isSetUserIds()) {
        optionals.set(11);
      }
      if (struct.isSetPage()) {
        optionals.set(12);
      }
      if (struct.isSetRows()) {
        optionals.set(13);
      }
      if (struct.isSetTaskUserName()) {
        optionals.set(14);
      }
      if (struct.isSetFixDay()) {
        optionals.set(15);
      }
      if (struct.isSetCurrentHandleUserId()) {
        optionals.set(16);
      }
      if (struct.isSetCurrentHandleUserName()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetHandleId()) {
        oprot.writeI32(struct.handleId);
      }
      if (struct.isSetHandleFlowId()) {
        oprot.writeI32(struct.handleFlowId);
      }
      if (struct.isSetFinishDate()) {
        oprot.writeString(struct.finishDate);
      }
      if (struct.isSetHandleDay()) {
        oprot.writeI32(struct.handleDay);
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
      if (struct.isSetDiffer()) {
        oprot.writeI32(struct.differ);
      }
      if (struct.isSetDifferMonitorCount()) {
        oprot.writeI32(struct.differMonitorCount);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter92 : struct.userIds)
          {
            oprot.writeI32(_iter92);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetTaskUserName()) {
        oprot.writeString(struct.taskUserName);
      }
      if (struct.isSetFixDay()) {
        oprot.writeI32(struct.fixDay);
      }
      if (struct.isSetCurrentHandleUserId()) {
        oprot.writeI32(struct.currentHandleUserId);
      }
      if (struct.isSetCurrentHandleUserName()) {
        oprot.writeString(struct.currentHandleUserName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HandleDynamicDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.handleId = iprot.readI32();
        struct.setHandleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.handleFlowId = iprot.readI32();
        struct.setHandleFlowIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.finishDate = iprot.readString();
        struct.setFinishDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.handleDay = iprot.readI32();
        struct.setHandleDayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.differ = iprot.readI32();
        struct.setDifferIsSet(true);
      }
      if (incoming.get(7)) {
        struct.differMonitorCount = iprot.readI32();
        struct.setDifferMonitorCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list93.size);
          int _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = iprot.readI32();
            struct.userIds.add(_elem94);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.taskUserName = iprot.readString();
        struct.setTaskUserNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.fixDay = iprot.readI32();
        struct.setFixDayIsSet(true);
      }
      if (incoming.get(16)) {
        struct.currentHandleUserId = iprot.readI32();
        struct.setCurrentHandleUserIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.currentHandleUserName = iprot.readString();
        struct.setCurrentHandleUserNameIsSet(true);
      }
    }
  }

}


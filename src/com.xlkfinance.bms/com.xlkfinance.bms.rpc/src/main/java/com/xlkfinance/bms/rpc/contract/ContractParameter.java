/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class ContractParameter implements org.apache.thrift.TBase<ContractParameter, ContractParameter._Fields>, java.io.Serializable, Cloneable, Comparable<ContractParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractParameter");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMETER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMETER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterVal", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARAMETER_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterDesc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MATCH_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("matchFlag", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MATCH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SHOW_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("showIndex", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractParameterTupleSchemeFactory());
  }

  public int pid; // required
  public int contractId; // required
  public int parameterId; // required
  public String parameterVal; // required
  public String parameterDesc; // required
  public int status; // required
  public int page; // required
  public int rows; // required
  public int total; // required
  public String matchFlag; // required
  public String matchName; // required
  public int showIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CONTRACT_ID((short)2, "contractId"),
    PARAMETER_ID((short)3, "parameterId"),
    PARAMETER_VAL((short)4, "parameterVal"),
    PARAMETER_DESC((short)5, "parameterDesc"),
    STATUS((short)6, "status"),
    PAGE((short)7, "page"),
    ROWS((short)8, "rows"),
    TOTAL((short)9, "total"),
    MATCH_FLAG((short)10, "matchFlag"),
    MATCH_NAME((short)11, "matchName"),
    SHOW_INDEX((short)12, "showIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CONTRACT_ID
          return CONTRACT_ID;
        case 3: // PARAMETER_ID
          return PARAMETER_ID;
        case 4: // PARAMETER_VAL
          return PARAMETER_VAL;
        case 5: // PARAMETER_DESC
          return PARAMETER_DESC;
        case 6: // STATUS
          return STATUS;
        case 7: // PAGE
          return PAGE;
        case 8: // ROWS
          return ROWS;
        case 9: // TOTAL
          return TOTAL;
        case 10: // MATCH_FLAG
          return MATCH_FLAG;
        case 11: // MATCH_NAME
          return MATCH_NAME;
        case 12: // SHOW_INDEX
          return SHOW_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CONTRACTID_ISSET_ID = 1;
  private static final int __PARAMETERID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private static final int __TOTAL_ISSET_ID = 6;
  private static final int __SHOWINDEX_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAMETER_ID, new org.apache.thrift.meta_data.FieldMetaData("parameterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAMETER_VAL, new org.apache.thrift.meta_data.FieldMetaData("parameterVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETER_DESC, new org.apache.thrift.meta_data.FieldMetaData("parameterDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_FLAG, new org.apache.thrift.meta_data.FieldMetaData("matchFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_NAME, new org.apache.thrift.meta_data.FieldMetaData("matchName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOW_INDEX, new org.apache.thrift.meta_data.FieldMetaData("showIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractParameter.class, metaDataMap);
  }

  public ContractParameter() {
  }

  public ContractParameter(
    int pid,
    int contractId,
    int parameterId,
    String parameterVal,
    String parameterDesc,
    int status,
    int page,
    int rows,
    int total,
    String matchFlag,
    String matchName,
    int showIndex)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.contractId = contractId;
    setContractIdIsSet(true);
    this.parameterId = parameterId;
    setParameterIdIsSet(true);
    this.parameterVal = parameterVal;
    this.parameterDesc = parameterDesc;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.matchFlag = matchFlag;
    this.matchName = matchName;
    this.showIndex = showIndex;
    setShowIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractParameter(ContractParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.contractId = other.contractId;
    this.parameterId = other.parameterId;
    if (other.isSetParameterVal()) {
      this.parameterVal = other.parameterVal;
    }
    if (other.isSetParameterDesc()) {
      this.parameterDesc = other.parameterDesc;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
    this.total = other.total;
    if (other.isSetMatchFlag()) {
      this.matchFlag = other.matchFlag;
    }
    if (other.isSetMatchName()) {
      this.matchName = other.matchName;
    }
    this.showIndex = other.showIndex;
  }

  public ContractParameter deepCopy() {
    return new ContractParameter(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setContractIdIsSet(false);
    this.contractId = 0;
    setParameterIdIsSet(false);
    this.parameterId = 0;
    this.parameterVal = null;
    this.parameterDesc = null;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setTotalIsSet(false);
    this.total = 0;
    this.matchFlag = null;
    this.matchName = null;
    setShowIndexIsSet(false);
    this.showIndex = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ContractParameter setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getContractId() {
    return this.contractId;
  }

  public ContractParameter setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public int getParameterId() {
    return this.parameterId;
  }

  public ContractParameter setParameterId(int parameterId) {
    this.parameterId = parameterId;
    setParameterIdIsSet(true);
    return this;
  }

  public void unsetParameterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAMETERID_ISSET_ID);
  }

  /** Returns true if field parameterId is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARAMETERID_ISSET_ID);
  }

  public void setParameterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAMETERID_ISSET_ID, value);
  }

  public String getParameterVal() {
    return this.parameterVal;
  }

  public ContractParameter setParameterVal(String parameterVal) {
    this.parameterVal = parameterVal;
    return this;
  }

  public void unsetParameterVal() {
    this.parameterVal = null;
  }

  /** Returns true if field parameterVal is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterVal() {
    return this.parameterVal != null;
  }

  public void setParameterValIsSet(boolean value) {
    if (!value) {
      this.parameterVal = null;
    }
  }

  public String getParameterDesc() {
    return this.parameterDesc;
  }

  public ContractParameter setParameterDesc(String parameterDesc) {
    this.parameterDesc = parameterDesc;
    return this;
  }

  public void unsetParameterDesc() {
    this.parameterDesc = null;
  }

  /** Returns true if field parameterDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterDesc() {
    return this.parameterDesc != null;
  }

  public void setParameterDescIsSet(boolean value) {
    if (!value) {
      this.parameterDesc = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ContractParameter setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public ContractParameter setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ContractParameter setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public ContractParameter setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public String getMatchFlag() {
    return this.matchFlag;
  }

  public ContractParameter setMatchFlag(String matchFlag) {
    this.matchFlag = matchFlag;
    return this;
  }

  public void unsetMatchFlag() {
    this.matchFlag = null;
  }

  /** Returns true if field matchFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchFlag() {
    return this.matchFlag != null;
  }

  public void setMatchFlagIsSet(boolean value) {
    if (!value) {
      this.matchFlag = null;
    }
  }

  public String getMatchName() {
    return this.matchName;
  }

  public ContractParameter setMatchName(String matchName) {
    this.matchName = matchName;
    return this;
  }

  public void unsetMatchName() {
    this.matchName = null;
  }

  /** Returns true if field matchName is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchName() {
    return this.matchName != null;
  }

  public void setMatchNameIsSet(boolean value) {
    if (!value) {
      this.matchName = null;
    }
  }

  public int getShowIndex() {
    return this.showIndex;
  }

  public ContractParameter setShowIndex(int showIndex) {
    this.showIndex = showIndex;
    setShowIndexIsSet(true);
    return this;
  }

  public void unsetShowIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWINDEX_ISSET_ID);
  }

  /** Returns true if field showIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetShowIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWINDEX_ISSET_ID);
  }

  public void setShowIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    case PARAMETER_ID:
      if (value == null) {
        unsetParameterId();
      } else {
        setParameterId((Integer)value);
      }
      break;

    case PARAMETER_VAL:
      if (value == null) {
        unsetParameterVal();
      } else {
        setParameterVal((String)value);
      }
      break;

    case PARAMETER_DESC:
      if (value == null) {
        unsetParameterDesc();
      } else {
        setParameterDesc((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case MATCH_FLAG:
      if (value == null) {
        unsetMatchFlag();
      } else {
        setMatchFlag((String)value);
      }
      break;

    case MATCH_NAME:
      if (value == null) {
        unsetMatchName();
      } else {
        setMatchName((String)value);
      }
      break;

    case SHOW_INDEX:
      if (value == null) {
        unsetShowIndex();
      } else {
        setShowIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    case PARAMETER_ID:
      return Integer.valueOf(getParameterId());

    case PARAMETER_VAL:
      return getParameterVal();

    case PARAMETER_DESC:
      return getParameterDesc();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case TOTAL:
      return Integer.valueOf(getTotal());

    case MATCH_FLAG:
      return getMatchFlag();

    case MATCH_NAME:
      return getMatchName();

    case SHOW_INDEX:
      return Integer.valueOf(getShowIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CONTRACT_ID:
      return isSetContractId();
    case PARAMETER_ID:
      return isSetParameterId();
    case PARAMETER_VAL:
      return isSetParameterVal();
    case PARAMETER_DESC:
      return isSetParameterDesc();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case TOTAL:
      return isSetTotal();
    case MATCH_FLAG:
      return isSetMatchFlag();
    case MATCH_NAME:
      return isSetMatchName();
    case SHOW_INDEX:
      return isSetShowIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractParameter)
      return this.equals((ContractParameter)that);
    return false;
  }

  public boolean equals(ContractParameter that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_contractId = true;
    boolean that_present_contractId = true;
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_parameterId = true;
    boolean that_present_parameterId = true;
    if (this_present_parameterId || that_present_parameterId) {
      if (!(this_present_parameterId && that_present_parameterId))
        return false;
      if (this.parameterId != that.parameterId)
        return false;
    }

    boolean this_present_parameterVal = true && this.isSetParameterVal();
    boolean that_present_parameterVal = true && that.isSetParameterVal();
    if (this_present_parameterVal || that_present_parameterVal) {
      if (!(this_present_parameterVal && that_present_parameterVal))
        return false;
      if (!this.parameterVal.equals(that.parameterVal))
        return false;
    }

    boolean this_present_parameterDesc = true && this.isSetParameterDesc();
    boolean that_present_parameterDesc = true && that.isSetParameterDesc();
    if (this_present_parameterDesc || that_present_parameterDesc) {
      if (!(this_present_parameterDesc && that_present_parameterDesc))
        return false;
      if (!this.parameterDesc.equals(that.parameterDesc))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_matchFlag = true && this.isSetMatchFlag();
    boolean that_present_matchFlag = true && that.isSetMatchFlag();
    if (this_present_matchFlag || that_present_matchFlag) {
      if (!(this_present_matchFlag && that_present_matchFlag))
        return false;
      if (!this.matchFlag.equals(that.matchFlag))
        return false;
    }

    boolean this_present_matchName = true && this.isSetMatchName();
    boolean that_present_matchName = true && that.isSetMatchName();
    if (this_present_matchName || that_present_matchName) {
      if (!(this_present_matchName && that_present_matchName))
        return false;
      if (!this.matchName.equals(that.matchName))
        return false;
    }

    boolean this_present_showIndex = true;
    boolean that_present_showIndex = true;
    if (this_present_showIndex || that_present_showIndex) {
      if (!(this_present_showIndex && that_present_showIndex))
        return false;
      if (this.showIndex != that.showIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_contractId = true;
    list.add(present_contractId);
    if (present_contractId)
      list.add(contractId);

    boolean present_parameterId = true;
    list.add(present_parameterId);
    if (present_parameterId)
      list.add(parameterId);

    boolean present_parameterVal = true && (isSetParameterVal());
    list.add(present_parameterVal);
    if (present_parameterVal)
      list.add(parameterVal);

    boolean present_parameterDesc = true && (isSetParameterDesc());
    list.add(present_parameterDesc);
    if (present_parameterDesc)
      list.add(parameterDesc);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_matchFlag = true && (isSetMatchFlag());
    list.add(present_matchFlag);
    if (present_matchFlag)
      list.add(matchFlag);

    boolean present_matchName = true && (isSetMatchName());
    list.add(present_matchName);
    if (present_matchName)
      list.add(matchName);

    boolean present_showIndex = true;
    list.add(present_showIndex);
    if (present_showIndex)
      list.add(showIndex);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContractParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterId()).compareTo(other.isSetParameterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterId, other.parameterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterVal()).compareTo(other.isSetParameterVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterVal, other.parameterVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterDesc()).compareTo(other.isSetParameterDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterDesc, other.parameterDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchFlag()).compareTo(other.isSetMatchFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchFlag, other.matchFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchName()).compareTo(other.isSetMatchName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchName, other.matchName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowIndex()).compareTo(other.isSetShowIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showIndex, other.showIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractParameter(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractId:");
    sb.append(this.contractId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameterId:");
    sb.append(this.parameterId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameterVal:");
    if (this.parameterVal == null) {
      sb.append("null");
    } else {
      sb.append(this.parameterVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameterDesc:");
    if (this.parameterDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.parameterDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchFlag:");
    if (this.matchFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.matchFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchName:");
    if (this.matchName == null) {
      sb.append("null");
    } else {
      sb.append(this.matchName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("showIndex:");
    sb.append(this.showIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractParameterStandardSchemeFactory implements SchemeFactory {
    public ContractParameterStandardScheme getScheme() {
      return new ContractParameterStandardScheme();
    }
  }

  private static class ContractParameterStandardScheme extends StandardScheme<ContractParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMETER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parameterId = iprot.readI32();
              struct.setParameterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMETER_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parameterVal = iprot.readString();
              struct.setParameterValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAMETER_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parameterDesc = iprot.readString();
              struct.setParameterDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MATCH_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchFlag = iprot.readString();
              struct.setMatchFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MATCH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchName = iprot.readString();
              struct.setMatchNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHOW_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showIndex = iprot.readI32();
              struct.setShowIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
      oprot.writeI32(struct.contractId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARAMETER_ID_FIELD_DESC);
      oprot.writeI32(struct.parameterId);
      oprot.writeFieldEnd();
      if (struct.parameterVal != null) {
        oprot.writeFieldBegin(PARAMETER_VAL_FIELD_DESC);
        oprot.writeString(struct.parameterVal);
        oprot.writeFieldEnd();
      }
      if (struct.parameterDesc != null) {
        oprot.writeFieldBegin(PARAMETER_DESC_FIELD_DESC);
        oprot.writeString(struct.parameterDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      if (struct.matchFlag != null) {
        oprot.writeFieldBegin(MATCH_FLAG_FIELD_DESC);
        oprot.writeString(struct.matchFlag);
        oprot.writeFieldEnd();
      }
      if (struct.matchName != null) {
        oprot.writeFieldBegin(MATCH_NAME_FIELD_DESC);
        oprot.writeString(struct.matchName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOW_INDEX_FIELD_DESC);
      oprot.writeI32(struct.showIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractParameterTupleSchemeFactory implements SchemeFactory {
    public ContractParameterTupleScheme getScheme() {
      return new ContractParameterTupleScheme();
    }
  }

  private static class ContractParameterTupleScheme extends TupleScheme<ContractParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetContractId()) {
        optionals.set(1);
      }
      if (struct.isSetParameterId()) {
        optionals.set(2);
      }
      if (struct.isSetParameterVal()) {
        optionals.set(3);
      }
      if (struct.isSetParameterDesc()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetPage()) {
        optionals.set(6);
      }
      if (struct.isSetRows()) {
        optionals.set(7);
      }
      if (struct.isSetTotal()) {
        optionals.set(8);
      }
      if (struct.isSetMatchFlag()) {
        optionals.set(9);
      }
      if (struct.isSetMatchName()) {
        optionals.set(10);
      }
      if (struct.isSetShowIndex()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetContractId()) {
        oprot.writeI32(struct.contractId);
      }
      if (struct.isSetParameterId()) {
        oprot.writeI32(struct.parameterId);
      }
      if (struct.isSetParameterVal()) {
        oprot.writeString(struct.parameterVal);
      }
      if (struct.isSetParameterDesc()) {
        oprot.writeString(struct.parameterDesc);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetMatchFlag()) {
        oprot.writeString(struct.matchFlag);
      }
      if (struct.isSetMatchName()) {
        oprot.writeString(struct.matchName);
      }
      if (struct.isSetShowIndex()) {
        oprot.writeI32(struct.showIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractId = iprot.readI32();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parameterId = iprot.readI32();
        struct.setParameterIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parameterVal = iprot.readString();
        struct.setParameterValIsSet(true);
      }
      if (incoming.get(4)) {
        struct.parameterDesc = iprot.readString();
        struct.setParameterDescIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.matchFlag = iprot.readString();
        struct.setMatchFlagIsSet(true);
      }
      if (incoming.get(10)) {
        struct.matchName = iprot.readString();
        struct.setMatchNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.showIndex = iprot.readI32();
        struct.setShowIndexIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class LoanExtensionView implements org.apache.thrift.TBase<LoanExtensionView, LoanExtensionView._Fields>, java.io.Serializable, Cloneable, Comparable<LoanExtensionView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanExtensionView");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNum", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutLoanDt", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_LOAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayLoanDt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanExtensionViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanExtensionViewTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String projectNum; // required
  public int cusType; // required
  public double creditAmt; // required
  public String pmUserName; // required
  public String planOutLoanDt; // required
  public String planRepayLoanDt; // required
  public int page; // required
  public int rows; // required
  public String requestDttm; // required
  public int projectType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUM((short)3, "projectNum"),
    CUS_TYPE((short)5, "cusType"),
    CREDIT_AMT((short)6, "creditAmt"),
    PM_USER_NAME((short)7, "pmUserName"),
    PLAN_OUT_LOAN_DT((short)8, "planOutLoanDt"),
    PLAN_REPAY_LOAN_DT((short)9, "planRepayLoanDt"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    REQUEST_DTTM((short)12, "requestDttm"),
    PROJECT_TYPE((short)13, "projectType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUM
          return PROJECT_NUM;
        case 5: // CUS_TYPE
          return CUS_TYPE;
        case 6: // CREDIT_AMT
          return CREDIT_AMT;
        case 7: // PM_USER_NAME
          return PM_USER_NAME;
        case 8: // PLAN_OUT_LOAN_DT
          return PLAN_OUT_LOAN_DT;
        case 9: // PLAN_REPAY_LOAN_DT
          return PLAN_REPAY_LOAN_DT;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 13: // PROJECT_TYPE
          return PROJECT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __CUSTYPE_ISSET_ID = 1;
  private static final int __CREDITAMT_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __PROJECTTYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("projectNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_OUT_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_REPAY_LOAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayLoanDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanExtensionView.class, metaDataMap);
  }

  public LoanExtensionView() {
  }

  public LoanExtensionView(
    int projectId,
    String projectName,
    String projectNum,
    int cusType,
    double creditAmt,
    String pmUserName,
    String planOutLoanDt,
    String planRepayLoanDt,
    int page,
    int rows,
    String requestDttm,
    int projectType)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNum = projectNum;
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.pmUserName = pmUserName;
    this.planOutLoanDt = planOutLoanDt;
    this.planRepayLoanDt = planRepayLoanDt;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.requestDttm = requestDttm;
    this.projectType = projectType;
    setProjectTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanExtensionView(LoanExtensionView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNum()) {
      this.projectNum = other.projectNum;
    }
    this.cusType = other.cusType;
    this.creditAmt = other.creditAmt;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetPlanOutLoanDt()) {
      this.planOutLoanDt = other.planOutLoanDt;
    }
    if (other.isSetPlanRepayLoanDt()) {
      this.planRepayLoanDt = other.planRepayLoanDt;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    this.projectType = other.projectType;
  }

  public LoanExtensionView deepCopy() {
    return new LoanExtensionView(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNum = null;
    setCusTypeIsSet(false);
    this.cusType = 0;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    this.pmUserName = null;
    this.planOutLoanDt = null;
    this.planRepayLoanDt = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.requestDttm = null;
    setProjectTypeIsSet(false);
    this.projectType = 0;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public LoanExtensionView setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public LoanExtensionView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNum() {
    return this.projectNum;
  }

  public LoanExtensionView setProjectNum(String projectNum) {
    this.projectNum = projectNum;
    return this;
  }

  public void unsetProjectNum() {
    this.projectNum = null;
  }

  /** Returns true if field projectNum is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNum() {
    return this.projectNum != null;
  }

  public void setProjectNumIsSet(boolean value) {
    if (!value) {
      this.projectNum = null;
    }
  }

  public int getCusType() {
    return this.cusType;
  }

  public LoanExtensionView setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public LoanExtensionView setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public LoanExtensionView setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getPlanOutLoanDt() {
    return this.planOutLoanDt;
  }

  public LoanExtensionView setPlanOutLoanDt(String planOutLoanDt) {
    this.planOutLoanDt = planOutLoanDt;
    return this;
  }

  public void unsetPlanOutLoanDt() {
    this.planOutLoanDt = null;
  }

  /** Returns true if field planOutLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutLoanDt() {
    return this.planOutLoanDt != null;
  }

  public void setPlanOutLoanDtIsSet(boolean value) {
    if (!value) {
      this.planOutLoanDt = null;
    }
  }

  public String getPlanRepayLoanDt() {
    return this.planRepayLoanDt;
  }

  public LoanExtensionView setPlanRepayLoanDt(String planRepayLoanDt) {
    this.planRepayLoanDt = planRepayLoanDt;
    return this;
  }

  public void unsetPlanRepayLoanDt() {
    this.planRepayLoanDt = null;
  }

  /** Returns true if field planRepayLoanDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayLoanDt() {
    return this.planRepayLoanDt != null;
  }

  public void setPlanRepayLoanDtIsSet(boolean value) {
    if (!value) {
      this.planRepayLoanDt = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public LoanExtensionView setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public LoanExtensionView setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public LoanExtensionView setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public int getProjectType() {
    return this.projectType;
  }

  public LoanExtensionView setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUM:
      if (value == null) {
        unsetProjectNum();
      } else {
        setProjectNum((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case PLAN_OUT_LOAN_DT:
      if (value == null) {
        unsetPlanOutLoanDt();
      } else {
        setPlanOutLoanDt((String)value);
      }
      break;

    case PLAN_REPAY_LOAN_DT:
      if (value == null) {
        unsetPlanRepayLoanDt();
      } else {
        setPlanRepayLoanDt((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUM:
      return getProjectNum();

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case PM_USER_NAME:
      return getPmUserName();

    case PLAN_OUT_LOAN_DT:
      return getPlanOutLoanDt();

    case PLAN_REPAY_LOAN_DT:
      return getPlanRepayLoanDt();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case REQUEST_DTTM:
      return getRequestDttm();

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUM:
      return isSetProjectNum();
    case CUS_TYPE:
      return isSetCusType();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case PM_USER_NAME:
      return isSetPmUserName();
    case PLAN_OUT_LOAN_DT:
      return isSetPlanOutLoanDt();
    case PLAN_REPAY_LOAN_DT:
      return isSetPlanRepayLoanDt();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case PROJECT_TYPE:
      return isSetProjectType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanExtensionView)
      return this.equals((LoanExtensionView)that);
    return false;
  }

  public boolean equals(LoanExtensionView that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNum = true && this.isSetProjectNum();
    boolean that_present_projectNum = true && that.isSetProjectNum();
    if (this_present_projectNum || that_present_projectNum) {
      if (!(this_present_projectNum && that_present_projectNum))
        return false;
      if (!this.projectNum.equals(that.projectNum))
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_planOutLoanDt = true && this.isSetPlanOutLoanDt();
    boolean that_present_planOutLoanDt = true && that.isSetPlanOutLoanDt();
    if (this_present_planOutLoanDt || that_present_planOutLoanDt) {
      if (!(this_present_planOutLoanDt && that_present_planOutLoanDt))
        return false;
      if (!this.planOutLoanDt.equals(that.planOutLoanDt))
        return false;
    }

    boolean this_present_planRepayLoanDt = true && this.isSetPlanRepayLoanDt();
    boolean that_present_planRepayLoanDt = true && that.isSetPlanRepayLoanDt();
    if (this_present_planRepayLoanDt || that_present_planRepayLoanDt) {
      if (!(this_present_planRepayLoanDt && that_present_planRepayLoanDt))
        return false;
      if (!this.planRepayLoanDt.equals(that.planRepayLoanDt))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNum = true && (isSetProjectNum());
    list.add(present_projectNum);
    if (present_projectNum)
      list.add(projectNum);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_planOutLoanDt = true && (isSetPlanOutLoanDt());
    list.add(present_planOutLoanDt);
    if (present_planOutLoanDt)
      list.add(planOutLoanDt);

    boolean present_planRepayLoanDt = true && (isSetPlanRepayLoanDt());
    list.add(present_planRepayLoanDt);
    if (present_planRepayLoanDt)
      list.add(planRepayLoanDt);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanExtensionView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNum()).compareTo(other.isSetProjectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNum, other.projectNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutLoanDt()).compareTo(other.isSetPlanOutLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutLoanDt, other.planOutLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayLoanDt()).compareTo(other.isSetPlanRepayLoanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayLoanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayLoanDt, other.planRepayLoanDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanExtensionView(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNum:");
    if (this.projectNum == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutLoanDt:");
    if (this.planOutLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayLoanDt:");
    if (this.planRepayLoanDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayLoanDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanExtensionViewStandardSchemeFactory implements SchemeFactory {
    public LoanExtensionViewStandardScheme getScheme() {
      return new LoanExtensionViewStandardScheme();
    }
  }

  private static class LoanExtensionViewStandardScheme extends StandardScheme<LoanExtensionView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanExtensionView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNum = iprot.readString();
              struct.setProjectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PLAN_OUT_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutLoanDt = iprot.readString();
              struct.setPlanOutLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PLAN_REPAY_LOAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayLoanDt = iprot.readString();
              struct.setPlanRepayLoanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanExtensionView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNum != null) {
        oprot.writeFieldBegin(PROJECT_NUM_FIELD_DESC);
        oprot.writeString(struct.projectNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.planOutLoanDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planOutLoanDt);
        oprot.writeFieldEnd();
      }
      if (struct.planRepayLoanDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_LOAN_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayLoanDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanExtensionViewTupleSchemeFactory implements SchemeFactory {
    public LoanExtensionViewTupleScheme getScheme() {
      return new LoanExtensionViewTupleScheme();
    }
  }

  private static class LoanExtensionViewTupleScheme extends TupleScheme<LoanExtensionView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanExtensionView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNum()) {
        optionals.set(2);
      }
      if (struct.isSetCusType()) {
        optionals.set(3);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(4);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(5);
      }
      if (struct.isSetPlanOutLoanDt()) {
        optionals.set(6);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        optionals.set(7);
      }
      if (struct.isSetPage()) {
        optionals.set(8);
      }
      if (struct.isSetRows()) {
        optionals.set(9);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(10);
      }
      if (struct.isSetProjectType()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNum()) {
        oprot.writeString(struct.projectNum);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetPlanOutLoanDt()) {
        oprot.writeString(struct.planOutLoanDt);
      }
      if (struct.isSetPlanRepayLoanDt()) {
        oprot.writeString(struct.planRepayLoanDt);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanExtensionView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNum = iprot.readString();
        struct.setProjectNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.planOutLoanDt = iprot.readString();
        struct.setPlanOutLoanDtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.planRepayLoanDt = iprot.readString();
        struct.setPlanRepayLoanDtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(11)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
    }
  }

}


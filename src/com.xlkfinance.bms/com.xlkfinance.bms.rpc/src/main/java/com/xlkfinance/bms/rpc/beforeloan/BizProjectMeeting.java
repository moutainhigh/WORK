/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizProjectMeeting implements org.apache.thrift.TBase<BizProjectMeeting, BizProjectMeeting._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectMeeting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectMeeting");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEETING_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingDttm", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECORD_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordUserId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MEETING_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingLocation", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MEETING_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingResult", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MEETING_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingNum", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectMeetingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectMeetingTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String meetingDttm; // required
  public int recordUserId; // required
  public String meetingLocation; // required
  public String meetingResult; // required
  public int status; // required
  public String meetingNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    MEETING_DTTM((short)3, "meetingDttm"),
    RECORD_USER_ID((short)4, "recordUserId"),
    MEETING_LOCATION((short)5, "meetingLocation"),
    MEETING_RESULT((short)6, "meetingResult"),
    STATUS((short)7, "status"),
    MEETING_NUM((short)8, "meetingNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // MEETING_DTTM
          return MEETING_DTTM;
        case 4: // RECORD_USER_ID
          return RECORD_USER_ID;
        case 5: // MEETING_LOCATION
          return MEETING_LOCATION;
        case 6: // MEETING_RESULT
          return MEETING_RESULT;
        case 7: // STATUS
          return STATUS;
        case 8: // MEETING_NUM
          return MEETING_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __RECORDUSERID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEETING_DTTM, new org.apache.thrift.meta_data.FieldMetaData("meetingDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("recordUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEETING_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("meetingLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETING_RESULT, new org.apache.thrift.meta_data.FieldMetaData("meetingResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEETING_NUM, new org.apache.thrift.meta_data.FieldMetaData("meetingNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectMeeting.class, metaDataMap);
  }

  public BizProjectMeeting() {
  }

  public BizProjectMeeting(
    int pid,
    int projectId,
    String meetingDttm,
    int recordUserId,
    String meetingLocation,
    String meetingResult,
    int status,
    String meetingNum)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.meetingDttm = meetingDttm;
    this.recordUserId = recordUserId;
    setRecordUserIdIsSet(true);
    this.meetingLocation = meetingLocation;
    this.meetingResult = meetingResult;
    this.status = status;
    setStatusIsSet(true);
    this.meetingNum = meetingNum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectMeeting(BizProjectMeeting other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetMeetingDttm()) {
      this.meetingDttm = other.meetingDttm;
    }
    this.recordUserId = other.recordUserId;
    if (other.isSetMeetingLocation()) {
      this.meetingLocation = other.meetingLocation;
    }
    if (other.isSetMeetingResult()) {
      this.meetingResult = other.meetingResult;
    }
    this.status = other.status;
    if (other.isSetMeetingNum()) {
      this.meetingNum = other.meetingNum;
    }
  }

  public BizProjectMeeting deepCopy() {
    return new BizProjectMeeting(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.meetingDttm = null;
    setRecordUserIdIsSet(false);
    this.recordUserId = 0;
    this.meetingLocation = null;
    this.meetingResult = null;
    setStatusIsSet(false);
    this.status = 0;
    this.meetingNum = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectMeeting setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizProjectMeeting setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getMeetingDttm() {
    return this.meetingDttm;
  }

  public BizProjectMeeting setMeetingDttm(String meetingDttm) {
    this.meetingDttm = meetingDttm;
    return this;
  }

  public void unsetMeetingDttm() {
    this.meetingDttm = null;
  }

  /** Returns true if field meetingDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingDttm() {
    return this.meetingDttm != null;
  }

  public void setMeetingDttmIsSet(boolean value) {
    if (!value) {
      this.meetingDttm = null;
    }
  }

  public int getRecordUserId() {
    return this.recordUserId;
  }

  public BizProjectMeeting setRecordUserId(int recordUserId) {
    this.recordUserId = recordUserId;
    setRecordUserIdIsSet(true);
    return this;
  }

  public void unsetRecordUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDUSERID_ISSET_ID);
  }

  /** Returns true if field recordUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDUSERID_ISSET_ID);
  }

  public void setRecordUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDUSERID_ISSET_ID, value);
  }

  public String getMeetingLocation() {
    return this.meetingLocation;
  }

  public BizProjectMeeting setMeetingLocation(String meetingLocation) {
    this.meetingLocation = meetingLocation;
    return this;
  }

  public void unsetMeetingLocation() {
    this.meetingLocation = null;
  }

  /** Returns true if field meetingLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingLocation() {
    return this.meetingLocation != null;
  }

  public void setMeetingLocationIsSet(boolean value) {
    if (!value) {
      this.meetingLocation = null;
    }
  }

  public String getMeetingResult() {
    return this.meetingResult;
  }

  public BizProjectMeeting setMeetingResult(String meetingResult) {
    this.meetingResult = meetingResult;
    return this;
  }

  public void unsetMeetingResult() {
    this.meetingResult = null;
  }

  /** Returns true if field meetingResult is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingResult() {
    return this.meetingResult != null;
  }

  public void setMeetingResultIsSet(boolean value) {
    if (!value) {
      this.meetingResult = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizProjectMeeting setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getMeetingNum() {
    return this.meetingNum;
  }

  public BizProjectMeeting setMeetingNum(String meetingNum) {
    this.meetingNum = meetingNum;
    return this;
  }

  public void unsetMeetingNum() {
    this.meetingNum = null;
  }

  /** Returns true if field meetingNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingNum() {
    return this.meetingNum != null;
  }

  public void setMeetingNumIsSet(boolean value) {
    if (!value) {
      this.meetingNum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case MEETING_DTTM:
      if (value == null) {
        unsetMeetingDttm();
      } else {
        setMeetingDttm((String)value);
      }
      break;

    case RECORD_USER_ID:
      if (value == null) {
        unsetRecordUserId();
      } else {
        setRecordUserId((Integer)value);
      }
      break;

    case MEETING_LOCATION:
      if (value == null) {
        unsetMeetingLocation();
      } else {
        setMeetingLocation((String)value);
      }
      break;

    case MEETING_RESULT:
      if (value == null) {
        unsetMeetingResult();
      } else {
        setMeetingResult((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case MEETING_NUM:
      if (value == null) {
        unsetMeetingNum();
      } else {
        setMeetingNum((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case MEETING_DTTM:
      return getMeetingDttm();

    case RECORD_USER_ID:
      return Integer.valueOf(getRecordUserId());

    case MEETING_LOCATION:
      return getMeetingLocation();

    case MEETING_RESULT:
      return getMeetingResult();

    case STATUS:
      return Integer.valueOf(getStatus());

    case MEETING_NUM:
      return getMeetingNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case MEETING_DTTM:
      return isSetMeetingDttm();
    case RECORD_USER_ID:
      return isSetRecordUserId();
    case MEETING_LOCATION:
      return isSetMeetingLocation();
    case MEETING_RESULT:
      return isSetMeetingResult();
    case STATUS:
      return isSetStatus();
    case MEETING_NUM:
      return isSetMeetingNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectMeeting)
      return this.equals((BizProjectMeeting)that);
    return false;
  }

  public boolean equals(BizProjectMeeting that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_meetingDttm = true && this.isSetMeetingDttm();
    boolean that_present_meetingDttm = true && that.isSetMeetingDttm();
    if (this_present_meetingDttm || that_present_meetingDttm) {
      if (!(this_present_meetingDttm && that_present_meetingDttm))
        return false;
      if (!this.meetingDttm.equals(that.meetingDttm))
        return false;
    }

    boolean this_present_recordUserId = true;
    boolean that_present_recordUserId = true;
    if (this_present_recordUserId || that_present_recordUserId) {
      if (!(this_present_recordUserId && that_present_recordUserId))
        return false;
      if (this.recordUserId != that.recordUserId)
        return false;
    }

    boolean this_present_meetingLocation = true && this.isSetMeetingLocation();
    boolean that_present_meetingLocation = true && that.isSetMeetingLocation();
    if (this_present_meetingLocation || that_present_meetingLocation) {
      if (!(this_present_meetingLocation && that_present_meetingLocation))
        return false;
      if (!this.meetingLocation.equals(that.meetingLocation))
        return false;
    }

    boolean this_present_meetingResult = true && this.isSetMeetingResult();
    boolean that_present_meetingResult = true && that.isSetMeetingResult();
    if (this_present_meetingResult || that_present_meetingResult) {
      if (!(this_present_meetingResult && that_present_meetingResult))
        return false;
      if (!this.meetingResult.equals(that.meetingResult))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_meetingNum = true && this.isSetMeetingNum();
    boolean that_present_meetingNum = true && that.isSetMeetingNum();
    if (this_present_meetingNum || that_present_meetingNum) {
      if (!(this_present_meetingNum && that_present_meetingNum))
        return false;
      if (!this.meetingNum.equals(that.meetingNum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_meetingDttm = true && (isSetMeetingDttm());
    list.add(present_meetingDttm);
    if (present_meetingDttm)
      list.add(meetingDttm);

    boolean present_recordUserId = true;
    list.add(present_recordUserId);
    if (present_recordUserId)
      list.add(recordUserId);

    boolean present_meetingLocation = true && (isSetMeetingLocation());
    list.add(present_meetingLocation);
    if (present_meetingLocation)
      list.add(meetingLocation);

    boolean present_meetingResult = true && (isSetMeetingResult());
    list.add(present_meetingResult);
    if (present_meetingResult)
      list.add(meetingResult);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_meetingNum = true && (isSetMeetingNum());
    list.add(present_meetingNum);
    if (present_meetingNum)
      list.add(meetingNum);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectMeeting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingDttm()).compareTo(other.isSetMeetingDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingDttm, other.meetingDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordUserId()).compareTo(other.isSetRecordUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordUserId, other.recordUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingLocation()).compareTo(other.isSetMeetingLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingLocation, other.meetingLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingResult()).compareTo(other.isSetMeetingResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingResult, other.meetingResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingNum()).compareTo(other.isSetMeetingNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingNum, other.meetingNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectMeeting(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingDttm:");
    if (this.meetingDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordUserId:");
    sb.append(this.recordUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingLocation:");
    if (this.meetingLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingResult:");
    if (this.meetingResult == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingNum:");
    if (this.meetingNum == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingNum);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectMeetingStandardSchemeFactory implements SchemeFactory {
    public BizProjectMeetingStandardScheme getScheme() {
      return new BizProjectMeetingStandardScheme();
    }
  }

  private static class BizProjectMeetingStandardScheme extends StandardScheme<BizProjectMeeting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectMeeting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEETING_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingDttm = iprot.readString();
              struct.setMeetingDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECORD_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordUserId = iprot.readI32();
              struct.setRecordUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEETING_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingLocation = iprot.readString();
              struct.setMeetingLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEETING_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingResult = iprot.readString();
              struct.setMeetingResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEETING_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingNum = iprot.readString();
              struct.setMeetingNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectMeeting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.meetingDttm != null) {
        oprot.writeFieldBegin(MEETING_DTTM_FIELD_DESC);
        oprot.writeString(struct.meetingDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECORD_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.recordUserId);
      oprot.writeFieldEnd();
      if (struct.meetingLocation != null) {
        oprot.writeFieldBegin(MEETING_LOCATION_FIELD_DESC);
        oprot.writeString(struct.meetingLocation);
        oprot.writeFieldEnd();
      }
      if (struct.meetingResult != null) {
        oprot.writeFieldBegin(MEETING_RESULT_FIELD_DESC);
        oprot.writeString(struct.meetingResult);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.meetingNum != null) {
        oprot.writeFieldBegin(MEETING_NUM_FIELD_DESC);
        oprot.writeString(struct.meetingNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectMeetingTupleSchemeFactory implements SchemeFactory {
    public BizProjectMeetingTupleScheme getScheme() {
      return new BizProjectMeetingTupleScheme();
    }
  }

  private static class BizProjectMeetingTupleScheme extends TupleScheme<BizProjectMeeting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectMeeting struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetMeetingDttm()) {
        optionals.set(2);
      }
      if (struct.isSetRecordUserId()) {
        optionals.set(3);
      }
      if (struct.isSetMeetingLocation()) {
        optionals.set(4);
      }
      if (struct.isSetMeetingResult()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetMeetingNum()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetMeetingDttm()) {
        oprot.writeString(struct.meetingDttm);
      }
      if (struct.isSetRecordUserId()) {
        oprot.writeI32(struct.recordUserId);
      }
      if (struct.isSetMeetingLocation()) {
        oprot.writeString(struct.meetingLocation);
      }
      if (struct.isSetMeetingResult()) {
        oprot.writeString(struct.meetingResult);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetMeetingNum()) {
        oprot.writeString(struct.meetingNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectMeeting struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.meetingDttm = iprot.readString();
        struct.setMeetingDttmIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recordUserId = iprot.readI32();
        struct.setRecordUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.meetingLocation = iprot.readString();
        struct.setMeetingLocationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.meetingResult = iprot.readString();
        struct.setMeetingResultIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.meetingNum = iprot.readString();
        struct.setMeetingNumIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-5-25")
public class SysLookupService {

  /**
   * 数据字典Service
   */
  public interface Iface {

    /**
     * @Description: 添加数据字典
     * @param sysLookup
     * @return int
     * @author: Dai.jingyu
     * @date: 2015年3月13日 下午5:11:34
     * 
     * @param sysLookup
     */
    public int addSysLookup(SysLookup sysLookup) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description: 批量删除数据字典配置
     * @param SysLookuPids pid列表
     * @return int
     * @author: Dai.jingyu
     * @date: 2015年3月11日 下午2:51:26
     * 
     * @param SysLookuPids
     */
    public int deleteLookup(List<Integer> SysLookuPids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description: 根据主键更新对象
     * @return sysLookup
     * @author: Dai.jingyu
     * @date: 2015年3月11日 下午2:51:26
     * 
     * @param sysLookup
     */
    public int updateSysLookup(SysLookup sysLookup) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description: 条件查询所有的数据字典配置
     * @param sysLookup  数据字典配置对象
     * @return 数据字典配置集合
     * @author: Mr.Cai
     * @date: 2014年12月24日 下午4:23:38
     * 
     * @param sysLookup
     */
    public List<SysLookup> getAllSysLookup(SysLookup sysLookup) throws org.apache.thrift.TException;

    /**
     * @Description: 根据数据字典条件查询 数据总记录条数
     * @param sysLookup
     * @return int
     * @author: Dai.jingyu
     * @date: 2015年3月13日 下午5:11:34
     * 
     * @param sysLookup
     */
    public int getAllSysLookupSum(SysLookup sysLookup) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public String getSysLookupValByName(int pid) throws org.apache.thrift.TException;

    public String getSysLookupValByPid(int pid) throws org.apache.thrift.TException;

    /**
     * @Description: 根据数据字典类型查询当前数据类型的值
     * @param lookupType  数据字典类型
     * @return 数据字典值集合
     * @author: Cai.Qing
     * @date: 2014年12月29日 上午11:24:40
     * 
     * @param lookupType
     */
    public List<SysLookupVal> getSysLookupValByLookType(String lookupType) throws org.apache.thrift.TException;

    /**
     * @Description: 获取当前数据字典下面的值集合
     * @param lookupId 数据字典ID
     * @return 数据字典值集合 List<SysLookupVal>
     * @author: Cai.Qing
     * @date: 2014年12月26日 上午11:56:02
     * 
     * @param lookupId
     * @param page
     * @param rows
     */
    public List<SysLookupVal> getSysLookupValByLookupId(int lookupId, int page, int rows) throws org.apache.thrift.TException;

    /**
     * @Description: 获取当前数据字典下面的值集合
     * @param lookupId 数据字典ID
     * @return int 总计录条数
     * @author: JingYu.Dai
     * @date: 2015年6月9日 上午11:45:37
     * 
     * @param lookupId
     */
    public int getSysLookupValByLookupIdTotal(int lookupId) throws org.apache.thrift.TException;

    /**
     * @Description: 删除数据字典值
     * @param lookupValPids 数据字典pid 数组
     * @return 受影响的行数
     * @author: Cai.Qing
     * @date: 2014年12月26日 下午12:00:56
     * 
     * @param lookupValPids
     */
    public int deleteLookupVal(String lookupValPids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description: 添加数据字典值
     * @param lookupValPids 数据字典pid 数组
     * @return 受影响的行数
     * @author: Cai.Qing
     * @date: 2014年12月26日 下午12:00:56
     * 
     * @param sysLookupVal
     */
    public int addSysLookupVal(SysLookupVal sysLookupVal) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description: 根据主键更新数据字典值
     * @param lookupValPids 数据字典pid 数组
     * @return 受影响的行数
     * @author: Cai.Qing
     * @date: 2014年12月26日 下午12:00:56
     * 
     * @param sysLookupVal
     */
    public int updateSysLookupVal(SysLookupVal sysLookupVal) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * @Description: 根据客户类型查询资料类型
     * @param projectId
     * @return List<SysLookupVal>
     * @author: xuweihao
     * @date: 2015年3月30日 上午9:49:40
     * 
     * @param projectId
     */
    public List<SysLookupVal> getDataTypeSysLookup(int projectId) throws org.apache.thrift.TException;

    /**
     * @Description: 抵质押物所需查询的详细信息数据
     * @param lookupType 抵质押物类型值
     * @return 抵质押物当前类型的详细信息集合
     * @throws TException
     * @author: Cai.Qing
     * @date: 2015年4月23日 上午1:53:37
     * 
     * @param lookupType
     */
    public List<SysLookupVal> getProjectAssDtlByLookType(String lookupType) throws org.apache.thrift.TException;

    /**
     * @Description: 根据数据字典类型,和字典值     查询当前字典对象
     * @param lookupType  数据字典类型  (sys_lookup)
     * @param lookupVal  数据字典类型   (sys_lookup_val)
     * @return 数据字典
     * @author: chenzhuzhen
     * @date: 2016年07月07日 上午11:24:40
     * 
     * @param lookupType
     * @param lookupVal
     */
    public SysLookupVal getSysLookupValByChildType(String lookupType, String lookupVal) throws org.apache.thrift.TException;

    /**
     * @Description: 根据项目类型查询资料类型
     * @param projectId
     * @return List<SysLookupVal>
     * @author: baogang
     * @date: 2017年1月17日 上午9:49:40
     * 
     * @param projectTypes
     */
    public List<SysLookupVal> getDataTypeByType(String projectTypes) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addSysLookup(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLookup(List<Integer> SysLookuPids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSysLookup(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllSysLookup(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllSysLookupSum(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysLookupValByName(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysLookupValByPid(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysLookupValByLookType(String lookupType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysLookupValByLookupId(int lookupId, int page, int rows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysLookupValByLookupIdTotal(int lookupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLookupVal(String lookupValPids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSysLookupVal(SysLookupVal sysLookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSysLookupVal(SysLookupVal sysLookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDataTypeSysLookup(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProjectAssDtlByLookType(String lookupType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSysLookupValByChildType(String lookupType, String lookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDataTypeByType(String projectTypes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addSysLookup(SysLookup sysLookup) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addSysLookup(sysLookup);
      return recv_addSysLookup();
    }

    public void send_addSysLookup(SysLookup sysLookup) throws org.apache.thrift.TException
    {
      addSysLookup_args args = new addSysLookup_args();
      args.setSysLookup(sysLookup);
      sendBase("addSysLookup", args);
    }

    public int recv_addSysLookup() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addSysLookup_result result = new addSysLookup_result();
      receiveBase(result, "addSysLookup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSysLookup failed: unknown result");
    }

    public int deleteLookup(List<Integer> SysLookuPids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteLookup(SysLookuPids);
      return recv_deleteLookup();
    }

    public void send_deleteLookup(List<Integer> SysLookuPids) throws org.apache.thrift.TException
    {
      deleteLookup_args args = new deleteLookup_args();
      args.setSysLookuPids(SysLookuPids);
      sendBase("deleteLookup", args);
    }

    public int recv_deleteLookup() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteLookup_result result = new deleteLookup_result();
      receiveBase(result, "deleteLookup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLookup failed: unknown result");
    }

    public int updateSysLookup(SysLookup sysLookup) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateSysLookup(sysLookup);
      return recv_updateSysLookup();
    }

    public void send_updateSysLookup(SysLookup sysLookup) throws org.apache.thrift.TException
    {
      updateSysLookup_args args = new updateSysLookup_args();
      args.setSysLookup(sysLookup);
      sendBase("updateSysLookup", args);
    }

    public int recv_updateSysLookup() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateSysLookup_result result = new updateSysLookup_result();
      receiveBase(result, "updateSysLookup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSysLookup failed: unknown result");
    }

    public List<SysLookup> getAllSysLookup(SysLookup sysLookup) throws org.apache.thrift.TException
    {
      send_getAllSysLookup(sysLookup);
      return recv_getAllSysLookup();
    }

    public void send_getAllSysLookup(SysLookup sysLookup) throws org.apache.thrift.TException
    {
      getAllSysLookup_args args = new getAllSysLookup_args();
      args.setSysLookup(sysLookup);
      sendBase("getAllSysLookup", args);
    }

    public List<SysLookup> recv_getAllSysLookup() throws org.apache.thrift.TException
    {
      getAllSysLookup_result result = new getAllSysLookup_result();
      receiveBase(result, "getAllSysLookup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllSysLookup failed: unknown result");
    }

    public int getAllSysLookupSum(SysLookup sysLookup) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getAllSysLookupSum(sysLookup);
      return recv_getAllSysLookupSum();
    }

    public void send_getAllSysLookupSum(SysLookup sysLookup) throws org.apache.thrift.TException
    {
      getAllSysLookupSum_args args = new getAllSysLookupSum_args();
      args.setSysLookup(sysLookup);
      sendBase("getAllSysLookupSum", args);
    }

    public int recv_getAllSysLookupSum() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getAllSysLookupSum_result result = new getAllSysLookupSum_result();
      receiveBase(result, "getAllSysLookupSum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllSysLookupSum failed: unknown result");
    }

    public String getSysLookupValByName(int pid) throws org.apache.thrift.TException
    {
      send_getSysLookupValByName(pid);
      return recv_getSysLookupValByName();
    }

    public void send_getSysLookupValByName(int pid) throws org.apache.thrift.TException
    {
      getSysLookupValByName_args args = new getSysLookupValByName_args();
      args.setPid(pid);
      sendBase("getSysLookupValByName", args);
    }

    public String recv_getSysLookupValByName() throws org.apache.thrift.TException
    {
      getSysLookupValByName_result result = new getSysLookupValByName_result();
      receiveBase(result, "getSysLookupValByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysLookupValByName failed: unknown result");
    }

    public String getSysLookupValByPid(int pid) throws org.apache.thrift.TException
    {
      send_getSysLookupValByPid(pid);
      return recv_getSysLookupValByPid();
    }

    public void send_getSysLookupValByPid(int pid) throws org.apache.thrift.TException
    {
      getSysLookupValByPid_args args = new getSysLookupValByPid_args();
      args.setPid(pid);
      sendBase("getSysLookupValByPid", args);
    }

    public String recv_getSysLookupValByPid() throws org.apache.thrift.TException
    {
      getSysLookupValByPid_result result = new getSysLookupValByPid_result();
      receiveBase(result, "getSysLookupValByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysLookupValByPid failed: unknown result");
    }

    public List<SysLookupVal> getSysLookupValByLookType(String lookupType) throws org.apache.thrift.TException
    {
      send_getSysLookupValByLookType(lookupType);
      return recv_getSysLookupValByLookType();
    }

    public void send_getSysLookupValByLookType(String lookupType) throws org.apache.thrift.TException
    {
      getSysLookupValByLookType_args args = new getSysLookupValByLookType_args();
      args.setLookupType(lookupType);
      sendBase("getSysLookupValByLookType", args);
    }

    public List<SysLookupVal> recv_getSysLookupValByLookType() throws org.apache.thrift.TException
    {
      getSysLookupValByLookType_result result = new getSysLookupValByLookType_result();
      receiveBase(result, "getSysLookupValByLookType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysLookupValByLookType failed: unknown result");
    }

    public List<SysLookupVal> getSysLookupValByLookupId(int lookupId, int page, int rows) throws org.apache.thrift.TException
    {
      send_getSysLookupValByLookupId(lookupId, page, rows);
      return recv_getSysLookupValByLookupId();
    }

    public void send_getSysLookupValByLookupId(int lookupId, int page, int rows) throws org.apache.thrift.TException
    {
      getSysLookupValByLookupId_args args = new getSysLookupValByLookupId_args();
      args.setLookupId(lookupId);
      args.setPage(page);
      args.setRows(rows);
      sendBase("getSysLookupValByLookupId", args);
    }

    public List<SysLookupVal> recv_getSysLookupValByLookupId() throws org.apache.thrift.TException
    {
      getSysLookupValByLookupId_result result = new getSysLookupValByLookupId_result();
      receiveBase(result, "getSysLookupValByLookupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysLookupValByLookupId failed: unknown result");
    }

    public int getSysLookupValByLookupIdTotal(int lookupId) throws org.apache.thrift.TException
    {
      send_getSysLookupValByLookupIdTotal(lookupId);
      return recv_getSysLookupValByLookupIdTotal();
    }

    public void send_getSysLookupValByLookupIdTotal(int lookupId) throws org.apache.thrift.TException
    {
      getSysLookupValByLookupIdTotal_args args = new getSysLookupValByLookupIdTotal_args();
      args.setLookupId(lookupId);
      sendBase("getSysLookupValByLookupIdTotal", args);
    }

    public int recv_getSysLookupValByLookupIdTotal() throws org.apache.thrift.TException
    {
      getSysLookupValByLookupIdTotal_result result = new getSysLookupValByLookupIdTotal_result();
      receiveBase(result, "getSysLookupValByLookupIdTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysLookupValByLookupIdTotal failed: unknown result");
    }

    public int deleteLookupVal(String lookupValPids) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteLookupVal(lookupValPids);
      return recv_deleteLookupVal();
    }

    public void send_deleteLookupVal(String lookupValPids) throws org.apache.thrift.TException
    {
      deleteLookupVal_args args = new deleteLookupVal_args();
      args.setLookupValPids(lookupValPids);
      sendBase("deleteLookupVal", args);
    }

    public int recv_deleteLookupVal() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteLookupVal_result result = new deleteLookupVal_result();
      receiveBase(result, "deleteLookupVal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLookupVal failed: unknown result");
    }

    public int addSysLookupVal(SysLookupVal sysLookupVal) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addSysLookupVal(sysLookupVal);
      return recv_addSysLookupVal();
    }

    public void send_addSysLookupVal(SysLookupVal sysLookupVal) throws org.apache.thrift.TException
    {
      addSysLookupVal_args args = new addSysLookupVal_args();
      args.setSysLookupVal(sysLookupVal);
      sendBase("addSysLookupVal", args);
    }

    public int recv_addSysLookupVal() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addSysLookupVal_result result = new addSysLookupVal_result();
      receiveBase(result, "addSysLookupVal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSysLookupVal failed: unknown result");
    }

    public int updateSysLookupVal(SysLookupVal sysLookupVal) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateSysLookupVal(sysLookupVal);
      return recv_updateSysLookupVal();
    }

    public void send_updateSysLookupVal(SysLookupVal sysLookupVal) throws org.apache.thrift.TException
    {
      updateSysLookupVal_args args = new updateSysLookupVal_args();
      args.setSysLookupVal(sysLookupVal);
      sendBase("updateSysLookupVal", args);
    }

    public int recv_updateSysLookupVal() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateSysLookupVal_result result = new updateSysLookupVal_result();
      receiveBase(result, "updateSysLookupVal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSysLookupVal failed: unknown result");
    }

    public List<SysLookupVal> getDataTypeSysLookup(int projectId) throws org.apache.thrift.TException
    {
      send_getDataTypeSysLookup(projectId);
      return recv_getDataTypeSysLookup();
    }

    public void send_getDataTypeSysLookup(int projectId) throws org.apache.thrift.TException
    {
      getDataTypeSysLookup_args args = new getDataTypeSysLookup_args();
      args.setProjectId(projectId);
      sendBase("getDataTypeSysLookup", args);
    }

    public List<SysLookupVal> recv_getDataTypeSysLookup() throws org.apache.thrift.TException
    {
      getDataTypeSysLookup_result result = new getDataTypeSysLookup_result();
      receiveBase(result, "getDataTypeSysLookup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataTypeSysLookup failed: unknown result");
    }

    public List<SysLookupVal> getProjectAssDtlByLookType(String lookupType) throws org.apache.thrift.TException
    {
      send_getProjectAssDtlByLookType(lookupType);
      return recv_getProjectAssDtlByLookType();
    }

    public void send_getProjectAssDtlByLookType(String lookupType) throws org.apache.thrift.TException
    {
      getProjectAssDtlByLookType_args args = new getProjectAssDtlByLookType_args();
      args.setLookupType(lookupType);
      sendBase("getProjectAssDtlByLookType", args);
    }

    public List<SysLookupVal> recv_getProjectAssDtlByLookType() throws org.apache.thrift.TException
    {
      getProjectAssDtlByLookType_result result = new getProjectAssDtlByLookType_result();
      receiveBase(result, "getProjectAssDtlByLookType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectAssDtlByLookType failed: unknown result");
    }

    public SysLookupVal getSysLookupValByChildType(String lookupType, String lookupVal) throws org.apache.thrift.TException
    {
      send_getSysLookupValByChildType(lookupType, lookupVal);
      return recv_getSysLookupValByChildType();
    }

    public void send_getSysLookupValByChildType(String lookupType, String lookupVal) throws org.apache.thrift.TException
    {
      getSysLookupValByChildType_args args = new getSysLookupValByChildType_args();
      args.setLookupType(lookupType);
      args.setLookupVal(lookupVal);
      sendBase("getSysLookupValByChildType", args);
    }

    public SysLookupVal recv_getSysLookupValByChildType() throws org.apache.thrift.TException
    {
      getSysLookupValByChildType_result result = new getSysLookupValByChildType_result();
      receiveBase(result, "getSysLookupValByChildType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSysLookupValByChildType failed: unknown result");
    }

    public List<SysLookupVal> getDataTypeByType(String projectTypes) throws org.apache.thrift.TException
    {
      send_getDataTypeByType(projectTypes);
      return recv_getDataTypeByType();
    }

    public void send_getDataTypeByType(String projectTypes) throws org.apache.thrift.TException
    {
      getDataTypeByType_args args = new getDataTypeByType_args();
      args.setProjectTypes(projectTypes);
      sendBase("getDataTypeByType", args);
    }

    public List<SysLookupVal> recv_getDataTypeByType() throws org.apache.thrift.TException
    {
      getDataTypeByType_result result = new getDataTypeByType_result();
      receiveBase(result, "getDataTypeByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataTypeByType failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSysLookup(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSysLookup_call method_call = new addSysLookup_call(sysLookup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSysLookup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysLookup sysLookup;
      public addSysLookup_call(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysLookup = sysLookup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSysLookup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSysLookup_args args = new addSysLookup_args();
        args.setSysLookup(sysLookup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSysLookup();
      }
    }

    public void deleteLookup(List<Integer> SysLookuPids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLookup_call method_call = new deleteLookup_call(SysLookuPids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLookup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> SysLookuPids;
      public deleteLookup_call(List<Integer> SysLookuPids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SysLookuPids = SysLookuPids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLookup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLookup_args args = new deleteLookup_args();
        args.setSysLookuPids(SysLookuPids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLookup();
      }
    }

    public void updateSysLookup(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSysLookup_call method_call = new updateSysLookup_call(sysLookup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSysLookup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysLookup sysLookup;
      public updateSysLookup_call(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysLookup = sysLookup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSysLookup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSysLookup_args args = new updateSysLookup_args();
        args.setSysLookup(sysLookup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSysLookup();
      }
    }

    public void getAllSysLookup(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllSysLookup_call method_call = new getAllSysLookup_call(sysLookup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllSysLookup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysLookup sysLookup;
      public getAllSysLookup_call(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysLookup = sysLookup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllSysLookup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllSysLookup_args args = new getAllSysLookup_args();
        args.setSysLookup(sysLookup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysLookup> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllSysLookup();
      }
    }

    public void getAllSysLookupSum(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllSysLookupSum_call method_call = new getAllSysLookupSum_call(sysLookup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllSysLookupSum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysLookup sysLookup;
      public getAllSysLookupSum_call(SysLookup sysLookup, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysLookup = sysLookup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllSysLookupSum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllSysLookupSum_args args = new getAllSysLookupSum_args();
        args.setSysLookup(sysLookup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllSysLookupSum();
      }
    }

    public void getSysLookupValByName(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysLookupValByName_call method_call = new getSysLookupValByName_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysLookupValByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getSysLookupValByName_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysLookupValByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysLookupValByName_args args = new getSysLookupValByName_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysLookupValByName();
      }
    }

    public void getSysLookupValByPid(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysLookupValByPid_call method_call = new getSysLookupValByPid_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysLookupValByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getSysLookupValByPid_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysLookupValByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysLookupValByPid_args args = new getSysLookupValByPid_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysLookupValByPid();
      }
    }

    public void getSysLookupValByLookType(String lookupType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysLookupValByLookType_call method_call = new getSysLookupValByLookType_call(lookupType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysLookupValByLookType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lookupType;
      public getSysLookupValByLookType_call(String lookupType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lookupType = lookupType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysLookupValByLookType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysLookupValByLookType_args args = new getSysLookupValByLookType_args();
        args.setLookupType(lookupType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysLookupVal> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysLookupValByLookType();
      }
    }

    public void getSysLookupValByLookupId(int lookupId, int page, int rows, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysLookupValByLookupId_call method_call = new getSysLookupValByLookupId_call(lookupId, page, rows, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysLookupValByLookupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lookupId;
      private int page;
      private int rows;
      public getSysLookupValByLookupId_call(int lookupId, int page, int rows, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lookupId = lookupId;
        this.page = page;
        this.rows = rows;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysLookupValByLookupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysLookupValByLookupId_args args = new getSysLookupValByLookupId_args();
        args.setLookupId(lookupId);
        args.setPage(page);
        args.setRows(rows);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysLookupVal> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysLookupValByLookupId();
      }
    }

    public void getSysLookupValByLookupIdTotal(int lookupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysLookupValByLookupIdTotal_call method_call = new getSysLookupValByLookupIdTotal_call(lookupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysLookupValByLookupIdTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lookupId;
      public getSysLookupValByLookupIdTotal_call(int lookupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lookupId = lookupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysLookupValByLookupIdTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysLookupValByLookupIdTotal_args args = new getSysLookupValByLookupIdTotal_args();
        args.setLookupId(lookupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysLookupValByLookupIdTotal();
      }
    }

    public void deleteLookupVal(String lookupValPids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLookupVal_call method_call = new deleteLookupVal_call(lookupValPids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLookupVal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lookupValPids;
      public deleteLookupVal_call(String lookupValPids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lookupValPids = lookupValPids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLookupVal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLookupVal_args args = new deleteLookupVal_args();
        args.setLookupValPids(lookupValPids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLookupVal();
      }
    }

    public void addSysLookupVal(SysLookupVal sysLookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSysLookupVal_call method_call = new addSysLookupVal_call(sysLookupVal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSysLookupVal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysLookupVal sysLookupVal;
      public addSysLookupVal_call(SysLookupVal sysLookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysLookupVal = sysLookupVal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSysLookupVal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSysLookupVal_args args = new addSysLookupVal_args();
        args.setSysLookupVal(sysLookupVal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSysLookupVal();
      }
    }

    public void updateSysLookupVal(SysLookupVal sysLookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSysLookupVal_call method_call = new updateSysLookupVal_call(sysLookupVal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSysLookupVal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysLookupVal sysLookupVal;
      public updateSysLookupVal_call(SysLookupVal sysLookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sysLookupVal = sysLookupVal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSysLookupVal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSysLookupVal_args args = new updateSysLookupVal_args();
        args.setSysLookupVal(sysLookupVal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSysLookupVal();
      }
    }

    public void getDataTypeSysLookup(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataTypeSysLookup_call method_call = new getDataTypeSysLookup_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataTypeSysLookup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getDataTypeSysLookup_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataTypeSysLookup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataTypeSysLookup_args args = new getDataTypeSysLookup_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysLookupVal> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataTypeSysLookup();
      }
    }

    public void getProjectAssDtlByLookType(String lookupType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectAssDtlByLookType_call method_call = new getProjectAssDtlByLookType_call(lookupType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectAssDtlByLookType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lookupType;
      public getProjectAssDtlByLookType_call(String lookupType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lookupType = lookupType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectAssDtlByLookType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectAssDtlByLookType_args args = new getProjectAssDtlByLookType_args();
        args.setLookupType(lookupType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysLookupVal> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectAssDtlByLookType();
      }
    }

    public void getSysLookupValByChildType(String lookupType, String lookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSysLookupValByChildType_call method_call = new getSysLookupValByChildType_call(lookupType, lookupVal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSysLookupValByChildType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String lookupType;
      private String lookupVal;
      public getSysLookupValByChildType_call(String lookupType, String lookupVal, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lookupType = lookupType;
        this.lookupVal = lookupVal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSysLookupValByChildType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSysLookupValByChildType_args args = new getSysLookupValByChildType_args();
        args.setLookupType(lookupType);
        args.setLookupVal(lookupVal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SysLookupVal getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSysLookupValByChildType();
      }
    }

    public void getDataTypeByType(String projectTypes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataTypeByType_call method_call = new getDataTypeByType_call(projectTypes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataTypeByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String projectTypes;
      public getDataTypeByType_call(String projectTypes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectTypes = projectTypes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataTypeByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataTypeByType_args args = new getDataTypeByType_args();
        args.setProjectTypes(projectTypes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SysLookupVal> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataTypeByType();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSysLookup", new addSysLookup());
      processMap.put("deleteLookup", new deleteLookup());
      processMap.put("updateSysLookup", new updateSysLookup());
      processMap.put("getAllSysLookup", new getAllSysLookup());
      processMap.put("getAllSysLookupSum", new getAllSysLookupSum());
      processMap.put("getSysLookupValByName", new getSysLookupValByName());
      processMap.put("getSysLookupValByPid", new getSysLookupValByPid());
      processMap.put("getSysLookupValByLookType", new getSysLookupValByLookType());
      processMap.put("getSysLookupValByLookupId", new getSysLookupValByLookupId());
      processMap.put("getSysLookupValByLookupIdTotal", new getSysLookupValByLookupIdTotal());
      processMap.put("deleteLookupVal", new deleteLookupVal());
      processMap.put("addSysLookupVal", new addSysLookupVal());
      processMap.put("updateSysLookupVal", new updateSysLookupVal());
      processMap.put("getDataTypeSysLookup", new getDataTypeSysLookup());
      processMap.put("getProjectAssDtlByLookType", new getProjectAssDtlByLookType());
      processMap.put("getSysLookupValByChildType", new getSysLookupValByChildType());
      processMap.put("getDataTypeByType", new getDataTypeByType());
      return processMap;
    }

    public static class addSysLookup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSysLookup_args> {
      public addSysLookup() {
        super("addSysLookup");
      }

      public addSysLookup_args getEmptyArgsInstance() {
        return new addSysLookup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSysLookup_result getResult(I iface, addSysLookup_args args) throws org.apache.thrift.TException {
        addSysLookup_result result = new addSysLookup_result();
        try {
          result.success = iface.addSysLookup(args.sysLookup);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteLookup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLookup_args> {
      public deleteLookup() {
        super("deleteLookup");
      }

      public deleteLookup_args getEmptyArgsInstance() {
        return new deleteLookup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLookup_result getResult(I iface, deleteLookup_args args) throws org.apache.thrift.TException {
        deleteLookup_result result = new deleteLookup_result();
        try {
          result.success = iface.deleteLookup(args.SysLookuPids);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateSysLookup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSysLookup_args> {
      public updateSysLookup() {
        super("updateSysLookup");
      }

      public updateSysLookup_args getEmptyArgsInstance() {
        return new updateSysLookup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSysLookup_result getResult(I iface, updateSysLookup_args args) throws org.apache.thrift.TException {
        updateSysLookup_result result = new updateSysLookup_result();
        try {
          result.success = iface.updateSysLookup(args.sysLookup);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getAllSysLookup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllSysLookup_args> {
      public getAllSysLookup() {
        super("getAllSysLookup");
      }

      public getAllSysLookup_args getEmptyArgsInstance() {
        return new getAllSysLookup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllSysLookup_result getResult(I iface, getAllSysLookup_args args) throws org.apache.thrift.TException {
        getAllSysLookup_result result = new getAllSysLookup_result();
        result.success = iface.getAllSysLookup(args.sysLookup);
        return result;
      }
    }

    public static class getAllSysLookupSum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllSysLookupSum_args> {
      public getAllSysLookupSum() {
        super("getAllSysLookupSum");
      }

      public getAllSysLookupSum_args getEmptyArgsInstance() {
        return new getAllSysLookupSum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllSysLookupSum_result getResult(I iface, getAllSysLookupSum_args args) throws org.apache.thrift.TException {
        getAllSysLookupSum_result result = new getAllSysLookupSum_result();
        try {
          result.success = iface.getAllSysLookupSum(args.sysLookup);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getSysLookupValByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysLookupValByName_args> {
      public getSysLookupValByName() {
        super("getSysLookupValByName");
      }

      public getSysLookupValByName_args getEmptyArgsInstance() {
        return new getSysLookupValByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysLookupValByName_result getResult(I iface, getSysLookupValByName_args args) throws org.apache.thrift.TException {
        getSysLookupValByName_result result = new getSysLookupValByName_result();
        result.success = iface.getSysLookupValByName(args.pid);
        return result;
      }
    }

    public static class getSysLookupValByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysLookupValByPid_args> {
      public getSysLookupValByPid() {
        super("getSysLookupValByPid");
      }

      public getSysLookupValByPid_args getEmptyArgsInstance() {
        return new getSysLookupValByPid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysLookupValByPid_result getResult(I iface, getSysLookupValByPid_args args) throws org.apache.thrift.TException {
        getSysLookupValByPid_result result = new getSysLookupValByPid_result();
        result.success = iface.getSysLookupValByPid(args.pid);
        return result;
      }
    }

    public static class getSysLookupValByLookType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysLookupValByLookType_args> {
      public getSysLookupValByLookType() {
        super("getSysLookupValByLookType");
      }

      public getSysLookupValByLookType_args getEmptyArgsInstance() {
        return new getSysLookupValByLookType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysLookupValByLookType_result getResult(I iface, getSysLookupValByLookType_args args) throws org.apache.thrift.TException {
        getSysLookupValByLookType_result result = new getSysLookupValByLookType_result();
        result.success = iface.getSysLookupValByLookType(args.lookupType);
        return result;
      }
    }

    public static class getSysLookupValByLookupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysLookupValByLookupId_args> {
      public getSysLookupValByLookupId() {
        super("getSysLookupValByLookupId");
      }

      public getSysLookupValByLookupId_args getEmptyArgsInstance() {
        return new getSysLookupValByLookupId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysLookupValByLookupId_result getResult(I iface, getSysLookupValByLookupId_args args) throws org.apache.thrift.TException {
        getSysLookupValByLookupId_result result = new getSysLookupValByLookupId_result();
        result.success = iface.getSysLookupValByLookupId(args.lookupId, args.page, args.rows);
        return result;
      }
    }

    public static class getSysLookupValByLookupIdTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysLookupValByLookupIdTotal_args> {
      public getSysLookupValByLookupIdTotal() {
        super("getSysLookupValByLookupIdTotal");
      }

      public getSysLookupValByLookupIdTotal_args getEmptyArgsInstance() {
        return new getSysLookupValByLookupIdTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysLookupValByLookupIdTotal_result getResult(I iface, getSysLookupValByLookupIdTotal_args args) throws org.apache.thrift.TException {
        getSysLookupValByLookupIdTotal_result result = new getSysLookupValByLookupIdTotal_result();
        result.success = iface.getSysLookupValByLookupIdTotal(args.lookupId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteLookupVal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLookupVal_args> {
      public deleteLookupVal() {
        super("deleteLookupVal");
      }

      public deleteLookupVal_args getEmptyArgsInstance() {
        return new deleteLookupVal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLookupVal_result getResult(I iface, deleteLookupVal_args args) throws org.apache.thrift.TException {
        deleteLookupVal_result result = new deleteLookupVal_result();
        try {
          result.success = iface.deleteLookupVal(args.lookupValPids);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addSysLookupVal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSysLookupVal_args> {
      public addSysLookupVal() {
        super("addSysLookupVal");
      }

      public addSysLookupVal_args getEmptyArgsInstance() {
        return new addSysLookupVal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSysLookupVal_result getResult(I iface, addSysLookupVal_args args) throws org.apache.thrift.TException {
        addSysLookupVal_result result = new addSysLookupVal_result();
        try {
          result.success = iface.addSysLookupVal(args.sysLookupVal);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateSysLookupVal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSysLookupVal_args> {
      public updateSysLookupVal() {
        super("updateSysLookupVal");
      }

      public updateSysLookupVal_args getEmptyArgsInstance() {
        return new updateSysLookupVal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSysLookupVal_result getResult(I iface, updateSysLookupVal_args args) throws org.apache.thrift.TException {
        updateSysLookupVal_result result = new updateSysLookupVal_result();
        try {
          result.success = iface.updateSysLookupVal(args.sysLookupVal);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getDataTypeSysLookup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataTypeSysLookup_args> {
      public getDataTypeSysLookup() {
        super("getDataTypeSysLookup");
      }

      public getDataTypeSysLookup_args getEmptyArgsInstance() {
        return new getDataTypeSysLookup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataTypeSysLookup_result getResult(I iface, getDataTypeSysLookup_args args) throws org.apache.thrift.TException {
        getDataTypeSysLookup_result result = new getDataTypeSysLookup_result();
        result.success = iface.getDataTypeSysLookup(args.projectId);
        return result;
      }
    }

    public static class getProjectAssDtlByLookType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectAssDtlByLookType_args> {
      public getProjectAssDtlByLookType() {
        super("getProjectAssDtlByLookType");
      }

      public getProjectAssDtlByLookType_args getEmptyArgsInstance() {
        return new getProjectAssDtlByLookType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProjectAssDtlByLookType_result getResult(I iface, getProjectAssDtlByLookType_args args) throws org.apache.thrift.TException {
        getProjectAssDtlByLookType_result result = new getProjectAssDtlByLookType_result();
        result.success = iface.getProjectAssDtlByLookType(args.lookupType);
        return result;
      }
    }

    public static class getSysLookupValByChildType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSysLookupValByChildType_args> {
      public getSysLookupValByChildType() {
        super("getSysLookupValByChildType");
      }

      public getSysLookupValByChildType_args getEmptyArgsInstance() {
        return new getSysLookupValByChildType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSysLookupValByChildType_result getResult(I iface, getSysLookupValByChildType_args args) throws org.apache.thrift.TException {
        getSysLookupValByChildType_result result = new getSysLookupValByChildType_result();
        result.success = iface.getSysLookupValByChildType(args.lookupType, args.lookupVal);
        return result;
      }
    }

    public static class getDataTypeByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataTypeByType_args> {
      public getDataTypeByType() {
        super("getDataTypeByType");
      }

      public getDataTypeByType_args getEmptyArgsInstance() {
        return new getDataTypeByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataTypeByType_result getResult(I iface, getDataTypeByType_args args) throws org.apache.thrift.TException {
        getDataTypeByType_result result = new getDataTypeByType_result();
        result.success = iface.getDataTypeByType(args.projectTypes);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSysLookup", new addSysLookup());
      processMap.put("deleteLookup", new deleteLookup());
      processMap.put("updateSysLookup", new updateSysLookup());
      processMap.put("getAllSysLookup", new getAllSysLookup());
      processMap.put("getAllSysLookupSum", new getAllSysLookupSum());
      processMap.put("getSysLookupValByName", new getSysLookupValByName());
      processMap.put("getSysLookupValByPid", new getSysLookupValByPid());
      processMap.put("getSysLookupValByLookType", new getSysLookupValByLookType());
      processMap.put("getSysLookupValByLookupId", new getSysLookupValByLookupId());
      processMap.put("getSysLookupValByLookupIdTotal", new getSysLookupValByLookupIdTotal());
      processMap.put("deleteLookupVal", new deleteLookupVal());
      processMap.put("addSysLookupVal", new addSysLookupVal());
      processMap.put("updateSysLookupVal", new updateSysLookupVal());
      processMap.put("getDataTypeSysLookup", new getDataTypeSysLookup());
      processMap.put("getProjectAssDtlByLookType", new getProjectAssDtlByLookType());
      processMap.put("getSysLookupValByChildType", new getSysLookupValByChildType());
      processMap.put("getDataTypeByType", new getDataTypeByType());
      return processMap;
    }

    public static class addSysLookup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSysLookup_args, Integer> {
      public addSysLookup() {
        super("addSysLookup");
      }

      public addSysLookup_args getEmptyArgsInstance() {
        return new addSysLookup_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addSysLookup_result result = new addSysLookup_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSysLookup_result result = new addSysLookup_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSysLookup_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addSysLookup(args.sysLookup,resultHandler);
      }
    }

    public static class deleteLookup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLookup_args, Integer> {
      public deleteLookup() {
        super("deleteLookup");
      }

      public deleteLookup_args getEmptyArgsInstance() {
        return new deleteLookup_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteLookup_result result = new deleteLookup_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLookup_result result = new deleteLookup_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLookup_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteLookup(args.SysLookuPids,resultHandler);
      }
    }

    public static class updateSysLookup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSysLookup_args, Integer> {
      public updateSysLookup() {
        super("updateSysLookup");
      }

      public updateSysLookup_args getEmptyArgsInstance() {
        return new updateSysLookup_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateSysLookup_result result = new updateSysLookup_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSysLookup_result result = new updateSysLookup_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSysLookup_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateSysLookup(args.sysLookup,resultHandler);
      }
    }

    public static class getAllSysLookup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllSysLookup_args, List<SysLookup>> {
      public getAllSysLookup() {
        super("getAllSysLookup");
      }

      public getAllSysLookup_args getEmptyArgsInstance() {
        return new getAllSysLookup_args();
      }

      public AsyncMethodCallback<List<SysLookup>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysLookup>>() { 
          public void onComplete(List<SysLookup> o) {
            getAllSysLookup_result result = new getAllSysLookup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllSysLookup_result result = new getAllSysLookup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllSysLookup_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysLookup>> resultHandler) throws TException {
        iface.getAllSysLookup(args.sysLookup,resultHandler);
      }
    }

    public static class getAllSysLookupSum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllSysLookupSum_args, Integer> {
      public getAllSysLookupSum() {
        super("getAllSysLookupSum");
      }

      public getAllSysLookupSum_args getEmptyArgsInstance() {
        return new getAllSysLookupSum_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getAllSysLookupSum_result result = new getAllSysLookupSum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllSysLookupSum_result result = new getAllSysLookupSum_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllSysLookupSum_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getAllSysLookupSum(args.sysLookup,resultHandler);
      }
    }

    public static class getSysLookupValByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysLookupValByName_args, String> {
      public getSysLookupValByName() {
        super("getSysLookupValByName");
      }

      public getSysLookupValByName_args getEmptyArgsInstance() {
        return new getSysLookupValByName_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getSysLookupValByName_result result = new getSysLookupValByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysLookupValByName_result result = new getSysLookupValByName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysLookupValByName_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getSysLookupValByName(args.pid,resultHandler);
      }
    }

    public static class getSysLookupValByPid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysLookupValByPid_args, String> {
      public getSysLookupValByPid() {
        super("getSysLookupValByPid");
      }

      public getSysLookupValByPid_args getEmptyArgsInstance() {
        return new getSysLookupValByPid_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getSysLookupValByPid_result result = new getSysLookupValByPid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysLookupValByPid_result result = new getSysLookupValByPid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysLookupValByPid_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getSysLookupValByPid(args.pid,resultHandler);
      }
    }

    public static class getSysLookupValByLookType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysLookupValByLookType_args, List<SysLookupVal>> {
      public getSysLookupValByLookType() {
        super("getSysLookupValByLookType");
      }

      public getSysLookupValByLookType_args getEmptyArgsInstance() {
        return new getSysLookupValByLookType_args();
      }

      public AsyncMethodCallback<List<SysLookupVal>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysLookupVal>>() { 
          public void onComplete(List<SysLookupVal> o) {
            getSysLookupValByLookType_result result = new getSysLookupValByLookType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysLookupValByLookType_result result = new getSysLookupValByLookType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysLookupValByLookType_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysLookupVal>> resultHandler) throws TException {
        iface.getSysLookupValByLookType(args.lookupType,resultHandler);
      }
    }

    public static class getSysLookupValByLookupId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysLookupValByLookupId_args, List<SysLookupVal>> {
      public getSysLookupValByLookupId() {
        super("getSysLookupValByLookupId");
      }

      public getSysLookupValByLookupId_args getEmptyArgsInstance() {
        return new getSysLookupValByLookupId_args();
      }

      public AsyncMethodCallback<List<SysLookupVal>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysLookupVal>>() { 
          public void onComplete(List<SysLookupVal> o) {
            getSysLookupValByLookupId_result result = new getSysLookupValByLookupId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysLookupValByLookupId_result result = new getSysLookupValByLookupId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysLookupValByLookupId_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysLookupVal>> resultHandler) throws TException {
        iface.getSysLookupValByLookupId(args.lookupId, args.page, args.rows,resultHandler);
      }
    }

    public static class getSysLookupValByLookupIdTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysLookupValByLookupIdTotal_args, Integer> {
      public getSysLookupValByLookupIdTotal() {
        super("getSysLookupValByLookupIdTotal");
      }

      public getSysLookupValByLookupIdTotal_args getEmptyArgsInstance() {
        return new getSysLookupValByLookupIdTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getSysLookupValByLookupIdTotal_result result = new getSysLookupValByLookupIdTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysLookupValByLookupIdTotal_result result = new getSysLookupValByLookupIdTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysLookupValByLookupIdTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getSysLookupValByLookupIdTotal(args.lookupId,resultHandler);
      }
    }

    public static class deleteLookupVal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLookupVal_args, Integer> {
      public deleteLookupVal() {
        super("deleteLookupVal");
      }

      public deleteLookupVal_args getEmptyArgsInstance() {
        return new deleteLookupVal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteLookupVal_result result = new deleteLookupVal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLookupVal_result result = new deleteLookupVal_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLookupVal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteLookupVal(args.lookupValPids,resultHandler);
      }
    }

    public static class addSysLookupVal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSysLookupVal_args, Integer> {
      public addSysLookupVal() {
        super("addSysLookupVal");
      }

      public addSysLookupVal_args getEmptyArgsInstance() {
        return new addSysLookupVal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addSysLookupVal_result result = new addSysLookupVal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSysLookupVal_result result = new addSysLookupVal_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSysLookupVal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addSysLookupVal(args.sysLookupVal,resultHandler);
      }
    }

    public static class updateSysLookupVal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSysLookupVal_args, Integer> {
      public updateSysLookupVal() {
        super("updateSysLookupVal");
      }

      public updateSysLookupVal_args getEmptyArgsInstance() {
        return new updateSysLookupVal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateSysLookupVal_result result = new updateSysLookupVal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSysLookupVal_result result = new updateSysLookupVal_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSysLookupVal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateSysLookupVal(args.sysLookupVal,resultHandler);
      }
    }

    public static class getDataTypeSysLookup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataTypeSysLookup_args, List<SysLookupVal>> {
      public getDataTypeSysLookup() {
        super("getDataTypeSysLookup");
      }

      public getDataTypeSysLookup_args getEmptyArgsInstance() {
        return new getDataTypeSysLookup_args();
      }

      public AsyncMethodCallback<List<SysLookupVal>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysLookupVal>>() { 
          public void onComplete(List<SysLookupVal> o) {
            getDataTypeSysLookup_result result = new getDataTypeSysLookup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDataTypeSysLookup_result result = new getDataTypeSysLookup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataTypeSysLookup_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysLookupVal>> resultHandler) throws TException {
        iface.getDataTypeSysLookup(args.projectId,resultHandler);
      }
    }

    public static class getProjectAssDtlByLookType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProjectAssDtlByLookType_args, List<SysLookupVal>> {
      public getProjectAssDtlByLookType() {
        super("getProjectAssDtlByLookType");
      }

      public getProjectAssDtlByLookType_args getEmptyArgsInstance() {
        return new getProjectAssDtlByLookType_args();
      }

      public AsyncMethodCallback<List<SysLookupVal>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysLookupVal>>() { 
          public void onComplete(List<SysLookupVal> o) {
            getProjectAssDtlByLookType_result result = new getProjectAssDtlByLookType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProjectAssDtlByLookType_result result = new getProjectAssDtlByLookType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProjectAssDtlByLookType_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysLookupVal>> resultHandler) throws TException {
        iface.getProjectAssDtlByLookType(args.lookupType,resultHandler);
      }
    }

    public static class getSysLookupValByChildType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSysLookupValByChildType_args, SysLookupVal> {
      public getSysLookupValByChildType() {
        super("getSysLookupValByChildType");
      }

      public getSysLookupValByChildType_args getEmptyArgsInstance() {
        return new getSysLookupValByChildType_args();
      }

      public AsyncMethodCallback<SysLookupVal> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SysLookupVal>() { 
          public void onComplete(SysLookupVal o) {
            getSysLookupValByChildType_result result = new getSysLookupValByChildType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSysLookupValByChildType_result result = new getSysLookupValByChildType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSysLookupValByChildType_args args, org.apache.thrift.async.AsyncMethodCallback<SysLookupVal> resultHandler) throws TException {
        iface.getSysLookupValByChildType(args.lookupType, args.lookupVal,resultHandler);
      }
    }

    public static class getDataTypeByType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataTypeByType_args, List<SysLookupVal>> {
      public getDataTypeByType() {
        super("getDataTypeByType");
      }

      public getDataTypeByType_args getEmptyArgsInstance() {
        return new getDataTypeByType_args();
      }

      public AsyncMethodCallback<List<SysLookupVal>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SysLookupVal>>() { 
          public void onComplete(List<SysLookupVal> o) {
            getDataTypeByType_result result = new getDataTypeByType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDataTypeByType_result result = new getDataTypeByType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataTypeByType_args args, org.apache.thrift.async.AsyncMethodCallback<List<SysLookupVal>> resultHandler) throws TException {
        iface.getDataTypeByType(args.projectTypes,resultHandler);
      }
    }

  }

  public static class addSysLookup_args implements org.apache.thrift.TBase<addSysLookup_args, addSysLookup_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSysLookup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSysLookup_args");

    private static final org.apache.thrift.protocol.TField SYS_LOOKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("sysLookup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSysLookup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSysLookup_argsTupleSchemeFactory());
    }

    public SysLookup sysLookup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_LOOKUP((short)1, "sysLookup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_LOOKUP
            return SYS_LOOKUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_LOOKUP, new org.apache.thrift.meta_data.FieldMetaData("sysLookup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSysLookup_args.class, metaDataMap);
    }

    public addSysLookup_args() {
    }

    public addSysLookup_args(
      SysLookup sysLookup)
    {
      this();
      this.sysLookup = sysLookup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSysLookup_args(addSysLookup_args other) {
      if (other.isSetSysLookup()) {
        this.sysLookup = new SysLookup(other.sysLookup);
      }
    }

    public addSysLookup_args deepCopy() {
      return new addSysLookup_args(this);
    }

    @Override
    public void clear() {
      this.sysLookup = null;
    }

    public SysLookup getSysLookup() {
      return this.sysLookup;
    }

    public addSysLookup_args setSysLookup(SysLookup sysLookup) {
      this.sysLookup = sysLookup;
      return this;
    }

    public void unsetSysLookup() {
      this.sysLookup = null;
    }

    /** Returns true if field sysLookup is set (has been assigned a value) and false otherwise */
    public boolean isSetSysLookup() {
      return this.sysLookup != null;
    }

    public void setSysLookupIsSet(boolean value) {
      if (!value) {
        this.sysLookup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_LOOKUP:
        if (value == null) {
          unsetSysLookup();
        } else {
          setSysLookup((SysLookup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_LOOKUP:
        return getSysLookup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_LOOKUP:
        return isSetSysLookup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSysLookup_args)
        return this.equals((addSysLookup_args)that);
      return false;
    }

    public boolean equals(addSysLookup_args that) {
      if (that == null)
        return false;

      boolean this_present_sysLookup = true && this.isSetSysLookup();
      boolean that_present_sysLookup = true && that.isSetSysLookup();
      if (this_present_sysLookup || that_present_sysLookup) {
        if (!(this_present_sysLookup && that_present_sysLookup))
          return false;
        if (!this.sysLookup.equals(that.sysLookup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysLookup = true && (isSetSysLookup());
      list.add(present_sysLookup);
      if (present_sysLookup)
        list.add(sysLookup);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSysLookup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysLookup()).compareTo(other.isSetSysLookup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysLookup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysLookup, other.sysLookup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSysLookup_args(");
      boolean first = true;

      sb.append("sysLookup:");
      if (this.sysLookup == null) {
        sb.append("null");
      } else {
        sb.append(this.sysLookup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysLookup != null) {
        sysLookup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSysLookup_argsStandardSchemeFactory implements SchemeFactory {
      public addSysLookup_argsStandardScheme getScheme() {
        return new addSysLookup_argsStandardScheme();
      }
    }

    private static class addSysLookup_argsStandardScheme extends StandardScheme<addSysLookup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSysLookup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_LOOKUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysLookup = new SysLookup();
                struct.sysLookup.read(iprot);
                struct.setSysLookupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSysLookup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysLookup != null) {
          oprot.writeFieldBegin(SYS_LOOKUP_FIELD_DESC);
          struct.sysLookup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSysLookup_argsTupleSchemeFactory implements SchemeFactory {
      public addSysLookup_argsTupleScheme getScheme() {
        return new addSysLookup_argsTupleScheme();
      }
    }

    private static class addSysLookup_argsTupleScheme extends TupleScheme<addSysLookup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSysLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysLookup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysLookup()) {
          struct.sysLookup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSysLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysLookup = new SysLookup();
          struct.sysLookup.read(iprot);
          struct.setSysLookupIsSet(true);
        }
      }
    }

  }

  public static class addSysLookup_result implements org.apache.thrift.TBase<addSysLookup_result, addSysLookup_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSysLookup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSysLookup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSysLookup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSysLookup_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSysLookup_result.class, metaDataMap);
    }

    public addSysLookup_result() {
    }

    public addSysLookup_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSysLookup_result(addSysLookup_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addSysLookup_result deepCopy() {
      return new addSysLookup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addSysLookup_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addSysLookup_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSysLookup_result)
        return this.equals((addSysLookup_result)that);
      return false;
    }

    public boolean equals(addSysLookup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSysLookup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSysLookup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSysLookup_resultStandardSchemeFactory implements SchemeFactory {
      public addSysLookup_resultStandardScheme getScheme() {
        return new addSysLookup_resultStandardScheme();
      }
    }

    private static class addSysLookup_resultStandardScheme extends StandardScheme<addSysLookup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSysLookup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSysLookup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSysLookup_resultTupleSchemeFactory implements SchemeFactory {
      public addSysLookup_resultTupleScheme getScheme() {
        return new addSysLookup_resultTupleScheme();
      }
    }

    private static class addSysLookup_resultTupleScheme extends TupleScheme<addSysLookup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSysLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSysLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteLookup_args implements org.apache.thrift.TBase<deleteLookup_args, deleteLookup_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLookup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLookup_args");

    private static final org.apache.thrift.protocol.TField SYS_LOOKU_PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("SysLookuPids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLookup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLookup_argsTupleSchemeFactory());
    }

    public List<Integer> SysLookuPids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_LOOKU_PIDS((short)1, "SysLookuPids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_LOOKU_PIDS
            return SYS_LOOKU_PIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_LOOKU_PIDS, new org.apache.thrift.meta_data.FieldMetaData("SysLookuPids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLookup_args.class, metaDataMap);
    }

    public deleteLookup_args() {
    }

    public deleteLookup_args(
      List<Integer> SysLookuPids)
    {
      this();
      this.SysLookuPids = SysLookuPids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLookup_args(deleteLookup_args other) {
      if (other.isSetSysLookuPids()) {
        List<Integer> __this__SysLookuPids = new ArrayList<Integer>(other.SysLookuPids);
        this.SysLookuPids = __this__SysLookuPids;
      }
    }

    public deleteLookup_args deepCopy() {
      return new deleteLookup_args(this);
    }

    @Override
    public void clear() {
      this.SysLookuPids = null;
    }

    public int getSysLookuPidsSize() {
      return (this.SysLookuPids == null) ? 0 : this.SysLookuPids.size();
    }

    public java.util.Iterator<Integer> getSysLookuPidsIterator() {
      return (this.SysLookuPids == null) ? null : this.SysLookuPids.iterator();
    }

    public void addToSysLookuPids(int elem) {
      if (this.SysLookuPids == null) {
        this.SysLookuPids = new ArrayList<Integer>();
      }
      this.SysLookuPids.add(elem);
    }

    public List<Integer> getSysLookuPids() {
      return this.SysLookuPids;
    }

    public deleteLookup_args setSysLookuPids(List<Integer> SysLookuPids) {
      this.SysLookuPids = SysLookuPids;
      return this;
    }

    public void unsetSysLookuPids() {
      this.SysLookuPids = null;
    }

    /** Returns true if field SysLookuPids is set (has been assigned a value) and false otherwise */
    public boolean isSetSysLookuPids() {
      return this.SysLookuPids != null;
    }

    public void setSysLookuPidsIsSet(boolean value) {
      if (!value) {
        this.SysLookuPids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_LOOKU_PIDS:
        if (value == null) {
          unsetSysLookuPids();
        } else {
          setSysLookuPids((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_LOOKU_PIDS:
        return getSysLookuPids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_LOOKU_PIDS:
        return isSetSysLookuPids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLookup_args)
        return this.equals((deleteLookup_args)that);
      return false;
    }

    public boolean equals(deleteLookup_args that) {
      if (that == null)
        return false;

      boolean this_present_SysLookuPids = true && this.isSetSysLookuPids();
      boolean that_present_SysLookuPids = true && that.isSetSysLookuPids();
      if (this_present_SysLookuPids || that_present_SysLookuPids) {
        if (!(this_present_SysLookuPids && that_present_SysLookuPids))
          return false;
        if (!this.SysLookuPids.equals(that.SysLookuPids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_SysLookuPids = true && (isSetSysLookuPids());
      list.add(present_SysLookuPids);
      if (present_SysLookuPids)
        list.add(SysLookuPids);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLookup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysLookuPids()).compareTo(other.isSetSysLookuPids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysLookuPids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SysLookuPids, other.SysLookuPids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLookup_args(");
      boolean first = true;

      sb.append("SysLookuPids:");
      if (this.SysLookuPids == null) {
        sb.append("null");
      } else {
        sb.append(this.SysLookuPids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLookup_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLookup_argsStandardScheme getScheme() {
        return new deleteLookup_argsStandardScheme();
      }
    }

    private static class deleteLookup_argsStandardScheme extends StandardScheme<deleteLookup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLookup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_LOOKU_PIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.SysLookuPids = new ArrayList<Integer>(_list32.size);
                  int _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readI32();
                    struct.SysLookuPids.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSysLookuPidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLookup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.SysLookuPids != null) {
          oprot.writeFieldBegin(SYS_LOOKU_PIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.SysLookuPids.size()));
            for (int _iter35 : struct.SysLookuPids)
            {
              oprot.writeI32(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLookup_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLookup_argsTupleScheme getScheme() {
        return new deleteLookup_argsTupleScheme();
      }
    }

    private static class deleteLookup_argsTupleScheme extends TupleScheme<deleteLookup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysLookuPids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysLookuPids()) {
          {
            oprot.writeI32(struct.SysLookuPids.size());
            for (int _iter36 : struct.SysLookuPids)
            {
              oprot.writeI32(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.SysLookuPids = new ArrayList<Integer>(_list37.size);
            int _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readI32();
              struct.SysLookuPids.add(_elem38);
            }
          }
          struct.setSysLookuPidsIsSet(true);
        }
      }
    }

  }

  public static class deleteLookup_result implements org.apache.thrift.TBase<deleteLookup_result, deleteLookup_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLookup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLookup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLookup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLookup_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLookup_result.class, metaDataMap);
    }

    public deleteLookup_result() {
    }

    public deleteLookup_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLookup_result(deleteLookup_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteLookup_result deepCopy() {
      return new deleteLookup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteLookup_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteLookup_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLookup_result)
        return this.equals((deleteLookup_result)that);
      return false;
    }

    public boolean equals(deleteLookup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLookup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLookup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLookup_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLookup_resultStandardScheme getScheme() {
        return new deleteLookup_resultStandardScheme();
      }
    }

    private static class deleteLookup_resultStandardScheme extends StandardScheme<deleteLookup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLookup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLookup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLookup_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLookup_resultTupleScheme getScheme() {
        return new deleteLookup_resultTupleScheme();
      }
    }

    private static class deleteLookup_resultTupleScheme extends TupleScheme<deleteLookup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateSysLookup_args implements org.apache.thrift.TBase<updateSysLookup_args, updateSysLookup_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysLookup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysLookup_args");

    private static final org.apache.thrift.protocol.TField SYS_LOOKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("sysLookup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysLookup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysLookup_argsTupleSchemeFactory());
    }

    public SysLookup sysLookup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_LOOKUP((short)1, "sysLookup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_LOOKUP
            return SYS_LOOKUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_LOOKUP, new org.apache.thrift.meta_data.FieldMetaData("sysLookup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysLookup_args.class, metaDataMap);
    }

    public updateSysLookup_args() {
    }

    public updateSysLookup_args(
      SysLookup sysLookup)
    {
      this();
      this.sysLookup = sysLookup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysLookup_args(updateSysLookup_args other) {
      if (other.isSetSysLookup()) {
        this.sysLookup = new SysLookup(other.sysLookup);
      }
    }

    public updateSysLookup_args deepCopy() {
      return new updateSysLookup_args(this);
    }

    @Override
    public void clear() {
      this.sysLookup = null;
    }

    public SysLookup getSysLookup() {
      return this.sysLookup;
    }

    public updateSysLookup_args setSysLookup(SysLookup sysLookup) {
      this.sysLookup = sysLookup;
      return this;
    }

    public void unsetSysLookup() {
      this.sysLookup = null;
    }

    /** Returns true if field sysLookup is set (has been assigned a value) and false otherwise */
    public boolean isSetSysLookup() {
      return this.sysLookup != null;
    }

    public void setSysLookupIsSet(boolean value) {
      if (!value) {
        this.sysLookup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_LOOKUP:
        if (value == null) {
          unsetSysLookup();
        } else {
          setSysLookup((SysLookup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_LOOKUP:
        return getSysLookup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_LOOKUP:
        return isSetSysLookup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysLookup_args)
        return this.equals((updateSysLookup_args)that);
      return false;
    }

    public boolean equals(updateSysLookup_args that) {
      if (that == null)
        return false;

      boolean this_present_sysLookup = true && this.isSetSysLookup();
      boolean that_present_sysLookup = true && that.isSetSysLookup();
      if (this_present_sysLookup || that_present_sysLookup) {
        if (!(this_present_sysLookup && that_present_sysLookup))
          return false;
        if (!this.sysLookup.equals(that.sysLookup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysLookup = true && (isSetSysLookup());
      list.add(present_sysLookup);
      if (present_sysLookup)
        list.add(sysLookup);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysLookup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysLookup()).compareTo(other.isSetSysLookup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysLookup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysLookup, other.sysLookup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysLookup_args(");
      boolean first = true;

      sb.append("sysLookup:");
      if (this.sysLookup == null) {
        sb.append("null");
      } else {
        sb.append(this.sysLookup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysLookup != null) {
        sysLookup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysLookup_argsStandardSchemeFactory implements SchemeFactory {
      public updateSysLookup_argsStandardScheme getScheme() {
        return new updateSysLookup_argsStandardScheme();
      }
    }

    private static class updateSysLookup_argsStandardScheme extends StandardScheme<updateSysLookup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysLookup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_LOOKUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysLookup = new SysLookup();
                struct.sysLookup.read(iprot);
                struct.setSysLookupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysLookup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysLookup != null) {
          oprot.writeFieldBegin(SYS_LOOKUP_FIELD_DESC);
          struct.sysLookup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysLookup_argsTupleSchemeFactory implements SchemeFactory {
      public updateSysLookup_argsTupleScheme getScheme() {
        return new updateSysLookup_argsTupleScheme();
      }
    }

    private static class updateSysLookup_argsTupleScheme extends TupleScheme<updateSysLookup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysLookup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysLookup()) {
          struct.sysLookup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysLookup = new SysLookup();
          struct.sysLookup.read(iprot);
          struct.setSysLookupIsSet(true);
        }
      }
    }

  }

  public static class updateSysLookup_result implements org.apache.thrift.TBase<updateSysLookup_result, updateSysLookup_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysLookup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysLookup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysLookup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysLookup_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysLookup_result.class, metaDataMap);
    }

    public updateSysLookup_result() {
    }

    public updateSysLookup_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysLookup_result(updateSysLookup_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateSysLookup_result deepCopy() {
      return new updateSysLookup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateSysLookup_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateSysLookup_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysLookup_result)
        return this.equals((updateSysLookup_result)that);
      return false;
    }

    public boolean equals(updateSysLookup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysLookup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysLookup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysLookup_resultStandardSchemeFactory implements SchemeFactory {
      public updateSysLookup_resultStandardScheme getScheme() {
        return new updateSysLookup_resultStandardScheme();
      }
    }

    private static class updateSysLookup_resultStandardScheme extends StandardScheme<updateSysLookup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysLookup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysLookup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysLookup_resultTupleSchemeFactory implements SchemeFactory {
      public updateSysLookup_resultTupleScheme getScheme() {
        return new updateSysLookup_resultTupleScheme();
      }
    }

    private static class updateSysLookup_resultTupleScheme extends TupleScheme<updateSysLookup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getAllSysLookup_args implements org.apache.thrift.TBase<getAllSysLookup_args, getAllSysLookup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSysLookup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSysLookup_args");

    private static final org.apache.thrift.protocol.TField SYS_LOOKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("sysLookup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSysLookup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSysLookup_argsTupleSchemeFactory());
    }

    public SysLookup sysLookup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_LOOKUP((short)1, "sysLookup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_LOOKUP
            return SYS_LOOKUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_LOOKUP, new org.apache.thrift.meta_data.FieldMetaData("sysLookup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSysLookup_args.class, metaDataMap);
    }

    public getAllSysLookup_args() {
    }

    public getAllSysLookup_args(
      SysLookup sysLookup)
    {
      this();
      this.sysLookup = sysLookup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSysLookup_args(getAllSysLookup_args other) {
      if (other.isSetSysLookup()) {
        this.sysLookup = new SysLookup(other.sysLookup);
      }
    }

    public getAllSysLookup_args deepCopy() {
      return new getAllSysLookup_args(this);
    }

    @Override
    public void clear() {
      this.sysLookup = null;
    }

    public SysLookup getSysLookup() {
      return this.sysLookup;
    }

    public getAllSysLookup_args setSysLookup(SysLookup sysLookup) {
      this.sysLookup = sysLookup;
      return this;
    }

    public void unsetSysLookup() {
      this.sysLookup = null;
    }

    /** Returns true if field sysLookup is set (has been assigned a value) and false otherwise */
    public boolean isSetSysLookup() {
      return this.sysLookup != null;
    }

    public void setSysLookupIsSet(boolean value) {
      if (!value) {
        this.sysLookup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_LOOKUP:
        if (value == null) {
          unsetSysLookup();
        } else {
          setSysLookup((SysLookup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_LOOKUP:
        return getSysLookup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_LOOKUP:
        return isSetSysLookup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSysLookup_args)
        return this.equals((getAllSysLookup_args)that);
      return false;
    }

    public boolean equals(getAllSysLookup_args that) {
      if (that == null)
        return false;

      boolean this_present_sysLookup = true && this.isSetSysLookup();
      boolean that_present_sysLookup = true && that.isSetSysLookup();
      if (this_present_sysLookup || that_present_sysLookup) {
        if (!(this_present_sysLookup && that_present_sysLookup))
          return false;
        if (!this.sysLookup.equals(that.sysLookup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysLookup = true && (isSetSysLookup());
      list.add(present_sysLookup);
      if (present_sysLookup)
        list.add(sysLookup);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllSysLookup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysLookup()).compareTo(other.isSetSysLookup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysLookup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysLookup, other.sysLookup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSysLookup_args(");
      boolean first = true;

      sb.append("sysLookup:");
      if (this.sysLookup == null) {
        sb.append("null");
      } else {
        sb.append(this.sysLookup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysLookup != null) {
        sysLookup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSysLookup_argsStandardSchemeFactory implements SchemeFactory {
      public getAllSysLookup_argsStandardScheme getScheme() {
        return new getAllSysLookup_argsStandardScheme();
      }
    }

    private static class getAllSysLookup_argsStandardScheme extends StandardScheme<getAllSysLookup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSysLookup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_LOOKUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysLookup = new SysLookup();
                struct.sysLookup.read(iprot);
                struct.setSysLookupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSysLookup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysLookup != null) {
          oprot.writeFieldBegin(SYS_LOOKUP_FIELD_DESC);
          struct.sysLookup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSysLookup_argsTupleSchemeFactory implements SchemeFactory {
      public getAllSysLookup_argsTupleScheme getScheme() {
        return new getAllSysLookup_argsTupleScheme();
      }
    }

    private static class getAllSysLookup_argsTupleScheme extends TupleScheme<getAllSysLookup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSysLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysLookup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysLookup()) {
          struct.sysLookup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSysLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysLookup = new SysLookup();
          struct.sysLookup.read(iprot);
          struct.setSysLookupIsSet(true);
        }
      }
    }

  }

  public static class getAllSysLookup_result implements org.apache.thrift.TBase<getAllSysLookup_result, getAllSysLookup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSysLookup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSysLookup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSysLookup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSysLookup_resultTupleSchemeFactory());
    }

    public List<SysLookup> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookup.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSysLookup_result.class, metaDataMap);
    }

    public getAllSysLookup_result() {
    }

    public getAllSysLookup_result(
      List<SysLookup> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSysLookup_result(getAllSysLookup_result other) {
      if (other.isSetSuccess()) {
        List<SysLookup> __this__success = new ArrayList<SysLookup>(other.success.size());
        for (SysLookup other_element : other.success) {
          __this__success.add(new SysLookup(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllSysLookup_result deepCopy() {
      return new getAllSysLookup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysLookup> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysLookup elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysLookup>();
      }
      this.success.add(elem);
    }

    public List<SysLookup> getSuccess() {
      return this.success;
    }

    public getAllSysLookup_result setSuccess(List<SysLookup> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysLookup>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSysLookup_result)
        return this.equals((getAllSysLookup_result)that);
      return false;
    }

    public boolean equals(getAllSysLookup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllSysLookup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSysLookup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSysLookup_resultStandardSchemeFactory implements SchemeFactory {
      public getAllSysLookup_resultStandardScheme getScheme() {
        return new getAllSysLookup_resultStandardScheme();
      }
    }

    private static class getAllSysLookup_resultStandardScheme extends StandardScheme<getAllSysLookup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSysLookup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<SysLookup>(_list40.size);
                  SysLookup _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new SysLookup();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSysLookup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysLookup _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSysLookup_resultTupleSchemeFactory implements SchemeFactory {
      public getAllSysLookup_resultTupleScheme getScheme() {
        return new getAllSysLookup_resultTupleScheme();
      }
    }

    private static class getAllSysLookup_resultTupleScheme extends TupleScheme<getAllSysLookup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSysLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysLookup _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSysLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysLookup>(_list45.size);
            SysLookup _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new SysLookup();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllSysLookupSum_args implements org.apache.thrift.TBase<getAllSysLookupSum_args, getAllSysLookupSum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSysLookupSum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSysLookupSum_args");

    private static final org.apache.thrift.protocol.TField SYS_LOOKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("sysLookup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSysLookupSum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSysLookupSum_argsTupleSchemeFactory());
    }

    public SysLookup sysLookup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_LOOKUP((short)1, "sysLookup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_LOOKUP
            return SYS_LOOKUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_LOOKUP, new org.apache.thrift.meta_data.FieldMetaData("sysLookup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookup.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSysLookupSum_args.class, metaDataMap);
    }

    public getAllSysLookupSum_args() {
    }

    public getAllSysLookupSum_args(
      SysLookup sysLookup)
    {
      this();
      this.sysLookup = sysLookup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSysLookupSum_args(getAllSysLookupSum_args other) {
      if (other.isSetSysLookup()) {
        this.sysLookup = new SysLookup(other.sysLookup);
      }
    }

    public getAllSysLookupSum_args deepCopy() {
      return new getAllSysLookupSum_args(this);
    }

    @Override
    public void clear() {
      this.sysLookup = null;
    }

    public SysLookup getSysLookup() {
      return this.sysLookup;
    }

    public getAllSysLookupSum_args setSysLookup(SysLookup sysLookup) {
      this.sysLookup = sysLookup;
      return this;
    }

    public void unsetSysLookup() {
      this.sysLookup = null;
    }

    /** Returns true if field sysLookup is set (has been assigned a value) and false otherwise */
    public boolean isSetSysLookup() {
      return this.sysLookup != null;
    }

    public void setSysLookupIsSet(boolean value) {
      if (!value) {
        this.sysLookup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_LOOKUP:
        if (value == null) {
          unsetSysLookup();
        } else {
          setSysLookup((SysLookup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_LOOKUP:
        return getSysLookup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_LOOKUP:
        return isSetSysLookup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSysLookupSum_args)
        return this.equals((getAllSysLookupSum_args)that);
      return false;
    }

    public boolean equals(getAllSysLookupSum_args that) {
      if (that == null)
        return false;

      boolean this_present_sysLookup = true && this.isSetSysLookup();
      boolean that_present_sysLookup = true && that.isSetSysLookup();
      if (this_present_sysLookup || that_present_sysLookup) {
        if (!(this_present_sysLookup && that_present_sysLookup))
          return false;
        if (!this.sysLookup.equals(that.sysLookup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysLookup = true && (isSetSysLookup());
      list.add(present_sysLookup);
      if (present_sysLookup)
        list.add(sysLookup);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllSysLookupSum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysLookup()).compareTo(other.isSetSysLookup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysLookup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysLookup, other.sysLookup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSysLookupSum_args(");
      boolean first = true;

      sb.append("sysLookup:");
      if (this.sysLookup == null) {
        sb.append("null");
      } else {
        sb.append(this.sysLookup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysLookup != null) {
        sysLookup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSysLookupSum_argsStandardSchemeFactory implements SchemeFactory {
      public getAllSysLookupSum_argsStandardScheme getScheme() {
        return new getAllSysLookupSum_argsStandardScheme();
      }
    }

    private static class getAllSysLookupSum_argsStandardScheme extends StandardScheme<getAllSysLookupSum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSysLookupSum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_LOOKUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysLookup = new SysLookup();
                struct.sysLookup.read(iprot);
                struct.setSysLookupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSysLookupSum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysLookup != null) {
          oprot.writeFieldBegin(SYS_LOOKUP_FIELD_DESC);
          struct.sysLookup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSysLookupSum_argsTupleSchemeFactory implements SchemeFactory {
      public getAllSysLookupSum_argsTupleScheme getScheme() {
        return new getAllSysLookupSum_argsTupleScheme();
      }
    }

    private static class getAllSysLookupSum_argsTupleScheme extends TupleScheme<getAllSysLookupSum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSysLookupSum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysLookup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysLookup()) {
          struct.sysLookup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSysLookupSum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysLookup = new SysLookup();
          struct.sysLookup.read(iprot);
          struct.setSysLookupIsSet(true);
        }
      }
    }

  }

  public static class getAllSysLookupSum_result implements org.apache.thrift.TBase<getAllSysLookupSum_result, getAllSysLookupSum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSysLookupSum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSysLookupSum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSysLookupSum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSysLookupSum_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSysLookupSum_result.class, metaDataMap);
    }

    public getAllSysLookupSum_result() {
    }

    public getAllSysLookupSum_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSysLookupSum_result(getAllSysLookupSum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getAllSysLookupSum_result deepCopy() {
      return new getAllSysLookupSum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAllSysLookupSum_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getAllSysLookupSum_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSysLookupSum_result)
        return this.equals((getAllSysLookupSum_result)that);
      return false;
    }

    public boolean equals(getAllSysLookupSum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllSysLookupSum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSysLookupSum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSysLookupSum_resultStandardSchemeFactory implements SchemeFactory {
      public getAllSysLookupSum_resultStandardScheme getScheme() {
        return new getAllSysLookupSum_resultStandardScheme();
      }
    }

    private static class getAllSysLookupSum_resultStandardScheme extends StandardScheme<getAllSysLookupSum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSysLookupSum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSysLookupSum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSysLookupSum_resultTupleSchemeFactory implements SchemeFactory {
      public getAllSysLookupSum_resultTupleScheme getScheme() {
        return new getAllSysLookupSum_resultTupleScheme();
      }
    }

    private static class getAllSysLookupSum_resultTupleScheme extends TupleScheme<getAllSysLookupSum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSysLookupSum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSysLookupSum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByName_args implements org.apache.thrift.TBase<getSysLookupValByName_args, getSysLookupValByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByName_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByName_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByName_args.class, metaDataMap);
    }

    public getSysLookupValByName_args() {
    }

    public getSysLookupValByName_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByName_args(getSysLookupValByName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getSysLookupValByName_args deepCopy() {
      return new getSysLookupValByName_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getSysLookupValByName_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByName_args)
        return this.equals((getSysLookupValByName_args)that);
      return false;
    }

    public boolean equals(getSysLookupValByName_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByName_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByName_argsStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByName_argsStandardScheme getScheme() {
        return new getSysLookupValByName_argsStandardScheme();
      }
    }

    private static class getSysLookupValByName_argsStandardScheme extends StandardScheme<getSysLookupValByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByName_argsTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByName_argsTupleScheme getScheme() {
        return new getSysLookupValByName_argsTupleScheme();
      }
    }

    private static class getSysLookupValByName_argsTupleScheme extends TupleScheme<getSysLookupValByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByName_result implements org.apache.thrift.TBase<getSysLookupValByName_result, getSysLookupValByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByName_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByName_result.class, metaDataMap);
    }

    public getSysLookupValByName_result() {
    }

    public getSysLookupValByName_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByName_result(getSysLookupValByName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getSysLookupValByName_result deepCopy() {
      return new getSysLookupValByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getSysLookupValByName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByName_result)
        return this.equals((getSysLookupValByName_result)that);
      return false;
    }

    public boolean equals(getSysLookupValByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByName_resultStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByName_resultStandardScheme getScheme() {
        return new getSysLookupValByName_resultStandardScheme();
      }
    }

    private static class getSysLookupValByName_resultStandardScheme extends StandardScheme<getSysLookupValByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByName_resultTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByName_resultTupleScheme getScheme() {
        return new getSysLookupValByName_resultTupleScheme();
      }
    }

    private static class getSysLookupValByName_resultTupleScheme extends TupleScheme<getSysLookupValByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByPid_args implements org.apache.thrift.TBase<getSysLookupValByPid_args, getSysLookupValByPid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByPid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByPid_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByPid_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByPid_args.class, metaDataMap);
    }

    public getSysLookupValByPid_args() {
    }

    public getSysLookupValByPid_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByPid_args(getSysLookupValByPid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getSysLookupValByPid_args deepCopy() {
      return new getSysLookupValByPid_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getSysLookupValByPid_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByPid_args)
        return this.equals((getSysLookupValByPid_args)that);
      return false;
    }

    public boolean equals(getSysLookupValByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByPid_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByPid_argsStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByPid_argsStandardScheme getScheme() {
        return new getSysLookupValByPid_argsStandardScheme();
      }
    }

    private static class getSysLookupValByPid_argsStandardScheme extends StandardScheme<getSysLookupValByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByPid_argsTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByPid_argsTupleScheme getScheme() {
        return new getSysLookupValByPid_argsTupleScheme();
      }
    }

    private static class getSysLookupValByPid_argsTupleScheme extends TupleScheme<getSysLookupValByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByPid_result implements org.apache.thrift.TBase<getSysLookupValByPid_result, getSysLookupValByPid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByPid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByPid_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByPid_result.class, metaDataMap);
    }

    public getSysLookupValByPid_result() {
    }

    public getSysLookupValByPid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByPid_result(getSysLookupValByPid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getSysLookupValByPid_result deepCopy() {
      return new getSysLookupValByPid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getSysLookupValByPid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByPid_result)
        return this.equals((getSysLookupValByPid_result)that);
      return false;
    }

    public boolean equals(getSysLookupValByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByPid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByPid_resultStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByPid_resultStandardScheme getScheme() {
        return new getSysLookupValByPid_resultStandardScheme();
      }
    }

    private static class getSysLookupValByPid_resultStandardScheme extends StandardScheme<getSysLookupValByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByPid_resultTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByPid_resultTupleScheme getScheme() {
        return new getSysLookupValByPid_resultTupleScheme();
      }
    }

    private static class getSysLookupValByPid_resultTupleScheme extends TupleScheme<getSysLookupValByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByLookType_args implements org.apache.thrift.TBase<getSysLookupValByLookType_args, getSysLookupValByLookType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByLookType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByLookType_args");

    private static final org.apache.thrift.protocol.TField LOOKUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByLookType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByLookType_argsTupleSchemeFactory());
    }

    public String lookupType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOOKUP_TYPE((short)1, "lookupType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOOKUP_TYPE
            return LOOKUP_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOOKUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lookupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByLookType_args.class, metaDataMap);
    }

    public getSysLookupValByLookType_args() {
    }

    public getSysLookupValByLookType_args(
      String lookupType)
    {
      this();
      this.lookupType = lookupType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByLookType_args(getSysLookupValByLookType_args other) {
      if (other.isSetLookupType()) {
        this.lookupType = other.lookupType;
      }
    }

    public getSysLookupValByLookType_args deepCopy() {
      return new getSysLookupValByLookType_args(this);
    }

    @Override
    public void clear() {
      this.lookupType = null;
    }

    public String getLookupType() {
      return this.lookupType;
    }

    public getSysLookupValByLookType_args setLookupType(String lookupType) {
      this.lookupType = lookupType;
      return this;
    }

    public void unsetLookupType() {
      this.lookupType = null;
    }

    /** Returns true if field lookupType is set (has been assigned a value) and false otherwise */
    public boolean isSetLookupType() {
      return this.lookupType != null;
    }

    public void setLookupTypeIsSet(boolean value) {
      if (!value) {
        this.lookupType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOOKUP_TYPE:
        if (value == null) {
          unsetLookupType();
        } else {
          setLookupType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOOKUP_TYPE:
        return getLookupType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOOKUP_TYPE:
        return isSetLookupType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByLookType_args)
        return this.equals((getSysLookupValByLookType_args)that);
      return false;
    }

    public boolean equals(getSysLookupValByLookType_args that) {
      if (that == null)
        return false;

      boolean this_present_lookupType = true && this.isSetLookupType();
      boolean that_present_lookupType = true && that.isSetLookupType();
      if (this_present_lookupType || that_present_lookupType) {
        if (!(this_present_lookupType && that_present_lookupType))
          return false;
        if (!this.lookupType.equals(that.lookupType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lookupType = true && (isSetLookupType());
      list.add(present_lookupType);
      if (present_lookupType)
        list.add(lookupType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByLookType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLookupType()).compareTo(other.isSetLookupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupType, other.lookupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByLookType_args(");
      boolean first = true;

      sb.append("lookupType:");
      if (this.lookupType == null) {
        sb.append("null");
      } else {
        sb.append(this.lookupType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByLookType_argsStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookType_argsStandardScheme getScheme() {
        return new getSysLookupValByLookType_argsStandardScheme();
      }
    }

    private static class getSysLookupValByLookType_argsStandardScheme extends StandardScheme<getSysLookupValByLookType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByLookType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOOKUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lookupType = iprot.readString();
                struct.setLookupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByLookType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lookupType != null) {
          oprot.writeFieldBegin(LOOKUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.lookupType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByLookType_argsTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookType_argsTupleScheme getScheme() {
        return new getSysLookupValByLookType_argsTupleScheme();
      }
    }

    private static class getSysLookupValByLookType_argsTupleScheme extends TupleScheme<getSysLookupValByLookType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLookupType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLookupType()) {
          oprot.writeString(struct.lookupType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lookupType = iprot.readString();
          struct.setLookupTypeIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByLookType_result implements org.apache.thrift.TBase<getSysLookupValByLookType_result, getSysLookupValByLookType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByLookType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByLookType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByLookType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByLookType_resultTupleSchemeFactory());
    }

    public List<SysLookupVal> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookupVal.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByLookType_result.class, metaDataMap);
    }

    public getSysLookupValByLookType_result() {
    }

    public getSysLookupValByLookType_result(
      List<SysLookupVal> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByLookType_result(getSysLookupValByLookType_result other) {
      if (other.isSetSuccess()) {
        List<SysLookupVal> __this__success = new ArrayList<SysLookupVal>(other.success.size());
        for (SysLookupVal other_element : other.success) {
          __this__success.add(new SysLookupVal(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSysLookupValByLookType_result deepCopy() {
      return new getSysLookupValByLookType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysLookupVal> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysLookupVal elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysLookupVal>();
      }
      this.success.add(elem);
    }

    public List<SysLookupVal> getSuccess() {
      return this.success;
    }

    public getSysLookupValByLookType_result setSuccess(List<SysLookupVal> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysLookupVal>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByLookType_result)
        return this.equals((getSysLookupValByLookType_result)that);
      return false;
    }

    public boolean equals(getSysLookupValByLookType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByLookType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByLookType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByLookType_resultStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookType_resultStandardScheme getScheme() {
        return new getSysLookupValByLookType_resultStandardScheme();
      }
    }

    private static class getSysLookupValByLookType_resultStandardScheme extends StandardScheme<getSysLookupValByLookType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByLookType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<SysLookupVal>(_list48.size);
                  SysLookupVal _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new SysLookupVal();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByLookType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysLookupVal _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByLookType_resultTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookType_resultTupleScheme getScheme() {
        return new getSysLookupValByLookType_resultTupleScheme();
      }
    }

    private static class getSysLookupValByLookType_resultTupleScheme extends TupleScheme<getSysLookupValByLookType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysLookupVal _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysLookupVal>(_list53.size);
            SysLookupVal _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new SysLookupVal();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByLookupId_args implements org.apache.thrift.TBase<getSysLookupValByLookupId_args, getSysLookupValByLookupId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByLookupId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByLookupId_args");

    private static final org.apache.thrift.protocol.TField LOOKUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByLookupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByLookupId_argsTupleSchemeFactory());
    }

    public int lookupId; // required
    public int page; // required
    public int rows; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOOKUP_ID((short)1, "lookupId"),
      PAGE((short)2, "page"),
      ROWS((short)3, "rows");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOOKUP_ID
            return LOOKUP_ID;
          case 2: // PAGE
            return PAGE;
          case 3: // ROWS
            return ROWS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOOKUPID_ISSET_ID = 0;
    private static final int __PAGE_ISSET_ID = 1;
    private static final int __ROWS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOOKUP_ID, new org.apache.thrift.meta_data.FieldMetaData("lookupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByLookupId_args.class, metaDataMap);
    }

    public getSysLookupValByLookupId_args() {
    }

    public getSysLookupValByLookupId_args(
      int lookupId,
      int page,
      int rows)
    {
      this();
      this.lookupId = lookupId;
      setLookupIdIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.rows = rows;
      setRowsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByLookupId_args(getSysLookupValByLookupId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lookupId = other.lookupId;
      this.page = other.page;
      this.rows = other.rows;
    }

    public getSysLookupValByLookupId_args deepCopy() {
      return new getSysLookupValByLookupId_args(this);
    }

    @Override
    public void clear() {
      setLookupIdIsSet(false);
      this.lookupId = 0;
      setPageIsSet(false);
      this.page = 0;
      setRowsIsSet(false);
      this.rows = 0;
    }

    public int getLookupId() {
      return this.lookupId;
    }

    public getSysLookupValByLookupId_args setLookupId(int lookupId) {
      this.lookupId = lookupId;
      setLookupIdIsSet(true);
      return this;
    }

    public void unsetLookupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOOKUPID_ISSET_ID);
    }

    /** Returns true if field lookupId is set (has been assigned a value) and false otherwise */
    public boolean isSetLookupId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOOKUPID_ISSET_ID);
    }

    public void setLookupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOOKUPID_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public getSysLookupValByLookupId_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getRows() {
      return this.rows;
    }

    public getSysLookupValByLookupId_args setRows(int rows) {
      this.rows = rows;
      setRowsIsSet(true);
      return this;
    }

    public void unsetRows() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
    }

    /** Returns true if field rows is set (has been assigned a value) and false otherwise */
    public boolean isSetRows() {
      return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
    }

    public void setRowsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOOKUP_ID:
        if (value == null) {
          unsetLookupId();
        } else {
          setLookupId((Integer)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case ROWS:
        if (value == null) {
          unsetRows();
        } else {
          setRows((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOOKUP_ID:
        return Integer.valueOf(getLookupId());

      case PAGE:
        return Integer.valueOf(getPage());

      case ROWS:
        return Integer.valueOf(getRows());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOOKUP_ID:
        return isSetLookupId();
      case PAGE:
        return isSetPage();
      case ROWS:
        return isSetRows();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByLookupId_args)
        return this.equals((getSysLookupValByLookupId_args)that);
      return false;
    }

    public boolean equals(getSysLookupValByLookupId_args that) {
      if (that == null)
        return false;

      boolean this_present_lookupId = true;
      boolean that_present_lookupId = true;
      if (this_present_lookupId || that_present_lookupId) {
        if (!(this_present_lookupId && that_present_lookupId))
          return false;
        if (this.lookupId != that.lookupId)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_rows = true;
      boolean that_present_rows = true;
      if (this_present_rows || that_present_rows) {
        if (!(this_present_rows && that_present_rows))
          return false;
        if (this.rows != that.rows)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lookupId = true;
      list.add(present_lookupId);
      if (present_lookupId)
        list.add(lookupId);

      boolean present_page = true;
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_rows = true;
      list.add(present_rows);
      if (present_rows)
        list.add(rows);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByLookupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLookupId()).compareTo(other.isSetLookupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupId, other.lookupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRows()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByLookupId_args(");
      boolean first = true;

      sb.append("lookupId:");
      sb.append(this.lookupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rows:");
      sb.append(this.rows);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByLookupId_argsStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookupId_argsStandardScheme getScheme() {
        return new getSysLookupValByLookupId_argsStandardScheme();
      }
    }

    private static class getSysLookupValByLookupId_argsStandardScheme extends StandardScheme<getSysLookupValByLookupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByLookupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOOKUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lookupId = iprot.readI32();
                struct.setLookupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROWS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rows = iprot.readI32();
                struct.setRowsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByLookupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOOKUP_ID_FIELD_DESC);
        oprot.writeI32(struct.lookupId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ROWS_FIELD_DESC);
        oprot.writeI32(struct.rows);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByLookupId_argsTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookupId_argsTupleScheme getScheme() {
        return new getSysLookupValByLookupId_argsTupleScheme();
      }
    }

    private static class getSysLookupValByLookupId_argsTupleScheme extends TupleScheme<getSysLookupValByLookupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLookupId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetRows()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLookupId()) {
          oprot.writeI32(struct.lookupId);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetRows()) {
          oprot.writeI32(struct.rows);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lookupId = iprot.readI32();
          struct.setLookupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rows = iprot.readI32();
          struct.setRowsIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByLookupId_result implements org.apache.thrift.TBase<getSysLookupValByLookupId_result, getSysLookupValByLookupId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByLookupId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByLookupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByLookupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByLookupId_resultTupleSchemeFactory());
    }

    public List<SysLookupVal> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookupVal.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByLookupId_result.class, metaDataMap);
    }

    public getSysLookupValByLookupId_result() {
    }

    public getSysLookupValByLookupId_result(
      List<SysLookupVal> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByLookupId_result(getSysLookupValByLookupId_result other) {
      if (other.isSetSuccess()) {
        List<SysLookupVal> __this__success = new ArrayList<SysLookupVal>(other.success.size());
        for (SysLookupVal other_element : other.success) {
          __this__success.add(new SysLookupVal(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSysLookupValByLookupId_result deepCopy() {
      return new getSysLookupValByLookupId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysLookupVal> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysLookupVal elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysLookupVal>();
      }
      this.success.add(elem);
    }

    public List<SysLookupVal> getSuccess() {
      return this.success;
    }

    public getSysLookupValByLookupId_result setSuccess(List<SysLookupVal> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysLookupVal>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByLookupId_result)
        return this.equals((getSysLookupValByLookupId_result)that);
      return false;
    }

    public boolean equals(getSysLookupValByLookupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByLookupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByLookupId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByLookupId_resultStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookupId_resultStandardScheme getScheme() {
        return new getSysLookupValByLookupId_resultStandardScheme();
      }
    }

    private static class getSysLookupValByLookupId_resultStandardScheme extends StandardScheme<getSysLookupValByLookupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByLookupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<SysLookupVal>(_list56.size);
                  SysLookupVal _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new SysLookupVal();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByLookupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysLookupVal _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByLookupId_resultTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookupId_resultTupleScheme getScheme() {
        return new getSysLookupValByLookupId_resultTupleScheme();
      }
    }

    private static class getSysLookupValByLookupId_resultTupleScheme extends TupleScheme<getSysLookupValByLookupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysLookupVal _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysLookupVal>(_list61.size);
            SysLookupVal _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new SysLookupVal();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByLookupIdTotal_args implements org.apache.thrift.TBase<getSysLookupValByLookupIdTotal_args, getSysLookupValByLookupIdTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByLookupIdTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByLookupIdTotal_args");

    private static final org.apache.thrift.protocol.TField LOOKUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByLookupIdTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByLookupIdTotal_argsTupleSchemeFactory());
    }

    public int lookupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOOKUP_ID((short)1, "lookupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOOKUP_ID
            return LOOKUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOOKUPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOOKUP_ID, new org.apache.thrift.meta_data.FieldMetaData("lookupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByLookupIdTotal_args.class, metaDataMap);
    }

    public getSysLookupValByLookupIdTotal_args() {
    }

    public getSysLookupValByLookupIdTotal_args(
      int lookupId)
    {
      this();
      this.lookupId = lookupId;
      setLookupIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByLookupIdTotal_args(getSysLookupValByLookupIdTotal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lookupId = other.lookupId;
    }

    public getSysLookupValByLookupIdTotal_args deepCopy() {
      return new getSysLookupValByLookupIdTotal_args(this);
    }

    @Override
    public void clear() {
      setLookupIdIsSet(false);
      this.lookupId = 0;
    }

    public int getLookupId() {
      return this.lookupId;
    }

    public getSysLookupValByLookupIdTotal_args setLookupId(int lookupId) {
      this.lookupId = lookupId;
      setLookupIdIsSet(true);
      return this;
    }

    public void unsetLookupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOOKUPID_ISSET_ID);
    }

    /** Returns true if field lookupId is set (has been assigned a value) and false otherwise */
    public boolean isSetLookupId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOOKUPID_ISSET_ID);
    }

    public void setLookupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOOKUPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOOKUP_ID:
        if (value == null) {
          unsetLookupId();
        } else {
          setLookupId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOOKUP_ID:
        return Integer.valueOf(getLookupId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOOKUP_ID:
        return isSetLookupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByLookupIdTotal_args)
        return this.equals((getSysLookupValByLookupIdTotal_args)that);
      return false;
    }

    public boolean equals(getSysLookupValByLookupIdTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_lookupId = true;
      boolean that_present_lookupId = true;
      if (this_present_lookupId || that_present_lookupId) {
        if (!(this_present_lookupId && that_present_lookupId))
          return false;
        if (this.lookupId != that.lookupId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lookupId = true;
      list.add(present_lookupId);
      if (present_lookupId)
        list.add(lookupId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByLookupIdTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLookupId()).compareTo(other.isSetLookupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupId, other.lookupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByLookupIdTotal_args(");
      boolean first = true;

      sb.append("lookupId:");
      sb.append(this.lookupId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByLookupIdTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookupIdTotal_argsStandardScheme getScheme() {
        return new getSysLookupValByLookupIdTotal_argsStandardScheme();
      }
    }

    private static class getSysLookupValByLookupIdTotal_argsStandardScheme extends StandardScheme<getSysLookupValByLookupIdTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByLookupIdTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOOKUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lookupId = iprot.readI32();
                struct.setLookupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByLookupIdTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOOKUP_ID_FIELD_DESC);
        oprot.writeI32(struct.lookupId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByLookupIdTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookupIdTotal_argsTupleScheme getScheme() {
        return new getSysLookupValByLookupIdTotal_argsTupleScheme();
      }
    }

    private static class getSysLookupValByLookupIdTotal_argsTupleScheme extends TupleScheme<getSysLookupValByLookupIdTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookupIdTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLookupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLookupId()) {
          oprot.writeI32(struct.lookupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookupIdTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lookupId = iprot.readI32();
          struct.setLookupIdIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByLookupIdTotal_result implements org.apache.thrift.TBase<getSysLookupValByLookupIdTotal_result, getSysLookupValByLookupIdTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByLookupIdTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByLookupIdTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByLookupIdTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByLookupIdTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByLookupIdTotal_result.class, metaDataMap);
    }

    public getSysLookupValByLookupIdTotal_result() {
    }

    public getSysLookupValByLookupIdTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByLookupIdTotal_result(getSysLookupValByLookupIdTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getSysLookupValByLookupIdTotal_result deepCopy() {
      return new getSysLookupValByLookupIdTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getSysLookupValByLookupIdTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByLookupIdTotal_result)
        return this.equals((getSysLookupValByLookupIdTotal_result)that);
      return false;
    }

    public boolean equals(getSysLookupValByLookupIdTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByLookupIdTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByLookupIdTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByLookupIdTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookupIdTotal_resultStandardScheme getScheme() {
        return new getSysLookupValByLookupIdTotal_resultStandardScheme();
      }
    }

    private static class getSysLookupValByLookupIdTotal_resultStandardScheme extends StandardScheme<getSysLookupValByLookupIdTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByLookupIdTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByLookupIdTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByLookupIdTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByLookupIdTotal_resultTupleScheme getScheme() {
        return new getSysLookupValByLookupIdTotal_resultTupleScheme();
      }
    }

    private static class getSysLookupValByLookupIdTotal_resultTupleScheme extends TupleScheme<getSysLookupValByLookupIdTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookupIdTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByLookupIdTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteLookupVal_args implements org.apache.thrift.TBase<deleteLookupVal_args, deleteLookupVal_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLookupVal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLookupVal_args");

    private static final org.apache.thrift.protocol.TField LOOKUP_VAL_PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupValPids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLookupVal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLookupVal_argsTupleSchemeFactory());
    }

    public String lookupValPids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOOKUP_VAL_PIDS((short)1, "lookupValPids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOOKUP_VAL_PIDS
            return LOOKUP_VAL_PIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOOKUP_VAL_PIDS, new org.apache.thrift.meta_data.FieldMetaData("lookupValPids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLookupVal_args.class, metaDataMap);
    }

    public deleteLookupVal_args() {
    }

    public deleteLookupVal_args(
      String lookupValPids)
    {
      this();
      this.lookupValPids = lookupValPids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLookupVal_args(deleteLookupVal_args other) {
      if (other.isSetLookupValPids()) {
        this.lookupValPids = other.lookupValPids;
      }
    }

    public deleteLookupVal_args deepCopy() {
      return new deleteLookupVal_args(this);
    }

    @Override
    public void clear() {
      this.lookupValPids = null;
    }

    public String getLookupValPids() {
      return this.lookupValPids;
    }

    public deleteLookupVal_args setLookupValPids(String lookupValPids) {
      this.lookupValPids = lookupValPids;
      return this;
    }

    public void unsetLookupValPids() {
      this.lookupValPids = null;
    }

    /** Returns true if field lookupValPids is set (has been assigned a value) and false otherwise */
    public boolean isSetLookupValPids() {
      return this.lookupValPids != null;
    }

    public void setLookupValPidsIsSet(boolean value) {
      if (!value) {
        this.lookupValPids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOOKUP_VAL_PIDS:
        if (value == null) {
          unsetLookupValPids();
        } else {
          setLookupValPids((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOOKUP_VAL_PIDS:
        return getLookupValPids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOOKUP_VAL_PIDS:
        return isSetLookupValPids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLookupVal_args)
        return this.equals((deleteLookupVal_args)that);
      return false;
    }

    public boolean equals(deleteLookupVal_args that) {
      if (that == null)
        return false;

      boolean this_present_lookupValPids = true && this.isSetLookupValPids();
      boolean that_present_lookupValPids = true && that.isSetLookupValPids();
      if (this_present_lookupValPids || that_present_lookupValPids) {
        if (!(this_present_lookupValPids && that_present_lookupValPids))
          return false;
        if (!this.lookupValPids.equals(that.lookupValPids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lookupValPids = true && (isSetLookupValPids());
      list.add(present_lookupValPids);
      if (present_lookupValPids)
        list.add(lookupValPids);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLookupVal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLookupValPids()).compareTo(other.isSetLookupValPids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookupValPids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupValPids, other.lookupValPids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLookupVal_args(");
      boolean first = true;

      sb.append("lookupValPids:");
      if (this.lookupValPids == null) {
        sb.append("null");
      } else {
        sb.append(this.lookupValPids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLookupVal_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLookupVal_argsStandardScheme getScheme() {
        return new deleteLookupVal_argsStandardScheme();
      }
    }

    private static class deleteLookupVal_argsStandardScheme extends StandardScheme<deleteLookupVal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLookupVal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOOKUP_VAL_PIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lookupValPids = iprot.readString();
                struct.setLookupValPidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLookupVal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lookupValPids != null) {
          oprot.writeFieldBegin(LOOKUP_VAL_PIDS_FIELD_DESC);
          oprot.writeString(struct.lookupValPids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLookupVal_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLookupVal_argsTupleScheme getScheme() {
        return new deleteLookupVal_argsTupleScheme();
      }
    }

    private static class deleteLookupVal_argsTupleScheme extends TupleScheme<deleteLookupVal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLookupVal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLookupValPids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLookupValPids()) {
          oprot.writeString(struct.lookupValPids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLookupVal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lookupValPids = iprot.readString();
          struct.setLookupValPidsIsSet(true);
        }
      }
    }

  }

  public static class deleteLookupVal_result implements org.apache.thrift.TBase<deleteLookupVal_result, deleteLookupVal_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLookupVal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLookupVal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLookupVal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLookupVal_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLookupVal_result.class, metaDataMap);
    }

    public deleteLookupVal_result() {
    }

    public deleteLookupVal_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLookupVal_result(deleteLookupVal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteLookupVal_result deepCopy() {
      return new deleteLookupVal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteLookupVal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteLookupVal_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLookupVal_result)
        return this.equals((deleteLookupVal_result)that);
      return false;
    }

    public boolean equals(deleteLookupVal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLookupVal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLookupVal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLookupVal_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLookupVal_resultStandardScheme getScheme() {
        return new deleteLookupVal_resultStandardScheme();
      }
    }

    private static class deleteLookupVal_resultStandardScheme extends StandardScheme<deleteLookupVal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLookupVal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLookupVal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLookupVal_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLookupVal_resultTupleScheme getScheme() {
        return new deleteLookupVal_resultTupleScheme();
      }
    }

    private static class deleteLookupVal_resultTupleScheme extends TupleScheme<deleteLookupVal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLookupVal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLookupVal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class addSysLookupVal_args implements org.apache.thrift.TBase<addSysLookupVal_args, addSysLookupVal_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSysLookupVal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSysLookupVal_args");

    private static final org.apache.thrift.protocol.TField SYS_LOOKUP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("sysLookupVal", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSysLookupVal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSysLookupVal_argsTupleSchemeFactory());
    }

    public SysLookupVal sysLookupVal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_LOOKUP_VAL((short)1, "sysLookupVal");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_LOOKUP_VAL
            return SYS_LOOKUP_VAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_LOOKUP_VAL, new org.apache.thrift.meta_data.FieldMetaData("sysLookupVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookupVal.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSysLookupVal_args.class, metaDataMap);
    }

    public addSysLookupVal_args() {
    }

    public addSysLookupVal_args(
      SysLookupVal sysLookupVal)
    {
      this();
      this.sysLookupVal = sysLookupVal;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSysLookupVal_args(addSysLookupVal_args other) {
      if (other.isSetSysLookupVal()) {
        this.sysLookupVal = new SysLookupVal(other.sysLookupVal);
      }
    }

    public addSysLookupVal_args deepCopy() {
      return new addSysLookupVal_args(this);
    }

    @Override
    public void clear() {
      this.sysLookupVal = null;
    }

    public SysLookupVal getSysLookupVal() {
      return this.sysLookupVal;
    }

    public addSysLookupVal_args setSysLookupVal(SysLookupVal sysLookupVal) {
      this.sysLookupVal = sysLookupVal;
      return this;
    }

    public void unsetSysLookupVal() {
      this.sysLookupVal = null;
    }

    /** Returns true if field sysLookupVal is set (has been assigned a value) and false otherwise */
    public boolean isSetSysLookupVal() {
      return this.sysLookupVal != null;
    }

    public void setSysLookupValIsSet(boolean value) {
      if (!value) {
        this.sysLookupVal = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_LOOKUP_VAL:
        if (value == null) {
          unsetSysLookupVal();
        } else {
          setSysLookupVal((SysLookupVal)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_LOOKUP_VAL:
        return getSysLookupVal();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_LOOKUP_VAL:
        return isSetSysLookupVal();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSysLookupVal_args)
        return this.equals((addSysLookupVal_args)that);
      return false;
    }

    public boolean equals(addSysLookupVal_args that) {
      if (that == null)
        return false;

      boolean this_present_sysLookupVal = true && this.isSetSysLookupVal();
      boolean that_present_sysLookupVal = true && that.isSetSysLookupVal();
      if (this_present_sysLookupVal || that_present_sysLookupVal) {
        if (!(this_present_sysLookupVal && that_present_sysLookupVal))
          return false;
        if (!this.sysLookupVal.equals(that.sysLookupVal))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysLookupVal = true && (isSetSysLookupVal());
      list.add(present_sysLookupVal);
      if (present_sysLookupVal)
        list.add(sysLookupVal);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSysLookupVal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysLookupVal()).compareTo(other.isSetSysLookupVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysLookupVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysLookupVal, other.sysLookupVal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSysLookupVal_args(");
      boolean first = true;

      sb.append("sysLookupVal:");
      if (this.sysLookupVal == null) {
        sb.append("null");
      } else {
        sb.append(this.sysLookupVal);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysLookupVal != null) {
        sysLookupVal.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSysLookupVal_argsStandardSchemeFactory implements SchemeFactory {
      public addSysLookupVal_argsStandardScheme getScheme() {
        return new addSysLookupVal_argsStandardScheme();
      }
    }

    private static class addSysLookupVal_argsStandardScheme extends StandardScheme<addSysLookupVal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSysLookupVal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_LOOKUP_VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysLookupVal = new SysLookupVal();
                struct.sysLookupVal.read(iprot);
                struct.setSysLookupValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSysLookupVal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysLookupVal != null) {
          oprot.writeFieldBegin(SYS_LOOKUP_VAL_FIELD_DESC);
          struct.sysLookupVal.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSysLookupVal_argsTupleSchemeFactory implements SchemeFactory {
      public addSysLookupVal_argsTupleScheme getScheme() {
        return new addSysLookupVal_argsTupleScheme();
      }
    }

    private static class addSysLookupVal_argsTupleScheme extends TupleScheme<addSysLookupVal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSysLookupVal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysLookupVal()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysLookupVal()) {
          struct.sysLookupVal.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSysLookupVal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysLookupVal = new SysLookupVal();
          struct.sysLookupVal.read(iprot);
          struct.setSysLookupValIsSet(true);
        }
      }
    }

  }

  public static class addSysLookupVal_result implements org.apache.thrift.TBase<addSysLookupVal_result, addSysLookupVal_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSysLookupVal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSysLookupVal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSysLookupVal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSysLookupVal_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSysLookupVal_result.class, metaDataMap);
    }

    public addSysLookupVal_result() {
    }

    public addSysLookupVal_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSysLookupVal_result(addSysLookupVal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addSysLookupVal_result deepCopy() {
      return new addSysLookupVal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addSysLookupVal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addSysLookupVal_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSysLookupVal_result)
        return this.equals((addSysLookupVal_result)that);
      return false;
    }

    public boolean equals(addSysLookupVal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSysLookupVal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSysLookupVal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSysLookupVal_resultStandardSchemeFactory implements SchemeFactory {
      public addSysLookupVal_resultStandardScheme getScheme() {
        return new addSysLookupVal_resultStandardScheme();
      }
    }

    private static class addSysLookupVal_resultStandardScheme extends StandardScheme<addSysLookupVal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSysLookupVal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSysLookupVal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSysLookupVal_resultTupleSchemeFactory implements SchemeFactory {
      public addSysLookupVal_resultTupleScheme getScheme() {
        return new addSysLookupVal_resultTupleScheme();
      }
    }

    private static class addSysLookupVal_resultTupleScheme extends TupleScheme<addSysLookupVal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSysLookupVal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSysLookupVal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateSysLookupVal_args implements org.apache.thrift.TBase<updateSysLookupVal_args, updateSysLookupVal_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysLookupVal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysLookupVal_args");

    private static final org.apache.thrift.protocol.TField SYS_LOOKUP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("sysLookupVal", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysLookupVal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysLookupVal_argsTupleSchemeFactory());
    }

    public SysLookupVal sysLookupVal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_LOOKUP_VAL((short)1, "sysLookupVal");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_LOOKUP_VAL
            return SYS_LOOKUP_VAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_LOOKUP_VAL, new org.apache.thrift.meta_data.FieldMetaData("sysLookupVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookupVal.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysLookupVal_args.class, metaDataMap);
    }

    public updateSysLookupVal_args() {
    }

    public updateSysLookupVal_args(
      SysLookupVal sysLookupVal)
    {
      this();
      this.sysLookupVal = sysLookupVal;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysLookupVal_args(updateSysLookupVal_args other) {
      if (other.isSetSysLookupVal()) {
        this.sysLookupVal = new SysLookupVal(other.sysLookupVal);
      }
    }

    public updateSysLookupVal_args deepCopy() {
      return new updateSysLookupVal_args(this);
    }

    @Override
    public void clear() {
      this.sysLookupVal = null;
    }

    public SysLookupVal getSysLookupVal() {
      return this.sysLookupVal;
    }

    public updateSysLookupVal_args setSysLookupVal(SysLookupVal sysLookupVal) {
      this.sysLookupVal = sysLookupVal;
      return this;
    }

    public void unsetSysLookupVal() {
      this.sysLookupVal = null;
    }

    /** Returns true if field sysLookupVal is set (has been assigned a value) and false otherwise */
    public boolean isSetSysLookupVal() {
      return this.sysLookupVal != null;
    }

    public void setSysLookupValIsSet(boolean value) {
      if (!value) {
        this.sysLookupVal = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYS_LOOKUP_VAL:
        if (value == null) {
          unsetSysLookupVal();
        } else {
          setSysLookupVal((SysLookupVal)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_LOOKUP_VAL:
        return getSysLookupVal();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYS_LOOKUP_VAL:
        return isSetSysLookupVal();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysLookupVal_args)
        return this.equals((updateSysLookupVal_args)that);
      return false;
    }

    public boolean equals(updateSysLookupVal_args that) {
      if (that == null)
        return false;

      boolean this_present_sysLookupVal = true && this.isSetSysLookupVal();
      boolean that_present_sysLookupVal = true && that.isSetSysLookupVal();
      if (this_present_sysLookupVal || that_present_sysLookupVal) {
        if (!(this_present_sysLookupVal && that_present_sysLookupVal))
          return false;
        if (!this.sysLookupVal.equals(that.sysLookupVal))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sysLookupVal = true && (isSetSysLookupVal());
      list.add(present_sysLookupVal);
      if (present_sysLookupVal)
        list.add(sysLookupVal);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysLookupVal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSysLookupVal()).compareTo(other.isSetSysLookupVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysLookupVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysLookupVal, other.sysLookupVal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysLookupVal_args(");
      boolean first = true;

      sb.append("sysLookupVal:");
      if (this.sysLookupVal == null) {
        sb.append("null");
      } else {
        sb.append(this.sysLookupVal);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sysLookupVal != null) {
        sysLookupVal.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysLookupVal_argsStandardSchemeFactory implements SchemeFactory {
      public updateSysLookupVal_argsStandardScheme getScheme() {
        return new updateSysLookupVal_argsStandardScheme();
      }
    }

    private static class updateSysLookupVal_argsStandardScheme extends StandardScheme<updateSysLookupVal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysLookupVal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_LOOKUP_VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sysLookupVal = new SysLookupVal();
                struct.sysLookupVal.read(iprot);
                struct.setSysLookupValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysLookupVal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sysLookupVal != null) {
          oprot.writeFieldBegin(SYS_LOOKUP_VAL_FIELD_DESC);
          struct.sysLookupVal.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysLookupVal_argsTupleSchemeFactory implements SchemeFactory {
      public updateSysLookupVal_argsTupleScheme getScheme() {
        return new updateSysLookupVal_argsTupleScheme();
      }
    }

    private static class updateSysLookupVal_argsTupleScheme extends TupleScheme<updateSysLookupVal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysLookupVal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSysLookupVal()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSysLookupVal()) {
          struct.sysLookupVal.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysLookupVal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sysLookupVal = new SysLookupVal();
          struct.sysLookupVal.read(iprot);
          struct.setSysLookupValIsSet(true);
        }
      }
    }

  }

  public static class updateSysLookupVal_result implements org.apache.thrift.TBase<updateSysLookupVal_result, updateSysLookupVal_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSysLookupVal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSysLookupVal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSysLookupVal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSysLookupVal_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSysLookupVal_result.class, metaDataMap);
    }

    public updateSysLookupVal_result() {
    }

    public updateSysLookupVal_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSysLookupVal_result(updateSysLookupVal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateSysLookupVal_result deepCopy() {
      return new updateSysLookupVal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateSysLookupVal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateSysLookupVal_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSysLookupVal_result)
        return this.equals((updateSysLookupVal_result)that);
      return false;
    }

    public boolean equals(updateSysLookupVal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSysLookupVal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSysLookupVal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSysLookupVal_resultStandardSchemeFactory implements SchemeFactory {
      public updateSysLookupVal_resultStandardScheme getScheme() {
        return new updateSysLookupVal_resultStandardScheme();
      }
    }

    private static class updateSysLookupVal_resultStandardScheme extends StandardScheme<updateSysLookupVal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSysLookupVal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSysLookupVal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSysLookupVal_resultTupleSchemeFactory implements SchemeFactory {
      public updateSysLookupVal_resultTupleScheme getScheme() {
        return new updateSysLookupVal_resultTupleScheme();
      }
    }

    private static class updateSysLookupVal_resultTupleScheme extends TupleScheme<updateSysLookupVal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSysLookupVal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSysLookupVal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getDataTypeSysLookup_args implements org.apache.thrift.TBase<getDataTypeSysLookup_args, getDataTypeSysLookup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataTypeSysLookup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataTypeSysLookup_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataTypeSysLookup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataTypeSysLookup_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataTypeSysLookup_args.class, metaDataMap);
    }

    public getDataTypeSysLookup_args() {
    }

    public getDataTypeSysLookup_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataTypeSysLookup_args(getDataTypeSysLookup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getDataTypeSysLookup_args deepCopy() {
      return new getDataTypeSysLookup_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getDataTypeSysLookup_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataTypeSysLookup_args)
        return this.equals((getDataTypeSysLookup_args)that);
      return false;
    }

    public boolean equals(getDataTypeSysLookup_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataTypeSysLookup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataTypeSysLookup_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataTypeSysLookup_argsStandardSchemeFactory implements SchemeFactory {
      public getDataTypeSysLookup_argsStandardScheme getScheme() {
        return new getDataTypeSysLookup_argsStandardScheme();
      }
    }

    private static class getDataTypeSysLookup_argsStandardScheme extends StandardScheme<getDataTypeSysLookup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataTypeSysLookup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataTypeSysLookup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataTypeSysLookup_argsTupleSchemeFactory implements SchemeFactory {
      public getDataTypeSysLookup_argsTupleScheme getScheme() {
        return new getDataTypeSysLookup_argsTupleScheme();
      }
    }

    private static class getDataTypeSysLookup_argsTupleScheme extends TupleScheme<getDataTypeSysLookup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataTypeSysLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataTypeSysLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getDataTypeSysLookup_result implements org.apache.thrift.TBase<getDataTypeSysLookup_result, getDataTypeSysLookup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataTypeSysLookup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataTypeSysLookup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataTypeSysLookup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataTypeSysLookup_resultTupleSchemeFactory());
    }

    public List<SysLookupVal> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookupVal.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataTypeSysLookup_result.class, metaDataMap);
    }

    public getDataTypeSysLookup_result() {
    }

    public getDataTypeSysLookup_result(
      List<SysLookupVal> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataTypeSysLookup_result(getDataTypeSysLookup_result other) {
      if (other.isSetSuccess()) {
        List<SysLookupVal> __this__success = new ArrayList<SysLookupVal>(other.success.size());
        for (SysLookupVal other_element : other.success) {
          __this__success.add(new SysLookupVal(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDataTypeSysLookup_result deepCopy() {
      return new getDataTypeSysLookup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysLookupVal> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysLookupVal elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysLookupVal>();
      }
      this.success.add(elem);
    }

    public List<SysLookupVal> getSuccess() {
      return this.success;
    }

    public getDataTypeSysLookup_result setSuccess(List<SysLookupVal> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysLookupVal>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataTypeSysLookup_result)
        return this.equals((getDataTypeSysLookup_result)that);
      return false;
    }

    public boolean equals(getDataTypeSysLookup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataTypeSysLookup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataTypeSysLookup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataTypeSysLookup_resultStandardSchemeFactory implements SchemeFactory {
      public getDataTypeSysLookup_resultStandardScheme getScheme() {
        return new getDataTypeSysLookup_resultStandardScheme();
      }
    }

    private static class getDataTypeSysLookup_resultStandardScheme extends StandardScheme<getDataTypeSysLookup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataTypeSysLookup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<SysLookupVal>(_list64.size);
                  SysLookupVal _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new SysLookupVal();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataTypeSysLookup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysLookupVal _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataTypeSysLookup_resultTupleSchemeFactory implements SchemeFactory {
      public getDataTypeSysLookup_resultTupleScheme getScheme() {
        return new getDataTypeSysLookup_resultTupleScheme();
      }
    }

    private static class getDataTypeSysLookup_resultTupleScheme extends TupleScheme<getDataTypeSysLookup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataTypeSysLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysLookupVal _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataTypeSysLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysLookupVal>(_list69.size);
            SysLookupVal _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new SysLookupVal();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProjectAssDtlByLookType_args implements org.apache.thrift.TBase<getProjectAssDtlByLookType_args, getProjectAssDtlByLookType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectAssDtlByLookType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectAssDtlByLookType_args");

    private static final org.apache.thrift.protocol.TField LOOKUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectAssDtlByLookType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectAssDtlByLookType_argsTupleSchemeFactory());
    }

    public String lookupType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOOKUP_TYPE((short)1, "lookupType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOOKUP_TYPE
            return LOOKUP_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOOKUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lookupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectAssDtlByLookType_args.class, metaDataMap);
    }

    public getProjectAssDtlByLookType_args() {
    }

    public getProjectAssDtlByLookType_args(
      String lookupType)
    {
      this();
      this.lookupType = lookupType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectAssDtlByLookType_args(getProjectAssDtlByLookType_args other) {
      if (other.isSetLookupType()) {
        this.lookupType = other.lookupType;
      }
    }

    public getProjectAssDtlByLookType_args deepCopy() {
      return new getProjectAssDtlByLookType_args(this);
    }

    @Override
    public void clear() {
      this.lookupType = null;
    }

    public String getLookupType() {
      return this.lookupType;
    }

    public getProjectAssDtlByLookType_args setLookupType(String lookupType) {
      this.lookupType = lookupType;
      return this;
    }

    public void unsetLookupType() {
      this.lookupType = null;
    }

    /** Returns true if field lookupType is set (has been assigned a value) and false otherwise */
    public boolean isSetLookupType() {
      return this.lookupType != null;
    }

    public void setLookupTypeIsSet(boolean value) {
      if (!value) {
        this.lookupType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOOKUP_TYPE:
        if (value == null) {
          unsetLookupType();
        } else {
          setLookupType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOOKUP_TYPE:
        return getLookupType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOOKUP_TYPE:
        return isSetLookupType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectAssDtlByLookType_args)
        return this.equals((getProjectAssDtlByLookType_args)that);
      return false;
    }

    public boolean equals(getProjectAssDtlByLookType_args that) {
      if (that == null)
        return false;

      boolean this_present_lookupType = true && this.isSetLookupType();
      boolean that_present_lookupType = true && that.isSetLookupType();
      if (this_present_lookupType || that_present_lookupType) {
        if (!(this_present_lookupType && that_present_lookupType))
          return false;
        if (!this.lookupType.equals(that.lookupType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lookupType = true && (isSetLookupType());
      list.add(present_lookupType);
      if (present_lookupType)
        list.add(lookupType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectAssDtlByLookType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLookupType()).compareTo(other.isSetLookupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupType, other.lookupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectAssDtlByLookType_args(");
      boolean first = true;

      sb.append("lookupType:");
      if (this.lookupType == null) {
        sb.append("null");
      } else {
        sb.append(this.lookupType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectAssDtlByLookType_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectAssDtlByLookType_argsStandardScheme getScheme() {
        return new getProjectAssDtlByLookType_argsStandardScheme();
      }
    }

    private static class getProjectAssDtlByLookType_argsStandardScheme extends StandardScheme<getProjectAssDtlByLookType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectAssDtlByLookType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOOKUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lookupType = iprot.readString();
                struct.setLookupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectAssDtlByLookType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lookupType != null) {
          oprot.writeFieldBegin(LOOKUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.lookupType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectAssDtlByLookType_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectAssDtlByLookType_argsTupleScheme getScheme() {
        return new getProjectAssDtlByLookType_argsTupleScheme();
      }
    }

    private static class getProjectAssDtlByLookType_argsTupleScheme extends TupleScheme<getProjectAssDtlByLookType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectAssDtlByLookType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLookupType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLookupType()) {
          oprot.writeString(struct.lookupType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectAssDtlByLookType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lookupType = iprot.readString();
          struct.setLookupTypeIsSet(true);
        }
      }
    }

  }

  public static class getProjectAssDtlByLookType_result implements org.apache.thrift.TBase<getProjectAssDtlByLookType_result, getProjectAssDtlByLookType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectAssDtlByLookType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectAssDtlByLookType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectAssDtlByLookType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectAssDtlByLookType_resultTupleSchemeFactory());
    }

    public List<SysLookupVal> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookupVal.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectAssDtlByLookType_result.class, metaDataMap);
    }

    public getProjectAssDtlByLookType_result() {
    }

    public getProjectAssDtlByLookType_result(
      List<SysLookupVal> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectAssDtlByLookType_result(getProjectAssDtlByLookType_result other) {
      if (other.isSetSuccess()) {
        List<SysLookupVal> __this__success = new ArrayList<SysLookupVal>(other.success.size());
        for (SysLookupVal other_element : other.success) {
          __this__success.add(new SysLookupVal(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProjectAssDtlByLookType_result deepCopy() {
      return new getProjectAssDtlByLookType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysLookupVal> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysLookupVal elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysLookupVal>();
      }
      this.success.add(elem);
    }

    public List<SysLookupVal> getSuccess() {
      return this.success;
    }

    public getProjectAssDtlByLookType_result setSuccess(List<SysLookupVal> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysLookupVal>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectAssDtlByLookType_result)
        return this.equals((getProjectAssDtlByLookType_result)that);
      return false;
    }

    public boolean equals(getProjectAssDtlByLookType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectAssDtlByLookType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectAssDtlByLookType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectAssDtlByLookType_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectAssDtlByLookType_resultStandardScheme getScheme() {
        return new getProjectAssDtlByLookType_resultStandardScheme();
      }
    }

    private static class getProjectAssDtlByLookType_resultStandardScheme extends StandardScheme<getProjectAssDtlByLookType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectAssDtlByLookType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<SysLookupVal>(_list72.size);
                  SysLookupVal _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new SysLookupVal();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectAssDtlByLookType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysLookupVal _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectAssDtlByLookType_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectAssDtlByLookType_resultTupleScheme getScheme() {
        return new getProjectAssDtlByLookType_resultTupleScheme();
      }
    }

    private static class getProjectAssDtlByLookType_resultTupleScheme extends TupleScheme<getProjectAssDtlByLookType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectAssDtlByLookType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysLookupVal _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectAssDtlByLookType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysLookupVal>(_list77.size);
            SysLookupVal _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new SysLookupVal();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByChildType_args implements org.apache.thrift.TBase<getSysLookupValByChildType_args, getSysLookupValByChildType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByChildType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByChildType_args");

    private static final org.apache.thrift.protocol.TField LOOKUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOOKUP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupVal", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByChildType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByChildType_argsTupleSchemeFactory());
    }

    public String lookupType; // required
    public String lookupVal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOOKUP_TYPE((short)1, "lookupType"),
      LOOKUP_VAL((short)2, "lookupVal");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOOKUP_TYPE
            return LOOKUP_TYPE;
          case 2: // LOOKUP_VAL
            return LOOKUP_VAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOOKUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lookupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOOKUP_VAL, new org.apache.thrift.meta_data.FieldMetaData("lookupVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByChildType_args.class, metaDataMap);
    }

    public getSysLookupValByChildType_args() {
    }

    public getSysLookupValByChildType_args(
      String lookupType,
      String lookupVal)
    {
      this();
      this.lookupType = lookupType;
      this.lookupVal = lookupVal;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByChildType_args(getSysLookupValByChildType_args other) {
      if (other.isSetLookupType()) {
        this.lookupType = other.lookupType;
      }
      if (other.isSetLookupVal()) {
        this.lookupVal = other.lookupVal;
      }
    }

    public getSysLookupValByChildType_args deepCopy() {
      return new getSysLookupValByChildType_args(this);
    }

    @Override
    public void clear() {
      this.lookupType = null;
      this.lookupVal = null;
    }

    public String getLookupType() {
      return this.lookupType;
    }

    public getSysLookupValByChildType_args setLookupType(String lookupType) {
      this.lookupType = lookupType;
      return this;
    }

    public void unsetLookupType() {
      this.lookupType = null;
    }

    /** Returns true if field lookupType is set (has been assigned a value) and false otherwise */
    public boolean isSetLookupType() {
      return this.lookupType != null;
    }

    public void setLookupTypeIsSet(boolean value) {
      if (!value) {
        this.lookupType = null;
      }
    }

    public String getLookupVal() {
      return this.lookupVal;
    }

    public getSysLookupValByChildType_args setLookupVal(String lookupVal) {
      this.lookupVal = lookupVal;
      return this;
    }

    public void unsetLookupVal() {
      this.lookupVal = null;
    }

    /** Returns true if field lookupVal is set (has been assigned a value) and false otherwise */
    public boolean isSetLookupVal() {
      return this.lookupVal != null;
    }

    public void setLookupValIsSet(boolean value) {
      if (!value) {
        this.lookupVal = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOOKUP_TYPE:
        if (value == null) {
          unsetLookupType();
        } else {
          setLookupType((String)value);
        }
        break;

      case LOOKUP_VAL:
        if (value == null) {
          unsetLookupVal();
        } else {
          setLookupVal((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOOKUP_TYPE:
        return getLookupType();

      case LOOKUP_VAL:
        return getLookupVal();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOOKUP_TYPE:
        return isSetLookupType();
      case LOOKUP_VAL:
        return isSetLookupVal();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByChildType_args)
        return this.equals((getSysLookupValByChildType_args)that);
      return false;
    }

    public boolean equals(getSysLookupValByChildType_args that) {
      if (that == null)
        return false;

      boolean this_present_lookupType = true && this.isSetLookupType();
      boolean that_present_lookupType = true && that.isSetLookupType();
      if (this_present_lookupType || that_present_lookupType) {
        if (!(this_present_lookupType && that_present_lookupType))
          return false;
        if (!this.lookupType.equals(that.lookupType))
          return false;
      }

      boolean this_present_lookupVal = true && this.isSetLookupVal();
      boolean that_present_lookupVal = true && that.isSetLookupVal();
      if (this_present_lookupVal || that_present_lookupVal) {
        if (!(this_present_lookupVal && that_present_lookupVal))
          return false;
        if (!this.lookupVal.equals(that.lookupVal))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_lookupType = true && (isSetLookupType());
      list.add(present_lookupType);
      if (present_lookupType)
        list.add(lookupType);

      boolean present_lookupVal = true && (isSetLookupVal());
      list.add(present_lookupVal);
      if (present_lookupVal)
        list.add(lookupVal);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByChildType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLookupType()).compareTo(other.isSetLookupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupType, other.lookupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLookupVal()).compareTo(other.isSetLookupVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLookupVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupVal, other.lookupVal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByChildType_args(");
      boolean first = true;

      sb.append("lookupType:");
      if (this.lookupType == null) {
        sb.append("null");
      } else {
        sb.append(this.lookupType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lookupVal:");
      if (this.lookupVal == null) {
        sb.append("null");
      } else {
        sb.append(this.lookupVal);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByChildType_argsStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByChildType_argsStandardScheme getScheme() {
        return new getSysLookupValByChildType_argsStandardScheme();
      }
    }

    private static class getSysLookupValByChildType_argsStandardScheme extends StandardScheme<getSysLookupValByChildType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByChildType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOOKUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lookupType = iprot.readString();
                struct.setLookupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOOKUP_VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lookupVal = iprot.readString();
                struct.setLookupValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByChildType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lookupType != null) {
          oprot.writeFieldBegin(LOOKUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.lookupType);
          oprot.writeFieldEnd();
        }
        if (struct.lookupVal != null) {
          oprot.writeFieldBegin(LOOKUP_VAL_FIELD_DESC);
          oprot.writeString(struct.lookupVal);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByChildType_argsTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByChildType_argsTupleScheme getScheme() {
        return new getSysLookupValByChildType_argsTupleScheme();
      }
    }

    private static class getSysLookupValByChildType_argsTupleScheme extends TupleScheme<getSysLookupValByChildType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByChildType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLookupType()) {
          optionals.set(0);
        }
        if (struct.isSetLookupVal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLookupType()) {
          oprot.writeString(struct.lookupType);
        }
        if (struct.isSetLookupVal()) {
          oprot.writeString(struct.lookupVal);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByChildType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lookupType = iprot.readString();
          struct.setLookupTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lookupVal = iprot.readString();
          struct.setLookupValIsSet(true);
        }
      }
    }

  }

  public static class getSysLookupValByChildType_result implements org.apache.thrift.TBase<getSysLookupValByChildType_result, getSysLookupValByChildType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSysLookupValByChildType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSysLookupValByChildType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSysLookupValByChildType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSysLookupValByChildType_resultTupleSchemeFactory());
    }

    public SysLookupVal success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookupVal.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSysLookupValByChildType_result.class, metaDataMap);
    }

    public getSysLookupValByChildType_result() {
    }

    public getSysLookupValByChildType_result(
      SysLookupVal success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSysLookupValByChildType_result(getSysLookupValByChildType_result other) {
      if (other.isSetSuccess()) {
        this.success = new SysLookupVal(other.success);
      }
    }

    public getSysLookupValByChildType_result deepCopy() {
      return new getSysLookupValByChildType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SysLookupVal getSuccess() {
      return this.success;
    }

    public getSysLookupValByChildType_result setSuccess(SysLookupVal success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SysLookupVal)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSysLookupValByChildType_result)
        return this.equals((getSysLookupValByChildType_result)that);
      return false;
    }

    public boolean equals(getSysLookupValByChildType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSysLookupValByChildType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSysLookupValByChildType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSysLookupValByChildType_resultStandardSchemeFactory implements SchemeFactory {
      public getSysLookupValByChildType_resultStandardScheme getScheme() {
        return new getSysLookupValByChildType_resultStandardScheme();
      }
    }

    private static class getSysLookupValByChildType_resultStandardScheme extends StandardScheme<getSysLookupValByChildType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSysLookupValByChildType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SysLookupVal();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSysLookupValByChildType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSysLookupValByChildType_resultTupleSchemeFactory implements SchemeFactory {
      public getSysLookupValByChildType_resultTupleScheme getScheme() {
        return new getSysLookupValByChildType_resultTupleScheme();
      }
    }

    private static class getSysLookupValByChildType_resultTupleScheme extends TupleScheme<getSysLookupValByChildType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByChildType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSysLookupValByChildType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SysLookupVal();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDataTypeByType_args implements org.apache.thrift.TBase<getDataTypeByType_args, getDataTypeByType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataTypeByType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataTypeByType_args");

    private static final org.apache.thrift.protocol.TField PROJECT_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("projectTypes", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataTypeByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataTypeByType_argsTupleSchemeFactory());
    }

    public String projectTypes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_TYPES((short)1, "projectTypes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_TYPES
            return PROJECT_TYPES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_TYPES, new org.apache.thrift.meta_data.FieldMetaData("projectTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataTypeByType_args.class, metaDataMap);
    }

    public getDataTypeByType_args() {
    }

    public getDataTypeByType_args(
      String projectTypes)
    {
      this();
      this.projectTypes = projectTypes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataTypeByType_args(getDataTypeByType_args other) {
      if (other.isSetProjectTypes()) {
        this.projectTypes = other.projectTypes;
      }
    }

    public getDataTypeByType_args deepCopy() {
      return new getDataTypeByType_args(this);
    }

    @Override
    public void clear() {
      this.projectTypes = null;
    }

    public String getProjectTypes() {
      return this.projectTypes;
    }

    public getDataTypeByType_args setProjectTypes(String projectTypes) {
      this.projectTypes = projectTypes;
      return this;
    }

    public void unsetProjectTypes() {
      this.projectTypes = null;
    }

    /** Returns true if field projectTypes is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectTypes() {
      return this.projectTypes != null;
    }

    public void setProjectTypesIsSet(boolean value) {
      if (!value) {
        this.projectTypes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_TYPES:
        if (value == null) {
          unsetProjectTypes();
        } else {
          setProjectTypes((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_TYPES:
        return getProjectTypes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_TYPES:
        return isSetProjectTypes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataTypeByType_args)
        return this.equals((getDataTypeByType_args)that);
      return false;
    }

    public boolean equals(getDataTypeByType_args that) {
      if (that == null)
        return false;

      boolean this_present_projectTypes = true && this.isSetProjectTypes();
      boolean that_present_projectTypes = true && that.isSetProjectTypes();
      if (this_present_projectTypes || that_present_projectTypes) {
        if (!(this_present_projectTypes && that_present_projectTypes))
          return false;
        if (!this.projectTypes.equals(that.projectTypes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectTypes = true && (isSetProjectTypes());
      list.add(present_projectTypes);
      if (present_projectTypes)
        list.add(projectTypes);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataTypeByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectTypes()).compareTo(other.isSetProjectTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectTypes, other.projectTypes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataTypeByType_args(");
      boolean first = true;

      sb.append("projectTypes:");
      if (this.projectTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.projectTypes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataTypeByType_argsStandardSchemeFactory implements SchemeFactory {
      public getDataTypeByType_argsStandardScheme getScheme() {
        return new getDataTypeByType_argsStandardScheme();
      }
    }

    private static class getDataTypeByType_argsStandardScheme extends StandardScheme<getDataTypeByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataTypeByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectTypes = iprot.readString();
                struct.setProjectTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataTypeByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectTypes != null) {
          oprot.writeFieldBegin(PROJECT_TYPES_FIELD_DESC);
          oprot.writeString(struct.projectTypes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataTypeByType_argsTupleSchemeFactory implements SchemeFactory {
      public getDataTypeByType_argsTupleScheme getScheme() {
        return new getDataTypeByType_argsTupleScheme();
      }
    }

    private static class getDataTypeByType_argsTupleScheme extends TupleScheme<getDataTypeByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataTypeByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectTypes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectTypes()) {
          oprot.writeString(struct.projectTypes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataTypeByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectTypes = iprot.readString();
          struct.setProjectTypesIsSet(true);
        }
      }
    }

  }

  public static class getDataTypeByType_result implements org.apache.thrift.TBase<getDataTypeByType_result, getDataTypeByType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataTypeByType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataTypeByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataTypeByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataTypeByType_resultTupleSchemeFactory());
    }

    public List<SysLookupVal> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysLookupVal.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataTypeByType_result.class, metaDataMap);
    }

    public getDataTypeByType_result() {
    }

    public getDataTypeByType_result(
      List<SysLookupVal> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataTypeByType_result(getDataTypeByType_result other) {
      if (other.isSetSuccess()) {
        List<SysLookupVal> __this__success = new ArrayList<SysLookupVal>(other.success.size());
        for (SysLookupVal other_element : other.success) {
          __this__success.add(new SysLookupVal(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDataTypeByType_result deepCopy() {
      return new getDataTypeByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SysLookupVal> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SysLookupVal elem) {
      if (this.success == null) {
        this.success = new ArrayList<SysLookupVal>();
      }
      this.success.add(elem);
    }

    public List<SysLookupVal> getSuccess() {
      return this.success;
    }

    public getDataTypeByType_result setSuccess(List<SysLookupVal> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SysLookupVal>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataTypeByType_result)
        return this.equals((getDataTypeByType_result)that);
      return false;
    }

    public boolean equals(getDataTypeByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataTypeByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataTypeByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataTypeByType_resultStandardSchemeFactory implements SchemeFactory {
      public getDataTypeByType_resultStandardScheme getScheme() {
        return new getDataTypeByType_resultStandardScheme();
      }
    }

    private static class getDataTypeByType_resultStandardScheme extends StandardScheme<getDataTypeByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataTypeByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<SysLookupVal>(_list80.size);
                  SysLookupVal _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new SysLookupVal();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataTypeByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SysLookupVal _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataTypeByType_resultTupleSchemeFactory implements SchemeFactory {
      public getDataTypeByType_resultTupleScheme getScheme() {
        return new getDataTypeByType_resultTupleScheme();
      }
    }

    private static class getDataTypeByType_resultTupleScheme extends TupleScheme<getDataTypeByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataTypeByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SysLookupVal _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataTypeByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SysLookupVal>(_list85.size);
            SysLookupVal _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new SysLookupVal();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

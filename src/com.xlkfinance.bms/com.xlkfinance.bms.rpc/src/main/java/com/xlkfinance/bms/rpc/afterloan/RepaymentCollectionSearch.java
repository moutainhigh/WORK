/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class RepaymentCollectionSearch implements org.apache.thrift.TBase<RepaymentCollectionSearch, RepaymentCollectionSearch._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentCollectionSearch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentCollectionSearch");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNum", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EXPIRE_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("expireStartDt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXPIRE_ENDT_FIELD_DESC = new org.apache.thrift.protocol.TField("expireEndt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OVERDUE_START_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueStartDay", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OVERDUE_END_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueEndDay", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField REQUEST_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStartDt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REQUEST_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestEndDT", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REMINDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PLAN_COLLECTION_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("planCollectionUser", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PLAN_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planStartDt", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PLAN_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planEndDT", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FACT_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("factStartDt", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField FACT_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("factEndDT", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField FACT_COLLECTION_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("factCollectionUser", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField INDEX_START_FIELD_DESC = new org.apache.thrift.protocol.TField("indexStart", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField INDEX_END_FIELD_DESC = new org.apache.thrift.protocol.TField("indexEnd", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentCollectionSearchStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentCollectionSearchTupleSchemeFactory());
  }

  public int pid; // required
  public String projectName; // required
  public String projectNum; // required
  public String cusName; // required
  public int ecoTrade; // required
  public String expireStartDt; // required
  public String expireEndt; // required
  public int overdueStartDay; // required
  public int overdueEndDay; // required
  public String requestStartDt; // required
  public String requestEndDT; // required
  public int reminderStatus; // required
  public String planCollectionUser; // required
  public int acctType; // required
  public String planStartDt; // required
  public String planEndDT; // required
  public String factStartDt; // required
  public String factEndDT; // required
  public String factCollectionUser; // required
  public List<RepaymentCollection> results; // required
  public int rows; // required
  public int page; // required
  public int indexStart; // required
  public int indexEnd; // required
  public int userId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUM((short)3, "projectNum"),
    CUS_NAME((short)4, "cusName"),
    ECO_TRADE((short)5, "ecoTrade"),
    EXPIRE_START_DT((short)6, "expireStartDt"),
    EXPIRE_ENDT((short)7, "expireEndt"),
    OVERDUE_START_DAY((short)8, "overdueStartDay"),
    OVERDUE_END_DAY((short)9, "overdueEndDay"),
    REQUEST_START_DT((short)10, "requestStartDt"),
    REQUEST_END_DT((short)11, "requestEndDT"),
    REMINDER_STATUS((short)12, "reminderStatus"),
    PLAN_COLLECTION_USER((short)13, "planCollectionUser"),
    ACCT_TYPE((short)14, "acctType"),
    PLAN_START_DT((short)15, "planStartDt"),
    PLAN_END_DT((short)16, "planEndDT"),
    FACT_START_DT((short)17, "factStartDt"),
    FACT_END_DT((short)18, "factEndDT"),
    FACT_COLLECTION_USER((short)19, "factCollectionUser"),
    RESULTS((short)20, "results"),
    ROWS((short)21, "rows"),
    PAGE((short)22, "page"),
    INDEX_START((short)23, "indexStart"),
    INDEX_END((short)24, "indexEnd"),
    USER_ID((short)25, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUM
          return PROJECT_NUM;
        case 4: // CUS_NAME
          return CUS_NAME;
        case 5: // ECO_TRADE
          return ECO_TRADE;
        case 6: // EXPIRE_START_DT
          return EXPIRE_START_DT;
        case 7: // EXPIRE_ENDT
          return EXPIRE_ENDT;
        case 8: // OVERDUE_START_DAY
          return OVERDUE_START_DAY;
        case 9: // OVERDUE_END_DAY
          return OVERDUE_END_DAY;
        case 10: // REQUEST_START_DT
          return REQUEST_START_DT;
        case 11: // REQUEST_END_DT
          return REQUEST_END_DT;
        case 12: // REMINDER_STATUS
          return REMINDER_STATUS;
        case 13: // PLAN_COLLECTION_USER
          return PLAN_COLLECTION_USER;
        case 14: // ACCT_TYPE
          return ACCT_TYPE;
        case 15: // PLAN_START_DT
          return PLAN_START_DT;
        case 16: // PLAN_END_DT
          return PLAN_END_DT;
        case 17: // FACT_START_DT
          return FACT_START_DT;
        case 18: // FACT_END_DT
          return FACT_END_DT;
        case 19: // FACT_COLLECTION_USER
          return FACT_COLLECTION_USER;
        case 20: // RESULTS
          return RESULTS;
        case 21: // ROWS
          return ROWS;
        case 22: // PAGE
          return PAGE;
        case 23: // INDEX_START
          return INDEX_START;
        case 24: // INDEX_END
          return INDEX_END;
        case 25: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ECOTRADE_ISSET_ID = 1;
  private static final int __OVERDUESTARTDAY_ISSET_ID = 2;
  private static final int __OVERDUEENDDAY_ISSET_ID = 3;
  private static final int __REMINDERSTATUS_ISSET_ID = 4;
  private static final int __ACCTTYPE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __INDEXSTART_ISSET_ID = 8;
  private static final int __INDEXEND_ISSET_ID = 9;
  private static final int __USERID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("projectNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPIRE_START_DT, new org.apache.thrift.meta_data.FieldMetaData("expireStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_ENDT, new org.apache.thrift.meta_data.FieldMetaData("expireEndt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_START_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueStartDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_END_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueEndDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_START_DT, new org.apache.thrift.meta_data.FieldMetaData("requestStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_END_DT, new org.apache.thrift.meta_data.FieldMetaData("requestEndDT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMINDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reminderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_COLLECTION_USER, new org.apache.thrift.meta_data.FieldMetaData("planCollectionUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_START_DT, new org.apache.thrift.meta_data.FieldMetaData("planStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_END_DT, new org.apache.thrift.meta_data.FieldMetaData("planEndDT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACT_START_DT, new org.apache.thrift.meta_data.FieldMetaData("factStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACT_END_DT, new org.apache.thrift.meta_data.FieldMetaData("factEndDT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACT_COLLECTION_USER, new org.apache.thrift.meta_data.FieldMetaData("factCollectionUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentCollection.class))));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX_START, new org.apache.thrift.meta_data.FieldMetaData("indexStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX_END, new org.apache.thrift.meta_data.FieldMetaData("indexEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentCollectionSearch.class, metaDataMap);
  }

  public RepaymentCollectionSearch() {
  }

  public RepaymentCollectionSearch(
    int pid,
    String projectName,
    String projectNum,
    String cusName,
    int ecoTrade,
    String expireStartDt,
    String expireEndt,
    int overdueStartDay,
    int overdueEndDay,
    String requestStartDt,
    String requestEndDT,
    int reminderStatus,
    String planCollectionUser,
    int acctType,
    String planStartDt,
    String planEndDT,
    String factStartDt,
    String factEndDT,
    String factCollectionUser,
    List<RepaymentCollection> results,
    int rows,
    int page,
    int indexStart,
    int indexEnd,
    int userId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectName = projectName;
    this.projectNum = projectNum;
    this.cusName = cusName;
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    this.expireStartDt = expireStartDt;
    this.expireEndt = expireEndt;
    this.overdueStartDay = overdueStartDay;
    setOverdueStartDayIsSet(true);
    this.overdueEndDay = overdueEndDay;
    setOverdueEndDayIsSet(true);
    this.requestStartDt = requestStartDt;
    this.requestEndDT = requestEndDT;
    this.reminderStatus = reminderStatus;
    setReminderStatusIsSet(true);
    this.planCollectionUser = planCollectionUser;
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    this.planStartDt = planStartDt;
    this.planEndDT = planEndDT;
    this.factStartDt = factStartDt;
    this.factEndDT = factEndDT;
    this.factCollectionUser = factCollectionUser;
    this.results = results;
    this.rows = rows;
    setRowsIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.indexStart = indexStart;
    setIndexStartIsSet(true);
    this.indexEnd = indexEnd;
    setIndexEndIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentCollectionSearch(RepaymentCollectionSearch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNum()) {
      this.projectNum = other.projectNum;
    }
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    this.ecoTrade = other.ecoTrade;
    if (other.isSetExpireStartDt()) {
      this.expireStartDt = other.expireStartDt;
    }
    if (other.isSetExpireEndt()) {
      this.expireEndt = other.expireEndt;
    }
    this.overdueStartDay = other.overdueStartDay;
    this.overdueEndDay = other.overdueEndDay;
    if (other.isSetRequestStartDt()) {
      this.requestStartDt = other.requestStartDt;
    }
    if (other.isSetRequestEndDT()) {
      this.requestEndDT = other.requestEndDT;
    }
    this.reminderStatus = other.reminderStatus;
    if (other.isSetPlanCollectionUser()) {
      this.planCollectionUser = other.planCollectionUser;
    }
    this.acctType = other.acctType;
    if (other.isSetPlanStartDt()) {
      this.planStartDt = other.planStartDt;
    }
    if (other.isSetPlanEndDT()) {
      this.planEndDT = other.planEndDT;
    }
    if (other.isSetFactStartDt()) {
      this.factStartDt = other.factStartDt;
    }
    if (other.isSetFactEndDT()) {
      this.factEndDT = other.factEndDT;
    }
    if (other.isSetFactCollectionUser()) {
      this.factCollectionUser = other.factCollectionUser;
    }
    if (other.isSetResults()) {
      List<RepaymentCollection> __this__results = new ArrayList<RepaymentCollection>(other.results.size());
      for (RepaymentCollection other_element : other.results) {
        __this__results.add(new RepaymentCollection(other_element));
      }
      this.results = __this__results;
    }
    this.rows = other.rows;
    this.page = other.page;
    this.indexStart = other.indexStart;
    this.indexEnd = other.indexEnd;
    this.userId = other.userId;
  }

  public RepaymentCollectionSearch deepCopy() {
    return new RepaymentCollectionSearch(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.projectName = null;
    this.projectNum = null;
    this.cusName = null;
    setEcoTradeIsSet(false);
    this.ecoTrade = 0;
    this.expireStartDt = null;
    this.expireEndt = null;
    setOverdueStartDayIsSet(false);
    this.overdueStartDay = 0;
    setOverdueEndDayIsSet(false);
    this.overdueEndDay = 0;
    this.requestStartDt = null;
    this.requestEndDT = null;
    setReminderStatusIsSet(false);
    this.reminderStatus = 0;
    this.planCollectionUser = null;
    setAcctTypeIsSet(false);
    this.acctType = 0;
    this.planStartDt = null;
    this.planEndDT = null;
    this.factStartDt = null;
    this.factEndDT = null;
    this.factCollectionUser = null;
    this.results = null;
    setRowsIsSet(false);
    this.rows = 0;
    setPageIsSet(false);
    this.page = 0;
    setIndexStartIsSet(false);
    this.indexStart = 0;
    setIndexEndIsSet(false);
    this.indexEnd = 0;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public RepaymentCollectionSearch setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RepaymentCollectionSearch setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNum() {
    return this.projectNum;
  }

  public RepaymentCollectionSearch setProjectNum(String projectNum) {
    this.projectNum = projectNum;
    return this;
  }

  public void unsetProjectNum() {
    this.projectNum = null;
  }

  /** Returns true if field projectNum is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNum() {
    return this.projectNum != null;
  }

  public void setProjectNumIsSet(boolean value) {
    if (!value) {
      this.projectNum = null;
    }
  }

  public String getCusName() {
    return this.cusName;
  }

  public RepaymentCollectionSearch setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public int getEcoTrade() {
    return this.ecoTrade;
  }

  public RepaymentCollectionSearch setEcoTrade(int ecoTrade) {
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    return this;
  }

  public void unsetEcoTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  public void setEcoTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECOTRADE_ISSET_ID, value);
  }

  public String getExpireStartDt() {
    return this.expireStartDt;
  }

  public RepaymentCollectionSearch setExpireStartDt(String expireStartDt) {
    this.expireStartDt = expireStartDt;
    return this;
  }

  public void unsetExpireStartDt() {
    this.expireStartDt = null;
  }

  /** Returns true if field expireStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireStartDt() {
    return this.expireStartDt != null;
  }

  public void setExpireStartDtIsSet(boolean value) {
    if (!value) {
      this.expireStartDt = null;
    }
  }

  public String getExpireEndt() {
    return this.expireEndt;
  }

  public RepaymentCollectionSearch setExpireEndt(String expireEndt) {
    this.expireEndt = expireEndt;
    return this;
  }

  public void unsetExpireEndt() {
    this.expireEndt = null;
  }

  /** Returns true if field expireEndt is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireEndt() {
    return this.expireEndt != null;
  }

  public void setExpireEndtIsSet(boolean value) {
    if (!value) {
      this.expireEndt = null;
    }
  }

  public int getOverdueStartDay() {
    return this.overdueStartDay;
  }

  public RepaymentCollectionSearch setOverdueStartDay(int overdueStartDay) {
    this.overdueStartDay = overdueStartDay;
    setOverdueStartDayIsSet(true);
    return this;
  }

  public void unsetOverdueStartDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUESTARTDAY_ISSET_ID);
  }

  /** Returns true if field overdueStartDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueStartDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUESTARTDAY_ISSET_ID);
  }

  public void setOverdueStartDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUESTARTDAY_ISSET_ID, value);
  }

  public int getOverdueEndDay() {
    return this.overdueEndDay;
  }

  public RepaymentCollectionSearch setOverdueEndDay(int overdueEndDay) {
    this.overdueEndDay = overdueEndDay;
    setOverdueEndDayIsSet(true);
    return this;
  }

  public void unsetOverdueEndDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEENDDAY_ISSET_ID);
  }

  /** Returns true if field overdueEndDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueEndDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEENDDAY_ISSET_ID);
  }

  public void setOverdueEndDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEENDDAY_ISSET_ID, value);
  }

  public String getRequestStartDt() {
    return this.requestStartDt;
  }

  public RepaymentCollectionSearch setRequestStartDt(String requestStartDt) {
    this.requestStartDt = requestStartDt;
    return this;
  }

  public void unsetRequestStartDt() {
    this.requestStartDt = null;
  }

  /** Returns true if field requestStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStartDt() {
    return this.requestStartDt != null;
  }

  public void setRequestStartDtIsSet(boolean value) {
    if (!value) {
      this.requestStartDt = null;
    }
  }

  public String getRequestEndDT() {
    return this.requestEndDT;
  }

  public RepaymentCollectionSearch setRequestEndDT(String requestEndDT) {
    this.requestEndDT = requestEndDT;
    return this;
  }

  public void unsetRequestEndDT() {
    this.requestEndDT = null;
  }

  /** Returns true if field requestEndDT is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestEndDT() {
    return this.requestEndDT != null;
  }

  public void setRequestEndDTIsSet(boolean value) {
    if (!value) {
      this.requestEndDT = null;
    }
  }

  public int getReminderStatus() {
    return this.reminderStatus;
  }

  public RepaymentCollectionSearch setReminderStatus(int reminderStatus) {
    this.reminderStatus = reminderStatus;
    setReminderStatusIsSet(true);
    return this;
  }

  public void unsetReminderStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMINDERSTATUS_ISSET_ID);
  }

  /** Returns true if field reminderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REMINDERSTATUS_ISSET_ID);
  }

  public void setReminderStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMINDERSTATUS_ISSET_ID, value);
  }

  public String getPlanCollectionUser() {
    return this.planCollectionUser;
  }

  public RepaymentCollectionSearch setPlanCollectionUser(String planCollectionUser) {
    this.planCollectionUser = planCollectionUser;
    return this;
  }

  public void unsetPlanCollectionUser() {
    this.planCollectionUser = null;
  }

  /** Returns true if field planCollectionUser is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCollectionUser() {
    return this.planCollectionUser != null;
  }

  public void setPlanCollectionUserIsSet(boolean value) {
    if (!value) {
      this.planCollectionUser = null;
    }
  }

  public int getAcctType() {
    return this.acctType;
  }

  public RepaymentCollectionSearch setAcctType(int acctType) {
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    return this;
  }

  public void unsetAcctType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  public void setAcctTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTTYPE_ISSET_ID, value);
  }

  public String getPlanStartDt() {
    return this.planStartDt;
  }

  public RepaymentCollectionSearch setPlanStartDt(String planStartDt) {
    this.planStartDt = planStartDt;
    return this;
  }

  public void unsetPlanStartDt() {
    this.planStartDt = null;
  }

  /** Returns true if field planStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanStartDt() {
    return this.planStartDt != null;
  }

  public void setPlanStartDtIsSet(boolean value) {
    if (!value) {
      this.planStartDt = null;
    }
  }

  public String getPlanEndDT() {
    return this.planEndDT;
  }

  public RepaymentCollectionSearch setPlanEndDT(String planEndDT) {
    this.planEndDT = planEndDT;
    return this;
  }

  public void unsetPlanEndDT() {
    this.planEndDT = null;
  }

  /** Returns true if field planEndDT is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanEndDT() {
    return this.planEndDT != null;
  }

  public void setPlanEndDTIsSet(boolean value) {
    if (!value) {
      this.planEndDT = null;
    }
  }

  public String getFactStartDt() {
    return this.factStartDt;
  }

  public RepaymentCollectionSearch setFactStartDt(String factStartDt) {
    this.factStartDt = factStartDt;
    return this;
  }

  public void unsetFactStartDt() {
    this.factStartDt = null;
  }

  /** Returns true if field factStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetFactStartDt() {
    return this.factStartDt != null;
  }

  public void setFactStartDtIsSet(boolean value) {
    if (!value) {
      this.factStartDt = null;
    }
  }

  public String getFactEndDT() {
    return this.factEndDT;
  }

  public RepaymentCollectionSearch setFactEndDT(String factEndDT) {
    this.factEndDT = factEndDT;
    return this;
  }

  public void unsetFactEndDT() {
    this.factEndDT = null;
  }

  /** Returns true if field factEndDT is set (has been assigned a value) and false otherwise */
  public boolean isSetFactEndDT() {
    return this.factEndDT != null;
  }

  public void setFactEndDTIsSet(boolean value) {
    if (!value) {
      this.factEndDT = null;
    }
  }

  public String getFactCollectionUser() {
    return this.factCollectionUser;
  }

  public RepaymentCollectionSearch setFactCollectionUser(String factCollectionUser) {
    this.factCollectionUser = factCollectionUser;
    return this;
  }

  public void unsetFactCollectionUser() {
    this.factCollectionUser = null;
  }

  /** Returns true if field factCollectionUser is set (has been assigned a value) and false otherwise */
  public boolean isSetFactCollectionUser() {
    return this.factCollectionUser != null;
  }

  public void setFactCollectionUserIsSet(boolean value) {
    if (!value) {
      this.factCollectionUser = null;
    }
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<RepaymentCollection> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(RepaymentCollection elem) {
    if (this.results == null) {
      this.results = new ArrayList<RepaymentCollection>();
    }
    this.results.add(elem);
  }

  public List<RepaymentCollection> getResults() {
    return this.results;
  }

  public RepaymentCollectionSearch setResults(List<RepaymentCollection> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public int getRows() {
    return this.rows;
  }

  public RepaymentCollectionSearch setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public RepaymentCollectionSearch setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getIndexStart() {
    return this.indexStart;
  }

  public RepaymentCollectionSearch setIndexStart(int indexStart) {
    this.indexStart = indexStart;
    setIndexStartIsSet(true);
    return this;
  }

  public void unsetIndexStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEXSTART_ISSET_ID);
  }

  /** Returns true if field indexStart is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexStart() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEXSTART_ISSET_ID);
  }

  public void setIndexStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEXSTART_ISSET_ID, value);
  }

  public int getIndexEnd() {
    return this.indexEnd;
  }

  public RepaymentCollectionSearch setIndexEnd(int indexEnd) {
    this.indexEnd = indexEnd;
    setIndexEndIsSet(true);
    return this;
  }

  public void unsetIndexEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEXEND_ISSET_ID);
  }

  /** Returns true if field indexEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEXEND_ISSET_ID);
  }

  public void setIndexEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEXEND_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public RepaymentCollectionSearch setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUM:
      if (value == null) {
        unsetProjectNum();
      } else {
        setProjectNum((String)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((Integer)value);
      }
      break;

    case EXPIRE_START_DT:
      if (value == null) {
        unsetExpireStartDt();
      } else {
        setExpireStartDt((String)value);
      }
      break;

    case EXPIRE_ENDT:
      if (value == null) {
        unsetExpireEndt();
      } else {
        setExpireEndt((String)value);
      }
      break;

    case OVERDUE_START_DAY:
      if (value == null) {
        unsetOverdueStartDay();
      } else {
        setOverdueStartDay((Integer)value);
      }
      break;

    case OVERDUE_END_DAY:
      if (value == null) {
        unsetOverdueEndDay();
      } else {
        setOverdueEndDay((Integer)value);
      }
      break;

    case REQUEST_START_DT:
      if (value == null) {
        unsetRequestStartDt();
      } else {
        setRequestStartDt((String)value);
      }
      break;

    case REQUEST_END_DT:
      if (value == null) {
        unsetRequestEndDT();
      } else {
        setRequestEndDT((String)value);
      }
      break;

    case REMINDER_STATUS:
      if (value == null) {
        unsetReminderStatus();
      } else {
        setReminderStatus((Integer)value);
      }
      break;

    case PLAN_COLLECTION_USER:
      if (value == null) {
        unsetPlanCollectionUser();
      } else {
        setPlanCollectionUser((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((Integer)value);
      }
      break;

    case PLAN_START_DT:
      if (value == null) {
        unsetPlanStartDt();
      } else {
        setPlanStartDt((String)value);
      }
      break;

    case PLAN_END_DT:
      if (value == null) {
        unsetPlanEndDT();
      } else {
        setPlanEndDT((String)value);
      }
      break;

    case FACT_START_DT:
      if (value == null) {
        unsetFactStartDt();
      } else {
        setFactStartDt((String)value);
      }
      break;

    case FACT_END_DT:
      if (value == null) {
        unsetFactEndDT();
      } else {
        setFactEndDT((String)value);
      }
      break;

    case FACT_COLLECTION_USER:
      if (value == null) {
        unsetFactCollectionUser();
      } else {
        setFactCollectionUser((String)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<RepaymentCollection>)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case INDEX_START:
      if (value == null) {
        unsetIndexStart();
      } else {
        setIndexStart((Integer)value);
      }
      break;

    case INDEX_END:
      if (value == null) {
        unsetIndexEnd();
      } else {
        setIndexEnd((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUM:
      return getProjectNum();

    case CUS_NAME:
      return getCusName();

    case ECO_TRADE:
      return Integer.valueOf(getEcoTrade());

    case EXPIRE_START_DT:
      return getExpireStartDt();

    case EXPIRE_ENDT:
      return getExpireEndt();

    case OVERDUE_START_DAY:
      return Integer.valueOf(getOverdueStartDay());

    case OVERDUE_END_DAY:
      return Integer.valueOf(getOverdueEndDay());

    case REQUEST_START_DT:
      return getRequestStartDt();

    case REQUEST_END_DT:
      return getRequestEndDT();

    case REMINDER_STATUS:
      return Integer.valueOf(getReminderStatus());

    case PLAN_COLLECTION_USER:
      return getPlanCollectionUser();

    case ACCT_TYPE:
      return Integer.valueOf(getAcctType());

    case PLAN_START_DT:
      return getPlanStartDt();

    case PLAN_END_DT:
      return getPlanEndDT();

    case FACT_START_DT:
      return getFactStartDt();

    case FACT_END_DT:
      return getFactEndDT();

    case FACT_COLLECTION_USER:
      return getFactCollectionUser();

    case RESULTS:
      return getResults();

    case ROWS:
      return Integer.valueOf(getRows());

    case PAGE:
      return Integer.valueOf(getPage());

    case INDEX_START:
      return Integer.valueOf(getIndexStart());

    case INDEX_END:
      return Integer.valueOf(getIndexEnd());

    case USER_ID:
      return Integer.valueOf(getUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUM:
      return isSetProjectNum();
    case CUS_NAME:
      return isSetCusName();
    case ECO_TRADE:
      return isSetEcoTrade();
    case EXPIRE_START_DT:
      return isSetExpireStartDt();
    case EXPIRE_ENDT:
      return isSetExpireEndt();
    case OVERDUE_START_DAY:
      return isSetOverdueStartDay();
    case OVERDUE_END_DAY:
      return isSetOverdueEndDay();
    case REQUEST_START_DT:
      return isSetRequestStartDt();
    case REQUEST_END_DT:
      return isSetRequestEndDT();
    case REMINDER_STATUS:
      return isSetReminderStatus();
    case PLAN_COLLECTION_USER:
      return isSetPlanCollectionUser();
    case ACCT_TYPE:
      return isSetAcctType();
    case PLAN_START_DT:
      return isSetPlanStartDt();
    case PLAN_END_DT:
      return isSetPlanEndDT();
    case FACT_START_DT:
      return isSetFactStartDt();
    case FACT_END_DT:
      return isSetFactEndDT();
    case FACT_COLLECTION_USER:
      return isSetFactCollectionUser();
    case RESULTS:
      return isSetResults();
    case ROWS:
      return isSetRows();
    case PAGE:
      return isSetPage();
    case INDEX_START:
      return isSetIndexStart();
    case INDEX_END:
      return isSetIndexEnd();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentCollectionSearch)
      return this.equals((RepaymentCollectionSearch)that);
    return false;
  }

  public boolean equals(RepaymentCollectionSearch that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNum = true && this.isSetProjectNum();
    boolean that_present_projectNum = true && that.isSetProjectNum();
    if (this_present_projectNum || that_present_projectNum) {
      if (!(this_present_projectNum && that_present_projectNum))
        return false;
      if (!this.projectNum.equals(that.projectNum))
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_ecoTrade = true;
    boolean that_present_ecoTrade = true;
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (this.ecoTrade != that.ecoTrade)
        return false;
    }

    boolean this_present_expireStartDt = true && this.isSetExpireStartDt();
    boolean that_present_expireStartDt = true && that.isSetExpireStartDt();
    if (this_present_expireStartDt || that_present_expireStartDt) {
      if (!(this_present_expireStartDt && that_present_expireStartDt))
        return false;
      if (!this.expireStartDt.equals(that.expireStartDt))
        return false;
    }

    boolean this_present_expireEndt = true && this.isSetExpireEndt();
    boolean that_present_expireEndt = true && that.isSetExpireEndt();
    if (this_present_expireEndt || that_present_expireEndt) {
      if (!(this_present_expireEndt && that_present_expireEndt))
        return false;
      if (!this.expireEndt.equals(that.expireEndt))
        return false;
    }

    boolean this_present_overdueStartDay = true;
    boolean that_present_overdueStartDay = true;
    if (this_present_overdueStartDay || that_present_overdueStartDay) {
      if (!(this_present_overdueStartDay && that_present_overdueStartDay))
        return false;
      if (this.overdueStartDay != that.overdueStartDay)
        return false;
    }

    boolean this_present_overdueEndDay = true;
    boolean that_present_overdueEndDay = true;
    if (this_present_overdueEndDay || that_present_overdueEndDay) {
      if (!(this_present_overdueEndDay && that_present_overdueEndDay))
        return false;
      if (this.overdueEndDay != that.overdueEndDay)
        return false;
    }

    boolean this_present_requestStartDt = true && this.isSetRequestStartDt();
    boolean that_present_requestStartDt = true && that.isSetRequestStartDt();
    if (this_present_requestStartDt || that_present_requestStartDt) {
      if (!(this_present_requestStartDt && that_present_requestStartDt))
        return false;
      if (!this.requestStartDt.equals(that.requestStartDt))
        return false;
    }

    boolean this_present_requestEndDT = true && this.isSetRequestEndDT();
    boolean that_present_requestEndDT = true && that.isSetRequestEndDT();
    if (this_present_requestEndDT || that_present_requestEndDT) {
      if (!(this_present_requestEndDT && that_present_requestEndDT))
        return false;
      if (!this.requestEndDT.equals(that.requestEndDT))
        return false;
    }

    boolean this_present_reminderStatus = true;
    boolean that_present_reminderStatus = true;
    if (this_present_reminderStatus || that_present_reminderStatus) {
      if (!(this_present_reminderStatus && that_present_reminderStatus))
        return false;
      if (this.reminderStatus != that.reminderStatus)
        return false;
    }

    boolean this_present_planCollectionUser = true && this.isSetPlanCollectionUser();
    boolean that_present_planCollectionUser = true && that.isSetPlanCollectionUser();
    if (this_present_planCollectionUser || that_present_planCollectionUser) {
      if (!(this_present_planCollectionUser && that_present_planCollectionUser))
        return false;
      if (!this.planCollectionUser.equals(that.planCollectionUser))
        return false;
    }

    boolean this_present_acctType = true;
    boolean that_present_acctType = true;
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (this.acctType != that.acctType)
        return false;
    }

    boolean this_present_planStartDt = true && this.isSetPlanStartDt();
    boolean that_present_planStartDt = true && that.isSetPlanStartDt();
    if (this_present_planStartDt || that_present_planStartDt) {
      if (!(this_present_planStartDt && that_present_planStartDt))
        return false;
      if (!this.planStartDt.equals(that.planStartDt))
        return false;
    }

    boolean this_present_planEndDT = true && this.isSetPlanEndDT();
    boolean that_present_planEndDT = true && that.isSetPlanEndDT();
    if (this_present_planEndDT || that_present_planEndDT) {
      if (!(this_present_planEndDT && that_present_planEndDT))
        return false;
      if (!this.planEndDT.equals(that.planEndDT))
        return false;
    }

    boolean this_present_factStartDt = true && this.isSetFactStartDt();
    boolean that_present_factStartDt = true && that.isSetFactStartDt();
    if (this_present_factStartDt || that_present_factStartDt) {
      if (!(this_present_factStartDt && that_present_factStartDt))
        return false;
      if (!this.factStartDt.equals(that.factStartDt))
        return false;
    }

    boolean this_present_factEndDT = true && this.isSetFactEndDT();
    boolean that_present_factEndDT = true && that.isSetFactEndDT();
    if (this_present_factEndDT || that_present_factEndDT) {
      if (!(this_present_factEndDT && that_present_factEndDT))
        return false;
      if (!this.factEndDT.equals(that.factEndDT))
        return false;
    }

    boolean this_present_factCollectionUser = true && this.isSetFactCollectionUser();
    boolean that_present_factCollectionUser = true && that.isSetFactCollectionUser();
    if (this_present_factCollectionUser || that_present_factCollectionUser) {
      if (!(this_present_factCollectionUser && that_present_factCollectionUser))
        return false;
      if (!this.factCollectionUser.equals(that.factCollectionUser))
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_indexStart = true;
    boolean that_present_indexStart = true;
    if (this_present_indexStart || that_present_indexStart) {
      if (!(this_present_indexStart && that_present_indexStart))
        return false;
      if (this.indexStart != that.indexStart)
        return false;
    }

    boolean this_present_indexEnd = true;
    boolean that_present_indexEnd = true;
    if (this_present_indexEnd || that_present_indexEnd) {
      if (!(this_present_indexEnd && that_present_indexEnd))
        return false;
      if (this.indexEnd != that.indexEnd)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNum = true && (isSetProjectNum());
    list.add(present_projectNum);
    if (present_projectNum)
      list.add(projectNum);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_ecoTrade = true;
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_expireStartDt = true && (isSetExpireStartDt());
    list.add(present_expireStartDt);
    if (present_expireStartDt)
      list.add(expireStartDt);

    boolean present_expireEndt = true && (isSetExpireEndt());
    list.add(present_expireEndt);
    if (present_expireEndt)
      list.add(expireEndt);

    boolean present_overdueStartDay = true;
    list.add(present_overdueStartDay);
    if (present_overdueStartDay)
      list.add(overdueStartDay);

    boolean present_overdueEndDay = true;
    list.add(present_overdueEndDay);
    if (present_overdueEndDay)
      list.add(overdueEndDay);

    boolean present_requestStartDt = true && (isSetRequestStartDt());
    list.add(present_requestStartDt);
    if (present_requestStartDt)
      list.add(requestStartDt);

    boolean present_requestEndDT = true && (isSetRequestEndDT());
    list.add(present_requestEndDT);
    if (present_requestEndDT)
      list.add(requestEndDT);

    boolean present_reminderStatus = true;
    list.add(present_reminderStatus);
    if (present_reminderStatus)
      list.add(reminderStatus);

    boolean present_planCollectionUser = true && (isSetPlanCollectionUser());
    list.add(present_planCollectionUser);
    if (present_planCollectionUser)
      list.add(planCollectionUser);

    boolean present_acctType = true;
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_planStartDt = true && (isSetPlanStartDt());
    list.add(present_planStartDt);
    if (present_planStartDt)
      list.add(planStartDt);

    boolean present_planEndDT = true && (isSetPlanEndDT());
    list.add(present_planEndDT);
    if (present_planEndDT)
      list.add(planEndDT);

    boolean present_factStartDt = true && (isSetFactStartDt());
    list.add(present_factStartDt);
    if (present_factStartDt)
      list.add(factStartDt);

    boolean present_factEndDT = true && (isSetFactEndDT());
    list.add(present_factEndDT);
    if (present_factEndDT)
      list.add(factEndDT);

    boolean present_factCollectionUser = true && (isSetFactCollectionUser());
    list.add(present_factCollectionUser);
    if (present_factCollectionUser)
      list.add(factCollectionUser);

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_indexStart = true;
    list.add(present_indexStart);
    if (present_indexStart)
      list.add(indexStart);

    boolean present_indexEnd = true;
    list.add(present_indexEnd);
    if (present_indexEnd)
      list.add(indexEnd);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentCollectionSearch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNum()).compareTo(other.isSetProjectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNum, other.projectNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireStartDt()).compareTo(other.isSetExpireStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireStartDt, other.expireStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireEndt()).compareTo(other.isSetExpireEndt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireEndt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireEndt, other.expireEndt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueStartDay()).compareTo(other.isSetOverdueStartDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueStartDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueStartDay, other.overdueStartDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueEndDay()).compareTo(other.isSetOverdueEndDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueEndDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueEndDay, other.overdueEndDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStartDt()).compareTo(other.isSetRequestStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStartDt, other.requestStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestEndDT()).compareTo(other.isSetRequestEndDT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestEndDT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestEndDT, other.requestEndDT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderStatus()).compareTo(other.isSetReminderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderStatus, other.reminderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCollectionUser()).compareTo(other.isSetPlanCollectionUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCollectionUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCollectionUser, other.planCollectionUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanStartDt()).compareTo(other.isSetPlanStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planStartDt, other.planStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanEndDT()).compareTo(other.isSetPlanEndDT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanEndDT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planEndDT, other.planEndDT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFactStartDt()).compareTo(other.isSetFactStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFactStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factStartDt, other.factStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFactEndDT()).compareTo(other.isSetFactEndDT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFactEndDT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factEndDT, other.factEndDT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFactCollectionUser()).compareTo(other.isSetFactCollectionUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFactCollectionUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.factCollectionUser, other.factCollectionUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexStart()).compareTo(other.isSetIndexStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexStart, other.indexStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexEnd()).compareTo(other.isSetIndexEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexEnd, other.indexEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentCollectionSearch(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNum:");
    if (this.projectNum == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    sb.append(this.ecoTrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireStartDt:");
    if (this.expireStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.expireStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireEndt:");
    if (this.expireEndt == null) {
      sb.append("null");
    } else {
      sb.append(this.expireEndt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueStartDay:");
    sb.append(this.overdueStartDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueEndDay:");
    sb.append(this.overdueEndDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStartDt:");
    if (this.requestStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.requestStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestEndDT:");
    if (this.requestEndDT == null) {
      sb.append("null");
    } else {
      sb.append(this.requestEndDT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderStatus:");
    sb.append(this.reminderStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCollectionUser:");
    if (this.planCollectionUser == null) {
      sb.append("null");
    } else {
      sb.append(this.planCollectionUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    sb.append(this.acctType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planStartDt:");
    if (this.planStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planEndDT:");
    if (this.planEndDT == null) {
      sb.append("null");
    } else {
      sb.append(this.planEndDT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("factStartDt:");
    if (this.factStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.factStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("factEndDT:");
    if (this.factEndDT == null) {
      sb.append("null");
    } else {
      sb.append(this.factEndDT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("factCollectionUser:");
    if (this.factCollectionUser == null) {
      sb.append("null");
    } else {
      sb.append(this.factCollectionUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexStart:");
    sb.append(this.indexStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexEnd:");
    sb.append(this.indexEnd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentCollectionSearchStandardSchemeFactory implements SchemeFactory {
    public RepaymentCollectionSearchStandardScheme getScheme() {
      return new RepaymentCollectionSearchStandardScheme();
    }
  }

  private static class RepaymentCollectionSearchStandardScheme extends StandardScheme<RepaymentCollectionSearch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentCollectionSearch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNum = iprot.readString();
              struct.setProjectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecoTrade = iprot.readI32();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPIRE_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expireStartDt = iprot.readString();
              struct.setExpireStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPIRE_ENDT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expireEndt = iprot.readString();
              struct.setExpireEndtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OVERDUE_START_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueStartDay = iprot.readI32();
              struct.setOverdueStartDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OVERDUE_END_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueEndDay = iprot.readI32();
              struct.setOverdueEndDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQUEST_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestStartDt = iprot.readString();
              struct.setRequestStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQUEST_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestEndDT = iprot.readString();
              struct.setRequestEndDTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REMINDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reminderStatus = iprot.readI32();
              struct.setReminderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAN_COLLECTION_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planCollectionUser = iprot.readString();
              struct.setPlanCollectionUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctType = iprot.readI32();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLAN_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planStartDt = iprot.readString();
              struct.setPlanStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PLAN_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planEndDT = iprot.readString();
              struct.setPlanEndDTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FACT_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.factStartDt = iprot.readString();
              struct.setFactStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FACT_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.factEndDT = iprot.readString();
              struct.setFactEndDTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FACT_COLLECTION_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.factCollectionUser = iprot.readString();
              struct.setFactCollectionUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.results = new ArrayList<RepaymentCollection>(_list32.size);
                RepaymentCollection _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new RepaymentCollection();
                  _elem33.read(iprot);
                  struct.results.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // INDEX_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.indexStart = iprot.readI32();
              struct.setIndexStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // INDEX_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.indexEnd = iprot.readI32();
              struct.setIndexEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentCollectionSearch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNum != null) {
        oprot.writeFieldBegin(PROJECT_NUM_FIELD_DESC);
        oprot.writeString(struct.projectNum);
        oprot.writeFieldEnd();
      }
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
      oprot.writeI32(struct.ecoTrade);
      oprot.writeFieldEnd();
      if (struct.expireStartDt != null) {
        oprot.writeFieldBegin(EXPIRE_START_DT_FIELD_DESC);
        oprot.writeString(struct.expireStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.expireEndt != null) {
        oprot.writeFieldBegin(EXPIRE_ENDT_FIELD_DESC);
        oprot.writeString(struct.expireEndt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_START_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueStartDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_END_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueEndDay);
      oprot.writeFieldEnd();
      if (struct.requestStartDt != null) {
        oprot.writeFieldBegin(REQUEST_START_DT_FIELD_DESC);
        oprot.writeString(struct.requestStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.requestEndDT != null) {
        oprot.writeFieldBegin(REQUEST_END_DT_FIELD_DESC);
        oprot.writeString(struct.requestEndDT);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REMINDER_STATUS_FIELD_DESC);
      oprot.writeI32(struct.reminderStatus);
      oprot.writeFieldEnd();
      if (struct.planCollectionUser != null) {
        oprot.writeFieldBegin(PLAN_COLLECTION_USER_FIELD_DESC);
        oprot.writeString(struct.planCollectionUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.acctType);
      oprot.writeFieldEnd();
      if (struct.planStartDt != null) {
        oprot.writeFieldBegin(PLAN_START_DT_FIELD_DESC);
        oprot.writeString(struct.planStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.planEndDT != null) {
        oprot.writeFieldBegin(PLAN_END_DT_FIELD_DESC);
        oprot.writeString(struct.planEndDT);
        oprot.writeFieldEnd();
      }
      if (struct.factStartDt != null) {
        oprot.writeFieldBegin(FACT_START_DT_FIELD_DESC);
        oprot.writeString(struct.factStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.factEndDT != null) {
        oprot.writeFieldBegin(FACT_END_DT_FIELD_DESC);
        oprot.writeString(struct.factEndDT);
        oprot.writeFieldEnd();
      }
      if (struct.factCollectionUser != null) {
        oprot.writeFieldBegin(FACT_COLLECTION_USER_FIELD_DESC);
        oprot.writeString(struct.factCollectionUser);
        oprot.writeFieldEnd();
      }
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (RepaymentCollection _iter35 : struct.results)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_START_FIELD_DESC);
      oprot.writeI32(struct.indexStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDEX_END_FIELD_DESC);
      oprot.writeI32(struct.indexEnd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentCollectionSearchTupleSchemeFactory implements SchemeFactory {
    public RepaymentCollectionSearchTupleScheme getScheme() {
      return new RepaymentCollectionSearchTupleScheme();
    }
  }

  private static class RepaymentCollectionSearchTupleScheme extends TupleScheme<RepaymentCollectionSearch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentCollectionSearch struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNum()) {
        optionals.set(2);
      }
      if (struct.isSetCusName()) {
        optionals.set(3);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(4);
      }
      if (struct.isSetExpireStartDt()) {
        optionals.set(5);
      }
      if (struct.isSetExpireEndt()) {
        optionals.set(6);
      }
      if (struct.isSetOverdueStartDay()) {
        optionals.set(7);
      }
      if (struct.isSetOverdueEndDay()) {
        optionals.set(8);
      }
      if (struct.isSetRequestStartDt()) {
        optionals.set(9);
      }
      if (struct.isSetRequestEndDT()) {
        optionals.set(10);
      }
      if (struct.isSetReminderStatus()) {
        optionals.set(11);
      }
      if (struct.isSetPlanCollectionUser()) {
        optionals.set(12);
      }
      if (struct.isSetAcctType()) {
        optionals.set(13);
      }
      if (struct.isSetPlanStartDt()) {
        optionals.set(14);
      }
      if (struct.isSetPlanEndDT()) {
        optionals.set(15);
      }
      if (struct.isSetFactStartDt()) {
        optionals.set(16);
      }
      if (struct.isSetFactEndDT()) {
        optionals.set(17);
      }
      if (struct.isSetFactCollectionUser()) {
        optionals.set(18);
      }
      if (struct.isSetResults()) {
        optionals.set(19);
      }
      if (struct.isSetRows()) {
        optionals.set(20);
      }
      if (struct.isSetPage()) {
        optionals.set(21);
      }
      if (struct.isSetIndexStart()) {
        optionals.set(22);
      }
      if (struct.isSetIndexEnd()) {
        optionals.set(23);
      }
      if (struct.isSetUserId()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNum()) {
        oprot.writeString(struct.projectNum);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeI32(struct.ecoTrade);
      }
      if (struct.isSetExpireStartDt()) {
        oprot.writeString(struct.expireStartDt);
      }
      if (struct.isSetExpireEndt()) {
        oprot.writeString(struct.expireEndt);
      }
      if (struct.isSetOverdueStartDay()) {
        oprot.writeI32(struct.overdueStartDay);
      }
      if (struct.isSetOverdueEndDay()) {
        oprot.writeI32(struct.overdueEndDay);
      }
      if (struct.isSetRequestStartDt()) {
        oprot.writeString(struct.requestStartDt);
      }
      if (struct.isSetRequestEndDT()) {
        oprot.writeString(struct.requestEndDT);
      }
      if (struct.isSetReminderStatus()) {
        oprot.writeI32(struct.reminderStatus);
      }
      if (struct.isSetPlanCollectionUser()) {
        oprot.writeString(struct.planCollectionUser);
      }
      if (struct.isSetAcctType()) {
        oprot.writeI32(struct.acctType);
      }
      if (struct.isSetPlanStartDt()) {
        oprot.writeString(struct.planStartDt);
      }
      if (struct.isSetPlanEndDT()) {
        oprot.writeString(struct.planEndDT);
      }
      if (struct.isSetFactStartDt()) {
        oprot.writeString(struct.factStartDt);
      }
      if (struct.isSetFactEndDT()) {
        oprot.writeString(struct.factEndDT);
      }
      if (struct.isSetFactCollectionUser()) {
        oprot.writeString(struct.factCollectionUser);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (RepaymentCollection _iter36 : struct.results)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetIndexStart()) {
        oprot.writeI32(struct.indexStart);
      }
      if (struct.isSetIndexEnd()) {
        oprot.writeI32(struct.indexEnd);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentCollectionSearch struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNum = iprot.readString();
        struct.setProjectNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ecoTrade = iprot.readI32();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expireStartDt = iprot.readString();
        struct.setExpireStartDtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.expireEndt = iprot.readString();
        struct.setExpireEndtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.overdueStartDay = iprot.readI32();
        struct.setOverdueStartDayIsSet(true);
      }
      if (incoming.get(8)) {
        struct.overdueEndDay = iprot.readI32();
        struct.setOverdueEndDayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.requestStartDt = iprot.readString();
        struct.setRequestStartDtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.requestEndDT = iprot.readString();
        struct.setRequestEndDTIsSet(true);
      }
      if (incoming.get(11)) {
        struct.reminderStatus = iprot.readI32();
        struct.setReminderStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.planCollectionUser = iprot.readString();
        struct.setPlanCollectionUserIsSet(true);
      }
      if (incoming.get(13)) {
        struct.acctType = iprot.readI32();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.planStartDt = iprot.readString();
        struct.setPlanStartDtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.planEndDT = iprot.readString();
        struct.setPlanEndDTIsSet(true);
      }
      if (incoming.get(16)) {
        struct.factStartDt = iprot.readString();
        struct.setFactStartDtIsSet(true);
      }
      if (incoming.get(17)) {
        struct.factEndDT = iprot.readString();
        struct.setFactEndDTIsSet(true);
      }
      if (incoming.get(18)) {
        struct.factCollectionUser = iprot.readString();
        struct.setFactCollectionUserIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<RepaymentCollection>(_list37.size);
          RepaymentCollection _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new RepaymentCollection();
            _elem38.read(iprot);
            struct.results.add(_elem38);
          }
        }
        struct.setResultsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(22)) {
        struct.indexStart = iprot.readI32();
        struct.setIndexStartIsSet(true);
      }
      if (incoming.get(23)) {
        struct.indexEnd = iprot.readI32();
        struct.setIndexEndIsSet(true);
      }
      if (incoming.get(24)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
    }
  }

}


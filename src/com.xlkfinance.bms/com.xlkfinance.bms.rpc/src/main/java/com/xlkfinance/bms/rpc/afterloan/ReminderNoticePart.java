/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class ReminderNoticePart implements org.apache.thrift.TBase<ReminderNoticePart, ReminderNoticePart._Fields>, java.io.Serializable, Cloneable, Comparable<ReminderNoticePart> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReminderNoticePart");

  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHOULD_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField SHOULD_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldDttm", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField A_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aType", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReminderNoticePartStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReminderNoticePartTupleSchemeFactory());
  }

  public String contractNo; // required
  public double shouldAmt; // required
  public String shouldDttm; // required
  public double principal; // required
  public double interest; // required
  public int pid; // required
  public int aType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT_NO((short)1, "contractNo"),
    SHOULD_AMT((short)2, "shouldAmt"),
    SHOULD_DTTM((short)3, "shouldDttm"),
    PRINCIPAL((short)4, "principal"),
    INTEREST((short)5, "interest"),
    PID((short)6, "pid"),
    A_TYPE((short)7, "aType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT_NO
          return CONTRACT_NO;
        case 2: // SHOULD_AMT
          return SHOULD_AMT;
        case 3: // SHOULD_DTTM
          return SHOULD_DTTM;
        case 4: // PRINCIPAL
          return PRINCIPAL;
        case 5: // INTEREST
          return INTEREST;
        case 6: // PID
          return PID;
        case 7: // A_TYPE
          return A_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOULDAMT_ISSET_ID = 0;
  private static final int __PRINCIPAL_ISSET_ID = 1;
  private static final int __INTEREST_ISSET_ID = 2;
  private static final int __PID_ISSET_ID = 3;
  private static final int __ATYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_AMT, new org.apache.thrift.meta_data.FieldMetaData("shouldAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_DTTM, new org.apache.thrift.meta_data.FieldMetaData("shouldDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("principal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReminderNoticePart.class, metaDataMap);
  }

  public ReminderNoticePart() {
  }

  public ReminderNoticePart(
    String contractNo,
    double shouldAmt,
    String shouldDttm,
    double principal,
    double interest,
    int pid,
    int aType)
  {
    this();
    this.contractNo = contractNo;
    this.shouldAmt = shouldAmt;
    setShouldAmtIsSet(true);
    this.shouldDttm = shouldDttm;
    this.principal = principal;
    setPrincipalIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.aType = aType;
    setATypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReminderNoticePart(ReminderNoticePart other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    this.shouldAmt = other.shouldAmt;
    if (other.isSetShouldDttm()) {
      this.shouldDttm = other.shouldDttm;
    }
    this.principal = other.principal;
    this.interest = other.interest;
    this.pid = other.pid;
    this.aType = other.aType;
  }

  public ReminderNoticePart deepCopy() {
    return new ReminderNoticePart(this);
  }

  @Override
  public void clear() {
    this.contractNo = null;
    setShouldAmtIsSet(false);
    this.shouldAmt = 0.0;
    this.shouldDttm = null;
    setPrincipalIsSet(false);
    this.principal = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    setPidIsSet(false);
    this.pid = 0;
    setATypeIsSet(false);
    this.aType = 0;
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public ReminderNoticePart setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  public double getShouldAmt() {
    return this.shouldAmt;
  }

  public ReminderNoticePart setShouldAmt(double shouldAmt) {
    this.shouldAmt = shouldAmt;
    setShouldAmtIsSet(true);
    return this;
  }

  public void unsetShouldAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDAMT_ISSET_ID);
  }

  /** Returns true if field shouldAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDAMT_ISSET_ID);
  }

  public void setShouldAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDAMT_ISSET_ID, value);
  }

  public String getShouldDttm() {
    return this.shouldDttm;
  }

  public ReminderNoticePart setShouldDttm(String shouldDttm) {
    this.shouldDttm = shouldDttm;
    return this;
  }

  public void unsetShouldDttm() {
    this.shouldDttm = null;
  }

  /** Returns true if field shouldDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldDttm() {
    return this.shouldDttm != null;
  }

  public void setShouldDttmIsSet(boolean value) {
    if (!value) {
      this.shouldDttm = null;
    }
  }

  public double getPrincipal() {
    return this.principal;
  }

  public ReminderNoticePart setPrincipal(double principal) {
    this.principal = principal;
    setPrincipalIsSet(true);
    return this;
  }

  public void unsetPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPAL_ISSET_ID);
  }

  /** Returns true if field principal is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPAL_ISSET_ID);
  }

  public void setPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPAL_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public ReminderNoticePart setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public ReminderNoticePart setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getAType() {
    return this.aType;
  }

  public ReminderNoticePart setAType(int aType) {
    this.aType = aType;
    setATypeIsSet(true);
    return this;
  }

  public void unsetAType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATYPE_ISSET_ID);
  }

  /** Returns true if field aType is set (has been assigned a value) and false otherwise */
  public boolean isSetAType() {
    return EncodingUtils.testBit(__isset_bitfield, __ATYPE_ISSET_ID);
  }

  public void setATypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case SHOULD_AMT:
      if (value == null) {
        unsetShouldAmt();
      } else {
        setShouldAmt((Double)value);
      }
      break;

    case SHOULD_DTTM:
      if (value == null) {
        unsetShouldDttm();
      } else {
        setShouldDttm((String)value);
      }
      break;

    case PRINCIPAL:
      if (value == null) {
        unsetPrincipal();
      } else {
        setPrincipal((Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case A_TYPE:
      if (value == null) {
        unsetAType();
      } else {
        setAType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT_NO:
      return getContractNo();

    case SHOULD_AMT:
      return Double.valueOf(getShouldAmt());

    case SHOULD_DTTM:
      return getShouldDttm();

    case PRINCIPAL:
      return Double.valueOf(getPrincipal());

    case INTEREST:
      return Double.valueOf(getInterest());

    case PID:
      return Integer.valueOf(getPid());

    case A_TYPE:
      return Integer.valueOf(getAType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT_NO:
      return isSetContractNo();
    case SHOULD_AMT:
      return isSetShouldAmt();
    case SHOULD_DTTM:
      return isSetShouldDttm();
    case PRINCIPAL:
      return isSetPrincipal();
    case INTEREST:
      return isSetInterest();
    case PID:
      return isSetPid();
    case A_TYPE:
      return isSetAType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReminderNoticePart)
      return this.equals((ReminderNoticePart)that);
    return false;
  }

  public boolean equals(ReminderNoticePart that) {
    if (that == null)
      return false;

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_shouldAmt = true;
    boolean that_present_shouldAmt = true;
    if (this_present_shouldAmt || that_present_shouldAmt) {
      if (!(this_present_shouldAmt && that_present_shouldAmt))
        return false;
      if (this.shouldAmt != that.shouldAmt)
        return false;
    }

    boolean this_present_shouldDttm = true && this.isSetShouldDttm();
    boolean that_present_shouldDttm = true && that.isSetShouldDttm();
    if (this_present_shouldDttm || that_present_shouldDttm) {
      if (!(this_present_shouldDttm && that_present_shouldDttm))
        return false;
      if (!this.shouldDttm.equals(that.shouldDttm))
        return false;
    }

    boolean this_present_principal = true;
    boolean that_present_principal = true;
    if (this_present_principal || that_present_principal) {
      if (!(this_present_principal && that_present_principal))
        return false;
      if (this.principal != that.principal)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_aType = true;
    boolean that_present_aType = true;
    if (this_present_aType || that_present_aType) {
      if (!(this_present_aType && that_present_aType))
        return false;
      if (this.aType != that.aType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_contractNo = true && (isSetContractNo());
    list.add(present_contractNo);
    if (present_contractNo)
      list.add(contractNo);

    boolean present_shouldAmt = true;
    list.add(present_shouldAmt);
    if (present_shouldAmt)
      list.add(shouldAmt);

    boolean present_shouldDttm = true && (isSetShouldDttm());
    list.add(present_shouldDttm);
    if (present_shouldDttm)
      list.add(shouldDttm);

    boolean present_principal = true;
    list.add(present_principal);
    if (present_principal)
      list.add(principal);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_aType = true;
    list.add(present_aType);
    if (present_aType)
      list.add(aType);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReminderNoticePart other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldAmt()).compareTo(other.isSetShouldAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldAmt, other.shouldAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldDttm()).compareTo(other.isSetShouldDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldDttm, other.shouldDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal()).compareTo(other.isSetPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAType()).compareTo(other.isSetAType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aType, other.aType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReminderNoticePart(");
    boolean first = true;

    sb.append("contractNo:");
    if (this.contractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldAmt:");
    sb.append(this.shouldAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldDttm:");
    if (this.shouldDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal:");
    sb.append(this.principal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aType:");
    sb.append(this.aType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReminderNoticePartStandardSchemeFactory implements SchemeFactory {
    public ReminderNoticePartStandardScheme getScheme() {
      return new ReminderNoticePartStandardScheme();
    }
  }

  private static class ReminderNoticePartStandardScheme extends StandardScheme<ReminderNoticePart> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReminderNoticePart struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHOULD_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldAmt = iprot.readDouble();
              struct.setShouldAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOULD_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldDttm = iprot.readString();
              struct.setShouldDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principal = iprot.readDouble();
              struct.setPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // A_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aType = iprot.readI32();
              struct.setATypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReminderNoticePart struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contractNo != null) {
        oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.contractNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOULD_AMT_FIELD_DESC);
      oprot.writeDouble(struct.shouldAmt);
      oprot.writeFieldEnd();
      if (struct.shouldDttm != null) {
        oprot.writeFieldBegin(SHOULD_DTTM_FIELD_DESC);
        oprot.writeString(struct.shouldDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.principal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_TYPE_FIELD_DESC);
      oprot.writeI32(struct.aType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReminderNoticePartTupleSchemeFactory implements SchemeFactory {
    public ReminderNoticePartTupleScheme getScheme() {
      return new ReminderNoticePartTupleScheme();
    }
  }

  private static class ReminderNoticePartTupleScheme extends TupleScheme<ReminderNoticePart> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReminderNoticePart struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContractNo()) {
        optionals.set(0);
      }
      if (struct.isSetShouldAmt()) {
        optionals.set(1);
      }
      if (struct.isSetShouldDttm()) {
        optionals.set(2);
      }
      if (struct.isSetPrincipal()) {
        optionals.set(3);
      }
      if (struct.isSetInterest()) {
        optionals.set(4);
      }
      if (struct.isSetPid()) {
        optionals.set(5);
      }
      if (struct.isSetAType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetShouldAmt()) {
        oprot.writeDouble(struct.shouldAmt);
      }
      if (struct.isSetShouldDttm()) {
        oprot.writeString(struct.shouldDttm);
      }
      if (struct.isSetPrincipal()) {
        oprot.writeDouble(struct.principal);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAType()) {
        oprot.writeI32(struct.aType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReminderNoticePart struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shouldAmt = iprot.readDouble();
        struct.setShouldAmtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shouldDttm = iprot.readString();
        struct.setShouldDttmIsSet(true);
      }
      if (incoming.get(3)) {
        struct.principal = iprot.readDouble();
        struct.setPrincipalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.aType = iprot.readI32();
        struct.setATypeIsSet(true);
      }
    }
  }

}


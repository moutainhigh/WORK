/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class RepaymentDetailIndexDTO implements org.apache.thrift.TBase<RepaymentDetailIndexDTO, RepaymentDetailIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentDetailIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentDetailIndexDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayDt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField THIS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("thisStatus", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PLAN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("planType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SHOULD_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PRODUCT_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("productInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REBATE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("rebateFee", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField MONTH_MAID_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthMaidRate", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ACTUAL_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField ACTUAL_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("actualInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField ACTUAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actualTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ACTUAL_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualRepayDt", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDays", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField ACTUAL_OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("actualOverdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField SHOULD_OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOverdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField ACTUAL_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField ACTUAL_OVERDUE_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualOverdueDt", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("principalBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField SHOULD_PREPAYMENT_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrepaymentFee", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("fine", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDate", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField FINE_RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("fineRates", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField OVERDUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueId", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField OVERDUE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueRate", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField PRE_REPAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preRepayId", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField OVERDUE_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueCycleNum", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField SHOULD_PENALTY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPenaltyTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField SHOULD_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField REPAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentType", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDate", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField CREATER_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createrUser", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)44);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentDetailIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentDetailIndexDTOTupleSchemeFactory());
  }

  public int pid; // required
  public String planRepayDt; // required
  public int planCycleNum; // required
  public int thisStatus; // required
  public int planType; // required
  public double shouldPrincipal; // required
  public double shouldInterest; // required
  public double productInterest; // required
  public double rebateFee; // required
  public double monthMaidRate; // required
  public double total; // required
  public double actualPrincipal; // required
  public double actualInterest; // required
  public double actualTotal; // required
  public String actualRepayDt; // required
  public int overdueDays; // required
  public double overdueMoney; // required
  public double actualOverdueMoney; // required
  public double shouldOverdueMoney; // required
  public double actualPenalty; // required
  public String actualOverdueDt; // required
  public double principalBalance; // required
  public double shouldPrepaymentFee; // required
  public double preRepayAmt; // required
  public double fine; // required
  public String repayDate; // required
  public double fineRates; // required
  public int paymentId; // required
  public int overdueId; // required
  public double overdueRate; // required
  public int preRepayId; // required
  public int page; // required
  public int rows; // required
  public int projectId; // required
  public int overdueCycleNum; // required
  public double shouldPenaltyTotal; // required
  public double shouldPenalty; // required
  public int repaymentType; // required
  public double repaymentMoney; // required
  public String remark; // required
  public String repaymentDate; // required
  public String accountNo; // required
  public String createrUser; // required
  public int createrId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PLAN_REPAY_DT((short)2, "planRepayDt"),
    PLAN_CYCLE_NUM((short)3, "planCycleNum"),
    THIS_STATUS((short)4, "thisStatus"),
    PLAN_TYPE((short)5, "planType"),
    SHOULD_PRINCIPAL((short)6, "shouldPrincipal"),
    SHOULD_INTEREST((short)7, "shouldInterest"),
    PRODUCT_INTEREST((short)8, "productInterest"),
    REBATE_FEE((short)9, "rebateFee"),
    MONTH_MAID_RATE((short)10, "monthMaidRate"),
    TOTAL((short)11, "total"),
    ACTUAL_PRINCIPAL((short)12, "actualPrincipal"),
    ACTUAL_INTEREST((short)13, "actualInterest"),
    ACTUAL_TOTAL((short)14, "actualTotal"),
    ACTUAL_REPAY_DT((short)15, "actualRepayDt"),
    OVERDUE_DAYS((short)16, "overdueDays"),
    OVERDUE_MONEY((short)17, "overdueMoney"),
    ACTUAL_OVERDUE_MONEY((short)18, "actualOverdueMoney"),
    SHOULD_OVERDUE_MONEY((short)19, "shouldOverdueMoney"),
    ACTUAL_PENALTY((short)20, "actualPenalty"),
    ACTUAL_OVERDUE_DT((short)21, "actualOverdueDt"),
    PRINCIPAL_BALANCE((short)22, "principalBalance"),
    SHOULD_PREPAYMENT_FEE((short)23, "shouldPrepaymentFee"),
    PRE_REPAY_AMT((short)24, "preRepayAmt"),
    FINE((short)25, "fine"),
    REPAY_DATE((short)26, "repayDate"),
    FINE_RATES((short)27, "fineRates"),
    PAYMENT_ID((short)28, "paymentId"),
    OVERDUE_ID((short)29, "overdueId"),
    OVERDUE_RATE((short)30, "overdueRate"),
    PRE_REPAY_ID((short)31, "preRepayId"),
    PAGE((short)32, "page"),
    ROWS((short)33, "rows"),
    PROJECT_ID((short)34, "projectId"),
    OVERDUE_CYCLE_NUM((short)35, "overdueCycleNum"),
    SHOULD_PENALTY_TOTAL((short)36, "shouldPenaltyTotal"),
    SHOULD_PENALTY((short)37, "shouldPenalty"),
    REPAYMENT_TYPE((short)38, "repaymentType"),
    REPAYMENT_MONEY((short)39, "repaymentMoney"),
    REMARK((short)40, "remark"),
    REPAYMENT_DATE((short)41, "repaymentDate"),
    ACCOUNT_NO((short)42, "accountNo"),
    CREATER_USER((short)43, "createrUser"),
    CREATER_ID((short)44, "createrId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PLAN_REPAY_DT
          return PLAN_REPAY_DT;
        case 3: // PLAN_CYCLE_NUM
          return PLAN_CYCLE_NUM;
        case 4: // THIS_STATUS
          return THIS_STATUS;
        case 5: // PLAN_TYPE
          return PLAN_TYPE;
        case 6: // SHOULD_PRINCIPAL
          return SHOULD_PRINCIPAL;
        case 7: // SHOULD_INTEREST
          return SHOULD_INTEREST;
        case 8: // PRODUCT_INTEREST
          return PRODUCT_INTEREST;
        case 9: // REBATE_FEE
          return REBATE_FEE;
        case 10: // MONTH_MAID_RATE
          return MONTH_MAID_RATE;
        case 11: // TOTAL
          return TOTAL;
        case 12: // ACTUAL_PRINCIPAL
          return ACTUAL_PRINCIPAL;
        case 13: // ACTUAL_INTEREST
          return ACTUAL_INTEREST;
        case 14: // ACTUAL_TOTAL
          return ACTUAL_TOTAL;
        case 15: // ACTUAL_REPAY_DT
          return ACTUAL_REPAY_DT;
        case 16: // OVERDUE_DAYS
          return OVERDUE_DAYS;
        case 17: // OVERDUE_MONEY
          return OVERDUE_MONEY;
        case 18: // ACTUAL_OVERDUE_MONEY
          return ACTUAL_OVERDUE_MONEY;
        case 19: // SHOULD_OVERDUE_MONEY
          return SHOULD_OVERDUE_MONEY;
        case 20: // ACTUAL_PENALTY
          return ACTUAL_PENALTY;
        case 21: // ACTUAL_OVERDUE_DT
          return ACTUAL_OVERDUE_DT;
        case 22: // PRINCIPAL_BALANCE
          return PRINCIPAL_BALANCE;
        case 23: // SHOULD_PREPAYMENT_FEE
          return SHOULD_PREPAYMENT_FEE;
        case 24: // PRE_REPAY_AMT
          return PRE_REPAY_AMT;
        case 25: // FINE
          return FINE;
        case 26: // REPAY_DATE
          return REPAY_DATE;
        case 27: // FINE_RATES
          return FINE_RATES;
        case 28: // PAYMENT_ID
          return PAYMENT_ID;
        case 29: // OVERDUE_ID
          return OVERDUE_ID;
        case 30: // OVERDUE_RATE
          return OVERDUE_RATE;
        case 31: // PRE_REPAY_ID
          return PRE_REPAY_ID;
        case 32: // PAGE
          return PAGE;
        case 33: // ROWS
          return ROWS;
        case 34: // PROJECT_ID
          return PROJECT_ID;
        case 35: // OVERDUE_CYCLE_NUM
          return OVERDUE_CYCLE_NUM;
        case 36: // SHOULD_PENALTY_TOTAL
          return SHOULD_PENALTY_TOTAL;
        case 37: // SHOULD_PENALTY
          return SHOULD_PENALTY;
        case 38: // REPAYMENT_TYPE
          return REPAYMENT_TYPE;
        case 39: // REPAYMENT_MONEY
          return REPAYMENT_MONEY;
        case 40: // REMARK
          return REMARK;
        case 41: // REPAYMENT_DATE
          return REPAYMENT_DATE;
        case 42: // ACCOUNT_NO
          return ACCOUNT_NO;
        case 43: // CREATER_USER
          return CREATER_USER;
        case 44: // CREATER_ID
          return CREATER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PLANCYCLENUM_ISSET_ID = 1;
  private static final int __THISSTATUS_ISSET_ID = 2;
  private static final int __PLANTYPE_ISSET_ID = 3;
  private static final int __SHOULDPRINCIPAL_ISSET_ID = 4;
  private static final int __SHOULDINTEREST_ISSET_ID = 5;
  private static final int __PRODUCTINTEREST_ISSET_ID = 6;
  private static final int __REBATEFEE_ISSET_ID = 7;
  private static final int __MONTHMAIDRATE_ISSET_ID = 8;
  private static final int __TOTAL_ISSET_ID = 9;
  private static final int __ACTUALPRINCIPAL_ISSET_ID = 10;
  private static final int __ACTUALINTEREST_ISSET_ID = 11;
  private static final int __ACTUALTOTAL_ISSET_ID = 12;
  private static final int __OVERDUEDAYS_ISSET_ID = 13;
  private static final int __OVERDUEMONEY_ISSET_ID = 14;
  private static final int __ACTUALOVERDUEMONEY_ISSET_ID = 15;
  private static final int __SHOULDOVERDUEMONEY_ISSET_ID = 16;
  private static final int __ACTUALPENALTY_ISSET_ID = 17;
  private static final int __PRINCIPALBALANCE_ISSET_ID = 18;
  private static final int __SHOULDPREPAYMENTFEE_ISSET_ID = 19;
  private static final int __PREREPAYAMT_ISSET_ID = 20;
  private static final int __FINE_ISSET_ID = 21;
  private static final int __FINERATES_ISSET_ID = 22;
  private static final int __PAYMENTID_ISSET_ID = 23;
  private static final int __OVERDUEID_ISSET_ID = 24;
  private static final int __OVERDUERATE_ISSET_ID = 25;
  private static final int __PREREPAYID_ISSET_ID = 26;
  private static final int __PAGE_ISSET_ID = 27;
  private static final int __ROWS_ISSET_ID = 28;
  private static final int __PROJECTID_ISSET_ID = 29;
  private static final int __OVERDUECYCLENUM_ISSET_ID = 30;
  private static final int __SHOULDPENALTYTOTAL_ISSET_ID = 31;
  private static final int __SHOULDPENALTY_ISSET_ID = 32;
  private static final int __REPAYMENTTYPE_ISSET_ID = 33;
  private static final int __REPAYMENTMONEY_ISSET_ID = 34;
  private static final int __CREATERID_ISSET_ID = 35;
  private long __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("planCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("thisStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("planType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("shouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("shouldInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("productInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REBATE_FEE, new org.apache.thrift.meta_data.FieldMetaData("rebateFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_MAID_RATE, new org.apache.thrift.meta_data.FieldMetaData("monthMaidRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("actualPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("actualInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("actualTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("actualRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_DAYS, new org.apache.thrift.meta_data.FieldMetaData("overdueDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("overdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("actualOverdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("shouldOverdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("actualPenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_OVERDUE_DT, new org.apache.thrift.meta_data.FieldMetaData("actualOverdueDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("principalBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_PREPAYMENT_FEE, new org.apache.thrift.meta_data.FieldMetaData("shouldPrepaymentFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_REPAY_AMT, new org.apache.thrift.meta_data.FieldMetaData("preRepayAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FINE, new org.apache.thrift.meta_data.FieldMetaData("fine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("repayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINE_RATES, new org.apache.thrift.meta_data.FieldMetaData("fineRates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_ID, new org.apache.thrift.meta_data.FieldMetaData("overdueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_RATE, new org.apache.thrift.meta_data.FieldMetaData("overdueRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_REPAY_ID, new org.apache.thrift.meta_data.FieldMetaData("preRepayId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("overdueCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOULD_PENALTY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("shouldPenaltyTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("shouldPenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repaymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("repaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("repaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_USER, new org.apache.thrift.meta_data.FieldMetaData("createrUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentDetailIndexDTO.class, metaDataMap);
  }

  public RepaymentDetailIndexDTO() {
  }

  public RepaymentDetailIndexDTO(
    int pid,
    String planRepayDt,
    int planCycleNum,
    int thisStatus,
    int planType,
    double shouldPrincipal,
    double shouldInterest,
    double productInterest,
    double rebateFee,
    double monthMaidRate,
    double total,
    double actualPrincipal,
    double actualInterest,
    double actualTotal,
    String actualRepayDt,
    int overdueDays,
    double overdueMoney,
    double actualOverdueMoney,
    double shouldOverdueMoney,
    double actualPenalty,
    String actualOverdueDt,
    double principalBalance,
    double shouldPrepaymentFee,
    double preRepayAmt,
    double fine,
    String repayDate,
    double fineRates,
    int paymentId,
    int overdueId,
    double overdueRate,
    int preRepayId,
    int page,
    int rows,
    int projectId,
    int overdueCycleNum,
    double shouldPenaltyTotal,
    double shouldPenalty,
    int repaymentType,
    double repaymentMoney,
    String remark,
    String repaymentDate,
    String accountNo,
    String createrUser,
    int createrId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.planRepayDt = planRepayDt;
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    this.thisStatus = thisStatus;
    setThisStatusIsSet(true);
    this.planType = planType;
    setPlanTypeIsSet(true);
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    this.productInterest = productInterest;
    setProductInterestIsSet(true);
    this.rebateFee = rebateFee;
    setRebateFeeIsSet(true);
    this.monthMaidRate = monthMaidRate;
    setMonthMaidRateIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.actualPrincipal = actualPrincipal;
    setActualPrincipalIsSet(true);
    this.actualInterest = actualInterest;
    setActualInterestIsSet(true);
    this.actualTotal = actualTotal;
    setActualTotalIsSet(true);
    this.actualRepayDt = actualRepayDt;
    this.overdueDays = overdueDays;
    setOverdueDaysIsSet(true);
    this.overdueMoney = overdueMoney;
    setOverdueMoneyIsSet(true);
    this.actualOverdueMoney = actualOverdueMoney;
    setActualOverdueMoneyIsSet(true);
    this.shouldOverdueMoney = shouldOverdueMoney;
    setShouldOverdueMoneyIsSet(true);
    this.actualPenalty = actualPenalty;
    setActualPenaltyIsSet(true);
    this.actualOverdueDt = actualOverdueDt;
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    this.shouldPrepaymentFee = shouldPrepaymentFee;
    setShouldPrepaymentFeeIsSet(true);
    this.preRepayAmt = preRepayAmt;
    setPreRepayAmtIsSet(true);
    this.fine = fine;
    setFineIsSet(true);
    this.repayDate = repayDate;
    this.fineRates = fineRates;
    setFineRatesIsSet(true);
    this.paymentId = paymentId;
    setPaymentIdIsSet(true);
    this.overdueId = overdueId;
    setOverdueIdIsSet(true);
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.overdueCycleNum = overdueCycleNum;
    setOverdueCycleNumIsSet(true);
    this.shouldPenaltyTotal = shouldPenaltyTotal;
    setShouldPenaltyTotalIsSet(true);
    this.shouldPenalty = shouldPenalty;
    setShouldPenaltyIsSet(true);
    this.repaymentType = repaymentType;
    setRepaymentTypeIsSet(true);
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    this.remark = remark;
    this.repaymentDate = repaymentDate;
    this.accountNo = accountNo;
    this.createrUser = createrUser;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentDetailIndexDTO(RepaymentDetailIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetPlanRepayDt()) {
      this.planRepayDt = other.planRepayDt;
    }
    this.planCycleNum = other.planCycleNum;
    this.thisStatus = other.thisStatus;
    this.planType = other.planType;
    this.shouldPrincipal = other.shouldPrincipal;
    this.shouldInterest = other.shouldInterest;
    this.productInterest = other.productInterest;
    this.rebateFee = other.rebateFee;
    this.monthMaidRate = other.monthMaidRate;
    this.total = other.total;
    this.actualPrincipal = other.actualPrincipal;
    this.actualInterest = other.actualInterest;
    this.actualTotal = other.actualTotal;
    if (other.isSetActualRepayDt()) {
      this.actualRepayDt = other.actualRepayDt;
    }
    this.overdueDays = other.overdueDays;
    this.overdueMoney = other.overdueMoney;
    this.actualOverdueMoney = other.actualOverdueMoney;
    this.shouldOverdueMoney = other.shouldOverdueMoney;
    this.actualPenalty = other.actualPenalty;
    if (other.isSetActualOverdueDt()) {
      this.actualOverdueDt = other.actualOverdueDt;
    }
    this.principalBalance = other.principalBalance;
    this.shouldPrepaymentFee = other.shouldPrepaymentFee;
    this.preRepayAmt = other.preRepayAmt;
    this.fine = other.fine;
    if (other.isSetRepayDate()) {
      this.repayDate = other.repayDate;
    }
    this.fineRates = other.fineRates;
    this.paymentId = other.paymentId;
    this.overdueId = other.overdueId;
    this.overdueRate = other.overdueRate;
    this.preRepayId = other.preRepayId;
    this.page = other.page;
    this.rows = other.rows;
    this.projectId = other.projectId;
    this.overdueCycleNum = other.overdueCycleNum;
    this.shouldPenaltyTotal = other.shouldPenaltyTotal;
    this.shouldPenalty = other.shouldPenalty;
    this.repaymentType = other.repaymentType;
    this.repaymentMoney = other.repaymentMoney;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetRepaymentDate()) {
      this.repaymentDate = other.repaymentDate;
    }
    if (other.isSetAccountNo()) {
      this.accountNo = other.accountNo;
    }
    if (other.isSetCreaterUser()) {
      this.createrUser = other.createrUser;
    }
    this.createrId = other.createrId;
  }

  public RepaymentDetailIndexDTO deepCopy() {
    return new RepaymentDetailIndexDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.planRepayDt = null;
    setPlanCycleNumIsSet(false);
    this.planCycleNum = 0;
    setThisStatusIsSet(false);
    this.thisStatus = 0;
    setPlanTypeIsSet(false);
    this.planType = 0;
    setShouldPrincipalIsSet(false);
    this.shouldPrincipal = 0.0;
    setShouldInterestIsSet(false);
    this.shouldInterest = 0.0;
    setProductInterestIsSet(false);
    this.productInterest = 0.0;
    setRebateFeeIsSet(false);
    this.rebateFee = 0.0;
    setMonthMaidRateIsSet(false);
    this.monthMaidRate = 0.0;
    setTotalIsSet(false);
    this.total = 0.0;
    setActualPrincipalIsSet(false);
    this.actualPrincipal = 0.0;
    setActualInterestIsSet(false);
    this.actualInterest = 0.0;
    setActualTotalIsSet(false);
    this.actualTotal = 0.0;
    this.actualRepayDt = null;
    setOverdueDaysIsSet(false);
    this.overdueDays = 0;
    setOverdueMoneyIsSet(false);
    this.overdueMoney = 0.0;
    setActualOverdueMoneyIsSet(false);
    this.actualOverdueMoney = 0.0;
    setShouldOverdueMoneyIsSet(false);
    this.shouldOverdueMoney = 0.0;
    setActualPenaltyIsSet(false);
    this.actualPenalty = 0.0;
    this.actualOverdueDt = null;
    setPrincipalBalanceIsSet(false);
    this.principalBalance = 0.0;
    setShouldPrepaymentFeeIsSet(false);
    this.shouldPrepaymentFee = 0.0;
    setPreRepayAmtIsSet(false);
    this.preRepayAmt = 0.0;
    setFineIsSet(false);
    this.fine = 0.0;
    this.repayDate = null;
    setFineRatesIsSet(false);
    this.fineRates = 0.0;
    setPaymentIdIsSet(false);
    this.paymentId = 0;
    setOverdueIdIsSet(false);
    this.overdueId = 0;
    setOverdueRateIsSet(false);
    this.overdueRate = 0.0;
    setPreRepayIdIsSet(false);
    this.preRepayId = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setOverdueCycleNumIsSet(false);
    this.overdueCycleNum = 0;
    setShouldPenaltyTotalIsSet(false);
    this.shouldPenaltyTotal = 0.0;
    setShouldPenaltyIsSet(false);
    this.shouldPenalty = 0.0;
    setRepaymentTypeIsSet(false);
    this.repaymentType = 0;
    setRepaymentMoneyIsSet(false);
    this.repaymentMoney = 0.0;
    this.remark = null;
    this.repaymentDate = null;
    this.accountNo = null;
    this.createrUser = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public RepaymentDetailIndexDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getPlanRepayDt() {
    return this.planRepayDt;
  }

  public RepaymentDetailIndexDTO setPlanRepayDt(String planRepayDt) {
    this.planRepayDt = planRepayDt;
    return this;
  }

  public void unsetPlanRepayDt() {
    this.planRepayDt = null;
  }

  /** Returns true if field planRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayDt() {
    return this.planRepayDt != null;
  }

  public void setPlanRepayDtIsSet(boolean value) {
    if (!value) {
      this.planRepayDt = null;
    }
  }

  public int getPlanCycleNum() {
    return this.planCycleNum;
  }

  public RepaymentDetailIndexDTO setPlanCycleNum(int planCycleNum) {
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    return this;
  }

  public void unsetPlanCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  /** Returns true if field planCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  public void setPlanCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID, value);
  }

  public int getThisStatus() {
    return this.thisStatus;
  }

  public RepaymentDetailIndexDTO setThisStatus(int thisStatus) {
    this.thisStatus = thisStatus;
    setThisStatusIsSet(true);
    return this;
  }

  public void unsetThisStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THISSTATUS_ISSET_ID);
  }

  /** Returns true if field thisStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetThisStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __THISSTATUS_ISSET_ID);
  }

  public void setThisStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THISSTATUS_ISSET_ID, value);
  }

  public int getPlanType() {
    return this.planType;
  }

  public RepaymentDetailIndexDTO setPlanType(int planType) {
    this.planType = planType;
    setPlanTypeIsSet(true);
    return this;
  }

  public void unsetPlanType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANTYPE_ISSET_ID);
  }

  /** Returns true if field planType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanType() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANTYPE_ISSET_ID);
  }

  public void setPlanTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANTYPE_ISSET_ID, value);
  }

  public double getShouldPrincipal() {
    return this.shouldPrincipal;
  }

  public RepaymentDetailIndexDTO setShouldPrincipal(double shouldPrincipal) {
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    return this;
  }

  public void unsetShouldPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field shouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  public void setShouldPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID, value);
  }

  public double getShouldInterest() {
    return this.shouldInterest;
  }

  public RepaymentDetailIndexDTO setShouldInterest(double shouldInterest) {
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    return this;
  }

  public void unsetShouldInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  /** Returns true if field shouldInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  public void setShouldInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID, value);
  }

  public double getProductInterest() {
    return this.productInterest;
  }

  public RepaymentDetailIndexDTO setProductInterest(double productInterest) {
    this.productInterest = productInterest;
    setProductInterestIsSet(true);
    return this;
  }

  public void unsetProductInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTINTEREST_ISSET_ID);
  }

  /** Returns true if field productInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetProductInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTINTEREST_ISSET_ID);
  }

  public void setProductInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTINTEREST_ISSET_ID, value);
  }

  public double getRebateFee() {
    return this.rebateFee;
  }

  public RepaymentDetailIndexDTO setRebateFee(double rebateFee) {
    this.rebateFee = rebateFee;
    setRebateFeeIsSet(true);
    return this;
  }

  public void unsetRebateFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REBATEFEE_ISSET_ID);
  }

  /** Returns true if field rebateFee is set (has been assigned a value) and false otherwise */
  public boolean isSetRebateFee() {
    return EncodingUtils.testBit(__isset_bitfield, __REBATEFEE_ISSET_ID);
  }

  public void setRebateFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REBATEFEE_ISSET_ID, value);
  }

  public double getMonthMaidRate() {
    return this.monthMaidRate;
  }

  public RepaymentDetailIndexDTO setMonthMaidRate(double monthMaidRate) {
    this.monthMaidRate = monthMaidRate;
    setMonthMaidRateIsSet(true);
    return this;
  }

  public void unsetMonthMaidRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID);
  }

  /** Returns true if field monthMaidRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthMaidRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID);
  }

  public void setMonthMaidRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID, value);
  }

  public double getTotal() {
    return this.total;
  }

  public RepaymentDetailIndexDTO setTotal(double total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public double getActualPrincipal() {
    return this.actualPrincipal;
  }

  public RepaymentDetailIndexDTO setActualPrincipal(double actualPrincipal) {
    this.actualPrincipal = actualPrincipal;
    setActualPrincipalIsSet(true);
    return this;
  }

  public void unsetActualPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field actualPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID);
  }

  public void setActualPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID, value);
  }

  public double getActualInterest() {
    return this.actualInterest;
  }

  public RepaymentDetailIndexDTO setActualInterest(double actualInterest) {
    this.actualInterest = actualInterest;
    setActualInterestIsSet(true);
    return this;
  }

  public void unsetActualInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID);
  }

  /** Returns true if field actualInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetActualInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID);
  }

  public void setActualInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID, value);
  }

  public double getActualTotal() {
    return this.actualTotal;
  }

  public RepaymentDetailIndexDTO setActualTotal(double actualTotal) {
    this.actualTotal = actualTotal;
    setActualTotalIsSet(true);
    return this;
  }

  public void unsetActualTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  /** Returns true if field actualTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetActualTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  public void setActualTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID, value);
  }

  public String getActualRepayDt() {
    return this.actualRepayDt;
  }

  public RepaymentDetailIndexDTO setActualRepayDt(String actualRepayDt) {
    this.actualRepayDt = actualRepayDt;
    return this;
  }

  public void unsetActualRepayDt() {
    this.actualRepayDt = null;
  }

  /** Returns true if field actualRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualRepayDt() {
    return this.actualRepayDt != null;
  }

  public void setActualRepayDtIsSet(boolean value) {
    if (!value) {
      this.actualRepayDt = null;
    }
  }

  public int getOverdueDays() {
    return this.overdueDays;
  }

  public RepaymentDetailIndexDTO setOverdueDays(int overdueDays) {
    this.overdueDays = overdueDays;
    setOverdueDaysIsSet(true);
    return this;
  }

  public void unsetOverdueDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID);
  }

  /** Returns true if field overdueDays is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDays() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID);
  }

  public void setOverdueDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID, value);
  }

  public double getOverdueMoney() {
    return this.overdueMoney;
  }

  public RepaymentDetailIndexDTO setOverdueMoney(double overdueMoney) {
    this.overdueMoney = overdueMoney;
    setOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field overdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID);
  }

  public void setOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID, value);
  }

  public double getActualOverdueMoney() {
    return this.actualOverdueMoney;
  }

  public RepaymentDetailIndexDTO setActualOverdueMoney(double actualOverdueMoney) {
    this.actualOverdueMoney = actualOverdueMoney;
    setActualOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetActualOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field actualOverdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetActualOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID);
  }

  public void setActualOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID, value);
  }

  public double getShouldOverdueMoney() {
    return this.shouldOverdueMoney;
  }

  public RepaymentDetailIndexDTO setShouldOverdueMoney(double shouldOverdueMoney) {
    this.shouldOverdueMoney = shouldOverdueMoney;
    setShouldOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetShouldOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field shouldOverdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID);
  }

  public void setShouldOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID, value);
  }

  public double getActualPenalty() {
    return this.actualPenalty;
  }

  public RepaymentDetailIndexDTO setActualPenalty(double actualPenalty) {
    this.actualPenalty = actualPenalty;
    setActualPenaltyIsSet(true);
    return this;
  }

  public void unsetActualPenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID);
  }

  /** Returns true if field actualPenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID);
  }

  public void setActualPenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID, value);
  }

  public String getActualOverdueDt() {
    return this.actualOverdueDt;
  }

  public RepaymentDetailIndexDTO setActualOverdueDt(String actualOverdueDt) {
    this.actualOverdueDt = actualOverdueDt;
    return this;
  }

  public void unsetActualOverdueDt() {
    this.actualOverdueDt = null;
  }

  /** Returns true if field actualOverdueDt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualOverdueDt() {
    return this.actualOverdueDt != null;
  }

  public void setActualOverdueDtIsSet(boolean value) {
    if (!value) {
      this.actualOverdueDt = null;
    }
  }

  public double getPrincipalBalance() {
    return this.principalBalance;
  }

  public RepaymentDetailIndexDTO setPrincipalBalance(double principalBalance) {
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    return this;
  }

  public void unsetPrincipalBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  /** Returns true if field principalBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  public void setPrincipalBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID, value);
  }

  public double getShouldPrepaymentFee() {
    return this.shouldPrepaymentFee;
  }

  public RepaymentDetailIndexDTO setShouldPrepaymentFee(double shouldPrepaymentFee) {
    this.shouldPrepaymentFee = shouldPrepaymentFee;
    setShouldPrepaymentFeeIsSet(true);
    return this;
  }

  public void unsetShouldPrepaymentFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPREPAYMENTFEE_ISSET_ID);
  }

  /** Returns true if field shouldPrepaymentFee is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrepaymentFee() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPREPAYMENTFEE_ISSET_ID);
  }

  public void setShouldPrepaymentFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPREPAYMENTFEE_ISSET_ID, value);
  }

  public double getPreRepayAmt() {
    return this.preRepayAmt;
  }

  public RepaymentDetailIndexDTO setPreRepayAmt(double preRepayAmt) {
    this.preRepayAmt = preRepayAmt;
    setPreRepayAmtIsSet(true);
    return this;
  }

  public void unsetPreRepayAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID);
  }

  /** Returns true if field preRepayAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID);
  }

  public void setPreRepayAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYAMT_ISSET_ID, value);
  }

  public double getFine() {
    return this.fine;
  }

  public RepaymentDetailIndexDTO setFine(double fine) {
    this.fine = fine;
    setFineIsSet(true);
    return this;
  }

  public void unsetFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINE_ISSET_ID);
  }

  /** Returns true if field fine is set (has been assigned a value) and false otherwise */
  public boolean isSetFine() {
    return EncodingUtils.testBit(__isset_bitfield, __FINE_ISSET_ID);
  }

  public void setFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINE_ISSET_ID, value);
  }

  public String getRepayDate() {
    return this.repayDate;
  }

  public RepaymentDetailIndexDTO setRepayDate(String repayDate) {
    this.repayDate = repayDate;
    return this;
  }

  public void unsetRepayDate() {
    this.repayDate = null;
  }

  /** Returns true if field repayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDate() {
    return this.repayDate != null;
  }

  public void setRepayDateIsSet(boolean value) {
    if (!value) {
      this.repayDate = null;
    }
  }

  public double getFineRates() {
    return this.fineRates;
  }

  public RepaymentDetailIndexDTO setFineRates(double fineRates) {
    this.fineRates = fineRates;
    setFineRatesIsSet(true);
    return this;
  }

  public void unsetFineRates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINERATES_ISSET_ID);
  }

  /** Returns true if field fineRates is set (has been assigned a value) and false otherwise */
  public boolean isSetFineRates() {
    return EncodingUtils.testBit(__isset_bitfield, __FINERATES_ISSET_ID);
  }

  public void setFineRatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINERATES_ISSET_ID, value);
  }

  public int getPaymentId() {
    return this.paymentId;
  }

  public RepaymentDetailIndexDTO setPaymentId(int paymentId) {
    this.paymentId = paymentId;
    setPaymentIdIsSet(true);
    return this;
  }

  public void unsetPaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTID_ISSET_ID);
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTID_ISSET_ID);
  }

  public void setPaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTID_ISSET_ID, value);
  }

  public int getOverdueId() {
    return this.overdueId;
  }

  public RepaymentDetailIndexDTO setOverdueId(int overdueId) {
    this.overdueId = overdueId;
    setOverdueIdIsSet(true);
    return this;
  }

  public void unsetOverdueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEID_ISSET_ID);
  }

  /** Returns true if field overdueId is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueId() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEID_ISSET_ID);
  }

  public void setOverdueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEID_ISSET_ID, value);
  }

  public double getOverdueRate() {
    return this.overdueRate;
  }

  public RepaymentDetailIndexDTO setOverdueRate(double overdueRate) {
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    return this;
  }

  public void unsetOverdueRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  /** Returns true if field overdueRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  public void setOverdueRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUERATE_ISSET_ID, value);
  }

  public int getPreRepayId() {
    return this.preRepayId;
  }

  public RepaymentDetailIndexDTO setPreRepayId(int preRepayId) {
    this.preRepayId = preRepayId;
    setPreRepayIdIsSet(true);
    return this;
  }

  public void unsetPreRepayId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  /** Returns true if field preRepayId is set (has been assigned a value) and false otherwise */
  public boolean isSetPreRepayId() {
    return EncodingUtils.testBit(__isset_bitfield, __PREREPAYID_ISSET_ID);
  }

  public void setPreRepayIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREREPAYID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public RepaymentDetailIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RepaymentDetailIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepaymentDetailIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getOverdueCycleNum() {
    return this.overdueCycleNum;
  }

  public RepaymentDetailIndexDTO setOverdueCycleNum(int overdueCycleNum) {
    this.overdueCycleNum = overdueCycleNum;
    setOverdueCycleNumIsSet(true);
    return this;
  }

  public void unsetOverdueCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUECYCLENUM_ISSET_ID);
  }

  /** Returns true if field overdueCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUECYCLENUM_ISSET_ID);
  }

  public void setOverdueCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUECYCLENUM_ISSET_ID, value);
  }

  public double getShouldPenaltyTotal() {
    return this.shouldPenaltyTotal;
  }

  public RepaymentDetailIndexDTO setShouldPenaltyTotal(double shouldPenaltyTotal) {
    this.shouldPenaltyTotal = shouldPenaltyTotal;
    setShouldPenaltyTotalIsSet(true);
    return this;
  }

  public void unsetShouldPenaltyTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPENALTYTOTAL_ISSET_ID);
  }

  /** Returns true if field shouldPenaltyTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPenaltyTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPENALTYTOTAL_ISSET_ID);
  }

  public void setShouldPenaltyTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPENALTYTOTAL_ISSET_ID, value);
  }

  public double getShouldPenalty() {
    return this.shouldPenalty;
  }

  public RepaymentDetailIndexDTO setShouldPenalty(double shouldPenalty) {
    this.shouldPenalty = shouldPenalty;
    setShouldPenaltyIsSet(true);
    return this;
  }

  public void unsetShouldPenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID);
  }

  /** Returns true if field shouldPenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID);
  }

  public void setShouldPenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID, value);
  }

  public int getRepaymentType() {
    return this.repaymentType;
  }

  public RepaymentDetailIndexDTO setRepaymentType(int repaymentType) {
    this.repaymentType = repaymentType;
    setRepaymentTypeIsSet(true);
    return this;
  }

  public void unsetRepaymentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTTYPE_ISSET_ID);
  }

  /** Returns true if field repaymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTTYPE_ISSET_ID);
  }

  public void setRepaymentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTTYPE_ISSET_ID, value);
  }

  public double getRepaymentMoney() {
    return this.repaymentMoney;
  }

  public RepaymentDetailIndexDTO setRepaymentMoney(double repaymentMoney) {
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field repaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  public void setRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public RepaymentDetailIndexDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getRepaymentDate() {
    return this.repaymentDate;
  }

  public RepaymentDetailIndexDTO setRepaymentDate(String repaymentDate) {
    this.repaymentDate = repaymentDate;
    return this;
  }

  public void unsetRepaymentDate() {
    this.repaymentDate = null;
  }

  /** Returns true if field repaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDate() {
    return this.repaymentDate != null;
  }

  public void setRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.repaymentDate = null;
    }
  }

  public String getAccountNo() {
    return this.accountNo;
  }

  public RepaymentDetailIndexDTO setAccountNo(String accountNo) {
    this.accountNo = accountNo;
    return this;
  }

  public void unsetAccountNo() {
    this.accountNo = null;
  }

  /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNo() {
    return this.accountNo != null;
  }

  public void setAccountNoIsSet(boolean value) {
    if (!value) {
      this.accountNo = null;
    }
  }

  public String getCreaterUser() {
    return this.createrUser;
  }

  public RepaymentDetailIndexDTO setCreaterUser(String createrUser) {
    this.createrUser = createrUser;
    return this;
  }

  public void unsetCreaterUser() {
    this.createrUser = null;
  }

  /** Returns true if field createrUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterUser() {
    return this.createrUser != null;
  }

  public void setCreaterUserIsSet(boolean value) {
    if (!value) {
      this.createrUser = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public RepaymentDetailIndexDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PLAN_REPAY_DT:
      if (value == null) {
        unsetPlanRepayDt();
      } else {
        setPlanRepayDt((String)value);
      }
      break;

    case PLAN_CYCLE_NUM:
      if (value == null) {
        unsetPlanCycleNum();
      } else {
        setPlanCycleNum((Integer)value);
      }
      break;

    case THIS_STATUS:
      if (value == null) {
        unsetThisStatus();
      } else {
        setThisStatus((Integer)value);
      }
      break;

    case PLAN_TYPE:
      if (value == null) {
        unsetPlanType();
      } else {
        setPlanType((Integer)value);
      }
      break;

    case SHOULD_PRINCIPAL:
      if (value == null) {
        unsetShouldPrincipal();
      } else {
        setShouldPrincipal((Double)value);
      }
      break;

    case SHOULD_INTEREST:
      if (value == null) {
        unsetShouldInterest();
      } else {
        setShouldInterest((Double)value);
      }
      break;

    case PRODUCT_INTEREST:
      if (value == null) {
        unsetProductInterest();
      } else {
        setProductInterest((Double)value);
      }
      break;

    case REBATE_FEE:
      if (value == null) {
        unsetRebateFee();
      } else {
        setRebateFee((Double)value);
      }
      break;

    case MONTH_MAID_RATE:
      if (value == null) {
        unsetMonthMaidRate();
      } else {
        setMonthMaidRate((Double)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Double)value);
      }
      break;

    case ACTUAL_PRINCIPAL:
      if (value == null) {
        unsetActualPrincipal();
      } else {
        setActualPrincipal((Double)value);
      }
      break;

    case ACTUAL_INTEREST:
      if (value == null) {
        unsetActualInterest();
      } else {
        setActualInterest((Double)value);
      }
      break;

    case ACTUAL_TOTAL:
      if (value == null) {
        unsetActualTotal();
      } else {
        setActualTotal((Double)value);
      }
      break;

    case ACTUAL_REPAY_DT:
      if (value == null) {
        unsetActualRepayDt();
      } else {
        setActualRepayDt((String)value);
      }
      break;

    case OVERDUE_DAYS:
      if (value == null) {
        unsetOverdueDays();
      } else {
        setOverdueDays((Integer)value);
      }
      break;

    case OVERDUE_MONEY:
      if (value == null) {
        unsetOverdueMoney();
      } else {
        setOverdueMoney((Double)value);
      }
      break;

    case ACTUAL_OVERDUE_MONEY:
      if (value == null) {
        unsetActualOverdueMoney();
      } else {
        setActualOverdueMoney((Double)value);
      }
      break;

    case SHOULD_OVERDUE_MONEY:
      if (value == null) {
        unsetShouldOverdueMoney();
      } else {
        setShouldOverdueMoney((Double)value);
      }
      break;

    case ACTUAL_PENALTY:
      if (value == null) {
        unsetActualPenalty();
      } else {
        setActualPenalty((Double)value);
      }
      break;

    case ACTUAL_OVERDUE_DT:
      if (value == null) {
        unsetActualOverdueDt();
      } else {
        setActualOverdueDt((String)value);
      }
      break;

    case PRINCIPAL_BALANCE:
      if (value == null) {
        unsetPrincipalBalance();
      } else {
        setPrincipalBalance((Double)value);
      }
      break;

    case SHOULD_PREPAYMENT_FEE:
      if (value == null) {
        unsetShouldPrepaymentFee();
      } else {
        setShouldPrepaymentFee((Double)value);
      }
      break;

    case PRE_REPAY_AMT:
      if (value == null) {
        unsetPreRepayAmt();
      } else {
        setPreRepayAmt((Double)value);
      }
      break;

    case FINE:
      if (value == null) {
        unsetFine();
      } else {
        setFine((Double)value);
      }
      break;

    case REPAY_DATE:
      if (value == null) {
        unsetRepayDate();
      } else {
        setRepayDate((String)value);
      }
      break;

    case FINE_RATES:
      if (value == null) {
        unsetFineRates();
      } else {
        setFineRates((Double)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((Integer)value);
      }
      break;

    case OVERDUE_ID:
      if (value == null) {
        unsetOverdueId();
      } else {
        setOverdueId((Integer)value);
      }
      break;

    case OVERDUE_RATE:
      if (value == null) {
        unsetOverdueRate();
      } else {
        setOverdueRate((Double)value);
      }
      break;

    case PRE_REPAY_ID:
      if (value == null) {
        unsetPreRepayId();
      } else {
        setPreRepayId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case OVERDUE_CYCLE_NUM:
      if (value == null) {
        unsetOverdueCycleNum();
      } else {
        setOverdueCycleNum((Integer)value);
      }
      break;

    case SHOULD_PENALTY_TOTAL:
      if (value == null) {
        unsetShouldPenaltyTotal();
      } else {
        setShouldPenaltyTotal((Double)value);
      }
      break;

    case SHOULD_PENALTY:
      if (value == null) {
        unsetShouldPenalty();
      } else {
        setShouldPenalty((Double)value);
      }
      break;

    case REPAYMENT_TYPE:
      if (value == null) {
        unsetRepaymentType();
      } else {
        setRepaymentType((Integer)value);
      }
      break;

    case REPAYMENT_MONEY:
      if (value == null) {
        unsetRepaymentMoney();
      } else {
        setRepaymentMoney((Double)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case REPAYMENT_DATE:
      if (value == null) {
        unsetRepaymentDate();
      } else {
        setRepaymentDate((String)value);
      }
      break;

    case ACCOUNT_NO:
      if (value == null) {
        unsetAccountNo();
      } else {
        setAccountNo((String)value);
      }
      break;

    case CREATER_USER:
      if (value == null) {
        unsetCreaterUser();
      } else {
        setCreaterUser((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PLAN_REPAY_DT:
      return getPlanRepayDt();

    case PLAN_CYCLE_NUM:
      return Integer.valueOf(getPlanCycleNum());

    case THIS_STATUS:
      return Integer.valueOf(getThisStatus());

    case PLAN_TYPE:
      return Integer.valueOf(getPlanType());

    case SHOULD_PRINCIPAL:
      return Double.valueOf(getShouldPrincipal());

    case SHOULD_INTEREST:
      return Double.valueOf(getShouldInterest());

    case PRODUCT_INTEREST:
      return Double.valueOf(getProductInterest());

    case REBATE_FEE:
      return Double.valueOf(getRebateFee());

    case MONTH_MAID_RATE:
      return Double.valueOf(getMonthMaidRate());

    case TOTAL:
      return Double.valueOf(getTotal());

    case ACTUAL_PRINCIPAL:
      return Double.valueOf(getActualPrincipal());

    case ACTUAL_INTEREST:
      return Double.valueOf(getActualInterest());

    case ACTUAL_TOTAL:
      return Double.valueOf(getActualTotal());

    case ACTUAL_REPAY_DT:
      return getActualRepayDt();

    case OVERDUE_DAYS:
      return Integer.valueOf(getOverdueDays());

    case OVERDUE_MONEY:
      return Double.valueOf(getOverdueMoney());

    case ACTUAL_OVERDUE_MONEY:
      return Double.valueOf(getActualOverdueMoney());

    case SHOULD_OVERDUE_MONEY:
      return Double.valueOf(getShouldOverdueMoney());

    case ACTUAL_PENALTY:
      return Double.valueOf(getActualPenalty());

    case ACTUAL_OVERDUE_DT:
      return getActualOverdueDt();

    case PRINCIPAL_BALANCE:
      return Double.valueOf(getPrincipalBalance());

    case SHOULD_PREPAYMENT_FEE:
      return Double.valueOf(getShouldPrepaymentFee());

    case PRE_REPAY_AMT:
      return Double.valueOf(getPreRepayAmt());

    case FINE:
      return Double.valueOf(getFine());

    case REPAY_DATE:
      return getRepayDate();

    case FINE_RATES:
      return Double.valueOf(getFineRates());

    case PAYMENT_ID:
      return Integer.valueOf(getPaymentId());

    case OVERDUE_ID:
      return Integer.valueOf(getOverdueId());

    case OVERDUE_RATE:
      return Double.valueOf(getOverdueRate());

    case PRE_REPAY_ID:
      return Integer.valueOf(getPreRepayId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case OVERDUE_CYCLE_NUM:
      return Integer.valueOf(getOverdueCycleNum());

    case SHOULD_PENALTY_TOTAL:
      return Double.valueOf(getShouldPenaltyTotal());

    case SHOULD_PENALTY:
      return Double.valueOf(getShouldPenalty());

    case REPAYMENT_TYPE:
      return Integer.valueOf(getRepaymentType());

    case REPAYMENT_MONEY:
      return Double.valueOf(getRepaymentMoney());

    case REMARK:
      return getRemark();

    case REPAYMENT_DATE:
      return getRepaymentDate();

    case ACCOUNT_NO:
      return getAccountNo();

    case CREATER_USER:
      return getCreaterUser();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PLAN_REPAY_DT:
      return isSetPlanRepayDt();
    case PLAN_CYCLE_NUM:
      return isSetPlanCycleNum();
    case THIS_STATUS:
      return isSetThisStatus();
    case PLAN_TYPE:
      return isSetPlanType();
    case SHOULD_PRINCIPAL:
      return isSetShouldPrincipal();
    case SHOULD_INTEREST:
      return isSetShouldInterest();
    case PRODUCT_INTEREST:
      return isSetProductInterest();
    case REBATE_FEE:
      return isSetRebateFee();
    case MONTH_MAID_RATE:
      return isSetMonthMaidRate();
    case TOTAL:
      return isSetTotal();
    case ACTUAL_PRINCIPAL:
      return isSetActualPrincipal();
    case ACTUAL_INTEREST:
      return isSetActualInterest();
    case ACTUAL_TOTAL:
      return isSetActualTotal();
    case ACTUAL_REPAY_DT:
      return isSetActualRepayDt();
    case OVERDUE_DAYS:
      return isSetOverdueDays();
    case OVERDUE_MONEY:
      return isSetOverdueMoney();
    case ACTUAL_OVERDUE_MONEY:
      return isSetActualOverdueMoney();
    case SHOULD_OVERDUE_MONEY:
      return isSetShouldOverdueMoney();
    case ACTUAL_PENALTY:
      return isSetActualPenalty();
    case ACTUAL_OVERDUE_DT:
      return isSetActualOverdueDt();
    case PRINCIPAL_BALANCE:
      return isSetPrincipalBalance();
    case SHOULD_PREPAYMENT_FEE:
      return isSetShouldPrepaymentFee();
    case PRE_REPAY_AMT:
      return isSetPreRepayAmt();
    case FINE:
      return isSetFine();
    case REPAY_DATE:
      return isSetRepayDate();
    case FINE_RATES:
      return isSetFineRates();
    case PAYMENT_ID:
      return isSetPaymentId();
    case OVERDUE_ID:
      return isSetOverdueId();
    case OVERDUE_RATE:
      return isSetOverdueRate();
    case PRE_REPAY_ID:
      return isSetPreRepayId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PROJECT_ID:
      return isSetProjectId();
    case OVERDUE_CYCLE_NUM:
      return isSetOverdueCycleNum();
    case SHOULD_PENALTY_TOTAL:
      return isSetShouldPenaltyTotal();
    case SHOULD_PENALTY:
      return isSetShouldPenalty();
    case REPAYMENT_TYPE:
      return isSetRepaymentType();
    case REPAYMENT_MONEY:
      return isSetRepaymentMoney();
    case REMARK:
      return isSetRemark();
    case REPAYMENT_DATE:
      return isSetRepaymentDate();
    case ACCOUNT_NO:
      return isSetAccountNo();
    case CREATER_USER:
      return isSetCreaterUser();
    case CREATER_ID:
      return isSetCreaterId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentDetailIndexDTO)
      return this.equals((RepaymentDetailIndexDTO)that);
    return false;
  }

  public boolean equals(RepaymentDetailIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_planRepayDt = true && this.isSetPlanRepayDt();
    boolean that_present_planRepayDt = true && that.isSetPlanRepayDt();
    if (this_present_planRepayDt || that_present_planRepayDt) {
      if (!(this_present_planRepayDt && that_present_planRepayDt))
        return false;
      if (!this.planRepayDt.equals(that.planRepayDt))
        return false;
    }

    boolean this_present_planCycleNum = true;
    boolean that_present_planCycleNum = true;
    if (this_present_planCycleNum || that_present_planCycleNum) {
      if (!(this_present_planCycleNum && that_present_planCycleNum))
        return false;
      if (this.planCycleNum != that.planCycleNum)
        return false;
    }

    boolean this_present_thisStatus = true;
    boolean that_present_thisStatus = true;
    if (this_present_thisStatus || that_present_thisStatus) {
      if (!(this_present_thisStatus && that_present_thisStatus))
        return false;
      if (this.thisStatus != that.thisStatus)
        return false;
    }

    boolean this_present_planType = true;
    boolean that_present_planType = true;
    if (this_present_planType || that_present_planType) {
      if (!(this_present_planType && that_present_planType))
        return false;
      if (this.planType != that.planType)
        return false;
    }

    boolean this_present_shouldPrincipal = true;
    boolean that_present_shouldPrincipal = true;
    if (this_present_shouldPrincipal || that_present_shouldPrincipal) {
      if (!(this_present_shouldPrincipal && that_present_shouldPrincipal))
        return false;
      if (this.shouldPrincipal != that.shouldPrincipal)
        return false;
    }

    boolean this_present_shouldInterest = true;
    boolean that_present_shouldInterest = true;
    if (this_present_shouldInterest || that_present_shouldInterest) {
      if (!(this_present_shouldInterest && that_present_shouldInterest))
        return false;
      if (this.shouldInterest != that.shouldInterest)
        return false;
    }

    boolean this_present_productInterest = true;
    boolean that_present_productInterest = true;
    if (this_present_productInterest || that_present_productInterest) {
      if (!(this_present_productInterest && that_present_productInterest))
        return false;
      if (this.productInterest != that.productInterest)
        return false;
    }

    boolean this_present_rebateFee = true;
    boolean that_present_rebateFee = true;
    if (this_present_rebateFee || that_present_rebateFee) {
      if (!(this_present_rebateFee && that_present_rebateFee))
        return false;
      if (this.rebateFee != that.rebateFee)
        return false;
    }

    boolean this_present_monthMaidRate = true;
    boolean that_present_monthMaidRate = true;
    if (this_present_monthMaidRate || that_present_monthMaidRate) {
      if (!(this_present_monthMaidRate && that_present_monthMaidRate))
        return false;
      if (this.monthMaidRate != that.monthMaidRate)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_actualPrincipal = true;
    boolean that_present_actualPrincipal = true;
    if (this_present_actualPrincipal || that_present_actualPrincipal) {
      if (!(this_present_actualPrincipal && that_present_actualPrincipal))
        return false;
      if (this.actualPrincipal != that.actualPrincipal)
        return false;
    }

    boolean this_present_actualInterest = true;
    boolean that_present_actualInterest = true;
    if (this_present_actualInterest || that_present_actualInterest) {
      if (!(this_present_actualInterest && that_present_actualInterest))
        return false;
      if (this.actualInterest != that.actualInterest)
        return false;
    }

    boolean this_present_actualTotal = true;
    boolean that_present_actualTotal = true;
    if (this_present_actualTotal || that_present_actualTotal) {
      if (!(this_present_actualTotal && that_present_actualTotal))
        return false;
      if (this.actualTotal != that.actualTotal)
        return false;
    }

    boolean this_present_actualRepayDt = true && this.isSetActualRepayDt();
    boolean that_present_actualRepayDt = true && that.isSetActualRepayDt();
    if (this_present_actualRepayDt || that_present_actualRepayDt) {
      if (!(this_present_actualRepayDt && that_present_actualRepayDt))
        return false;
      if (!this.actualRepayDt.equals(that.actualRepayDt))
        return false;
    }

    boolean this_present_overdueDays = true;
    boolean that_present_overdueDays = true;
    if (this_present_overdueDays || that_present_overdueDays) {
      if (!(this_present_overdueDays && that_present_overdueDays))
        return false;
      if (this.overdueDays != that.overdueDays)
        return false;
    }

    boolean this_present_overdueMoney = true;
    boolean that_present_overdueMoney = true;
    if (this_present_overdueMoney || that_present_overdueMoney) {
      if (!(this_present_overdueMoney && that_present_overdueMoney))
        return false;
      if (this.overdueMoney != that.overdueMoney)
        return false;
    }

    boolean this_present_actualOverdueMoney = true;
    boolean that_present_actualOverdueMoney = true;
    if (this_present_actualOverdueMoney || that_present_actualOverdueMoney) {
      if (!(this_present_actualOverdueMoney && that_present_actualOverdueMoney))
        return false;
      if (this.actualOverdueMoney != that.actualOverdueMoney)
        return false;
    }

    boolean this_present_shouldOverdueMoney = true;
    boolean that_present_shouldOverdueMoney = true;
    if (this_present_shouldOverdueMoney || that_present_shouldOverdueMoney) {
      if (!(this_present_shouldOverdueMoney && that_present_shouldOverdueMoney))
        return false;
      if (this.shouldOverdueMoney != that.shouldOverdueMoney)
        return false;
    }

    boolean this_present_actualPenalty = true;
    boolean that_present_actualPenalty = true;
    if (this_present_actualPenalty || that_present_actualPenalty) {
      if (!(this_present_actualPenalty && that_present_actualPenalty))
        return false;
      if (this.actualPenalty != that.actualPenalty)
        return false;
    }

    boolean this_present_actualOverdueDt = true && this.isSetActualOverdueDt();
    boolean that_present_actualOverdueDt = true && that.isSetActualOverdueDt();
    if (this_present_actualOverdueDt || that_present_actualOverdueDt) {
      if (!(this_present_actualOverdueDt && that_present_actualOverdueDt))
        return false;
      if (!this.actualOverdueDt.equals(that.actualOverdueDt))
        return false;
    }

    boolean this_present_principalBalance = true;
    boolean that_present_principalBalance = true;
    if (this_present_principalBalance || that_present_principalBalance) {
      if (!(this_present_principalBalance && that_present_principalBalance))
        return false;
      if (this.principalBalance != that.principalBalance)
        return false;
    }

    boolean this_present_shouldPrepaymentFee = true;
    boolean that_present_shouldPrepaymentFee = true;
    if (this_present_shouldPrepaymentFee || that_present_shouldPrepaymentFee) {
      if (!(this_present_shouldPrepaymentFee && that_present_shouldPrepaymentFee))
        return false;
      if (this.shouldPrepaymentFee != that.shouldPrepaymentFee)
        return false;
    }

    boolean this_present_preRepayAmt = true;
    boolean that_present_preRepayAmt = true;
    if (this_present_preRepayAmt || that_present_preRepayAmt) {
      if (!(this_present_preRepayAmt && that_present_preRepayAmt))
        return false;
      if (this.preRepayAmt != that.preRepayAmt)
        return false;
    }

    boolean this_present_fine = true;
    boolean that_present_fine = true;
    if (this_present_fine || that_present_fine) {
      if (!(this_present_fine && that_present_fine))
        return false;
      if (this.fine != that.fine)
        return false;
    }

    boolean this_present_repayDate = true && this.isSetRepayDate();
    boolean that_present_repayDate = true && that.isSetRepayDate();
    if (this_present_repayDate || that_present_repayDate) {
      if (!(this_present_repayDate && that_present_repayDate))
        return false;
      if (!this.repayDate.equals(that.repayDate))
        return false;
    }

    boolean this_present_fineRates = true;
    boolean that_present_fineRates = true;
    if (this_present_fineRates || that_present_fineRates) {
      if (!(this_present_fineRates && that_present_fineRates))
        return false;
      if (this.fineRates != that.fineRates)
        return false;
    }

    boolean this_present_paymentId = true;
    boolean that_present_paymentId = true;
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (this.paymentId != that.paymentId)
        return false;
    }

    boolean this_present_overdueId = true;
    boolean that_present_overdueId = true;
    if (this_present_overdueId || that_present_overdueId) {
      if (!(this_present_overdueId && that_present_overdueId))
        return false;
      if (this.overdueId != that.overdueId)
        return false;
    }

    boolean this_present_overdueRate = true;
    boolean that_present_overdueRate = true;
    if (this_present_overdueRate || that_present_overdueRate) {
      if (!(this_present_overdueRate && that_present_overdueRate))
        return false;
      if (this.overdueRate != that.overdueRate)
        return false;
    }

    boolean this_present_preRepayId = true;
    boolean that_present_preRepayId = true;
    if (this_present_preRepayId || that_present_preRepayId) {
      if (!(this_present_preRepayId && that_present_preRepayId))
        return false;
      if (this.preRepayId != that.preRepayId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_overdueCycleNum = true;
    boolean that_present_overdueCycleNum = true;
    if (this_present_overdueCycleNum || that_present_overdueCycleNum) {
      if (!(this_present_overdueCycleNum && that_present_overdueCycleNum))
        return false;
      if (this.overdueCycleNum != that.overdueCycleNum)
        return false;
    }

    boolean this_present_shouldPenaltyTotal = true;
    boolean that_present_shouldPenaltyTotal = true;
    if (this_present_shouldPenaltyTotal || that_present_shouldPenaltyTotal) {
      if (!(this_present_shouldPenaltyTotal && that_present_shouldPenaltyTotal))
        return false;
      if (this.shouldPenaltyTotal != that.shouldPenaltyTotal)
        return false;
    }

    boolean this_present_shouldPenalty = true;
    boolean that_present_shouldPenalty = true;
    if (this_present_shouldPenalty || that_present_shouldPenalty) {
      if (!(this_present_shouldPenalty && that_present_shouldPenalty))
        return false;
      if (this.shouldPenalty != that.shouldPenalty)
        return false;
    }

    boolean this_present_repaymentType = true;
    boolean that_present_repaymentType = true;
    if (this_present_repaymentType || that_present_repaymentType) {
      if (!(this_present_repaymentType && that_present_repaymentType))
        return false;
      if (this.repaymentType != that.repaymentType)
        return false;
    }

    boolean this_present_repaymentMoney = true;
    boolean that_present_repaymentMoney = true;
    if (this_present_repaymentMoney || that_present_repaymentMoney) {
      if (!(this_present_repaymentMoney && that_present_repaymentMoney))
        return false;
      if (this.repaymentMoney != that.repaymentMoney)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_repaymentDate = true && this.isSetRepaymentDate();
    boolean that_present_repaymentDate = true && that.isSetRepaymentDate();
    if (this_present_repaymentDate || that_present_repaymentDate) {
      if (!(this_present_repaymentDate && that_present_repaymentDate))
        return false;
      if (!this.repaymentDate.equals(that.repaymentDate))
        return false;
    }

    boolean this_present_accountNo = true && this.isSetAccountNo();
    boolean that_present_accountNo = true && that.isSetAccountNo();
    if (this_present_accountNo || that_present_accountNo) {
      if (!(this_present_accountNo && that_present_accountNo))
        return false;
      if (!this.accountNo.equals(that.accountNo))
        return false;
    }

    boolean this_present_createrUser = true && this.isSetCreaterUser();
    boolean that_present_createrUser = true && that.isSetCreaterUser();
    if (this_present_createrUser || that_present_createrUser) {
      if (!(this_present_createrUser && that_present_createrUser))
        return false;
      if (!this.createrUser.equals(that.createrUser))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_planRepayDt = true && (isSetPlanRepayDt());
    list.add(present_planRepayDt);
    if (present_planRepayDt)
      list.add(planRepayDt);

    boolean present_planCycleNum = true;
    list.add(present_planCycleNum);
    if (present_planCycleNum)
      list.add(planCycleNum);

    boolean present_thisStatus = true;
    list.add(present_thisStatus);
    if (present_thisStatus)
      list.add(thisStatus);

    boolean present_planType = true;
    list.add(present_planType);
    if (present_planType)
      list.add(planType);

    boolean present_shouldPrincipal = true;
    list.add(present_shouldPrincipal);
    if (present_shouldPrincipal)
      list.add(shouldPrincipal);

    boolean present_shouldInterest = true;
    list.add(present_shouldInterest);
    if (present_shouldInterest)
      list.add(shouldInterest);

    boolean present_productInterest = true;
    list.add(present_productInterest);
    if (present_productInterest)
      list.add(productInterest);

    boolean present_rebateFee = true;
    list.add(present_rebateFee);
    if (present_rebateFee)
      list.add(rebateFee);

    boolean present_monthMaidRate = true;
    list.add(present_monthMaidRate);
    if (present_monthMaidRate)
      list.add(monthMaidRate);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_actualPrincipal = true;
    list.add(present_actualPrincipal);
    if (present_actualPrincipal)
      list.add(actualPrincipal);

    boolean present_actualInterest = true;
    list.add(present_actualInterest);
    if (present_actualInterest)
      list.add(actualInterest);

    boolean present_actualTotal = true;
    list.add(present_actualTotal);
    if (present_actualTotal)
      list.add(actualTotal);

    boolean present_actualRepayDt = true && (isSetActualRepayDt());
    list.add(present_actualRepayDt);
    if (present_actualRepayDt)
      list.add(actualRepayDt);

    boolean present_overdueDays = true;
    list.add(present_overdueDays);
    if (present_overdueDays)
      list.add(overdueDays);

    boolean present_overdueMoney = true;
    list.add(present_overdueMoney);
    if (present_overdueMoney)
      list.add(overdueMoney);

    boolean present_actualOverdueMoney = true;
    list.add(present_actualOverdueMoney);
    if (present_actualOverdueMoney)
      list.add(actualOverdueMoney);

    boolean present_shouldOverdueMoney = true;
    list.add(present_shouldOverdueMoney);
    if (present_shouldOverdueMoney)
      list.add(shouldOverdueMoney);

    boolean present_actualPenalty = true;
    list.add(present_actualPenalty);
    if (present_actualPenalty)
      list.add(actualPenalty);

    boolean present_actualOverdueDt = true && (isSetActualOverdueDt());
    list.add(present_actualOverdueDt);
    if (present_actualOverdueDt)
      list.add(actualOverdueDt);

    boolean present_principalBalance = true;
    list.add(present_principalBalance);
    if (present_principalBalance)
      list.add(principalBalance);

    boolean present_shouldPrepaymentFee = true;
    list.add(present_shouldPrepaymentFee);
    if (present_shouldPrepaymentFee)
      list.add(shouldPrepaymentFee);

    boolean present_preRepayAmt = true;
    list.add(present_preRepayAmt);
    if (present_preRepayAmt)
      list.add(preRepayAmt);

    boolean present_fine = true;
    list.add(present_fine);
    if (present_fine)
      list.add(fine);

    boolean present_repayDate = true && (isSetRepayDate());
    list.add(present_repayDate);
    if (present_repayDate)
      list.add(repayDate);

    boolean present_fineRates = true;
    list.add(present_fineRates);
    if (present_fineRates)
      list.add(fineRates);

    boolean present_paymentId = true;
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_overdueId = true;
    list.add(present_overdueId);
    if (present_overdueId)
      list.add(overdueId);

    boolean present_overdueRate = true;
    list.add(present_overdueRate);
    if (present_overdueRate)
      list.add(overdueRate);

    boolean present_preRepayId = true;
    list.add(present_preRepayId);
    if (present_preRepayId)
      list.add(preRepayId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_overdueCycleNum = true;
    list.add(present_overdueCycleNum);
    if (present_overdueCycleNum)
      list.add(overdueCycleNum);

    boolean present_shouldPenaltyTotal = true;
    list.add(present_shouldPenaltyTotal);
    if (present_shouldPenaltyTotal)
      list.add(shouldPenaltyTotal);

    boolean present_shouldPenalty = true;
    list.add(present_shouldPenalty);
    if (present_shouldPenalty)
      list.add(shouldPenalty);

    boolean present_repaymentType = true;
    list.add(present_repaymentType);
    if (present_repaymentType)
      list.add(repaymentType);

    boolean present_repaymentMoney = true;
    list.add(present_repaymentMoney);
    if (present_repaymentMoney)
      list.add(repaymentMoney);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_repaymentDate = true && (isSetRepaymentDate());
    list.add(present_repaymentDate);
    if (present_repaymentDate)
      list.add(repaymentDate);

    boolean present_accountNo = true && (isSetAccountNo());
    list.add(present_accountNo);
    if (present_accountNo)
      list.add(accountNo);

    boolean present_createrUser = true && (isSetCreaterUser());
    list.add(present_createrUser);
    if (present_createrUser)
      list.add(createrUser);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentDetailIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayDt()).compareTo(other.isSetPlanRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayDt, other.planRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleNum()).compareTo(other.isSetPlanCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleNum, other.planCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThisStatus()).compareTo(other.isSetThisStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThisStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thisStatus, other.thisStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanType()).compareTo(other.isSetPlanType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planType, other.planType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrincipal()).compareTo(other.isSetShouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrincipal, other.shouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldInterest()).compareTo(other.isSetShouldInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldInterest, other.shouldInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductInterest()).compareTo(other.isSetProductInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInterest, other.productInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRebateFee()).compareTo(other.isSetRebateFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebateFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebateFee, other.rebateFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthMaidRate()).compareTo(other.isSetMonthMaidRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthMaidRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthMaidRate, other.monthMaidRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPrincipal()).compareTo(other.isSetActualPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPrincipal, other.actualPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualInterest()).compareTo(other.isSetActualInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualInterest, other.actualInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualTotal()).compareTo(other.isSetActualTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualTotal, other.actualTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualRepayDt()).compareTo(other.isSetActualRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualRepayDt, other.actualRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDays()).compareTo(other.isSetOverdueDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDays, other.overdueDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueMoney()).compareTo(other.isSetOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueMoney, other.overdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualOverdueMoney()).compareTo(other.isSetActualOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualOverdueMoney, other.actualOverdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOverdueMoney()).compareTo(other.isSetShouldOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOverdueMoney, other.shouldOverdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPenalty()).compareTo(other.isSetActualPenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPenalty, other.actualPenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualOverdueDt()).compareTo(other.isSetActualOverdueDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualOverdueDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualOverdueDt, other.actualOverdueDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalBalance()).compareTo(other.isSetPrincipalBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalBalance, other.principalBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrepaymentFee()).compareTo(other.isSetShouldPrepaymentFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrepaymentFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrepaymentFee, other.shouldPrepaymentFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayAmt()).compareTo(other.isSetPreRepayAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayAmt, other.preRepayAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFine()).compareTo(other.isSetFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fine, other.fine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDate()).compareTo(other.isSetRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDate, other.repayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFineRates()).compareTo(other.isSetFineRates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFineRates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fineRates, other.fineRates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueId()).compareTo(other.isSetOverdueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueId, other.overdueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueRate()).compareTo(other.isSetOverdueRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueRate, other.overdueRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreRepayId()).compareTo(other.isSetPreRepayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreRepayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preRepayId, other.preRepayId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueCycleNum()).compareTo(other.isSetOverdueCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueCycleNum, other.overdueCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPenaltyTotal()).compareTo(other.isSetShouldPenaltyTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPenaltyTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPenaltyTotal, other.shouldPenaltyTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPenalty()).compareTo(other.isSetShouldPenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPenalty, other.shouldPenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentType()).compareTo(other.isSetRepaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentType, other.repaymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentMoney()).compareTo(other.isSetRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentMoney, other.repaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDate()).compareTo(other.isSetRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDate, other.repaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterUser()).compareTo(other.isSetCreaterUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrUser, other.createrUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentDetailIndexDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayDt:");
    if (this.planRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleNum:");
    sb.append(this.planCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thisStatus:");
    sb.append(this.thisStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planType:");
    sb.append(this.planType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrincipal:");
    sb.append(this.shouldPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldInterest:");
    sb.append(this.shouldInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productInterest:");
    sb.append(this.productInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rebateFee:");
    sb.append(this.rebateFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthMaidRate:");
    sb.append(this.monthMaidRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPrincipal:");
    sb.append(this.actualPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualInterest:");
    sb.append(this.actualInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualTotal:");
    sb.append(this.actualTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualRepayDt:");
    if (this.actualRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.actualRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDays:");
    sb.append(this.overdueDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueMoney:");
    sb.append(this.overdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualOverdueMoney:");
    sb.append(this.actualOverdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOverdueMoney:");
    sb.append(this.shouldOverdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPenalty:");
    sb.append(this.actualPenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualOverdueDt:");
    if (this.actualOverdueDt == null) {
      sb.append("null");
    } else {
      sb.append(this.actualOverdueDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalBalance:");
    sb.append(this.principalBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrepaymentFee:");
    sb.append(this.shouldPrepaymentFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayAmt:");
    sb.append(this.preRepayAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fine:");
    sb.append(this.fine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDate:");
    if (this.repayDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fineRates:");
    sb.append(this.fineRates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentId:");
    sb.append(this.paymentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueId:");
    sb.append(this.overdueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueRate:");
    sb.append(this.overdueRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preRepayId:");
    sb.append(this.preRepayId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueCycleNum:");
    sb.append(this.overdueCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPenaltyTotal:");
    sb.append(this.shouldPenaltyTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPenalty:");
    sb.append(this.shouldPenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentType:");
    sb.append(this.repaymentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentMoney:");
    sb.append(this.repaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDate:");
    if (this.repaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountNo:");
    if (this.accountNo == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrUser:");
    if (this.createrUser == null) {
      sb.append("null");
    } else {
      sb.append(this.createrUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentDetailIndexDTOStandardSchemeFactory implements SchemeFactory {
    public RepaymentDetailIndexDTOStandardScheme getScheme() {
      return new RepaymentDetailIndexDTOStandardScheme();
    }
  }

  private static class RepaymentDetailIndexDTOStandardScheme extends StandardScheme<RepaymentDetailIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentDetailIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAN_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayDt = iprot.readString();
              struct.setPlanRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLAN_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planCycleNum = iprot.readI32();
              struct.setPlanCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THIS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thisStatus = iprot.readI32();
              struct.setThisStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLAN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planType = iprot.readI32();
              struct.setPlanTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPrincipal = iprot.readDouble();
              struct.setShouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOULD_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldInterest = iprot.readDouble();
              struct.setShouldInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRODUCT_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.productInterest = iprot.readDouble();
              struct.setProductInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REBATE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rebateFee = iprot.readDouble();
              struct.setRebateFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MONTH_MAID_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthMaidRate = iprot.readDouble();
              struct.setMonthMaidRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total = iprot.readDouble();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACTUAL_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualPrincipal = iprot.readDouble();
              struct.setActualPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTUAL_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualInterest = iprot.readDouble();
              struct.setActualInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ACTUAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualTotal = iprot.readDouble();
              struct.setActualTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACTUAL_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualRepayDt = iprot.readString();
              struct.setActualRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OVERDUE_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDays = iprot.readI32();
              struct.setOverdueDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueMoney = iprot.readDouble();
              struct.setOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACTUAL_OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualOverdueMoney = iprot.readDouble();
              struct.setActualOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SHOULD_OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldOverdueMoney = iprot.readDouble();
              struct.setShouldOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACTUAL_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualPenalty = iprot.readDouble();
              struct.setActualPenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ACTUAL_OVERDUE_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualOverdueDt = iprot.readString();
              struct.setActualOverdueDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRINCIPAL_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principalBalance = iprot.readDouble();
              struct.setPrincipalBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SHOULD_PREPAYMENT_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPrepaymentFee = iprot.readDouble();
              struct.setShouldPrepaymentFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PRE_REPAY_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preRepayAmt = iprot.readDouble();
              struct.setPreRepayAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fine = iprot.readDouble();
              struct.setFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDate = iprot.readString();
              struct.setRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // FINE_RATES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fineRates = iprot.readDouble();
              struct.setFineRatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paymentId = iprot.readI32();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // OVERDUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueId = iprot.readI32();
              struct.setOverdueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OVERDUE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueRate = iprot.readDouble();
              struct.setOverdueRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PRE_REPAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.preRepayId = iprot.readI32();
              struct.setPreRepayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // OVERDUE_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueCycleNum = iprot.readI32();
              struct.setOverdueCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // SHOULD_PENALTY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPenaltyTotal = iprot.readDouble();
              struct.setShouldPenaltyTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // SHOULD_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPenalty = iprot.readDouble();
              struct.setShouldPenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // REPAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentType = iprot.readI32();
              struct.setRepaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repaymentMoney = iprot.readDouble();
              struct.setRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentDate = iprot.readString();
              struct.setRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // ACCOUNT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNo = iprot.readString();
              struct.setAccountNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CREATER_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrUser = iprot.readString();
              struct.setCreaterUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentDetailIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.planRepayDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.planCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THIS_STATUS_FIELD_DESC);
      oprot.writeI32(struct.thisStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.planType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.shouldPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.shouldInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.productInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REBATE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.rebateFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_MAID_RATE_FIELD_DESC);
      oprot.writeDouble(struct.monthMaidRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.actualPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.actualInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.actualTotal);
      oprot.writeFieldEnd();
      if (struct.actualRepayDt != null) {
        oprot.writeFieldBegin(ACTUAL_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.actualRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_DAYS_FIELD_DESC);
      oprot.writeI32(struct.overdueDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.overdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.actualOverdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.shouldOverdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.actualPenalty);
      oprot.writeFieldEnd();
      if (struct.actualOverdueDt != null) {
        oprot.writeFieldBegin(ACTUAL_OVERDUE_DT_FIELD_DESC);
        oprot.writeString(struct.actualOverdueDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRINCIPAL_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.principalBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PREPAYMENT_FEE_FIELD_DESC);
      oprot.writeDouble(struct.shouldPrepaymentFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_REPAY_AMT_FIELD_DESC);
      oprot.writeDouble(struct.preRepayAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINE_FIELD_DESC);
      oprot.writeDouble(struct.fine);
      oprot.writeFieldEnd();
      if (struct.repayDate != null) {
        oprot.writeFieldBegin(REPAY_DATE_FIELD_DESC);
        oprot.writeString(struct.repayDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINE_RATES_FIELD_DESC);
      oprot.writeDouble(struct.fineRates);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.paymentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_ID_FIELD_DESC);
      oprot.writeI32(struct.overdueId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.overdueRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_REPAY_ID_FIELD_DESC);
      oprot.writeI32(struct.preRepayId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.overdueCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PENALTY_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.shouldPenaltyTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.shouldPenalty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repaymentType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.repaymentMoney);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentDate != null) {
        oprot.writeFieldBegin(REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.repaymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.accountNo != null) {
        oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
        oprot.writeString(struct.accountNo);
        oprot.writeFieldEnd();
      }
      if (struct.createrUser != null) {
        oprot.writeFieldBegin(CREATER_USER_FIELD_DESC);
        oprot.writeString(struct.createrUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentDetailIndexDTOTupleSchemeFactory implements SchemeFactory {
    public RepaymentDetailIndexDTOTupleScheme getScheme() {
      return new RepaymentDetailIndexDTOTupleScheme();
    }
  }

  private static class RepaymentDetailIndexDTOTupleScheme extends TupleScheme<RepaymentDetailIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentDetailIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetPlanRepayDt()) {
        optionals.set(1);
      }
      if (struct.isSetPlanCycleNum()) {
        optionals.set(2);
      }
      if (struct.isSetThisStatus()) {
        optionals.set(3);
      }
      if (struct.isSetPlanType()) {
        optionals.set(4);
      }
      if (struct.isSetShouldPrincipal()) {
        optionals.set(5);
      }
      if (struct.isSetShouldInterest()) {
        optionals.set(6);
      }
      if (struct.isSetProductInterest()) {
        optionals.set(7);
      }
      if (struct.isSetRebateFee()) {
        optionals.set(8);
      }
      if (struct.isSetMonthMaidRate()) {
        optionals.set(9);
      }
      if (struct.isSetTotal()) {
        optionals.set(10);
      }
      if (struct.isSetActualPrincipal()) {
        optionals.set(11);
      }
      if (struct.isSetActualInterest()) {
        optionals.set(12);
      }
      if (struct.isSetActualTotal()) {
        optionals.set(13);
      }
      if (struct.isSetActualRepayDt()) {
        optionals.set(14);
      }
      if (struct.isSetOverdueDays()) {
        optionals.set(15);
      }
      if (struct.isSetOverdueMoney()) {
        optionals.set(16);
      }
      if (struct.isSetActualOverdueMoney()) {
        optionals.set(17);
      }
      if (struct.isSetShouldOverdueMoney()) {
        optionals.set(18);
      }
      if (struct.isSetActualPenalty()) {
        optionals.set(19);
      }
      if (struct.isSetActualOverdueDt()) {
        optionals.set(20);
      }
      if (struct.isSetPrincipalBalance()) {
        optionals.set(21);
      }
      if (struct.isSetShouldPrepaymentFee()) {
        optionals.set(22);
      }
      if (struct.isSetPreRepayAmt()) {
        optionals.set(23);
      }
      if (struct.isSetFine()) {
        optionals.set(24);
      }
      if (struct.isSetRepayDate()) {
        optionals.set(25);
      }
      if (struct.isSetFineRates()) {
        optionals.set(26);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(27);
      }
      if (struct.isSetOverdueId()) {
        optionals.set(28);
      }
      if (struct.isSetOverdueRate()) {
        optionals.set(29);
      }
      if (struct.isSetPreRepayId()) {
        optionals.set(30);
      }
      if (struct.isSetPage()) {
        optionals.set(31);
      }
      if (struct.isSetRows()) {
        optionals.set(32);
      }
      if (struct.isSetProjectId()) {
        optionals.set(33);
      }
      if (struct.isSetOverdueCycleNum()) {
        optionals.set(34);
      }
      if (struct.isSetShouldPenaltyTotal()) {
        optionals.set(35);
      }
      if (struct.isSetShouldPenalty()) {
        optionals.set(36);
      }
      if (struct.isSetRepaymentType()) {
        optionals.set(37);
      }
      if (struct.isSetRepaymentMoney()) {
        optionals.set(38);
      }
      if (struct.isSetRemark()) {
        optionals.set(39);
      }
      if (struct.isSetRepaymentDate()) {
        optionals.set(40);
      }
      if (struct.isSetAccountNo()) {
        optionals.set(41);
      }
      if (struct.isSetCreaterUser()) {
        optionals.set(42);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(43);
      }
      oprot.writeBitSet(optionals, 44);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetPlanRepayDt()) {
        oprot.writeString(struct.planRepayDt);
      }
      if (struct.isSetPlanCycleNum()) {
        oprot.writeI32(struct.planCycleNum);
      }
      if (struct.isSetThisStatus()) {
        oprot.writeI32(struct.thisStatus);
      }
      if (struct.isSetPlanType()) {
        oprot.writeI32(struct.planType);
      }
      if (struct.isSetShouldPrincipal()) {
        oprot.writeDouble(struct.shouldPrincipal);
      }
      if (struct.isSetShouldInterest()) {
        oprot.writeDouble(struct.shouldInterest);
      }
      if (struct.isSetProductInterest()) {
        oprot.writeDouble(struct.productInterest);
      }
      if (struct.isSetRebateFee()) {
        oprot.writeDouble(struct.rebateFee);
      }
      if (struct.isSetMonthMaidRate()) {
        oprot.writeDouble(struct.monthMaidRate);
      }
      if (struct.isSetTotal()) {
        oprot.writeDouble(struct.total);
      }
      if (struct.isSetActualPrincipal()) {
        oprot.writeDouble(struct.actualPrincipal);
      }
      if (struct.isSetActualInterest()) {
        oprot.writeDouble(struct.actualInterest);
      }
      if (struct.isSetActualTotal()) {
        oprot.writeDouble(struct.actualTotal);
      }
      if (struct.isSetActualRepayDt()) {
        oprot.writeString(struct.actualRepayDt);
      }
      if (struct.isSetOverdueDays()) {
        oprot.writeI32(struct.overdueDays);
      }
      if (struct.isSetOverdueMoney()) {
        oprot.writeDouble(struct.overdueMoney);
      }
      if (struct.isSetActualOverdueMoney()) {
        oprot.writeDouble(struct.actualOverdueMoney);
      }
      if (struct.isSetShouldOverdueMoney()) {
        oprot.writeDouble(struct.shouldOverdueMoney);
      }
      if (struct.isSetActualPenalty()) {
        oprot.writeDouble(struct.actualPenalty);
      }
      if (struct.isSetActualOverdueDt()) {
        oprot.writeString(struct.actualOverdueDt);
      }
      if (struct.isSetPrincipalBalance()) {
        oprot.writeDouble(struct.principalBalance);
      }
      if (struct.isSetShouldPrepaymentFee()) {
        oprot.writeDouble(struct.shouldPrepaymentFee);
      }
      if (struct.isSetPreRepayAmt()) {
        oprot.writeDouble(struct.preRepayAmt);
      }
      if (struct.isSetFine()) {
        oprot.writeDouble(struct.fine);
      }
      if (struct.isSetRepayDate()) {
        oprot.writeString(struct.repayDate);
      }
      if (struct.isSetFineRates()) {
        oprot.writeDouble(struct.fineRates);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeI32(struct.paymentId);
      }
      if (struct.isSetOverdueId()) {
        oprot.writeI32(struct.overdueId);
      }
      if (struct.isSetOverdueRate()) {
        oprot.writeDouble(struct.overdueRate);
      }
      if (struct.isSetPreRepayId()) {
        oprot.writeI32(struct.preRepayId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetOverdueCycleNum()) {
        oprot.writeI32(struct.overdueCycleNum);
      }
      if (struct.isSetShouldPenaltyTotal()) {
        oprot.writeDouble(struct.shouldPenaltyTotal);
      }
      if (struct.isSetShouldPenalty()) {
        oprot.writeDouble(struct.shouldPenalty);
      }
      if (struct.isSetRepaymentType()) {
        oprot.writeI32(struct.repaymentType);
      }
      if (struct.isSetRepaymentMoney()) {
        oprot.writeDouble(struct.repaymentMoney);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetRepaymentDate()) {
        oprot.writeString(struct.repaymentDate);
      }
      if (struct.isSetAccountNo()) {
        oprot.writeString(struct.accountNo);
      }
      if (struct.isSetCreaterUser()) {
        oprot.writeString(struct.createrUser);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentDetailIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(44);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.planRepayDt = iprot.readString();
        struct.setPlanRepayDtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.planCycleNum = iprot.readI32();
        struct.setPlanCycleNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.thisStatus = iprot.readI32();
        struct.setThisStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.planType = iprot.readI32();
        struct.setPlanTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shouldPrincipal = iprot.readDouble();
        struct.setShouldPrincipalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shouldInterest = iprot.readDouble();
        struct.setShouldInterestIsSet(true);
      }
      if (incoming.get(7)) {
        struct.productInterest = iprot.readDouble();
        struct.setProductInterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rebateFee = iprot.readDouble();
        struct.setRebateFeeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.monthMaidRate = iprot.readDouble();
        struct.setMonthMaidRateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.total = iprot.readDouble();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(11)) {
        struct.actualPrincipal = iprot.readDouble();
        struct.setActualPrincipalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.actualInterest = iprot.readDouble();
        struct.setActualInterestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.actualTotal = iprot.readDouble();
        struct.setActualTotalIsSet(true);
      }
      if (incoming.get(14)) {
        struct.actualRepayDt = iprot.readString();
        struct.setActualRepayDtIsSet(true);
      }
      if (incoming.get(15)) {
        struct.overdueDays = iprot.readI32();
        struct.setOverdueDaysIsSet(true);
      }
      if (incoming.get(16)) {
        struct.overdueMoney = iprot.readDouble();
        struct.setOverdueMoneyIsSet(true);
      }
      if (incoming.get(17)) {
        struct.actualOverdueMoney = iprot.readDouble();
        struct.setActualOverdueMoneyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.shouldOverdueMoney = iprot.readDouble();
        struct.setShouldOverdueMoneyIsSet(true);
      }
      if (incoming.get(19)) {
        struct.actualPenalty = iprot.readDouble();
        struct.setActualPenaltyIsSet(true);
      }
      if (incoming.get(20)) {
        struct.actualOverdueDt = iprot.readString();
        struct.setActualOverdueDtIsSet(true);
      }
      if (incoming.get(21)) {
        struct.principalBalance = iprot.readDouble();
        struct.setPrincipalBalanceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.shouldPrepaymentFee = iprot.readDouble();
        struct.setShouldPrepaymentFeeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.preRepayAmt = iprot.readDouble();
        struct.setPreRepayAmtIsSet(true);
      }
      if (incoming.get(24)) {
        struct.fine = iprot.readDouble();
        struct.setFineIsSet(true);
      }
      if (incoming.get(25)) {
        struct.repayDate = iprot.readString();
        struct.setRepayDateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.fineRates = iprot.readDouble();
        struct.setFineRatesIsSet(true);
      }
      if (incoming.get(27)) {
        struct.paymentId = iprot.readI32();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(28)) {
        struct.overdueId = iprot.readI32();
        struct.setOverdueIdIsSet(true);
      }
      if (incoming.get(29)) {
        struct.overdueRate = iprot.readDouble();
        struct.setOverdueRateIsSet(true);
      }
      if (incoming.get(30)) {
        struct.preRepayId = iprot.readI32();
        struct.setPreRepayIdIsSet(true);
      }
      if (incoming.get(31)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(32)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(33)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(34)) {
        struct.overdueCycleNum = iprot.readI32();
        struct.setOverdueCycleNumIsSet(true);
      }
      if (incoming.get(35)) {
        struct.shouldPenaltyTotal = iprot.readDouble();
        struct.setShouldPenaltyTotalIsSet(true);
      }
      if (incoming.get(36)) {
        struct.shouldPenalty = iprot.readDouble();
        struct.setShouldPenaltyIsSet(true);
      }
      if (incoming.get(37)) {
        struct.repaymentType = iprot.readI32();
        struct.setRepaymentTypeIsSet(true);
      }
      if (incoming.get(38)) {
        struct.repaymentMoney = iprot.readDouble();
        struct.setRepaymentMoneyIsSet(true);
      }
      if (incoming.get(39)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(40)) {
        struct.repaymentDate = iprot.readString();
        struct.setRepaymentDateIsSet(true);
      }
      if (incoming.get(41)) {
        struct.accountNo = iprot.readString();
        struct.setAccountNoIsSet(true);
      }
      if (incoming.get(42)) {
        struct.createrUser = iprot.readString();
        struct.setCreaterUserIsSet(true);
      }
      if (incoming.get(43)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class Contract implements org.apache.thrift.TBase<Contract, Contract._Fields>, java.io.Serializable, Cloneable, Comparable<Contract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Contract");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCatelog", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONTRACT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTemplateId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTRACT_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTypeCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTRACT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PROJECT_NUBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNuber", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ECONOMY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("economyType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CONTRACT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractUrl", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField IS_LEGAL_CONFIRMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isLegalConfirmation", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField IS_SIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isSigned", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SIGNED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedDate", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CUSTOMER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("customerType", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField TEMP_CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("tempContractNo", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CONTRACT_CATELOG_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCatelogKey", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField FIRST_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("firstNum", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField SECOND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("secondNum", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField CONTRACT_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTypeText", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField TEMPLATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("templateName", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField MORTGAGE_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageBranch", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField OLD_PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldProjectId", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)35);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public int contractCatelog; // required
  public int contractType; // required
  public int contractTemplateId; // required
  public String contractNo; // required
  public String contractTypeCode; // required
  public String contractName; // required
  public String projectNuber; // required
  public int page; // required
  public int rows; // required
  public int total; // required
  public int status; // required
  public int projectId; // required
  public int customerId; // required
  public int economyType; // required
  public String contractUrl; // required
  public int isLegalConfirmation; // required
  public int isSigned; // required
  public String signedDate; // required
  public String remark; // required
  public String projectName; // required
  public int customerType; // required
  public String tempContractNo; // required
  public String contractCatelogKey; // required
  public String num; // required
  public String firstNum; // required
  public String secondNum; // required
  public String contractTypeText; // required
  public String customerName; // required
  public String templateName; // required
  public String mortgageBranch; // required
  public int parentId; // required
  public int oldProjectId; // required
  public int refId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    CONTRACT_CATELOG((short)3, "contractCatelog"),
    CONTRACT_TYPE((short)4, "contractType"),
    CONTRACT_TEMPLATE_ID((short)5, "contractTemplateId"),
    CONTRACT_NO((short)6, "contractNo"),
    CONTRACT_TYPE_CODE((short)7, "contractTypeCode"),
    CONTRACT_NAME((short)8, "contractName"),
    PROJECT_NUBER((short)9, "projectNuber"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    TOTAL((short)12, "total"),
    STATUS((short)13, "status"),
    PROJECT_ID((short)14, "projectId"),
    CUSTOMER_ID((short)15, "customerId"),
    ECONOMY_TYPE((short)16, "economyType"),
    CONTRACT_URL((short)17, "contractUrl"),
    IS_LEGAL_CONFIRMATION((short)18, "isLegalConfirmation"),
    IS_SIGNED((short)19, "isSigned"),
    SIGNED_DATE((short)20, "signedDate"),
    REMARK((short)21, "remark"),
    PROJECT_NAME((short)22, "projectName"),
    CUSTOMER_TYPE((short)23, "customerType"),
    TEMP_CONTRACT_NO((short)24, "tempContractNo"),
    CONTRACT_CATELOG_KEY((short)25, "contractCatelogKey"),
    NUM((short)26, "num"),
    FIRST_NUM((short)27, "firstNum"),
    SECOND_NUM((short)28, "secondNum"),
    CONTRACT_TYPE_TEXT((short)29, "contractTypeText"),
    CUSTOMER_NAME((short)30, "customerName"),
    TEMPLATE_NAME((short)31, "templateName"),
    MORTGAGE_BRANCH((short)32, "mortgageBranch"),
    PARENT_ID((short)33, "parentId"),
    OLD_PROJECT_ID((short)34, "oldProjectId"),
    REF_ID((short)35, "refId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // CONTRACT_CATELOG
          return CONTRACT_CATELOG;
        case 4: // CONTRACT_TYPE
          return CONTRACT_TYPE;
        case 5: // CONTRACT_TEMPLATE_ID
          return CONTRACT_TEMPLATE_ID;
        case 6: // CONTRACT_NO
          return CONTRACT_NO;
        case 7: // CONTRACT_TYPE_CODE
          return CONTRACT_TYPE_CODE;
        case 8: // CONTRACT_NAME
          return CONTRACT_NAME;
        case 9: // PROJECT_NUBER
          return PROJECT_NUBER;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // TOTAL
          return TOTAL;
        case 13: // STATUS
          return STATUS;
        case 14: // PROJECT_ID
          return PROJECT_ID;
        case 15: // CUSTOMER_ID
          return CUSTOMER_ID;
        case 16: // ECONOMY_TYPE
          return ECONOMY_TYPE;
        case 17: // CONTRACT_URL
          return CONTRACT_URL;
        case 18: // IS_LEGAL_CONFIRMATION
          return IS_LEGAL_CONFIRMATION;
        case 19: // IS_SIGNED
          return IS_SIGNED;
        case 20: // SIGNED_DATE
          return SIGNED_DATE;
        case 21: // REMARK
          return REMARK;
        case 22: // PROJECT_NAME
          return PROJECT_NAME;
        case 23: // CUSTOMER_TYPE
          return CUSTOMER_TYPE;
        case 24: // TEMP_CONTRACT_NO
          return TEMP_CONTRACT_NO;
        case 25: // CONTRACT_CATELOG_KEY
          return CONTRACT_CATELOG_KEY;
        case 26: // NUM
          return NUM;
        case 27: // FIRST_NUM
          return FIRST_NUM;
        case 28: // SECOND_NUM
          return SECOND_NUM;
        case 29: // CONTRACT_TYPE_TEXT
          return CONTRACT_TYPE_TEXT;
        case 30: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 31: // TEMPLATE_NAME
          return TEMPLATE_NAME;
        case 32: // MORTGAGE_BRANCH
          return MORTGAGE_BRANCH;
        case 33: // PARENT_ID
          return PARENT_ID;
        case 34: // OLD_PROJECT_ID
          return OLD_PROJECT_ID;
        case 35: // REF_ID
          return REF_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __CONTRACTCATELOG_ISSET_ID = 2;
  private static final int __CONTRACTTYPE_ISSET_ID = 3;
  private static final int __CONTRACTTEMPLATEID_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __TOTAL_ISSET_ID = 7;
  private static final int __STATUS_ISSET_ID = 8;
  private static final int __PROJECTID_ISSET_ID = 9;
  private static final int __CUSTOMERID_ISSET_ID = 10;
  private static final int __ECONOMYTYPE_ISSET_ID = 11;
  private static final int __ISLEGALCONFIRMATION_ISSET_ID = 12;
  private static final int __ISSIGNED_ISSET_ID = 13;
  private static final int __CUSTOMERTYPE_ISSET_ID = 14;
  private static final int __PARENTID_ISSET_ID = 15;
  private static final int __OLDPROJECTID_ISSET_ID = 16;
  private static final int __REFID_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("contractCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contractType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("contractTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("contractTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUBER, new org.apache.thrift.meta_data.FieldMetaData("projectNuber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ECONOMY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("economyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_URL, new org.apache.thrift.meta_data.FieldMetaData("contractUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_LEGAL_CONFIRMATION, new org.apache.thrift.meta_data.FieldMetaData("isLegalConfirmation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SIGNED, new org.apache.thrift.meta_data.FieldMetaData("isSigned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNED_DATE, new org.apache.thrift.meta_data.FieldMetaData("signedDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("customerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMP_CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("tempContractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_CATELOG_KEY, new org.apache.thrift.meta_data.FieldMetaData("contractCatelogKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_NUM, new org.apache.thrift.meta_data.FieldMetaData("firstNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECOND_NUM, new org.apache.thrift.meta_data.FieldMetaData("secondNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("contractTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPLATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("templateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("mortgageBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("oldProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Contract.class, metaDataMap);
  }

  public Contract() {
  }

  public Contract(
    int pid,
    int loanId,
    int contractCatelog,
    int contractType,
    int contractTemplateId,
    String contractNo,
    String contractTypeCode,
    String contractName,
    String projectNuber,
    int page,
    int rows,
    int total,
    int status,
    int projectId,
    int customerId,
    int economyType,
    String contractUrl,
    int isLegalConfirmation,
    int isSigned,
    String signedDate,
    String remark,
    String projectName,
    int customerType,
    String tempContractNo,
    String contractCatelogKey,
    String num,
    String firstNum,
    String secondNum,
    String contractTypeText,
    String customerName,
    String templateName,
    String mortgageBranch,
    int parentId,
    int oldProjectId,
    int refId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.contractCatelog = contractCatelog;
    setContractCatelogIsSet(true);
    this.contractType = contractType;
    setContractTypeIsSet(true);
    this.contractTemplateId = contractTemplateId;
    setContractTemplateIdIsSet(true);
    this.contractNo = contractNo;
    this.contractTypeCode = contractTypeCode;
    this.contractName = contractName;
    this.projectNuber = projectNuber;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.customerId = customerId;
    setCustomerIdIsSet(true);
    this.economyType = economyType;
    setEconomyTypeIsSet(true);
    this.contractUrl = contractUrl;
    this.isLegalConfirmation = isLegalConfirmation;
    setIsLegalConfirmationIsSet(true);
    this.isSigned = isSigned;
    setIsSignedIsSet(true);
    this.signedDate = signedDate;
    this.remark = remark;
    this.projectName = projectName;
    this.customerType = customerType;
    setCustomerTypeIsSet(true);
    this.tempContractNo = tempContractNo;
    this.contractCatelogKey = contractCatelogKey;
    this.num = num;
    this.firstNum = firstNum;
    this.secondNum = secondNum;
    this.contractTypeText = contractTypeText;
    this.customerName = customerName;
    this.templateName = templateName;
    this.mortgageBranch = mortgageBranch;
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.oldProjectId = oldProjectId;
    setOldProjectIdIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Contract(Contract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    this.contractCatelog = other.contractCatelog;
    this.contractType = other.contractType;
    this.contractTemplateId = other.contractTemplateId;
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    if (other.isSetContractTypeCode()) {
      this.contractTypeCode = other.contractTypeCode;
    }
    if (other.isSetContractName()) {
      this.contractName = other.contractName;
    }
    if (other.isSetProjectNuber()) {
      this.projectNuber = other.projectNuber;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.total = other.total;
    this.status = other.status;
    this.projectId = other.projectId;
    this.customerId = other.customerId;
    this.economyType = other.economyType;
    if (other.isSetContractUrl()) {
      this.contractUrl = other.contractUrl;
    }
    this.isLegalConfirmation = other.isLegalConfirmation;
    this.isSigned = other.isSigned;
    if (other.isSetSignedDate()) {
      this.signedDate = other.signedDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.customerType = other.customerType;
    if (other.isSetTempContractNo()) {
      this.tempContractNo = other.tempContractNo;
    }
    if (other.isSetContractCatelogKey()) {
      this.contractCatelogKey = other.contractCatelogKey;
    }
    if (other.isSetNum()) {
      this.num = other.num;
    }
    if (other.isSetFirstNum()) {
      this.firstNum = other.firstNum;
    }
    if (other.isSetSecondNum()) {
      this.secondNum = other.secondNum;
    }
    if (other.isSetContractTypeText()) {
      this.contractTypeText = other.contractTypeText;
    }
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetTemplateName()) {
      this.templateName = other.templateName;
    }
    if (other.isSetMortgageBranch()) {
      this.mortgageBranch = other.mortgageBranch;
    }
    this.parentId = other.parentId;
    this.oldProjectId = other.oldProjectId;
    this.refId = other.refId;
  }

  public Contract deepCopy() {
    return new Contract(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    setContractCatelogIsSet(false);
    this.contractCatelog = 0;
    setContractTypeIsSet(false);
    this.contractType = 0;
    setContractTemplateIdIsSet(false);
    this.contractTemplateId = 0;
    this.contractNo = null;
    this.contractTypeCode = null;
    this.contractName = null;
    this.projectNuber = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setTotalIsSet(false);
    this.total = 0;
    setStatusIsSet(false);
    this.status = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setCustomerIdIsSet(false);
    this.customerId = 0;
    setEconomyTypeIsSet(false);
    this.economyType = 0;
    this.contractUrl = null;
    setIsLegalConfirmationIsSet(false);
    this.isLegalConfirmation = 0;
    setIsSignedIsSet(false);
    this.isSigned = 0;
    this.signedDate = null;
    this.remark = null;
    this.projectName = null;
    setCustomerTypeIsSet(false);
    this.customerType = 0;
    this.tempContractNo = null;
    this.contractCatelogKey = null;
    this.num = null;
    this.firstNum = null;
    this.secondNum = null;
    this.contractTypeText = null;
    this.customerName = null;
    this.templateName = null;
    this.mortgageBranch = null;
    setParentIdIsSet(false);
    this.parentId = 0;
    setOldProjectIdIsSet(false);
    this.oldProjectId = 0;
    setRefIdIsSet(false);
    this.refId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public Contract setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public Contract setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public int getContractCatelog() {
    return this.contractCatelog;
  }

  public Contract setContractCatelog(int contractCatelog) {
    this.contractCatelog = contractCatelog;
    setContractCatelogIsSet(true);
    return this;
  }

  public void unsetContractCatelog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTCATELOG_ISSET_ID);
  }

  /** Returns true if field contractCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCatelog() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTCATELOG_ISSET_ID);
  }

  public void setContractCatelogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTCATELOG_ISSET_ID, value);
  }

  public int getContractType() {
    return this.contractType;
  }

  public Contract setContractType(int contractType) {
    this.contractType = contractType;
    setContractTypeIsSet(true);
    return this;
  }

  public void unsetContractType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTTYPE_ISSET_ID);
  }

  /** Returns true if field contractType is set (has been assigned a value) and false otherwise */
  public boolean isSetContractType() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTTYPE_ISSET_ID);
  }

  public void setContractTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTTYPE_ISSET_ID, value);
  }

  public int getContractTemplateId() {
    return this.contractTemplateId;
  }

  public Contract setContractTemplateId(int contractTemplateId) {
    this.contractTemplateId = contractTemplateId;
    setContractTemplateIdIsSet(true);
    return this;
  }

  public void unsetContractTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID);
  }

  /** Returns true if field contractTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID);
  }

  public void setContractTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTTEMPLATEID_ISSET_ID, value);
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public Contract setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  public String getContractTypeCode() {
    return this.contractTypeCode;
  }

  public Contract setContractTypeCode(String contractTypeCode) {
    this.contractTypeCode = contractTypeCode;
    return this;
  }

  public void unsetContractTypeCode() {
    this.contractTypeCode = null;
  }

  /** Returns true if field contractTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTypeCode() {
    return this.contractTypeCode != null;
  }

  public void setContractTypeCodeIsSet(boolean value) {
    if (!value) {
      this.contractTypeCode = null;
    }
  }

  public String getContractName() {
    return this.contractName;
  }

  public Contract setContractName(String contractName) {
    this.contractName = contractName;
    return this;
  }

  public void unsetContractName() {
    this.contractName = null;
  }

  /** Returns true if field contractName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractName() {
    return this.contractName != null;
  }

  public void setContractNameIsSet(boolean value) {
    if (!value) {
      this.contractName = null;
    }
  }

  public String getProjectNuber() {
    return this.projectNuber;
  }

  public Contract setProjectNuber(String projectNuber) {
    this.projectNuber = projectNuber;
    return this;
  }

  public void unsetProjectNuber() {
    this.projectNuber = null;
  }

  /** Returns true if field projectNuber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNuber() {
    return this.projectNuber != null;
  }

  public void setProjectNuberIsSet(boolean value) {
    if (!value) {
      this.projectNuber = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public Contract setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public Contract setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public Contract setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public Contract setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public Contract setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getCustomerId() {
    return this.customerId;
  }

  public Contract setCustomerId(int customerId) {
    this.customerId = customerId;
    setCustomerIdIsSet(true);
    return this;
  }

  public void unsetCustomerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTOMERID_ISSET_ID);
  }

  /** Returns true if field customerId is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerId() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTOMERID_ISSET_ID);
  }

  public void setCustomerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTOMERID_ISSET_ID, value);
  }

  public int getEconomyType() {
    return this.economyType;
  }

  public Contract setEconomyType(int economyType) {
    this.economyType = economyType;
    setEconomyTypeIsSet(true);
    return this;
  }

  public void unsetEconomyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECONOMYTYPE_ISSET_ID);
  }

  /** Returns true if field economyType is set (has been assigned a value) and false otherwise */
  public boolean isSetEconomyType() {
    return EncodingUtils.testBit(__isset_bitfield, __ECONOMYTYPE_ISSET_ID);
  }

  public void setEconomyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECONOMYTYPE_ISSET_ID, value);
  }

  public String getContractUrl() {
    return this.contractUrl;
  }

  public Contract setContractUrl(String contractUrl) {
    this.contractUrl = contractUrl;
    return this;
  }

  public void unsetContractUrl() {
    this.contractUrl = null;
  }

  /** Returns true if field contractUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetContractUrl() {
    return this.contractUrl != null;
  }

  public void setContractUrlIsSet(boolean value) {
    if (!value) {
      this.contractUrl = null;
    }
  }

  public int getIsLegalConfirmation() {
    return this.isLegalConfirmation;
  }

  public Contract setIsLegalConfirmation(int isLegalConfirmation) {
    this.isLegalConfirmation = isLegalConfirmation;
    setIsLegalConfirmationIsSet(true);
    return this;
  }

  public void unsetIsLegalConfirmation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLEGALCONFIRMATION_ISSET_ID);
  }

  /** Returns true if field isLegalConfirmation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLegalConfirmation() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLEGALCONFIRMATION_ISSET_ID);
  }

  public void setIsLegalConfirmationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLEGALCONFIRMATION_ISSET_ID, value);
  }

  public int getIsSigned() {
    return this.isSigned;
  }

  public Contract setIsSigned(int isSigned) {
    this.isSigned = isSigned;
    setIsSignedIsSet(true);
    return this;
  }

  public void unsetIsSigned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSIGNED_ISSET_ID);
  }

  /** Returns true if field isSigned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSigned() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSIGNED_ISSET_ID);
  }

  public void setIsSignedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSIGNED_ISSET_ID, value);
  }

  public String getSignedDate() {
    return this.signedDate;
  }

  public Contract setSignedDate(String signedDate) {
    this.signedDate = signedDate;
    return this;
  }

  public void unsetSignedDate() {
    this.signedDate = null;
  }

  /** Returns true if field signedDate is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedDate() {
    return this.signedDate != null;
  }

  public void setSignedDateIsSet(boolean value) {
    if (!value) {
      this.signedDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public Contract setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public Contract setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getCustomerType() {
    return this.customerType;
  }

  public Contract setCustomerType(int customerType) {
    this.customerType = customerType;
    setCustomerTypeIsSet(true);
    return this;
  }

  public void unsetCustomerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTOMERTYPE_ISSET_ID);
  }

  /** Returns true if field customerType is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTOMERTYPE_ISSET_ID);
  }

  public void setCustomerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTOMERTYPE_ISSET_ID, value);
  }

  public String getTempContractNo() {
    return this.tempContractNo;
  }

  public Contract setTempContractNo(String tempContractNo) {
    this.tempContractNo = tempContractNo;
    return this;
  }

  public void unsetTempContractNo() {
    this.tempContractNo = null;
  }

  /** Returns true if field tempContractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTempContractNo() {
    return this.tempContractNo != null;
  }

  public void setTempContractNoIsSet(boolean value) {
    if (!value) {
      this.tempContractNo = null;
    }
  }

  public String getContractCatelogKey() {
    return this.contractCatelogKey;
  }

  public Contract setContractCatelogKey(String contractCatelogKey) {
    this.contractCatelogKey = contractCatelogKey;
    return this;
  }

  public void unsetContractCatelogKey() {
    this.contractCatelogKey = null;
  }

  /** Returns true if field contractCatelogKey is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCatelogKey() {
    return this.contractCatelogKey != null;
  }

  public void setContractCatelogKeyIsSet(boolean value) {
    if (!value) {
      this.contractCatelogKey = null;
    }
  }

  public String getNum() {
    return this.num;
  }

  public Contract setNum(String num) {
    this.num = num;
    return this;
  }

  public void unsetNum() {
    this.num = null;
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return this.num != null;
  }

  public void setNumIsSet(boolean value) {
    if (!value) {
      this.num = null;
    }
  }

  public String getFirstNum() {
    return this.firstNum;
  }

  public Contract setFirstNum(String firstNum) {
    this.firstNum = firstNum;
    return this;
  }

  public void unsetFirstNum() {
    this.firstNum = null;
  }

  /** Returns true if field firstNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstNum() {
    return this.firstNum != null;
  }

  public void setFirstNumIsSet(boolean value) {
    if (!value) {
      this.firstNum = null;
    }
  }

  public String getSecondNum() {
    return this.secondNum;
  }

  public Contract setSecondNum(String secondNum) {
    this.secondNum = secondNum;
    return this;
  }

  public void unsetSecondNum() {
    this.secondNum = null;
  }

  /** Returns true if field secondNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondNum() {
    return this.secondNum != null;
  }

  public void setSecondNumIsSet(boolean value) {
    if (!value) {
      this.secondNum = null;
    }
  }

  public String getContractTypeText() {
    return this.contractTypeText;
  }

  public Contract setContractTypeText(String contractTypeText) {
    this.contractTypeText = contractTypeText;
    return this;
  }

  public void unsetContractTypeText() {
    this.contractTypeText = null;
  }

  /** Returns true if field contractTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTypeText() {
    return this.contractTypeText != null;
  }

  public void setContractTypeTextIsSet(boolean value) {
    if (!value) {
      this.contractTypeText = null;
    }
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public Contract setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getTemplateName() {
    return this.templateName;
  }

  public Contract setTemplateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  public void unsetTemplateName() {
    this.templateName = null;
  }

  /** Returns true if field templateName is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateName() {
    return this.templateName != null;
  }

  public void setTemplateNameIsSet(boolean value) {
    if (!value) {
      this.templateName = null;
    }
  }

  public String getMortgageBranch() {
    return this.mortgageBranch;
  }

  public Contract setMortgageBranch(String mortgageBranch) {
    this.mortgageBranch = mortgageBranch;
    return this;
  }

  public void unsetMortgageBranch() {
    this.mortgageBranch = null;
  }

  /** Returns true if field mortgageBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageBranch() {
    return this.mortgageBranch != null;
  }

  public void setMortgageBranchIsSet(boolean value) {
    if (!value) {
      this.mortgageBranch = null;
    }
  }

  public int getParentId() {
    return this.parentId;
  }

  public Contract setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public int getOldProjectId() {
    return this.oldProjectId;
  }

  public Contract setOldProjectId(int oldProjectId) {
    this.oldProjectId = oldProjectId;
    setOldProjectIdIsSet(true);
    return this;
  }

  public void unsetOldProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDPROJECTID_ISSET_ID);
  }

  /** Returns true if field oldProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetOldProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDPROJECTID_ISSET_ID);
  }

  public void setOldProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDPROJECTID_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public Contract setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case CONTRACT_CATELOG:
      if (value == null) {
        unsetContractCatelog();
      } else {
        setContractCatelog((Integer)value);
      }
      break;

    case CONTRACT_TYPE:
      if (value == null) {
        unsetContractType();
      } else {
        setContractType((Integer)value);
      }
      break;

    case CONTRACT_TEMPLATE_ID:
      if (value == null) {
        unsetContractTemplateId();
      } else {
        setContractTemplateId((Integer)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case CONTRACT_TYPE_CODE:
      if (value == null) {
        unsetContractTypeCode();
      } else {
        setContractTypeCode((String)value);
      }
      break;

    case CONTRACT_NAME:
      if (value == null) {
        unsetContractName();
      } else {
        setContractName((String)value);
      }
      break;

    case PROJECT_NUBER:
      if (value == null) {
        unsetProjectNuber();
      } else {
        setProjectNuber((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case CUSTOMER_ID:
      if (value == null) {
        unsetCustomerId();
      } else {
        setCustomerId((Integer)value);
      }
      break;

    case ECONOMY_TYPE:
      if (value == null) {
        unsetEconomyType();
      } else {
        setEconomyType((Integer)value);
      }
      break;

    case CONTRACT_URL:
      if (value == null) {
        unsetContractUrl();
      } else {
        setContractUrl((String)value);
      }
      break;

    case IS_LEGAL_CONFIRMATION:
      if (value == null) {
        unsetIsLegalConfirmation();
      } else {
        setIsLegalConfirmation((Integer)value);
      }
      break;

    case IS_SIGNED:
      if (value == null) {
        unsetIsSigned();
      } else {
        setIsSigned((Integer)value);
      }
      break;

    case SIGNED_DATE:
      if (value == null) {
        unsetSignedDate();
      } else {
        setSignedDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case CUSTOMER_TYPE:
      if (value == null) {
        unsetCustomerType();
      } else {
        setCustomerType((Integer)value);
      }
      break;

    case TEMP_CONTRACT_NO:
      if (value == null) {
        unsetTempContractNo();
      } else {
        setTempContractNo((String)value);
      }
      break;

    case CONTRACT_CATELOG_KEY:
      if (value == null) {
        unsetContractCatelogKey();
      } else {
        setContractCatelogKey((String)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((String)value);
      }
      break;

    case FIRST_NUM:
      if (value == null) {
        unsetFirstNum();
      } else {
        setFirstNum((String)value);
      }
      break;

    case SECOND_NUM:
      if (value == null) {
        unsetSecondNum();
      } else {
        setSecondNum((String)value);
      }
      break;

    case CONTRACT_TYPE_TEXT:
      if (value == null) {
        unsetContractTypeText();
      } else {
        setContractTypeText((String)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case TEMPLATE_NAME:
      if (value == null) {
        unsetTemplateName();
      } else {
        setTemplateName((String)value);
      }
      break;

    case MORTGAGE_BRANCH:
      if (value == null) {
        unsetMortgageBranch();
      } else {
        setMortgageBranch((String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    case OLD_PROJECT_ID:
      if (value == null) {
        unsetOldProjectId();
      } else {
        setOldProjectId((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case CONTRACT_CATELOG:
      return Integer.valueOf(getContractCatelog());

    case CONTRACT_TYPE:
      return Integer.valueOf(getContractType());

    case CONTRACT_TEMPLATE_ID:
      return Integer.valueOf(getContractTemplateId());

    case CONTRACT_NO:
      return getContractNo();

    case CONTRACT_TYPE_CODE:
      return getContractTypeCode();

    case CONTRACT_NAME:
      return getContractName();

    case PROJECT_NUBER:
      return getProjectNuber();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case TOTAL:
      return Integer.valueOf(getTotal());

    case STATUS:
      return Integer.valueOf(getStatus());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case CUSTOMER_ID:
      return Integer.valueOf(getCustomerId());

    case ECONOMY_TYPE:
      return Integer.valueOf(getEconomyType());

    case CONTRACT_URL:
      return getContractUrl();

    case IS_LEGAL_CONFIRMATION:
      return Integer.valueOf(getIsLegalConfirmation());

    case IS_SIGNED:
      return Integer.valueOf(getIsSigned());

    case SIGNED_DATE:
      return getSignedDate();

    case REMARK:
      return getRemark();

    case PROJECT_NAME:
      return getProjectName();

    case CUSTOMER_TYPE:
      return Integer.valueOf(getCustomerType());

    case TEMP_CONTRACT_NO:
      return getTempContractNo();

    case CONTRACT_CATELOG_KEY:
      return getContractCatelogKey();

    case NUM:
      return getNum();

    case FIRST_NUM:
      return getFirstNum();

    case SECOND_NUM:
      return getSecondNum();

    case CONTRACT_TYPE_TEXT:
      return getContractTypeText();

    case CUSTOMER_NAME:
      return getCustomerName();

    case TEMPLATE_NAME:
      return getTemplateName();

    case MORTGAGE_BRANCH:
      return getMortgageBranch();

    case PARENT_ID:
      return Integer.valueOf(getParentId());

    case OLD_PROJECT_ID:
      return Integer.valueOf(getOldProjectId());

    case REF_ID:
      return Integer.valueOf(getRefId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case CONTRACT_CATELOG:
      return isSetContractCatelog();
    case CONTRACT_TYPE:
      return isSetContractType();
    case CONTRACT_TEMPLATE_ID:
      return isSetContractTemplateId();
    case CONTRACT_NO:
      return isSetContractNo();
    case CONTRACT_TYPE_CODE:
      return isSetContractTypeCode();
    case CONTRACT_NAME:
      return isSetContractName();
    case PROJECT_NUBER:
      return isSetProjectNuber();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case TOTAL:
      return isSetTotal();
    case STATUS:
      return isSetStatus();
    case PROJECT_ID:
      return isSetProjectId();
    case CUSTOMER_ID:
      return isSetCustomerId();
    case ECONOMY_TYPE:
      return isSetEconomyType();
    case CONTRACT_URL:
      return isSetContractUrl();
    case IS_LEGAL_CONFIRMATION:
      return isSetIsLegalConfirmation();
    case IS_SIGNED:
      return isSetIsSigned();
    case SIGNED_DATE:
      return isSetSignedDate();
    case REMARK:
      return isSetRemark();
    case PROJECT_NAME:
      return isSetProjectName();
    case CUSTOMER_TYPE:
      return isSetCustomerType();
    case TEMP_CONTRACT_NO:
      return isSetTempContractNo();
    case CONTRACT_CATELOG_KEY:
      return isSetContractCatelogKey();
    case NUM:
      return isSetNum();
    case FIRST_NUM:
      return isSetFirstNum();
    case SECOND_NUM:
      return isSetSecondNum();
    case CONTRACT_TYPE_TEXT:
      return isSetContractTypeText();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case TEMPLATE_NAME:
      return isSetTemplateName();
    case MORTGAGE_BRANCH:
      return isSetMortgageBranch();
    case PARENT_ID:
      return isSetParentId();
    case OLD_PROJECT_ID:
      return isSetOldProjectId();
    case REF_ID:
      return isSetRefId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Contract)
      return this.equals((Contract)that);
    return false;
  }

  public boolean equals(Contract that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_contractCatelog = true;
    boolean that_present_contractCatelog = true;
    if (this_present_contractCatelog || that_present_contractCatelog) {
      if (!(this_present_contractCatelog && that_present_contractCatelog))
        return false;
      if (this.contractCatelog != that.contractCatelog)
        return false;
    }

    boolean this_present_contractType = true;
    boolean that_present_contractType = true;
    if (this_present_contractType || that_present_contractType) {
      if (!(this_present_contractType && that_present_contractType))
        return false;
      if (this.contractType != that.contractType)
        return false;
    }

    boolean this_present_contractTemplateId = true;
    boolean that_present_contractTemplateId = true;
    if (this_present_contractTemplateId || that_present_contractTemplateId) {
      if (!(this_present_contractTemplateId && that_present_contractTemplateId))
        return false;
      if (this.contractTemplateId != that.contractTemplateId)
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_contractTypeCode = true && this.isSetContractTypeCode();
    boolean that_present_contractTypeCode = true && that.isSetContractTypeCode();
    if (this_present_contractTypeCode || that_present_contractTypeCode) {
      if (!(this_present_contractTypeCode && that_present_contractTypeCode))
        return false;
      if (!this.contractTypeCode.equals(that.contractTypeCode))
        return false;
    }

    boolean this_present_contractName = true && this.isSetContractName();
    boolean that_present_contractName = true && that.isSetContractName();
    if (this_present_contractName || that_present_contractName) {
      if (!(this_present_contractName && that_present_contractName))
        return false;
      if (!this.contractName.equals(that.contractName))
        return false;
    }

    boolean this_present_projectNuber = true && this.isSetProjectNuber();
    boolean that_present_projectNuber = true && that.isSetProjectNuber();
    if (this_present_projectNuber || that_present_projectNuber) {
      if (!(this_present_projectNuber && that_present_projectNuber))
        return false;
      if (!this.projectNuber.equals(that.projectNuber))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_customerId = true;
    boolean that_present_customerId = true;
    if (this_present_customerId || that_present_customerId) {
      if (!(this_present_customerId && that_present_customerId))
        return false;
      if (this.customerId != that.customerId)
        return false;
    }

    boolean this_present_economyType = true;
    boolean that_present_economyType = true;
    if (this_present_economyType || that_present_economyType) {
      if (!(this_present_economyType && that_present_economyType))
        return false;
      if (this.economyType != that.economyType)
        return false;
    }

    boolean this_present_contractUrl = true && this.isSetContractUrl();
    boolean that_present_contractUrl = true && that.isSetContractUrl();
    if (this_present_contractUrl || that_present_contractUrl) {
      if (!(this_present_contractUrl && that_present_contractUrl))
        return false;
      if (!this.contractUrl.equals(that.contractUrl))
        return false;
    }

    boolean this_present_isLegalConfirmation = true;
    boolean that_present_isLegalConfirmation = true;
    if (this_present_isLegalConfirmation || that_present_isLegalConfirmation) {
      if (!(this_present_isLegalConfirmation && that_present_isLegalConfirmation))
        return false;
      if (this.isLegalConfirmation != that.isLegalConfirmation)
        return false;
    }

    boolean this_present_isSigned = true;
    boolean that_present_isSigned = true;
    if (this_present_isSigned || that_present_isSigned) {
      if (!(this_present_isSigned && that_present_isSigned))
        return false;
      if (this.isSigned != that.isSigned)
        return false;
    }

    boolean this_present_signedDate = true && this.isSetSignedDate();
    boolean that_present_signedDate = true && that.isSetSignedDate();
    if (this_present_signedDate || that_present_signedDate) {
      if (!(this_present_signedDate && that_present_signedDate))
        return false;
      if (!this.signedDate.equals(that.signedDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_customerType = true;
    boolean that_present_customerType = true;
    if (this_present_customerType || that_present_customerType) {
      if (!(this_present_customerType && that_present_customerType))
        return false;
      if (this.customerType != that.customerType)
        return false;
    }

    boolean this_present_tempContractNo = true && this.isSetTempContractNo();
    boolean that_present_tempContractNo = true && that.isSetTempContractNo();
    if (this_present_tempContractNo || that_present_tempContractNo) {
      if (!(this_present_tempContractNo && that_present_tempContractNo))
        return false;
      if (!this.tempContractNo.equals(that.tempContractNo))
        return false;
    }

    boolean this_present_contractCatelogKey = true && this.isSetContractCatelogKey();
    boolean that_present_contractCatelogKey = true && that.isSetContractCatelogKey();
    if (this_present_contractCatelogKey || that_present_contractCatelogKey) {
      if (!(this_present_contractCatelogKey && that_present_contractCatelogKey))
        return false;
      if (!this.contractCatelogKey.equals(that.contractCatelogKey))
        return false;
    }

    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (!this.num.equals(that.num))
        return false;
    }

    boolean this_present_firstNum = true && this.isSetFirstNum();
    boolean that_present_firstNum = true && that.isSetFirstNum();
    if (this_present_firstNum || that_present_firstNum) {
      if (!(this_present_firstNum && that_present_firstNum))
        return false;
      if (!this.firstNum.equals(that.firstNum))
        return false;
    }

    boolean this_present_secondNum = true && this.isSetSecondNum();
    boolean that_present_secondNum = true && that.isSetSecondNum();
    if (this_present_secondNum || that_present_secondNum) {
      if (!(this_present_secondNum && that_present_secondNum))
        return false;
      if (!this.secondNum.equals(that.secondNum))
        return false;
    }

    boolean this_present_contractTypeText = true && this.isSetContractTypeText();
    boolean that_present_contractTypeText = true && that.isSetContractTypeText();
    if (this_present_contractTypeText || that_present_contractTypeText) {
      if (!(this_present_contractTypeText && that_present_contractTypeText))
        return false;
      if (!this.contractTypeText.equals(that.contractTypeText))
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_templateName = true && this.isSetTemplateName();
    boolean that_present_templateName = true && that.isSetTemplateName();
    if (this_present_templateName || that_present_templateName) {
      if (!(this_present_templateName && that_present_templateName))
        return false;
      if (!this.templateName.equals(that.templateName))
        return false;
    }

    boolean this_present_mortgageBranch = true && this.isSetMortgageBranch();
    boolean that_present_mortgageBranch = true && that.isSetMortgageBranch();
    if (this_present_mortgageBranch || that_present_mortgageBranch) {
      if (!(this_present_mortgageBranch && that_present_mortgageBranch))
        return false;
      if (!this.mortgageBranch.equals(that.mortgageBranch))
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_oldProjectId = true;
    boolean that_present_oldProjectId = true;
    if (this_present_oldProjectId || that_present_oldProjectId) {
      if (!(this_present_oldProjectId && that_present_oldProjectId))
        return false;
      if (this.oldProjectId != that.oldProjectId)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_contractCatelog = true;
    list.add(present_contractCatelog);
    if (present_contractCatelog)
      list.add(contractCatelog);

    boolean present_contractType = true;
    list.add(present_contractType);
    if (present_contractType)
      list.add(contractType);

    boolean present_contractTemplateId = true;
    list.add(present_contractTemplateId);
    if (present_contractTemplateId)
      list.add(contractTemplateId);

    boolean present_contractNo = true && (isSetContractNo());
    list.add(present_contractNo);
    if (present_contractNo)
      list.add(contractNo);

    boolean present_contractTypeCode = true && (isSetContractTypeCode());
    list.add(present_contractTypeCode);
    if (present_contractTypeCode)
      list.add(contractTypeCode);

    boolean present_contractName = true && (isSetContractName());
    list.add(present_contractName);
    if (present_contractName)
      list.add(contractName);

    boolean present_projectNuber = true && (isSetProjectNuber());
    list.add(present_projectNuber);
    if (present_projectNuber)
      list.add(projectNuber);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_customerId = true;
    list.add(present_customerId);
    if (present_customerId)
      list.add(customerId);

    boolean present_economyType = true;
    list.add(present_economyType);
    if (present_economyType)
      list.add(economyType);

    boolean present_contractUrl = true && (isSetContractUrl());
    list.add(present_contractUrl);
    if (present_contractUrl)
      list.add(contractUrl);

    boolean present_isLegalConfirmation = true;
    list.add(present_isLegalConfirmation);
    if (present_isLegalConfirmation)
      list.add(isLegalConfirmation);

    boolean present_isSigned = true;
    list.add(present_isSigned);
    if (present_isSigned)
      list.add(isSigned);

    boolean present_signedDate = true && (isSetSignedDate());
    list.add(present_signedDate);
    if (present_signedDate)
      list.add(signedDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_customerType = true;
    list.add(present_customerType);
    if (present_customerType)
      list.add(customerType);

    boolean present_tempContractNo = true && (isSetTempContractNo());
    list.add(present_tempContractNo);
    if (present_tempContractNo)
      list.add(tempContractNo);

    boolean present_contractCatelogKey = true && (isSetContractCatelogKey());
    list.add(present_contractCatelogKey);
    if (present_contractCatelogKey)
      list.add(contractCatelogKey);

    boolean present_num = true && (isSetNum());
    list.add(present_num);
    if (present_num)
      list.add(num);

    boolean present_firstNum = true && (isSetFirstNum());
    list.add(present_firstNum);
    if (present_firstNum)
      list.add(firstNum);

    boolean present_secondNum = true && (isSetSecondNum());
    list.add(present_secondNum);
    if (present_secondNum)
      list.add(secondNum);

    boolean present_contractTypeText = true && (isSetContractTypeText());
    list.add(present_contractTypeText);
    if (present_contractTypeText)
      list.add(contractTypeText);

    boolean present_customerName = true && (isSetCustomerName());
    list.add(present_customerName);
    if (present_customerName)
      list.add(customerName);

    boolean present_templateName = true && (isSetTemplateName());
    list.add(present_templateName);
    if (present_templateName)
      list.add(templateName);

    boolean present_mortgageBranch = true && (isSetMortgageBranch());
    list.add(present_mortgageBranch);
    if (present_mortgageBranch)
      list.add(mortgageBranch);

    boolean present_parentId = true;
    list.add(present_parentId);
    if (present_parentId)
      list.add(parentId);

    boolean present_oldProjectId = true;
    list.add(present_oldProjectId);
    if (present_oldProjectId)
      list.add(oldProjectId);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    return list.hashCode();
  }

  @Override
  public int compareTo(Contract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCatelog()).compareTo(other.isSetContractCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCatelog, other.contractCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractType()).compareTo(other.isSetContractType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractType, other.contractType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTemplateId()).compareTo(other.isSetContractTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTemplateId, other.contractTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTypeCode()).compareTo(other.isSetContractTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTypeCode, other.contractTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractName()).compareTo(other.isSetContractName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractName, other.contractName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNuber()).compareTo(other.isSetProjectNuber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNuber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNuber, other.projectNuber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(other.isSetCustomerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, other.customerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEconomyType()).compareTo(other.isSetEconomyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEconomyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.economyType, other.economyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractUrl()).compareTo(other.isSetContractUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractUrl, other.contractUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLegalConfirmation()).compareTo(other.isSetIsLegalConfirmation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLegalConfirmation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLegalConfirmation, other.isLegalConfirmation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSigned()).compareTo(other.isSetIsSigned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSigned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSigned, other.isSigned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedDate()).compareTo(other.isSetSignedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedDate, other.signedDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerType()).compareTo(other.isSetCustomerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerType, other.customerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTempContractNo()).compareTo(other.isSetTempContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTempContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tempContractNo, other.tempContractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCatelogKey()).compareTo(other.isSetContractCatelogKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCatelogKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCatelogKey, other.contractCatelogKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstNum()).compareTo(other.isSetFirstNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstNum, other.firstNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondNum()).compareTo(other.isSetSecondNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondNum, other.secondNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTypeText()).compareTo(other.isSetContractTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTypeText, other.contractTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateName()).compareTo(other.isSetTemplateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateName, other.templateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageBranch()).compareTo(other.isSetMortgageBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageBranch, other.mortgageBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldProjectId()).compareTo(other.isSetOldProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldProjectId, other.oldProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Contract(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractCatelog:");
    sb.append(this.contractCatelog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractType:");
    sb.append(this.contractType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractTemplateId:");
    sb.append(this.contractTemplateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNo:");
    if (this.contractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractTypeCode:");
    if (this.contractTypeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.contractTypeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractName:");
    if (this.contractName == null) {
      sb.append("null");
    } else {
      sb.append(this.contractName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNuber:");
    if (this.projectNuber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNuber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerId:");
    sb.append(this.customerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("economyType:");
    sb.append(this.economyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractUrl:");
    if (this.contractUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.contractUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLegalConfirmation:");
    sb.append(this.isLegalConfirmation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSigned:");
    sb.append(this.isSigned);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedDate:");
    if (this.signedDate == null) {
      sb.append("null");
    } else {
      sb.append(this.signedDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerType:");
    sb.append(this.customerType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tempContractNo:");
    if (this.tempContractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.tempContractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractCatelogKey:");
    if (this.contractCatelogKey == null) {
      sb.append("null");
    } else {
      sb.append(this.contractCatelogKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    if (this.num == null) {
      sb.append("null");
    } else {
      sb.append(this.num);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstNum:");
    if (this.firstNum == null) {
      sb.append("null");
    } else {
      sb.append(this.firstNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secondNum:");
    if (this.secondNum == null) {
      sb.append("null");
    } else {
      sb.append(this.secondNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractTypeText:");
    if (this.contractTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.contractTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateName:");
    if (this.templateName == null) {
      sb.append("null");
    } else {
      sb.append(this.templateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageBranch:");
    if (this.mortgageBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldProjectId:");
    sb.append(this.oldProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractStandardSchemeFactory implements SchemeFactory {
    public ContractStandardScheme getScheme() {
      return new ContractStandardScheme();
    }
  }

  private static class ContractStandardScheme extends StandardScheme<Contract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Contract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractCatelog = iprot.readI32();
              struct.setContractCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTRACT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractType = iprot.readI32();
              struct.setContractTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractTemplateId = iprot.readI32();
              struct.setContractTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTRACT_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractTypeCode = iprot.readString();
              struct.setContractTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTRACT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractName = iprot.readString();
              struct.setContractNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROJECT_NUBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNuber = iprot.readString();
              struct.setProjectNuberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CUSTOMER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.customerId = iprot.readI32();
              struct.setCustomerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ECONOMY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.economyType = iprot.readI32();
              struct.setEconomyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CONTRACT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractUrl = iprot.readString();
              struct.setContractUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_LEGAL_CONFIRMATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isLegalConfirmation = iprot.readI32();
              struct.setIsLegalConfirmationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_SIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSigned = iprot.readI32();
              struct.setIsSignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SIGNED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signedDate = iprot.readString();
              struct.setSignedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CUSTOMER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.customerType = iprot.readI32();
              struct.setCustomerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TEMP_CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tempContractNo = iprot.readString();
              struct.setTempContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CONTRACT_CATELOG_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCatelogKey = iprot.readString();
              struct.setContractCatelogKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.num = iprot.readString();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // FIRST_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstNum = iprot.readString();
              struct.setFirstNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SECOND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secondNum = iprot.readString();
              struct.setSecondNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CONTRACT_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractTypeText = iprot.readString();
              struct.setContractTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TEMPLATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateName = iprot.readString();
              struct.setTemplateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // MORTGAGE_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageBranch = iprot.readString();
              struct.setMortgageBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // OLD_PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oldProjectId = iprot.readI32();
              struct.setOldProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Contract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_CATELOG_FIELD_DESC);
      oprot.writeI32(struct.contractCatelog);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.contractType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.contractTemplateId);
      oprot.writeFieldEnd();
      if (struct.contractNo != null) {
        oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.contractNo);
        oprot.writeFieldEnd();
      }
      if (struct.contractTypeCode != null) {
        oprot.writeFieldBegin(CONTRACT_TYPE_CODE_FIELD_DESC);
        oprot.writeString(struct.contractTypeCode);
        oprot.writeFieldEnd();
      }
      if (struct.contractName != null) {
        oprot.writeFieldBegin(CONTRACT_NAME_FIELD_DESC);
        oprot.writeString(struct.contractName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNuber != null) {
        oprot.writeFieldBegin(PROJECT_NUBER_FIELD_DESC);
        oprot.writeString(struct.projectNuber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
      oprot.writeI32(struct.customerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ECONOMY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.economyType);
      oprot.writeFieldEnd();
      if (struct.contractUrl != null) {
        oprot.writeFieldBegin(CONTRACT_URL_FIELD_DESC);
        oprot.writeString(struct.contractUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_LEGAL_CONFIRMATION_FIELD_DESC);
      oprot.writeI32(struct.isLegalConfirmation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SIGNED_FIELD_DESC);
      oprot.writeI32(struct.isSigned);
      oprot.writeFieldEnd();
      if (struct.signedDate != null) {
        oprot.writeFieldBegin(SIGNED_DATE_FIELD_DESC);
        oprot.writeString(struct.signedDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUSTOMER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.customerType);
      oprot.writeFieldEnd();
      if (struct.tempContractNo != null) {
        oprot.writeFieldBegin(TEMP_CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.tempContractNo);
        oprot.writeFieldEnd();
      }
      if (struct.contractCatelogKey != null) {
        oprot.writeFieldBegin(CONTRACT_CATELOG_KEY_FIELD_DESC);
        oprot.writeString(struct.contractCatelogKey);
        oprot.writeFieldEnd();
      }
      if (struct.num != null) {
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeString(struct.num);
        oprot.writeFieldEnd();
      }
      if (struct.firstNum != null) {
        oprot.writeFieldBegin(FIRST_NUM_FIELD_DESC);
        oprot.writeString(struct.firstNum);
        oprot.writeFieldEnd();
      }
      if (struct.secondNum != null) {
        oprot.writeFieldBegin(SECOND_NUM_FIELD_DESC);
        oprot.writeString(struct.secondNum);
        oprot.writeFieldEnd();
      }
      if (struct.contractTypeText != null) {
        oprot.writeFieldBegin(CONTRACT_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.contractTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.templateName != null) {
        oprot.writeFieldBegin(TEMPLATE_NAME_FIELD_DESC);
        oprot.writeString(struct.templateName);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageBranch != null) {
        oprot.writeFieldBegin(MORTGAGE_BRANCH_FIELD_DESC);
        oprot.writeString(struct.mortgageBranch);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.oldProjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractTupleSchemeFactory implements SchemeFactory {
    public ContractTupleScheme getScheme() {
      return new ContractTupleScheme();
    }
  }

  private static class ContractTupleScheme extends TupleScheme<Contract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Contract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetContractCatelog()) {
        optionals.set(2);
      }
      if (struct.isSetContractType()) {
        optionals.set(3);
      }
      if (struct.isSetContractTemplateId()) {
        optionals.set(4);
      }
      if (struct.isSetContractNo()) {
        optionals.set(5);
      }
      if (struct.isSetContractTypeCode()) {
        optionals.set(6);
      }
      if (struct.isSetContractName()) {
        optionals.set(7);
      }
      if (struct.isSetProjectNuber()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      if (struct.isSetTotal()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetProjectId()) {
        optionals.set(13);
      }
      if (struct.isSetCustomerId()) {
        optionals.set(14);
      }
      if (struct.isSetEconomyType()) {
        optionals.set(15);
      }
      if (struct.isSetContractUrl()) {
        optionals.set(16);
      }
      if (struct.isSetIsLegalConfirmation()) {
        optionals.set(17);
      }
      if (struct.isSetIsSigned()) {
        optionals.set(18);
      }
      if (struct.isSetSignedDate()) {
        optionals.set(19);
      }
      if (struct.isSetRemark()) {
        optionals.set(20);
      }
      if (struct.isSetProjectName()) {
        optionals.set(21);
      }
      if (struct.isSetCustomerType()) {
        optionals.set(22);
      }
      if (struct.isSetTempContractNo()) {
        optionals.set(23);
      }
      if (struct.isSetContractCatelogKey()) {
        optionals.set(24);
      }
      if (struct.isSetNum()) {
        optionals.set(25);
      }
      if (struct.isSetFirstNum()) {
        optionals.set(26);
      }
      if (struct.isSetSecondNum()) {
        optionals.set(27);
      }
      if (struct.isSetContractTypeText()) {
        optionals.set(28);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(29);
      }
      if (struct.isSetTemplateName()) {
        optionals.set(30);
      }
      if (struct.isSetMortgageBranch()) {
        optionals.set(31);
      }
      if (struct.isSetParentId()) {
        optionals.set(32);
      }
      if (struct.isSetOldProjectId()) {
        optionals.set(33);
      }
      if (struct.isSetRefId()) {
        optionals.set(34);
      }
      oprot.writeBitSet(optionals, 35);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetContractCatelog()) {
        oprot.writeI32(struct.contractCatelog);
      }
      if (struct.isSetContractType()) {
        oprot.writeI32(struct.contractType);
      }
      if (struct.isSetContractTemplateId()) {
        oprot.writeI32(struct.contractTemplateId);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetContractTypeCode()) {
        oprot.writeString(struct.contractTypeCode);
      }
      if (struct.isSetContractName()) {
        oprot.writeString(struct.contractName);
      }
      if (struct.isSetProjectNuber()) {
        oprot.writeString(struct.projectNuber);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetCustomerId()) {
        oprot.writeI32(struct.customerId);
      }
      if (struct.isSetEconomyType()) {
        oprot.writeI32(struct.economyType);
      }
      if (struct.isSetContractUrl()) {
        oprot.writeString(struct.contractUrl);
      }
      if (struct.isSetIsLegalConfirmation()) {
        oprot.writeI32(struct.isLegalConfirmation);
      }
      if (struct.isSetIsSigned()) {
        oprot.writeI32(struct.isSigned);
      }
      if (struct.isSetSignedDate()) {
        oprot.writeString(struct.signedDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetCustomerType()) {
        oprot.writeI32(struct.customerType);
      }
      if (struct.isSetTempContractNo()) {
        oprot.writeString(struct.tempContractNo);
      }
      if (struct.isSetContractCatelogKey()) {
        oprot.writeString(struct.contractCatelogKey);
      }
      if (struct.isSetNum()) {
        oprot.writeString(struct.num);
      }
      if (struct.isSetFirstNum()) {
        oprot.writeString(struct.firstNum);
      }
      if (struct.isSetSecondNum()) {
        oprot.writeString(struct.secondNum);
      }
      if (struct.isSetContractTypeText()) {
        oprot.writeString(struct.contractTypeText);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetTemplateName()) {
        oprot.writeString(struct.templateName);
      }
      if (struct.isSetMortgageBranch()) {
        oprot.writeString(struct.mortgageBranch);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
      if (struct.isSetOldProjectId()) {
        oprot.writeI32(struct.oldProjectId);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Contract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(35);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractCatelog = iprot.readI32();
        struct.setContractCatelogIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractType = iprot.readI32();
        struct.setContractTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractTemplateId = iprot.readI32();
        struct.setContractTemplateIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.contractTypeCode = iprot.readString();
        struct.setContractTypeCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.contractName = iprot.readString();
        struct.setContractNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.projectNuber = iprot.readString();
        struct.setProjectNuberIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.customerId = iprot.readI32();
        struct.setCustomerIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.economyType = iprot.readI32();
        struct.setEconomyTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.contractUrl = iprot.readString();
        struct.setContractUrlIsSet(true);
      }
      if (incoming.get(17)) {
        struct.isLegalConfirmation = iprot.readI32();
        struct.setIsLegalConfirmationIsSet(true);
      }
      if (incoming.get(18)) {
        struct.isSigned = iprot.readI32();
        struct.setIsSignedIsSet(true);
      }
      if (incoming.get(19)) {
        struct.signedDate = iprot.readString();
        struct.setSignedDateIsSet(true);
      }
      if (incoming.get(20)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(21)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.customerType = iprot.readI32();
        struct.setCustomerTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.tempContractNo = iprot.readString();
        struct.setTempContractNoIsSet(true);
      }
      if (incoming.get(24)) {
        struct.contractCatelogKey = iprot.readString();
        struct.setContractCatelogKeyIsSet(true);
      }
      if (incoming.get(25)) {
        struct.num = iprot.readString();
        struct.setNumIsSet(true);
      }
      if (incoming.get(26)) {
        struct.firstNum = iprot.readString();
        struct.setFirstNumIsSet(true);
      }
      if (incoming.get(27)) {
        struct.secondNum = iprot.readString();
        struct.setSecondNumIsSet(true);
      }
      if (incoming.get(28)) {
        struct.contractTypeText = iprot.readString();
        struct.setContractTypeTextIsSet(true);
      }
      if (incoming.get(29)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(30)) {
        struct.templateName = iprot.readString();
        struct.setTemplateNameIsSet(true);
      }
      if (incoming.get(31)) {
        struct.mortgageBranch = iprot.readString();
        struct.setMortgageBranchIsSet(true);
      }
      if (incoming.get(32)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(33)) {
        struct.oldProjectId = iprot.readI32();
        struct.setOldProjectIdIsSet(true);
      }
      if (incoming.get(34)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
    }
  }

}


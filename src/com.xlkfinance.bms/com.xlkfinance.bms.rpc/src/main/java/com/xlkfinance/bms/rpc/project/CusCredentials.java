/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-19")
public class CusCredentials implements org.apache.thrift.TBase<CusCredentials, CusCredentials._Fields>, java.io.Serializable, Cloneable, Comparable<CusCredentials> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusCredentials");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FIVE_CLASSIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("fiveClassify", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OVERDUE_NUMS_THREE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueNumsThree", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OVERDUE_NUMS_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueNumsTwo", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LOAN_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTotal", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_OVERDUE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOverdue", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField OVERDUE_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField OVERDUE_PERIODS_FIELD_DESC = new org.apache.thrift.protocol.TField("overduePeriods", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LOAN_APPROVALS_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanApprovalsNums", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LOAN_APPROVALS_NUMS_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanApprovalsNumsTwo", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREDIT_APPROVALS_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("creditApprovalsNums", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CREDIT_APPROVALS_NUMS_THREE_FIELD_DESC = new org.apache.thrift.protocol.TField("creditApprovalsNumsThree", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField INQUIRIES_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("inquiriesNums", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SOCIAL_SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("socialSecurity", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ACCUMULATION_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("accumulationFund", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("customerNature", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField LAND_NATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("landNature", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ESTATE_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("estateUse", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField IS_CALL_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("isCallPerson", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField IS_CALL_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("isCallUnit", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField IS_CALL_CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("isCallContact", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField MONTHLY_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("monthlyIncome", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField MONTHLY_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("monthlyReturn", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField DEBT_RADIO_FIELD_DESC = new org.apache.thrift.protocol.TField("debtRadio", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField LEASE_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("leaseTerm", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField TRIAL_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("trialQuota", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField LOAN_MONTHLY_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMonthlyReturn", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField RISK_ONE_OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("riskOneOpinion", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField RISK_OVER_OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("riskOverOpinion", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField EMPLOY_SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("employSituation", org.apache.thrift.protocol.TType.STRING, (short)38);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusCredentialsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusCredentialsTupleSchemeFactory());
  }

  public int pid; // required
  public int acctId; // required
  public int projectId; // required
  public int fiveClassify; // required
  public int overdueNumsThree; // required
  public int overdueNumsTwo; // required
  public int loanTotal; // required
  public int isOverdue; // required
  public double overdueMoney; // required
  public double overdueTotalMoney; // required
  public int overduePeriods; // required
  public int loanApprovalsNums; // required
  public int loanApprovalsNumsTwo; // required
  public int creditApprovalsNums; // required
  public int creditApprovalsNumsThree; // required
  public int inquiriesNums; // required
  public int socialSecurity; // required
  public int accumulationFund; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public String customerNature; // required
  public String houseName; // required
  public String landNature; // required
  public String estateUse; // required
  public String isCallPerson; // required
  public int isCallUnit; // required
  public int isCallContact; // required
  public double monthlyIncome; // required
  public double monthlyReturn; // required
  public double debtRadio; // required
  public double leaseTerm; // required
  public double trialQuota; // required
  public double loanMonthlyReturn; // required
  public String riskOneOpinion; // required
  public String riskOverOpinion; // required
  public String employSituation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACCT_ID((short)2, "acctId"),
    PROJECT_ID((short)3, "projectId"),
    FIVE_CLASSIFY((short)4, "fiveClassify"),
    OVERDUE_NUMS_THREE((short)5, "overdueNumsThree"),
    OVERDUE_NUMS_TWO((short)6, "overdueNumsTwo"),
    LOAN_TOTAL((short)7, "loanTotal"),
    IS_OVERDUE((short)8, "isOverdue"),
    OVERDUE_MONEY((short)9, "overdueMoney"),
    OVERDUE_TOTAL_MONEY((short)10, "overdueTotalMoney"),
    OVERDUE_PERIODS((short)11, "overduePeriods"),
    LOAN_APPROVALS_NUMS((short)12, "loanApprovalsNums"),
    LOAN_APPROVALS_NUMS_TWO((short)13, "loanApprovalsNumsTwo"),
    CREDIT_APPROVALS_NUMS((short)14, "creditApprovalsNums"),
    CREDIT_APPROVALS_NUMS_THREE((short)15, "creditApprovalsNumsThree"),
    INQUIRIES_NUMS((short)16, "inquiriesNums"),
    SOCIAL_SECURITY((short)17, "socialSecurity"),
    ACCUMULATION_FUND((short)18, "accumulationFund"),
    CREATE_DATE((short)19, "createDate"),
    CREATER_ID((short)20, "createrId"),
    UPDATE_ID((short)21, "updateId"),
    UPDATE_DATE((short)22, "updateDate"),
    CUSTOMER_NATURE((short)23, "customerNature"),
    HOUSE_NAME((short)24, "houseName"),
    LAND_NATURE((short)25, "landNature"),
    ESTATE_USE((short)26, "estateUse"),
    IS_CALL_PERSON((short)27, "isCallPerson"),
    IS_CALL_UNIT((short)28, "isCallUnit"),
    IS_CALL_CONTACT((short)29, "isCallContact"),
    MONTHLY_INCOME((short)30, "monthlyIncome"),
    MONTHLY_RETURN((short)31, "monthlyReturn"),
    DEBT_RADIO((short)32, "debtRadio"),
    LEASE_TERM((short)33, "leaseTerm"),
    TRIAL_QUOTA((short)34, "trialQuota"),
    LOAN_MONTHLY_RETURN((short)35, "loanMonthlyReturn"),
    RISK_ONE_OPINION((short)36, "riskOneOpinion"),
    RISK_OVER_OPINION((short)37, "riskOverOpinion"),
    EMPLOY_SITUATION((short)38, "employSituation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACCT_ID
          return ACCT_ID;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // FIVE_CLASSIFY
          return FIVE_CLASSIFY;
        case 5: // OVERDUE_NUMS_THREE
          return OVERDUE_NUMS_THREE;
        case 6: // OVERDUE_NUMS_TWO
          return OVERDUE_NUMS_TWO;
        case 7: // LOAN_TOTAL
          return LOAN_TOTAL;
        case 8: // IS_OVERDUE
          return IS_OVERDUE;
        case 9: // OVERDUE_MONEY
          return OVERDUE_MONEY;
        case 10: // OVERDUE_TOTAL_MONEY
          return OVERDUE_TOTAL_MONEY;
        case 11: // OVERDUE_PERIODS
          return OVERDUE_PERIODS;
        case 12: // LOAN_APPROVALS_NUMS
          return LOAN_APPROVALS_NUMS;
        case 13: // LOAN_APPROVALS_NUMS_TWO
          return LOAN_APPROVALS_NUMS_TWO;
        case 14: // CREDIT_APPROVALS_NUMS
          return CREDIT_APPROVALS_NUMS;
        case 15: // CREDIT_APPROVALS_NUMS_THREE
          return CREDIT_APPROVALS_NUMS_THREE;
        case 16: // INQUIRIES_NUMS
          return INQUIRIES_NUMS;
        case 17: // SOCIAL_SECURITY
          return SOCIAL_SECURITY;
        case 18: // ACCUMULATION_FUND
          return ACCUMULATION_FUND;
        case 19: // CREATE_DATE
          return CREATE_DATE;
        case 20: // CREATER_ID
          return CREATER_ID;
        case 21: // UPDATE_ID
          return UPDATE_ID;
        case 22: // UPDATE_DATE
          return UPDATE_DATE;
        case 23: // CUSTOMER_NATURE
          return CUSTOMER_NATURE;
        case 24: // HOUSE_NAME
          return HOUSE_NAME;
        case 25: // LAND_NATURE
          return LAND_NATURE;
        case 26: // ESTATE_USE
          return ESTATE_USE;
        case 27: // IS_CALL_PERSON
          return IS_CALL_PERSON;
        case 28: // IS_CALL_UNIT
          return IS_CALL_UNIT;
        case 29: // IS_CALL_CONTACT
          return IS_CALL_CONTACT;
        case 30: // MONTHLY_INCOME
          return MONTHLY_INCOME;
        case 31: // MONTHLY_RETURN
          return MONTHLY_RETURN;
        case 32: // DEBT_RADIO
          return DEBT_RADIO;
        case 33: // LEASE_TERM
          return LEASE_TERM;
        case 34: // TRIAL_QUOTA
          return TRIAL_QUOTA;
        case 35: // LOAN_MONTHLY_RETURN
          return LOAN_MONTHLY_RETURN;
        case 36: // RISK_ONE_OPINION
          return RISK_ONE_OPINION;
        case 37: // RISK_OVER_OPINION
          return RISK_OVER_OPINION;
        case 38: // EMPLOY_SITUATION
          return EMPLOY_SITUATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCTID_ISSET_ID = 1;
  private static final int __PROJECTID_ISSET_ID = 2;
  private static final int __FIVECLASSIFY_ISSET_ID = 3;
  private static final int __OVERDUENUMSTHREE_ISSET_ID = 4;
  private static final int __OVERDUENUMSTWO_ISSET_ID = 5;
  private static final int __LOANTOTAL_ISSET_ID = 6;
  private static final int __ISOVERDUE_ISSET_ID = 7;
  private static final int __OVERDUEMONEY_ISSET_ID = 8;
  private static final int __OVERDUETOTALMONEY_ISSET_ID = 9;
  private static final int __OVERDUEPERIODS_ISSET_ID = 10;
  private static final int __LOANAPPROVALSNUMS_ISSET_ID = 11;
  private static final int __LOANAPPROVALSNUMSTWO_ISSET_ID = 12;
  private static final int __CREDITAPPROVALSNUMS_ISSET_ID = 13;
  private static final int __CREDITAPPROVALSNUMSTHREE_ISSET_ID = 14;
  private static final int __INQUIRIESNUMS_ISSET_ID = 15;
  private static final int __SOCIALSECURITY_ISSET_ID = 16;
  private static final int __ACCUMULATIONFUND_ISSET_ID = 17;
  private static final int __CREATERID_ISSET_ID = 18;
  private static final int __UPDATEID_ISSET_ID = 19;
  private static final int __ISCALLUNIT_ISSET_ID = 20;
  private static final int __ISCALLCONTACT_ISSET_ID = 21;
  private static final int __MONTHLYINCOME_ISSET_ID = 22;
  private static final int __MONTHLYRETURN_ISSET_ID = 23;
  private static final int __DEBTRADIO_ISSET_ID = 24;
  private static final int __LEASETERM_ISSET_ID = 25;
  private static final int __TRIALQUOTA_ISSET_ID = 26;
  private static final int __LOANMONTHLYRETURN_ISSET_ID = 27;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIVE_CLASSIFY, new org.apache.thrift.meta_data.FieldMetaData("fiveClassify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_NUMS_THREE, new org.apache.thrift.meta_data.FieldMetaData("overdueNumsThree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_NUMS_TWO, new org.apache.thrift.meta_data.FieldMetaData("overdueNumsTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("loanTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_OVERDUE, new org.apache.thrift.meta_data.FieldMetaData("isOverdue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("overdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("overdueTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_PERIODS, new org.apache.thrift.meta_data.FieldMetaData("overduePeriods", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_APPROVALS_NUMS, new org.apache.thrift.meta_data.FieldMetaData("loanApprovalsNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_APPROVALS_NUMS_TWO, new org.apache.thrift.meta_data.FieldMetaData("loanApprovalsNumsTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_APPROVALS_NUMS, new org.apache.thrift.meta_data.FieldMetaData("creditApprovalsNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_APPROVALS_NUMS_THREE, new org.apache.thrift.meta_data.FieldMetaData("creditApprovalsNumsThree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INQUIRIES_NUMS, new org.apache.thrift.meta_data.FieldMetaData("inquiriesNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOCIAL_SECURITY, new org.apache.thrift.meta_data.FieldMetaData("socialSecurity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCUMULATION_FUND, new org.apache.thrift.meta_data.FieldMetaData("accumulationFund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_NATURE, new org.apache.thrift.meta_data.FieldMetaData("customerNature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAND_NATURE, new org.apache.thrift.meta_data.FieldMetaData("landNature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ESTATE_USE, new org.apache.thrift.meta_data.FieldMetaData("estateUse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CALL_PERSON, new org.apache.thrift.meta_data.FieldMetaData("isCallPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CALL_UNIT, new org.apache.thrift.meta_data.FieldMetaData("isCallUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CALL_CONTACT, new org.apache.thrift.meta_data.FieldMetaData("isCallContact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTHLY_INCOME, new org.apache.thrift.meta_data.FieldMetaData("monthlyIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTHLY_RETURN, new org.apache.thrift.meta_data.FieldMetaData("monthlyReturn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEBT_RADIO, new org.apache.thrift.meta_data.FieldMetaData("debtRadio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEASE_TERM, new org.apache.thrift.meta_data.FieldMetaData("leaseTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRIAL_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("trialQuota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_MONTHLY_RETURN, new org.apache.thrift.meta_data.FieldMetaData("loanMonthlyReturn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RISK_ONE_OPINION, new org.apache.thrift.meta_data.FieldMetaData("riskOneOpinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RISK_OVER_OPINION, new org.apache.thrift.meta_data.FieldMetaData("riskOverOpinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOY_SITUATION, new org.apache.thrift.meta_data.FieldMetaData("employSituation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusCredentials.class, metaDataMap);
  }

  public CusCredentials() {
  }

  public CusCredentials(
    int pid,
    int acctId,
    int projectId,
    int fiveClassify,
    int overdueNumsThree,
    int overdueNumsTwo,
    int loanTotal,
    int isOverdue,
    double overdueMoney,
    double overdueTotalMoney,
    int overduePeriods,
    int loanApprovalsNums,
    int loanApprovalsNumsTwo,
    int creditApprovalsNums,
    int creditApprovalsNumsThree,
    int inquiriesNums,
    int socialSecurity,
    int accumulationFund,
    String createDate,
    int createrId,
    int updateId,
    String updateDate,
    String customerNature,
    String houseName,
    String landNature,
    String estateUse,
    String isCallPerson,
    int isCallUnit,
    int isCallContact,
    double monthlyIncome,
    double monthlyReturn,
    double debtRadio,
    double leaseTerm,
    double trialQuota,
    double loanMonthlyReturn,
    String riskOneOpinion,
    String riskOverOpinion,
    String employSituation)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.fiveClassify = fiveClassify;
    setFiveClassifyIsSet(true);
    this.overdueNumsThree = overdueNumsThree;
    setOverdueNumsThreeIsSet(true);
    this.overdueNumsTwo = overdueNumsTwo;
    setOverdueNumsTwoIsSet(true);
    this.loanTotal = loanTotal;
    setLoanTotalIsSet(true);
    this.isOverdue = isOverdue;
    setIsOverdueIsSet(true);
    this.overdueMoney = overdueMoney;
    setOverdueMoneyIsSet(true);
    this.overdueTotalMoney = overdueTotalMoney;
    setOverdueTotalMoneyIsSet(true);
    this.overduePeriods = overduePeriods;
    setOverduePeriodsIsSet(true);
    this.loanApprovalsNums = loanApprovalsNums;
    setLoanApprovalsNumsIsSet(true);
    this.loanApprovalsNumsTwo = loanApprovalsNumsTwo;
    setLoanApprovalsNumsTwoIsSet(true);
    this.creditApprovalsNums = creditApprovalsNums;
    setCreditApprovalsNumsIsSet(true);
    this.creditApprovalsNumsThree = creditApprovalsNumsThree;
    setCreditApprovalsNumsThreeIsSet(true);
    this.inquiriesNums = inquiriesNums;
    setInquiriesNumsIsSet(true);
    this.socialSecurity = socialSecurity;
    setSocialSecurityIsSet(true);
    this.accumulationFund = accumulationFund;
    setAccumulationFundIsSet(true);
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.customerNature = customerNature;
    this.houseName = houseName;
    this.landNature = landNature;
    this.estateUse = estateUse;
    this.isCallPerson = isCallPerson;
    this.isCallUnit = isCallUnit;
    setIsCallUnitIsSet(true);
    this.isCallContact = isCallContact;
    setIsCallContactIsSet(true);
    this.monthlyIncome = monthlyIncome;
    setMonthlyIncomeIsSet(true);
    this.monthlyReturn = monthlyReturn;
    setMonthlyReturnIsSet(true);
    this.debtRadio = debtRadio;
    setDebtRadioIsSet(true);
    this.leaseTerm = leaseTerm;
    setLeaseTermIsSet(true);
    this.trialQuota = trialQuota;
    setTrialQuotaIsSet(true);
    this.loanMonthlyReturn = loanMonthlyReturn;
    setLoanMonthlyReturnIsSet(true);
    this.riskOneOpinion = riskOneOpinion;
    this.riskOverOpinion = riskOverOpinion;
    this.employSituation = employSituation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusCredentials(CusCredentials other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.acctId = other.acctId;
    this.projectId = other.projectId;
    this.fiveClassify = other.fiveClassify;
    this.overdueNumsThree = other.overdueNumsThree;
    this.overdueNumsTwo = other.overdueNumsTwo;
    this.loanTotal = other.loanTotal;
    this.isOverdue = other.isOverdue;
    this.overdueMoney = other.overdueMoney;
    this.overdueTotalMoney = other.overdueTotalMoney;
    this.overduePeriods = other.overduePeriods;
    this.loanApprovalsNums = other.loanApprovalsNums;
    this.loanApprovalsNumsTwo = other.loanApprovalsNumsTwo;
    this.creditApprovalsNums = other.creditApprovalsNums;
    this.creditApprovalsNumsThree = other.creditApprovalsNumsThree;
    this.inquiriesNums = other.inquiriesNums;
    this.socialSecurity = other.socialSecurity;
    this.accumulationFund = other.accumulationFund;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetCustomerNature()) {
      this.customerNature = other.customerNature;
    }
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetLandNature()) {
      this.landNature = other.landNature;
    }
    if (other.isSetEstateUse()) {
      this.estateUse = other.estateUse;
    }
    if (other.isSetIsCallPerson()) {
      this.isCallPerson = other.isCallPerson;
    }
    this.isCallUnit = other.isCallUnit;
    this.isCallContact = other.isCallContact;
    this.monthlyIncome = other.monthlyIncome;
    this.monthlyReturn = other.monthlyReturn;
    this.debtRadio = other.debtRadio;
    this.leaseTerm = other.leaseTerm;
    this.trialQuota = other.trialQuota;
    this.loanMonthlyReturn = other.loanMonthlyReturn;
    if (other.isSetRiskOneOpinion()) {
      this.riskOneOpinion = other.riskOneOpinion;
    }
    if (other.isSetRiskOverOpinion()) {
      this.riskOverOpinion = other.riskOverOpinion;
    }
    if (other.isSetEmploySituation()) {
      this.employSituation = other.employSituation;
    }
  }

  public CusCredentials deepCopy() {
    return new CusCredentials(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setFiveClassifyIsSet(false);
    this.fiveClassify = 0;
    setOverdueNumsThreeIsSet(false);
    this.overdueNumsThree = 0;
    setOverdueNumsTwoIsSet(false);
    this.overdueNumsTwo = 0;
    setLoanTotalIsSet(false);
    this.loanTotal = 0;
    setIsOverdueIsSet(false);
    this.isOverdue = 0;
    setOverdueMoneyIsSet(false);
    this.overdueMoney = 0.0;
    setOverdueTotalMoneyIsSet(false);
    this.overdueTotalMoney = 0.0;
    setOverduePeriodsIsSet(false);
    this.overduePeriods = 0;
    setLoanApprovalsNumsIsSet(false);
    this.loanApprovalsNums = 0;
    setLoanApprovalsNumsTwoIsSet(false);
    this.loanApprovalsNumsTwo = 0;
    setCreditApprovalsNumsIsSet(false);
    this.creditApprovalsNums = 0;
    setCreditApprovalsNumsThreeIsSet(false);
    this.creditApprovalsNumsThree = 0;
    setInquiriesNumsIsSet(false);
    this.inquiriesNums = 0;
    setSocialSecurityIsSet(false);
    this.socialSecurity = 0;
    setAccumulationFundIsSet(false);
    this.accumulationFund = 0;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.customerNature = null;
    this.houseName = null;
    this.landNature = null;
    this.estateUse = null;
    this.isCallPerson = null;
    setIsCallUnitIsSet(false);
    this.isCallUnit = 0;
    setIsCallContactIsSet(false);
    this.isCallContact = 0;
    setMonthlyIncomeIsSet(false);
    this.monthlyIncome = 0.0;
    setMonthlyReturnIsSet(false);
    this.monthlyReturn = 0.0;
    setDebtRadioIsSet(false);
    this.debtRadio = 0.0;
    setLeaseTermIsSet(false);
    this.leaseTerm = 0.0;
    setTrialQuotaIsSet(false);
    this.trialQuota = 0.0;
    setLoanMonthlyReturnIsSet(false);
    this.loanMonthlyReturn = 0.0;
    this.riskOneOpinion = null;
    this.riskOverOpinion = null;
    this.employSituation = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusCredentials setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CusCredentials setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CusCredentials setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getFiveClassify() {
    return this.fiveClassify;
  }

  public CusCredentials setFiveClassify(int fiveClassify) {
    this.fiveClassify = fiveClassify;
    setFiveClassifyIsSet(true);
    return this;
  }

  public void unsetFiveClassify() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIVECLASSIFY_ISSET_ID);
  }

  /** Returns true if field fiveClassify is set (has been assigned a value) and false otherwise */
  public boolean isSetFiveClassify() {
    return EncodingUtils.testBit(__isset_bitfield, __FIVECLASSIFY_ISSET_ID);
  }

  public void setFiveClassifyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIVECLASSIFY_ISSET_ID, value);
  }

  public int getOverdueNumsThree() {
    return this.overdueNumsThree;
  }

  public CusCredentials setOverdueNumsThree(int overdueNumsThree) {
    this.overdueNumsThree = overdueNumsThree;
    setOverdueNumsThreeIsSet(true);
    return this;
  }

  public void unsetOverdueNumsThree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUENUMSTHREE_ISSET_ID);
  }

  /** Returns true if field overdueNumsThree is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueNumsThree() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUENUMSTHREE_ISSET_ID);
  }

  public void setOverdueNumsThreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUENUMSTHREE_ISSET_ID, value);
  }

  public int getOverdueNumsTwo() {
    return this.overdueNumsTwo;
  }

  public CusCredentials setOverdueNumsTwo(int overdueNumsTwo) {
    this.overdueNumsTwo = overdueNumsTwo;
    setOverdueNumsTwoIsSet(true);
    return this;
  }

  public void unsetOverdueNumsTwo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUENUMSTWO_ISSET_ID);
  }

  /** Returns true if field overdueNumsTwo is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueNumsTwo() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUENUMSTWO_ISSET_ID);
  }

  public void setOverdueNumsTwoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUENUMSTWO_ISSET_ID, value);
  }

  public int getLoanTotal() {
    return this.loanTotal;
  }

  public CusCredentials setLoanTotal(int loanTotal) {
    this.loanTotal = loanTotal;
    setLoanTotalIsSet(true);
    return this;
  }

  public void unsetLoanTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANTOTAL_ISSET_ID);
  }

  /** Returns true if field loanTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANTOTAL_ISSET_ID);
  }

  public void setLoanTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANTOTAL_ISSET_ID, value);
  }

  public int getIsOverdue() {
    return this.isOverdue;
  }

  public CusCredentials setIsOverdue(int isOverdue) {
    this.isOverdue = isOverdue;
    setIsOverdueIsSet(true);
    return this;
  }

  public void unsetIsOverdue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOVERDUE_ISSET_ID);
  }

  /** Returns true if field isOverdue is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOverdue() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOVERDUE_ISSET_ID);
  }

  public void setIsOverdueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOVERDUE_ISSET_ID, value);
  }

  public double getOverdueMoney() {
    return this.overdueMoney;
  }

  public CusCredentials setOverdueMoney(double overdueMoney) {
    this.overdueMoney = overdueMoney;
    setOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field overdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID);
  }

  public void setOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID, value);
  }

  public double getOverdueTotalMoney() {
    return this.overdueTotalMoney;
  }

  public CusCredentials setOverdueTotalMoney(double overdueTotalMoney) {
    this.overdueTotalMoney = overdueTotalMoney;
    setOverdueTotalMoneyIsSet(true);
    return this;
  }

  public void unsetOverdueTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUETOTALMONEY_ISSET_ID);
  }

  /** Returns true if field overdueTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUETOTALMONEY_ISSET_ID);
  }

  public void setOverdueTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUETOTALMONEY_ISSET_ID, value);
  }

  public int getOverduePeriods() {
    return this.overduePeriods;
  }

  public CusCredentials setOverduePeriods(int overduePeriods) {
    this.overduePeriods = overduePeriods;
    setOverduePeriodsIsSet(true);
    return this;
  }

  public void unsetOverduePeriods() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEPERIODS_ISSET_ID);
  }

  /** Returns true if field overduePeriods is set (has been assigned a value) and false otherwise */
  public boolean isSetOverduePeriods() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEPERIODS_ISSET_ID);
  }

  public void setOverduePeriodsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEPERIODS_ISSET_ID, value);
  }

  public int getLoanApprovalsNums() {
    return this.loanApprovalsNums;
  }

  public CusCredentials setLoanApprovalsNums(int loanApprovalsNums) {
    this.loanApprovalsNums = loanApprovalsNums;
    setLoanApprovalsNumsIsSet(true);
    return this;
  }

  public void unsetLoanApprovalsNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAPPROVALSNUMS_ISSET_ID);
  }

  /** Returns true if field loanApprovalsNums is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanApprovalsNums() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAPPROVALSNUMS_ISSET_ID);
  }

  public void setLoanApprovalsNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAPPROVALSNUMS_ISSET_ID, value);
  }

  public int getLoanApprovalsNumsTwo() {
    return this.loanApprovalsNumsTwo;
  }

  public CusCredentials setLoanApprovalsNumsTwo(int loanApprovalsNumsTwo) {
    this.loanApprovalsNumsTwo = loanApprovalsNumsTwo;
    setLoanApprovalsNumsTwoIsSet(true);
    return this;
  }

  public void unsetLoanApprovalsNumsTwo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAPPROVALSNUMSTWO_ISSET_ID);
  }

  /** Returns true if field loanApprovalsNumsTwo is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanApprovalsNumsTwo() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAPPROVALSNUMSTWO_ISSET_ID);
  }

  public void setLoanApprovalsNumsTwoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAPPROVALSNUMSTWO_ISSET_ID, value);
  }

  public int getCreditApprovalsNums() {
    return this.creditApprovalsNums;
  }

  public CusCredentials setCreditApprovalsNums(int creditApprovalsNums) {
    this.creditApprovalsNums = creditApprovalsNums;
    setCreditApprovalsNumsIsSet(true);
    return this;
  }

  public void unsetCreditApprovalsNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAPPROVALSNUMS_ISSET_ID);
  }

  /** Returns true if field creditApprovalsNums is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditApprovalsNums() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAPPROVALSNUMS_ISSET_ID);
  }

  public void setCreditApprovalsNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAPPROVALSNUMS_ISSET_ID, value);
  }

  public int getCreditApprovalsNumsThree() {
    return this.creditApprovalsNumsThree;
  }

  public CusCredentials setCreditApprovalsNumsThree(int creditApprovalsNumsThree) {
    this.creditApprovalsNumsThree = creditApprovalsNumsThree;
    setCreditApprovalsNumsThreeIsSet(true);
    return this;
  }

  public void unsetCreditApprovalsNumsThree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAPPROVALSNUMSTHREE_ISSET_ID);
  }

  /** Returns true if field creditApprovalsNumsThree is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditApprovalsNumsThree() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAPPROVALSNUMSTHREE_ISSET_ID);
  }

  public void setCreditApprovalsNumsThreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAPPROVALSNUMSTHREE_ISSET_ID, value);
  }

  public int getInquiriesNums() {
    return this.inquiriesNums;
  }

  public CusCredentials setInquiriesNums(int inquiriesNums) {
    this.inquiriesNums = inquiriesNums;
    setInquiriesNumsIsSet(true);
    return this;
  }

  public void unsetInquiriesNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INQUIRIESNUMS_ISSET_ID);
  }

  /** Returns true if field inquiriesNums is set (has been assigned a value) and false otherwise */
  public boolean isSetInquiriesNums() {
    return EncodingUtils.testBit(__isset_bitfield, __INQUIRIESNUMS_ISSET_ID);
  }

  public void setInquiriesNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INQUIRIESNUMS_ISSET_ID, value);
  }

  public int getSocialSecurity() {
    return this.socialSecurity;
  }

  public CusCredentials setSocialSecurity(int socialSecurity) {
    this.socialSecurity = socialSecurity;
    setSocialSecurityIsSet(true);
    return this;
  }

  public void unsetSocialSecurity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOCIALSECURITY_ISSET_ID);
  }

  /** Returns true if field socialSecurity is set (has been assigned a value) and false otherwise */
  public boolean isSetSocialSecurity() {
    return EncodingUtils.testBit(__isset_bitfield, __SOCIALSECURITY_ISSET_ID);
  }

  public void setSocialSecurityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOCIALSECURITY_ISSET_ID, value);
  }

  public int getAccumulationFund() {
    return this.accumulationFund;
  }

  public CusCredentials setAccumulationFund(int accumulationFund) {
    this.accumulationFund = accumulationFund;
    setAccumulationFundIsSet(true);
    return this;
  }

  public void unsetAccumulationFund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCUMULATIONFUND_ISSET_ID);
  }

  /** Returns true if field accumulationFund is set (has been assigned a value) and false otherwise */
  public boolean isSetAccumulationFund() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCUMULATIONFUND_ISSET_ID);
  }

  public void setAccumulationFundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCUMULATIONFUND_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public CusCredentials setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public CusCredentials setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public CusCredentials setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public CusCredentials setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getCustomerNature() {
    return this.customerNature;
  }

  public CusCredentials setCustomerNature(String customerNature) {
    this.customerNature = customerNature;
    return this;
  }

  public void unsetCustomerNature() {
    this.customerNature = null;
  }

  /** Returns true if field customerNature is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerNature() {
    return this.customerNature != null;
  }

  public void setCustomerNatureIsSet(boolean value) {
    if (!value) {
      this.customerNature = null;
    }
  }

  public String getHouseName() {
    return this.houseName;
  }

  public CusCredentials setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getLandNature() {
    return this.landNature;
  }

  public CusCredentials setLandNature(String landNature) {
    this.landNature = landNature;
    return this;
  }

  public void unsetLandNature() {
    this.landNature = null;
  }

  /** Returns true if field landNature is set (has been assigned a value) and false otherwise */
  public boolean isSetLandNature() {
    return this.landNature != null;
  }

  public void setLandNatureIsSet(boolean value) {
    if (!value) {
      this.landNature = null;
    }
  }

  public String getEstateUse() {
    return this.estateUse;
  }

  public CusCredentials setEstateUse(String estateUse) {
    this.estateUse = estateUse;
    return this;
  }

  public void unsetEstateUse() {
    this.estateUse = null;
  }

  /** Returns true if field estateUse is set (has been assigned a value) and false otherwise */
  public boolean isSetEstateUse() {
    return this.estateUse != null;
  }

  public void setEstateUseIsSet(boolean value) {
    if (!value) {
      this.estateUse = null;
    }
  }

  public String getIsCallPerson() {
    return this.isCallPerson;
  }

  public CusCredentials setIsCallPerson(String isCallPerson) {
    this.isCallPerson = isCallPerson;
    return this;
  }

  public void unsetIsCallPerson() {
    this.isCallPerson = null;
  }

  /** Returns true if field isCallPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCallPerson() {
    return this.isCallPerson != null;
  }

  public void setIsCallPersonIsSet(boolean value) {
    if (!value) {
      this.isCallPerson = null;
    }
  }

  public int getIsCallUnit() {
    return this.isCallUnit;
  }

  public CusCredentials setIsCallUnit(int isCallUnit) {
    this.isCallUnit = isCallUnit;
    setIsCallUnitIsSet(true);
    return this;
  }

  public void unsetIsCallUnit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCALLUNIT_ISSET_ID);
  }

  /** Returns true if field isCallUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCallUnit() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCALLUNIT_ISSET_ID);
  }

  public void setIsCallUnitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCALLUNIT_ISSET_ID, value);
  }

  public int getIsCallContact() {
    return this.isCallContact;
  }

  public CusCredentials setIsCallContact(int isCallContact) {
    this.isCallContact = isCallContact;
    setIsCallContactIsSet(true);
    return this;
  }

  public void unsetIsCallContact() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCALLCONTACT_ISSET_ID);
  }

  /** Returns true if field isCallContact is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCallContact() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCALLCONTACT_ISSET_ID);
  }

  public void setIsCallContactIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCALLCONTACT_ISSET_ID, value);
  }

  public double getMonthlyIncome() {
    return this.monthlyIncome;
  }

  public CusCredentials setMonthlyIncome(double monthlyIncome) {
    this.monthlyIncome = monthlyIncome;
    setMonthlyIncomeIsSet(true);
    return this;
  }

  public void unsetMonthlyIncome() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLYINCOME_ISSET_ID);
  }

  /** Returns true if field monthlyIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthlyIncome() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLYINCOME_ISSET_ID);
  }

  public void setMonthlyIncomeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLYINCOME_ISSET_ID, value);
  }

  public double getMonthlyReturn() {
    return this.monthlyReturn;
  }

  public CusCredentials setMonthlyReturn(double monthlyReturn) {
    this.monthlyReturn = monthlyReturn;
    setMonthlyReturnIsSet(true);
    return this;
  }

  public void unsetMonthlyReturn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLYRETURN_ISSET_ID);
  }

  /** Returns true if field monthlyReturn is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthlyReturn() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLYRETURN_ISSET_ID);
  }

  public void setMonthlyReturnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLYRETURN_ISSET_ID, value);
  }

  public double getDebtRadio() {
    return this.debtRadio;
  }

  public CusCredentials setDebtRadio(double debtRadio) {
    this.debtRadio = debtRadio;
    setDebtRadioIsSet(true);
    return this;
  }

  public void unsetDebtRadio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEBTRADIO_ISSET_ID);
  }

  /** Returns true if field debtRadio is set (has been assigned a value) and false otherwise */
  public boolean isSetDebtRadio() {
    return EncodingUtils.testBit(__isset_bitfield, __DEBTRADIO_ISSET_ID);
  }

  public void setDebtRadioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEBTRADIO_ISSET_ID, value);
  }

  public double getLeaseTerm() {
    return this.leaseTerm;
  }

  public CusCredentials setLeaseTerm(double leaseTerm) {
    this.leaseTerm = leaseTerm;
    setLeaseTermIsSet(true);
    return this;
  }

  public void unsetLeaseTerm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEASETERM_ISSET_ID);
  }

  /** Returns true if field leaseTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaseTerm() {
    return EncodingUtils.testBit(__isset_bitfield, __LEASETERM_ISSET_ID);
  }

  public void setLeaseTermIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEASETERM_ISSET_ID, value);
  }

  public double getTrialQuota() {
    return this.trialQuota;
  }

  public CusCredentials setTrialQuota(double trialQuota) {
    this.trialQuota = trialQuota;
    setTrialQuotaIsSet(true);
    return this;
  }

  public void unsetTrialQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIALQUOTA_ISSET_ID);
  }

  /** Returns true if field trialQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetTrialQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIALQUOTA_ISSET_ID);
  }

  public void setTrialQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIALQUOTA_ISSET_ID, value);
  }

  public double getLoanMonthlyReturn() {
    return this.loanMonthlyReturn;
  }

  public CusCredentials setLoanMonthlyReturn(double loanMonthlyReturn) {
    this.loanMonthlyReturn = loanMonthlyReturn;
    setLoanMonthlyReturnIsSet(true);
    return this;
  }

  public void unsetLoanMonthlyReturn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONTHLYRETURN_ISSET_ID);
  }

  /** Returns true if field loanMonthlyReturn is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMonthlyReturn() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONTHLYRETURN_ISSET_ID);
  }

  public void setLoanMonthlyReturnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONTHLYRETURN_ISSET_ID, value);
  }

  public String getRiskOneOpinion() {
    return this.riskOneOpinion;
  }

  public CusCredentials setRiskOneOpinion(String riskOneOpinion) {
    this.riskOneOpinion = riskOneOpinion;
    return this;
  }

  public void unsetRiskOneOpinion() {
    this.riskOneOpinion = null;
  }

  /** Returns true if field riskOneOpinion is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskOneOpinion() {
    return this.riskOneOpinion != null;
  }

  public void setRiskOneOpinionIsSet(boolean value) {
    if (!value) {
      this.riskOneOpinion = null;
    }
  }

  public String getRiskOverOpinion() {
    return this.riskOverOpinion;
  }

  public CusCredentials setRiskOverOpinion(String riskOverOpinion) {
    this.riskOverOpinion = riskOverOpinion;
    return this;
  }

  public void unsetRiskOverOpinion() {
    this.riskOverOpinion = null;
  }

  /** Returns true if field riskOverOpinion is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskOverOpinion() {
    return this.riskOverOpinion != null;
  }

  public void setRiskOverOpinionIsSet(boolean value) {
    if (!value) {
      this.riskOverOpinion = null;
    }
  }

  public String getEmploySituation() {
    return this.employSituation;
  }

  public CusCredentials setEmploySituation(String employSituation) {
    this.employSituation = employSituation;
    return this;
  }

  public void unsetEmploySituation() {
    this.employSituation = null;
  }

  /** Returns true if field employSituation is set (has been assigned a value) and false otherwise */
  public boolean isSetEmploySituation() {
    return this.employSituation != null;
  }

  public void setEmploySituationIsSet(boolean value) {
    if (!value) {
      this.employSituation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case FIVE_CLASSIFY:
      if (value == null) {
        unsetFiveClassify();
      } else {
        setFiveClassify((Integer)value);
      }
      break;

    case OVERDUE_NUMS_THREE:
      if (value == null) {
        unsetOverdueNumsThree();
      } else {
        setOverdueNumsThree((Integer)value);
      }
      break;

    case OVERDUE_NUMS_TWO:
      if (value == null) {
        unsetOverdueNumsTwo();
      } else {
        setOverdueNumsTwo((Integer)value);
      }
      break;

    case LOAN_TOTAL:
      if (value == null) {
        unsetLoanTotal();
      } else {
        setLoanTotal((Integer)value);
      }
      break;

    case IS_OVERDUE:
      if (value == null) {
        unsetIsOverdue();
      } else {
        setIsOverdue((Integer)value);
      }
      break;

    case OVERDUE_MONEY:
      if (value == null) {
        unsetOverdueMoney();
      } else {
        setOverdueMoney((Double)value);
      }
      break;

    case OVERDUE_TOTAL_MONEY:
      if (value == null) {
        unsetOverdueTotalMoney();
      } else {
        setOverdueTotalMoney((Double)value);
      }
      break;

    case OVERDUE_PERIODS:
      if (value == null) {
        unsetOverduePeriods();
      } else {
        setOverduePeriods((Integer)value);
      }
      break;

    case LOAN_APPROVALS_NUMS:
      if (value == null) {
        unsetLoanApprovalsNums();
      } else {
        setLoanApprovalsNums((Integer)value);
      }
      break;

    case LOAN_APPROVALS_NUMS_TWO:
      if (value == null) {
        unsetLoanApprovalsNumsTwo();
      } else {
        setLoanApprovalsNumsTwo((Integer)value);
      }
      break;

    case CREDIT_APPROVALS_NUMS:
      if (value == null) {
        unsetCreditApprovalsNums();
      } else {
        setCreditApprovalsNums((Integer)value);
      }
      break;

    case CREDIT_APPROVALS_NUMS_THREE:
      if (value == null) {
        unsetCreditApprovalsNumsThree();
      } else {
        setCreditApprovalsNumsThree((Integer)value);
      }
      break;

    case INQUIRIES_NUMS:
      if (value == null) {
        unsetInquiriesNums();
      } else {
        setInquiriesNums((Integer)value);
      }
      break;

    case SOCIAL_SECURITY:
      if (value == null) {
        unsetSocialSecurity();
      } else {
        setSocialSecurity((Integer)value);
      }
      break;

    case ACCUMULATION_FUND:
      if (value == null) {
        unsetAccumulationFund();
      } else {
        setAccumulationFund((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case CUSTOMER_NATURE:
      if (value == null) {
        unsetCustomerNature();
      } else {
        setCustomerNature((String)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case LAND_NATURE:
      if (value == null) {
        unsetLandNature();
      } else {
        setLandNature((String)value);
      }
      break;

    case ESTATE_USE:
      if (value == null) {
        unsetEstateUse();
      } else {
        setEstateUse((String)value);
      }
      break;

    case IS_CALL_PERSON:
      if (value == null) {
        unsetIsCallPerson();
      } else {
        setIsCallPerson((String)value);
      }
      break;

    case IS_CALL_UNIT:
      if (value == null) {
        unsetIsCallUnit();
      } else {
        setIsCallUnit((Integer)value);
      }
      break;

    case IS_CALL_CONTACT:
      if (value == null) {
        unsetIsCallContact();
      } else {
        setIsCallContact((Integer)value);
      }
      break;

    case MONTHLY_INCOME:
      if (value == null) {
        unsetMonthlyIncome();
      } else {
        setMonthlyIncome((Double)value);
      }
      break;

    case MONTHLY_RETURN:
      if (value == null) {
        unsetMonthlyReturn();
      } else {
        setMonthlyReturn((Double)value);
      }
      break;

    case DEBT_RADIO:
      if (value == null) {
        unsetDebtRadio();
      } else {
        setDebtRadio((Double)value);
      }
      break;

    case LEASE_TERM:
      if (value == null) {
        unsetLeaseTerm();
      } else {
        setLeaseTerm((Double)value);
      }
      break;

    case TRIAL_QUOTA:
      if (value == null) {
        unsetTrialQuota();
      } else {
        setTrialQuota((Double)value);
      }
      break;

    case LOAN_MONTHLY_RETURN:
      if (value == null) {
        unsetLoanMonthlyReturn();
      } else {
        setLoanMonthlyReturn((Double)value);
      }
      break;

    case RISK_ONE_OPINION:
      if (value == null) {
        unsetRiskOneOpinion();
      } else {
        setRiskOneOpinion((String)value);
      }
      break;

    case RISK_OVER_OPINION:
      if (value == null) {
        unsetRiskOverOpinion();
      } else {
        setRiskOverOpinion((String)value);
      }
      break;

    case EMPLOY_SITUATION:
      if (value == null) {
        unsetEmploySituation();
      } else {
        setEmploySituation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case FIVE_CLASSIFY:
      return Integer.valueOf(getFiveClassify());

    case OVERDUE_NUMS_THREE:
      return Integer.valueOf(getOverdueNumsThree());

    case OVERDUE_NUMS_TWO:
      return Integer.valueOf(getOverdueNumsTwo());

    case LOAN_TOTAL:
      return Integer.valueOf(getLoanTotal());

    case IS_OVERDUE:
      return Integer.valueOf(getIsOverdue());

    case OVERDUE_MONEY:
      return Double.valueOf(getOverdueMoney());

    case OVERDUE_TOTAL_MONEY:
      return Double.valueOf(getOverdueTotalMoney());

    case OVERDUE_PERIODS:
      return Integer.valueOf(getOverduePeriods());

    case LOAN_APPROVALS_NUMS:
      return Integer.valueOf(getLoanApprovalsNums());

    case LOAN_APPROVALS_NUMS_TWO:
      return Integer.valueOf(getLoanApprovalsNumsTwo());

    case CREDIT_APPROVALS_NUMS:
      return Integer.valueOf(getCreditApprovalsNums());

    case CREDIT_APPROVALS_NUMS_THREE:
      return Integer.valueOf(getCreditApprovalsNumsThree());

    case INQUIRIES_NUMS:
      return Integer.valueOf(getInquiriesNums());

    case SOCIAL_SECURITY:
      return Integer.valueOf(getSocialSecurity());

    case ACCUMULATION_FUND:
      return Integer.valueOf(getAccumulationFund());

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case CUSTOMER_NATURE:
      return getCustomerNature();

    case HOUSE_NAME:
      return getHouseName();

    case LAND_NATURE:
      return getLandNature();

    case ESTATE_USE:
      return getEstateUse();

    case IS_CALL_PERSON:
      return getIsCallPerson();

    case IS_CALL_UNIT:
      return Integer.valueOf(getIsCallUnit());

    case IS_CALL_CONTACT:
      return Integer.valueOf(getIsCallContact());

    case MONTHLY_INCOME:
      return Double.valueOf(getMonthlyIncome());

    case MONTHLY_RETURN:
      return Double.valueOf(getMonthlyReturn());

    case DEBT_RADIO:
      return Double.valueOf(getDebtRadio());

    case LEASE_TERM:
      return Double.valueOf(getLeaseTerm());

    case TRIAL_QUOTA:
      return Double.valueOf(getTrialQuota());

    case LOAN_MONTHLY_RETURN:
      return Double.valueOf(getLoanMonthlyReturn());

    case RISK_ONE_OPINION:
      return getRiskOneOpinion();

    case RISK_OVER_OPINION:
      return getRiskOverOpinion();

    case EMPLOY_SITUATION:
      return getEmploySituation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACCT_ID:
      return isSetAcctId();
    case PROJECT_ID:
      return isSetProjectId();
    case FIVE_CLASSIFY:
      return isSetFiveClassify();
    case OVERDUE_NUMS_THREE:
      return isSetOverdueNumsThree();
    case OVERDUE_NUMS_TWO:
      return isSetOverdueNumsTwo();
    case LOAN_TOTAL:
      return isSetLoanTotal();
    case IS_OVERDUE:
      return isSetIsOverdue();
    case OVERDUE_MONEY:
      return isSetOverdueMoney();
    case OVERDUE_TOTAL_MONEY:
      return isSetOverdueTotalMoney();
    case OVERDUE_PERIODS:
      return isSetOverduePeriods();
    case LOAN_APPROVALS_NUMS:
      return isSetLoanApprovalsNums();
    case LOAN_APPROVALS_NUMS_TWO:
      return isSetLoanApprovalsNumsTwo();
    case CREDIT_APPROVALS_NUMS:
      return isSetCreditApprovalsNums();
    case CREDIT_APPROVALS_NUMS_THREE:
      return isSetCreditApprovalsNumsThree();
    case INQUIRIES_NUMS:
      return isSetInquiriesNums();
    case SOCIAL_SECURITY:
      return isSetSocialSecurity();
    case ACCUMULATION_FUND:
      return isSetAccumulationFund();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case CUSTOMER_NATURE:
      return isSetCustomerNature();
    case HOUSE_NAME:
      return isSetHouseName();
    case LAND_NATURE:
      return isSetLandNature();
    case ESTATE_USE:
      return isSetEstateUse();
    case IS_CALL_PERSON:
      return isSetIsCallPerson();
    case IS_CALL_UNIT:
      return isSetIsCallUnit();
    case IS_CALL_CONTACT:
      return isSetIsCallContact();
    case MONTHLY_INCOME:
      return isSetMonthlyIncome();
    case MONTHLY_RETURN:
      return isSetMonthlyReturn();
    case DEBT_RADIO:
      return isSetDebtRadio();
    case LEASE_TERM:
      return isSetLeaseTerm();
    case TRIAL_QUOTA:
      return isSetTrialQuota();
    case LOAN_MONTHLY_RETURN:
      return isSetLoanMonthlyReturn();
    case RISK_ONE_OPINION:
      return isSetRiskOneOpinion();
    case RISK_OVER_OPINION:
      return isSetRiskOverOpinion();
    case EMPLOY_SITUATION:
      return isSetEmploySituation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusCredentials)
      return this.equals((CusCredentials)that);
    return false;
  }

  public boolean equals(CusCredentials that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_fiveClassify = true;
    boolean that_present_fiveClassify = true;
    if (this_present_fiveClassify || that_present_fiveClassify) {
      if (!(this_present_fiveClassify && that_present_fiveClassify))
        return false;
      if (this.fiveClassify != that.fiveClassify)
        return false;
    }

    boolean this_present_overdueNumsThree = true;
    boolean that_present_overdueNumsThree = true;
    if (this_present_overdueNumsThree || that_present_overdueNumsThree) {
      if (!(this_present_overdueNumsThree && that_present_overdueNumsThree))
        return false;
      if (this.overdueNumsThree != that.overdueNumsThree)
        return false;
    }

    boolean this_present_overdueNumsTwo = true;
    boolean that_present_overdueNumsTwo = true;
    if (this_present_overdueNumsTwo || that_present_overdueNumsTwo) {
      if (!(this_present_overdueNumsTwo && that_present_overdueNumsTwo))
        return false;
      if (this.overdueNumsTwo != that.overdueNumsTwo)
        return false;
    }

    boolean this_present_loanTotal = true;
    boolean that_present_loanTotal = true;
    if (this_present_loanTotal || that_present_loanTotal) {
      if (!(this_present_loanTotal && that_present_loanTotal))
        return false;
      if (this.loanTotal != that.loanTotal)
        return false;
    }

    boolean this_present_isOverdue = true;
    boolean that_present_isOverdue = true;
    if (this_present_isOverdue || that_present_isOverdue) {
      if (!(this_present_isOverdue && that_present_isOverdue))
        return false;
      if (this.isOverdue != that.isOverdue)
        return false;
    }

    boolean this_present_overdueMoney = true;
    boolean that_present_overdueMoney = true;
    if (this_present_overdueMoney || that_present_overdueMoney) {
      if (!(this_present_overdueMoney && that_present_overdueMoney))
        return false;
      if (this.overdueMoney != that.overdueMoney)
        return false;
    }

    boolean this_present_overdueTotalMoney = true;
    boolean that_present_overdueTotalMoney = true;
    if (this_present_overdueTotalMoney || that_present_overdueTotalMoney) {
      if (!(this_present_overdueTotalMoney && that_present_overdueTotalMoney))
        return false;
      if (this.overdueTotalMoney != that.overdueTotalMoney)
        return false;
    }

    boolean this_present_overduePeriods = true;
    boolean that_present_overduePeriods = true;
    if (this_present_overduePeriods || that_present_overduePeriods) {
      if (!(this_present_overduePeriods && that_present_overduePeriods))
        return false;
      if (this.overduePeriods != that.overduePeriods)
        return false;
    }

    boolean this_present_loanApprovalsNums = true;
    boolean that_present_loanApprovalsNums = true;
    if (this_present_loanApprovalsNums || that_present_loanApprovalsNums) {
      if (!(this_present_loanApprovalsNums && that_present_loanApprovalsNums))
        return false;
      if (this.loanApprovalsNums != that.loanApprovalsNums)
        return false;
    }

    boolean this_present_loanApprovalsNumsTwo = true;
    boolean that_present_loanApprovalsNumsTwo = true;
    if (this_present_loanApprovalsNumsTwo || that_present_loanApprovalsNumsTwo) {
      if (!(this_present_loanApprovalsNumsTwo && that_present_loanApprovalsNumsTwo))
        return false;
      if (this.loanApprovalsNumsTwo != that.loanApprovalsNumsTwo)
        return false;
    }

    boolean this_present_creditApprovalsNums = true;
    boolean that_present_creditApprovalsNums = true;
    if (this_present_creditApprovalsNums || that_present_creditApprovalsNums) {
      if (!(this_present_creditApprovalsNums && that_present_creditApprovalsNums))
        return false;
      if (this.creditApprovalsNums != that.creditApprovalsNums)
        return false;
    }

    boolean this_present_creditApprovalsNumsThree = true;
    boolean that_present_creditApprovalsNumsThree = true;
    if (this_present_creditApprovalsNumsThree || that_present_creditApprovalsNumsThree) {
      if (!(this_present_creditApprovalsNumsThree && that_present_creditApprovalsNumsThree))
        return false;
      if (this.creditApprovalsNumsThree != that.creditApprovalsNumsThree)
        return false;
    }

    boolean this_present_inquiriesNums = true;
    boolean that_present_inquiriesNums = true;
    if (this_present_inquiriesNums || that_present_inquiriesNums) {
      if (!(this_present_inquiriesNums && that_present_inquiriesNums))
        return false;
      if (this.inquiriesNums != that.inquiriesNums)
        return false;
    }

    boolean this_present_socialSecurity = true;
    boolean that_present_socialSecurity = true;
    if (this_present_socialSecurity || that_present_socialSecurity) {
      if (!(this_present_socialSecurity && that_present_socialSecurity))
        return false;
      if (this.socialSecurity != that.socialSecurity)
        return false;
    }

    boolean this_present_accumulationFund = true;
    boolean that_present_accumulationFund = true;
    if (this_present_accumulationFund || that_present_accumulationFund) {
      if (!(this_present_accumulationFund && that_present_accumulationFund))
        return false;
      if (this.accumulationFund != that.accumulationFund)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_customerNature = true && this.isSetCustomerNature();
    boolean that_present_customerNature = true && that.isSetCustomerNature();
    if (this_present_customerNature || that_present_customerNature) {
      if (!(this_present_customerNature && that_present_customerNature))
        return false;
      if (!this.customerNature.equals(that.customerNature))
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_landNature = true && this.isSetLandNature();
    boolean that_present_landNature = true && that.isSetLandNature();
    if (this_present_landNature || that_present_landNature) {
      if (!(this_present_landNature && that_present_landNature))
        return false;
      if (!this.landNature.equals(that.landNature))
        return false;
    }

    boolean this_present_estateUse = true && this.isSetEstateUse();
    boolean that_present_estateUse = true && that.isSetEstateUse();
    if (this_present_estateUse || that_present_estateUse) {
      if (!(this_present_estateUse && that_present_estateUse))
        return false;
      if (!this.estateUse.equals(that.estateUse))
        return false;
    }

    boolean this_present_isCallPerson = true && this.isSetIsCallPerson();
    boolean that_present_isCallPerson = true && that.isSetIsCallPerson();
    if (this_present_isCallPerson || that_present_isCallPerson) {
      if (!(this_present_isCallPerson && that_present_isCallPerson))
        return false;
      if (!this.isCallPerson.equals(that.isCallPerson))
        return false;
    }

    boolean this_present_isCallUnit = true;
    boolean that_present_isCallUnit = true;
    if (this_present_isCallUnit || that_present_isCallUnit) {
      if (!(this_present_isCallUnit && that_present_isCallUnit))
        return false;
      if (this.isCallUnit != that.isCallUnit)
        return false;
    }

    boolean this_present_isCallContact = true;
    boolean that_present_isCallContact = true;
    if (this_present_isCallContact || that_present_isCallContact) {
      if (!(this_present_isCallContact && that_present_isCallContact))
        return false;
      if (this.isCallContact != that.isCallContact)
        return false;
    }

    boolean this_present_monthlyIncome = true;
    boolean that_present_monthlyIncome = true;
    if (this_present_monthlyIncome || that_present_monthlyIncome) {
      if (!(this_present_monthlyIncome && that_present_monthlyIncome))
        return false;
      if (this.monthlyIncome != that.monthlyIncome)
        return false;
    }

    boolean this_present_monthlyReturn = true;
    boolean that_present_monthlyReturn = true;
    if (this_present_monthlyReturn || that_present_monthlyReturn) {
      if (!(this_present_monthlyReturn && that_present_monthlyReturn))
        return false;
      if (this.monthlyReturn != that.monthlyReturn)
        return false;
    }

    boolean this_present_debtRadio = true;
    boolean that_present_debtRadio = true;
    if (this_present_debtRadio || that_present_debtRadio) {
      if (!(this_present_debtRadio && that_present_debtRadio))
        return false;
      if (this.debtRadio != that.debtRadio)
        return false;
    }

    boolean this_present_leaseTerm = true;
    boolean that_present_leaseTerm = true;
    if (this_present_leaseTerm || that_present_leaseTerm) {
      if (!(this_present_leaseTerm && that_present_leaseTerm))
        return false;
      if (this.leaseTerm != that.leaseTerm)
        return false;
    }

    boolean this_present_trialQuota = true;
    boolean that_present_trialQuota = true;
    if (this_present_trialQuota || that_present_trialQuota) {
      if (!(this_present_trialQuota && that_present_trialQuota))
        return false;
      if (this.trialQuota != that.trialQuota)
        return false;
    }

    boolean this_present_loanMonthlyReturn = true;
    boolean that_present_loanMonthlyReturn = true;
    if (this_present_loanMonthlyReturn || that_present_loanMonthlyReturn) {
      if (!(this_present_loanMonthlyReturn && that_present_loanMonthlyReturn))
        return false;
      if (this.loanMonthlyReturn != that.loanMonthlyReturn)
        return false;
    }

    boolean this_present_riskOneOpinion = true && this.isSetRiskOneOpinion();
    boolean that_present_riskOneOpinion = true && that.isSetRiskOneOpinion();
    if (this_present_riskOneOpinion || that_present_riskOneOpinion) {
      if (!(this_present_riskOneOpinion && that_present_riskOneOpinion))
        return false;
      if (!this.riskOneOpinion.equals(that.riskOneOpinion))
        return false;
    }

    boolean this_present_riskOverOpinion = true && this.isSetRiskOverOpinion();
    boolean that_present_riskOverOpinion = true && that.isSetRiskOverOpinion();
    if (this_present_riskOverOpinion || that_present_riskOverOpinion) {
      if (!(this_present_riskOverOpinion && that_present_riskOverOpinion))
        return false;
      if (!this.riskOverOpinion.equals(that.riskOverOpinion))
        return false;
    }

    boolean this_present_employSituation = true && this.isSetEmploySituation();
    boolean that_present_employSituation = true && that.isSetEmploySituation();
    if (this_present_employSituation || that_present_employSituation) {
      if (!(this_present_employSituation && that_present_employSituation))
        return false;
      if (!this.employSituation.equals(that.employSituation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_fiveClassify = true;
    list.add(present_fiveClassify);
    if (present_fiveClassify)
      list.add(fiveClassify);

    boolean present_overdueNumsThree = true;
    list.add(present_overdueNumsThree);
    if (present_overdueNumsThree)
      list.add(overdueNumsThree);

    boolean present_overdueNumsTwo = true;
    list.add(present_overdueNumsTwo);
    if (present_overdueNumsTwo)
      list.add(overdueNumsTwo);

    boolean present_loanTotal = true;
    list.add(present_loanTotal);
    if (present_loanTotal)
      list.add(loanTotal);

    boolean present_isOverdue = true;
    list.add(present_isOverdue);
    if (present_isOverdue)
      list.add(isOverdue);

    boolean present_overdueMoney = true;
    list.add(present_overdueMoney);
    if (present_overdueMoney)
      list.add(overdueMoney);

    boolean present_overdueTotalMoney = true;
    list.add(present_overdueTotalMoney);
    if (present_overdueTotalMoney)
      list.add(overdueTotalMoney);

    boolean present_overduePeriods = true;
    list.add(present_overduePeriods);
    if (present_overduePeriods)
      list.add(overduePeriods);

    boolean present_loanApprovalsNums = true;
    list.add(present_loanApprovalsNums);
    if (present_loanApprovalsNums)
      list.add(loanApprovalsNums);

    boolean present_loanApprovalsNumsTwo = true;
    list.add(present_loanApprovalsNumsTwo);
    if (present_loanApprovalsNumsTwo)
      list.add(loanApprovalsNumsTwo);

    boolean present_creditApprovalsNums = true;
    list.add(present_creditApprovalsNums);
    if (present_creditApprovalsNums)
      list.add(creditApprovalsNums);

    boolean present_creditApprovalsNumsThree = true;
    list.add(present_creditApprovalsNumsThree);
    if (present_creditApprovalsNumsThree)
      list.add(creditApprovalsNumsThree);

    boolean present_inquiriesNums = true;
    list.add(present_inquiriesNums);
    if (present_inquiriesNums)
      list.add(inquiriesNums);

    boolean present_socialSecurity = true;
    list.add(present_socialSecurity);
    if (present_socialSecurity)
      list.add(socialSecurity);

    boolean present_accumulationFund = true;
    list.add(present_accumulationFund);
    if (present_accumulationFund)
      list.add(accumulationFund);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_customerNature = true && (isSetCustomerNature());
    list.add(present_customerNature);
    if (present_customerNature)
      list.add(customerNature);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_landNature = true && (isSetLandNature());
    list.add(present_landNature);
    if (present_landNature)
      list.add(landNature);

    boolean present_estateUse = true && (isSetEstateUse());
    list.add(present_estateUse);
    if (present_estateUse)
      list.add(estateUse);

    boolean present_isCallPerson = true && (isSetIsCallPerson());
    list.add(present_isCallPerson);
    if (present_isCallPerson)
      list.add(isCallPerson);

    boolean present_isCallUnit = true;
    list.add(present_isCallUnit);
    if (present_isCallUnit)
      list.add(isCallUnit);

    boolean present_isCallContact = true;
    list.add(present_isCallContact);
    if (present_isCallContact)
      list.add(isCallContact);

    boolean present_monthlyIncome = true;
    list.add(present_monthlyIncome);
    if (present_monthlyIncome)
      list.add(monthlyIncome);

    boolean present_monthlyReturn = true;
    list.add(present_monthlyReturn);
    if (present_monthlyReturn)
      list.add(monthlyReturn);

    boolean present_debtRadio = true;
    list.add(present_debtRadio);
    if (present_debtRadio)
      list.add(debtRadio);

    boolean present_leaseTerm = true;
    list.add(present_leaseTerm);
    if (present_leaseTerm)
      list.add(leaseTerm);

    boolean present_trialQuota = true;
    list.add(present_trialQuota);
    if (present_trialQuota)
      list.add(trialQuota);

    boolean present_loanMonthlyReturn = true;
    list.add(present_loanMonthlyReturn);
    if (present_loanMonthlyReturn)
      list.add(loanMonthlyReturn);

    boolean present_riskOneOpinion = true && (isSetRiskOneOpinion());
    list.add(present_riskOneOpinion);
    if (present_riskOneOpinion)
      list.add(riskOneOpinion);

    boolean present_riskOverOpinion = true && (isSetRiskOverOpinion());
    list.add(present_riskOverOpinion);
    if (present_riskOverOpinion)
      list.add(riskOverOpinion);

    boolean present_employSituation = true && (isSetEmploySituation());
    list.add(present_employSituation);
    if (present_employSituation)
      list.add(employSituation);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusCredentials other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFiveClassify()).compareTo(other.isSetFiveClassify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiveClassify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fiveClassify, other.fiveClassify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueNumsThree()).compareTo(other.isSetOverdueNumsThree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueNumsThree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueNumsThree, other.overdueNumsThree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueNumsTwo()).compareTo(other.isSetOverdueNumsTwo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueNumsTwo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueNumsTwo, other.overdueNumsTwo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTotal()).compareTo(other.isSetLoanTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTotal, other.loanTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOverdue()).compareTo(other.isSetIsOverdue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOverdue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOverdue, other.isOverdue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueMoney()).compareTo(other.isSetOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueMoney, other.overdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueTotalMoney()).compareTo(other.isSetOverdueTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueTotalMoney, other.overdueTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverduePeriods()).compareTo(other.isSetOverduePeriods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverduePeriods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overduePeriods, other.overduePeriods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanApprovalsNums()).compareTo(other.isSetLoanApprovalsNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanApprovalsNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanApprovalsNums, other.loanApprovalsNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanApprovalsNumsTwo()).compareTo(other.isSetLoanApprovalsNumsTwo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanApprovalsNumsTwo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanApprovalsNumsTwo, other.loanApprovalsNumsTwo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditApprovalsNums()).compareTo(other.isSetCreditApprovalsNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditApprovalsNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditApprovalsNums, other.creditApprovalsNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditApprovalsNumsThree()).compareTo(other.isSetCreditApprovalsNumsThree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditApprovalsNumsThree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditApprovalsNumsThree, other.creditApprovalsNumsThree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInquiriesNums()).compareTo(other.isSetInquiriesNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInquiriesNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inquiriesNums, other.inquiriesNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSocialSecurity()).compareTo(other.isSetSocialSecurity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSocialSecurity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialSecurity, other.socialSecurity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccumulationFund()).compareTo(other.isSetAccumulationFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccumulationFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accumulationFund, other.accumulationFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerNature()).compareTo(other.isSetCustomerNature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerNature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerNature, other.customerNature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLandNature()).compareTo(other.isSetLandNature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLandNature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landNature, other.landNature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstateUse()).compareTo(other.isSetEstateUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstateUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estateUse, other.estateUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCallPerson()).compareTo(other.isSetIsCallPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCallPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCallPerson, other.isCallPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCallUnit()).compareTo(other.isSetIsCallUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCallUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCallUnit, other.isCallUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCallContact()).compareTo(other.isSetIsCallContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCallContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCallContact, other.isCallContact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthlyIncome()).compareTo(other.isSetMonthlyIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthlyIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthlyIncome, other.monthlyIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthlyReturn()).compareTo(other.isSetMonthlyReturn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthlyReturn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthlyReturn, other.monthlyReturn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebtRadio()).compareTo(other.isSetDebtRadio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebtRadio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debtRadio, other.debtRadio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaseTerm()).compareTo(other.isSetLeaseTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaseTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaseTerm, other.leaseTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrialQuota()).compareTo(other.isSetTrialQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrialQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trialQuota, other.trialQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMonthlyReturn()).compareTo(other.isSetLoanMonthlyReturn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMonthlyReturn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMonthlyReturn, other.loanMonthlyReturn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskOneOpinion()).compareTo(other.isSetRiskOneOpinion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskOneOpinion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskOneOpinion, other.riskOneOpinion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskOverOpinion()).compareTo(other.isSetRiskOverOpinion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskOverOpinion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskOverOpinion, other.riskOverOpinion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmploySituation()).compareTo(other.isSetEmploySituation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmploySituation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employSituation, other.employSituation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusCredentials(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fiveClassify:");
    sb.append(this.fiveClassify);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueNumsThree:");
    sb.append(this.overdueNumsThree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueNumsTwo:");
    sb.append(this.overdueNumsTwo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTotal:");
    sb.append(this.loanTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOverdue:");
    sb.append(this.isOverdue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueMoney:");
    sb.append(this.overdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueTotalMoney:");
    sb.append(this.overdueTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overduePeriods:");
    sb.append(this.overduePeriods);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanApprovalsNums:");
    sb.append(this.loanApprovalsNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanApprovalsNumsTwo:");
    sb.append(this.loanApprovalsNumsTwo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditApprovalsNums:");
    sb.append(this.creditApprovalsNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditApprovalsNumsThree:");
    sb.append(this.creditApprovalsNumsThree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inquiriesNums:");
    sb.append(this.inquiriesNums);
    first = false;
    if (!first) sb.append(", ");
    sb.append("socialSecurity:");
    sb.append(this.socialSecurity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accumulationFund:");
    sb.append(this.accumulationFund);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerNature:");
    if (this.customerNature == null) {
      sb.append("null");
    } else {
      sb.append(this.customerNature);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("landNature:");
    if (this.landNature == null) {
      sb.append("null");
    } else {
      sb.append(this.landNature);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("estateUse:");
    if (this.estateUse == null) {
      sb.append("null");
    } else {
      sb.append(this.estateUse);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCallPerson:");
    if (this.isCallPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.isCallPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCallUnit:");
    sb.append(this.isCallUnit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCallContact:");
    sb.append(this.isCallContact);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthlyIncome:");
    sb.append(this.monthlyIncome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthlyReturn:");
    sb.append(this.monthlyReturn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("debtRadio:");
    sb.append(this.debtRadio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaseTerm:");
    sb.append(this.leaseTerm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trialQuota:");
    sb.append(this.trialQuota);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMonthlyReturn:");
    sb.append(this.loanMonthlyReturn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("riskOneOpinion:");
    if (this.riskOneOpinion == null) {
      sb.append("null");
    } else {
      sb.append(this.riskOneOpinion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("riskOverOpinion:");
    if (this.riskOverOpinion == null) {
      sb.append("null");
    } else {
      sb.append(this.riskOverOpinion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("employSituation:");
    if (this.employSituation == null) {
      sb.append("null");
    } else {
      sb.append(this.employSituation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusCredentialsStandardSchemeFactory implements SchemeFactory {
    public CusCredentialsStandardScheme getScheme() {
      return new CusCredentialsStandardScheme();
    }
  }

  private static class CusCredentialsStandardScheme extends StandardScheme<CusCredentials> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusCredentials struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIVE_CLASSIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fiveClassify = iprot.readI32();
              struct.setFiveClassifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OVERDUE_NUMS_THREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueNumsThree = iprot.readI32();
              struct.setOverdueNumsThreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OVERDUE_NUMS_TWO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueNumsTwo = iprot.readI32();
              struct.setOverdueNumsTwoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAN_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanTotal = iprot.readI32();
              struct.setLoanTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_OVERDUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isOverdue = iprot.readI32();
              struct.setIsOverdueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueMoney = iprot.readDouble();
              struct.setOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OVERDUE_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueTotalMoney = iprot.readDouble();
              struct.setOverdueTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OVERDUE_PERIODS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overduePeriods = iprot.readI32();
              struct.setOverduePeriodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAN_APPROVALS_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanApprovalsNums = iprot.readI32();
              struct.setLoanApprovalsNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOAN_APPROVALS_NUMS_TWO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanApprovalsNumsTwo = iprot.readI32();
              struct.setLoanApprovalsNumsTwoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREDIT_APPROVALS_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditApprovalsNums = iprot.readI32();
              struct.setCreditApprovalsNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREDIT_APPROVALS_NUMS_THREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditApprovalsNumsThree = iprot.readI32();
              struct.setCreditApprovalsNumsThreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INQUIRIES_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inquiriesNums = iprot.readI32();
              struct.setInquiriesNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SOCIAL_SECURITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.socialSecurity = iprot.readI32();
              struct.setSocialSecurityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACCUMULATION_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accumulationFund = iprot.readI32();
              struct.setAccumulationFundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CUSTOMER_NATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerNature = iprot.readString();
              struct.setCustomerNatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LAND_NATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.landNature = iprot.readString();
              struct.setLandNatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ESTATE_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.estateUse = iprot.readString();
              struct.setEstateUseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // IS_CALL_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isCallPerson = iprot.readString();
              struct.setIsCallPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // IS_CALL_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isCallUnit = iprot.readI32();
              struct.setIsCallUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // IS_CALL_CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isCallContact = iprot.readI32();
              struct.setIsCallContactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MONTHLY_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthlyIncome = iprot.readDouble();
              struct.setMonthlyIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MONTHLY_RETURN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthlyReturn = iprot.readDouble();
              struct.setMonthlyReturnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // DEBT_RADIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.debtRadio = iprot.readDouble();
              struct.setDebtRadioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // LEASE_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leaseTerm = iprot.readDouble();
              struct.setLeaseTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // TRIAL_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.trialQuota = iprot.readDouble();
              struct.setTrialQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // LOAN_MONTHLY_RETURN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMonthlyReturn = iprot.readDouble();
              struct.setLoanMonthlyReturnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // RISK_ONE_OPINION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.riskOneOpinion = iprot.readString();
              struct.setRiskOneOpinionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // RISK_OVER_OPINION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.riskOverOpinion = iprot.readString();
              struct.setRiskOverOpinionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // EMPLOY_SITUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.employSituation = iprot.readString();
              struct.setEmploySituationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusCredentials struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIVE_CLASSIFY_FIELD_DESC);
      oprot.writeI32(struct.fiveClassify);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_NUMS_THREE_FIELD_DESC);
      oprot.writeI32(struct.overdueNumsThree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_NUMS_TWO_FIELD_DESC);
      oprot.writeI32(struct.overdueNumsTwo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_TOTAL_FIELD_DESC);
      oprot.writeI32(struct.loanTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_OVERDUE_FIELD_DESC);
      oprot.writeI32(struct.isOverdue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.overdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.overdueTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_PERIODS_FIELD_DESC);
      oprot.writeI32(struct.overduePeriods);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_APPROVALS_NUMS_FIELD_DESC);
      oprot.writeI32(struct.loanApprovalsNums);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_APPROVALS_NUMS_TWO_FIELD_DESC);
      oprot.writeI32(struct.loanApprovalsNumsTwo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_APPROVALS_NUMS_FIELD_DESC);
      oprot.writeI32(struct.creditApprovalsNums);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_APPROVALS_NUMS_THREE_FIELD_DESC);
      oprot.writeI32(struct.creditApprovalsNumsThree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INQUIRIES_NUMS_FIELD_DESC);
      oprot.writeI32(struct.inquiriesNums);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOCIAL_SECURITY_FIELD_DESC);
      oprot.writeI32(struct.socialSecurity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCUMULATION_FUND_FIELD_DESC);
      oprot.writeI32(struct.accumulationFund);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.customerNature != null) {
        oprot.writeFieldBegin(CUSTOMER_NATURE_FIELD_DESC);
        oprot.writeString(struct.customerNature);
        oprot.writeFieldEnd();
      }
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.landNature != null) {
        oprot.writeFieldBegin(LAND_NATURE_FIELD_DESC);
        oprot.writeString(struct.landNature);
        oprot.writeFieldEnd();
      }
      if (struct.estateUse != null) {
        oprot.writeFieldBegin(ESTATE_USE_FIELD_DESC);
        oprot.writeString(struct.estateUse);
        oprot.writeFieldEnd();
      }
      if (struct.isCallPerson != null) {
        oprot.writeFieldBegin(IS_CALL_PERSON_FIELD_DESC);
        oprot.writeString(struct.isCallPerson);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CALL_UNIT_FIELD_DESC);
      oprot.writeI32(struct.isCallUnit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CALL_CONTACT_FIELD_DESC);
      oprot.writeI32(struct.isCallContact);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTHLY_INCOME_FIELD_DESC);
      oprot.writeDouble(struct.monthlyIncome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTHLY_RETURN_FIELD_DESC);
      oprot.writeDouble(struct.monthlyReturn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEBT_RADIO_FIELD_DESC);
      oprot.writeDouble(struct.debtRadio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEASE_TERM_FIELD_DESC);
      oprot.writeDouble(struct.leaseTerm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIAL_QUOTA_FIELD_DESC);
      oprot.writeDouble(struct.trialQuota);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONTHLY_RETURN_FIELD_DESC);
      oprot.writeDouble(struct.loanMonthlyReturn);
      oprot.writeFieldEnd();
      if (struct.riskOneOpinion != null) {
        oprot.writeFieldBegin(RISK_ONE_OPINION_FIELD_DESC);
        oprot.writeString(struct.riskOneOpinion);
        oprot.writeFieldEnd();
      }
      if (struct.riskOverOpinion != null) {
        oprot.writeFieldBegin(RISK_OVER_OPINION_FIELD_DESC);
        oprot.writeString(struct.riskOverOpinion);
        oprot.writeFieldEnd();
      }
      if (struct.employSituation != null) {
        oprot.writeFieldBegin(EMPLOY_SITUATION_FIELD_DESC);
        oprot.writeString(struct.employSituation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusCredentialsTupleSchemeFactory implements SchemeFactory {
    public CusCredentialsTupleScheme getScheme() {
      return new CusCredentialsTupleScheme();
    }
  }

  private static class CusCredentialsTupleScheme extends TupleScheme<CusCredentials> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusCredentials struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAcctId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetFiveClassify()) {
        optionals.set(3);
      }
      if (struct.isSetOverdueNumsThree()) {
        optionals.set(4);
      }
      if (struct.isSetOverdueNumsTwo()) {
        optionals.set(5);
      }
      if (struct.isSetLoanTotal()) {
        optionals.set(6);
      }
      if (struct.isSetIsOverdue()) {
        optionals.set(7);
      }
      if (struct.isSetOverdueMoney()) {
        optionals.set(8);
      }
      if (struct.isSetOverdueTotalMoney()) {
        optionals.set(9);
      }
      if (struct.isSetOverduePeriods()) {
        optionals.set(10);
      }
      if (struct.isSetLoanApprovalsNums()) {
        optionals.set(11);
      }
      if (struct.isSetLoanApprovalsNumsTwo()) {
        optionals.set(12);
      }
      if (struct.isSetCreditApprovalsNums()) {
        optionals.set(13);
      }
      if (struct.isSetCreditApprovalsNumsThree()) {
        optionals.set(14);
      }
      if (struct.isSetInquiriesNums()) {
        optionals.set(15);
      }
      if (struct.isSetSocialSecurity()) {
        optionals.set(16);
      }
      if (struct.isSetAccumulationFund()) {
        optionals.set(17);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(18);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(19);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(20);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(21);
      }
      if (struct.isSetCustomerNature()) {
        optionals.set(22);
      }
      if (struct.isSetHouseName()) {
        optionals.set(23);
      }
      if (struct.isSetLandNature()) {
        optionals.set(24);
      }
      if (struct.isSetEstateUse()) {
        optionals.set(25);
      }
      if (struct.isSetIsCallPerson()) {
        optionals.set(26);
      }
      if (struct.isSetIsCallUnit()) {
        optionals.set(27);
      }
      if (struct.isSetIsCallContact()) {
        optionals.set(28);
      }
      if (struct.isSetMonthlyIncome()) {
        optionals.set(29);
      }
      if (struct.isSetMonthlyReturn()) {
        optionals.set(30);
      }
      if (struct.isSetDebtRadio()) {
        optionals.set(31);
      }
      if (struct.isSetLeaseTerm()) {
        optionals.set(32);
      }
      if (struct.isSetTrialQuota()) {
        optionals.set(33);
      }
      if (struct.isSetLoanMonthlyReturn()) {
        optionals.set(34);
      }
      if (struct.isSetRiskOneOpinion()) {
        optionals.set(35);
      }
      if (struct.isSetRiskOverOpinion()) {
        optionals.set(36);
      }
      if (struct.isSetEmploySituation()) {
        optionals.set(37);
      }
      oprot.writeBitSet(optionals, 38);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetFiveClassify()) {
        oprot.writeI32(struct.fiveClassify);
      }
      if (struct.isSetOverdueNumsThree()) {
        oprot.writeI32(struct.overdueNumsThree);
      }
      if (struct.isSetOverdueNumsTwo()) {
        oprot.writeI32(struct.overdueNumsTwo);
      }
      if (struct.isSetLoanTotal()) {
        oprot.writeI32(struct.loanTotal);
      }
      if (struct.isSetIsOverdue()) {
        oprot.writeI32(struct.isOverdue);
      }
      if (struct.isSetOverdueMoney()) {
        oprot.writeDouble(struct.overdueMoney);
      }
      if (struct.isSetOverdueTotalMoney()) {
        oprot.writeDouble(struct.overdueTotalMoney);
      }
      if (struct.isSetOverduePeriods()) {
        oprot.writeI32(struct.overduePeriods);
      }
      if (struct.isSetLoanApprovalsNums()) {
        oprot.writeI32(struct.loanApprovalsNums);
      }
      if (struct.isSetLoanApprovalsNumsTwo()) {
        oprot.writeI32(struct.loanApprovalsNumsTwo);
      }
      if (struct.isSetCreditApprovalsNums()) {
        oprot.writeI32(struct.creditApprovalsNums);
      }
      if (struct.isSetCreditApprovalsNumsThree()) {
        oprot.writeI32(struct.creditApprovalsNumsThree);
      }
      if (struct.isSetInquiriesNums()) {
        oprot.writeI32(struct.inquiriesNums);
      }
      if (struct.isSetSocialSecurity()) {
        oprot.writeI32(struct.socialSecurity);
      }
      if (struct.isSetAccumulationFund()) {
        oprot.writeI32(struct.accumulationFund);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetCustomerNature()) {
        oprot.writeString(struct.customerNature);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetLandNature()) {
        oprot.writeString(struct.landNature);
      }
      if (struct.isSetEstateUse()) {
        oprot.writeString(struct.estateUse);
      }
      if (struct.isSetIsCallPerson()) {
        oprot.writeString(struct.isCallPerson);
      }
      if (struct.isSetIsCallUnit()) {
        oprot.writeI32(struct.isCallUnit);
      }
      if (struct.isSetIsCallContact()) {
        oprot.writeI32(struct.isCallContact);
      }
      if (struct.isSetMonthlyIncome()) {
        oprot.writeDouble(struct.monthlyIncome);
      }
      if (struct.isSetMonthlyReturn()) {
        oprot.writeDouble(struct.monthlyReturn);
      }
      if (struct.isSetDebtRadio()) {
        oprot.writeDouble(struct.debtRadio);
      }
      if (struct.isSetLeaseTerm()) {
        oprot.writeDouble(struct.leaseTerm);
      }
      if (struct.isSetTrialQuota()) {
        oprot.writeDouble(struct.trialQuota);
      }
      if (struct.isSetLoanMonthlyReturn()) {
        oprot.writeDouble(struct.loanMonthlyReturn);
      }
      if (struct.isSetRiskOneOpinion()) {
        oprot.writeString(struct.riskOneOpinion);
      }
      if (struct.isSetRiskOverOpinion()) {
        oprot.writeString(struct.riskOverOpinion);
      }
      if (struct.isSetEmploySituation()) {
        oprot.writeString(struct.employSituation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusCredentials struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(38);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fiveClassify = iprot.readI32();
        struct.setFiveClassifyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.overdueNumsThree = iprot.readI32();
        struct.setOverdueNumsThreeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.overdueNumsTwo = iprot.readI32();
        struct.setOverdueNumsTwoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanTotal = iprot.readI32();
        struct.setLoanTotalIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isOverdue = iprot.readI32();
        struct.setIsOverdueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.overdueMoney = iprot.readDouble();
        struct.setOverdueMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.overdueTotalMoney = iprot.readDouble();
        struct.setOverdueTotalMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.overduePeriods = iprot.readI32();
        struct.setOverduePeriodsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loanApprovalsNums = iprot.readI32();
        struct.setLoanApprovalsNumsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.loanApprovalsNumsTwo = iprot.readI32();
        struct.setLoanApprovalsNumsTwoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.creditApprovalsNums = iprot.readI32();
        struct.setCreditApprovalsNumsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.creditApprovalsNumsThree = iprot.readI32();
        struct.setCreditApprovalsNumsThreeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.inquiriesNums = iprot.readI32();
        struct.setInquiriesNumsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.socialSecurity = iprot.readI32();
        struct.setSocialSecurityIsSet(true);
      }
      if (incoming.get(17)) {
        struct.accumulationFund = iprot.readI32();
        struct.setAccumulationFundIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.customerNature = iprot.readString();
        struct.setCustomerNatureIsSet(true);
      }
      if (incoming.get(23)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.landNature = iprot.readString();
        struct.setLandNatureIsSet(true);
      }
      if (incoming.get(25)) {
        struct.estateUse = iprot.readString();
        struct.setEstateUseIsSet(true);
      }
      if (incoming.get(26)) {
        struct.isCallPerson = iprot.readString();
        struct.setIsCallPersonIsSet(true);
      }
      if (incoming.get(27)) {
        struct.isCallUnit = iprot.readI32();
        struct.setIsCallUnitIsSet(true);
      }
      if (incoming.get(28)) {
        struct.isCallContact = iprot.readI32();
        struct.setIsCallContactIsSet(true);
      }
      if (incoming.get(29)) {
        struct.monthlyIncome = iprot.readDouble();
        struct.setMonthlyIncomeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.monthlyReturn = iprot.readDouble();
        struct.setMonthlyReturnIsSet(true);
      }
      if (incoming.get(31)) {
        struct.debtRadio = iprot.readDouble();
        struct.setDebtRadioIsSet(true);
      }
      if (incoming.get(32)) {
        struct.leaseTerm = iprot.readDouble();
        struct.setLeaseTermIsSet(true);
      }
      if (incoming.get(33)) {
        struct.trialQuota = iprot.readDouble();
        struct.setTrialQuotaIsSet(true);
      }
      if (incoming.get(34)) {
        struct.loanMonthlyReturn = iprot.readDouble();
        struct.setLoanMonthlyReturnIsSet(true);
      }
      if (incoming.get(35)) {
        struct.riskOneOpinion = iprot.readString();
        struct.setRiskOneOpinionIsSet(true);
      }
      if (incoming.get(36)) {
        struct.riskOverOpinion = iprot.readString();
        struct.setRiskOverOpinionIsSet(true);
      }
      if (incoming.get(37)) {
        struct.employSituation = iprot.readString();
        struct.setEmploySituationIsSet(true);
      }
    }
  }

}


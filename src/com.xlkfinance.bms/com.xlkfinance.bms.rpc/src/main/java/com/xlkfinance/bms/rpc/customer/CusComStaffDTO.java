/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComStaffDTO implements org.apache.thrift.TBase<CusComStaffDTO, CusComStaffDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CusComStaffDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComStaffDTO");

  private static final org.apache.thrift.protocol.TField STAFFS_FIELD_DESC = new org.apache.thrift.protocol.TField("staffs", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComStaffDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComStaffDTOTupleSchemeFactory());
  }

  public List<CusComStaff> staffs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STAFFS((short)1, "staffs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAFFS
          return STAFFS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAFFS, new org.apache.thrift.meta_data.FieldMetaData("staffs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComStaff.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComStaffDTO.class, metaDataMap);
  }

  public CusComStaffDTO() {
  }

  public CusComStaffDTO(
    List<CusComStaff> staffs)
  {
    this();
    this.staffs = staffs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComStaffDTO(CusComStaffDTO other) {
    if (other.isSetStaffs()) {
      List<CusComStaff> __this__staffs = new ArrayList<CusComStaff>(other.staffs.size());
      for (CusComStaff other_element : other.staffs) {
        __this__staffs.add(new CusComStaff(other_element));
      }
      this.staffs = __this__staffs;
    }
  }

  public CusComStaffDTO deepCopy() {
    return new CusComStaffDTO(this);
  }

  @Override
  public void clear() {
    this.staffs = null;
  }

  public int getStaffsSize() {
    return (this.staffs == null) ? 0 : this.staffs.size();
  }

  public java.util.Iterator<CusComStaff> getStaffsIterator() {
    return (this.staffs == null) ? null : this.staffs.iterator();
  }

  public void addToStaffs(CusComStaff elem) {
    if (this.staffs == null) {
      this.staffs = new ArrayList<CusComStaff>();
    }
    this.staffs.add(elem);
  }

  public List<CusComStaff> getStaffs() {
    return this.staffs;
  }

  public CusComStaffDTO setStaffs(List<CusComStaff> staffs) {
    this.staffs = staffs;
    return this;
  }

  public void unsetStaffs() {
    this.staffs = null;
  }

  /** Returns true if field staffs is set (has been assigned a value) and false otherwise */
  public boolean isSetStaffs() {
    return this.staffs != null;
  }

  public void setStaffsIsSet(boolean value) {
    if (!value) {
      this.staffs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STAFFS:
      if (value == null) {
        unsetStaffs();
      } else {
        setStaffs((List<CusComStaff>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STAFFS:
      return getStaffs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STAFFS:
      return isSetStaffs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComStaffDTO)
      return this.equals((CusComStaffDTO)that);
    return false;
  }

  public boolean equals(CusComStaffDTO that) {
    if (that == null)
      return false;

    boolean this_present_staffs = true && this.isSetStaffs();
    boolean that_present_staffs = true && that.isSetStaffs();
    if (this_present_staffs || that_present_staffs) {
      if (!(this_present_staffs && that_present_staffs))
        return false;
      if (!this.staffs.equals(that.staffs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_staffs = true && (isSetStaffs());
    list.add(present_staffs);
    if (present_staffs)
      list.add(staffs);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComStaffDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStaffs()).compareTo(other.isSetStaffs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaffs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staffs, other.staffs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComStaffDTO(");
    boolean first = true;

    sb.append("staffs:");
    if (this.staffs == null) {
      sb.append("null");
    } else {
      sb.append(this.staffs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComStaffDTOStandardSchemeFactory implements SchemeFactory {
    public CusComStaffDTOStandardScheme getScheme() {
      return new CusComStaffDTOStandardScheme();
    }
  }

  private static class CusComStaffDTOStandardScheme extends StandardScheme<CusComStaffDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComStaffDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STAFFS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.staffs = new ArrayList<CusComStaff>(_list80.size);
                CusComStaff _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new CusComStaff();
                  _elem81.read(iprot);
                  struct.staffs.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setStaffsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComStaffDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.staffs != null) {
        oprot.writeFieldBegin(STAFFS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.staffs.size()));
          for (CusComStaff _iter83 : struct.staffs)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComStaffDTOTupleSchemeFactory implements SchemeFactory {
    public CusComStaffDTOTupleScheme getScheme() {
      return new CusComStaffDTOTupleScheme();
    }
  }

  private static class CusComStaffDTOTupleScheme extends TupleScheme<CusComStaffDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComStaffDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStaffs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetStaffs()) {
        {
          oprot.writeI32(struct.staffs.size());
          for (CusComStaff _iter84 : struct.staffs)
          {
            _iter84.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComStaffDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.staffs = new ArrayList<CusComStaff>(_list85.size);
          CusComStaff _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new CusComStaff();
            _elem86.read(iprot);
            struct.staffs.add(_elem86);
          }
        }
        struct.setStaffsIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class IntermediateTransferService {

  public interface Iface {

    public List<IntermediateTransferIndexDTO> queryIntermediateTransferIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException;

    public int getIntermediateTransferIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException;

    public List<IntermediateTransferIndexDTO> queryIntermediateTransferRequestIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException;

    public int getIntermediateTransferRequestIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException;

    public List<IntermediateTransferDTO> queryIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException;

    public int getIntermediateTransferTotal(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException;

    public IntermediateTransferDTO getIntermediateTransferById(int pid) throws org.apache.thrift.TException;

    public int addIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException;

    public boolean updateIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException;

    public int checkWorkFlowExist(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryIntermediateTransferIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIntermediateTransferIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryIntermediateTransferRequestIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIntermediateTransferRequestIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIntermediateTransferTotal(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIntermediateTransferById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkWorkFlowExist(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<IntermediateTransferIndexDTO> queryIntermediateTransferIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException
    {
      send_queryIntermediateTransferIndex(intermediateTransferIndexDTO);
      return recv_queryIntermediateTransferIndex();
    }

    public void send_queryIntermediateTransferIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException
    {
      queryIntermediateTransferIndex_args args = new queryIntermediateTransferIndex_args();
      args.setIntermediateTransferIndexDTO(intermediateTransferIndexDTO);
      sendBase("queryIntermediateTransferIndex", args);
    }

    public List<IntermediateTransferIndexDTO> recv_queryIntermediateTransferIndex() throws org.apache.thrift.TException
    {
      queryIntermediateTransferIndex_result result = new queryIntermediateTransferIndex_result();
      receiveBase(result, "queryIntermediateTransferIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryIntermediateTransferIndex failed: unknown result");
    }

    public int getIntermediateTransferIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException
    {
      send_getIntermediateTransferIndexTotal(intermediateTransferIndexDTO);
      return recv_getIntermediateTransferIndexTotal();
    }

    public void send_getIntermediateTransferIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException
    {
      getIntermediateTransferIndexTotal_args args = new getIntermediateTransferIndexTotal_args();
      args.setIntermediateTransferIndexDTO(intermediateTransferIndexDTO);
      sendBase("getIntermediateTransferIndexTotal", args);
    }

    public int recv_getIntermediateTransferIndexTotal() throws org.apache.thrift.TException
    {
      getIntermediateTransferIndexTotal_result result = new getIntermediateTransferIndexTotal_result();
      receiveBase(result, "getIntermediateTransferIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIntermediateTransferIndexTotal failed: unknown result");
    }

    public List<IntermediateTransferIndexDTO> queryIntermediateTransferRequestIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException
    {
      send_queryIntermediateTransferRequestIndex(intermediateTransferIndexDTO);
      return recv_queryIntermediateTransferRequestIndex();
    }

    public void send_queryIntermediateTransferRequestIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException
    {
      queryIntermediateTransferRequestIndex_args args = new queryIntermediateTransferRequestIndex_args();
      args.setIntermediateTransferIndexDTO(intermediateTransferIndexDTO);
      sendBase("queryIntermediateTransferRequestIndex", args);
    }

    public List<IntermediateTransferIndexDTO> recv_queryIntermediateTransferRequestIndex() throws org.apache.thrift.TException
    {
      queryIntermediateTransferRequestIndex_result result = new queryIntermediateTransferRequestIndex_result();
      receiveBase(result, "queryIntermediateTransferRequestIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryIntermediateTransferRequestIndex failed: unknown result");
    }

    public int getIntermediateTransferRequestIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException
    {
      send_getIntermediateTransferRequestIndexTotal(intermediateTransferIndexDTO);
      return recv_getIntermediateTransferRequestIndexTotal();
    }

    public void send_getIntermediateTransferRequestIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO) throws org.apache.thrift.TException
    {
      getIntermediateTransferRequestIndexTotal_args args = new getIntermediateTransferRequestIndexTotal_args();
      args.setIntermediateTransferIndexDTO(intermediateTransferIndexDTO);
      sendBase("getIntermediateTransferRequestIndexTotal", args);
    }

    public int recv_getIntermediateTransferRequestIndexTotal() throws org.apache.thrift.TException
    {
      getIntermediateTransferRequestIndexTotal_result result = new getIntermediateTransferRequestIndexTotal_result();
      receiveBase(result, "getIntermediateTransferRequestIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIntermediateTransferRequestIndexTotal failed: unknown result");
    }

    public List<IntermediateTransferDTO> queryIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      send_queryIntermediateTransfer(intermediateTransferDTO);
      return recv_queryIntermediateTransfer();
    }

    public void send_queryIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      queryIntermediateTransfer_args args = new queryIntermediateTransfer_args();
      args.setIntermediateTransferDTO(intermediateTransferDTO);
      sendBase("queryIntermediateTransfer", args);
    }

    public List<IntermediateTransferDTO> recv_queryIntermediateTransfer() throws org.apache.thrift.TException
    {
      queryIntermediateTransfer_result result = new queryIntermediateTransfer_result();
      receiveBase(result, "queryIntermediateTransfer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryIntermediateTransfer failed: unknown result");
    }

    public int getIntermediateTransferTotal(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      send_getIntermediateTransferTotal(intermediateTransferDTO);
      return recv_getIntermediateTransferTotal();
    }

    public void send_getIntermediateTransferTotal(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      getIntermediateTransferTotal_args args = new getIntermediateTransferTotal_args();
      args.setIntermediateTransferDTO(intermediateTransferDTO);
      sendBase("getIntermediateTransferTotal", args);
    }

    public int recv_getIntermediateTransferTotal() throws org.apache.thrift.TException
    {
      getIntermediateTransferTotal_result result = new getIntermediateTransferTotal_result();
      receiveBase(result, "getIntermediateTransferTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIntermediateTransferTotal failed: unknown result");
    }

    public IntermediateTransferDTO getIntermediateTransferById(int pid) throws org.apache.thrift.TException
    {
      send_getIntermediateTransferById(pid);
      return recv_getIntermediateTransferById();
    }

    public void send_getIntermediateTransferById(int pid) throws org.apache.thrift.TException
    {
      getIntermediateTransferById_args args = new getIntermediateTransferById_args();
      args.setPid(pid);
      sendBase("getIntermediateTransferById", args);
    }

    public IntermediateTransferDTO recv_getIntermediateTransferById() throws org.apache.thrift.TException
    {
      getIntermediateTransferById_result result = new getIntermediateTransferById_result();
      receiveBase(result, "getIntermediateTransferById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIntermediateTransferById failed: unknown result");
    }

    public int addIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      send_addIntermediateTransfer(intermediateTransferDTO);
      return recv_addIntermediateTransfer();
    }

    public void send_addIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      addIntermediateTransfer_args args = new addIntermediateTransfer_args();
      args.setIntermediateTransferDTO(intermediateTransferDTO);
      sendBase("addIntermediateTransfer", args);
    }

    public int recv_addIntermediateTransfer() throws org.apache.thrift.TException
    {
      addIntermediateTransfer_result result = new addIntermediateTransfer_result();
      receiveBase(result, "addIntermediateTransfer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addIntermediateTransfer failed: unknown result");
    }

    public boolean updateIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      send_updateIntermediateTransfer(intermediateTransferDTO);
      return recv_updateIntermediateTransfer();
    }

    public void send_updateIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      updateIntermediateTransfer_args args = new updateIntermediateTransfer_args();
      args.setIntermediateTransferDTO(intermediateTransferDTO);
      sendBase("updateIntermediateTransfer", args);
    }

    public boolean recv_updateIntermediateTransfer() throws org.apache.thrift.TException
    {
      updateIntermediateTransfer_result result = new updateIntermediateTransfer_result();
      receiveBase(result, "updateIntermediateTransfer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateIntermediateTransfer failed: unknown result");
    }

    public int checkWorkFlowExist(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      send_checkWorkFlowExist(intermediateTransferDTO);
      return recv_checkWorkFlowExist();
    }

    public void send_checkWorkFlowExist(IntermediateTransferDTO intermediateTransferDTO) throws org.apache.thrift.TException
    {
      checkWorkFlowExist_args args = new checkWorkFlowExist_args();
      args.setIntermediateTransferDTO(intermediateTransferDTO);
      sendBase("checkWorkFlowExist", args);
    }

    public int recv_checkWorkFlowExist() throws org.apache.thrift.TException
    {
      checkWorkFlowExist_result result = new checkWorkFlowExist_result();
      receiveBase(result, "checkWorkFlowExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkWorkFlowExist failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryIntermediateTransferIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryIntermediateTransferIndex_call method_call = new queryIntermediateTransferIndex_call(intermediateTransferIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryIntermediateTransferIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferIndexDTO intermediateTransferIndexDTO;
      public queryIntermediateTransferIndex_call(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryIntermediateTransferIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryIntermediateTransferIndex_args args = new queryIntermediateTransferIndex_args();
        args.setIntermediateTransferIndexDTO(intermediateTransferIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<IntermediateTransferIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryIntermediateTransferIndex();
      }
    }

    public void getIntermediateTransferIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIntermediateTransferIndexTotal_call method_call = new getIntermediateTransferIndexTotal_call(intermediateTransferIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIntermediateTransferIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferIndexDTO intermediateTransferIndexDTO;
      public getIntermediateTransferIndexTotal_call(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIntermediateTransferIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIntermediateTransferIndexTotal_args args = new getIntermediateTransferIndexTotal_args();
        args.setIntermediateTransferIndexDTO(intermediateTransferIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIntermediateTransferIndexTotal();
      }
    }

    public void queryIntermediateTransferRequestIndex(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryIntermediateTransferRequestIndex_call method_call = new queryIntermediateTransferRequestIndex_call(intermediateTransferIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryIntermediateTransferRequestIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferIndexDTO intermediateTransferIndexDTO;
      public queryIntermediateTransferRequestIndex_call(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryIntermediateTransferRequestIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryIntermediateTransferRequestIndex_args args = new queryIntermediateTransferRequestIndex_args();
        args.setIntermediateTransferIndexDTO(intermediateTransferIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<IntermediateTransferIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryIntermediateTransferRequestIndex();
      }
    }

    public void getIntermediateTransferRequestIndexTotal(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIntermediateTransferRequestIndexTotal_call method_call = new getIntermediateTransferRequestIndexTotal_call(intermediateTransferIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIntermediateTransferRequestIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferIndexDTO intermediateTransferIndexDTO;
      public getIntermediateTransferRequestIndexTotal_call(IntermediateTransferIndexDTO intermediateTransferIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIntermediateTransferRequestIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIntermediateTransferRequestIndexTotal_args args = new getIntermediateTransferRequestIndexTotal_args();
        args.setIntermediateTransferIndexDTO(intermediateTransferIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIntermediateTransferRequestIndexTotal();
      }
    }

    public void queryIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryIntermediateTransfer_call method_call = new queryIntermediateTransfer_call(intermediateTransferDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryIntermediateTransfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferDTO intermediateTransferDTO;
      public queryIntermediateTransfer_call(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferDTO = intermediateTransferDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryIntermediateTransfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryIntermediateTransfer_args args = new queryIntermediateTransfer_args();
        args.setIntermediateTransferDTO(intermediateTransferDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<IntermediateTransferDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryIntermediateTransfer();
      }
    }

    public void getIntermediateTransferTotal(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIntermediateTransferTotal_call method_call = new getIntermediateTransferTotal_call(intermediateTransferDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIntermediateTransferTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferDTO intermediateTransferDTO;
      public getIntermediateTransferTotal_call(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferDTO = intermediateTransferDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIntermediateTransferTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIntermediateTransferTotal_args args = new getIntermediateTransferTotal_args();
        args.setIntermediateTransferDTO(intermediateTransferDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIntermediateTransferTotal();
      }
    }

    public void getIntermediateTransferById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIntermediateTransferById_call method_call = new getIntermediateTransferById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIntermediateTransferById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getIntermediateTransferById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIntermediateTransferById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIntermediateTransferById_args args = new getIntermediateTransferById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IntermediateTransferDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIntermediateTransferById();
      }
    }

    public void addIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addIntermediateTransfer_call method_call = new addIntermediateTransfer_call(intermediateTransferDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addIntermediateTransfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferDTO intermediateTransferDTO;
      public addIntermediateTransfer_call(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferDTO = intermediateTransferDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addIntermediateTransfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addIntermediateTransfer_args args = new addIntermediateTransfer_args();
        args.setIntermediateTransferDTO(intermediateTransferDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addIntermediateTransfer();
      }
    }

    public void updateIntermediateTransfer(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateIntermediateTransfer_call method_call = new updateIntermediateTransfer_call(intermediateTransferDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateIntermediateTransfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferDTO intermediateTransferDTO;
      public updateIntermediateTransfer_call(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferDTO = intermediateTransferDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateIntermediateTransfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateIntermediateTransfer_args args = new updateIntermediateTransfer_args();
        args.setIntermediateTransferDTO(intermediateTransferDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateIntermediateTransfer();
      }
    }

    public void checkWorkFlowExist(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkWorkFlowExist_call method_call = new checkWorkFlowExist_call(intermediateTransferDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkWorkFlowExist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private IntermediateTransferDTO intermediateTransferDTO;
      public checkWorkFlowExist_call(IntermediateTransferDTO intermediateTransferDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intermediateTransferDTO = intermediateTransferDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkWorkFlowExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkWorkFlowExist_args args = new checkWorkFlowExist_args();
        args.setIntermediateTransferDTO(intermediateTransferDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkWorkFlowExist();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryIntermediateTransferIndex", new queryIntermediateTransferIndex());
      processMap.put("getIntermediateTransferIndexTotal", new getIntermediateTransferIndexTotal());
      processMap.put("queryIntermediateTransferRequestIndex", new queryIntermediateTransferRequestIndex());
      processMap.put("getIntermediateTransferRequestIndexTotal", new getIntermediateTransferRequestIndexTotal());
      processMap.put("queryIntermediateTransfer", new queryIntermediateTransfer());
      processMap.put("getIntermediateTransferTotal", new getIntermediateTransferTotal());
      processMap.put("getIntermediateTransferById", new getIntermediateTransferById());
      processMap.put("addIntermediateTransfer", new addIntermediateTransfer());
      processMap.put("updateIntermediateTransfer", new updateIntermediateTransfer());
      processMap.put("checkWorkFlowExist", new checkWorkFlowExist());
      return processMap;
    }

    public static class queryIntermediateTransferIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryIntermediateTransferIndex_args> {
      public queryIntermediateTransferIndex() {
        super("queryIntermediateTransferIndex");
      }

      public queryIntermediateTransferIndex_args getEmptyArgsInstance() {
        return new queryIntermediateTransferIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryIntermediateTransferIndex_result getResult(I iface, queryIntermediateTransferIndex_args args) throws org.apache.thrift.TException {
        queryIntermediateTransferIndex_result result = new queryIntermediateTransferIndex_result();
        result.success = iface.queryIntermediateTransferIndex(args.intermediateTransferIndexDTO);
        return result;
      }
    }

    public static class getIntermediateTransferIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIntermediateTransferIndexTotal_args> {
      public getIntermediateTransferIndexTotal() {
        super("getIntermediateTransferIndexTotal");
      }

      public getIntermediateTransferIndexTotal_args getEmptyArgsInstance() {
        return new getIntermediateTransferIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIntermediateTransferIndexTotal_result getResult(I iface, getIntermediateTransferIndexTotal_args args) throws org.apache.thrift.TException {
        getIntermediateTransferIndexTotal_result result = new getIntermediateTransferIndexTotal_result();
        result.success = iface.getIntermediateTransferIndexTotal(args.intermediateTransferIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryIntermediateTransferRequestIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryIntermediateTransferRequestIndex_args> {
      public queryIntermediateTransferRequestIndex() {
        super("queryIntermediateTransferRequestIndex");
      }

      public queryIntermediateTransferRequestIndex_args getEmptyArgsInstance() {
        return new queryIntermediateTransferRequestIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryIntermediateTransferRequestIndex_result getResult(I iface, queryIntermediateTransferRequestIndex_args args) throws org.apache.thrift.TException {
        queryIntermediateTransferRequestIndex_result result = new queryIntermediateTransferRequestIndex_result();
        result.success = iface.queryIntermediateTransferRequestIndex(args.intermediateTransferIndexDTO);
        return result;
      }
    }

    public static class getIntermediateTransferRequestIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIntermediateTransferRequestIndexTotal_args> {
      public getIntermediateTransferRequestIndexTotal() {
        super("getIntermediateTransferRequestIndexTotal");
      }

      public getIntermediateTransferRequestIndexTotal_args getEmptyArgsInstance() {
        return new getIntermediateTransferRequestIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIntermediateTransferRequestIndexTotal_result getResult(I iface, getIntermediateTransferRequestIndexTotal_args args) throws org.apache.thrift.TException {
        getIntermediateTransferRequestIndexTotal_result result = new getIntermediateTransferRequestIndexTotal_result();
        result.success = iface.getIntermediateTransferRequestIndexTotal(args.intermediateTransferIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryIntermediateTransfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryIntermediateTransfer_args> {
      public queryIntermediateTransfer() {
        super("queryIntermediateTransfer");
      }

      public queryIntermediateTransfer_args getEmptyArgsInstance() {
        return new queryIntermediateTransfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryIntermediateTransfer_result getResult(I iface, queryIntermediateTransfer_args args) throws org.apache.thrift.TException {
        queryIntermediateTransfer_result result = new queryIntermediateTransfer_result();
        result.success = iface.queryIntermediateTransfer(args.intermediateTransferDTO);
        return result;
      }
    }

    public static class getIntermediateTransferTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIntermediateTransferTotal_args> {
      public getIntermediateTransferTotal() {
        super("getIntermediateTransferTotal");
      }

      public getIntermediateTransferTotal_args getEmptyArgsInstance() {
        return new getIntermediateTransferTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIntermediateTransferTotal_result getResult(I iface, getIntermediateTransferTotal_args args) throws org.apache.thrift.TException {
        getIntermediateTransferTotal_result result = new getIntermediateTransferTotal_result();
        result.success = iface.getIntermediateTransferTotal(args.intermediateTransferDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getIntermediateTransferById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIntermediateTransferById_args> {
      public getIntermediateTransferById() {
        super("getIntermediateTransferById");
      }

      public getIntermediateTransferById_args getEmptyArgsInstance() {
        return new getIntermediateTransferById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIntermediateTransferById_result getResult(I iface, getIntermediateTransferById_args args) throws org.apache.thrift.TException {
        getIntermediateTransferById_result result = new getIntermediateTransferById_result();
        result.success = iface.getIntermediateTransferById(args.pid);
        return result;
      }
    }

    public static class addIntermediateTransfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addIntermediateTransfer_args> {
      public addIntermediateTransfer() {
        super("addIntermediateTransfer");
      }

      public addIntermediateTransfer_args getEmptyArgsInstance() {
        return new addIntermediateTransfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addIntermediateTransfer_result getResult(I iface, addIntermediateTransfer_args args) throws org.apache.thrift.TException {
        addIntermediateTransfer_result result = new addIntermediateTransfer_result();
        result.success = iface.addIntermediateTransfer(args.intermediateTransferDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateIntermediateTransfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateIntermediateTransfer_args> {
      public updateIntermediateTransfer() {
        super("updateIntermediateTransfer");
      }

      public updateIntermediateTransfer_args getEmptyArgsInstance() {
        return new updateIntermediateTransfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateIntermediateTransfer_result getResult(I iface, updateIntermediateTransfer_args args) throws org.apache.thrift.TException {
        updateIntermediateTransfer_result result = new updateIntermediateTransfer_result();
        result.success = iface.updateIntermediateTransfer(args.intermediateTransferDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkWorkFlowExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkWorkFlowExist_args> {
      public checkWorkFlowExist() {
        super("checkWorkFlowExist");
      }

      public checkWorkFlowExist_args getEmptyArgsInstance() {
        return new checkWorkFlowExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkWorkFlowExist_result getResult(I iface, checkWorkFlowExist_args args) throws org.apache.thrift.TException {
        checkWorkFlowExist_result result = new checkWorkFlowExist_result();
        result.success = iface.checkWorkFlowExist(args.intermediateTransferDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryIntermediateTransferIndex", new queryIntermediateTransferIndex());
      processMap.put("getIntermediateTransferIndexTotal", new getIntermediateTransferIndexTotal());
      processMap.put("queryIntermediateTransferRequestIndex", new queryIntermediateTransferRequestIndex());
      processMap.put("getIntermediateTransferRequestIndexTotal", new getIntermediateTransferRequestIndexTotal());
      processMap.put("queryIntermediateTransfer", new queryIntermediateTransfer());
      processMap.put("getIntermediateTransferTotal", new getIntermediateTransferTotal());
      processMap.put("getIntermediateTransferById", new getIntermediateTransferById());
      processMap.put("addIntermediateTransfer", new addIntermediateTransfer());
      processMap.put("updateIntermediateTransfer", new updateIntermediateTransfer());
      processMap.put("checkWorkFlowExist", new checkWorkFlowExist());
      return processMap;
    }

    public static class queryIntermediateTransferIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryIntermediateTransferIndex_args, List<IntermediateTransferIndexDTO>> {
      public queryIntermediateTransferIndex() {
        super("queryIntermediateTransferIndex");
      }

      public queryIntermediateTransferIndex_args getEmptyArgsInstance() {
        return new queryIntermediateTransferIndex_args();
      }

      public AsyncMethodCallback<List<IntermediateTransferIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<IntermediateTransferIndexDTO>>() { 
          public void onComplete(List<IntermediateTransferIndexDTO> o) {
            queryIntermediateTransferIndex_result result = new queryIntermediateTransferIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryIntermediateTransferIndex_result result = new queryIntermediateTransferIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryIntermediateTransferIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<IntermediateTransferIndexDTO>> resultHandler) throws TException {
        iface.queryIntermediateTransferIndex(args.intermediateTransferIndexDTO,resultHandler);
      }
    }

    public static class getIntermediateTransferIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIntermediateTransferIndexTotal_args, Integer> {
      public getIntermediateTransferIndexTotal() {
        super("getIntermediateTransferIndexTotal");
      }

      public getIntermediateTransferIndexTotal_args getEmptyArgsInstance() {
        return new getIntermediateTransferIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getIntermediateTransferIndexTotal_result result = new getIntermediateTransferIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIntermediateTransferIndexTotal_result result = new getIntermediateTransferIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIntermediateTransferIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getIntermediateTransferIndexTotal(args.intermediateTransferIndexDTO,resultHandler);
      }
    }

    public static class queryIntermediateTransferRequestIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryIntermediateTransferRequestIndex_args, List<IntermediateTransferIndexDTO>> {
      public queryIntermediateTransferRequestIndex() {
        super("queryIntermediateTransferRequestIndex");
      }

      public queryIntermediateTransferRequestIndex_args getEmptyArgsInstance() {
        return new queryIntermediateTransferRequestIndex_args();
      }

      public AsyncMethodCallback<List<IntermediateTransferIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<IntermediateTransferIndexDTO>>() { 
          public void onComplete(List<IntermediateTransferIndexDTO> o) {
            queryIntermediateTransferRequestIndex_result result = new queryIntermediateTransferRequestIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryIntermediateTransferRequestIndex_result result = new queryIntermediateTransferRequestIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryIntermediateTransferRequestIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<IntermediateTransferIndexDTO>> resultHandler) throws TException {
        iface.queryIntermediateTransferRequestIndex(args.intermediateTransferIndexDTO,resultHandler);
      }
    }

    public static class getIntermediateTransferRequestIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIntermediateTransferRequestIndexTotal_args, Integer> {
      public getIntermediateTransferRequestIndexTotal() {
        super("getIntermediateTransferRequestIndexTotal");
      }

      public getIntermediateTransferRequestIndexTotal_args getEmptyArgsInstance() {
        return new getIntermediateTransferRequestIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getIntermediateTransferRequestIndexTotal_result result = new getIntermediateTransferRequestIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIntermediateTransferRequestIndexTotal_result result = new getIntermediateTransferRequestIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIntermediateTransferRequestIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getIntermediateTransferRequestIndexTotal(args.intermediateTransferIndexDTO,resultHandler);
      }
    }

    public static class queryIntermediateTransfer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryIntermediateTransfer_args, List<IntermediateTransferDTO>> {
      public queryIntermediateTransfer() {
        super("queryIntermediateTransfer");
      }

      public queryIntermediateTransfer_args getEmptyArgsInstance() {
        return new queryIntermediateTransfer_args();
      }

      public AsyncMethodCallback<List<IntermediateTransferDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<IntermediateTransferDTO>>() { 
          public void onComplete(List<IntermediateTransferDTO> o) {
            queryIntermediateTransfer_result result = new queryIntermediateTransfer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryIntermediateTransfer_result result = new queryIntermediateTransfer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryIntermediateTransfer_args args, org.apache.thrift.async.AsyncMethodCallback<List<IntermediateTransferDTO>> resultHandler) throws TException {
        iface.queryIntermediateTransfer(args.intermediateTransferDTO,resultHandler);
      }
    }

    public static class getIntermediateTransferTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIntermediateTransferTotal_args, Integer> {
      public getIntermediateTransferTotal() {
        super("getIntermediateTransferTotal");
      }

      public getIntermediateTransferTotal_args getEmptyArgsInstance() {
        return new getIntermediateTransferTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getIntermediateTransferTotal_result result = new getIntermediateTransferTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIntermediateTransferTotal_result result = new getIntermediateTransferTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIntermediateTransferTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getIntermediateTransferTotal(args.intermediateTransferDTO,resultHandler);
      }
    }

    public static class getIntermediateTransferById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIntermediateTransferById_args, IntermediateTransferDTO> {
      public getIntermediateTransferById() {
        super("getIntermediateTransferById");
      }

      public getIntermediateTransferById_args getEmptyArgsInstance() {
        return new getIntermediateTransferById_args();
      }

      public AsyncMethodCallback<IntermediateTransferDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IntermediateTransferDTO>() { 
          public void onComplete(IntermediateTransferDTO o) {
            getIntermediateTransferById_result result = new getIntermediateTransferById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIntermediateTransferById_result result = new getIntermediateTransferById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIntermediateTransferById_args args, org.apache.thrift.async.AsyncMethodCallback<IntermediateTransferDTO> resultHandler) throws TException {
        iface.getIntermediateTransferById(args.pid,resultHandler);
      }
    }

    public static class addIntermediateTransfer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addIntermediateTransfer_args, Integer> {
      public addIntermediateTransfer() {
        super("addIntermediateTransfer");
      }

      public addIntermediateTransfer_args getEmptyArgsInstance() {
        return new addIntermediateTransfer_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addIntermediateTransfer_result result = new addIntermediateTransfer_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addIntermediateTransfer_result result = new addIntermediateTransfer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addIntermediateTransfer_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addIntermediateTransfer(args.intermediateTransferDTO,resultHandler);
      }
    }

    public static class updateIntermediateTransfer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateIntermediateTransfer_args, Boolean> {
      public updateIntermediateTransfer() {
        super("updateIntermediateTransfer");
      }

      public updateIntermediateTransfer_args getEmptyArgsInstance() {
        return new updateIntermediateTransfer_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateIntermediateTransfer_result result = new updateIntermediateTransfer_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateIntermediateTransfer_result result = new updateIntermediateTransfer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateIntermediateTransfer_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateIntermediateTransfer(args.intermediateTransferDTO,resultHandler);
      }
    }

    public static class checkWorkFlowExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkWorkFlowExist_args, Integer> {
      public checkWorkFlowExist() {
        super("checkWorkFlowExist");
      }

      public checkWorkFlowExist_args getEmptyArgsInstance() {
        return new checkWorkFlowExist_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkWorkFlowExist_result result = new checkWorkFlowExist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkWorkFlowExist_result result = new checkWorkFlowExist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkWorkFlowExist_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkWorkFlowExist(args.intermediateTransferDTO,resultHandler);
      }
    }

  }

  public static class queryIntermediateTransferIndex_args implements org.apache.thrift.TBase<queryIntermediateTransferIndex_args, queryIntermediateTransferIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryIntermediateTransferIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIntermediateTransferIndex_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIntermediateTransferIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIntermediateTransferIndex_argsTupleSchemeFactory());
    }

    public IntermediateTransferIndexDTO intermediateTransferIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_INDEX_DTO((short)1, "intermediateTransferIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_INDEX_DTO
            return INTERMEDIATE_TRANSFER_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIntermediateTransferIndex_args.class, metaDataMap);
    }

    public queryIntermediateTransferIndex_args() {
    }

    public queryIntermediateTransferIndex_args(
      IntermediateTransferIndexDTO intermediateTransferIndexDTO)
    {
      this();
      this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIntermediateTransferIndex_args(queryIntermediateTransferIndex_args other) {
      if (other.isSetIntermediateTransferIndexDTO()) {
        this.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO(other.intermediateTransferIndexDTO);
      }
    }

    public queryIntermediateTransferIndex_args deepCopy() {
      return new queryIntermediateTransferIndex_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferIndexDTO = null;
    }

    public IntermediateTransferIndexDTO getIntermediateTransferIndexDTO() {
      return this.intermediateTransferIndexDTO;
    }

    public queryIntermediateTransferIndex_args setIntermediateTransferIndexDTO(IntermediateTransferIndexDTO intermediateTransferIndexDTO) {
      this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
      return this;
    }

    public void unsetIntermediateTransferIndexDTO() {
      this.intermediateTransferIndexDTO = null;
    }

    /** Returns true if field intermediateTransferIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferIndexDTO() {
      return this.intermediateTransferIndexDTO != null;
    }

    public void setIntermediateTransferIndexDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        if (value == null) {
          unsetIntermediateTransferIndexDTO();
        } else {
          setIntermediateTransferIndexDTO((IntermediateTransferIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        return getIntermediateTransferIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        return isSetIntermediateTransferIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIntermediateTransferIndex_args)
        return this.equals((queryIntermediateTransferIndex_args)that);
      return false;
    }

    public boolean equals(queryIntermediateTransferIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferIndexDTO = true && this.isSetIntermediateTransferIndexDTO();
      boolean that_present_intermediateTransferIndexDTO = true && that.isSetIntermediateTransferIndexDTO();
      if (this_present_intermediateTransferIndexDTO || that_present_intermediateTransferIndexDTO) {
        if (!(this_present_intermediateTransferIndexDTO && that_present_intermediateTransferIndexDTO))
          return false;
        if (!this.intermediateTransferIndexDTO.equals(that.intermediateTransferIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferIndexDTO = true && (isSetIntermediateTransferIndexDTO());
      list.add(present_intermediateTransferIndexDTO);
      if (present_intermediateTransferIndexDTO)
        list.add(intermediateTransferIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryIntermediateTransferIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferIndexDTO()).compareTo(other.isSetIntermediateTransferIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferIndexDTO, other.intermediateTransferIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIntermediateTransferIndex_args(");
      boolean first = true;

      sb.append("intermediateTransferIndexDTO:");
      if (this.intermediateTransferIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferIndexDTO != null) {
        intermediateTransferIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIntermediateTransferIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryIntermediateTransferIndex_argsStandardScheme getScheme() {
        return new queryIntermediateTransferIndex_argsStandardScheme();
      }
    }

    private static class queryIntermediateTransferIndex_argsStandardScheme extends StandardScheme<queryIntermediateTransferIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIntermediateTransferIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO();
                struct.intermediateTransferIndexDTO.read(iprot);
                struct.setIntermediateTransferIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIntermediateTransferIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferIndexDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_INDEX_DTO_FIELD_DESC);
          struct.intermediateTransferIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIntermediateTransferIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryIntermediateTransferIndex_argsTupleScheme getScheme() {
        return new queryIntermediateTransferIndex_argsTupleScheme();
      }
    }

    private static class queryIntermediateTransferIndex_argsTupleScheme extends TupleScheme<queryIntermediateTransferIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransferIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferIndexDTO()) {
          struct.intermediateTransferIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransferIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO();
          struct.intermediateTransferIndexDTO.read(iprot);
          struct.setIntermediateTransferIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryIntermediateTransferIndex_result implements org.apache.thrift.TBase<queryIntermediateTransferIndex_result, queryIntermediateTransferIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryIntermediateTransferIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIntermediateTransferIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIntermediateTransferIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIntermediateTransferIndex_resultTupleSchemeFactory());
    }

    public List<IntermediateTransferIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIntermediateTransferIndex_result.class, metaDataMap);
    }

    public queryIntermediateTransferIndex_result() {
    }

    public queryIntermediateTransferIndex_result(
      List<IntermediateTransferIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIntermediateTransferIndex_result(queryIntermediateTransferIndex_result other) {
      if (other.isSetSuccess()) {
        List<IntermediateTransferIndexDTO> __this__success = new ArrayList<IntermediateTransferIndexDTO>(other.success.size());
        for (IntermediateTransferIndexDTO other_element : other.success) {
          __this__success.add(new IntermediateTransferIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryIntermediateTransferIndex_result deepCopy() {
      return new queryIntermediateTransferIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<IntermediateTransferIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(IntermediateTransferIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<IntermediateTransferIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<IntermediateTransferIndexDTO> getSuccess() {
      return this.success;
    }

    public queryIntermediateTransferIndex_result setSuccess(List<IntermediateTransferIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<IntermediateTransferIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIntermediateTransferIndex_result)
        return this.equals((queryIntermediateTransferIndex_result)that);
      return false;
    }

    public boolean equals(queryIntermediateTransferIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryIntermediateTransferIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIntermediateTransferIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIntermediateTransferIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryIntermediateTransferIndex_resultStandardScheme getScheme() {
        return new queryIntermediateTransferIndex_resultStandardScheme();
      }
    }

    private static class queryIntermediateTransferIndex_resultStandardScheme extends StandardScheme<queryIntermediateTransferIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIntermediateTransferIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list732 = iprot.readListBegin();
                  struct.success = new ArrayList<IntermediateTransferIndexDTO>(_list732.size);
                  IntermediateTransferIndexDTO _elem733;
                  for (int _i734 = 0; _i734 < _list732.size; ++_i734)
                  {
                    _elem733 = new IntermediateTransferIndexDTO();
                    _elem733.read(iprot);
                    struct.success.add(_elem733);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIntermediateTransferIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (IntermediateTransferIndexDTO _iter735 : struct.success)
            {
              _iter735.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIntermediateTransferIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryIntermediateTransferIndex_resultTupleScheme getScheme() {
        return new queryIntermediateTransferIndex_resultTupleScheme();
      }
    }

    private static class queryIntermediateTransferIndex_resultTupleScheme extends TupleScheme<queryIntermediateTransferIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransferIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (IntermediateTransferIndexDTO _iter736 : struct.success)
            {
              _iter736.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransferIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list737 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<IntermediateTransferIndexDTO>(_list737.size);
            IntermediateTransferIndexDTO _elem738;
            for (int _i739 = 0; _i739 < _list737.size; ++_i739)
            {
              _elem738 = new IntermediateTransferIndexDTO();
              _elem738.read(iprot);
              struct.success.add(_elem738);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIntermediateTransferIndexTotal_args implements org.apache.thrift.TBase<getIntermediateTransferIndexTotal_args, getIntermediateTransferIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIntermediateTransferIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIntermediateTransferIndexTotal_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIntermediateTransferIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIntermediateTransferIndexTotal_argsTupleSchemeFactory());
    }

    public IntermediateTransferIndexDTO intermediateTransferIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_INDEX_DTO((short)1, "intermediateTransferIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_INDEX_DTO
            return INTERMEDIATE_TRANSFER_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntermediateTransferIndexTotal_args.class, metaDataMap);
    }

    public getIntermediateTransferIndexTotal_args() {
    }

    public getIntermediateTransferIndexTotal_args(
      IntermediateTransferIndexDTO intermediateTransferIndexDTO)
    {
      this();
      this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIntermediateTransferIndexTotal_args(getIntermediateTransferIndexTotal_args other) {
      if (other.isSetIntermediateTransferIndexDTO()) {
        this.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO(other.intermediateTransferIndexDTO);
      }
    }

    public getIntermediateTransferIndexTotal_args deepCopy() {
      return new getIntermediateTransferIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferIndexDTO = null;
    }

    public IntermediateTransferIndexDTO getIntermediateTransferIndexDTO() {
      return this.intermediateTransferIndexDTO;
    }

    public getIntermediateTransferIndexTotal_args setIntermediateTransferIndexDTO(IntermediateTransferIndexDTO intermediateTransferIndexDTO) {
      this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
      return this;
    }

    public void unsetIntermediateTransferIndexDTO() {
      this.intermediateTransferIndexDTO = null;
    }

    /** Returns true if field intermediateTransferIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferIndexDTO() {
      return this.intermediateTransferIndexDTO != null;
    }

    public void setIntermediateTransferIndexDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        if (value == null) {
          unsetIntermediateTransferIndexDTO();
        } else {
          setIntermediateTransferIndexDTO((IntermediateTransferIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        return getIntermediateTransferIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        return isSetIntermediateTransferIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIntermediateTransferIndexTotal_args)
        return this.equals((getIntermediateTransferIndexTotal_args)that);
      return false;
    }

    public boolean equals(getIntermediateTransferIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferIndexDTO = true && this.isSetIntermediateTransferIndexDTO();
      boolean that_present_intermediateTransferIndexDTO = true && that.isSetIntermediateTransferIndexDTO();
      if (this_present_intermediateTransferIndexDTO || that_present_intermediateTransferIndexDTO) {
        if (!(this_present_intermediateTransferIndexDTO && that_present_intermediateTransferIndexDTO))
          return false;
        if (!this.intermediateTransferIndexDTO.equals(that.intermediateTransferIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferIndexDTO = true && (isSetIntermediateTransferIndexDTO());
      list.add(present_intermediateTransferIndexDTO);
      if (present_intermediateTransferIndexDTO)
        list.add(intermediateTransferIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIntermediateTransferIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferIndexDTO()).compareTo(other.isSetIntermediateTransferIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferIndexDTO, other.intermediateTransferIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIntermediateTransferIndexTotal_args(");
      boolean first = true;

      sb.append("intermediateTransferIndexDTO:");
      if (this.intermediateTransferIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferIndexDTO != null) {
        intermediateTransferIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIntermediateTransferIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getIntermediateTransferIndexTotal_argsStandardScheme getScheme() {
        return new getIntermediateTransferIndexTotal_argsStandardScheme();
      }
    }

    private static class getIntermediateTransferIndexTotal_argsStandardScheme extends StandardScheme<getIntermediateTransferIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIntermediateTransferIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO();
                struct.intermediateTransferIndexDTO.read(iprot);
                struct.setIntermediateTransferIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIntermediateTransferIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferIndexDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_INDEX_DTO_FIELD_DESC);
          struct.intermediateTransferIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIntermediateTransferIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getIntermediateTransferIndexTotal_argsTupleScheme getScheme() {
        return new getIntermediateTransferIndexTotal_argsTupleScheme();
      }
    }

    private static class getIntermediateTransferIndexTotal_argsTupleScheme extends TupleScheme<getIntermediateTransferIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferIndexDTO()) {
          struct.intermediateTransferIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO();
          struct.intermediateTransferIndexDTO.read(iprot);
          struct.setIntermediateTransferIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getIntermediateTransferIndexTotal_result implements org.apache.thrift.TBase<getIntermediateTransferIndexTotal_result, getIntermediateTransferIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIntermediateTransferIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIntermediateTransferIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIntermediateTransferIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIntermediateTransferIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntermediateTransferIndexTotal_result.class, metaDataMap);
    }

    public getIntermediateTransferIndexTotal_result() {
    }

    public getIntermediateTransferIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIntermediateTransferIndexTotal_result(getIntermediateTransferIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getIntermediateTransferIndexTotal_result deepCopy() {
      return new getIntermediateTransferIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getIntermediateTransferIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIntermediateTransferIndexTotal_result)
        return this.equals((getIntermediateTransferIndexTotal_result)that);
      return false;
    }

    public boolean equals(getIntermediateTransferIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIntermediateTransferIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIntermediateTransferIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIntermediateTransferIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getIntermediateTransferIndexTotal_resultStandardScheme getScheme() {
        return new getIntermediateTransferIndexTotal_resultStandardScheme();
      }
    }

    private static class getIntermediateTransferIndexTotal_resultStandardScheme extends StandardScheme<getIntermediateTransferIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIntermediateTransferIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIntermediateTransferIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIntermediateTransferIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getIntermediateTransferIndexTotal_resultTupleScheme getScheme() {
        return new getIntermediateTransferIndexTotal_resultTupleScheme();
      }
    }

    private static class getIntermediateTransferIndexTotal_resultTupleScheme extends TupleScheme<getIntermediateTransferIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryIntermediateTransferRequestIndex_args implements org.apache.thrift.TBase<queryIntermediateTransferRequestIndex_args, queryIntermediateTransferRequestIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryIntermediateTransferRequestIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIntermediateTransferRequestIndex_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIntermediateTransferRequestIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIntermediateTransferRequestIndex_argsTupleSchemeFactory());
    }

    public IntermediateTransferIndexDTO intermediateTransferIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_INDEX_DTO((short)1, "intermediateTransferIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_INDEX_DTO
            return INTERMEDIATE_TRANSFER_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIntermediateTransferRequestIndex_args.class, metaDataMap);
    }

    public queryIntermediateTransferRequestIndex_args() {
    }

    public queryIntermediateTransferRequestIndex_args(
      IntermediateTransferIndexDTO intermediateTransferIndexDTO)
    {
      this();
      this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIntermediateTransferRequestIndex_args(queryIntermediateTransferRequestIndex_args other) {
      if (other.isSetIntermediateTransferIndexDTO()) {
        this.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO(other.intermediateTransferIndexDTO);
      }
    }

    public queryIntermediateTransferRequestIndex_args deepCopy() {
      return new queryIntermediateTransferRequestIndex_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferIndexDTO = null;
    }

    public IntermediateTransferIndexDTO getIntermediateTransferIndexDTO() {
      return this.intermediateTransferIndexDTO;
    }

    public queryIntermediateTransferRequestIndex_args setIntermediateTransferIndexDTO(IntermediateTransferIndexDTO intermediateTransferIndexDTO) {
      this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
      return this;
    }

    public void unsetIntermediateTransferIndexDTO() {
      this.intermediateTransferIndexDTO = null;
    }

    /** Returns true if field intermediateTransferIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferIndexDTO() {
      return this.intermediateTransferIndexDTO != null;
    }

    public void setIntermediateTransferIndexDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        if (value == null) {
          unsetIntermediateTransferIndexDTO();
        } else {
          setIntermediateTransferIndexDTO((IntermediateTransferIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        return getIntermediateTransferIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        return isSetIntermediateTransferIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIntermediateTransferRequestIndex_args)
        return this.equals((queryIntermediateTransferRequestIndex_args)that);
      return false;
    }

    public boolean equals(queryIntermediateTransferRequestIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferIndexDTO = true && this.isSetIntermediateTransferIndexDTO();
      boolean that_present_intermediateTransferIndexDTO = true && that.isSetIntermediateTransferIndexDTO();
      if (this_present_intermediateTransferIndexDTO || that_present_intermediateTransferIndexDTO) {
        if (!(this_present_intermediateTransferIndexDTO && that_present_intermediateTransferIndexDTO))
          return false;
        if (!this.intermediateTransferIndexDTO.equals(that.intermediateTransferIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferIndexDTO = true && (isSetIntermediateTransferIndexDTO());
      list.add(present_intermediateTransferIndexDTO);
      if (present_intermediateTransferIndexDTO)
        list.add(intermediateTransferIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryIntermediateTransferRequestIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferIndexDTO()).compareTo(other.isSetIntermediateTransferIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferIndexDTO, other.intermediateTransferIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIntermediateTransferRequestIndex_args(");
      boolean first = true;

      sb.append("intermediateTransferIndexDTO:");
      if (this.intermediateTransferIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferIndexDTO != null) {
        intermediateTransferIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIntermediateTransferRequestIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryIntermediateTransferRequestIndex_argsStandardScheme getScheme() {
        return new queryIntermediateTransferRequestIndex_argsStandardScheme();
      }
    }

    private static class queryIntermediateTransferRequestIndex_argsStandardScheme extends StandardScheme<queryIntermediateTransferRequestIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIntermediateTransferRequestIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO();
                struct.intermediateTransferIndexDTO.read(iprot);
                struct.setIntermediateTransferIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIntermediateTransferRequestIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferIndexDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_INDEX_DTO_FIELD_DESC);
          struct.intermediateTransferIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIntermediateTransferRequestIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryIntermediateTransferRequestIndex_argsTupleScheme getScheme() {
        return new queryIntermediateTransferRequestIndex_argsTupleScheme();
      }
    }

    private static class queryIntermediateTransferRequestIndex_argsTupleScheme extends TupleScheme<queryIntermediateTransferRequestIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransferRequestIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferIndexDTO()) {
          struct.intermediateTransferIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransferRequestIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO();
          struct.intermediateTransferIndexDTO.read(iprot);
          struct.setIntermediateTransferIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryIntermediateTransferRequestIndex_result implements org.apache.thrift.TBase<queryIntermediateTransferRequestIndex_result, queryIntermediateTransferRequestIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryIntermediateTransferRequestIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIntermediateTransferRequestIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIntermediateTransferRequestIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIntermediateTransferRequestIndex_resultTupleSchemeFactory());
    }

    public List<IntermediateTransferIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIntermediateTransferRequestIndex_result.class, metaDataMap);
    }

    public queryIntermediateTransferRequestIndex_result() {
    }

    public queryIntermediateTransferRequestIndex_result(
      List<IntermediateTransferIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIntermediateTransferRequestIndex_result(queryIntermediateTransferRequestIndex_result other) {
      if (other.isSetSuccess()) {
        List<IntermediateTransferIndexDTO> __this__success = new ArrayList<IntermediateTransferIndexDTO>(other.success.size());
        for (IntermediateTransferIndexDTO other_element : other.success) {
          __this__success.add(new IntermediateTransferIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryIntermediateTransferRequestIndex_result deepCopy() {
      return new queryIntermediateTransferRequestIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<IntermediateTransferIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(IntermediateTransferIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<IntermediateTransferIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<IntermediateTransferIndexDTO> getSuccess() {
      return this.success;
    }

    public queryIntermediateTransferRequestIndex_result setSuccess(List<IntermediateTransferIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<IntermediateTransferIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIntermediateTransferRequestIndex_result)
        return this.equals((queryIntermediateTransferRequestIndex_result)that);
      return false;
    }

    public boolean equals(queryIntermediateTransferRequestIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryIntermediateTransferRequestIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIntermediateTransferRequestIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIntermediateTransferRequestIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryIntermediateTransferRequestIndex_resultStandardScheme getScheme() {
        return new queryIntermediateTransferRequestIndex_resultStandardScheme();
      }
    }

    private static class queryIntermediateTransferRequestIndex_resultStandardScheme extends StandardScheme<queryIntermediateTransferRequestIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIntermediateTransferRequestIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list740 = iprot.readListBegin();
                  struct.success = new ArrayList<IntermediateTransferIndexDTO>(_list740.size);
                  IntermediateTransferIndexDTO _elem741;
                  for (int _i742 = 0; _i742 < _list740.size; ++_i742)
                  {
                    _elem741 = new IntermediateTransferIndexDTO();
                    _elem741.read(iprot);
                    struct.success.add(_elem741);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIntermediateTransferRequestIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (IntermediateTransferIndexDTO _iter743 : struct.success)
            {
              _iter743.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIntermediateTransferRequestIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryIntermediateTransferRequestIndex_resultTupleScheme getScheme() {
        return new queryIntermediateTransferRequestIndex_resultTupleScheme();
      }
    }

    private static class queryIntermediateTransferRequestIndex_resultTupleScheme extends TupleScheme<queryIntermediateTransferRequestIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransferRequestIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (IntermediateTransferIndexDTO _iter744 : struct.success)
            {
              _iter744.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransferRequestIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list745 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<IntermediateTransferIndexDTO>(_list745.size);
            IntermediateTransferIndexDTO _elem746;
            for (int _i747 = 0; _i747 < _list745.size; ++_i747)
            {
              _elem746 = new IntermediateTransferIndexDTO();
              _elem746.read(iprot);
              struct.success.add(_elem746);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIntermediateTransferRequestIndexTotal_args implements org.apache.thrift.TBase<getIntermediateTransferRequestIndexTotal_args, getIntermediateTransferRequestIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIntermediateTransferRequestIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIntermediateTransferRequestIndexTotal_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIntermediateTransferRequestIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIntermediateTransferRequestIndexTotal_argsTupleSchemeFactory());
    }

    public IntermediateTransferIndexDTO intermediateTransferIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_INDEX_DTO((short)1, "intermediateTransferIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_INDEX_DTO
            return INTERMEDIATE_TRANSFER_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntermediateTransferRequestIndexTotal_args.class, metaDataMap);
    }

    public getIntermediateTransferRequestIndexTotal_args() {
    }

    public getIntermediateTransferRequestIndexTotal_args(
      IntermediateTransferIndexDTO intermediateTransferIndexDTO)
    {
      this();
      this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIntermediateTransferRequestIndexTotal_args(getIntermediateTransferRequestIndexTotal_args other) {
      if (other.isSetIntermediateTransferIndexDTO()) {
        this.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO(other.intermediateTransferIndexDTO);
      }
    }

    public getIntermediateTransferRequestIndexTotal_args deepCopy() {
      return new getIntermediateTransferRequestIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferIndexDTO = null;
    }

    public IntermediateTransferIndexDTO getIntermediateTransferIndexDTO() {
      return this.intermediateTransferIndexDTO;
    }

    public getIntermediateTransferRequestIndexTotal_args setIntermediateTransferIndexDTO(IntermediateTransferIndexDTO intermediateTransferIndexDTO) {
      this.intermediateTransferIndexDTO = intermediateTransferIndexDTO;
      return this;
    }

    public void unsetIntermediateTransferIndexDTO() {
      this.intermediateTransferIndexDTO = null;
    }

    /** Returns true if field intermediateTransferIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferIndexDTO() {
      return this.intermediateTransferIndexDTO != null;
    }

    public void setIntermediateTransferIndexDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        if (value == null) {
          unsetIntermediateTransferIndexDTO();
        } else {
          setIntermediateTransferIndexDTO((IntermediateTransferIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        return getIntermediateTransferIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_INDEX_DTO:
        return isSetIntermediateTransferIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIntermediateTransferRequestIndexTotal_args)
        return this.equals((getIntermediateTransferRequestIndexTotal_args)that);
      return false;
    }

    public boolean equals(getIntermediateTransferRequestIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferIndexDTO = true && this.isSetIntermediateTransferIndexDTO();
      boolean that_present_intermediateTransferIndexDTO = true && that.isSetIntermediateTransferIndexDTO();
      if (this_present_intermediateTransferIndexDTO || that_present_intermediateTransferIndexDTO) {
        if (!(this_present_intermediateTransferIndexDTO && that_present_intermediateTransferIndexDTO))
          return false;
        if (!this.intermediateTransferIndexDTO.equals(that.intermediateTransferIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferIndexDTO = true && (isSetIntermediateTransferIndexDTO());
      list.add(present_intermediateTransferIndexDTO);
      if (present_intermediateTransferIndexDTO)
        list.add(intermediateTransferIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIntermediateTransferRequestIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferIndexDTO()).compareTo(other.isSetIntermediateTransferIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferIndexDTO, other.intermediateTransferIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIntermediateTransferRequestIndexTotal_args(");
      boolean first = true;

      sb.append("intermediateTransferIndexDTO:");
      if (this.intermediateTransferIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferIndexDTO != null) {
        intermediateTransferIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIntermediateTransferRequestIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getIntermediateTransferRequestIndexTotal_argsStandardScheme getScheme() {
        return new getIntermediateTransferRequestIndexTotal_argsStandardScheme();
      }
    }

    private static class getIntermediateTransferRequestIndexTotal_argsStandardScheme extends StandardScheme<getIntermediateTransferRequestIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIntermediateTransferRequestIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO();
                struct.intermediateTransferIndexDTO.read(iprot);
                struct.setIntermediateTransferIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIntermediateTransferRequestIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferIndexDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_INDEX_DTO_FIELD_DESC);
          struct.intermediateTransferIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIntermediateTransferRequestIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getIntermediateTransferRequestIndexTotal_argsTupleScheme getScheme() {
        return new getIntermediateTransferRequestIndexTotal_argsTupleScheme();
      }
    }

    private static class getIntermediateTransferRequestIndexTotal_argsTupleScheme extends TupleScheme<getIntermediateTransferRequestIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferRequestIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferIndexDTO()) {
          struct.intermediateTransferIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferRequestIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferIndexDTO = new IntermediateTransferIndexDTO();
          struct.intermediateTransferIndexDTO.read(iprot);
          struct.setIntermediateTransferIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getIntermediateTransferRequestIndexTotal_result implements org.apache.thrift.TBase<getIntermediateTransferRequestIndexTotal_result, getIntermediateTransferRequestIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIntermediateTransferRequestIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIntermediateTransferRequestIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIntermediateTransferRequestIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIntermediateTransferRequestIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntermediateTransferRequestIndexTotal_result.class, metaDataMap);
    }

    public getIntermediateTransferRequestIndexTotal_result() {
    }

    public getIntermediateTransferRequestIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIntermediateTransferRequestIndexTotal_result(getIntermediateTransferRequestIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getIntermediateTransferRequestIndexTotal_result deepCopy() {
      return new getIntermediateTransferRequestIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getIntermediateTransferRequestIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIntermediateTransferRequestIndexTotal_result)
        return this.equals((getIntermediateTransferRequestIndexTotal_result)that);
      return false;
    }

    public boolean equals(getIntermediateTransferRequestIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIntermediateTransferRequestIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIntermediateTransferRequestIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIntermediateTransferRequestIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getIntermediateTransferRequestIndexTotal_resultStandardScheme getScheme() {
        return new getIntermediateTransferRequestIndexTotal_resultStandardScheme();
      }
    }

    private static class getIntermediateTransferRequestIndexTotal_resultStandardScheme extends StandardScheme<getIntermediateTransferRequestIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIntermediateTransferRequestIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIntermediateTransferRequestIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIntermediateTransferRequestIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getIntermediateTransferRequestIndexTotal_resultTupleScheme getScheme() {
        return new getIntermediateTransferRequestIndexTotal_resultTupleScheme();
      }
    }

    private static class getIntermediateTransferRequestIndexTotal_resultTupleScheme extends TupleScheme<getIntermediateTransferRequestIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferRequestIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferRequestIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryIntermediateTransfer_args implements org.apache.thrift.TBase<queryIntermediateTransfer_args, queryIntermediateTransfer_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryIntermediateTransfer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIntermediateTransfer_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIntermediateTransfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIntermediateTransfer_argsTupleSchemeFactory());
    }

    public IntermediateTransferDTO intermediateTransferDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_DTO((short)1, "intermediateTransferDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_DTO
            return INTERMEDIATE_TRANSFER_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIntermediateTransfer_args.class, metaDataMap);
    }

    public queryIntermediateTransfer_args() {
    }

    public queryIntermediateTransfer_args(
      IntermediateTransferDTO intermediateTransferDTO)
    {
      this();
      this.intermediateTransferDTO = intermediateTransferDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIntermediateTransfer_args(queryIntermediateTransfer_args other) {
      if (other.isSetIntermediateTransferDTO()) {
        this.intermediateTransferDTO = new IntermediateTransferDTO(other.intermediateTransferDTO);
      }
    }

    public queryIntermediateTransfer_args deepCopy() {
      return new queryIntermediateTransfer_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferDTO = null;
    }

    public IntermediateTransferDTO getIntermediateTransferDTO() {
      return this.intermediateTransferDTO;
    }

    public queryIntermediateTransfer_args setIntermediateTransferDTO(IntermediateTransferDTO intermediateTransferDTO) {
      this.intermediateTransferDTO = intermediateTransferDTO;
      return this;
    }

    public void unsetIntermediateTransferDTO() {
      this.intermediateTransferDTO = null;
    }

    /** Returns true if field intermediateTransferDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferDTO() {
      return this.intermediateTransferDTO != null;
    }

    public void setIntermediateTransferDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        if (value == null) {
          unsetIntermediateTransferDTO();
        } else {
          setIntermediateTransferDTO((IntermediateTransferDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return getIntermediateTransferDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return isSetIntermediateTransferDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIntermediateTransfer_args)
        return this.equals((queryIntermediateTransfer_args)that);
      return false;
    }

    public boolean equals(queryIntermediateTransfer_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferDTO = true && this.isSetIntermediateTransferDTO();
      boolean that_present_intermediateTransferDTO = true && that.isSetIntermediateTransferDTO();
      if (this_present_intermediateTransferDTO || that_present_intermediateTransferDTO) {
        if (!(this_present_intermediateTransferDTO && that_present_intermediateTransferDTO))
          return false;
        if (!this.intermediateTransferDTO.equals(that.intermediateTransferDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferDTO = true && (isSetIntermediateTransferDTO());
      list.add(present_intermediateTransferDTO);
      if (present_intermediateTransferDTO)
        list.add(intermediateTransferDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryIntermediateTransfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferDTO()).compareTo(other.isSetIntermediateTransferDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferDTO, other.intermediateTransferDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIntermediateTransfer_args(");
      boolean first = true;

      sb.append("intermediateTransferDTO:");
      if (this.intermediateTransferDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferDTO != null) {
        intermediateTransferDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIntermediateTransfer_argsStandardSchemeFactory implements SchemeFactory {
      public queryIntermediateTransfer_argsStandardScheme getScheme() {
        return new queryIntermediateTransfer_argsStandardScheme();
      }
    }

    private static class queryIntermediateTransfer_argsStandardScheme extends StandardScheme<queryIntermediateTransfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferDTO = new IntermediateTransferDTO();
                struct.intermediateTransferDTO.read(iprot);
                struct.setIntermediateTransferDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_DTO_FIELD_DESC);
          struct.intermediateTransferDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIntermediateTransfer_argsTupleSchemeFactory implements SchemeFactory {
      public queryIntermediateTransfer_argsTupleScheme getScheme() {
        return new queryIntermediateTransfer_argsTupleScheme();
      }
    }

    private static class queryIntermediateTransfer_argsTupleScheme extends TupleScheme<queryIntermediateTransfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferDTO()) {
          struct.intermediateTransferDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferDTO = new IntermediateTransferDTO();
          struct.intermediateTransferDTO.read(iprot);
          struct.setIntermediateTransferDTOIsSet(true);
        }
      }
    }

  }

  public static class queryIntermediateTransfer_result implements org.apache.thrift.TBase<queryIntermediateTransfer_result, queryIntermediateTransfer_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryIntermediateTransfer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryIntermediateTransfer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryIntermediateTransfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryIntermediateTransfer_resultTupleSchemeFactory());
    }

    public List<IntermediateTransferDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryIntermediateTransfer_result.class, metaDataMap);
    }

    public queryIntermediateTransfer_result() {
    }

    public queryIntermediateTransfer_result(
      List<IntermediateTransferDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryIntermediateTransfer_result(queryIntermediateTransfer_result other) {
      if (other.isSetSuccess()) {
        List<IntermediateTransferDTO> __this__success = new ArrayList<IntermediateTransferDTO>(other.success.size());
        for (IntermediateTransferDTO other_element : other.success) {
          __this__success.add(new IntermediateTransferDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryIntermediateTransfer_result deepCopy() {
      return new queryIntermediateTransfer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<IntermediateTransferDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(IntermediateTransferDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<IntermediateTransferDTO>();
      }
      this.success.add(elem);
    }

    public List<IntermediateTransferDTO> getSuccess() {
      return this.success;
    }

    public queryIntermediateTransfer_result setSuccess(List<IntermediateTransferDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<IntermediateTransferDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryIntermediateTransfer_result)
        return this.equals((queryIntermediateTransfer_result)that);
      return false;
    }

    public boolean equals(queryIntermediateTransfer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryIntermediateTransfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryIntermediateTransfer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryIntermediateTransfer_resultStandardSchemeFactory implements SchemeFactory {
      public queryIntermediateTransfer_resultStandardScheme getScheme() {
        return new queryIntermediateTransfer_resultStandardScheme();
      }
    }

    private static class queryIntermediateTransfer_resultStandardScheme extends StandardScheme<queryIntermediateTransfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list748 = iprot.readListBegin();
                  struct.success = new ArrayList<IntermediateTransferDTO>(_list748.size);
                  IntermediateTransferDTO _elem749;
                  for (int _i750 = 0; _i750 < _list748.size; ++_i750)
                  {
                    _elem749 = new IntermediateTransferDTO();
                    _elem749.read(iprot);
                    struct.success.add(_elem749);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (IntermediateTransferDTO _iter751 : struct.success)
            {
              _iter751.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryIntermediateTransfer_resultTupleSchemeFactory implements SchemeFactory {
      public queryIntermediateTransfer_resultTupleScheme getScheme() {
        return new queryIntermediateTransfer_resultTupleScheme();
      }
    }

    private static class queryIntermediateTransfer_resultTupleScheme extends TupleScheme<queryIntermediateTransfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (IntermediateTransferDTO _iter752 : struct.success)
            {
              _iter752.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list753 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<IntermediateTransferDTO>(_list753.size);
            IntermediateTransferDTO _elem754;
            for (int _i755 = 0; _i755 < _list753.size; ++_i755)
            {
              _elem754 = new IntermediateTransferDTO();
              _elem754.read(iprot);
              struct.success.add(_elem754);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIntermediateTransferTotal_args implements org.apache.thrift.TBase<getIntermediateTransferTotal_args, getIntermediateTransferTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIntermediateTransferTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIntermediateTransferTotal_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIntermediateTransferTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIntermediateTransferTotal_argsTupleSchemeFactory());
    }

    public IntermediateTransferDTO intermediateTransferDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_DTO((short)1, "intermediateTransferDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_DTO
            return INTERMEDIATE_TRANSFER_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntermediateTransferTotal_args.class, metaDataMap);
    }

    public getIntermediateTransferTotal_args() {
    }

    public getIntermediateTransferTotal_args(
      IntermediateTransferDTO intermediateTransferDTO)
    {
      this();
      this.intermediateTransferDTO = intermediateTransferDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIntermediateTransferTotal_args(getIntermediateTransferTotal_args other) {
      if (other.isSetIntermediateTransferDTO()) {
        this.intermediateTransferDTO = new IntermediateTransferDTO(other.intermediateTransferDTO);
      }
    }

    public getIntermediateTransferTotal_args deepCopy() {
      return new getIntermediateTransferTotal_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferDTO = null;
    }

    public IntermediateTransferDTO getIntermediateTransferDTO() {
      return this.intermediateTransferDTO;
    }

    public getIntermediateTransferTotal_args setIntermediateTransferDTO(IntermediateTransferDTO intermediateTransferDTO) {
      this.intermediateTransferDTO = intermediateTransferDTO;
      return this;
    }

    public void unsetIntermediateTransferDTO() {
      this.intermediateTransferDTO = null;
    }

    /** Returns true if field intermediateTransferDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferDTO() {
      return this.intermediateTransferDTO != null;
    }

    public void setIntermediateTransferDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        if (value == null) {
          unsetIntermediateTransferDTO();
        } else {
          setIntermediateTransferDTO((IntermediateTransferDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return getIntermediateTransferDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return isSetIntermediateTransferDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIntermediateTransferTotal_args)
        return this.equals((getIntermediateTransferTotal_args)that);
      return false;
    }

    public boolean equals(getIntermediateTransferTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferDTO = true && this.isSetIntermediateTransferDTO();
      boolean that_present_intermediateTransferDTO = true && that.isSetIntermediateTransferDTO();
      if (this_present_intermediateTransferDTO || that_present_intermediateTransferDTO) {
        if (!(this_present_intermediateTransferDTO && that_present_intermediateTransferDTO))
          return false;
        if (!this.intermediateTransferDTO.equals(that.intermediateTransferDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferDTO = true && (isSetIntermediateTransferDTO());
      list.add(present_intermediateTransferDTO);
      if (present_intermediateTransferDTO)
        list.add(intermediateTransferDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIntermediateTransferTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferDTO()).compareTo(other.isSetIntermediateTransferDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferDTO, other.intermediateTransferDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIntermediateTransferTotal_args(");
      boolean first = true;

      sb.append("intermediateTransferDTO:");
      if (this.intermediateTransferDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferDTO != null) {
        intermediateTransferDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIntermediateTransferTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getIntermediateTransferTotal_argsStandardScheme getScheme() {
        return new getIntermediateTransferTotal_argsStandardScheme();
      }
    }

    private static class getIntermediateTransferTotal_argsStandardScheme extends StandardScheme<getIntermediateTransferTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIntermediateTransferTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferDTO = new IntermediateTransferDTO();
                struct.intermediateTransferDTO.read(iprot);
                struct.setIntermediateTransferDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIntermediateTransferTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_DTO_FIELD_DESC);
          struct.intermediateTransferDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIntermediateTransferTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getIntermediateTransferTotal_argsTupleScheme getScheme() {
        return new getIntermediateTransferTotal_argsTupleScheme();
      }
    }

    private static class getIntermediateTransferTotal_argsTupleScheme extends TupleScheme<getIntermediateTransferTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferDTO()) {
          struct.intermediateTransferDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferDTO = new IntermediateTransferDTO();
          struct.intermediateTransferDTO.read(iprot);
          struct.setIntermediateTransferDTOIsSet(true);
        }
      }
    }

  }

  public static class getIntermediateTransferTotal_result implements org.apache.thrift.TBase<getIntermediateTransferTotal_result, getIntermediateTransferTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIntermediateTransferTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIntermediateTransferTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIntermediateTransferTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIntermediateTransferTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntermediateTransferTotal_result.class, metaDataMap);
    }

    public getIntermediateTransferTotal_result() {
    }

    public getIntermediateTransferTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIntermediateTransferTotal_result(getIntermediateTransferTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getIntermediateTransferTotal_result deepCopy() {
      return new getIntermediateTransferTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getIntermediateTransferTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIntermediateTransferTotal_result)
        return this.equals((getIntermediateTransferTotal_result)that);
      return false;
    }

    public boolean equals(getIntermediateTransferTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIntermediateTransferTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIntermediateTransferTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIntermediateTransferTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getIntermediateTransferTotal_resultStandardScheme getScheme() {
        return new getIntermediateTransferTotal_resultStandardScheme();
      }
    }

    private static class getIntermediateTransferTotal_resultStandardScheme extends StandardScheme<getIntermediateTransferTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIntermediateTransferTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIntermediateTransferTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIntermediateTransferTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getIntermediateTransferTotal_resultTupleScheme getScheme() {
        return new getIntermediateTransferTotal_resultTupleScheme();
      }
    }

    private static class getIntermediateTransferTotal_resultTupleScheme extends TupleScheme<getIntermediateTransferTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIntermediateTransferById_args implements org.apache.thrift.TBase<getIntermediateTransferById_args, getIntermediateTransferById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIntermediateTransferById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIntermediateTransferById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIntermediateTransferById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIntermediateTransferById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntermediateTransferById_args.class, metaDataMap);
    }

    public getIntermediateTransferById_args() {
    }

    public getIntermediateTransferById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIntermediateTransferById_args(getIntermediateTransferById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getIntermediateTransferById_args deepCopy() {
      return new getIntermediateTransferById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getIntermediateTransferById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIntermediateTransferById_args)
        return this.equals((getIntermediateTransferById_args)that);
      return false;
    }

    public boolean equals(getIntermediateTransferById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIntermediateTransferById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIntermediateTransferById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIntermediateTransferById_argsStandardSchemeFactory implements SchemeFactory {
      public getIntermediateTransferById_argsStandardScheme getScheme() {
        return new getIntermediateTransferById_argsStandardScheme();
      }
    }

    private static class getIntermediateTransferById_argsStandardScheme extends StandardScheme<getIntermediateTransferById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIntermediateTransferById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIntermediateTransferById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIntermediateTransferById_argsTupleSchemeFactory implements SchemeFactory {
      public getIntermediateTransferById_argsTupleScheme getScheme() {
        return new getIntermediateTransferById_argsTupleScheme();
      }
    }

    private static class getIntermediateTransferById_argsTupleScheme extends TupleScheme<getIntermediateTransferById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getIntermediateTransferById_result implements org.apache.thrift.TBase<getIntermediateTransferById_result, getIntermediateTransferById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIntermediateTransferById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIntermediateTransferById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIntermediateTransferById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIntermediateTransferById_resultTupleSchemeFactory());
    }

    public IntermediateTransferDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIntermediateTransferById_result.class, metaDataMap);
    }

    public getIntermediateTransferById_result() {
    }

    public getIntermediateTransferById_result(
      IntermediateTransferDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIntermediateTransferById_result(getIntermediateTransferById_result other) {
      if (other.isSetSuccess()) {
        this.success = new IntermediateTransferDTO(other.success);
      }
    }

    public getIntermediateTransferById_result deepCopy() {
      return new getIntermediateTransferById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IntermediateTransferDTO getSuccess() {
      return this.success;
    }

    public getIntermediateTransferById_result setSuccess(IntermediateTransferDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IntermediateTransferDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIntermediateTransferById_result)
        return this.equals((getIntermediateTransferById_result)that);
      return false;
    }

    public boolean equals(getIntermediateTransferById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIntermediateTransferById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIntermediateTransferById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIntermediateTransferById_resultStandardSchemeFactory implements SchemeFactory {
      public getIntermediateTransferById_resultStandardScheme getScheme() {
        return new getIntermediateTransferById_resultStandardScheme();
      }
    }

    private static class getIntermediateTransferById_resultStandardScheme extends StandardScheme<getIntermediateTransferById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIntermediateTransferById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IntermediateTransferDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIntermediateTransferById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIntermediateTransferById_resultTupleSchemeFactory implements SchemeFactory {
      public getIntermediateTransferById_resultTupleScheme getScheme() {
        return new getIntermediateTransferById_resultTupleScheme();
      }
    }

    private static class getIntermediateTransferById_resultTupleScheme extends TupleScheme<getIntermediateTransferById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIntermediateTransferById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new IntermediateTransferDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addIntermediateTransfer_args implements org.apache.thrift.TBase<addIntermediateTransfer_args, addIntermediateTransfer_args._Fields>, java.io.Serializable, Cloneable, Comparable<addIntermediateTransfer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addIntermediateTransfer_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addIntermediateTransfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addIntermediateTransfer_argsTupleSchemeFactory());
    }

    public IntermediateTransferDTO intermediateTransferDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_DTO((short)1, "intermediateTransferDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_DTO
            return INTERMEDIATE_TRANSFER_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addIntermediateTransfer_args.class, metaDataMap);
    }

    public addIntermediateTransfer_args() {
    }

    public addIntermediateTransfer_args(
      IntermediateTransferDTO intermediateTransferDTO)
    {
      this();
      this.intermediateTransferDTO = intermediateTransferDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIntermediateTransfer_args(addIntermediateTransfer_args other) {
      if (other.isSetIntermediateTransferDTO()) {
        this.intermediateTransferDTO = new IntermediateTransferDTO(other.intermediateTransferDTO);
      }
    }

    public addIntermediateTransfer_args deepCopy() {
      return new addIntermediateTransfer_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferDTO = null;
    }

    public IntermediateTransferDTO getIntermediateTransferDTO() {
      return this.intermediateTransferDTO;
    }

    public addIntermediateTransfer_args setIntermediateTransferDTO(IntermediateTransferDTO intermediateTransferDTO) {
      this.intermediateTransferDTO = intermediateTransferDTO;
      return this;
    }

    public void unsetIntermediateTransferDTO() {
      this.intermediateTransferDTO = null;
    }

    /** Returns true if field intermediateTransferDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferDTO() {
      return this.intermediateTransferDTO != null;
    }

    public void setIntermediateTransferDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        if (value == null) {
          unsetIntermediateTransferDTO();
        } else {
          setIntermediateTransferDTO((IntermediateTransferDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return getIntermediateTransferDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return isSetIntermediateTransferDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIntermediateTransfer_args)
        return this.equals((addIntermediateTransfer_args)that);
      return false;
    }

    public boolean equals(addIntermediateTransfer_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferDTO = true && this.isSetIntermediateTransferDTO();
      boolean that_present_intermediateTransferDTO = true && that.isSetIntermediateTransferDTO();
      if (this_present_intermediateTransferDTO || that_present_intermediateTransferDTO) {
        if (!(this_present_intermediateTransferDTO && that_present_intermediateTransferDTO))
          return false;
        if (!this.intermediateTransferDTO.equals(that.intermediateTransferDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferDTO = true && (isSetIntermediateTransferDTO());
      list.add(present_intermediateTransferDTO);
      if (present_intermediateTransferDTO)
        list.add(intermediateTransferDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addIntermediateTransfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferDTO()).compareTo(other.isSetIntermediateTransferDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferDTO, other.intermediateTransferDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIntermediateTransfer_args(");
      boolean first = true;

      sb.append("intermediateTransferDTO:");
      if (this.intermediateTransferDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferDTO != null) {
        intermediateTransferDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addIntermediateTransfer_argsStandardSchemeFactory implements SchemeFactory {
      public addIntermediateTransfer_argsStandardScheme getScheme() {
        return new addIntermediateTransfer_argsStandardScheme();
      }
    }

    private static class addIntermediateTransfer_argsStandardScheme extends StandardScheme<addIntermediateTransfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferDTO = new IntermediateTransferDTO();
                struct.intermediateTransferDTO.read(iprot);
                struct.setIntermediateTransferDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_DTO_FIELD_DESC);
          struct.intermediateTransferDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addIntermediateTransfer_argsTupleSchemeFactory implements SchemeFactory {
      public addIntermediateTransfer_argsTupleScheme getScheme() {
        return new addIntermediateTransfer_argsTupleScheme();
      }
    }

    private static class addIntermediateTransfer_argsTupleScheme extends TupleScheme<addIntermediateTransfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferDTO()) {
          struct.intermediateTransferDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferDTO = new IntermediateTransferDTO();
          struct.intermediateTransferDTO.read(iprot);
          struct.setIntermediateTransferDTOIsSet(true);
        }
      }
    }

  }

  public static class addIntermediateTransfer_result implements org.apache.thrift.TBase<addIntermediateTransfer_result, addIntermediateTransfer_result._Fields>, java.io.Serializable, Cloneable, Comparable<addIntermediateTransfer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addIntermediateTransfer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addIntermediateTransfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addIntermediateTransfer_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addIntermediateTransfer_result.class, metaDataMap);
    }

    public addIntermediateTransfer_result() {
    }

    public addIntermediateTransfer_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addIntermediateTransfer_result(addIntermediateTransfer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addIntermediateTransfer_result deepCopy() {
      return new addIntermediateTransfer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addIntermediateTransfer_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addIntermediateTransfer_result)
        return this.equals((addIntermediateTransfer_result)that);
      return false;
    }

    public boolean equals(addIntermediateTransfer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addIntermediateTransfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addIntermediateTransfer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addIntermediateTransfer_resultStandardSchemeFactory implements SchemeFactory {
      public addIntermediateTransfer_resultStandardScheme getScheme() {
        return new addIntermediateTransfer_resultStandardScheme();
      }
    }

    private static class addIntermediateTransfer_resultStandardScheme extends StandardScheme<addIntermediateTransfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addIntermediateTransfer_resultTupleSchemeFactory implements SchemeFactory {
      public addIntermediateTransfer_resultTupleScheme getScheme() {
        return new addIntermediateTransfer_resultTupleScheme();
      }
    }

    private static class addIntermediateTransfer_resultTupleScheme extends TupleScheme<addIntermediateTransfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateIntermediateTransfer_args implements org.apache.thrift.TBase<updateIntermediateTransfer_args, updateIntermediateTransfer_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateIntermediateTransfer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateIntermediateTransfer_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateIntermediateTransfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateIntermediateTransfer_argsTupleSchemeFactory());
    }

    public IntermediateTransferDTO intermediateTransferDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_DTO((short)1, "intermediateTransferDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_DTO
            return INTERMEDIATE_TRANSFER_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateIntermediateTransfer_args.class, metaDataMap);
    }

    public updateIntermediateTransfer_args() {
    }

    public updateIntermediateTransfer_args(
      IntermediateTransferDTO intermediateTransferDTO)
    {
      this();
      this.intermediateTransferDTO = intermediateTransferDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateIntermediateTransfer_args(updateIntermediateTransfer_args other) {
      if (other.isSetIntermediateTransferDTO()) {
        this.intermediateTransferDTO = new IntermediateTransferDTO(other.intermediateTransferDTO);
      }
    }

    public updateIntermediateTransfer_args deepCopy() {
      return new updateIntermediateTransfer_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferDTO = null;
    }

    public IntermediateTransferDTO getIntermediateTransferDTO() {
      return this.intermediateTransferDTO;
    }

    public updateIntermediateTransfer_args setIntermediateTransferDTO(IntermediateTransferDTO intermediateTransferDTO) {
      this.intermediateTransferDTO = intermediateTransferDTO;
      return this;
    }

    public void unsetIntermediateTransferDTO() {
      this.intermediateTransferDTO = null;
    }

    /** Returns true if field intermediateTransferDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferDTO() {
      return this.intermediateTransferDTO != null;
    }

    public void setIntermediateTransferDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        if (value == null) {
          unsetIntermediateTransferDTO();
        } else {
          setIntermediateTransferDTO((IntermediateTransferDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return getIntermediateTransferDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return isSetIntermediateTransferDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateIntermediateTransfer_args)
        return this.equals((updateIntermediateTransfer_args)that);
      return false;
    }

    public boolean equals(updateIntermediateTransfer_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferDTO = true && this.isSetIntermediateTransferDTO();
      boolean that_present_intermediateTransferDTO = true && that.isSetIntermediateTransferDTO();
      if (this_present_intermediateTransferDTO || that_present_intermediateTransferDTO) {
        if (!(this_present_intermediateTransferDTO && that_present_intermediateTransferDTO))
          return false;
        if (!this.intermediateTransferDTO.equals(that.intermediateTransferDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferDTO = true && (isSetIntermediateTransferDTO());
      list.add(present_intermediateTransferDTO);
      if (present_intermediateTransferDTO)
        list.add(intermediateTransferDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateIntermediateTransfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferDTO()).compareTo(other.isSetIntermediateTransferDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferDTO, other.intermediateTransferDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateIntermediateTransfer_args(");
      boolean first = true;

      sb.append("intermediateTransferDTO:");
      if (this.intermediateTransferDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferDTO != null) {
        intermediateTransferDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateIntermediateTransfer_argsStandardSchemeFactory implements SchemeFactory {
      public updateIntermediateTransfer_argsStandardScheme getScheme() {
        return new updateIntermediateTransfer_argsStandardScheme();
      }
    }

    private static class updateIntermediateTransfer_argsStandardScheme extends StandardScheme<updateIntermediateTransfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferDTO = new IntermediateTransferDTO();
                struct.intermediateTransferDTO.read(iprot);
                struct.setIntermediateTransferDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_DTO_FIELD_DESC);
          struct.intermediateTransferDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateIntermediateTransfer_argsTupleSchemeFactory implements SchemeFactory {
      public updateIntermediateTransfer_argsTupleScheme getScheme() {
        return new updateIntermediateTransfer_argsTupleScheme();
      }
    }

    private static class updateIntermediateTransfer_argsTupleScheme extends TupleScheme<updateIntermediateTransfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferDTO()) {
          struct.intermediateTransferDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateIntermediateTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferDTO = new IntermediateTransferDTO();
          struct.intermediateTransferDTO.read(iprot);
          struct.setIntermediateTransferDTOIsSet(true);
        }
      }
    }

  }

  public static class updateIntermediateTransfer_result implements org.apache.thrift.TBase<updateIntermediateTransfer_result, updateIntermediateTransfer_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateIntermediateTransfer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateIntermediateTransfer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateIntermediateTransfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateIntermediateTransfer_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateIntermediateTransfer_result.class, metaDataMap);
    }

    public updateIntermediateTransfer_result() {
    }

    public updateIntermediateTransfer_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateIntermediateTransfer_result(updateIntermediateTransfer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateIntermediateTransfer_result deepCopy() {
      return new updateIntermediateTransfer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateIntermediateTransfer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateIntermediateTransfer_result)
        return this.equals((updateIntermediateTransfer_result)that);
      return false;
    }

    public boolean equals(updateIntermediateTransfer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateIntermediateTransfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateIntermediateTransfer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateIntermediateTransfer_resultStandardSchemeFactory implements SchemeFactory {
      public updateIntermediateTransfer_resultStandardScheme getScheme() {
        return new updateIntermediateTransfer_resultStandardScheme();
      }
    }

    private static class updateIntermediateTransfer_resultStandardScheme extends StandardScheme<updateIntermediateTransfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateIntermediateTransfer_resultTupleSchemeFactory implements SchemeFactory {
      public updateIntermediateTransfer_resultTupleScheme getScheme() {
        return new updateIntermediateTransfer_resultTupleScheme();
      }
    }

    private static class updateIntermediateTransfer_resultTupleScheme extends TupleScheme<updateIntermediateTransfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateIntermediateTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkWorkFlowExist_args implements org.apache.thrift.TBase<checkWorkFlowExist_args, checkWorkFlowExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkWorkFlowExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWorkFlowExist_args");

    private static final org.apache.thrift.protocol.TField INTERMEDIATE_TRANSFER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediateTransferDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWorkFlowExist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWorkFlowExist_argsTupleSchemeFactory());
    }

    public IntermediateTransferDTO intermediateTransferDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERMEDIATE_TRANSFER_DTO((short)1, "intermediateTransferDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERMEDIATE_TRANSFER_DTO
            return INTERMEDIATE_TRANSFER_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERMEDIATE_TRANSFER_DTO, new org.apache.thrift.meta_data.FieldMetaData("intermediateTransferDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntermediateTransferDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWorkFlowExist_args.class, metaDataMap);
    }

    public checkWorkFlowExist_args() {
    }

    public checkWorkFlowExist_args(
      IntermediateTransferDTO intermediateTransferDTO)
    {
      this();
      this.intermediateTransferDTO = intermediateTransferDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWorkFlowExist_args(checkWorkFlowExist_args other) {
      if (other.isSetIntermediateTransferDTO()) {
        this.intermediateTransferDTO = new IntermediateTransferDTO(other.intermediateTransferDTO);
      }
    }

    public checkWorkFlowExist_args deepCopy() {
      return new checkWorkFlowExist_args(this);
    }

    @Override
    public void clear() {
      this.intermediateTransferDTO = null;
    }

    public IntermediateTransferDTO getIntermediateTransferDTO() {
      return this.intermediateTransferDTO;
    }

    public checkWorkFlowExist_args setIntermediateTransferDTO(IntermediateTransferDTO intermediateTransferDTO) {
      this.intermediateTransferDTO = intermediateTransferDTO;
      return this;
    }

    public void unsetIntermediateTransferDTO() {
      this.intermediateTransferDTO = null;
    }

    /** Returns true if field intermediateTransferDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetIntermediateTransferDTO() {
      return this.intermediateTransferDTO != null;
    }

    public void setIntermediateTransferDTOIsSet(boolean value) {
      if (!value) {
        this.intermediateTransferDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        if (value == null) {
          unsetIntermediateTransferDTO();
        } else {
          setIntermediateTransferDTO((IntermediateTransferDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return getIntermediateTransferDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERMEDIATE_TRANSFER_DTO:
        return isSetIntermediateTransferDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWorkFlowExist_args)
        return this.equals((checkWorkFlowExist_args)that);
      return false;
    }

    public boolean equals(checkWorkFlowExist_args that) {
      if (that == null)
        return false;

      boolean this_present_intermediateTransferDTO = true && this.isSetIntermediateTransferDTO();
      boolean that_present_intermediateTransferDTO = true && that.isSetIntermediateTransferDTO();
      if (this_present_intermediateTransferDTO || that_present_intermediateTransferDTO) {
        if (!(this_present_intermediateTransferDTO && that_present_intermediateTransferDTO))
          return false;
        if (!this.intermediateTransferDTO.equals(that.intermediateTransferDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_intermediateTransferDTO = true && (isSetIntermediateTransferDTO());
      list.add(present_intermediateTransferDTO);
      if (present_intermediateTransferDTO)
        list.add(intermediateTransferDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkWorkFlowExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntermediateTransferDTO()).compareTo(other.isSetIntermediateTransferDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntermediateTransferDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediateTransferDTO, other.intermediateTransferDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWorkFlowExist_args(");
      boolean first = true;

      sb.append("intermediateTransferDTO:");
      if (this.intermediateTransferDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.intermediateTransferDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (intermediateTransferDTO != null) {
        intermediateTransferDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWorkFlowExist_argsStandardSchemeFactory implements SchemeFactory {
      public checkWorkFlowExist_argsStandardScheme getScheme() {
        return new checkWorkFlowExist_argsStandardScheme();
      }
    }

    private static class checkWorkFlowExist_argsStandardScheme extends StandardScheme<checkWorkFlowExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWorkFlowExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERMEDIATE_TRANSFER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.intermediateTransferDTO = new IntermediateTransferDTO();
                struct.intermediateTransferDTO.read(iprot);
                struct.setIntermediateTransferDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWorkFlowExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.intermediateTransferDTO != null) {
          oprot.writeFieldBegin(INTERMEDIATE_TRANSFER_DTO_FIELD_DESC);
          struct.intermediateTransferDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWorkFlowExist_argsTupleSchemeFactory implements SchemeFactory {
      public checkWorkFlowExist_argsTupleScheme getScheme() {
        return new checkWorkFlowExist_argsTupleScheme();
      }
    }

    private static class checkWorkFlowExist_argsTupleScheme extends TupleScheme<checkWorkFlowExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWorkFlowExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntermediateTransferDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIntermediateTransferDTO()) {
          struct.intermediateTransferDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWorkFlowExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.intermediateTransferDTO = new IntermediateTransferDTO();
          struct.intermediateTransferDTO.read(iprot);
          struct.setIntermediateTransferDTOIsSet(true);
        }
      }
    }

  }

  public static class checkWorkFlowExist_result implements org.apache.thrift.TBase<checkWorkFlowExist_result, checkWorkFlowExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkWorkFlowExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkWorkFlowExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkWorkFlowExist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkWorkFlowExist_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkWorkFlowExist_result.class, metaDataMap);
    }

    public checkWorkFlowExist_result() {
    }

    public checkWorkFlowExist_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkWorkFlowExist_result(checkWorkFlowExist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkWorkFlowExist_result deepCopy() {
      return new checkWorkFlowExist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkWorkFlowExist_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkWorkFlowExist_result)
        return this.equals((checkWorkFlowExist_result)that);
      return false;
    }

    public boolean equals(checkWorkFlowExist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkWorkFlowExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkWorkFlowExist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkWorkFlowExist_resultStandardSchemeFactory implements SchemeFactory {
      public checkWorkFlowExist_resultStandardScheme getScheme() {
        return new checkWorkFlowExist_resultStandardScheme();
      }
    }

    private static class checkWorkFlowExist_resultStandardScheme extends StandardScheme<checkWorkFlowExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkWorkFlowExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkWorkFlowExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkWorkFlowExist_resultTupleSchemeFactory implements SchemeFactory {
      public checkWorkFlowExist_resultTupleScheme getScheme() {
        return new checkWorkFlowExist_resultTupleScheme();
      }
    }

    private static class checkWorkFlowExist_resultTupleScheme extends TupleScheme<checkWorkFlowExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkWorkFlowExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkWorkFlowExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

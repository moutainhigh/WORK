/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusDTO implements org.apache.thrift.TBase<CusDTO, CusDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CusDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CPY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpyName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CPY_ABBR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpyAbbrName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUS_LIC_CERT_FIELD_DESC = new org.apache.thrift.protocol.TField("busLicCert", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CUS_TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusTelephone", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COMM_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("commAddr", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CHINA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chinaName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sexName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("certTypeName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CERT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("certNumber", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PER_TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("perTelephone", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CUS_MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("cusMail", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CUS_REG_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("cusRegMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField CUS_FOUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusFoundDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CUS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("cusStatus", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CUR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("curType", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField MARR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("marrName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField COMM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commCode", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certType", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField WORK_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("workUnit", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField PER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("perStatus", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField CUS_STATUS_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("cusStatusVal", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("mail", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField RELATION_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("relationVal", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField RELATION_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("relationText", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField WORK_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("workService", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField MONTH_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("monthIncome", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField COM_ALL_NATURE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("comAllNatureText", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField PROJECT_PUBLIC_MAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectPublicManId", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)39);
  private static final org.apache.thrift.protocol.TField PROPORTION_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("proportionProperty", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField LIVE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("liveAddr", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField CENSUS_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("censusAddr", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField CERT_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("certAddr", org.apache.thrift.protocol.TType.STRING, (short)43);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int acctId; // required
  public String cpyName; // required
  public String cpyAbbrName; // required
  public String busLicCert; // required
  public String orgCode; // required
  public String cusTelephone; // required
  public String commAddr; // required
  public String chinaName; // required
  public String sexName; // required
  public String certTypeName; // required
  public String certNumber; // required
  public String perTelephone; // required
  public String cusMail; // required
  public double cusRegMoney; // required
  public String cusFoundDate; // required
  public int cusStatus; // required
  public String realName; // required
  public String curType; // required
  public int ecoTrade; // required
  public String marrName; // required
  public String commCode; // required
  public int certType; // required
  public int sex; // required
  public String workUnit; // required
  public int perStatus; // required
  public String remark; // required
  public String cusStatusVal; // required
  public String mail; // required
  public int relationVal; // required
  public String relationText; // required
  public String workService; // required
  public double monthIncome; // required
  public String comAllNatureText; // required
  public int page; // required
  public int rows; // required
  public int userId; // required
  public int projectPublicManId; // required
  public List<Integer> userIds; // required
  public double proportionProperty; // required
  public String liveAddr; // required
  public String censusAddr; // required
  public String certAddr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACCT_ID((short)2, "acctId"),
    CPY_NAME((short)3, "cpyName"),
    CPY_ABBR_NAME((short)4, "cpyAbbrName"),
    BUS_LIC_CERT((short)5, "busLicCert"),
    ORG_CODE((short)6, "orgCode"),
    CUS_TELEPHONE((short)7, "cusTelephone"),
    COMM_ADDR((short)8, "commAddr"),
    CHINA_NAME((short)9, "chinaName"),
    SEX_NAME((short)10, "sexName"),
    CERT_TYPE_NAME((short)11, "certTypeName"),
    CERT_NUMBER((short)12, "certNumber"),
    PER_TELEPHONE((short)13, "perTelephone"),
    CUS_MAIL((short)14, "cusMail"),
    CUS_REG_MONEY((short)15, "cusRegMoney"),
    CUS_FOUND_DATE((short)16, "cusFoundDate"),
    CUS_STATUS((short)17, "cusStatus"),
    REAL_NAME((short)18, "realName"),
    CUR_TYPE((short)19, "curType"),
    ECO_TRADE((short)20, "ecoTrade"),
    MARR_NAME((short)21, "marrName"),
    COMM_CODE((short)22, "commCode"),
    CERT_TYPE((short)23, "certType"),
    SEX((short)24, "sex"),
    WORK_UNIT((short)25, "workUnit"),
    PER_STATUS((short)26, "perStatus"),
    REMARK((short)27, "remark"),
    CUS_STATUS_VAL((short)28, "cusStatusVal"),
    MAIL((short)29, "mail"),
    RELATION_VAL((short)30, "relationVal"),
    RELATION_TEXT((short)31, "relationText"),
    WORK_SERVICE((short)32, "workService"),
    MONTH_INCOME((short)33, "monthIncome"),
    COM_ALL_NATURE_TEXT((short)34, "comAllNatureText"),
    PAGE((short)35, "page"),
    ROWS((short)36, "rows"),
    USER_ID((short)37, "userId"),
    PROJECT_PUBLIC_MAN_ID((short)38, "projectPublicManId"),
    USER_IDS((short)39, "userIds"),
    PROPORTION_PROPERTY((short)40, "proportionProperty"),
    LIVE_ADDR((short)41, "liveAddr"),
    CENSUS_ADDR((short)42, "censusAddr"),
    CERT_ADDR((short)43, "certAddr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACCT_ID
          return ACCT_ID;
        case 3: // CPY_NAME
          return CPY_NAME;
        case 4: // CPY_ABBR_NAME
          return CPY_ABBR_NAME;
        case 5: // BUS_LIC_CERT
          return BUS_LIC_CERT;
        case 6: // ORG_CODE
          return ORG_CODE;
        case 7: // CUS_TELEPHONE
          return CUS_TELEPHONE;
        case 8: // COMM_ADDR
          return COMM_ADDR;
        case 9: // CHINA_NAME
          return CHINA_NAME;
        case 10: // SEX_NAME
          return SEX_NAME;
        case 11: // CERT_TYPE_NAME
          return CERT_TYPE_NAME;
        case 12: // CERT_NUMBER
          return CERT_NUMBER;
        case 13: // PER_TELEPHONE
          return PER_TELEPHONE;
        case 14: // CUS_MAIL
          return CUS_MAIL;
        case 15: // CUS_REG_MONEY
          return CUS_REG_MONEY;
        case 16: // CUS_FOUND_DATE
          return CUS_FOUND_DATE;
        case 17: // CUS_STATUS
          return CUS_STATUS;
        case 18: // REAL_NAME
          return REAL_NAME;
        case 19: // CUR_TYPE
          return CUR_TYPE;
        case 20: // ECO_TRADE
          return ECO_TRADE;
        case 21: // MARR_NAME
          return MARR_NAME;
        case 22: // COMM_CODE
          return COMM_CODE;
        case 23: // CERT_TYPE
          return CERT_TYPE;
        case 24: // SEX
          return SEX;
        case 25: // WORK_UNIT
          return WORK_UNIT;
        case 26: // PER_STATUS
          return PER_STATUS;
        case 27: // REMARK
          return REMARK;
        case 28: // CUS_STATUS_VAL
          return CUS_STATUS_VAL;
        case 29: // MAIL
          return MAIL;
        case 30: // RELATION_VAL
          return RELATION_VAL;
        case 31: // RELATION_TEXT
          return RELATION_TEXT;
        case 32: // WORK_SERVICE
          return WORK_SERVICE;
        case 33: // MONTH_INCOME
          return MONTH_INCOME;
        case 34: // COM_ALL_NATURE_TEXT
          return COM_ALL_NATURE_TEXT;
        case 35: // PAGE
          return PAGE;
        case 36: // ROWS
          return ROWS;
        case 37: // USER_ID
          return USER_ID;
        case 38: // PROJECT_PUBLIC_MAN_ID
          return PROJECT_PUBLIC_MAN_ID;
        case 39: // USER_IDS
          return USER_IDS;
        case 40: // PROPORTION_PROPERTY
          return PROPORTION_PROPERTY;
        case 41: // LIVE_ADDR
          return LIVE_ADDR;
        case 42: // CENSUS_ADDR
          return CENSUS_ADDR;
        case 43: // CERT_ADDR
          return CERT_ADDR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCTID_ISSET_ID = 1;
  private static final int __CUSREGMONEY_ISSET_ID = 2;
  private static final int __CUSSTATUS_ISSET_ID = 3;
  private static final int __ECOTRADE_ISSET_ID = 4;
  private static final int __CERTTYPE_ISSET_ID = 5;
  private static final int __SEX_ISSET_ID = 6;
  private static final int __PERSTATUS_ISSET_ID = 7;
  private static final int __RELATIONVAL_ISSET_ID = 8;
  private static final int __MONTHINCOME_ISSET_ID = 9;
  private static final int __PAGE_ISSET_ID = 10;
  private static final int __ROWS_ISSET_ID = 11;
  private static final int __USERID_ISSET_ID = 12;
  private static final int __PROJECTPUBLICMANID_ISSET_ID = 13;
  private static final int __PROPORTIONPROPERTY_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPY_ABBR_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpyAbbrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_LIC_CERT, new org.apache.thrift.meta_data.FieldMetaData("busLicCert", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("cusTelephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMM_ADDR, new org.apache.thrift.meta_data.FieldMetaData("commAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHINA_NAME, new org.apache.thrift.meta_data.FieldMetaData("chinaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("sexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("certTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("certNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PER_TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("perTelephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_MAIL, new org.apache.thrift.meta_data.FieldMetaData("cusMail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_REG_MONEY, new org.apache.thrift.meta_data.FieldMetaData("cusRegMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUS_FOUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("cusFoundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("cusStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("curType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MARR_NAME, new org.apache.thrift.meta_data.FieldMetaData("marrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMM_CODE, new org.apache.thrift.meta_data.FieldMetaData("commCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORK_UNIT, new org.apache.thrift.meta_data.FieldMetaData("workUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("perStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_STATUS_VAL, new org.apache.thrift.meta_data.FieldMetaData("cusStatusVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIL, new org.apache.thrift.meta_data.FieldMetaData("mail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATION_VAL, new org.apache.thrift.meta_data.FieldMetaData("relationVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATION_TEXT, new org.apache.thrift.meta_data.FieldMetaData("relationText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("workService", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH_INCOME, new org.apache.thrift.meta_data.FieldMetaData("monthIncome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COM_ALL_NATURE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("comAllNatureText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_PUBLIC_MAN_ID, new org.apache.thrift.meta_data.FieldMetaData("projectPublicManId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PROPORTION_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("proportionProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LIVE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("liveAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CENSUS_ADDR, new org.apache.thrift.meta_data.FieldMetaData("censusAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_ADDR, new org.apache.thrift.meta_data.FieldMetaData("certAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusDTO.class, metaDataMap);
  }

  public CusDTO() {
  }

  public CusDTO(
    int pid,
    int acctId,
    String cpyName,
    String cpyAbbrName,
    String busLicCert,
    String orgCode,
    String cusTelephone,
    String commAddr,
    String chinaName,
    String sexName,
    String certTypeName,
    String certNumber,
    String perTelephone,
    String cusMail,
    double cusRegMoney,
    String cusFoundDate,
    int cusStatus,
    String realName,
    String curType,
    int ecoTrade,
    String marrName,
    String commCode,
    int certType,
    int sex,
    String workUnit,
    int perStatus,
    String remark,
    String cusStatusVal,
    String mail,
    int relationVal,
    String relationText,
    String workService,
    double monthIncome,
    String comAllNatureText,
    int page,
    int rows,
    int userId,
    int projectPublicManId,
    List<Integer> userIds,
    double proportionProperty,
    String liveAddr,
    String censusAddr,
    String certAddr)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.cpyName = cpyName;
    this.cpyAbbrName = cpyAbbrName;
    this.busLicCert = busLicCert;
    this.orgCode = orgCode;
    this.cusTelephone = cusTelephone;
    this.commAddr = commAddr;
    this.chinaName = chinaName;
    this.sexName = sexName;
    this.certTypeName = certTypeName;
    this.certNumber = certNumber;
    this.perTelephone = perTelephone;
    this.cusMail = cusMail;
    this.cusRegMoney = cusRegMoney;
    setCusRegMoneyIsSet(true);
    this.cusFoundDate = cusFoundDate;
    this.cusStatus = cusStatus;
    setCusStatusIsSet(true);
    this.realName = realName;
    this.curType = curType;
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    this.marrName = marrName;
    this.commCode = commCode;
    this.certType = certType;
    setCertTypeIsSet(true);
    this.sex = sex;
    setSexIsSet(true);
    this.workUnit = workUnit;
    this.perStatus = perStatus;
    setPerStatusIsSet(true);
    this.remark = remark;
    this.cusStatusVal = cusStatusVal;
    this.mail = mail;
    this.relationVal = relationVal;
    setRelationValIsSet(true);
    this.relationText = relationText;
    this.workService = workService;
    this.monthIncome = monthIncome;
    setMonthIncomeIsSet(true);
    this.comAllNatureText = comAllNatureText;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.projectPublicManId = projectPublicManId;
    setProjectPublicManIdIsSet(true);
    this.userIds = userIds;
    this.proportionProperty = proportionProperty;
    setProportionPropertyIsSet(true);
    this.liveAddr = liveAddr;
    this.censusAddr = censusAddr;
    this.certAddr = certAddr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusDTO(CusDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.acctId = other.acctId;
    if (other.isSetCpyName()) {
      this.cpyName = other.cpyName;
    }
    if (other.isSetCpyAbbrName()) {
      this.cpyAbbrName = other.cpyAbbrName;
    }
    if (other.isSetBusLicCert()) {
      this.busLicCert = other.busLicCert;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetCusTelephone()) {
      this.cusTelephone = other.cusTelephone;
    }
    if (other.isSetCommAddr()) {
      this.commAddr = other.commAddr;
    }
    if (other.isSetChinaName()) {
      this.chinaName = other.chinaName;
    }
    if (other.isSetSexName()) {
      this.sexName = other.sexName;
    }
    if (other.isSetCertTypeName()) {
      this.certTypeName = other.certTypeName;
    }
    if (other.isSetCertNumber()) {
      this.certNumber = other.certNumber;
    }
    if (other.isSetPerTelephone()) {
      this.perTelephone = other.perTelephone;
    }
    if (other.isSetCusMail()) {
      this.cusMail = other.cusMail;
    }
    this.cusRegMoney = other.cusRegMoney;
    if (other.isSetCusFoundDate()) {
      this.cusFoundDate = other.cusFoundDate;
    }
    this.cusStatus = other.cusStatus;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetCurType()) {
      this.curType = other.curType;
    }
    this.ecoTrade = other.ecoTrade;
    if (other.isSetMarrName()) {
      this.marrName = other.marrName;
    }
    if (other.isSetCommCode()) {
      this.commCode = other.commCode;
    }
    this.certType = other.certType;
    this.sex = other.sex;
    if (other.isSetWorkUnit()) {
      this.workUnit = other.workUnit;
    }
    this.perStatus = other.perStatus;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCusStatusVal()) {
      this.cusStatusVal = other.cusStatusVal;
    }
    if (other.isSetMail()) {
      this.mail = other.mail;
    }
    this.relationVal = other.relationVal;
    if (other.isSetRelationText()) {
      this.relationText = other.relationText;
    }
    if (other.isSetWorkService()) {
      this.workService = other.workService;
    }
    this.monthIncome = other.monthIncome;
    if (other.isSetComAllNatureText()) {
      this.comAllNatureText = other.comAllNatureText;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.userId = other.userId;
    this.projectPublicManId = other.projectPublicManId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.proportionProperty = other.proportionProperty;
    if (other.isSetLiveAddr()) {
      this.liveAddr = other.liveAddr;
    }
    if (other.isSetCensusAddr()) {
      this.censusAddr = other.censusAddr;
    }
    if (other.isSetCertAddr()) {
      this.certAddr = other.certAddr;
    }
  }

  public CusDTO deepCopy() {
    return new CusDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    this.cpyName = null;
    this.cpyAbbrName = null;
    this.busLicCert = null;
    this.orgCode = null;
    this.cusTelephone = null;
    this.commAddr = null;
    this.chinaName = null;
    this.sexName = null;
    this.certTypeName = null;
    this.certNumber = null;
    this.perTelephone = null;
    this.cusMail = null;
    setCusRegMoneyIsSet(false);
    this.cusRegMoney = 0.0;
    this.cusFoundDate = null;
    setCusStatusIsSet(false);
    this.cusStatus = 0;
    this.realName = null;
    this.curType = null;
    setEcoTradeIsSet(false);
    this.ecoTrade = 0;
    this.marrName = null;
    this.commCode = null;
    setCertTypeIsSet(false);
    this.certType = 0;
    setSexIsSet(false);
    this.sex = 0;
    this.workUnit = null;
    setPerStatusIsSet(false);
    this.perStatus = 0;
    this.remark = null;
    this.cusStatusVal = null;
    this.mail = null;
    setRelationValIsSet(false);
    this.relationVal = 0;
    this.relationText = null;
    this.workService = null;
    setMonthIncomeIsSet(false);
    this.monthIncome = 0.0;
    this.comAllNatureText = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setProjectPublicManIdIsSet(false);
    this.projectPublicManId = 0;
    this.userIds = null;
    setProportionPropertyIsSet(false);
    this.proportionProperty = 0.0;
    this.liveAddr = null;
    this.censusAddr = null;
    this.certAddr = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CusDTO setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public String getCpyName() {
    return this.cpyName;
  }

  public CusDTO setCpyName(String cpyName) {
    this.cpyName = cpyName;
    return this;
  }

  public void unsetCpyName() {
    this.cpyName = null;
  }

  /** Returns true if field cpyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpyName() {
    return this.cpyName != null;
  }

  public void setCpyNameIsSet(boolean value) {
    if (!value) {
      this.cpyName = null;
    }
  }

  public String getCpyAbbrName() {
    return this.cpyAbbrName;
  }

  public CusDTO setCpyAbbrName(String cpyAbbrName) {
    this.cpyAbbrName = cpyAbbrName;
    return this;
  }

  public void unsetCpyAbbrName() {
    this.cpyAbbrName = null;
  }

  /** Returns true if field cpyAbbrName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpyAbbrName() {
    return this.cpyAbbrName != null;
  }

  public void setCpyAbbrNameIsSet(boolean value) {
    if (!value) {
      this.cpyAbbrName = null;
    }
  }

  public String getBusLicCert() {
    return this.busLicCert;
  }

  public CusDTO setBusLicCert(String busLicCert) {
    this.busLicCert = busLicCert;
    return this;
  }

  public void unsetBusLicCert() {
    this.busLicCert = null;
  }

  /** Returns true if field busLicCert is set (has been assigned a value) and false otherwise */
  public boolean isSetBusLicCert() {
    return this.busLicCert != null;
  }

  public void setBusLicCertIsSet(boolean value) {
    if (!value) {
      this.busLicCert = null;
    }
  }

  public String getOrgCode() {
    return this.orgCode;
  }

  public CusDTO setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public String getCusTelephone() {
    return this.cusTelephone;
  }

  public CusDTO setCusTelephone(String cusTelephone) {
    this.cusTelephone = cusTelephone;
    return this;
  }

  public void unsetCusTelephone() {
    this.cusTelephone = null;
  }

  /** Returns true if field cusTelephone is set (has been assigned a value) and false otherwise */
  public boolean isSetCusTelephone() {
    return this.cusTelephone != null;
  }

  public void setCusTelephoneIsSet(boolean value) {
    if (!value) {
      this.cusTelephone = null;
    }
  }

  public String getCommAddr() {
    return this.commAddr;
  }

  public CusDTO setCommAddr(String commAddr) {
    this.commAddr = commAddr;
    return this;
  }

  public void unsetCommAddr() {
    this.commAddr = null;
  }

  /** Returns true if field commAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetCommAddr() {
    return this.commAddr != null;
  }

  public void setCommAddrIsSet(boolean value) {
    if (!value) {
      this.commAddr = null;
    }
  }

  public String getChinaName() {
    return this.chinaName;
  }

  public CusDTO setChinaName(String chinaName) {
    this.chinaName = chinaName;
    return this;
  }

  public void unsetChinaName() {
    this.chinaName = null;
  }

  /** Returns true if field chinaName is set (has been assigned a value) and false otherwise */
  public boolean isSetChinaName() {
    return this.chinaName != null;
  }

  public void setChinaNameIsSet(boolean value) {
    if (!value) {
      this.chinaName = null;
    }
  }

  public String getSexName() {
    return this.sexName;
  }

  public CusDTO setSexName(String sexName) {
    this.sexName = sexName;
    return this;
  }

  public void unsetSexName() {
    this.sexName = null;
  }

  /** Returns true if field sexName is set (has been assigned a value) and false otherwise */
  public boolean isSetSexName() {
    return this.sexName != null;
  }

  public void setSexNameIsSet(boolean value) {
    if (!value) {
      this.sexName = null;
    }
  }

  public String getCertTypeName() {
    return this.certTypeName;
  }

  public CusDTO setCertTypeName(String certTypeName) {
    this.certTypeName = certTypeName;
    return this;
  }

  public void unsetCertTypeName() {
    this.certTypeName = null;
  }

  /** Returns true if field certTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetCertTypeName() {
    return this.certTypeName != null;
  }

  public void setCertTypeNameIsSet(boolean value) {
    if (!value) {
      this.certTypeName = null;
    }
  }

  public String getCertNumber() {
    return this.certNumber;
  }

  public CusDTO setCertNumber(String certNumber) {
    this.certNumber = certNumber;
    return this;
  }

  public void unsetCertNumber() {
    this.certNumber = null;
  }

  /** Returns true if field certNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNumber() {
    return this.certNumber != null;
  }

  public void setCertNumberIsSet(boolean value) {
    if (!value) {
      this.certNumber = null;
    }
  }

  public String getPerTelephone() {
    return this.perTelephone;
  }

  public CusDTO setPerTelephone(String perTelephone) {
    this.perTelephone = perTelephone;
    return this;
  }

  public void unsetPerTelephone() {
    this.perTelephone = null;
  }

  /** Returns true if field perTelephone is set (has been assigned a value) and false otherwise */
  public boolean isSetPerTelephone() {
    return this.perTelephone != null;
  }

  public void setPerTelephoneIsSet(boolean value) {
    if (!value) {
      this.perTelephone = null;
    }
  }

  public String getCusMail() {
    return this.cusMail;
  }

  public CusDTO setCusMail(String cusMail) {
    this.cusMail = cusMail;
    return this;
  }

  public void unsetCusMail() {
    this.cusMail = null;
  }

  /** Returns true if field cusMail is set (has been assigned a value) and false otherwise */
  public boolean isSetCusMail() {
    return this.cusMail != null;
  }

  public void setCusMailIsSet(boolean value) {
    if (!value) {
      this.cusMail = null;
    }
  }

  public double getCusRegMoney() {
    return this.cusRegMoney;
  }

  public CusDTO setCusRegMoney(double cusRegMoney) {
    this.cusRegMoney = cusRegMoney;
    setCusRegMoneyIsSet(true);
    return this;
  }

  public void unsetCusRegMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSREGMONEY_ISSET_ID);
  }

  /** Returns true if field cusRegMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCusRegMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSREGMONEY_ISSET_ID);
  }

  public void setCusRegMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSREGMONEY_ISSET_ID, value);
  }

  public String getCusFoundDate() {
    return this.cusFoundDate;
  }

  public CusDTO setCusFoundDate(String cusFoundDate) {
    this.cusFoundDate = cusFoundDate;
    return this;
  }

  public void unsetCusFoundDate() {
    this.cusFoundDate = null;
  }

  /** Returns true if field cusFoundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCusFoundDate() {
    return this.cusFoundDate != null;
  }

  public void setCusFoundDateIsSet(boolean value) {
    if (!value) {
      this.cusFoundDate = null;
    }
  }

  public int getCusStatus() {
    return this.cusStatus;
  }

  public CusDTO setCusStatus(int cusStatus) {
    this.cusStatus = cusStatus;
    setCusStatusIsSet(true);
    return this;
  }

  public void unsetCusStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSSTATUS_ISSET_ID);
  }

  /** Returns true if field cusStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCusStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSSTATUS_ISSET_ID);
  }

  public void setCusStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSSTATUS_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public CusDTO setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getCurType() {
    return this.curType;
  }

  public CusDTO setCurType(String curType) {
    this.curType = curType;
    return this;
  }

  public void unsetCurType() {
    this.curType = null;
  }

  /** Returns true if field curType is set (has been assigned a value) and false otherwise */
  public boolean isSetCurType() {
    return this.curType != null;
  }

  public void setCurTypeIsSet(boolean value) {
    if (!value) {
      this.curType = null;
    }
  }

  public int getEcoTrade() {
    return this.ecoTrade;
  }

  public CusDTO setEcoTrade(int ecoTrade) {
    this.ecoTrade = ecoTrade;
    setEcoTradeIsSet(true);
    return this;
  }

  public void unsetEcoTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __ECOTRADE_ISSET_ID);
  }

  public void setEcoTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECOTRADE_ISSET_ID, value);
  }

  public String getMarrName() {
    return this.marrName;
  }

  public CusDTO setMarrName(String marrName) {
    this.marrName = marrName;
    return this;
  }

  public void unsetMarrName() {
    this.marrName = null;
  }

  /** Returns true if field marrName is set (has been assigned a value) and false otherwise */
  public boolean isSetMarrName() {
    return this.marrName != null;
  }

  public void setMarrNameIsSet(boolean value) {
    if (!value) {
      this.marrName = null;
    }
  }

  public String getCommCode() {
    return this.commCode;
  }

  public CusDTO setCommCode(String commCode) {
    this.commCode = commCode;
    return this;
  }

  public void unsetCommCode() {
    this.commCode = null;
  }

  /** Returns true if field commCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommCode() {
    return this.commCode != null;
  }

  public void setCommCodeIsSet(boolean value) {
    if (!value) {
      this.commCode = null;
    }
  }

  public int getCertType() {
    return this.certType;
  }

  public CusDTO setCertType(int certType) {
    this.certType = certType;
    setCertTypeIsSet(true);
    return this;
  }

  public void unsetCertType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CERTTYPE_ISSET_ID);
  }

  /** Returns true if field certType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertType() {
    return EncodingUtils.testBit(__isset_bitfield, __CERTTYPE_ISSET_ID);
  }

  public void setCertTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CERTTYPE_ISSET_ID, value);
  }

  public int getSex() {
    return this.sex;
  }

  public CusDTO setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getWorkUnit() {
    return this.workUnit;
  }

  public CusDTO setWorkUnit(String workUnit) {
    this.workUnit = workUnit;
    return this;
  }

  public void unsetWorkUnit() {
    this.workUnit = null;
  }

  /** Returns true if field workUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkUnit() {
    return this.workUnit != null;
  }

  public void setWorkUnitIsSet(boolean value) {
    if (!value) {
      this.workUnit = null;
    }
  }

  public int getPerStatus() {
    return this.perStatus;
  }

  public CusDTO setPerStatus(int perStatus) {
    this.perStatus = perStatus;
    setPerStatusIsSet(true);
    return this;
  }

  public void unsetPerStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERSTATUS_ISSET_ID);
  }

  /** Returns true if field perStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPerStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PERSTATUS_ISSET_ID);
  }

  public void setPerStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERSTATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public CusDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCusStatusVal() {
    return this.cusStatusVal;
  }

  public CusDTO setCusStatusVal(String cusStatusVal) {
    this.cusStatusVal = cusStatusVal;
    return this;
  }

  public void unsetCusStatusVal() {
    this.cusStatusVal = null;
  }

  /** Returns true if field cusStatusVal is set (has been assigned a value) and false otherwise */
  public boolean isSetCusStatusVal() {
    return this.cusStatusVal != null;
  }

  public void setCusStatusValIsSet(boolean value) {
    if (!value) {
      this.cusStatusVal = null;
    }
  }

  public String getMail() {
    return this.mail;
  }

  public CusDTO setMail(String mail) {
    this.mail = mail;
    return this;
  }

  public void unsetMail() {
    this.mail = null;
  }

  /** Returns true if field mail is set (has been assigned a value) and false otherwise */
  public boolean isSetMail() {
    return this.mail != null;
  }

  public void setMailIsSet(boolean value) {
    if (!value) {
      this.mail = null;
    }
  }

  public int getRelationVal() {
    return this.relationVal;
  }

  public CusDTO setRelationVal(int relationVal) {
    this.relationVal = relationVal;
    setRelationValIsSet(true);
    return this;
  }

  public void unsetRelationVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONVAL_ISSET_ID);
  }

  /** Returns true if field relationVal is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationVal() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATIONVAL_ISSET_ID);
  }

  public void setRelationValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONVAL_ISSET_ID, value);
  }

  public String getRelationText() {
    return this.relationText;
  }

  public CusDTO setRelationText(String relationText) {
    this.relationText = relationText;
    return this;
  }

  public void unsetRelationText() {
    this.relationText = null;
  }

  /** Returns true if field relationText is set (has been assigned a value) and false otherwise */
  public boolean isSetRelationText() {
    return this.relationText != null;
  }

  public void setRelationTextIsSet(boolean value) {
    if (!value) {
      this.relationText = null;
    }
  }

  public String getWorkService() {
    return this.workService;
  }

  public CusDTO setWorkService(String workService) {
    this.workService = workService;
    return this;
  }

  public void unsetWorkService() {
    this.workService = null;
  }

  /** Returns true if field workService is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkService() {
    return this.workService != null;
  }

  public void setWorkServiceIsSet(boolean value) {
    if (!value) {
      this.workService = null;
    }
  }

  public double getMonthIncome() {
    return this.monthIncome;
  }

  public CusDTO setMonthIncome(double monthIncome) {
    this.monthIncome = monthIncome;
    setMonthIncomeIsSet(true);
    return this;
  }

  public void unsetMonthIncome() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHINCOME_ISSET_ID);
  }

  /** Returns true if field monthIncome is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthIncome() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHINCOME_ISSET_ID);
  }

  public void setMonthIncomeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHINCOME_ISSET_ID, value);
  }

  public String getComAllNatureText() {
    return this.comAllNatureText;
  }

  public CusDTO setComAllNatureText(String comAllNatureText) {
    this.comAllNatureText = comAllNatureText;
    return this;
  }

  public void unsetComAllNatureText() {
    this.comAllNatureText = null;
  }

  /** Returns true if field comAllNatureText is set (has been assigned a value) and false otherwise */
  public boolean isSetComAllNatureText() {
    return this.comAllNatureText != null;
  }

  public void setComAllNatureTextIsSet(boolean value) {
    if (!value) {
      this.comAllNatureText = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CusDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public CusDTO setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getProjectPublicManId() {
    return this.projectPublicManId;
  }

  public CusDTO setProjectPublicManId(int projectPublicManId) {
    this.projectPublicManId = projectPublicManId;
    setProjectPublicManIdIsSet(true);
    return this;
  }

  public void unsetProjectPublicManId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTPUBLICMANID_ISSET_ID);
  }

  /** Returns true if field projectPublicManId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectPublicManId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTPUBLICMANID_ISSET_ID);
  }

  public void setProjectPublicManIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTPUBLICMANID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CusDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public double getProportionProperty() {
    return this.proportionProperty;
  }

  public CusDTO setProportionProperty(double proportionProperty) {
    this.proportionProperty = proportionProperty;
    setProportionPropertyIsSet(true);
    return this;
  }

  public void unsetProportionProperty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPORTIONPROPERTY_ISSET_ID);
  }

  /** Returns true if field proportionProperty is set (has been assigned a value) and false otherwise */
  public boolean isSetProportionProperty() {
    return EncodingUtils.testBit(__isset_bitfield, __PROPORTIONPROPERTY_ISSET_ID);
  }

  public void setProportionPropertyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPORTIONPROPERTY_ISSET_ID, value);
  }

  public String getLiveAddr() {
    return this.liveAddr;
  }

  public CusDTO setLiveAddr(String liveAddr) {
    this.liveAddr = liveAddr;
    return this;
  }

  public void unsetLiveAddr() {
    this.liveAddr = null;
  }

  /** Returns true if field liveAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveAddr() {
    return this.liveAddr != null;
  }

  public void setLiveAddrIsSet(boolean value) {
    if (!value) {
      this.liveAddr = null;
    }
  }

  public String getCensusAddr() {
    return this.censusAddr;
  }

  public CusDTO setCensusAddr(String censusAddr) {
    this.censusAddr = censusAddr;
    return this;
  }

  public void unsetCensusAddr() {
    this.censusAddr = null;
  }

  /** Returns true if field censusAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetCensusAddr() {
    return this.censusAddr != null;
  }

  public void setCensusAddrIsSet(boolean value) {
    if (!value) {
      this.censusAddr = null;
    }
  }

  public String getCertAddr() {
    return this.certAddr;
  }

  public CusDTO setCertAddr(String certAddr) {
    this.certAddr = certAddr;
    return this;
  }

  public void unsetCertAddr() {
    this.certAddr = null;
  }

  /** Returns true if field certAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetCertAddr() {
    return this.certAddr != null;
  }

  public void setCertAddrIsSet(boolean value) {
    if (!value) {
      this.certAddr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case CPY_NAME:
      if (value == null) {
        unsetCpyName();
      } else {
        setCpyName((String)value);
      }
      break;

    case CPY_ABBR_NAME:
      if (value == null) {
        unsetCpyAbbrName();
      } else {
        setCpyAbbrName((String)value);
      }
      break;

    case BUS_LIC_CERT:
      if (value == null) {
        unsetBusLicCert();
      } else {
        setBusLicCert((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case CUS_TELEPHONE:
      if (value == null) {
        unsetCusTelephone();
      } else {
        setCusTelephone((String)value);
      }
      break;

    case COMM_ADDR:
      if (value == null) {
        unsetCommAddr();
      } else {
        setCommAddr((String)value);
      }
      break;

    case CHINA_NAME:
      if (value == null) {
        unsetChinaName();
      } else {
        setChinaName((String)value);
      }
      break;

    case SEX_NAME:
      if (value == null) {
        unsetSexName();
      } else {
        setSexName((String)value);
      }
      break;

    case CERT_TYPE_NAME:
      if (value == null) {
        unsetCertTypeName();
      } else {
        setCertTypeName((String)value);
      }
      break;

    case CERT_NUMBER:
      if (value == null) {
        unsetCertNumber();
      } else {
        setCertNumber((String)value);
      }
      break;

    case PER_TELEPHONE:
      if (value == null) {
        unsetPerTelephone();
      } else {
        setPerTelephone((String)value);
      }
      break;

    case CUS_MAIL:
      if (value == null) {
        unsetCusMail();
      } else {
        setCusMail((String)value);
      }
      break;

    case CUS_REG_MONEY:
      if (value == null) {
        unsetCusRegMoney();
      } else {
        setCusRegMoney((Double)value);
      }
      break;

    case CUS_FOUND_DATE:
      if (value == null) {
        unsetCusFoundDate();
      } else {
        setCusFoundDate((String)value);
      }
      break;

    case CUS_STATUS:
      if (value == null) {
        unsetCusStatus();
      } else {
        setCusStatus((Integer)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case CUR_TYPE:
      if (value == null) {
        unsetCurType();
      } else {
        setCurType((String)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((Integer)value);
      }
      break;

    case MARR_NAME:
      if (value == null) {
        unsetMarrName();
      } else {
        setMarrName((String)value);
      }
      break;

    case COMM_CODE:
      if (value == null) {
        unsetCommCode();
      } else {
        setCommCode((String)value);
      }
      break;

    case CERT_TYPE:
      if (value == null) {
        unsetCertType();
      } else {
        setCertType((Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case WORK_UNIT:
      if (value == null) {
        unsetWorkUnit();
      } else {
        setWorkUnit((String)value);
      }
      break;

    case PER_STATUS:
      if (value == null) {
        unsetPerStatus();
      } else {
        setPerStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CUS_STATUS_VAL:
      if (value == null) {
        unsetCusStatusVal();
      } else {
        setCusStatusVal((String)value);
      }
      break;

    case MAIL:
      if (value == null) {
        unsetMail();
      } else {
        setMail((String)value);
      }
      break;

    case RELATION_VAL:
      if (value == null) {
        unsetRelationVal();
      } else {
        setRelationVal((Integer)value);
      }
      break;

    case RELATION_TEXT:
      if (value == null) {
        unsetRelationText();
      } else {
        setRelationText((String)value);
      }
      break;

    case WORK_SERVICE:
      if (value == null) {
        unsetWorkService();
      } else {
        setWorkService((String)value);
      }
      break;

    case MONTH_INCOME:
      if (value == null) {
        unsetMonthIncome();
      } else {
        setMonthIncome((Double)value);
      }
      break;

    case COM_ALL_NATURE_TEXT:
      if (value == null) {
        unsetComAllNatureText();
      } else {
        setComAllNatureText((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case PROJECT_PUBLIC_MAN_ID:
      if (value == null) {
        unsetProjectPublicManId();
      } else {
        setProjectPublicManId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PROPORTION_PROPERTY:
      if (value == null) {
        unsetProportionProperty();
      } else {
        setProportionProperty((Double)value);
      }
      break;

    case LIVE_ADDR:
      if (value == null) {
        unsetLiveAddr();
      } else {
        setLiveAddr((String)value);
      }
      break;

    case CENSUS_ADDR:
      if (value == null) {
        unsetCensusAddr();
      } else {
        setCensusAddr((String)value);
      }
      break;

    case CERT_ADDR:
      if (value == null) {
        unsetCertAddr();
      } else {
        setCertAddr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case CPY_NAME:
      return getCpyName();

    case CPY_ABBR_NAME:
      return getCpyAbbrName();

    case BUS_LIC_CERT:
      return getBusLicCert();

    case ORG_CODE:
      return getOrgCode();

    case CUS_TELEPHONE:
      return getCusTelephone();

    case COMM_ADDR:
      return getCommAddr();

    case CHINA_NAME:
      return getChinaName();

    case SEX_NAME:
      return getSexName();

    case CERT_TYPE_NAME:
      return getCertTypeName();

    case CERT_NUMBER:
      return getCertNumber();

    case PER_TELEPHONE:
      return getPerTelephone();

    case CUS_MAIL:
      return getCusMail();

    case CUS_REG_MONEY:
      return Double.valueOf(getCusRegMoney());

    case CUS_FOUND_DATE:
      return getCusFoundDate();

    case CUS_STATUS:
      return Integer.valueOf(getCusStatus());

    case REAL_NAME:
      return getRealName();

    case CUR_TYPE:
      return getCurType();

    case ECO_TRADE:
      return Integer.valueOf(getEcoTrade());

    case MARR_NAME:
      return getMarrName();

    case COMM_CODE:
      return getCommCode();

    case CERT_TYPE:
      return Integer.valueOf(getCertType());

    case SEX:
      return Integer.valueOf(getSex());

    case WORK_UNIT:
      return getWorkUnit();

    case PER_STATUS:
      return Integer.valueOf(getPerStatus());

    case REMARK:
      return getRemark();

    case CUS_STATUS_VAL:
      return getCusStatusVal();

    case MAIL:
      return getMail();

    case RELATION_VAL:
      return Integer.valueOf(getRelationVal());

    case RELATION_TEXT:
      return getRelationText();

    case WORK_SERVICE:
      return getWorkService();

    case MONTH_INCOME:
      return Double.valueOf(getMonthIncome());

    case COM_ALL_NATURE_TEXT:
      return getComAllNatureText();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case PROJECT_PUBLIC_MAN_ID:
      return Integer.valueOf(getProjectPublicManId());

    case USER_IDS:
      return getUserIds();

    case PROPORTION_PROPERTY:
      return Double.valueOf(getProportionProperty());

    case LIVE_ADDR:
      return getLiveAddr();

    case CENSUS_ADDR:
      return getCensusAddr();

    case CERT_ADDR:
      return getCertAddr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACCT_ID:
      return isSetAcctId();
    case CPY_NAME:
      return isSetCpyName();
    case CPY_ABBR_NAME:
      return isSetCpyAbbrName();
    case BUS_LIC_CERT:
      return isSetBusLicCert();
    case ORG_CODE:
      return isSetOrgCode();
    case CUS_TELEPHONE:
      return isSetCusTelephone();
    case COMM_ADDR:
      return isSetCommAddr();
    case CHINA_NAME:
      return isSetChinaName();
    case SEX_NAME:
      return isSetSexName();
    case CERT_TYPE_NAME:
      return isSetCertTypeName();
    case CERT_NUMBER:
      return isSetCertNumber();
    case PER_TELEPHONE:
      return isSetPerTelephone();
    case CUS_MAIL:
      return isSetCusMail();
    case CUS_REG_MONEY:
      return isSetCusRegMoney();
    case CUS_FOUND_DATE:
      return isSetCusFoundDate();
    case CUS_STATUS:
      return isSetCusStatus();
    case REAL_NAME:
      return isSetRealName();
    case CUR_TYPE:
      return isSetCurType();
    case ECO_TRADE:
      return isSetEcoTrade();
    case MARR_NAME:
      return isSetMarrName();
    case COMM_CODE:
      return isSetCommCode();
    case CERT_TYPE:
      return isSetCertType();
    case SEX:
      return isSetSex();
    case WORK_UNIT:
      return isSetWorkUnit();
    case PER_STATUS:
      return isSetPerStatus();
    case REMARK:
      return isSetRemark();
    case CUS_STATUS_VAL:
      return isSetCusStatusVal();
    case MAIL:
      return isSetMail();
    case RELATION_VAL:
      return isSetRelationVal();
    case RELATION_TEXT:
      return isSetRelationText();
    case WORK_SERVICE:
      return isSetWorkService();
    case MONTH_INCOME:
      return isSetMonthIncome();
    case COM_ALL_NATURE_TEXT:
      return isSetComAllNatureText();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_ID:
      return isSetUserId();
    case PROJECT_PUBLIC_MAN_ID:
      return isSetProjectPublicManId();
    case USER_IDS:
      return isSetUserIds();
    case PROPORTION_PROPERTY:
      return isSetProportionProperty();
    case LIVE_ADDR:
      return isSetLiveAddr();
    case CENSUS_ADDR:
      return isSetCensusAddr();
    case CERT_ADDR:
      return isSetCertAddr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusDTO)
      return this.equals((CusDTO)that);
    return false;
  }

  public boolean equals(CusDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_cpyName = true && this.isSetCpyName();
    boolean that_present_cpyName = true && that.isSetCpyName();
    if (this_present_cpyName || that_present_cpyName) {
      if (!(this_present_cpyName && that_present_cpyName))
        return false;
      if (!this.cpyName.equals(that.cpyName))
        return false;
    }

    boolean this_present_cpyAbbrName = true && this.isSetCpyAbbrName();
    boolean that_present_cpyAbbrName = true && that.isSetCpyAbbrName();
    if (this_present_cpyAbbrName || that_present_cpyAbbrName) {
      if (!(this_present_cpyAbbrName && that_present_cpyAbbrName))
        return false;
      if (!this.cpyAbbrName.equals(that.cpyAbbrName))
        return false;
    }

    boolean this_present_busLicCert = true && this.isSetBusLicCert();
    boolean that_present_busLicCert = true && that.isSetBusLicCert();
    if (this_present_busLicCert || that_present_busLicCert) {
      if (!(this_present_busLicCert && that_present_busLicCert))
        return false;
      if (!this.busLicCert.equals(that.busLicCert))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_cusTelephone = true && this.isSetCusTelephone();
    boolean that_present_cusTelephone = true && that.isSetCusTelephone();
    if (this_present_cusTelephone || that_present_cusTelephone) {
      if (!(this_present_cusTelephone && that_present_cusTelephone))
        return false;
      if (!this.cusTelephone.equals(that.cusTelephone))
        return false;
    }

    boolean this_present_commAddr = true && this.isSetCommAddr();
    boolean that_present_commAddr = true && that.isSetCommAddr();
    if (this_present_commAddr || that_present_commAddr) {
      if (!(this_present_commAddr && that_present_commAddr))
        return false;
      if (!this.commAddr.equals(that.commAddr))
        return false;
    }

    boolean this_present_chinaName = true && this.isSetChinaName();
    boolean that_present_chinaName = true && that.isSetChinaName();
    if (this_present_chinaName || that_present_chinaName) {
      if (!(this_present_chinaName && that_present_chinaName))
        return false;
      if (!this.chinaName.equals(that.chinaName))
        return false;
    }

    boolean this_present_sexName = true && this.isSetSexName();
    boolean that_present_sexName = true && that.isSetSexName();
    if (this_present_sexName || that_present_sexName) {
      if (!(this_present_sexName && that_present_sexName))
        return false;
      if (!this.sexName.equals(that.sexName))
        return false;
    }

    boolean this_present_certTypeName = true && this.isSetCertTypeName();
    boolean that_present_certTypeName = true && that.isSetCertTypeName();
    if (this_present_certTypeName || that_present_certTypeName) {
      if (!(this_present_certTypeName && that_present_certTypeName))
        return false;
      if (!this.certTypeName.equals(that.certTypeName))
        return false;
    }

    boolean this_present_certNumber = true && this.isSetCertNumber();
    boolean that_present_certNumber = true && that.isSetCertNumber();
    if (this_present_certNumber || that_present_certNumber) {
      if (!(this_present_certNumber && that_present_certNumber))
        return false;
      if (!this.certNumber.equals(that.certNumber))
        return false;
    }

    boolean this_present_perTelephone = true && this.isSetPerTelephone();
    boolean that_present_perTelephone = true && that.isSetPerTelephone();
    if (this_present_perTelephone || that_present_perTelephone) {
      if (!(this_present_perTelephone && that_present_perTelephone))
        return false;
      if (!this.perTelephone.equals(that.perTelephone))
        return false;
    }

    boolean this_present_cusMail = true && this.isSetCusMail();
    boolean that_present_cusMail = true && that.isSetCusMail();
    if (this_present_cusMail || that_present_cusMail) {
      if (!(this_present_cusMail && that_present_cusMail))
        return false;
      if (!this.cusMail.equals(that.cusMail))
        return false;
    }

    boolean this_present_cusRegMoney = true;
    boolean that_present_cusRegMoney = true;
    if (this_present_cusRegMoney || that_present_cusRegMoney) {
      if (!(this_present_cusRegMoney && that_present_cusRegMoney))
        return false;
      if (this.cusRegMoney != that.cusRegMoney)
        return false;
    }

    boolean this_present_cusFoundDate = true && this.isSetCusFoundDate();
    boolean that_present_cusFoundDate = true && that.isSetCusFoundDate();
    if (this_present_cusFoundDate || that_present_cusFoundDate) {
      if (!(this_present_cusFoundDate && that_present_cusFoundDate))
        return false;
      if (!this.cusFoundDate.equals(that.cusFoundDate))
        return false;
    }

    boolean this_present_cusStatus = true;
    boolean that_present_cusStatus = true;
    if (this_present_cusStatus || that_present_cusStatus) {
      if (!(this_present_cusStatus && that_present_cusStatus))
        return false;
      if (this.cusStatus != that.cusStatus)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_curType = true && this.isSetCurType();
    boolean that_present_curType = true && that.isSetCurType();
    if (this_present_curType || that_present_curType) {
      if (!(this_present_curType && that_present_curType))
        return false;
      if (!this.curType.equals(that.curType))
        return false;
    }

    boolean this_present_ecoTrade = true;
    boolean that_present_ecoTrade = true;
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (this.ecoTrade != that.ecoTrade)
        return false;
    }

    boolean this_present_marrName = true && this.isSetMarrName();
    boolean that_present_marrName = true && that.isSetMarrName();
    if (this_present_marrName || that_present_marrName) {
      if (!(this_present_marrName && that_present_marrName))
        return false;
      if (!this.marrName.equals(that.marrName))
        return false;
    }

    boolean this_present_commCode = true && this.isSetCommCode();
    boolean that_present_commCode = true && that.isSetCommCode();
    if (this_present_commCode || that_present_commCode) {
      if (!(this_present_commCode && that_present_commCode))
        return false;
      if (!this.commCode.equals(that.commCode))
        return false;
    }

    boolean this_present_certType = true;
    boolean that_present_certType = true;
    if (this_present_certType || that_present_certType) {
      if (!(this_present_certType && that_present_certType))
        return false;
      if (this.certType != that.certType)
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_workUnit = true && this.isSetWorkUnit();
    boolean that_present_workUnit = true && that.isSetWorkUnit();
    if (this_present_workUnit || that_present_workUnit) {
      if (!(this_present_workUnit && that_present_workUnit))
        return false;
      if (!this.workUnit.equals(that.workUnit))
        return false;
    }

    boolean this_present_perStatus = true;
    boolean that_present_perStatus = true;
    if (this_present_perStatus || that_present_perStatus) {
      if (!(this_present_perStatus && that_present_perStatus))
        return false;
      if (this.perStatus != that.perStatus)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_cusStatusVal = true && this.isSetCusStatusVal();
    boolean that_present_cusStatusVal = true && that.isSetCusStatusVal();
    if (this_present_cusStatusVal || that_present_cusStatusVal) {
      if (!(this_present_cusStatusVal && that_present_cusStatusVal))
        return false;
      if (!this.cusStatusVal.equals(that.cusStatusVal))
        return false;
    }

    boolean this_present_mail = true && this.isSetMail();
    boolean that_present_mail = true && that.isSetMail();
    if (this_present_mail || that_present_mail) {
      if (!(this_present_mail && that_present_mail))
        return false;
      if (!this.mail.equals(that.mail))
        return false;
    }

    boolean this_present_relationVal = true;
    boolean that_present_relationVal = true;
    if (this_present_relationVal || that_present_relationVal) {
      if (!(this_present_relationVal && that_present_relationVal))
        return false;
      if (this.relationVal != that.relationVal)
        return false;
    }

    boolean this_present_relationText = true && this.isSetRelationText();
    boolean that_present_relationText = true && that.isSetRelationText();
    if (this_present_relationText || that_present_relationText) {
      if (!(this_present_relationText && that_present_relationText))
        return false;
      if (!this.relationText.equals(that.relationText))
        return false;
    }

    boolean this_present_workService = true && this.isSetWorkService();
    boolean that_present_workService = true && that.isSetWorkService();
    if (this_present_workService || that_present_workService) {
      if (!(this_present_workService && that_present_workService))
        return false;
      if (!this.workService.equals(that.workService))
        return false;
    }

    boolean this_present_monthIncome = true;
    boolean that_present_monthIncome = true;
    if (this_present_monthIncome || that_present_monthIncome) {
      if (!(this_present_monthIncome && that_present_monthIncome))
        return false;
      if (this.monthIncome != that.monthIncome)
        return false;
    }

    boolean this_present_comAllNatureText = true && this.isSetComAllNatureText();
    boolean that_present_comAllNatureText = true && that.isSetComAllNatureText();
    if (this_present_comAllNatureText || that_present_comAllNatureText) {
      if (!(this_present_comAllNatureText && that_present_comAllNatureText))
        return false;
      if (!this.comAllNatureText.equals(that.comAllNatureText))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_projectPublicManId = true;
    boolean that_present_projectPublicManId = true;
    if (this_present_projectPublicManId || that_present_projectPublicManId) {
      if (!(this_present_projectPublicManId && that_present_projectPublicManId))
        return false;
      if (this.projectPublicManId != that.projectPublicManId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_proportionProperty = true;
    boolean that_present_proportionProperty = true;
    if (this_present_proportionProperty || that_present_proportionProperty) {
      if (!(this_present_proportionProperty && that_present_proportionProperty))
        return false;
      if (this.proportionProperty != that.proportionProperty)
        return false;
    }

    boolean this_present_liveAddr = true && this.isSetLiveAddr();
    boolean that_present_liveAddr = true && that.isSetLiveAddr();
    if (this_present_liveAddr || that_present_liveAddr) {
      if (!(this_present_liveAddr && that_present_liveAddr))
        return false;
      if (!this.liveAddr.equals(that.liveAddr))
        return false;
    }

    boolean this_present_censusAddr = true && this.isSetCensusAddr();
    boolean that_present_censusAddr = true && that.isSetCensusAddr();
    if (this_present_censusAddr || that_present_censusAddr) {
      if (!(this_present_censusAddr && that_present_censusAddr))
        return false;
      if (!this.censusAddr.equals(that.censusAddr))
        return false;
    }

    boolean this_present_certAddr = true && this.isSetCertAddr();
    boolean that_present_certAddr = true && that.isSetCertAddr();
    if (this_present_certAddr || that_present_certAddr) {
      if (!(this_present_certAddr && that_present_certAddr))
        return false;
      if (!this.certAddr.equals(that.certAddr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_cpyName = true && (isSetCpyName());
    list.add(present_cpyName);
    if (present_cpyName)
      list.add(cpyName);

    boolean present_cpyAbbrName = true && (isSetCpyAbbrName());
    list.add(present_cpyAbbrName);
    if (present_cpyAbbrName)
      list.add(cpyAbbrName);

    boolean present_busLicCert = true && (isSetBusLicCert());
    list.add(present_busLicCert);
    if (present_busLicCert)
      list.add(busLicCert);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_cusTelephone = true && (isSetCusTelephone());
    list.add(present_cusTelephone);
    if (present_cusTelephone)
      list.add(cusTelephone);

    boolean present_commAddr = true && (isSetCommAddr());
    list.add(present_commAddr);
    if (present_commAddr)
      list.add(commAddr);

    boolean present_chinaName = true && (isSetChinaName());
    list.add(present_chinaName);
    if (present_chinaName)
      list.add(chinaName);

    boolean present_sexName = true && (isSetSexName());
    list.add(present_sexName);
    if (present_sexName)
      list.add(sexName);

    boolean present_certTypeName = true && (isSetCertTypeName());
    list.add(present_certTypeName);
    if (present_certTypeName)
      list.add(certTypeName);

    boolean present_certNumber = true && (isSetCertNumber());
    list.add(present_certNumber);
    if (present_certNumber)
      list.add(certNumber);

    boolean present_perTelephone = true && (isSetPerTelephone());
    list.add(present_perTelephone);
    if (present_perTelephone)
      list.add(perTelephone);

    boolean present_cusMail = true && (isSetCusMail());
    list.add(present_cusMail);
    if (present_cusMail)
      list.add(cusMail);

    boolean present_cusRegMoney = true;
    list.add(present_cusRegMoney);
    if (present_cusRegMoney)
      list.add(cusRegMoney);

    boolean present_cusFoundDate = true && (isSetCusFoundDate());
    list.add(present_cusFoundDate);
    if (present_cusFoundDate)
      list.add(cusFoundDate);

    boolean present_cusStatus = true;
    list.add(present_cusStatus);
    if (present_cusStatus)
      list.add(cusStatus);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_curType = true && (isSetCurType());
    list.add(present_curType);
    if (present_curType)
      list.add(curType);

    boolean present_ecoTrade = true;
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_marrName = true && (isSetMarrName());
    list.add(present_marrName);
    if (present_marrName)
      list.add(marrName);

    boolean present_commCode = true && (isSetCommCode());
    list.add(present_commCode);
    if (present_commCode)
      list.add(commCode);

    boolean present_certType = true;
    list.add(present_certType);
    if (present_certType)
      list.add(certType);

    boolean present_sex = true;
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_workUnit = true && (isSetWorkUnit());
    list.add(present_workUnit);
    if (present_workUnit)
      list.add(workUnit);

    boolean present_perStatus = true;
    list.add(present_perStatus);
    if (present_perStatus)
      list.add(perStatus);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_cusStatusVal = true && (isSetCusStatusVal());
    list.add(present_cusStatusVal);
    if (present_cusStatusVal)
      list.add(cusStatusVal);

    boolean present_mail = true && (isSetMail());
    list.add(present_mail);
    if (present_mail)
      list.add(mail);

    boolean present_relationVal = true;
    list.add(present_relationVal);
    if (present_relationVal)
      list.add(relationVal);

    boolean present_relationText = true && (isSetRelationText());
    list.add(present_relationText);
    if (present_relationText)
      list.add(relationText);

    boolean present_workService = true && (isSetWorkService());
    list.add(present_workService);
    if (present_workService)
      list.add(workService);

    boolean present_monthIncome = true;
    list.add(present_monthIncome);
    if (present_monthIncome)
      list.add(monthIncome);

    boolean present_comAllNatureText = true && (isSetComAllNatureText());
    list.add(present_comAllNatureText);
    if (present_comAllNatureText)
      list.add(comAllNatureText);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_projectPublicManId = true;
    list.add(present_projectPublicManId);
    if (present_projectPublicManId)
      list.add(projectPublicManId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_proportionProperty = true;
    list.add(present_proportionProperty);
    if (present_proportionProperty)
      list.add(proportionProperty);

    boolean present_liveAddr = true && (isSetLiveAddr());
    list.add(present_liveAddr);
    if (present_liveAddr)
      list.add(liveAddr);

    boolean present_censusAddr = true && (isSetCensusAddr());
    list.add(present_censusAddr);
    if (present_censusAddr)
      list.add(censusAddr);

    boolean present_certAddr = true && (isSetCertAddr());
    list.add(present_certAddr);
    if (present_certAddr)
      list.add(certAddr);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpyName()).compareTo(other.isSetCpyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpyName, other.cpyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpyAbbrName()).compareTo(other.isSetCpyAbbrName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpyAbbrName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpyAbbrName, other.cpyAbbrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusLicCert()).compareTo(other.isSetBusLicCert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusLicCert()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busLicCert, other.busLicCert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusTelephone()).compareTo(other.isSetCusTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusTelephone, other.cusTelephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommAddr()).compareTo(other.isSetCommAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commAddr, other.commAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChinaName()).compareTo(other.isSetChinaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChinaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chinaName, other.chinaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSexName()).compareTo(other.isSetSexName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSexName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sexName, other.sexName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertTypeName()).compareTo(other.isSetCertTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certTypeName, other.certTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNumber()).compareTo(other.isSetCertNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNumber, other.certNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerTelephone()).compareTo(other.isSetPerTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perTelephone, other.perTelephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusMail()).compareTo(other.isSetCusMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusMail, other.cusMail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusRegMoney()).compareTo(other.isSetCusRegMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusRegMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusRegMoney, other.cusRegMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusFoundDate()).compareTo(other.isSetCusFoundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusFoundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusFoundDate, other.cusFoundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusStatus()).compareTo(other.isSetCusStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusStatus, other.cusStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurType()).compareTo(other.isSetCurType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curType, other.curType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarrName()).compareTo(other.isSetMarrName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarrName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marrName, other.marrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommCode()).compareTo(other.isSetCommCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commCode, other.commCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertType()).compareTo(other.isSetCertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certType, other.certType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkUnit()).compareTo(other.isSetWorkUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workUnit, other.workUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerStatus()).compareTo(other.isSetPerStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perStatus, other.perStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusStatusVal()).compareTo(other.isSetCusStatusVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusStatusVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusStatusVal, other.cusStatusVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMail()).compareTo(other.isSetMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mail, other.mail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationVal()).compareTo(other.isSetRelationVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationVal, other.relationVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelationText()).compareTo(other.isSetRelationText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationText, other.relationText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkService()).compareTo(other.isSetWorkService());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkService()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workService, other.workService);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthIncome()).compareTo(other.isSetMonthIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthIncome, other.monthIncome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComAllNatureText()).compareTo(other.isSetComAllNatureText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComAllNatureText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comAllNatureText, other.comAllNatureText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectPublicManId()).compareTo(other.isSetProjectPublicManId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectPublicManId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectPublicManId, other.projectPublicManId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProportionProperty()).compareTo(other.isSetProportionProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProportionProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proportionProperty, other.proportionProperty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveAddr()).compareTo(other.isSetLiveAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveAddr, other.liveAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCensusAddr()).compareTo(other.isSetCensusAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCensusAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.censusAddr, other.censusAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertAddr()).compareTo(other.isSetCertAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certAddr, other.certAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpyName:");
    if (this.cpyName == null) {
      sb.append("null");
    } else {
      sb.append(this.cpyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpyAbbrName:");
    if (this.cpyAbbrName == null) {
      sb.append("null");
    } else {
      sb.append(this.cpyAbbrName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busLicCert:");
    if (this.busLicCert == null) {
      sb.append("null");
    } else {
      sb.append(this.busLicCert);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusTelephone:");
    if (this.cusTelephone == null) {
      sb.append("null");
    } else {
      sb.append(this.cusTelephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commAddr:");
    if (this.commAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.commAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chinaName:");
    if (this.chinaName == null) {
      sb.append("null");
    } else {
      sb.append(this.chinaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sexName:");
    if (this.sexName == null) {
      sb.append("null");
    } else {
      sb.append(this.sexName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certTypeName:");
    if (this.certTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.certTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certNumber:");
    if (this.certNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.certNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("perTelephone:");
    if (this.perTelephone == null) {
      sb.append("null");
    } else {
      sb.append(this.perTelephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusMail:");
    if (this.cusMail == null) {
      sb.append("null");
    } else {
      sb.append(this.cusMail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusRegMoney:");
    sb.append(this.cusRegMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusFoundDate:");
    if (this.cusFoundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cusFoundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusStatus:");
    sb.append(this.cusStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curType:");
    if (this.curType == null) {
      sb.append("null");
    } else {
      sb.append(this.curType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    sb.append(this.ecoTrade);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marrName:");
    if (this.marrName == null) {
      sb.append("null");
    } else {
      sb.append(this.marrName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commCode:");
    if (this.commCode == null) {
      sb.append("null");
    } else {
      sb.append(this.commCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certType:");
    sb.append(this.certType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workUnit:");
    if (this.workUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.workUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("perStatus:");
    sb.append(this.perStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusStatusVal:");
    if (this.cusStatusVal == null) {
      sb.append("null");
    } else {
      sb.append(this.cusStatusVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mail:");
    if (this.mail == null) {
      sb.append("null");
    } else {
      sb.append(this.mail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationVal:");
    sb.append(this.relationVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relationText:");
    if (this.relationText == null) {
      sb.append("null");
    } else {
      sb.append(this.relationText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workService:");
    if (this.workService == null) {
      sb.append("null");
    } else {
      sb.append(this.workService);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthIncome:");
    sb.append(this.monthIncome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comAllNatureText:");
    if (this.comAllNatureText == null) {
      sb.append("null");
    } else {
      sb.append(this.comAllNatureText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectPublicManId:");
    sb.append(this.projectPublicManId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("proportionProperty:");
    sb.append(this.proportionProperty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveAddr:");
    if (this.liveAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.liveAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("censusAddr:");
    if (this.censusAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.censusAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certAddr:");
    if (this.certAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.certAddr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusDTOStandardSchemeFactory implements SchemeFactory {
    public CusDTOStandardScheme getScheme() {
      return new CusDTOStandardScheme();
    }
  }

  private static class CusDTOStandardScheme extends StandardScheme<CusDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpyName = iprot.readString();
              struct.setCpyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPY_ABBR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpyAbbrName = iprot.readString();
              struct.setCpyAbbrNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUS_LIC_CERT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busLicCert = iprot.readString();
              struct.setBusLicCertIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CUS_TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusTelephone = iprot.readString();
              struct.setCusTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMM_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commAddr = iprot.readString();
              struct.setCommAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHINA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chinaName = iprot.readString();
              struct.setChinaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SEX_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sexName = iprot.readString();
              struct.setSexNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CERT_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certTypeName = iprot.readString();
              struct.setCertTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CERT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNumber = iprot.readString();
              struct.setCertNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PER_TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.perTelephone = iprot.readString();
              struct.setPerTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CUS_MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusMail = iprot.readString();
              struct.setCusMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CUS_REG_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cusRegMoney = iprot.readDouble();
              struct.setCusRegMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CUS_FOUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusFoundDate = iprot.readString();
              struct.setCusFoundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CUS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusStatus = iprot.readI32();
              struct.setCusStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CUR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.curType = iprot.readString();
              struct.setCurTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecoTrade = iprot.readI32();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MARR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marrName = iprot.readString();
              struct.setMarrNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // COMM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commCode = iprot.readString();
              struct.setCommCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.certType = iprot.readI32();
              struct.setCertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // WORK_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workUnit = iprot.readString();
              struct.setWorkUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perStatus = iprot.readI32();
              struct.setPerStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CUS_STATUS_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusStatusVal = iprot.readString();
              struct.setCusStatusValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mail = iprot.readString();
              struct.setMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // RELATION_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relationVal = iprot.readI32();
              struct.setRelationValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // RELATION_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relationText = iprot.readString();
              struct.setRelationTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // WORK_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workService = iprot.readString();
              struct.setWorkServiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // MONTH_INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthIncome = iprot.readDouble();
              struct.setMonthIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // COM_ALL_NATURE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comAllNatureText = iprot.readString();
              struct.setComAllNatureTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // PROJECT_PUBLIC_MAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectPublicManId = iprot.readI32();
              struct.setProjectPublicManIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list168.size);
                int _elem169;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = iprot.readI32();
                  struct.userIds.add(_elem169);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // PROPORTION_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.proportionProperty = iprot.readDouble();
              struct.setProportionPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LIVE_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveAddr = iprot.readString();
              struct.setLiveAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // CENSUS_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.censusAddr = iprot.readString();
              struct.setCensusAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CERT_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certAddr = iprot.readString();
              struct.setCertAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      if (struct.cpyName != null) {
        oprot.writeFieldBegin(CPY_NAME_FIELD_DESC);
        oprot.writeString(struct.cpyName);
        oprot.writeFieldEnd();
      }
      if (struct.cpyAbbrName != null) {
        oprot.writeFieldBegin(CPY_ABBR_NAME_FIELD_DESC);
        oprot.writeString(struct.cpyAbbrName);
        oprot.writeFieldEnd();
      }
      if (struct.busLicCert != null) {
        oprot.writeFieldBegin(BUS_LIC_CERT_FIELD_DESC);
        oprot.writeString(struct.busLicCert);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.cusTelephone != null) {
        oprot.writeFieldBegin(CUS_TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.cusTelephone);
        oprot.writeFieldEnd();
      }
      if (struct.commAddr != null) {
        oprot.writeFieldBegin(COMM_ADDR_FIELD_DESC);
        oprot.writeString(struct.commAddr);
        oprot.writeFieldEnd();
      }
      if (struct.chinaName != null) {
        oprot.writeFieldBegin(CHINA_NAME_FIELD_DESC);
        oprot.writeString(struct.chinaName);
        oprot.writeFieldEnd();
      }
      if (struct.sexName != null) {
        oprot.writeFieldBegin(SEX_NAME_FIELD_DESC);
        oprot.writeString(struct.sexName);
        oprot.writeFieldEnd();
      }
      if (struct.certTypeName != null) {
        oprot.writeFieldBegin(CERT_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.certTypeName);
        oprot.writeFieldEnd();
      }
      if (struct.certNumber != null) {
        oprot.writeFieldBegin(CERT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.certNumber);
        oprot.writeFieldEnd();
      }
      if (struct.perTelephone != null) {
        oprot.writeFieldBegin(PER_TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.perTelephone);
        oprot.writeFieldEnd();
      }
      if (struct.cusMail != null) {
        oprot.writeFieldBegin(CUS_MAIL_FIELD_DESC);
        oprot.writeString(struct.cusMail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_REG_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.cusRegMoney);
      oprot.writeFieldEnd();
      if (struct.cusFoundDate != null) {
        oprot.writeFieldBegin(CUS_FOUND_DATE_FIELD_DESC);
        oprot.writeString(struct.cusFoundDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_STATUS_FIELD_DESC);
      oprot.writeI32(struct.cusStatus);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.curType != null) {
        oprot.writeFieldBegin(CUR_TYPE_FIELD_DESC);
        oprot.writeString(struct.curType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
      oprot.writeI32(struct.ecoTrade);
      oprot.writeFieldEnd();
      if (struct.marrName != null) {
        oprot.writeFieldBegin(MARR_NAME_FIELD_DESC);
        oprot.writeString(struct.marrName);
        oprot.writeFieldEnd();
      }
      if (struct.commCode != null) {
        oprot.writeFieldBegin(COMM_CODE_FIELD_DESC);
        oprot.writeString(struct.commCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CERT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.certType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      if (struct.workUnit != null) {
        oprot.writeFieldBegin(WORK_UNIT_FIELD_DESC);
        oprot.writeString(struct.workUnit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PER_STATUS_FIELD_DESC);
      oprot.writeI32(struct.perStatus);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.cusStatusVal != null) {
        oprot.writeFieldBegin(CUS_STATUS_VAL_FIELD_DESC);
        oprot.writeString(struct.cusStatusVal);
        oprot.writeFieldEnd();
      }
      if (struct.mail != null) {
        oprot.writeFieldBegin(MAIL_FIELD_DESC);
        oprot.writeString(struct.mail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELATION_VAL_FIELD_DESC);
      oprot.writeI32(struct.relationVal);
      oprot.writeFieldEnd();
      if (struct.relationText != null) {
        oprot.writeFieldBegin(RELATION_TEXT_FIELD_DESC);
        oprot.writeString(struct.relationText);
        oprot.writeFieldEnd();
      }
      if (struct.workService != null) {
        oprot.writeFieldBegin(WORK_SERVICE_FIELD_DESC);
        oprot.writeString(struct.workService);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONTH_INCOME_FIELD_DESC);
      oprot.writeDouble(struct.monthIncome);
      oprot.writeFieldEnd();
      if (struct.comAllNatureText != null) {
        oprot.writeFieldBegin(COM_ALL_NATURE_TEXT_FIELD_DESC);
        oprot.writeString(struct.comAllNatureText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_PUBLIC_MAN_ID_FIELD_DESC);
      oprot.writeI32(struct.projectPublicManId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter171 : struct.userIds)
          {
            oprot.writeI32(_iter171);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROPORTION_PROPERTY_FIELD_DESC);
      oprot.writeDouble(struct.proportionProperty);
      oprot.writeFieldEnd();
      if (struct.liveAddr != null) {
        oprot.writeFieldBegin(LIVE_ADDR_FIELD_DESC);
        oprot.writeString(struct.liveAddr);
        oprot.writeFieldEnd();
      }
      if (struct.censusAddr != null) {
        oprot.writeFieldBegin(CENSUS_ADDR_FIELD_DESC);
        oprot.writeString(struct.censusAddr);
        oprot.writeFieldEnd();
      }
      if (struct.certAddr != null) {
        oprot.writeFieldBegin(CERT_ADDR_FIELD_DESC);
        oprot.writeString(struct.certAddr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusDTOTupleSchemeFactory implements SchemeFactory {
    public CusDTOTupleScheme getScheme() {
      return new CusDTOTupleScheme();
    }
  }

  private static class CusDTOTupleScheme extends TupleScheme<CusDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAcctId()) {
        optionals.set(1);
      }
      if (struct.isSetCpyName()) {
        optionals.set(2);
      }
      if (struct.isSetCpyAbbrName()) {
        optionals.set(3);
      }
      if (struct.isSetBusLicCert()) {
        optionals.set(4);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(5);
      }
      if (struct.isSetCusTelephone()) {
        optionals.set(6);
      }
      if (struct.isSetCommAddr()) {
        optionals.set(7);
      }
      if (struct.isSetChinaName()) {
        optionals.set(8);
      }
      if (struct.isSetSexName()) {
        optionals.set(9);
      }
      if (struct.isSetCertTypeName()) {
        optionals.set(10);
      }
      if (struct.isSetCertNumber()) {
        optionals.set(11);
      }
      if (struct.isSetPerTelephone()) {
        optionals.set(12);
      }
      if (struct.isSetCusMail()) {
        optionals.set(13);
      }
      if (struct.isSetCusRegMoney()) {
        optionals.set(14);
      }
      if (struct.isSetCusFoundDate()) {
        optionals.set(15);
      }
      if (struct.isSetCusStatus()) {
        optionals.set(16);
      }
      if (struct.isSetRealName()) {
        optionals.set(17);
      }
      if (struct.isSetCurType()) {
        optionals.set(18);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(19);
      }
      if (struct.isSetMarrName()) {
        optionals.set(20);
      }
      if (struct.isSetCommCode()) {
        optionals.set(21);
      }
      if (struct.isSetCertType()) {
        optionals.set(22);
      }
      if (struct.isSetSex()) {
        optionals.set(23);
      }
      if (struct.isSetWorkUnit()) {
        optionals.set(24);
      }
      if (struct.isSetPerStatus()) {
        optionals.set(25);
      }
      if (struct.isSetRemark()) {
        optionals.set(26);
      }
      if (struct.isSetCusStatusVal()) {
        optionals.set(27);
      }
      if (struct.isSetMail()) {
        optionals.set(28);
      }
      if (struct.isSetRelationVal()) {
        optionals.set(29);
      }
      if (struct.isSetRelationText()) {
        optionals.set(30);
      }
      if (struct.isSetWorkService()) {
        optionals.set(31);
      }
      if (struct.isSetMonthIncome()) {
        optionals.set(32);
      }
      if (struct.isSetComAllNatureText()) {
        optionals.set(33);
      }
      if (struct.isSetPage()) {
        optionals.set(34);
      }
      if (struct.isSetRows()) {
        optionals.set(35);
      }
      if (struct.isSetUserId()) {
        optionals.set(36);
      }
      if (struct.isSetProjectPublicManId()) {
        optionals.set(37);
      }
      if (struct.isSetUserIds()) {
        optionals.set(38);
      }
      if (struct.isSetProportionProperty()) {
        optionals.set(39);
      }
      if (struct.isSetLiveAddr()) {
        optionals.set(40);
      }
      if (struct.isSetCensusAddr()) {
        optionals.set(41);
      }
      if (struct.isSetCertAddr()) {
        optionals.set(42);
      }
      oprot.writeBitSet(optionals, 43);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetCpyName()) {
        oprot.writeString(struct.cpyName);
      }
      if (struct.isSetCpyAbbrName()) {
        oprot.writeString(struct.cpyAbbrName);
      }
      if (struct.isSetBusLicCert()) {
        oprot.writeString(struct.busLicCert);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetCusTelephone()) {
        oprot.writeString(struct.cusTelephone);
      }
      if (struct.isSetCommAddr()) {
        oprot.writeString(struct.commAddr);
      }
      if (struct.isSetChinaName()) {
        oprot.writeString(struct.chinaName);
      }
      if (struct.isSetSexName()) {
        oprot.writeString(struct.sexName);
      }
      if (struct.isSetCertTypeName()) {
        oprot.writeString(struct.certTypeName);
      }
      if (struct.isSetCertNumber()) {
        oprot.writeString(struct.certNumber);
      }
      if (struct.isSetPerTelephone()) {
        oprot.writeString(struct.perTelephone);
      }
      if (struct.isSetCusMail()) {
        oprot.writeString(struct.cusMail);
      }
      if (struct.isSetCusRegMoney()) {
        oprot.writeDouble(struct.cusRegMoney);
      }
      if (struct.isSetCusFoundDate()) {
        oprot.writeString(struct.cusFoundDate);
      }
      if (struct.isSetCusStatus()) {
        oprot.writeI32(struct.cusStatus);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetCurType()) {
        oprot.writeString(struct.curType);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeI32(struct.ecoTrade);
      }
      if (struct.isSetMarrName()) {
        oprot.writeString(struct.marrName);
      }
      if (struct.isSetCommCode()) {
        oprot.writeString(struct.commCode);
      }
      if (struct.isSetCertType()) {
        oprot.writeI32(struct.certType);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetWorkUnit()) {
        oprot.writeString(struct.workUnit);
      }
      if (struct.isSetPerStatus()) {
        oprot.writeI32(struct.perStatus);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCusStatusVal()) {
        oprot.writeString(struct.cusStatusVal);
      }
      if (struct.isSetMail()) {
        oprot.writeString(struct.mail);
      }
      if (struct.isSetRelationVal()) {
        oprot.writeI32(struct.relationVal);
      }
      if (struct.isSetRelationText()) {
        oprot.writeString(struct.relationText);
      }
      if (struct.isSetWorkService()) {
        oprot.writeString(struct.workService);
      }
      if (struct.isSetMonthIncome()) {
        oprot.writeDouble(struct.monthIncome);
      }
      if (struct.isSetComAllNatureText()) {
        oprot.writeString(struct.comAllNatureText);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetProjectPublicManId()) {
        oprot.writeI32(struct.projectPublicManId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter172 : struct.userIds)
          {
            oprot.writeI32(_iter172);
          }
        }
      }
      if (struct.isSetProportionProperty()) {
        oprot.writeDouble(struct.proportionProperty);
      }
      if (struct.isSetLiveAddr()) {
        oprot.writeString(struct.liveAddr);
      }
      if (struct.isSetCensusAddr()) {
        oprot.writeString(struct.censusAddr);
      }
      if (struct.isSetCertAddr()) {
        oprot.writeString(struct.certAddr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(43);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpyName = iprot.readString();
        struct.setCpyNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpyAbbrName = iprot.readString();
        struct.setCpyAbbrNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.busLicCert = iprot.readString();
        struct.setBusLicCertIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cusTelephone = iprot.readString();
        struct.setCusTelephoneIsSet(true);
      }
      if (incoming.get(7)) {
        struct.commAddr = iprot.readString();
        struct.setCommAddrIsSet(true);
      }
      if (incoming.get(8)) {
        struct.chinaName = iprot.readString();
        struct.setChinaNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sexName = iprot.readString();
        struct.setSexNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.certTypeName = iprot.readString();
        struct.setCertTypeNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.certNumber = iprot.readString();
        struct.setCertNumberIsSet(true);
      }
      if (incoming.get(12)) {
        struct.perTelephone = iprot.readString();
        struct.setPerTelephoneIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cusMail = iprot.readString();
        struct.setCusMailIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cusRegMoney = iprot.readDouble();
        struct.setCusRegMoneyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cusFoundDate = iprot.readString();
        struct.setCusFoundDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.cusStatus = iprot.readI32();
        struct.setCusStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.curType = iprot.readString();
        struct.setCurTypeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.ecoTrade = iprot.readI32();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.marrName = iprot.readString();
        struct.setMarrNameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.commCode = iprot.readString();
        struct.setCommCodeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.certType = iprot.readI32();
        struct.setCertTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(24)) {
        struct.workUnit = iprot.readString();
        struct.setWorkUnitIsSet(true);
      }
      if (incoming.get(25)) {
        struct.perStatus = iprot.readI32();
        struct.setPerStatusIsSet(true);
      }
      if (incoming.get(26)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(27)) {
        struct.cusStatusVal = iprot.readString();
        struct.setCusStatusValIsSet(true);
      }
      if (incoming.get(28)) {
        struct.mail = iprot.readString();
        struct.setMailIsSet(true);
      }
      if (incoming.get(29)) {
        struct.relationVal = iprot.readI32();
        struct.setRelationValIsSet(true);
      }
      if (incoming.get(30)) {
        struct.relationText = iprot.readString();
        struct.setRelationTextIsSet(true);
      }
      if (incoming.get(31)) {
        struct.workService = iprot.readString();
        struct.setWorkServiceIsSet(true);
      }
      if (incoming.get(32)) {
        struct.monthIncome = iprot.readDouble();
        struct.setMonthIncomeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.comAllNatureText = iprot.readString();
        struct.setComAllNatureTextIsSet(true);
      }
      if (incoming.get(34)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(35)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(36)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(37)) {
        struct.projectPublicManId = iprot.readI32();
        struct.setProjectPublicManIdIsSet(true);
      }
      if (incoming.get(38)) {
        {
          org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list173.size);
          int _elem174;
          for (int _i175 = 0; _i175 < _list173.size; ++_i175)
          {
            _elem174 = iprot.readI32();
            struct.userIds.add(_elem174);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(39)) {
        struct.proportionProperty = iprot.readDouble();
        struct.setProportionPropertyIsSet(true);
      }
      if (incoming.get(40)) {
        struct.liveAddr = iprot.readString();
        struct.setLiveAddrIsSet(true);
      }
      if (incoming.get(41)) {
        struct.censusAddr = iprot.readString();
        struct.setCensusAddrIsSet(true);
      }
      if (incoming.get(42)) {
        struct.certAddr = iprot.readString();
        struct.setCertAddrIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.workday;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-27")
public class WorkDay implements org.apache.thrift.TBase<WorkDay, WorkDay._Fields>, java.io.Serializable, Cloneable, Comparable<WorkDay> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkDay");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CORRECT_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("correctYear", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CORRECT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("correctDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_HOLIDAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("isHolidays", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FROM_CORRECT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromCorrectDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TO_CORRECT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toCorrectDate", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkDayStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkDayTupleSchemeFactory());
  }

  public int pid; // required
  public int correctYear; // required
  public String correctDate; // required
  public int isHolidays; // required
  public String remark; // required
  public int createId; // required
  public String createDate; // required
  public int updateId; // required
  public String updateDate; // required
  public int page; // required
  public int rows; // required
  public String fromCorrectDate; // required
  public String toCorrectDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CORRECT_YEAR((short)2, "correctYear"),
    CORRECT_DATE((short)3, "correctDate"),
    IS_HOLIDAYS((short)4, "isHolidays"),
    REMARK((short)5, "remark"),
    CREATE_ID((short)6, "createId"),
    CREATE_DATE((short)7, "createDate"),
    UPDATE_ID((short)8, "updateId"),
    UPDATE_DATE((short)9, "updateDate"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    FROM_CORRECT_DATE((short)12, "fromCorrectDate"),
    TO_CORRECT_DATE((short)13, "toCorrectDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CORRECT_YEAR
          return CORRECT_YEAR;
        case 3: // CORRECT_DATE
          return CORRECT_DATE;
        case 4: // IS_HOLIDAYS
          return IS_HOLIDAYS;
        case 5: // REMARK
          return REMARK;
        case 6: // CREATE_ID
          return CREATE_ID;
        case 7: // CREATE_DATE
          return CREATE_DATE;
        case 8: // UPDATE_ID
          return UPDATE_ID;
        case 9: // UPDATE_DATE
          return UPDATE_DATE;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // FROM_CORRECT_DATE
          return FROM_CORRECT_DATE;
        case 13: // TO_CORRECT_DATE
          return TO_CORRECT_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CORRECTYEAR_ISSET_ID = 1;
  private static final int __ISHOLIDAYS_ISSET_ID = 2;
  private static final int __CREATEID_ISSET_ID = 3;
  private static final int __UPDATEID_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECT_YEAR, new org.apache.thrift.meta_data.FieldMetaData("correctYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECT_DATE, new org.apache.thrift.meta_data.FieldMetaData("correctDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_HOLIDAYS, new org.apache.thrift.meta_data.FieldMetaData("isHolidays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_ID, new org.apache.thrift.meta_data.FieldMetaData("createId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FROM_CORRECT_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromCorrectDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_CORRECT_DATE, new org.apache.thrift.meta_data.FieldMetaData("toCorrectDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkDay.class, metaDataMap);
  }

  public WorkDay() {
    this.page = 1;

    this.rows = 10;

  }

  public WorkDay(
    int pid,
    int correctYear,
    String correctDate,
    int isHolidays,
    String remark,
    int createId,
    String createDate,
    int updateId,
    String updateDate,
    int page,
    int rows,
    String fromCorrectDate,
    String toCorrectDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.correctYear = correctYear;
    setCorrectYearIsSet(true);
    this.correctDate = correctDate;
    this.isHolidays = isHolidays;
    setIsHolidaysIsSet(true);
    this.remark = remark;
    this.createId = createId;
    setCreateIdIsSet(true);
    this.createDate = createDate;
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.fromCorrectDate = fromCorrectDate;
    this.toCorrectDate = toCorrectDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkDay(WorkDay other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.correctYear = other.correctYear;
    if (other.isSetCorrectDate()) {
      this.correctDate = other.correctDate;
    }
    this.isHolidays = other.isHolidays;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.createId = other.createId;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetFromCorrectDate()) {
      this.fromCorrectDate = other.fromCorrectDate;
    }
    if (other.isSetToCorrectDate()) {
      this.toCorrectDate = other.toCorrectDate;
    }
  }

  public WorkDay deepCopy() {
    return new WorkDay(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setCorrectYearIsSet(false);
    this.correctYear = 0;
    this.correctDate = null;
    setIsHolidaysIsSet(false);
    this.isHolidays = 0;
    this.remark = null;
    setCreateIdIsSet(false);
    this.createId = 0;
    this.createDate = null;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.page = 1;

    this.rows = 10;

    this.fromCorrectDate = null;
    this.toCorrectDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public WorkDay setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCorrectYear() {
    return this.correctYear;
  }

  public WorkDay setCorrectYear(int correctYear) {
    this.correctYear = correctYear;
    setCorrectYearIsSet(true);
    return this;
  }

  public void unsetCorrectYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTYEAR_ISSET_ID);
  }

  /** Returns true if field correctYear is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectYear() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTYEAR_ISSET_ID);
  }

  public void setCorrectYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTYEAR_ISSET_ID, value);
  }

  public String getCorrectDate() {
    return this.correctDate;
  }

  public WorkDay setCorrectDate(String correctDate) {
    this.correctDate = correctDate;
    return this;
  }

  public void unsetCorrectDate() {
    this.correctDate = null;
  }

  /** Returns true if field correctDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectDate() {
    return this.correctDate != null;
  }

  public void setCorrectDateIsSet(boolean value) {
    if (!value) {
      this.correctDate = null;
    }
  }

  public int getIsHolidays() {
    return this.isHolidays;
  }

  public WorkDay setIsHolidays(int isHolidays) {
    this.isHolidays = isHolidays;
    setIsHolidaysIsSet(true);
    return this;
  }

  public void unsetIsHolidays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHOLIDAYS_ISSET_ID);
  }

  /** Returns true if field isHolidays is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHolidays() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHOLIDAYS_ISSET_ID);
  }

  public void setIsHolidaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHOLIDAYS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public WorkDay setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getCreateId() {
    return this.createId;
  }

  public WorkDay setCreateId(int createId) {
    this.createId = createId;
    setCreateIdIsSet(true);
    return this;
  }

  public void unsetCreateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEID_ISSET_ID);
  }

  /** Returns true if field createId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEID_ISSET_ID);
  }

  public void setCreateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEID_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public WorkDay setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public WorkDay setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public WorkDay setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public WorkDay setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public WorkDay setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getFromCorrectDate() {
    return this.fromCorrectDate;
  }

  public WorkDay setFromCorrectDate(String fromCorrectDate) {
    this.fromCorrectDate = fromCorrectDate;
    return this;
  }

  public void unsetFromCorrectDate() {
    this.fromCorrectDate = null;
  }

  /** Returns true if field fromCorrectDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromCorrectDate() {
    return this.fromCorrectDate != null;
  }

  public void setFromCorrectDateIsSet(boolean value) {
    if (!value) {
      this.fromCorrectDate = null;
    }
  }

  public String getToCorrectDate() {
    return this.toCorrectDate;
  }

  public WorkDay setToCorrectDate(String toCorrectDate) {
    this.toCorrectDate = toCorrectDate;
    return this;
  }

  public void unsetToCorrectDate() {
    this.toCorrectDate = null;
  }

  /** Returns true if field toCorrectDate is set (has been assigned a value) and false otherwise */
  public boolean isSetToCorrectDate() {
    return this.toCorrectDate != null;
  }

  public void setToCorrectDateIsSet(boolean value) {
    if (!value) {
      this.toCorrectDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CORRECT_YEAR:
      if (value == null) {
        unsetCorrectYear();
      } else {
        setCorrectYear((Integer)value);
      }
      break;

    case CORRECT_DATE:
      if (value == null) {
        unsetCorrectDate();
      } else {
        setCorrectDate((String)value);
      }
      break;

    case IS_HOLIDAYS:
      if (value == null) {
        unsetIsHolidays();
      } else {
        setIsHolidays((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_ID:
      if (value == null) {
        unsetCreateId();
      } else {
        setCreateId((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case FROM_CORRECT_DATE:
      if (value == null) {
        unsetFromCorrectDate();
      } else {
        setFromCorrectDate((String)value);
      }
      break;

    case TO_CORRECT_DATE:
      if (value == null) {
        unsetToCorrectDate();
      } else {
        setToCorrectDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CORRECT_YEAR:
      return Integer.valueOf(getCorrectYear());

    case CORRECT_DATE:
      return getCorrectDate();

    case IS_HOLIDAYS:
      return Integer.valueOf(getIsHolidays());

    case REMARK:
      return getRemark();

    case CREATE_ID:
      return Integer.valueOf(getCreateId());

    case CREATE_DATE:
      return getCreateDate();

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case FROM_CORRECT_DATE:
      return getFromCorrectDate();

    case TO_CORRECT_DATE:
      return getToCorrectDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CORRECT_YEAR:
      return isSetCorrectYear();
    case CORRECT_DATE:
      return isSetCorrectDate();
    case IS_HOLIDAYS:
      return isSetIsHolidays();
    case REMARK:
      return isSetRemark();
    case CREATE_ID:
      return isSetCreateId();
    case CREATE_DATE:
      return isSetCreateDate();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case FROM_CORRECT_DATE:
      return isSetFromCorrectDate();
    case TO_CORRECT_DATE:
      return isSetToCorrectDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkDay)
      return this.equals((WorkDay)that);
    return false;
  }

  public boolean equals(WorkDay that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_correctYear = true;
    boolean that_present_correctYear = true;
    if (this_present_correctYear || that_present_correctYear) {
      if (!(this_present_correctYear && that_present_correctYear))
        return false;
      if (this.correctYear != that.correctYear)
        return false;
    }

    boolean this_present_correctDate = true && this.isSetCorrectDate();
    boolean that_present_correctDate = true && that.isSetCorrectDate();
    if (this_present_correctDate || that_present_correctDate) {
      if (!(this_present_correctDate && that_present_correctDate))
        return false;
      if (!this.correctDate.equals(that.correctDate))
        return false;
    }

    boolean this_present_isHolidays = true;
    boolean that_present_isHolidays = true;
    if (this_present_isHolidays || that_present_isHolidays) {
      if (!(this_present_isHolidays && that_present_isHolidays))
        return false;
      if (this.isHolidays != that.isHolidays)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createId = true;
    boolean that_present_createId = true;
    if (this_present_createId || that_present_createId) {
      if (!(this_present_createId && that_present_createId))
        return false;
      if (this.createId != that.createId)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_fromCorrectDate = true && this.isSetFromCorrectDate();
    boolean that_present_fromCorrectDate = true && that.isSetFromCorrectDate();
    if (this_present_fromCorrectDate || that_present_fromCorrectDate) {
      if (!(this_present_fromCorrectDate && that_present_fromCorrectDate))
        return false;
      if (!this.fromCorrectDate.equals(that.fromCorrectDate))
        return false;
    }

    boolean this_present_toCorrectDate = true && this.isSetToCorrectDate();
    boolean that_present_toCorrectDate = true && that.isSetToCorrectDate();
    if (this_present_toCorrectDate || that_present_toCorrectDate) {
      if (!(this_present_toCorrectDate && that_present_toCorrectDate))
        return false;
      if (!this.toCorrectDate.equals(that.toCorrectDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_correctYear = true;
    list.add(present_correctYear);
    if (present_correctYear)
      list.add(correctYear);

    boolean present_correctDate = true && (isSetCorrectDate());
    list.add(present_correctDate);
    if (present_correctDate)
      list.add(correctDate);

    boolean present_isHolidays = true;
    list.add(present_isHolidays);
    if (present_isHolidays)
      list.add(isHolidays);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createId = true;
    list.add(present_createId);
    if (present_createId)
      list.add(createId);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_fromCorrectDate = true && (isSetFromCorrectDate());
    list.add(present_fromCorrectDate);
    if (present_fromCorrectDate)
      list.add(fromCorrectDate);

    boolean present_toCorrectDate = true && (isSetToCorrectDate());
    list.add(present_toCorrectDate);
    if (present_toCorrectDate)
      list.add(toCorrectDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkDay other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectYear()).compareTo(other.isSetCorrectYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctYear, other.correctYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectDate()).compareTo(other.isSetCorrectDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctDate, other.correctDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHolidays()).compareTo(other.isSetIsHolidays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHolidays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHolidays, other.isHolidays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateId()).compareTo(other.isSetCreateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createId, other.createId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromCorrectDate()).compareTo(other.isSetFromCorrectDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromCorrectDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromCorrectDate, other.fromCorrectDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToCorrectDate()).compareTo(other.isSetToCorrectDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToCorrectDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toCorrectDate, other.toCorrectDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkDay(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctYear:");
    sb.append(this.correctYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctDate:");
    if (this.correctDate == null) {
      sb.append("null");
    } else {
      sb.append(this.correctDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHolidays:");
    sb.append(this.isHolidays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createId:");
    sb.append(this.createId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromCorrectDate:");
    if (this.fromCorrectDate == null) {
      sb.append("null");
    } else {
      sb.append(this.fromCorrectDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toCorrectDate:");
    if (this.toCorrectDate == null) {
      sb.append("null");
    } else {
      sb.append(this.toCorrectDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkDayStandardSchemeFactory implements SchemeFactory {
    public WorkDayStandardScheme getScheme() {
      return new WorkDayStandardScheme();
    }
  }

  private static class WorkDayStandardScheme extends StandardScheme<WorkDay> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkDay struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CORRECT_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.correctYear = iprot.readI32();
              struct.setCorrectYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CORRECT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.correctDate = iprot.readString();
              struct.setCorrectDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_HOLIDAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isHolidays = iprot.readI32();
              struct.setIsHolidaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createId = iprot.readI32();
              struct.setCreateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FROM_CORRECT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromCorrectDate = iprot.readString();
              struct.setFromCorrectDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TO_CORRECT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toCorrectDate = iprot.readString();
              struct.setToCorrectDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkDay struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CORRECT_YEAR_FIELD_DESC);
      oprot.writeI32(struct.correctYear);
      oprot.writeFieldEnd();
      if (struct.correctDate != null) {
        oprot.writeFieldBegin(CORRECT_DATE_FIELD_DESC);
        oprot.writeString(struct.correctDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_HOLIDAYS_FIELD_DESC);
      oprot.writeI32(struct.isHolidays);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_ID_FIELD_DESC);
      oprot.writeI32(struct.createId);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.fromCorrectDate != null) {
        oprot.writeFieldBegin(FROM_CORRECT_DATE_FIELD_DESC);
        oprot.writeString(struct.fromCorrectDate);
        oprot.writeFieldEnd();
      }
      if (struct.toCorrectDate != null) {
        oprot.writeFieldBegin(TO_CORRECT_DATE_FIELD_DESC);
        oprot.writeString(struct.toCorrectDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkDayTupleSchemeFactory implements SchemeFactory {
    public WorkDayTupleScheme getScheme() {
      return new WorkDayTupleScheme();
    }
  }

  private static class WorkDayTupleScheme extends TupleScheme<WorkDay> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkDay struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCorrectYear()) {
        optionals.set(1);
      }
      if (struct.isSetCorrectDate()) {
        optionals.set(2);
      }
      if (struct.isSetIsHolidays()) {
        optionals.set(3);
      }
      if (struct.isSetRemark()) {
        optionals.set(4);
      }
      if (struct.isSetCreateId()) {
        optionals.set(5);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(6);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      if (struct.isSetFromCorrectDate()) {
        optionals.set(11);
      }
      if (struct.isSetToCorrectDate()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCorrectYear()) {
        oprot.writeI32(struct.correctYear);
      }
      if (struct.isSetCorrectDate()) {
        oprot.writeString(struct.correctDate);
      }
      if (struct.isSetIsHolidays()) {
        oprot.writeI32(struct.isHolidays);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateId()) {
        oprot.writeI32(struct.createId);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetFromCorrectDate()) {
        oprot.writeString(struct.fromCorrectDate);
      }
      if (struct.isSetToCorrectDate()) {
        oprot.writeString(struct.toCorrectDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkDay struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.correctYear = iprot.readI32();
        struct.setCorrectYearIsSet(true);
      }
      if (incoming.get(2)) {
        struct.correctDate = iprot.readString();
        struct.setCorrectDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isHolidays = iprot.readI32();
        struct.setIsHolidaysIsSet(true);
      }
      if (incoming.get(4)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createId = iprot.readI32();
        struct.setCreateIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fromCorrectDate = iprot.readString();
        struct.setFromCorrectDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.toCorrectDate = iprot.readString();
        struct.setToCorrectDateIsSet(true);
      }
    }
  }

}

